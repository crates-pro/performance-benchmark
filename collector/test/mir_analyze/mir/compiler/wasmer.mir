// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn env::<impl at lib/api/src/env.rs:5:10: 5:15>::fmt(_1: &HostEnvInitError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &&exports::ExportError;
    let _11: &exports::ExportError;
    let mut _12: &&exports::ExportError;
    scope 1 {
        let _3: &exports::ExportError;
        scope 2 {
            debug _0 => _3;
            let mut _13: &[&str; 1];
        }
    }

    bb0: {
        _3 = &(((*_1) as Export).0: exports::ExportError);
        _13 = const _;
        _5 = _13 as &[&str] (PointerCoercion(Unsize));
        _12 = &_3;
        _11 = <&ExportError as DisplayAsDisplay>::as_display(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<&ExportError>(_10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = Formatter::<'_>::write_fmt(_2, move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in env::<impl at lib/api/src/env.rs:5:10: 5:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Host env initialization error: "];
        _0 = &_1;
        return;
    }
}

fn env::<impl at lib/api/src/env.rs:5:17: 5:22>::fmt(_1: &HostEnvInitError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &exports::ExportError;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&exports::ExportError;
    scope 1 {
        debug __self_0 => _3;
    }

    bb0: {
        _3 = &(((*_1) as Export).0: exports::ExportError);
        _4 = const "Export";
        _6 = &_3;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn env::<impl at lib/api/src/env.rs:12:1: 12:44>::from(_1: ExportError) -> HostEnvInitError {
    debug other => _1;
    let mut _0: env::HostEnvInitError;

    bb0: {
        _0 = HostEnvInitError::Export(move _1);
        return;
    }
}

fn WasmerEnv::init_with_instance(_1: &mut Self, _2: &instance::Instance) -> Result<(), HostEnvInitError> {
    debug self => _1;
    debug _instance => _2;
    let mut _0: std::result::Result<(), env::HostEnvInitError>;

    bb0: {
        _0 = Result::<(), HostEnvInitError>::Ok(const ());
        return;
    }
}

fn env::<impl at lib/api/src/env.rs:123:1: 123:40>::init_with_instance(_1: &mut Box<T>, _2: &instance::Instance) -> Result<(), HostEnvInitError> {
    debug self => _1;
    debug instance => _2;
    let mut _0: std::result::Result<(), env::HostEnvInitError>;
    let mut _3: &mut T;
    let mut _4: std::boxed::Box<T>;
    let mut _5: *const T;

    bb0: {
        _4 = deref_copy (*_1);
        _5 = (((_4.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T);
        _3 = &mut (*_5);
        _0 = <T as WasmerEnv>::init_with_instance(_3, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn env::<impl at lib/api/src/env.rs:129:1: 129:73>::init_with_instance(_1: &mut Arc<Mutex<T>>, _2: &instance::Instance) -> Result<(), HostEnvInitError> {
    debug self => _1;
    debug instance => _2;
    let mut _0: std::result::Result<(), env::HostEnvInitError>;
    let mut _3: std::sync::MutexGuard<'_, T>;
    let mut _4: std::result::Result<std::sync::MutexGuard<'_, T>, std::sync::PoisonError<std::sync::MutexGuard<'_, T>>>;
    let _5: &std::sync::Mutex<T>;
    let mut _6: &std::sync::Arc<std::sync::Mutex<T>>;
    let mut _7: &mut T;
    let mut _8: &mut std::sync::MutexGuard<'_, T>;
    scope 1 {
        debug guard => _3;
    }

    bb0: {
        _6 = &(*_1);
        _5 = <Arc<Mutex<T>> as Deref>::deref(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Mutex::<T>::lock(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = Result::<MutexGuard<'_, T>, PoisonError<MutexGuard<'_, T>>>::unwrap(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = &mut _3;
        _7 = <MutexGuard<'_, T> as DerefMut>::deref_mut(move _8) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _0 = <T as WasmerEnv>::init_with_instance(_7, _2) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_3) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn env::<impl at lib/api/src/env.rs:144:1: 144:20>::new() -> LazyInit<T> {
    let mut _0: env::LazyInit<T>;
    let mut _1: std::mem::MaybeUninit<T>;

    bb0: {
        _1 = MaybeUninit::<T>::uninit() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = LazyInit::<T> { data: move _1, initialized: const false };
        return;
    }
}

fn env::<impl at lib/api/src/env.rs:144:1: 144:20>::get_unchecked(_1: &LazyInit<T>) -> &T {
    debug self => _1;
    let mut _0: &T;
    let _2: *const T;
    let mut _3: &std::mem::MaybeUninit<T>;

    bb0: {
        _3 = &((*_1).0: std::mem::MaybeUninit<T>);
        _2 = MaybeUninit::<T>::as_ptr(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &(*_2);
        return;
    }
}

fn env::<impl at lib/api/src/env.rs:144:1: 144:20>::get_ref(_1: &LazyInit<T>) -> Option<&T> {
    debug self => _1;
    let mut _0: std::option::Option<&T>;
    let mut _2: bool;
    let _3: &T;
    scope 1 {
    }

    bb0: {
        _2 = ((*_1).1: bool);
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = Option::<&T>::None;
        goto -> bb4;
    }

    bb2: {
        _3 = LazyInit::<T>::get_unchecked(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = Option::<&T>::Some(_3);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn env::<impl at lib/api/src/env.rs:144:1: 144:20>::initialize(_1: &mut LazyInit<T>, _2: T) -> bool {
    debug self => _1;
    debug value => _2;
    let mut _0: bool;
    let mut _3: bool;
    let _4: ();
    let mut _5: *mut T;
    let mut _6: &mut std::mem::MaybeUninit<T>;
    let mut _7: T;
    let mut _8: bool;
    scope 1 {
    }

    bb0: {
        _8 = const false;
        _8 = const true;
        _3 = ((*_1).1: bool);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const false;
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb2: {
        _6 = &mut ((*_1).0: std::mem::MaybeUninit<T>);
        _5 = MaybeUninit::<T>::as_mut_ptr(move _6) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _8 = const false;
        _7 = move _2;
        _4 = std::ptr::mut_ptr::<impl *mut T>::write(move _5, move _7) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        ((*_1).1: bool) = const true;
        _0 = const true;
        goto -> bb5;
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_8) -> [0: bb6, otherwise: bb7];
    }
}

fn env::<impl at lib/api/src/env.rs:181:1: 181:57>::fmt(_1: &LazyInit<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _4: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _5: std::fmt::DebugStruct<'_, '_>;
    let _6: &str;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::option::Option<&T>;
    let _10: std::option::Option<&T>;

    bb0: {
        _6 = const "LazyInit";
        _5 = Formatter::<'_>::debug_struct(_2, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = const "data";
        _10 = LazyInit::<T>::get_ref(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _3 = DebugStruct::<'_, '_>::field(move _4, _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = DebugStruct::<'_, '_>::finish(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn env::<impl at lib/api/src/env.rs:189:1: 189:37>::clone(_1: &LazyInit<T>) -> LazyInit<T> {
    debug self => _1;
    let mut _0: env::LazyInit<T>;
    let mut _2: std::option::Option<&T>;
    let mut _3: isize;
    let mut _5: std::mem::MaybeUninit<T>;
    let mut _6: T;
    let mut _7: std::mem::MaybeUninit<T>;
    scope 1 {
        debug inner => _4;
        let _4: &T;
    }

    bb0: {
        _2 = LazyInit::<T>::get_ref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [1: bb2, otherwise: bb5];
    }

    bb2: {
        _4 = ((_2 as Some).0: &T);
        _6 = <T as Clone>::clone(_4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = MaybeUninit::<T>::new(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = LazyInit::<T> { data: move _5, initialized: const true };
        goto -> bb7;
    }

    bb5: {
        _7 = MaybeUninit::<T>::uninit() -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = LazyInit::<T> { data: move _7, initialized: const false };
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn env::<impl at lib/api/src/env.rs:205:1: 205:29>::drop(_1: &mut LazyInit<T>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: bool;
    let mut _4: &mut std::mem::MaybeUninit<T>;
    let _5: ();
    scope 1 {
        let _3: *mut T;
        scope 2 {
            debug ptr => _3;
        }
    }

    bb0: {
        _2 = ((*_1).1: bool);
        switchInt(move _2) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _4 = &mut ((*_1).0: std::mem::MaybeUninit<T>);
        _3 = MaybeUninit::<T>::as_mut_ptr(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = std::ptr::drop_in_place::<T>(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn env::<impl at lib/api/src/env.rs:216:1: 216:32>::default() -> LazyInit<T> {
    let mut _0: env::LazyInit<T>;

    bb0: {
        _0 = LazyInit::<T>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:50:10: 50:15>::fmt(_1: &ExportError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &&std::string::String;
    let _14: &std::string::String;
    let mut _15: &&std::string::String;
    scope 1 {
        let _6: &std::string::String;
        let mut _17: &[&str; 1];
        scope 2 {
            debug _0 => _6;
            let mut _16: &[&str; 1];
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = &(((*_1) as Missing).0: std::string::String);
        _16 = const _;
        _8 = _16 as &[&str] (PointerCoercion(Unsize));
        _15 = &_6;
        _14 = <&String as DisplayAsDisplay>::as_display(move _15) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _17 = const _;
        _5 = _17 as &[&str] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Formatter::<'_>::write_fmt(_2, move _4) -> [return: bb8, unwind continue];
    }

    bb5: {
        _13 = &_14;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<&String>(_13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = Formatter::<'_>::write_fmt(_2, move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

promoted[0] in exports::<impl at lib/api/src/exports.rs:50:10: 50:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Missing export "];
        _0 = &_1;
        return;
    }
}

promoted[1] in exports::<impl at lib/api/src/exports.rs:50:10: 50:15>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Incompatible Export Type"];
        _0 = &_1;
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:50:17: 50:22>::fmt(_1: &ExportError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &str;
    let _5: &std::string::String;
    let _6: &str;
    let mut _7: &dyn std::fmt::Debug;
    let _8: &&std::string::String;
    scope 1 {
        debug __self_0 => _5;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as Missing).0: std::string::String);
        _6 = const "Missing";
        _8 = &_5;
        _7 = _8 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _6, move _7) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = const "IncompatibleType";
        _0 = Formatter::<'_>::write_str(_2, _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:65:10: 65:15>::clone(_1: &Exports) -> Exports {
    debug self => _1;
    let mut _0: exports::Exports;
    let mut _2: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;
    let _3: &std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;

    bb0: {
        _3 = &((*_1).0: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>);
        _2 = <Arc<IndexMap<String, Extern>> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Exports { map: move _2 };
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:65:17: 65:24>::default() -> Exports {
    let mut _0: exports::Exports;
    let mut _1: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;

    bb0: {
        _1 = <Arc<IndexMap<String, Extern>> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Exports { map: move _1 };
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:65:26: 65:37>::size_of_val(_1: &Exports, _2: &mut dyn MemoryUsageTracker) -> usize {
    debug self => _1;
    debug visited => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let _6: &std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;
    let mut _7: (usize, bool);
    let mut _8: usize;
    let _9: &std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;
    let mut _10: (usize, bool);

    bb0: {
        _4 = std::mem::size_of_val::<Exports>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &((*_1).0: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>);
        _5 = <Arc<IndexMap<String, Extern>> as MemoryUsage>::size_of_val(_6, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = CheckedAdd(_4, _5);
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb3, unwind continue];
    }

    bb3: {
        _3 = move (_7.0: usize);
        _9 = &((*_1).0: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>);
        _8 = std::mem::size_of_val::<Arc<IndexMap<String, Extern>>>(_9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = CheckedSub(_3, _8);
        assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _8) -> [success: bb5, unwind continue];
    }

    bb5: {
        _0 = move (_10.0: usize);
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::new() -> Exports {
    let mut _0: exports::Exports;

    bb0: {
        _0 = <Exports as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::with_capacity(_1: usize) -> Exports {
    debug n => _1;
    let mut _0: exports::Exports;
    let mut _2: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;
    let mut _3: indexmap::IndexMap<std::string::String, externals::Extern>;

    bb0: {
        _3 = IndexMap::<String, Extern>::with_capacity(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Arc::<IndexMap<String, Extern>>::new(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Exports { map: move _2 };
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::len(_1: &Exports) -> usize {
    debug self => _1;
    let mut _0: usize;
    let _2: &indexmap::IndexMap<std::string::String, externals::Extern>;
    let mut _3: &std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;

    bb0: {
        _3 = &((*_1).0: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>);
        _2 = <Arc<IndexMap<String, Extern>> as Deref>::deref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = IndexMap::<String, Extern>::len(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::is_empty(_1: &Exports) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: usize;

    bb0: {
        _2 = Exports::len(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Eq(move _2, const 0_usize);
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::insert(_1: &mut Exports, _2: S, _3: E) -> () {
    debug self => _1;
    debug name => _2;
    debug value => _3;
    let mut _0: ();
    let _4: std::option::Option<externals::Extern>;
    let mut _5: &mut indexmap::IndexMap<std::string::String, externals::Extern>;
    let mut _6: std::option::Option<&mut indexmap::IndexMap<std::string::String, externals::Extern>>;
    let mut _7: &mut std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;
    let mut _8: std::string::String;
    let mut _9: S;
    let mut _10: externals::Extern;
    let mut _11: E;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;

    bb0: {
        _14 = const false;
        _13 = const false;
        _12 = const false;
        _14 = const true;
        _13 = const true;
        _7 = &mut ((*_1).0: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>);
        _6 = Arc::<IndexMap<String, Extern>>::get_mut(_7) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _5 = Option::<&mut IndexMap<String, Extern>>::unwrap(move _6) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _14 = const false;
        _9 = move _2;
        _8 = <S as Into<String>>::into(move _9) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _12 = const true;
        _13 = const false;
        _11 = move _3;
        _10 = <E as Into<Extern>>::into(move _11) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _12 = const false;
        _4 = IndexMap::<String, Extern>::insert(_5, move _8, move _10) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _12 = const false;
        drop(_4) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        switchInt(_14) -> [0: bb8, otherwise: bb13];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        drop(_8) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_12) -> [0: bb12, otherwise: bb9];
    }

    bb11 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_13) -> [0: bb7, otherwise: bb11];
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::get(_1: &Exports, _2: &str) -> Result<&T, ExportError> {
    debug self => _1;
    debug name => _2;
    let mut _0: std::result::Result<&T, exports::ExportError>;
    let mut _3: std::option::Option<&externals::Extern>;
    let _4: &indexmap::IndexMap<std::string::String, externals::Extern>;
    let mut _5: &std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;
    let mut _6: isize;
    let mut _7: exports::ExportError;
    let mut _8: std::string::String;
    let _9: &externals::Extern;
    scope 1 {
        debug extern_ => _9;
    }

    bb0: {
        _5 = &((*_1).0: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>);
        _4 = <Arc<IndexMap<String, Extern>> as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = IndexMap::<String, Extern>::get::<str>(_4, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _9 = ((_3 as Some).0: &externals::Extern);
        _0 = <T as Exportable<'_>>::get_self_from_extern(_9) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = <str as ToString>::to_string(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = ExportError::Missing(move _8);
        _0 = Result::<&T, ExportError>::Err(move _7);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::get_global(_1: &Exports, _2: &str) -> Result<&global::Global, ExportError> {
    debug self => _1;
    debug name => _2;
    let mut _0: std::result::Result<&externals::global::Global, exports::ExportError>;

    bb0: {
        _0 = Exports::get::<'_, global::Global>(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::get_memory(_1: &Exports, _2: &str) -> Result<&memory::Memory, ExportError> {
    debug self => _1;
    debug name => _2;
    let mut _0: std::result::Result<&externals::memory::Memory, exports::ExportError>;

    bb0: {
        _0 = Exports::get::<'_, memory::Memory>(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::get_table(_1: &Exports, _2: &str) -> Result<&table::Table, ExportError> {
    debug self => _1;
    debug name => _2;
    let mut _0: std::result::Result<&externals::table::Table, exports::ExportError>;

    bb0: {
        _0 = Exports::get::<'_, table::Table>(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::get_function(_1: &Exports, _2: &str) -> Result<&function::Function, ExportError> {
    debug self => _1;
    debug name => _2;
    let mut _0: std::result::Result<&externals::function::Function, exports::ExportError>;

    bb0: {
        _0 = Exports::get::<'_, function::Function>(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::get_native_function(_1: &Exports, _2: &str) -> Result<NativeFunc<Args, Rets>, ExportError> {
    debug self => _1;
    debug name => _2;
    let mut _0: std::result::Result<native::NativeFunc<Args, Rets>, exports::ExportError>;
    let mut _3: std::result::Result<native::NativeFunc<Args, Rets>, wasmer_engine::RuntimeError>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _5: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _8: &externals::function::Function;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _8;
        scope 4 {
        }
    }

    bb0: {
        _5 = Exports::get_function(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = ((_4 as Continue).0: &externals::function::Function);
        _3 = function::Function::native::<Args, Rets>(_8) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<Args, Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _7) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<Args, Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/exports.rs:153:22: 153:25}>(move _3, const ZeroSized: {closure@lib/api/src/exports.rs:153:22: 153:25}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::get_native_function::{closure#0}(_1: {closure@lib/api/src/exports.rs:153:22: 153:25}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::get_with_generics(_1: &Exports, _2: &str) -> Result<T, ExportError> {
    debug self => _1;
    debug name => _2;
    let mut _0: std::result::Result<T, exports::ExportError>;
    let mut _3: std::option::Option<&externals::Extern>;
    let _4: &indexmap::IndexMap<std::string::String, externals::Extern>;
    let mut _5: &std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;
    let mut _6: isize;
    let mut _7: exports::ExportError;
    let mut _8: std::string::String;
    let _9: &externals::Extern;
    scope 1 {
        debug extern_ => _9;
    }

    bb0: {
        _5 = &((*_1).0: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>);
        _4 = <Arc<IndexMap<String, Extern>> as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = IndexMap::<String, Extern>::get::<str>(_4, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _9 = ((_3 as Some).0: &externals::Extern);
        _0 = <T as ExportableWithGenerics<'_, Args, Rets>>::get_self_from_extern_with_generics(_9) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = <str as ToString>::to_string(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = ExportError::Missing(move _8);
        _0 = Result::<T, ExportError>::Err(move _7);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::get_with_generics_weak(_1: &Exports, _2: &str) -> Result<T, ExportError> {
    debug self => _1;
    debug name => _2;
    let mut _0: std::result::Result<T, exports::ExportError>;
    let mut _3: T;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, T>;
    let mut _5: std::result::Result<T, exports::ExportError>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _8: T;
    let _9: ();
    let mut _10: &mut T;
    let mut _11: T;
    scope 1 {
        debug out => _3;
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _5 = Exports::get_with_generics::<'_, T, Args, Rets>(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<T, ExportError> as std::ops::Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Continue).0: T);
        _3 = move _8;
        _10 = &mut _3;
        _9 = <T as ExportableWithGenerics<'_, Args, Rets>>::into_weak_instance_ref(move _10) -> [return: bb6, unwind: bb8];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<T, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _7) -> [return: bb7, unwind continue];
    }

    bb6: {
        _11 = move _3;
        _0 = Result::<T, ExportError>::Ok(move _11);
        goto -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::get_extern(_1: &Exports, _2: &str) -> Option<&Extern> {
    debug self => _1;
    debug name => _2;
    let mut _0: std::option::Option<&externals::Extern>;
    let _3: &indexmap::IndexMap<std::string::String, externals::Extern>;
    let mut _4: &std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;

    bb0: {
        _4 = &((*_1).0: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>);
        _3 = <Arc<IndexMap<String, Extern>> as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = IndexMap::<String, Extern>::get::<str>(_3, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::contains(_1: &Exports, _2: S) -> bool {
    debug self => _1;
    debug name => _2;
    let mut _0: bool;
    let _3: &indexmap::IndexMap<std::string::String, externals::Extern>;
    let mut _4: &std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;
    let _5: &std::string::String;
    let _6: std::string::String;
    let mut _7: S;
    let mut _8: bool;

    bb0: {
        _8 = const false;
        _8 = const true;
        _4 = &((*_1).0: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>);
        _3 = <Arc<IndexMap<String, Extern>> as Deref>::deref(move _4) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _8 = const false;
        _7 = move _2;
        _6 = <S as Into<String>>::into(move _7) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _5 = &_6;
        _0 = IndexMap::<String, Extern>::contains_key::<String>(_3, _5) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_6) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_8) -> [0: bb6, otherwise: bb7];
    }
}

fn exports::<impl at lib/api/src/exports.rs:70:1: 70:13>::iter(_1: &Exports) -> exports::ExportsIterator<'_, indexmap::map::Iter<'_, String, Extern>> {
    debug self => _1;
    let mut _0: exports::ExportsIterator<'_, indexmap::map::Iter<'_, std::string::String, externals::Extern>>;
    let mut _2: indexmap::map::Iter<'_, std::string::String, externals::Extern>;
    let _3: &indexmap::IndexMap<std::string::String, externals::Extern>;
    let mut _4: &std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;

    bb0: {
        _4 = &((*_1).0: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>);
        _3 = <Arc<IndexMap<String, Extern>> as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = IndexMap::<String, Extern>::iter(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = exports::ExportsIterator::<'_, indexmap::map::Iter<'_, String, Extern>> { iter: move _2 };
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:203:1: 203:28>::fmt(_1: &Exports, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &mut std::fmt::DebugSet<'_, '_>;
    let mut _4: &mut std::fmt::DebugSet<'_, '_>;
    let mut _5: std::fmt::DebugSet<'_, '_>;
    let mut _6: exports::ExportsIterator<'_, indexmap::map::Iter<'_, std::string::String, externals::Extern>>;

    bb0: {
        _5 = Formatter::<'_>::debug_set(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _6 = Exports::iter(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = DebugSet::<'_, '_>::entries::<(&String, &Extern), exports::ExportsIterator<'_, indexmap::map::Iter<'_, String, Extern>>>(move _4, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = DebugSet::<'_, '_>::finish(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:217:1: 219:58>::next(_1: &mut exports::ExportsIterator<'_, I>) -> Option<(&String, &Extern)> {
    debug self => _1;
    let mut _0: std::option::Option<(&std::string::String, &externals::Extern)>;
    let mut _2: &mut I;

    bb0: {
        _2 = &mut ((*_1).0: I);
        _0 = <I as Iterator>::next(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:228:1: 230:78>::len(_1: &exports::ExportsIterator<'_, I>) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: &I;

    bb0: {
        _2 = &((*_1).0: I);
        _0 = <I as ExactSizeIterator>::len(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:237:1: 239:58>::functions(_1: exports::ExportsIterator<'_, I>) -> FilterMap<I, {closure@lib/api/src/exports.rs:243:30: 243:46}> {
    debug self => _1;
    let mut _0: std::iter::FilterMap<I, {closure@lib/api/src/exports.rs:243:30: 243:46}>;
    let mut _2: I;

    bb0: {
        _2 = move (_1.0: I);
        _0 = <I as Iterator>::filter_map::<(&String, &function::Function), {closure@lib/api/src/exports.rs:243:30: 243:46}>(move _2, const ZeroSized: {closure@lib/api/src/exports.rs:243:30: 243:46}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:237:1: 239:58>::functions::{closure#0}(_1: &mut {closure@lib/api/src/exports.rs:243:30: 243:46}, _2: (&String, &Extern)) -> Option<(&String, &function::Function)> {
    let mut _0: std::option::Option<(&std::string::String, &externals::function::Function)>;
    let _3: &std::string::String;
    let _4: &externals::Extern;
    let mut _5: isize;
    let mut _7: (&std::string::String, &externals::function::Function);
    scope 1 {
        debug name => _3;
        debug export => _4;
        let _6: &externals::function::Function;
        scope 2 {
            debug function => _6;
        }
    }

    bb0: {
        _3 = (_2.0: &std::string::String);
        _4 = (_2.1: &externals::Extern);
        _5 = discriminant((*_4));
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = Option::<(&String, &function::Function)>::None;
        goto -> bb3;
    }

    bb2: {
        _6 = &(((*_4) as Function).0: externals::function::Function);
        _7 = (_3, _6);
        _0 = Option::<(&String, &function::Function)>::Some(move _7);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:237:1: 239:58>::memories(_1: exports::ExportsIterator<'_, I>) -> FilterMap<I, {closure@lib/api/src/exports.rs:251:30: 251:46}> {
    debug self => _1;
    let mut _0: std::iter::FilterMap<I, {closure@lib/api/src/exports.rs:251:30: 251:46}>;
    let mut _2: I;

    bb0: {
        _2 = move (_1.0: I);
        _0 = <I as Iterator>::filter_map::<(&String, &memory::Memory), {closure@lib/api/src/exports.rs:251:30: 251:46}>(move _2, const ZeroSized: {closure@lib/api/src/exports.rs:251:30: 251:46}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:237:1: 239:58>::memories::{closure#0}(_1: &mut {closure@lib/api/src/exports.rs:251:30: 251:46}, _2: (&String, &Extern)) -> Option<(&String, &memory::Memory)> {
    let mut _0: std::option::Option<(&std::string::String, &externals::memory::Memory)>;
    let _3: &std::string::String;
    let _4: &externals::Extern;
    let mut _5: isize;
    let mut _7: (&std::string::String, &externals::memory::Memory);
    scope 1 {
        debug name => _3;
        debug export => _4;
        let _6: &externals::memory::Memory;
        scope 2 {
            debug memory => _6;
        }
    }

    bb0: {
        _3 = (_2.0: &std::string::String);
        _4 = (_2.1: &externals::Extern);
        _5 = discriminant((*_4));
        switchInt(move _5) -> [3: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = Option::<(&String, &memory::Memory)>::None;
        goto -> bb3;
    }

    bb2: {
        _6 = &(((*_4) as Memory).0: externals::memory::Memory);
        _7 = (_3, _6);
        _0 = Option::<(&String, &memory::Memory)>::Some(move _7);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:237:1: 239:58>::globals(_1: exports::ExportsIterator<'_, I>) -> FilterMap<I, {closure@lib/api/src/exports.rs:259:30: 259:46}> {
    debug self => _1;
    let mut _0: std::iter::FilterMap<I, {closure@lib/api/src/exports.rs:259:30: 259:46}>;
    let mut _2: I;

    bb0: {
        _2 = move (_1.0: I);
        _0 = <I as Iterator>::filter_map::<(&String, &global::Global), {closure@lib/api/src/exports.rs:259:30: 259:46}>(move _2, const ZeroSized: {closure@lib/api/src/exports.rs:259:30: 259:46}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:237:1: 239:58>::globals::{closure#0}(_1: &mut {closure@lib/api/src/exports.rs:259:30: 259:46}, _2: (&String, &Extern)) -> Option<(&String, &global::Global)> {
    let mut _0: std::option::Option<(&std::string::String, &externals::global::Global)>;
    let _3: &std::string::String;
    let _4: &externals::Extern;
    let mut _5: isize;
    let mut _7: (&std::string::String, &externals::global::Global);
    scope 1 {
        debug name => _3;
        debug export => _4;
        let _6: &externals::global::Global;
        scope 2 {
            debug global => _6;
        }
    }

    bb0: {
        _3 = (_2.0: &std::string::String);
        _4 = (_2.1: &externals::Extern);
        _5 = discriminant((*_4));
        switchInt(move _5) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = Option::<(&String, &global::Global)>::None;
        goto -> bb3;
    }

    bb2: {
        _6 = &(((*_4) as Global).0: externals::global::Global);
        _7 = (_3, _6);
        _0 = Option::<(&String, &global::Global)>::Some(move _7);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:237:1: 239:58>::tables(_1: exports::ExportsIterator<'_, I>) -> FilterMap<I, {closure@lib/api/src/exports.rs:267:30: 267:46}> {
    debug self => _1;
    let mut _0: std::iter::FilterMap<I, {closure@lib/api/src/exports.rs:267:30: 267:46}>;
    let mut _2: I;

    bb0: {
        _2 = move (_1.0: I);
        _0 = <I as Iterator>::filter_map::<(&String, &table::Table), {closure@lib/api/src/exports.rs:267:30: 267:46}>(move _2, const ZeroSized: {closure@lib/api/src/exports.rs:267:30: 267:46}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:237:1: 239:58>::tables::{closure#0}(_1: &mut {closure@lib/api/src/exports.rs:267:30: 267:46}, _2: (&String, &Extern)) -> Option<(&String, &table::Table)> {
    let mut _0: std::option::Option<(&std::string::String, &externals::table::Table)>;
    let _3: &std::string::String;
    let _4: &externals::Extern;
    let mut _5: isize;
    let mut _7: (&std::string::String, &externals::table::Table);
    scope 1 {
        debug name => _3;
        debug export => _4;
        let _6: &externals::table::Table;
        scope 2 {
            debug table => _6;
        }
    }

    bb0: {
        _3 = (_2.0: &std::string::String);
        _4 = (_2.1: &externals::Extern);
        _5 = discriminant((*_4));
        switchInt(move _5) -> [2: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = Option::<(&String, &table::Table)>::None;
        goto -> bb3;
    }

    bb2: {
        _6 = &(((*_4) as Table).0: externals::table::Table);
        _7 = (_3, _6);
        _0 = Option::<(&String, &table::Table)>::Some(move _7);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:274:1: 274:48>::from_iter(_1: I) -> Exports {
    debug iter => _1;
    let mut _0: exports::Exports;
    let mut _2: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;
    let mut _3: indexmap::IndexMap<std::string::String, externals::Extern>;

    bb0: {
        _3 = <IndexMap<String, Extern> as FromIterator<(String, Extern)>>::from_iter::<I>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Arc::<IndexMap<String, Extern>>::new(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Exports { map: move _2 };
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:282:1: 282:31>::get_namespace_export(_1: &Exports, _2: &str) -> Option<wasmer_engine::Export> {
    debug self => _1;
    debug name => _2;
    let mut _0: std::option::Option<wasmer_engine::Export>;
    let mut _3: std::option::Option<&externals::Extern>;
    let _4: &indexmap::IndexMap<std::string::String, externals::Extern>;
    let mut _5: &std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;

    bb0: {
        _5 = &((*_1).0: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>);
        _4 = <Arc<IndexMap<String, Extern>> as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = IndexMap::<String, Extern>::get::<str>(_4, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Option::<&Extern>::map::<wasmer_engine::Export, {closure@lib/api/src/exports.rs:284:32: 284:43}>(move _3, const ZeroSized: {closure@lib/api/src/exports.rs:284:32: 284:43}) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:282:1: 282:31>::get_namespace_export::{closure#0}(_1: {closure@lib/api/src/exports.rs:284:32: 284:43}, _2: &Extern) -> wasmer_engine::Export {
    debug is_export => _2;
    let mut _0: wasmer_engine::Export;

    bb0: {
        _0 = <Extern as Exportable<'_>>::to_export(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:282:1: 282:31>::get_namespace_exports(_1: &Exports) -> Vec<(String, wasmer_engine::Export)> {
    debug self => _1;
    let mut _0: std::vec::Vec<(std::string::String, wasmer_engine::Export)>;
    let mut _2: std::iter::Map<indexmap::map::Iter<'_, std::string::String, externals::Extern>, {closure@lib/api/src/exports.rs:290:18: 290:26}>;
    let mut _3: indexmap::map::Iter<'_, std::string::String, externals::Extern>;
    let _4: &indexmap::IndexMap<std::string::String, externals::Extern>;
    let mut _5: &std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>;

    bb0: {
        _5 = &((*_1).0: std::sync::Arc<indexmap::IndexMap<std::string::String, externals::Extern>>);
        _4 = <Arc<IndexMap<String, Extern>> as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = IndexMap::<String, Extern>::iter(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = <indexmap::map::Iter<'_, String, Extern> as Iterator>::map::<(String, wasmer_engine::Export), {closure@lib/api/src/exports.rs:290:18: 290:26}>(move _3, const ZeroSized: {closure@lib/api/src/exports.rs:290:18: 290:26}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = <Map<indexmap::map::Iter<'_, String, Extern>, {closure@lib/api/src/exports.rs:290:18: 290:26}> as Iterator>::collect::<Vec<(String, wasmer_engine::Export)>>(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:282:1: 282:31>::get_namespace_exports::{closure#0}(_1: &mut {closure@lib/api/src/exports.rs:290:18: 290:26}, _2: (&String, &Extern)) -> (String, wasmer_engine::Export) {
    let mut _0: (std::string::String, wasmer_engine::Export);
    let _3: &std::string::String;
    let _4: &externals::Extern;
    let mut _5: std::string::String;
    let mut _6: wasmer_engine::Export;
    scope 1 {
        debug k => _3;
        debug v => _4;
    }

    bb0: {
        _3 = (_2.0: &std::string::String);
        _4 = (_2.1: &externals::Extern);
        _5 = <String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <Extern as Exportable<'_>>::to_export(_4) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = (move _5, move _6);
        return;
    }

    bb3 (cleanup): {
        drop(_5) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn exports::<impl at lib/api/src/exports.rs:331:1: 331:87>::get_self_from_extern_with_generics(_1: &Extern) -> Result<T, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<T, exports::ExportError>;
    let mut _2: std::result::Result<&T, exports::ExportError>;

    bb0: {
        _2 = <T as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<&T, ExportError>::map::<T, {closure@lib/api/src/exports.rs:333:46: 333:49}>(move _2, const ZeroSized: {closure@lib/api/src/exports.rs:333:46: 333:49}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:331:1: 331:87>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/exports.rs:333:46: 333:49}, _2: &T) -> T {
    debug i => _2;
    let mut _0: T;

    bb0: {
        _0 = <T as Clone>::clone(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn exports::<impl at lib/api/src/exports.rs:331:1: 331:87>::into_weak_instance_ref(_1: &mut T) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = <T as Exportable<'_>>::into_weak_instance_ref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:40:10: 40:19>::eq(_1: &function::Function, _2: &function::Function) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &store::Store;
    let mut _5: &store::Store;
    let mut _6: &wasmer_engine::ExportFunction;
    let mut _7: &wasmer_engine::ExportFunction;

    bb0: {
        _4 = &((*_1).0: store::Store);
        _5 = &((*_2).0: store::Store);
        _3 = <Store as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = &((*_1).1: wasmer_engine::ExportFunction);
        _7 = &((*_2).1: wasmer_engine::ExportFunction);
        _0 = <ExportFunction as PartialEq>::eq(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb3: {
        _0 = const false;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:40:21: 40:32>::size_of_val(_1: &function::Function, _2: &mut dyn MemoryUsageTracker) -> usize {
    debug self => _1;
    debug visited => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let _8: &store::Store;
    let mut _9: (usize, bool);
    let mut _10: usize;
    let _11: &store::Store;
    let mut _12: (usize, bool);
    let mut _13: usize;
    let _14: &wasmer_engine::ExportFunction;
    let mut _15: (usize, bool);
    let mut _16: usize;
    let _17: &wasmer_engine::ExportFunction;
    let mut _18: (usize, bool);

    bb0: {
        _6 = std::mem::size_of_val::<function::Function>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &((*_1).0: store::Store);
        _7 = <Store as MemoryUsage>::size_of_val(_8, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = CheckedAdd(_6, _7);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _7) -> [success: bb3, unwind continue];
    }

    bb3: {
        _5 = move (_9.0: usize);
        _11 = &((*_1).0: store::Store);
        _10 = std::mem::size_of_val::<Store>(_11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = CheckedSub(_5, _10);
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", move _5, move _10) -> [success: bb5, unwind continue];
    }

    bb5: {
        _4 = move (_12.0: usize);
        _14 = &((*_1).1: wasmer_engine::ExportFunction);
        _13 = <ExportFunction as MemoryUsage>::size_of_val(_14, _2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = CheckedAdd(_4, _13);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _13) -> [success: bb7, unwind continue];
    }

    bb7: {
        _3 = move (_15.0: usize);
        _17 = &((*_1).1: wasmer_engine::ExportFunction);
        _16 = std::mem::size_of_val::<ExportFunction>(_17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = CheckedSub(_3, _16);
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _16) -> [success: bb9, unwind continue];
    }

    bb9: {
        _0 = move (_18.0: usize);
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:46:1: 46:46>::write_value_to(_1: &function::Function, _2: *mut i128) -> () {
    debug self => _1;
    debug p => _2;
    let mut _0: ();
    let _3: wasmer_vm::VMFuncRef;
    let mut _4: std::result::Result<wasmer_vm::VMFuncRef, wasmer_engine::RuntimeError>;
    let _5: &wasmer_types::Value<externals::function::Function>;
    let _6: wasmer_types::Value<externals::function::Function>;
    let mut _7: std::option::Option<externals::function::Function>;
    let mut _8: externals::function::Function;
    let _9: &store::Store;
    let _10: ();
    let mut _11: *mut wasmer_vm::VMFuncRef;
    scope 1 {
        debug func_ref => _3;
    }

    bb0: {
        _8 = <function::Function as Clone>::clone(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = Option::<function::Function>::Some(move _8);
        _6 = Value::<function::Function>::FuncRef(move _7);
        _5 = &_6;
        _9 = &((*_1).0: store::Store);
        _4 = <Value<function::Function> as ValFuncRef>::into_vm_funcref(_5, _9) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = Result::<VMFuncRef, RuntimeError>::unwrap(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        drop(_6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = _2 as *mut wasmer_vm::VMFuncRef (PtrToPtr);
        _10 = std::ptr::write::<VMFuncRef>(move _11, _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_6) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:46:1: 46:46>::read_value_from(_1: &dyn Any, _2: *const i128) -> function::Function {
    debug store => _1;
    debug p => _2;
    let mut _0: externals::function::Function;
    let _3: wasmer_vm::VMFuncRef;
    let mut _4: *const wasmer_vm::VMFuncRef;
    let mut _6: std::option::Option<&store::Store>;
    let _7: &str;
    let mut _8: wasmer_types::Value<externals::function::Function>;
    let mut _9: isize;
    let mut _10: isize;
    let _11: !;
    let _13: !;
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &wasmer_types::Value<externals::function::Function>;
    let mut _22: bool;
    let mut _23: isize;
    let mut _24: isize;
    scope 1 {
        debug func_ref => _3;
        let _5: &store::Store;
        scope 2 {
            debug store => _5;
            let _12: wasmer_types::Value<externals::function::Function>;
            scope 3 {
                debug fr => _0;
            }
            scope 4 {
                debug other => _12;
                let mut _21: &[&str; 1];
            }
        }
    }

    bb0: {
        _22 = const false;
        _4 = _2 as *const wasmer_vm::VMFuncRef (PtrToPtr);
        _3 = std::ptr::read::<VMFuncRef>(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <(dyn Any + 'static)>::downcast_ref::<Store>(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = const "Store expected in `Function::read_value_from`. If you see this error message it likely means you're using a function ref in a place we don't yet support it -- sorry about the inconvenience.";
        _5 = Option::<&Store>::expect(move _6, _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _22 = const true;
        _8 = <Value<function::Function> as ValFuncRef>::from_vm_funcref(_3, _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [5: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = const false;
        _12 = move _8;
        _21 = const _;
        _15 = _21 as &[&str] (PointerCoercion(Unsize));
        _20 = &_12;
        _19 = core::fmt::rt::Argument::<'_>::new_debug::<Value<function::Function>>(_20) -> [return: bb9, unwind: bb11];
    }

    bb6: {
        _9 = discriminant(((_8 as FuncRef).0: std::option::Option<externals::function::Function>));
        switchInt(move _9) -> [0: bb8, 1: bb7, otherwise: bb19];
    }

    bb7: {
        _0 = move ((((_8 as FuncRef).0: std::option::Option<externals::function::Function>) as Some).0: externals::function::Function);
        _23 = discriminant(_8);
        switchInt(move _23) -> [5: bb14, otherwise: bb15];
    }

    bb8: {
        _11 = begin_panic::<&str>(const "Null funcref found in `Function::read_value_from`!") -> bb18;
    }

    bb9: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        _13 = panic_fmt(move _14) -> bb11;
    }

    bb11 (cleanup): {
        drop(_12) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13: {
        _22 = const false;
        _22 = const false;
        return;
    }

    bb14: {
        goto -> bb13;
    }

    bb15: {
        drop(_8) -> [return: bb13, unwind continue];
    }

    bb16 (cleanup): {
        drop(_8) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _24 = discriminant(_8);
        switchInt(move _24) -> [5: bb12, otherwise: bb16];
    }

    bb18 (cleanup): {
        switchInt(_22) -> [0: bb12, otherwise: bb17];
    }

    bb19: {
        unreachable;
    }
}

promoted[0] in function::<impl at lib/api/src/externals/function.rs:46:1: 46:46>::read_value_from: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Invalid value in `Function::read_value_from`: "];
        _0 = &_1;
        return;
    }
}

fn build_export_function_metadata(_1: Env, _2: for<'a> fn(&'a mut Env, &'a instance::Instance) -> Result<(), HostEnvInitError>) -> (*mut c_void, ExportFunctionMetadata) {
    debug env => _1;
    debug import_init_function_ptr => _2;
    let mut _0: (*mut std::ffi::c_void, wasmer_engine::ExportFunctionMetadata);
    let _3: std::option::Option<fn(*mut std::ffi::c_void, *const std::ffi::c_void) -> std::result::Result<(), *mut std::ffi::c_void>>;
    let mut _4: fn(*mut std::ffi::c_void, *const std::ffi::c_void) -> std::result::Result<(), *mut std::ffi::c_void>;
    let mut _5: *mut std::ffi::c_void;
    let mut _6: *mut Env;
    let mut _7: std::boxed::Box<Env>;
    let mut _8: Env;
    let mut _10: fn(*mut std::ffi::c_void) -> *mut std::ffi::c_void;
    let mut _11: fn(*mut std::ffi::c_void);
    let mut _12: bool;
    scope 1 {
        debug import_init_function_ptr => _3;
        scope 3 {
            debug host_env_clone_fn => const ZeroSized: {closure@lib/api/src/externals/function.rs:83:29: 83:62};
            scope 4 {
                debug host_env_drop_fn => const ZeroSized: {closure@lib/api/src/externals/function.rs:91:28: 91:46};
                scope 5 {
                    debug env => _5;
                    let _9: wasmer_engine::ExportFunctionMetadata;
                    scope 6 {
                        debug metadata => _9;
                    }
                    scope 7 {
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _12 = const false;
        _12 = const true;
        _4 = _2 as fn(*mut std::ffi::c_void, *const std::ffi::c_void) -> std::result::Result<(), *mut std::ffi::c_void> (Transmute);
        _3 = Option::<fn(*mut c_void, *const c_void) -> Result<(), *mut c_void>>::Some(move _4);
        _12 = const false;
        _8 = move _1;
        _7 = Box::<Env>::new(move _8) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _6 = Box::<Env>::into_raw(move _7) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _5 = move _6 as *mut std::ffi::c_void (PtrToPtr);
        _10 = const ZeroSized: {closure@lib/api/src/externals/function.rs:83:29: 83:62} as fn(*mut std::ffi::c_void) -> *mut std::ffi::c_void (PointerCoercion(ClosureFnPointer(Normal)));
        _11 = const ZeroSized: {closure@lib/api/src/externals/function.rs:91:28: 91:46} as fn(*mut std::ffi::c_void) (PointerCoercion(ClosureFnPointer(Normal)));
        _9 = ExportFunctionMetadata::new(_5, _3, move _10, move _11) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = (_5, move _9);
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        switchInt(_12) -> [0: bb4, otherwise: bb5];
    }
}

fn build_export_function_metadata::{closure#0}(_1: &{closure@lib/api/src/externals/function.rs:83:29: 83:62}, _2: *mut c_void) -> *mut c_void {
    debug ptr => _2;
    let mut _0: *mut std::ffi::c_void;
    let _3: &Env;
    let mut _4: std::option::Option<&Env>;
    let mut _5: *mut Env;
    let _6: &str;
    let mut _7: *mut Env;
    let mut _8: std::boxed::Box<Env>;
    let mut _9: Env;
    scope 1 {
        debug env_ref => _3;
    }
    scope 2 {
    }

    bb0: {
        _5 = std::ptr::mut_ptr::<impl *mut c_void>::cast::<Env>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = std::ptr::mut_ptr::<impl *mut Env>::as_ref::<'_>(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = const "`ptr` to the environment is null when cloning it";
        _3 = Option::<&Env>::expect(move _4, _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = <Env as Clone>::clone(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = Box::<Env>::new(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        _7 = Box::<Env>::into_raw(move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = move _7 as *mut std::ffi::c_void (PtrToPtr);
        return;
    }
}

fn build_export_function_metadata::{closure#1}(_1: &{closure@lib/api/src/externals/function.rs:91:28: 91:46}, _2: *mut c_void) -> () {
    debug ptr => _2;
    let mut _0: ();
    let _3: std::boxed::Box<Env>;
    let mut _4: *mut Env;
    scope 1 {
    }

    bb0: {
        _4 = std::ptr::mut_ptr::<impl *mut c_void>::cast::<Env>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Box::<Env>::from_raw(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        drop(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::new(_1: &Store, _2: FT, _3: F) -> function::Function {
    debug store => _1;
    debug ty => _2;
    debug func => _3;
    let mut _0: externals::function::Function;
    let _4: {closure@lib/api/src/externals/function.rs:153:13: 153:85};
    scope 1 {
        debug wrapped_func => _4;
    }

    bb0: {
        _4 = {closure@lib/api/src/externals/function.rs:153:13: 153:85} { func: move _3 };
        _0 = function::Function::new_with_env::<FT, {closure@lib/api/src/externals/function.rs:153:13: 153:85}, WithoutEnv>(_1, move _2, const WithoutEnv, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::new::{closure#0}(_1: &{closure@lib/api/src/externals/function.rs:153:13: 153:85}, _2: &WithoutEnv, _3: &[Value<function::Function>]) -> Result<Vec<Value<function::Function>>, RuntimeError> {
    debug _env => _2;
    debug args => _3;
    debug func => ((*_1).0: F);
    let mut _0: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _4: &F;
    let mut _5: (&[wasmer_types::Value<externals::function::Function>],);

    bb0: {
        _4 = &((*_1).0: F);
        _5 = (_3,);
        _0 = <F as Fn<(&[Value<function::Function>],)>>::call(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::new_with_env(_1: &Store, _2: FT, _3: Env, _4: F) -> function::Function {
    debug store => _1;
    debug ty => _2;
    debug env => _3;
    debug func => _4;
    let mut _0: externals::function::Function;
    let _5: wasmer_types::FunctionType;
    let mut _7: externals::function::DynamicFunction<Env>;
    let mut _8: std::boxed::Box<Env>;
    let mut _9: Env;
    let mut _10: std::sync::Arc<dyn for<'a, 'b> std::ops::Fn(&'a Env, &'b [wasmer_types::Value<externals::function::Function>]) -> std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError> + std::marker::Send + std::marker::Sync>;
    let mut _11: std::sync::Arc<F>;
    let mut _12: F;
    let mut _13: store::Store;
    let mut _14: wasmer_types::FunctionType;
    let mut _15: &wasmer_types::FunctionType;
    let mut _19: (*mut std::ffi::c_void, wasmer_engine::ExportFunctionMetadata);
    let mut _20: *const wasmer_vm::VMFunctionBody;
    let mut _22: store::Store;
    let mut _23: wasmer_engine::ExportFunction;
    let mut _24: std::option::Option<std::sync::Arc<wasmer_engine::ExportFunctionMetadata>>;
    let mut _25: std::sync::Arc<wasmer_engine::ExportFunctionMetadata>;
    let mut _26: wasmer_engine::ExportFunctionMetadata;
    let mut _27: wasmer_vm::VMFunction;
    let mut _28: wasmer_vm::VMFunctionKind;
    let mut _29: wasmer_types::FunctionType;
    let mut _30: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let mut _31: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    scope 1 {
        debug ty => _5;
        let _6: wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<Env>>;
        scope 2 {
            debug dynamic_ctx => _6;
            let _16: for<'a> fn(&'a mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<Env>>, &'a instance::Instance) -> std::result::Result<(), env::HostEnvInitError>;
            scope 3 {
                debug import_init_function_ptr => _16;
                let _17: *mut std::ffi::c_void;
                let _18: wasmer_engine::ExportFunctionMetadata;
                scope 4 {
                    debug host_env => _17;
                    debug metadata => _18;
                    scope 5 {
                        debug address => _20;
                        let _21: wasmer_vm::VMFunctionEnvironment;
                        scope 6 {
                            debug vmctx => _21;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _34 = const true;
        _33 = const true;
        _5 = <FT as Into<FunctionType>>::into(move _2) -> [return: bb1, unwind: bb21];
    }

    bb1: {
        _34 = const false;
        _9 = move _3;
        _8 = Box::<Env>::new(move _9) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _33 = const false;
        _12 = move _4;
        _11 = Arc::<F>::new(move _12) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _10 = move _11 as std::sync::Arc<dyn for<'a, 'b> std::ops::Fn(&'a Env, &'b [wasmer_types::Value<externals::function::Function>]) -> std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError> + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _13 = <Store as Clone>::clone(_1) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _15 = &_5;
        _14 = <FunctionType as Clone>::clone(move _15) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _7 = DynamicFunction::<Env> { function_type: move _14, func: move _10, store: move _13, env: move _8 };
        _6 = <VMDynamicFunctionContext<DynamicFunction<Env>> as VMDynamicFunctionCall<DynamicFunction<Env>>>::from_context(move _7) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        _16 = const ZeroSized: {closure@lib/api/src/externals/function.rs:218:13: 219:41} as for<'a> fn(&'a mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<Env>>, &'a instance::Instance) -> std::result::Result<(), env::HostEnvInitError> (PointerCoercion(ClosureFnPointer(Normal)));
        _19 = build_export_function_metadata::<VMDynamicFunctionContext<DynamicFunction<Env>>>(move _6, _16) -> [return: bb7, unwind: bb15];
    }

    bb7: {
        _17 = (_19.0: *mut std::ffi::c_void);
        _32 = const true;
        _18 = move (_19.1: wasmer_engine::ExportFunctionMetadata);
        _20 = null::<VMFunctionBody>() -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _21 = VMFunctionEnvironment { vmctx: _17 };
        _22 = <Store as Clone>::clone(_1) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        _32 = const false;
        _26 = move _18;
        _25 = Arc::<ExportFunctionMetadata>::new(move _26) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        _24 = Option::<Arc<ExportFunctionMetadata>>::Some(move _25);
        _28 = wasmer_vm::VMFunctionKind::Dynamic;
        _29 = move _5;
        _30 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::None;
        _31 = Option::<WeakOrStrongInstanceRef>::None;
        _27 = VMFunction { address: _20, vmctx: _21, signature: move _29, kind: move _28, call_trampoline: move _30, instance_ref: move _31 };
        _23 = ExportFunction { vm_function: move _27, metadata: move _24 };
        _0 = function::Function { store: move _22, exported: move _23 };
        _32 = const false;
        return;
    }

    bb11 (cleanup): {
        drop(_22) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_13) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_10) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_8) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_5) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_34) -> [0: bb17, otherwise: bb22];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_18) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_32) -> [0: bb15, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_4) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_33) -> [0: bb16, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate(cleanup)];
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::new_with_env::{closure#0}(_1: &{closure@lib/api/src/externals/function.rs:218:13: 219:41}, _2: &mut VMDynamicFunctionContext<DynamicFunction<Env>>, _3: &instance::Instance) -> Result<(), HostEnvInitError> {
    debug env => _2;
    debug instance => _3;
    let mut _0: std::result::Result<(), env::HostEnvInitError>;
    let mut _4: &mut Env;
    let mut _5: std::boxed::Box<Env>;
    let mut _6: *const Env;

    bb0: {
        _5 = deref_copy (((*_2).1: externals::function::DynamicFunction<Env>).3: std::boxed::Box<Env>);
        _6 = (((_5.0: std::ptr::Unique<Env>).0: std::ptr::NonNull<Env>).0: *const Env);
        _4 = &mut (*_6);
        _0 = <Env as WasmerEnv>::init_with_instance(_4, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::new_native(_1: &Store, _2: F) -> function::Function {
    debug store => _1;
    debug func => _2;
    let mut _0: externals::function::Function;
    let mut _3: usize;
    let _4: !;
    let _5: externals::function::inner::Function<Args, Rets>;
    let mut _6: F;
    let mut _7: *const wasmer_vm::VMFunctionBody;
    let mut _8: &externals::function::inner::Function<Args, Rets>;
    let mut _10: *mut std::ffi::c_void;
    let mut _12: &externals::function::inner::Function<Args, Rets>;
    let mut _13: store::Store;
    let mut _14: wasmer_engine::ExportFunction;
    let mut _15: std::option::Option<std::sync::Arc<wasmer_engine::ExportFunctionMetadata>>;
    let mut _16: wasmer_vm::VMFunction;
    let mut _17: wasmer_types::FunctionType;
    let mut _18: wasmer_vm::VMFunctionKind;
    let mut _19: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let mut _20: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _21: bool;
    scope 1 {
        debug function => _5;
        scope 2 {
            debug address => _7;
            let _9: wasmer_vm::VMFunctionEnvironment;
            scope 3 {
                debug vmctx => _9;
                let _11: wasmer_types::FunctionType;
                scope 4 {
                    debug signature => _11;
                }
            }
        }
    }

    bb0: {
        _21 = const false;
        _21 = const true;
        _3 = std::mem::size_of::<F>() -> [return: bb1, unwind: bb12];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = function::Function::closures_unsupported_panic() -> bb12;
    }

    bb3: {
        _21 = const false;
        _6 = move _2;
        _5 = inner::Function::<Args, Rets>::new::<F, WithoutEnv, Env>(move _6) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _8 = &_5;
        _7 = inner::Function::<Args, Rets>::address(move _8) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _10 = null_mut::<c_void>() -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _9 = VMFunctionEnvironment { vmctx: _10 };
        _12 = &_5;
        _11 = inner::Function::<Args, Rets>::ty(move _12) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _13 = <Store as Clone>::clone(_1) -> [return: bb8, unwind: bb9];
    }

    bb8: {
        _15 = Option::<Arc<ExportFunctionMetadata>>::None;
        _17 = move _11;
        _18 = wasmer_vm::VMFunctionKind::Static;
        _19 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::None;
        _20 = Option::<WeakOrStrongInstanceRef>::None;
        _16 = VMFunction { address: _7, vmctx: _9, signature: move _17, kind: move _18, call_trampoline: move _19, instance_ref: move _20 };
        _14 = ExportFunction { vm_function: move _16, metadata: move _15 };
        _0 = function::Function { store: move _13, exported: move _14 };
        return;
    }

    bb9 (cleanup): {
        drop(_11) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_21) -> [0: bb10, otherwise: bb11];
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::new_native_with_env(_1: &Store, _2: Env, _3: F) -> function::Function {
    debug store => _1;
    debug env => _2;
    debug func => _3;
    let mut _0: externals::function::Function;
    let mut _4: usize;
    let _5: !;
    let _6: externals::function::inner::Function<Args, Rets>;
    let mut _7: F;
    let mut _9: &externals::function::inner::Function<Args, Rets>;
    let mut _12: (*mut std::ffi::c_void, wasmer_engine::ExportFunctionMetadata);
    let mut _13: Env;
    let mut _14: for<'a, 'b> fn(&'a mut Env, &'b instance::Instance) -> std::result::Result<(), env::HostEnvInitError>;
    let mut _17: &externals::function::inner::Function<Args, Rets>;
    let mut _18: store::Store;
    let mut _19: wasmer_engine::ExportFunction;
    let mut _20: std::option::Option<std::sync::Arc<wasmer_engine::ExportFunctionMetadata>>;
    let mut _21: std::sync::Arc<wasmer_engine::ExportFunctionMetadata>;
    let mut _22: wasmer_engine::ExportFunctionMetadata;
    let mut _23: wasmer_vm::VMFunction;
    let mut _24: wasmer_vm::VMFunctionKind;
    let mut _25: wasmer_types::FunctionType;
    let mut _26: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let mut _27: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    scope 1 {
        debug function => _6;
        let _8: *const wasmer_vm::VMFunctionBody;
        scope 2 {
            debug address => _8;
            let _10: *mut std::ffi::c_void;
            let _11: wasmer_engine::ExportFunctionMetadata;
            scope 3 {
                debug host_env => _10;
                debug metadata => _11;
                let _15: wasmer_vm::VMFunctionEnvironment;
                scope 4 {
                    debug vmctx => _15;
                    let _16: wasmer_types::FunctionType;
                    scope 5 {
                        debug signature => _16;
                    }
                }
            }
        }
    }

    bb0: {
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _30 = const true;
        _29 = const true;
        _4 = std::mem::size_of::<F>() -> [return: bb1, unwind: bb17];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _5 = function::Function::closures_unsupported_panic() -> bb17;
    }

    bb3: {
        _29 = const false;
        _7 = move _3;
        _6 = inner::Function::<Args, Rets>::new::<F, WithEnv, Env>(move _7) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _9 = &_6;
        _8 = inner::Function::<Args, Rets>::address(move _9) -> [return: bb5, unwind: bb17];
    }

    bb5: {
        _30 = const false;
        _13 = move _2;
        _14 = <Env as env::WasmerEnv>::init_with_instance as for<'a, 'b> fn(&'a mut Env, &'b instance::Instance) -> std::result::Result<(), env::HostEnvInitError> (PointerCoercion(ReifyFnPointer));
        _12 = build_export_function_metadata::<Env>(move _13, move _14) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _10 = (_12.0: *mut std::ffi::c_void);
        _28 = const true;
        _11 = move (_12.1: wasmer_engine::ExportFunctionMetadata);
        _15 = VMFunctionEnvironment { vmctx: _10 };
        _17 = &_6;
        _16 = inner::Function::<Args, Rets>::ty(move _17) -> [return: bb7, unwind: bb15];
    }

    bb7: {
        _18 = <Store as Clone>::clone(_1) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        _28 = const false;
        _22 = move _11;
        _21 = Arc::<ExportFunctionMetadata>::new(move _22) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _20 = Option::<Arc<ExportFunctionMetadata>>::Some(move _21);
        _24 = wasmer_vm::VMFunctionKind::Static;
        _25 = move _16;
        _26 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::None;
        _27 = Option::<WeakOrStrongInstanceRef>::None;
        _23 = VMFunction { address: _8, vmctx: _15, signature: move _25, kind: move _24, call_trampoline: move _26, instance_ref: move _27 };
        _19 = ExportFunction { vm_function: move _23, metadata: move _20 };
        _0 = function::Function { store: move _18, exported: move _19 };
        _28 = const false;
        return;
    }

    bb10 (cleanup): {
        drop(_18) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_16) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_30) -> [0: bb13, otherwise: bb18];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_11) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_28) -> [0: bb17, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_29) -> [0: bb12, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate(cleanup)];
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::ty(_1: &function::Function) -> &FunctionType {
    debug self => _1;
    let mut _0: &wasmer_types::FunctionType;

    bb0: {
        _0 = &((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).2: wasmer_types::FunctionType);
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::store(_1: &function::Function) -> &Store {
    debug self => _1;
    let mut _0: &store::Store;

    bb0: {
        _0 = &((*_1).0: store::Store);
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::call_wasm(_1: &function::Function, _2: unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128), _3: &[Value<function::Function>], _4: &mut [Value<function::Function>]) -> Result<(), RuntimeError> {
    debug self => _1;
    debug trampoline => _2;
    debug params => _3;
    debug results => _4;
    let mut _0: std::result::Result<(), wasmer_engine::RuntimeError>;
    let _5: {closure@lib/api/src/externals/function.rs:391:46: 391:61};
    let mut _7: bool;
    let mut _8: usize;
    let _9: &[wasmer_types::Type];
    let mut _10: &wasmer_types::FunctionType;
    let mut _11: usize;
    let mut _12: wasmer_engine::RuntimeError;
    let mut _13: std::string::String;
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 2];
    let _19: [core::fmt::rt::Argument<'_>; 2];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &std::string::String;
    let _22: std::string::String;
    let mut _23: &{closure@lib/api/src/externals/function.rs:391:46: 391:61};
    let mut _24: (&[wasmer_types::Value<externals::function::Function>],);
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &&&wasmer_types::FunctionType;
    let _27: &&wasmer_types::FunctionType;
    let mut _28: bool;
    let mut _29: usize;
    let _30: &[wasmer_types::Type];
    let mut _31: &wasmer_types::FunctionType;
    let mut _32: usize;
    let mut _33: &[wasmer_types::Value<externals::function::Function>];
    let mut _34: wasmer_engine::RuntimeError;
    let mut _35: std::string::String;
    let mut _37: std::fmt::Arguments<'_>;
    let mut _38: &[&str];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let _40: &[core::fmt::rt::Argument<'_>; 2];
    let _41: [core::fmt::rt::Argument<'_>; 2];
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &std::string::String;
    let _44: std::string::String;
    let mut _45: &{closure@lib/api/src/externals/function.rs:391:46: 391:61};
    let mut _46: (&[wasmer_types::Value<externals::function::Function>],);
    let mut _47: &[wasmer_types::Value<externals::function::Function>];
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &&&wasmer_types::FunctionType;
    let _50: &&wasmer_types::FunctionType;
    let mut _52: usize;
    let mut _53: usize;
    let mut _54: usize;
    let mut _55: &[wasmer_types::Value<externals::function::Function>];
    let _57: &[wasmer_types::Type];
    let mut _58: &wasmer_types::FunctionType;
    let mut _59: std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>, std::slice::IterMut<'_, i128>>, std::slice::Iter<'_, wasmer_types::Type>>;
    let mut _60: std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>, std::slice::IterMut<'_, i128>>, std::slice::Iter<'_, wasmer_types::Type>>;
    let mut _61: std::iter::Zip<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>, std::slice::IterMut<'_, i128>>;
    let mut _62: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let mut _63: &mut std::vec::Vec<i128>;
    let mut _65: std::option::Option<((&wasmer_types::Value<externals::function::Function>, &mut i128), &wasmer_types::Type)>;
    let mut _66: &mut std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>, std::slice::IterMut<'_, i128>>, std::slice::Iter<'_, wasmer_types::Type>>;
    let mut _67: isize;
    let mut _71: bool;
    let mut _72: &wasmer_types::Type;
    let _73: wasmer_types::Type;
    let mut _75: &{closure@lib/api/src/externals/function.rs:391:46: 391:61};
    let mut _76: (&[wasmer_types::Value<externals::function::Function>],);
    let mut _77: wasmer_engine::RuntimeError;
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let mut _81: &[core::fmt::rt::Argument<'_>];
    let _82: &[core::fmt::rt::Argument<'_>; 2];
    let _83: [core::fmt::rt::Argument<'_>; 2];
    let mut _84: core::fmt::rt::Argument<'_>;
    let _85: &std::string::String;
    let mut _86: core::fmt::rt::Argument<'_>;
    let _87: &&&wasmer_types::FunctionType;
    let _88: &&wasmer_types::FunctionType;
    let _89: ();
    let mut _90: *mut i128;
    let mut _91: std::result::Result<(), wasmer_vm::Trap>;
    let _92: &store::Store;
    let mut _93: wasmer_vm::VMFunctionEnvironment;
    let mut _94: *const wasmer_vm::VMFunctionBody;
    let mut _95: *mut u8;
    let mut _96: *mut i128;
    let mut _97: &mut std::vec::Vec<i128>;
    let mut _98: isize;
    let mut _100: wasmer_engine::RuntimeError;
    let mut _101: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Type>>;
    let mut _102: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Type>>;
    let mut _103: std::slice::Iter<'_, wasmer_types::Type>;
    let _104: &[wasmer_types::Type];
    let mut _105: &wasmer_types::FunctionType;
    let mut _107: std::option::Option<(usize, &wasmer_types::Type)>;
    let mut _108: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Type>>;
    let mut _109: isize;
    let mut _113: *const i128;
    let mut _114: &std::vec::Vec<i128>;
    let mut _115: wasmer_types::Value<externals::function::Function>;
    let mut _116: &dyn std::any::Any;
    let _117: &store::Store;
    let mut _118: usize;
    let mut _119: bool;
    let mut _123: &wasmer_types::Type;
    let mut _124: bool;
    scope 1 {
        debug format_types_for_error_message => const ZeroSized: {closure@lib/api/src/externals/function.rs:391:46: 391:61};
        let _6: &wasmer_types::FunctionType;
        scope 2 {
            debug signature => _6;
            let _14: std::string::String;
            let _36: std::string::String;
            let mut _51: std::vec::Vec<i128>;
            let mut _120: &[&str; 2];
            let mut _121: &[&str; 2];
            scope 3 {
                debug res => _14;
            }
            scope 4 {
                debug res => _36;
            }
            scope 5 {
                debug values_vec => _51;
                let _56: std::slice::Iter<'_, wasmer_types::Type>;
                scope 6 {
                    debug param_tys => _56;
                    let mut _64: std::iter::Zip<std::iter::Zip<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>, std::slice::IterMut<'_, i128>>, std::slice::Iter<'_, wasmer_types::Type>>;
                    let mut _106: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Type>>;
                    scope 7 {
                        debug iter => _64;
                        let _68: &wasmer_types::Value<externals::function::Function>;
                        let _69: &mut i128;
                        let _70: &wasmer_types::Type;
                        scope 8 {
                            debug arg => _68;
                            debug slot => _69;
                            debug ty => _70;
                            let _74: std::string::String;
                            scope 9 {
                                debug param_types => _74;
                                let _78: std::string::String;
                                let mut _122: &[&str; 2];
                                scope 10 {
                                    debug res => _78;
                                }
                            }
                            scope 11 {
                            }
                        }
                    }
                    scope 12 {
                        debug error => _99;
                        let _99: wasmer_vm::Trap;
                        scope 13 {
                        }
                    }
                    scope 14 {
                        debug iter => _106;
                        let _110: usize;
                        let _111: wasmer_types::Type;
                        scope 15 {
                            debug index => _110;
                            debug value_type => _111;
                            scope 16 {
                                let _112: *const i128;
                                scope 17 {
                                    debug ptr => _112;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _124 = const false;
        _6 = function::Function::ty(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = _6;
        _9 = FunctionType::params(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = Len((*_9));
        _11 = Len((*_3));
        _7 = Ne(move _8, move _11);
        switchInt(move _7) -> [0: bb11, otherwise: bb3];
    }

    bb3: {
        _120 = const _;
        _16 = _120 as &[&str] (PointerCoercion(Unsize));
        _23 = &_5;
        _24 = (_3,);
        _22 = <{closure@lib/api/src/externals/function.rs:391:46: 391:61} as Fn<(&[Value<function::Function>],)>>::call(move _23, move _24) -> [return: bb4, unwind continue];
    }

    bb4: {
        _21 = &_22;
        _20 = core::fmt::rt::Argument::<'_>::new_display::<String>(_21) -> [return: bb5, unwind: bb72];
    }

    bb5: {
        _27 = &_6;
        _26 = &_27;
        _25 = core::fmt::rt::Argument::<'_>::new_display::<&&FunctionType>(_26) -> [return: bb6, unwind: bb72];
    }

    bb6: {
        _19 = [move _20, move _25];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _15 = Arguments::<'_>::new_v1(move _16, move _17) -> [return: bb7, unwind: bb72];
    }

    bb7: {
        _14 = format(move _15) -> [return: bb8, unwind: bb72];
    }

    bb8: {
        drop(_22) -> [return: bb9, unwind: bb71];
    }

    bb9: {
        _13 = move _14;
        _12 = RuntimeError::new::<String>(move _13) -> [return: bb10, unwind continue];
    }

    bb10: {
        _0 = Result::<(), RuntimeError>::Err(move _12);
        goto -> bb66;
    }

    bb11: {
        _31 = _6;
        _30 = FunctionType::results(move _31) -> [return: bb12, unwind continue];
    }

    bb12: {
        _29 = Len((*_30));
        _33 = &(*_4);
        _32 = Len((*_33));
        _28 = Ne(move _29, move _32);
        switchInt(move _28) -> [0: bb21, otherwise: bb13];
    }

    bb13: {
        _121 = const _;
        _38 = _121 as &[&str] (PointerCoercion(Unsize));
        _45 = &_5;
        _47 = &(*_4);
        _46 = (move _47,);
        _44 = <{closure@lib/api/src/externals/function.rs:391:46: 391:61} as Fn<(&[Value<function::Function>],)>>::call(move _45, move _46) -> [return: bb14, unwind continue];
    }

    bb14: {
        _43 = &_44;
        _42 = core::fmt::rt::Argument::<'_>::new_display::<String>(_43) -> [return: bb15, unwind: bb70];
    }

    bb15: {
        _50 = &_6;
        _49 = &_50;
        _48 = core::fmt::rt::Argument::<'_>::new_display::<&&FunctionType>(_49) -> [return: bb16, unwind: bb70];
    }

    bb16: {
        _41 = [move _42, move _48];
        _40 = &_41;
        _39 = _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _37 = Arguments::<'_>::new_v1(move _38, move _39) -> [return: bb17, unwind: bb70];
    }

    bb17: {
        _36 = format(move _37) -> [return: bb18, unwind: bb70];
    }

    bb18: {
        drop(_44) -> [return: bb19, unwind: bb69];
    }

    bb19: {
        _35 = move _36;
        _34 = RuntimeError::new::<String>(move _35) -> [return: bb20, unwind continue];
    }

    bb20: {
        _0 = Result::<(), RuntimeError>::Err(move _34);
        goto -> bb66;
    }

    bb21: {
        _53 = Len((*_3));
        _55 = &(*_4);
        _54 = Len((*_55));
        _52 = std::cmp::max::<usize>(move _53, move _54) -> [return: bb22, unwind continue];
    }

    bb22: {
        _51 = from_elem::<i128>(const 0_i128, move _52) -> [return: bb23, unwind continue];
    }

    bb23: {
        _58 = _6;
        _57 = FunctionType::params(move _58) -> [return: bb24, unwind: bb68];
    }

    bb24: {
        _56 = core::slice::<impl [wasmer_types::Type]>::iter(_57) -> [return: bb25, unwind: bb68];
    }

    bb25: {
        _62 = core::slice::<impl [Value<function::Function>]>::iter(_3) -> [return: bb26, unwind: bb68];
    }

    bb26: {
        _63 = &mut _51;
        _61 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::zip::<&mut Vec<i128>>(move _62, move _63) -> [return: bb27, unwind: bb68];
    }

    bb27: {
        _60 = <Zip<std::slice::Iter<'_, Value<function::Function>>, std::slice::IterMut<'_, i128>> as Iterator>::zip::<std::slice::Iter<'_, wasmer_types::Type>>(move _61, move _56) -> [return: bb28, unwind: bb68];
    }

    bb28: {
        _59 = <Zip<Zip<std::slice::Iter<'_, Value<function::Function>>, std::slice::IterMut<'_, i128>>, std::slice::Iter<'_, wasmer_types::Type>> as IntoIterator>::into_iter(move _60) -> [return: bb29, unwind: bb68];
    }

    bb29: {
        _64 = move _59;
        goto -> bb30;
    }

    bb30: {
        _66 = &mut _64;
        _65 = <Zip<Zip<std::slice::Iter<'_, Value<function::Function>>, std::slice::IterMut<'_, i128>>, std::slice::Iter<'_, wasmer_types::Type>> as Iterator>::next(_66) -> [return: bb31, unwind: bb68];
    }

    bb31: {
        _67 = discriminant(_65);
        switchInt(move _67) -> [0: bb34, 1: bb32, otherwise: bb33];
    }

    bb32: {
        _68 = ((((_65 as Some).0: ((&wasmer_types::Value<externals::function::Function>, &mut i128), &wasmer_types::Type)).0: (&wasmer_types::Value<externals::function::Function>, &mut i128)).0: &wasmer_types::Value<externals::function::Function>);
        _69 = move ((((_65 as Some).0: ((&wasmer_types::Value<externals::function::Function>, &mut i128), &wasmer_types::Type)).0: (&wasmer_types::Value<externals::function::Function>, &mut i128)).1: &mut i128);
        _70 = (((_65 as Some).0: ((&wasmer_types::Value<externals::function::Function>, &mut i128), &wasmer_types::Type)).1: &wasmer_types::Type);
        _73 = Value::<function::Function>::ty(_68) -> [return: bb35, unwind: bb68];
    }

    bb33: {
        unreachable;
    }

    bb34: {
        _92 = &((*_1).0: store::Store);
        _93 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).1: wasmer_vm::VMFunctionEnvironment);
        _94 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).0: *const wasmer_vm::VMFunctionBody);
        _97 = &mut _51;
        _96 = Vec::<i128>::as_mut_ptr(move _97) -> [return: bb45, unwind: bb68];
    }

    bb35: {
        _72 = &_73;
        _71 = <wasmer_types::Type as PartialEq>::ne(move _72, _70) -> [return: bb36, unwind: bb68];
    }

    bb36: {
        switchInt(move _71) -> [0: bb44, otherwise: bb37];
    }

    bb37: {
        _75 = &_5;
        _76 = (_3,);
        _74 = <{closure@lib/api/src/externals/function.rs:391:46: 391:61} as Fn<(&[Value<function::Function>],)>>::call(move _75, move _76) -> [return: bb38, unwind: bb68];
    }

    bb38: {
        _122 = const _;
        _80 = _122 as &[&str] (PointerCoercion(Unsize));
        _85 = &_74;
        _84 = core::fmt::rt::Argument::<'_>::new_display::<String>(_85) -> [return: bb39, unwind: bb67];
    }

    bb39: {
        _88 = &_6;
        _87 = &_88;
        _86 = core::fmt::rt::Argument::<'_>::new_display::<&&FunctionType>(_87) -> [return: bb40, unwind: bb67];
    }

    bb40: {
        _83 = [move _84, move _86];
        _82 = &_83;
        _81 = _82 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _79 = Arguments::<'_>::new_v1(move _80, move _81) -> [return: bb41, unwind: bb67];
    }

    bb41: {
        _78 = format(move _79) -> [return: bb42, unwind: bb67];
    }

    bb42: {
        _77 = RuntimeError::new::<String>(move _78) -> [return: bb43, unwind: bb67];
    }

    bb43: {
        _0 = Result::<(), RuntimeError>::Err(move _77);
        drop(_74) -> [return: bb65, unwind: bb68];
    }

    bb44: {
        _90 = &raw mut (*_69);
        _89 = Value::<function::Function>::write_value_to(_68, move _90) -> [return: bb76, unwind: bb68];
    }

    bb45: {
        _95 = move _96 as *mut u8 (PtrToPtr);
        _91 = wasmer_call_trampoline::<Store>(_92, move _93, _2, move _94, move _95) -> [return: bb46, unwind: bb68];
    }

    bb46: {
        _98 = discriminant(_91);
        switchInt(move _98) -> [1: bb47, otherwise: bb49];
    }

    bb47: {
        _99 = move ((_91 as Err).0: wasmer_vm::Trap);
        _100 = RuntimeError::from_trap(move _99) -> [return: bb48, unwind: bb68];
    }

    bb48: {
        _0 = Result::<(), RuntimeError>::Err(move _100);
        goto -> bb65;
    }

    bb49: {
        drop(_91) -> [return: bb50, unwind: bb68];
    }

    bb50: {
        _105 = _6;
        _104 = FunctionType::results(move _105) -> [return: bb51, unwind: bb68];
    }

    bb51: {
        _103 = core::slice::<impl [wasmer_types::Type]>::iter(_104) -> [return: bb52, unwind: bb68];
    }

    bb52: {
        _102 = <std::slice::Iter<'_, wasmer_types::Type> as Iterator>::enumerate(move _103) -> [return: bb53, unwind: bb68];
    }

    bb53: {
        _101 = <Enumerate<std::slice::Iter<'_, wasmer_types::Type>> as IntoIterator>::into_iter(move _102) -> [return: bb54, unwind: bb68];
    }

    bb54: {
        _106 = move _101;
        goto -> bb55;
    }

    bb55: {
        _108 = &mut _106;
        _107 = <Enumerate<std::slice::Iter<'_, wasmer_types::Type>> as Iterator>::next(_108) -> [return: bb56, unwind: bb68];
    }

    bb56: {
        _109 = discriminant(_107);
        switchInt(move _109) -> [0: bb58, 1: bb57, otherwise: bb33];
    }

    bb57: {
        _123 = deref_copy (((_107 as Some).0: (usize, &wasmer_types::Type)).1: &wasmer_types::Type);
        _111 = (*_123);
        _110 = (((_107 as Some).0: (usize, &wasmer_types::Type)).0: usize);
        _114 = &_51;
        _113 = Vec::<i128>::as_ptr(move _114) -> [return: bb59, unwind: bb68];
    }

    bb58: {
        _0 = Result::<(), RuntimeError>::Ok(const ());
        drop(_51) -> [return: bb66, unwind continue];
    }

    bb59: {
        _112 = std::ptr::const_ptr::<impl *const i128>::add(move _113, _110) -> [return: bb60, unwind: bb68];
    }

    bb60: {
        _117 = &((*_1).0: store::Store);
        _116 = _117 as &dyn std::any::Any (PointerCoercion(Unsize));
        _115 = Value::<function::Function>::read_value_from(move _116, _112, _111) -> [return: bb61, unwind: bb68];
    }

    bb61: {
        _124 = const true;
        _118 = Len((*_4));
        _119 = Lt(_110, _118);
        assert(move _119, "index out of bounds: the length is {} but the index is {}", move _118, _110) -> [success: bb62, unwind: bb75];
    }

    bb62: {
        drop((*_4)[_110]) -> [return: bb63, unwind: bb64];
    }

    bb63: {
        _124 = const false;
        (*_4)[_110] = move _115;
        _124 = const false;
        goto -> bb55;
    }

    bb64 (cleanup): {
        _124 = const false;
        (*_4)[_110] = move _115;
        goto -> bb75;
    }

    bb65: {
        drop(_51) -> [return: bb66, unwind continue];
    }

    bb66: {
        return;
    }

    bb67 (cleanup): {
        drop(_74) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_51) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_36) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_44) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_14) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_22) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        resume;
    }

    bb74 (cleanup): {
        drop(_115) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_124) -> [0: bb68, otherwise: bb74];
    }

    bb76: {
        goto -> bb30;
    }
}

promoted[0] in function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::call_wasm: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Parameters of type [", const "] did not match signature "];
        _0 = &_1;
        return;
    }
}

promoted[1] in function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::call_wasm: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Results of type [", const "] did not match signature "];
        _0 = &_1;
        return;
    }
}

promoted[2] in function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::call_wasm: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Parameters of type [", const "] did not match signature "];
        _0 = &_1;
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::call_wasm::{closure#0}(_1: &{closure@lib/api/src/externals/function.rs:391:46: 391:61}, _2: &[Value<function::Function>]) -> String {
    debug items => _2;
    let mut _0: std::string::String;
    let _3: &[std::string::String];
    let mut _4: &std::vec::Vec<std::string::String>;
    let _5: std::vec::Vec<std::string::String>;
    let mut _6: std::iter::Map<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>, {closure@lib/api/src/externals/function.rs:394:22: 394:29}>;
    let mut _7: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _8: &str;

    bb0: {
        _7 = core::slice::<impl [Value<function::Function>]>::iter(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::map::<String, {closure@lib/api/src/externals/function.rs:394:22: 394:29}>(move _7, const ZeroSized: {closure@lib/api/src/externals/function.rs:394:22: 394:29}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = <Map<std::slice::Iter<'_, Value<function::Function>>, {closure@lib/api/src/externals/function.rs:394:22: 394:29}> as Iterator>::collect::<Vec<String>>(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = &_5;
        _3 = <Vec<String> as Deref>::deref(move _4) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _8 = const ", ";
        _0 = slice::<impl [String]>::join::<&str>(_3, _8) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_5) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_5) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::call_wasm::{closure#0}::{closure#0}(_1: &mut {closure@lib/api/src/externals/function.rs:394:22: 394:29}, _2: &Value<function::Function>) -> String {
    debug param => _2;
    let mut _0: std::string::String;
    let mut _3: &wasmer_types::Type;
    let _4: wasmer_types::Type;

    bb0: {
        _4 = Value::<function::Function>::ty(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _0 = <wasmer_types::Type as ToString>::to_string(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::param_arity(_1: &function::Function) -> usize {
    debug self => _1;
    let mut _0: usize;
    let _2: &[wasmer_types::Type];
    let _3: &wasmer_types::FunctionType;

    bb0: {
        _3 = function::Function::ty(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = FunctionType::params(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Len((*_2));
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::result_arity(_1: &function::Function) -> usize {
    debug self => _1;
    let mut _0: usize;
    let _2: &[wasmer_types::Type];
    let _3: &wasmer_types::FunctionType;

    bb0: {
        _3 = function::Function::ty(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = FunctionType::results(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Len((*_2));
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::call(_1: &function::Function, _2: &[Value<function::Function>]) -> Result<Box<[Value<function::Function>]>, RuntimeError> {
    debug self => _1;
    debug params => _2;
    let mut _0: std::result::Result<std::boxed::Box<[wasmer_types::Value<externals::function::Function>]>, wasmer_engine::RuntimeError>;
    let mut _3: isize;
    let mut _6: wasmer_types::Value<externals::function::Function>;
    let mut _7: usize;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>>;
    let mut _9: std::result::Result<(), wasmer_engine::RuntimeError>;
    let mut _10: &mut [wasmer_types::Value<externals::function::Function>];
    let mut _11: &mut std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _12: isize;
    let mut _14: std::boxed::Box<[wasmer_types::Value<externals::function::Function>]>;
    let mut _15: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let _16: !;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 0];
    let _21: [core::fmt::rt::Argument<'_>; 0];
    let mut _22: &[&str; 1];
    let mut _23: bool;
    let mut _24: bool;
    scope 1 {
        debug trampoline => _4;
        let _4: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
        let mut _5: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 2 {
            debug results => _5;
            let _13: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
            scope 3 {
                debug residual => _13;
                scope 4 {
                }
            }
            scope 5 {
                debug val => const ();
                scope 6 {
                }
            }
        }
    }

    bb0: {
        _23 = const false;
        _24 = const false;
        _3 = discriminant(((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>));
        switchInt(move _3) -> [1: bb1, otherwise: bb12];
    }

    bb1: {
        _4 = ((((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>) as Some).0: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128));
        _24 = const true;
        _6 = Value::<function::Function>::null() -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = function::Function::result_arity(_1) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _24 = const false;
        _5 = from_elem::<Value<function::Function>>(move _6, move _7) -> [return: bb4, unwind: bb22];
    }

    bb4: {
        _23 = const true;
        _24 = const false;
        _11 = &mut _5;
        _10 = <Vec<Value<function::Function>> as DerefMut>::deref_mut(_11) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _9 = function::Function::call_wasm(_1, _4, _2, _10) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _8 = <Result<(), RuntimeError> as std::ops::Try>::branch(move _9) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _23 = const false;
        _15 = move _5;
        _14 = Vec::<Value<function::Function>>::into_boxed_slice(move _15) -> [return: bb11, unwind: bb20];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _13 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Box<[Value<function::Function>]>, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _13) -> [return: bb23, unwind: bb20];
    }

    bb11: {
        _0 = Result::<Box<[Value<function::Function>]>, RuntimeError>::Ok(move _14);
        goto -> bb18;
    }

    bb12: {
        _22 = const _;
        _18 = _22 as &[&str] (PointerCoercion(Unsize));
        _21 = core::fmt::rt::Argument::<'_>::none() -> [return: bb13, unwind continue];
    }

    bb13: {
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _19) -> [return: bb14, unwind continue];
    }

    bb14: {
        _16 = panic_fmt(move _17) -> unwind continue;
    }

    bb15: {
        _23 = const false;
        return;
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        drop(_5) -> [return: bb15, unwind continue];
    }

    bb18: {
        switchInt(_23) -> [0: bb15, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_5) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_23) -> [0: bb16, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_6) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_24) -> [0: bb16, otherwise: bb21];
    }

    bb23: {
        goto -> bb18;
    }
}

promoted[0] in function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::call: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "not implemented: The function definition isn't supported for the moment"];
        _0 = &_1;
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::from_vm_export(_1: &Store, _2: ExportFunction) -> function::Function {
    debug store => _1;
    debug wasmer_export => _2;
    let mut _0: externals::function::Function;
    let mut _3: store::Store;
    let mut _4: wasmer_engine::ExportFunction;

    bb0: {
        _3 = <Store as Clone>::clone(_1) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _4 = move _2;
        _0 = function::Function { store: move _3, exported: move _4 };
        return;
    }

    bb2 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::vm_funcref(_1: &function::Function) -> VMFuncRef {
    debug self => _1;
    let mut _0: wasmer_vm::VMFuncRef;
    let _2: &std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let mut _3: &store::Store;
    let _5: &dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync;
    let _6: &wasmer_types::FunctionType;
    let _7: &dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync;
    let mut _8: wasmer_vm::VMCallerCheckedAnyfunc;
    let mut _9: *const wasmer_vm::VMFunctionBody;
    let mut _10: wasmer_vm::VMFunctionEnvironment;
    scope 1 {
        debug engine => _2;
        let _4: wasmer_vm::VMSharedSignatureIndex;
        scope 2 {
            debug vmsignature => _4;
        }
    }

    bb0: {
        _3 = &((*_1).0: store::Store);
        _2 = Store::engine(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <Arc<dyn Engine + Send + Sync> as Deref>::deref(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).2: wasmer_types::FunctionType);
        _4 = <dyn Engine + Send + Sync as Engine>::register_signature(_5, _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = <Arc<dyn Engine + Send + Sync> as Deref>::deref(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).0: *const wasmer_vm::VMFunctionBody);
        _10 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).1: wasmer_vm::VMFunctionEnvironment);
        _8 = VMCallerCheckedAnyfunc { func_ptr: move _9, type_index: _4, vmctx: move _10 };
        _0 = <dyn Engine + Send + Sync as Engine>::register_function_metadata(_7, move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::native(_1: &function::Function) -> Result<NativeFunc<Args, Rets>, RuntimeError> {
    debug self => _1;
    let mut _0: std::result::Result<native::NativeFunc<Args, Rets>, wasmer_engine::RuntimeError>;
    let _2: &[wasmer_types::Type];
    let mut _3: &wasmer_types::FunctionType;
    let mut _5: bool;
    let mut _6: &&[wasmer_types::Type];
    let mut _7: &&[wasmer_types::Type];
    let mut _8: wasmer_engine::RuntimeError;
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 2];
    let _14: [core::fmt::rt::Argument<'_>; 2];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &&[wasmer_types::Type];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &&[wasmer_types::Type];
    let _19: &[wasmer_types::Type];
    let mut _20: &wasmer_types::FunctionType;
    let mut _22: bool;
    let mut _23: &&[wasmer_types::Type];
    let mut _24: &&[wasmer_types::Type];
    let mut _25: wasmer_engine::RuntimeError;
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let _30: &[core::fmt::rt::Argument<'_>; 2];
    let _31: [core::fmt::rt::Argument<'_>; 2];
    let mut _32: core::fmt::rt::Argument<'_>;
    let _33: &&[wasmer_types::Type];
    let mut _34: core::fmt::rt::Argument<'_>;
    let _35: &&[wasmer_types::Type];
    let mut _36: native::NativeFunc<Args, Rets>;
    let mut _37: store::Store;
    let mut _38: &store::Store;
    let mut _39: wasmer_engine::ExportFunction;
    let mut _40: &wasmer_engine::ExportFunction;
    let mut _43: bool;
    scope 1 {
        debug expected => _2;
        let _4: &[wasmer_types::Type];
        scope 2 {
            debug given => _4;
            let _9: std::string::String;
            let mut _41: &[&str; 3];
            scope 3 {
                debug res => _9;
            }
        }
    }
    scope 4 {
        debug expected => _19;
        let _21: &[wasmer_types::Type];
        scope 5 {
            debug given => _21;
            let _26: std::string::String;
            let mut _42: &[&str; 3];
            scope 6 {
                debug res => _26;
            }
        }
    }

    bb0: {
        _43 = const false;
        _3 = &((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).2: wasmer_types::FunctionType);
        _2 = FunctionType::params(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Args as WasmTypeList>::wasm_types() -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_2;
        _7 = &_4;
        _5 = <&[wasmer_types::Type] as PartialEq>::ne(move _6, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _5) -> [0: bb10, otherwise: bb4];
    }

    bb4: {
        _41 = const _;
        _11 = _41 as &[&str] (PointerCoercion(Unsize));
        _16 = &_4;
        _15 = core::fmt::rt::Argument::<'_>::new_debug::<&[wasmer_types::Type]>(_16) -> [return: bb5, unwind continue];
    }

    bb5: {
        _18 = &_2;
        _17 = core::fmt::rt::Argument::<'_>::new_debug::<&[wasmer_types::Type]>(_18) -> [return: bb6, unwind continue];
    }

    bb6: {
        _14 = [move _15, move _17];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _10 = Arguments::<'_>::new_v1(move _11, move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        _9 = format(move _10) -> [return: bb8, unwind continue];
    }

    bb8: {
        _8 = RuntimeError::new::<String>(move _9) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = Result::<NativeFunc<Args, Rets>, RuntimeError>::Err(move _8);
        goto -> bb24;
    }

    bb10: {
        _20 = &((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).2: wasmer_types::FunctionType);
        _19 = FunctionType::results(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        _21 = <Rets as WasmTypeList>::wasm_types() -> [return: bb12, unwind continue];
    }

    bb12: {
        _23 = &_19;
        _24 = &_21;
        _22 = <&[wasmer_types::Type] as PartialEq>::ne(move _23, move _24) -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _22) -> [0: bb20, otherwise: bb14];
    }

    bb14: {
        _42 = const _;
        _28 = _42 as &[&str] (PointerCoercion(Unsize));
        _33 = &_21;
        _32 = core::fmt::rt::Argument::<'_>::new_debug::<&[wasmer_types::Type]>(_33) -> [return: bb15, unwind continue];
    }

    bb15: {
        _35 = &_19;
        _34 = core::fmt::rt::Argument::<'_>::new_debug::<&[wasmer_types::Type]>(_35) -> [return: bb16, unwind continue];
    }

    bb16: {
        _31 = [move _32, move _34];
        _30 = &_31;
        _29 = _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _27 = Arguments::<'_>::new_v1(move _28, move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        _26 = format(move _27) -> [return: bb18, unwind continue];
    }

    bb18: {
        _25 = RuntimeError::new::<String>(move _26) -> [return: bb19, unwind continue];
    }

    bb19: {
        _0 = Result::<NativeFunc<Args, Rets>, RuntimeError>::Err(move _25);
        goto -> bb24;
    }

    bb20: {
        _38 = &((*_1).0: store::Store);
        _43 = const true;
        _37 = <Store as Clone>::clone(move _38) -> [return: bb21, unwind continue];
    }

    bb21: {
        _40 = &((*_1).1: wasmer_engine::ExportFunction);
        _39 = <ExportFunction as Clone>::clone(move _40) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        _43 = const false;
        _36 = NativeFunc::<Args, Rets>::new(move _37, move _39) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        _43 = const false;
        _0 = Result::<NativeFunc<Args, Rets>, RuntimeError>::Ok(move _36);
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        drop(_37) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_43) -> [0: bb25, otherwise: bb26];
    }
}

promoted[0] in function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::native: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "given types (`", const "`) for the function arguments don't match the actual types (`", const "`)"];
        _0 = &_1;
        return;
    }
}

promoted[1] in function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::native: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "given types (`", const "`) for the function results don't match the actual types (`", const "`)"];
        _0 = &_1;
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::closures_unsupported_panic() -> ! {
    let mut _0: !;
    let _1: !;
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 0];
    let _6: [core::fmt::rt::Argument<'_>; 0];
    let mut _7: &[&str; 1];

    bb0: {
        _7 = const _;
        _3 = _7 as &[&str] (PointerCoercion(Unsize));
        _6 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = panic_fmt(move _2) -> unwind continue;
    }
}

promoted[0] in function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::closures_unsupported_panic: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "not implemented: Closures (functions with captured environments) are currently unsupported with native functions. See: https://github.com/wasmerio/wasmer/issues/1840"];
        _0 = &_1;
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:113:1: 113:14>::get_vm_function(_1: &function::Function) -> &VMFunction {
    debug self => _1;
    let mut _0: &wasmer_vm::VMFunction;

    bb0: {
        _0 = &(((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction);
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:680:1: 680:37>::to_export(_1: &function::Function) -> wasmer_engine::Export {
    debug self => _1;
    let mut _0: wasmer_engine::Export;
    let mut _2: wasmer_engine::ExportFunction;
    let mut _3: &wasmer_engine::ExportFunction;

    bb0: {
        _3 = &((*_1).1: wasmer_engine::ExportFunction);
        _2 = <ExportFunction as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <ExportFunction as Into<wasmer_engine::Export>>::into(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:680:1: 680:37>::get_self_from_extern(_1: &Extern) -> Result<&function::Function, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _2: isize;
    let _3: &externals::function::Function;
    let mut _4: exports::ExportError;
    scope 1 {
        debug func => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = ExportError::IncompatibleType;
        _0 = Result::<&function::Function, ExportError>::Err(move _4);
        goto -> bb3;
    }

    bb2: {
        _3 = &(((*_1) as Function).0: externals::function::Function);
        _0 = Result::<&function::Function, ExportError>::Ok(_3);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:680:1: 680:37>::into_weak_instance_ref(_1: &mut function::Function) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/externals/function.rs:697:18: 697:21}>(move _3, const ZeroSized: {closure@lib/api/src/externals/function.rs:697:18: 697:21}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:680:1: 680:37>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:697:18: 697:21}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:701:1: 701:24>::clone(_1: &function::Function) -> function::Function {
    debug self => _1;
    let mut _0: externals::function::Function;
    let mut _2: wasmer_engine::ExportFunction;
    let mut _3: &wasmer_engine::ExportFunction;
    let _4: ();
    let mut _5: std::option::Option<()>;
    let mut _6: &mut wasmer_vm::VMFunction;
    let mut _7: store::Store;
    let mut _8: &store::Store;
    let mut _9: wasmer_engine::ExportFunction;
    scope 1 {
        debug exported => _2;
    }

    bb0: {
        _3 = &((*_1).1: wasmer_engine::ExportFunction);
        _2 = <ExportFunction as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &mut (_2.0: wasmer_vm::VMFunction);
        _5 = VMFunction::upgrade_instance_ref(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _4 = Option::<()>::unwrap(move _5) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _8 = &((*_1).0: store::Store);
        _7 = <Store as Clone>::clone(move _8) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _9 = move _2;
        _0 = function::Function { store: move _7, exported: move _9 };
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:713:1: 713:29>::fmt(_1: &function::Function, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _4: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _5: std::fmt::DebugStruct<'_, '_>;
    let _6: &str;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&wasmer_types::FunctionType;
    let _10: &wasmer_types::FunctionType;

    bb0: {
        _6 = const "Function";
        _5 = Formatter::<'_>::debug_struct(_2, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = const "ty";
        _10 = function::Function::ty(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _3 = DebugStruct::<'_, '_>::field(move _4, _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = DebugStruct::<'_, '_>::finish(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:740:1: 740:80>::clone(_1: &DynamicFunction<Env>) -> DynamicFunction<Env> {
    debug self => _1;
    let mut _0: externals::function::DynamicFunction<Env>;
    let mut _2: std::boxed::Box<Env>;
    let mut _3: &std::boxed::Box<Env>;
    let mut _4: wasmer_types::FunctionType;
    let mut _5: &wasmer_types::FunctionType;
    let mut _6: store::Store;
    let mut _7: &store::Store;
    let mut _8: std::sync::Arc<dyn for<'a, 'b> std::ops::Fn(&'a Env, &'b [wasmer_types::Value<externals::function::Function>]) -> std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError> + std::marker::Send + std::marker::Sync>;
    let mut _9: &std::sync::Arc<dyn for<'a, 'b> std::ops::Fn(&'a Env, &'b [wasmer_types::Value<externals::function::Function>]) -> std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError> + std::marker::Send + std::marker::Sync>;

    bb0: {
        _3 = &((*_1).3: std::boxed::Box<Env>);
        _2 = <Box<Env> as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).0: wasmer_types::FunctionType);
        _4 = <FunctionType as Clone>::clone(move _5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = &((*_1).2: store::Store);
        _6 = <Store as Clone>::clone(move _7) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _9 = &((*_1).1: std::sync::Arc<dyn for<'a, 'b> std::ops::Fn(&'a Env, &'b [wasmer_types::Value<externals::function::Function>]) -> std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError> + std::marker::Send + std::marker::Sync>);
        _8 = <Arc<dyn for<'a, 'b> Fn(&'a Env, &'b [Value<function::Function>]) -> Result<Vec<Value<function::Function>>, RuntimeError> + Send + Sync> as Clone>::clone(move _9) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = DynamicFunction::<Env> { function_type: move _4, func: move _8, store: move _6, env: move _2 };
        return;
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:751:1: 753:40>::call(_1: &DynamicFunction<Env>, _2: &[Value<function::Function>]) -> Result<Vec<Value<function::Function>>, RuntimeError> {
    debug self => _1;
    debug args => _2;
    let mut _0: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let _3: &dyn for<'a, 'b> std::ops::Fn(&'a Env, &'b [wasmer_types::Value<externals::function::Function>]) -> std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError> + std::marker::Send + std::marker::Sync;
    let mut _4: &std::sync::Arc<dyn for<'a, 'b> std::ops::Fn(&'a Env, &'b [wasmer_types::Value<externals::function::Function>]) -> std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError> + std::marker::Send + std::marker::Sync>;
    let mut _5: (&Env, &[wasmer_types::Value<externals::function::Function>]);
    let _6: &Env;
    let _7: &&[wasmer_types::Value<externals::function::Function>];
    let mut _8: std::boxed::Box<Env>;
    let mut _9: &[wasmer_types::Value<externals::function::Function>];
    let mut _10: *const Env;

    bb0: {
        _4 = &((*_1).1: std::sync::Arc<dyn for<'a, 'b> std::ops::Fn(&'a Env, &'b [wasmer_types::Value<externals::function::Function>]) -> std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError> + std::marker::Send + std::marker::Sync>);
        _3 = <Arc<dyn for<'a, 'b> Fn(&'a Env, &'b [Value<function::Function>]) -> Result<Vec<Value<function::Function>>, RuntimeError> + Send + Sync> as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = deref_copy ((*_1).3: std::boxed::Box<Env>);
        _10 = (((_8.0: std::ptr::Unique<Env>).0: std::ptr::NonNull<Env>).0: *const Env);
        _6 = &(*_10);
        _7 = &_2;
        _9 = deref_copy (*_7);
        _5 = (_6, _9);
        _0 = <dyn for<'a, 'b> Fn(&'a Env, &'b [Value<function::Function>]) -> Result<Vec<Value<function::Function>>, RuntimeError> + Send + Sync as Fn<(&Env, &[Value<function::Function>])>>::call(_3, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:751:1: 753:40>::function_type(_1: &DynamicFunction<Env>) -> &FunctionType {
    debug self => _1;
    let mut _0: &wasmer_types::FunctionType;

    bb0: {
        _0 = &((*_1).0: wasmer_types::FunctionType);
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:751:1: 753:40>::store(_1: &DynamicFunction<Env>) -> &Store {
    debug self => _1;
    let mut _0: &store::Store;

    bb0: {
        _0 = &((*_1).2: store::Store);
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:772:1: 772:84>::from_context(_1: T) -> VMDynamicFunctionContext<T> {
    debug ctx => _1;
    let mut _0: wasmer_vm::VMDynamicFunctionContext<T>;
    let mut _2: *const wasmer_vm::VMFunctionBody;
    let mut _3: T;

    bb0: {
        _2 = <VMDynamicFunctionContext<T> as VMDynamicFunctionCall<T>>::address_ptr() -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _3 = move _1;
        _0 = VMDynamicFunctionContext::<T> { address: move _2, ctx: move _3 };
        return;
    }

    bb2 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:772:1: 772:84>::address_ptr() -> *const VMFunctionBody {
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _1: *const ();
    let mut _2: for<'a> unsafe fn(&'a wasmer_vm::VMDynamicFunctionContext<T>, *mut i128);

    bb0: {
        _2 = <wasmer_vm::VMDynamicFunctionContext<T> as externals::function::VMDynamicFunctionCall<T>>::func_wrapper as for<'a> unsafe fn(&'a wasmer_vm::VMDynamicFunctionContext<T>, *mut i128) (PointerCoercion(ReifyFnPointer));
        _1 = move _2 as *const () (FnPtrToPtr);
        _0 = move _1 as *const wasmer_vm::VMFunctionBody (PtrToPtr);
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:772:1: 772:84>::func_wrapper(_1: &VMDynamicFunctionContext<T>, _2: *mut i128) -> () {
    debug self => _1;
    debug values_vec => _2;
    let mut _0: ();
    let _3: std::result::Result<std::result::Result<(), wasmer_engine::RuntimeError>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _4: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:793:59: 793:61}>;
    let mut _5: {closure@lib/api/src/externals/function.rs:793:59: 793:61};
    let mut _6: &&wasmer_vm::VMDynamicFunctionContext<T>;
    let mut _7: &*mut i128;
    let mut _8: isize;
    let mut _9: isize;
    let mut _11: !;
    let mut _12: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _13: std::boxed::Box<wasmer_engine::RuntimeError>;
    let mut _15: !;
    let mut _16: isize;
    scope 1 {
        debug result => _3;
        let _10: wasmer_engine::RuntimeError;
        let _14: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
        scope 2 {
            debug trap => _10;
        }
        scope 3 {
            debug panic => _14;
        }
    }

    bb0: {
        _6 = &_1;
        _7 = &_2;
        _5 = {closure@lib/api/src/externals/function.rs:793:59: 793:61} { self: move _6, values_vec: move _7 };
        _4 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:793:59: 793:61}>(move _5);
        _3 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:793:59: 793:61}>, Result<(), RuntimeError>>(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = discriminant(_3);
        switchInt(move _9) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _8 = discriminant(((_3 as Ok).0: std::result::Result<(), wasmer_engine::RuntimeError>));
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _14 = move ((_3 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _15 = resume_panic(move _14) -> unwind continue;
    }

    bb5: {
        _16 = discriminant(_3);
        switchInt(move _16) -> [0: bb9, otherwise: bb8];
    }

    bb6: {
        _10 = move ((((_3 as Ok).0: std::result::Result<(), wasmer_engine::RuntimeError>) as Err).0: wasmer_engine::RuntimeError);
        _13 = Box::<RuntimeError>::new(move _10) -> [return: bb7, unwind continue];
    }

    bb7: {
        _12 = move _13 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _11 = raise_user_trap(move _12) -> unwind continue;
    }

    bb8: {
        return;
    }

    bb9: {
        goto -> bb8;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:772:1: 772:84>::func_wrapper::{closure#0}(_1: &{closure@lib/api/src/externals/function.rs:793:59: 793:61}) -> Result<(), RuntimeError> {
    debug self => (*((*_1).0: &&wasmer_vm::VMDynamicFunctionContext<T>));
    debug values_vec => (*((*_1).1: &*mut i128));
    let mut _0: std::result::Result<(), wasmer_engine::RuntimeError>;
    let _2: &wasmer_types::FunctionType;
    let mut _3: &T;
    let mut _5: usize;
    let _6: &[wasmer_types::Type];
    let mut _8: &T;
    let mut _9: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Type>>;
    let mut _10: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Type>>;
    let mut _11: std::slice::Iter<'_, wasmer_types::Type>;
    let _12: &[wasmer_types::Type];
    let mut _14: std::option::Option<(usize, &wasmer_types::Type)>;
    let mut _15: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Type>>;
    let mut _16: isize;
    let _19: ();
    let mut _20: &mut std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _21: wasmer_types::Value<externals::function::Function>;
    let mut _22: &dyn std::any::Any;
    let mut _23: *const i128;
    let mut _24: *mut i128;
    let mut _25: *mut i128;
    let mut _26: wasmer_types::Type;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _29: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _30: &T;
    let _31: &[wasmer_types::Value<externals::function::Function>];
    let _32: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _33: isize;
    let mut _37: std::iter::Map<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>, {closure@lib/api/src/externals/function.rs:804:51: 804:56}>;
    let mut _38: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _39: &[wasmer_types::Value<externals::function::Function>];
    let mut _40: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _41: bool;
    let mut _42: &std::vec::Vec<wasmer_types::Type>;
    let mut _43: &&[wasmer_types::Type];
    let _44: &[wasmer_types::Type];
    let mut _45: wasmer_engine::RuntimeError;
    let mut _47: std::fmt::Arguments<'_>;
    let mut _48: &[&str];
    let mut _49: &[core::fmt::rt::Argument<'_>];
    let _50: &[core::fmt::rt::Argument<'_>; 2];
    let _51: [core::fmt::rt::Argument<'_>; 2];
    let mut _52: core::fmt::rt::Argument<'_>;
    let _53: &&[wasmer_types::Type];
    let _54: &[wasmer_types::Type];
    let mut _55: core::fmt::rt::Argument<'_>;
    let _56: &std::vec::Vec<wasmer_types::Type>;
    let mut _57: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _58: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _59: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _60: &[wasmer_types::Value<externals::function::Function>];
    let mut _61: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _63: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _64: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _65: isize;
    let _68: ();
    let mut _69: *mut i128;
    let mut _70: *mut i128;
    let mut _72: &&wasmer_vm::VMDynamicFunctionContext<T>;
    let mut _73: &wasmer_vm::VMDynamicFunctionContext<T>;
    let mut _74: &&wasmer_vm::VMDynamicFunctionContext<T>;
    let mut _75: &wasmer_vm::VMDynamicFunctionContext<T>;
    let mut _76: &*mut i128;
    let mut _77: &&wasmer_vm::VMDynamicFunctionContext<T>;
    let mut _78: &wasmer_vm::VMDynamicFunctionContext<T>;
    let mut _79: &*mut i128;
    scope 1 {
        debug func_ty => _2;
        let mut _4: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 2 {
            debug args => _4;
            let _7: &store::Store;
            scope 3 {
                debug store => _7;
                let mut _13: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Type>>;
                let _27: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                let _34: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _35: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 4 {
                    debug iter => _13;
                    let _17: usize;
                    let _18: &wasmer_types::Type;
                    scope 5 {
                        debug i => _17;
                        debug ty => _18;
                    }
                }
                scope 6 {
                    debug returns => _27;
                    let _36: std::vec::Vec<wasmer_types::Type>;
                    scope 11 {
                        debug return_types => _36;
                        let _46: std::string::String;
                        let mut _62: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                        let mut _71: &[&str; 2];
                        scope 12 {
                            debug res => _46;
                        }
                        scope 13 {
                            debug iter => _62;
                            let _66: usize;
                            let _67: &wasmer_types::Value<externals::function::Function>;
                            scope 14 {
                                debug i => _66;
                                debug ret => _67;
                            }
                        }
                    }
                }
                scope 7 {
                    debug residual => _34;
                    scope 8 {
                    }
                }
                scope 9 {
                    debug val => _35;
                    scope 10 {
                    }
                }
            }
        }
    }

    bb0: {
        _72 = deref_copy ((*_1).0: &&wasmer_vm::VMDynamicFunctionContext<T>);
        _73 = deref_copy (*_72);
        _3 = &((*_73).1: T);
        _2 = <T as VMDynamicFunction>::function_type(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = FunctionType::params(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = Len((*_6));
        _4 = Vec::<Value<function::Function>>::with_capacity(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _74 = deref_copy ((*_1).0: &&wasmer_vm::VMDynamicFunctionContext<T>);
        _75 = deref_copy (*_74);
        _8 = &((*_75).1: T);
        _7 = <T as VMDynamicFunction>::store(move _8) -> [return: bb4, unwind: bb51];
    }

    bb4: {
        _12 = FunctionType::params(_2) -> [return: bb5, unwind: bb51];
    }

    bb5: {
        _11 = core::slice::<impl [wasmer_types::Type]>::iter(_12) -> [return: bb6, unwind: bb51];
    }

    bb6: {
        _10 = <std::slice::Iter<'_, wasmer_types::Type> as Iterator>::enumerate(move _11) -> [return: bb7, unwind: bb51];
    }

    bb7: {
        _9 = <Enumerate<std::slice::Iter<'_, wasmer_types::Type>> as IntoIterator>::into_iter(move _10) -> [return: bb8, unwind: bb51];
    }

    bb8: {
        _13 = move _9;
        goto -> bb9;
    }

    bb9: {
        _15 = &mut _13;
        _14 = <Enumerate<std::slice::Iter<'_, wasmer_types::Type>> as Iterator>::next(_15) -> [return: bb10, unwind: bb51];
    }

    bb10: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb13, 1: bb11, otherwise: bb12];
    }

    bb11: {
        _17 = (((_14 as Some).0: (usize, &wasmer_types::Type)).0: usize);
        _18 = (((_14 as Some).0: (usize, &wasmer_types::Type)).1: &wasmer_types::Type);
        _20 = &mut _4;
        _22 = _7 as &dyn std::any::Any (PointerCoercion(Unsize));
        _76 = deref_copy ((*_1).1: &*mut i128);
        _25 = (*_76);
        _24 = std::ptr::mut_ptr::<impl *mut i128>::add(move _25, _17) -> [return: bb14, unwind: bb51];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _77 = deref_copy ((*_1).0: &&wasmer_vm::VMDynamicFunctionContext<T>);
        _78 = deref_copy (*_77);
        _30 = &((*_78).1: T);
        _32 = &_4;
        _31 = <Vec<Value<function::Function>> as Deref>::deref(_32) -> [return: bb16, unwind: bb51];
    }

    bb14: {
        _23 = move _24 as *const i128 (PointerCoercion(MutToConstPointer));
        _26 = (*_18);
        _21 = Value::<function::Function>::read_value_from(move _22, move _23, move _26) -> [return: bb15, unwind: bb51];
    }

    bb15: {
        _19 = Vec::<Value<function::Function>>::push(move _20, move _21) -> [return: bb53, unwind: bb51];
    }

    bb16: {
        _29 = <T as VMDynamicFunction>::call(move _30, _31) -> [return: bb17, unwind: bb51];
    }

    bb17: {
        _28 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _29) -> [return: bb18, unwind: bb51];
    }

    bb18: {
        _33 = discriminant(_28);
        switchInt(move _33) -> [0: bb19, 1: bb20, otherwise: bb12];
    }

    bb19: {
        _35 = move ((_28 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _27 = move _35;
        _40 = &_27;
        _39 = <Vec<Value<function::Function>> as Deref>::deref(move _40) -> [return: bb21, unwind: bb50];
    }

    bb20: {
        _34 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<(), RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _34) -> [return: bb54, unwind: bb51];
    }

    bb21: {
        _38 = core::slice::<impl [Value<function::Function>]>::iter(_39) -> [return: bb22, unwind: bb50];
    }

    bb22: {
        _37 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::map::<wasmer_types::Type, {closure@lib/api/src/externals/function.rs:804:51: 804:56}>(move _38, const ZeroSized: {closure@lib/api/src/externals/function.rs:804:51: 804:56}) -> [return: bb23, unwind: bb50];
    }

    bb23: {
        _36 = <Map<std::slice::Iter<'_, Value<function::Function>>, {closure@lib/api/src/externals/function.rs:804:51: 804:56}> as Iterator>::collect::<Vec<wasmer_types::Type>>(move _37) -> [return: bb24, unwind: bb50];
    }

    bb24: {
        _42 = &_36;
        _44 = FunctionType::results(_2) -> [return: bb25, unwind: bb49];
    }

    bb25: {
        _43 = &_44;
        _41 = <Vec<wasmer_types::Type> as PartialEq<&[wasmer_types::Type]>>::ne(move _42, move _43) -> [return: bb26, unwind: bb49];
    }

    bb26: {
        switchInt(move _41) -> [0: bb34, otherwise: bb27];
    }

    bb27: {
        _71 = const _;
        _48 = _71 as &[&str] (PointerCoercion(Unsize));
        _54 = FunctionType::results(_2) -> [return: bb28, unwind: bb49];
    }

    bb28: {
        _53 = &_54;
        _52 = core::fmt::rt::Argument::<'_>::new_debug::<&[wasmer_types::Type]>(_53) -> [return: bb29, unwind: bb49];
    }

    bb29: {
        _56 = &_36;
        _55 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<wasmer_types::Type>>(_56) -> [return: bb30, unwind: bb49];
    }

    bb30: {
        _51 = [move _52, move _55];
        _50 = &_51;
        _49 = _50 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _47 = Arguments::<'_>::new_v1(move _48, move _49) -> [return: bb31, unwind: bb49];
    }

    bb31: {
        _46 = format(move _47) -> [return: bb32, unwind: bb49];
    }

    bb32: {
        _45 = RuntimeError::new::<String>(move _46) -> [return: bb33, unwind: bb49];
    }

    bb33: {
        _0 = Result::<(), RuntimeError>::Err(move _45);
        drop(_36) -> [return: bb46, unwind: bb50];
    }

    bb34: {
        _61 = &_27;
        _60 = <Vec<Value<function::Function>> as Deref>::deref(move _61) -> [return: bb35, unwind: bb49];
    }

    bb35: {
        _59 = core::slice::<impl [Value<function::Function>]>::iter(_60) -> [return: bb36, unwind: bb49];
    }

    bb36: {
        _58 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _59) -> [return: bb37, unwind: bb49];
    }

    bb37: {
        _57 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _58) -> [return: bb38, unwind: bb49];
    }

    bb38: {
        _62 = move _57;
        goto -> bb39;
    }

    bb39: {
        _64 = &mut _62;
        _63 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_64) -> [return: bb40, unwind: bb49];
    }

    bb40: {
        _65 = discriminant(_63);
        switchInt(move _65) -> [0: bb42, 1: bb41, otherwise: bb12];
    }

    bb41: {
        _66 = (((_63 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _67 = (((_63 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _79 = deref_copy ((*_1).1: &*mut i128);
        _70 = (*_79);
        _69 = std::ptr::mut_ptr::<impl *mut i128>::add(move _70, _66) -> [return: bb43, unwind: bb49];
    }

    bb42: {
        _0 = Result::<(), RuntimeError>::Ok(const ());
        drop(_36) -> [return: bb44, unwind: bb50];
    }

    bb43: {
        _68 = Value::<function::Function>::write_value_to(_67, move _69) -> [return: bb55, unwind: bb49];
    }

    bb44: {
        drop(_27) -> [return: bb45, unwind: bb51];
    }

    bb45: {
        drop(_4) -> [return: bb48, unwind continue];
    }

    bb46: {
        drop(_27) -> [return: bb47, unwind: bb51];
    }

    bb47: {
        drop(_4) -> [return: bb48, unwind continue];
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_36) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_27) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_4) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        resume;
    }

    bb53: {
        goto -> bb9;
    }

    bb54: {
        goto -> bb47;
    }

    bb55: {
        goto -> bb39;
    }
}

promoted[0] in function::<impl at lib/api/src/externals/function.rs:772:1: 772:84>::func_wrapper::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Dynamic function returned wrong signature. Expected ", const " but got "];
        _0 = &_1;
        return;
    }
}

fn function::<impl at lib/api/src/externals/function.rs:772:1: 772:84>::func_wrapper::{closure#0}::{closure#0}(_1: &mut {closure@lib/api/src/externals/function.rs:804:51: 804:56}, _2: &Value<function::Function>) -> wasmer_types::Type {
    debug ret => _2;
    let mut _0: wasmer_types::Type;

    bb0: {
        _0 = Value::<function::Function>::ty(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:877:17: 877:59>::from_native(_1: i32) -> i8 {
    debug native => _1;
    let mut _0: i8;

    bb0: {
        _0 = _1 as i8 (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:877:17: 877:59>::to_native(_1: i8) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = _1 as i32 (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:877:17: 877:59>::from_native(_1: i32) -> u8 {
    debug native => _1;
    let mut _0: u8;

    bb0: {
        _0 = _1 as u8 (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:877:17: 877:59>::to_native(_1: u8) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = _1 as i32 (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:877:17: 877:59>::from_native(_1: i32) -> i16 {
    debug native => _1;
    let mut _0: i16;

    bb0: {
        _0 = _1 as i16 (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:877:17: 877:59>::to_native(_1: i16) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = _1 as i32 (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:877:17: 877:59>::from_native(_1: i32) -> u16 {
    debug native => _1;
    let mut _0: u16;

    bb0: {
        _0 = _1 as u16 (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:877:17: 877:59>::to_native(_1: u16) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = _1 as i32 (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:898:17: 898:59>::from_native(_1: i32) -> i32 {
    debug native => _1;
    let mut _0: i32;
    let mut _2: [u8; 4];

    bb0: {
        _2 = core::num::<impl i32>::to_ne_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::num::<impl i32>::from_ne_bytes(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:898:17: 898:59>::to_native(_1: i32) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: [u8; 4];

    bb0: {
        _2 = core::num::<impl i32>::to_ne_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::num::<impl i32>::from_ne_bytes(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:898:17: 898:59>::from_native(_1: i32) -> u32 {
    debug native => _1;
    let mut _0: u32;
    let mut _2: [u8; 4];

    bb0: {
        _2 = core::num::<impl i32>::to_ne_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::num::<impl u32>::from_ne_bytes(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:898:17: 898:59>::to_native(_1: u32) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: [u8; 4];

    bb0: {
        _2 = core::num::<impl u32>::to_ne_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::num::<impl i32>::from_ne_bytes(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:898:17: 898:59>::from_native(_1: i64) -> i64 {
    debug native => _1;
    let mut _0: i64;
    let mut _2: [u8; 8];

    bb0: {
        _2 = core::num::<impl i64>::to_ne_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::num::<impl i64>::from_ne_bytes(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:898:17: 898:59>::to_native(_1: i64) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: [u8; 8];

    bb0: {
        _2 = core::num::<impl i64>::to_ne_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::num::<impl i64>::from_ne_bytes(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:898:17: 898:59>::from_native(_1: i64) -> u64 {
    debug native => _1;
    let mut _0: u64;
    let mut _2: [u8; 8];

    bb0: {
        _2 = core::num::<impl i64>::to_ne_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::num::<impl u64>::from_ne_bytes(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:898:17: 898:59>::to_native(_1: u64) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: [u8; 8];

    bb0: {
        _2 = core::num::<impl u64>::to_ne_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::num::<impl i64>::from_ne_bytes(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:898:17: 898:59>::from_native(_1: f32) -> f32 {
    debug native => _1;
    let mut _0: f32;
    let mut _2: [u8; 4];

    bb0: {
        _2 = core::f32::<impl f32>::to_ne_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::f32::<impl f32>::from_ne_bytes(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:898:17: 898:59>::to_native(_1: f32) -> f32 {
    debug self => _1;
    let mut _0: f32;
    let mut _2: [u8; 4];

    bb0: {
        _2 = core::f32::<impl f32>::to_ne_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::f32::<impl f32>::from_ne_bytes(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:898:17: 898:59>::from_native(_1: f64) -> f64 {
    debug native => _1;
    let mut _0: f64;
    let mut _2: [u8; 8];

    bb0: {
        _2 = core::f64::<impl f64>::to_ne_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::f64::<impl f64>::from_ne_bytes(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:898:17: 898:59>::to_native(_1: f64) -> f64 {
    debug self => _1;
    let mut _0: f64;
    let mut _2: [u8; 8];

    bb0: {
        _2 = core::f64::<impl f64>::to_ne_bytes(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = core::f64::<impl f64>::from_ne_bytes(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:932:5: 932:51>::to_native(_1: wasmer_types::ExternRef) -> VMExternRef {
    debug self => _1;
    let mut _0: wasmer_types::VMExternRef;

    bb0: {
        _0 = <wasmer_types::ExternRef as Into<VMExternRef>>::into(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:932:5: 932:51>::from_native(_1: VMExternRef) -> wasmer_types::ExternRef {
    debug n => _1;
    let mut _0: wasmer_types::ExternRef;

    bb0: {
        _0 = <VMExternRef as Into<wasmer_types::ExternRef>>::into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1032:5: 1034:25>::into_result(_1: T) -> Result<T, Infallible> {
    debug self => _1;
    let mut _0: std::result::Result<T, std::convert::Infallible>;

    bb0: {
        _0 = Result::<T, Infallible>::Ok(move _1);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1045:5: 1048:42>::into_result(_1: Result<T, E>) -> Result<T, E> {
    debug self => _1;
    let mut _0: std::result::Result<T, E>;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1134:14: 1134:19>::clone(_1: &WithoutEnv) -> WithoutEnv {
    debug self => _1;
    let mut _0: externals::function::inner::WithoutEnv;

    bb0: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1142:14: 1142:19>::clone(_1: &inner::Function<Args, Rets>) -> inner::Function<Args, Rets> {
    debug self => _1;
    let mut _0: externals::function::inner::Function<Args, Rets>;
    let mut _2: *const wasmer_vm::VMFunctionBody;
    let _3: &*const wasmer_vm::VMFunctionBody;
    let mut _4: std::marker::PhantomData<(Args, Rets)>;
    let _5: &std::marker::PhantomData<(Args, Rets)>;

    bb0: {
        _3 = &((*_1).0: *const wasmer_vm::VMFunctionBody);
        _2 = <*const VMFunctionBody as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::marker::PhantomData<(Args, Rets)>);
        _4 = <PhantomData<(Args, Rets)> as Clone>::clone(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = inner::Function::<Args, Rets> { address: move _2, _phantom: const ZeroSized: PhantomData<(Args, Rets)> };
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1142:21: 1142:26>::fmt(_1: &inner::Function<Args, Rets>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &*const wasmer_vm::VMFunctionBody;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::marker::PhantomData<(Args, Rets)>;
    let _10: &std::marker::PhantomData<(Args, Rets)>;

    bb0: {
        _3 = const "Function";
        _4 = const "address";
        _6 = &((*_1).0: *const wasmer_vm::VMFunctionBody);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "_phantom";
        _10 = &((*_1).1: std::marker::PhantomData<(Args, Rets)>);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1142:28: 1142:32>::hash(_1: &inner::Function<Args, Rets>, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: ();
    let _4: &*const wasmer_vm::VMFunctionBody;
    let _5: &std::marker::PhantomData<(Args, Rets)>;

    bb0: {
        _4 = &((*_1).0: *const wasmer_vm::VMFunctionBody);
        _3 = <*const VMFunctionBody as Hash>::hash::<__H>(_4, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::marker::PhantomData<(Args, Rets)>);
        _0 = <PhantomData<(Args, Rets)> as Hash>::hash::<__H>(_5, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1142:34: 1142:43>::eq(_1: &inner::Function<Args, Rets>, _2: &inner::Function<Args, Rets>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: *const wasmer_vm::VMFunctionBody;
    let mut _5: *const wasmer_vm::VMFunctionBody;
    let mut _6: &std::marker::PhantomData<(Args, Rets)>;
    let mut _7: &std::marker::PhantomData<(Args, Rets)>;

    bb0: {
        _4 = ((*_1).0: *const wasmer_vm::VMFunctionBody);
        _5 = ((*_2).0: *const wasmer_vm::VMFunctionBody);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = &((*_1).1: std::marker::PhantomData<(Args, Rets)>);
        _7 = &((*_2).1: std::marker::PhantomData<(Args, Rets)>);
        _0 = <PhantomData<(Args, Rets)> as PartialEq>::eq(move _6, move _7) -> [return: bb3, unwind continue];
    }

    bb2: {
        _0 = const false;
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1142:45: 1142:47>::assert_receiver_is_total_eq(_1: &inner::Function<Args, Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1150:5: 1153:28>::new(_1: F) -> inner::Function<Args, Rets> {
    debug function => _1;
    let mut _0: externals::function::inner::Function<Args, Rets>;
    let mut _2: *const wasmer_vm::VMFunctionBody;

    bb0: {
        _2 = <F as HostFunction<Args, Rets, T, E>>::function_body_ptr(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = inner::Function::<Args, Rets> { address: move _2, _phantom: const ZeroSized: PhantomData<(Args, Rets)> };
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1150:5: 1153:28>::ty(_1: &inner::Function<Args, Rets>) -> FunctionType {
    debug self => _1;
    let mut _0: wasmer_types::FunctionType;
    let mut _2: &[wasmer_types::Type];
    let mut _3: &[wasmer_types::Type];

    bb0: {
        _2 = <Args as WasmTypeList>::wasm_types() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Rets as WasmTypeList>::wasm_types() -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = FunctionType::new::<&[wasmer_types::Type], &[wasmer_types::Type]>(move _2, move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1150:5: 1153:28>::address(_1: &inner::Function<Args, Rets>) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;

    bb0: {
        _0 = ((*_1).0: *const wasmer_vm::VMFunctionBody);
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1197:18>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1197:18>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1197:18>::from_array(_1: [i128; 0]) -> () {
    debug array => const [];
    let mut _0: ();
    scope 1 {
    }
    scope 2 {
    }

    bb0: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1197:18>::from_slice(_1: &[i128]) -> Result<(), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(), std::array::TryFromSliceError>;
    let mut _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 0]>;
    let mut _4: std::result::Result<[i128; 0], std::array::TryFromSliceError>;
    let mut _5: isize;
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => const [];
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 0]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 0], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _2 = <() as WasmTypeList>::from_array(const []) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(), TryFromSliceError>::Ok(const ());
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1197:18>::into_array(_1: ()) -> [i128; 0] {
    debug self => const ();
    let mut _0: [i128; 0];
    scope 1 {
    }
    scope 2 {
    }

    bb0: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1197:18>::empty_array() -> [i128; 0] {
    let mut _0: [i128; 0];

    bb0: {
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1197:18>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1197:18>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1197:18>::from_c_struct(_1: S0) -> () {
    debug c_struct => const S0();
    let mut _0: ();
    scope 1 {
    }
    scope 2 {
    }

    bb0: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1197:18>::into_c_struct(_1: ()) -> S0 {
    debug self => const ();
    let mut _0: externals::function::inner::S0;
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1197:18>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 0];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1197:18>::wasm_types: &[wasmer_types::Type; 0] = {
    let mut _0: &[wasmer_types::Type; 0];
    let mut _1: [wasmer_types::Type; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<Rets, RetsAsResult, Func> as extern "C" fn(usize) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize) -> <Rets as WasmTypeList>::CStruct {
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _2: &Func;
    let _3: &Func;
    let _4: *const Func;
    let mut _5: *const ();
    let mut _7: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _8: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _9: &&Func;
    let mut _10: isize;
    let mut _11: isize;
    let mut _14: !;
    let mut _15: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _16: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _18: !;
    let mut _20: isize;
    scope 1 {
        debug func => _2;
        let _6: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _6;
            let _12: Rets;
            let _13: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _17: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _12;
            }
            scope 5 {
                debug trap => _13;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _17;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _19: &();
    }

    bb0: {
        _19 = const _;
        _5 = &raw const (*_19);
        _4 = move _5 as *const Func (PtrToPtr);
        _3 = &(*_4);
        _2 = _3;
        _9 = &_2;
        _8 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _9 };
        _7 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _8);
        _6 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _10 = discriminant(((_6 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _10) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _17 = move ((_6 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _18 = resume_panic(move _17) -> unwind continue;
    }

    bb5: {
        _12 = move ((((_6 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _20 = discriminant(_6);
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _13 = move ((((_6 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _16 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        _15 = move _16 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _14 = raise_user_trap(move _15) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: &{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*((*_1).0: &&Func));
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: &&Func;
    let mut _4: &Func;

    bb0: {
        _3 = deref_copy ((*_1).0: &&Func);
        _4 = deref_copy (*_3);
        _2 = <Func as Fn<()>>::call(_4, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _2: &Func;
    let _3: &Func;
    let _4: *const Func;
    let mut _5: *const ();
    let mut _7: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _8: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _9: &&Func;
    let mut _10: &&Env;
    let mut _11: isize;
    let mut _12: isize;
    let mut _15: !;
    let mut _16: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _17: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _19: !;
    let mut _21: isize;
    scope 1 {
        debug func => _2;
        let _6: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _6;
            let _13: Rets;
            let _14: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _18: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _13;
            }
            scope 5 {
                debug trap => _14;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _18;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _20: &();
    }

    bb0: {
        _20 = const _;
        _5 = &raw const (*_20);
        _4 = move _5 as *const Func (PtrToPtr);
        _3 = &(*_4);
        _2 = _3;
        _9 = &_2;
        _10 = &_1;
        _8 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _9, env: move _10 };
        _7 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _8);
        _6 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = discriminant(_6);
        switchInt(move _12) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _11 = discriminant(((_6 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _11) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _18 = move ((_6 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _19 = resume_panic(move _18) -> unwind continue;
    }

    bb5: {
        _13 = move ((((_6 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _21 = discriminant(_6);
        switchInt(move _21) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _14 = move ((((_6 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _17 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        _16 = move _17 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _15 = raise_user_trap(move _16) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: &{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*((*_1).0: &&Func));
    debug env => (*((*_1).1: &&Env));
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env,);
    let mut _4: &&Func;
    let mut _5: &Func;
    let mut _6: &&Env;
    let mut _7: &Env;

    bb0: {
        _4 = deref_copy ((*_1).0: &&Func);
        _5 = deref_copy (*_4);
        _6 = deref_copy ((*_1).1: &&Env);
        _7 = deref_copy (*_6);
        _3 = (_7,);
        _2 = <Func as Fn<(&Env,)>>::call(_5, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 1]) -> A1 {
    debug array => _1;
    let mut _0: A1;
    let mut _3: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
    }
    scope 2 {
        let _2: i128;
    }

    bb0: {
        _2 = _1[0 of 1];
        _3 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <A1 as FromToNativeWasmType>::from_native(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<A1, TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<A1, std::array::TryFromSliceError>;
    let mut _2: A1;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 1]>;
    let mut _4: std::result::Result<[i128; 1], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 1];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 1]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 1], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 1]);
        _2 = <A1 as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<A1, TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<A1, TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: A1) -> [i128; 1] {
    debug self => _1;
    let mut _0: [i128; 1];
    let mut _2: i128;
    let mut _3: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _1;
    }
    scope 2 {
    }

    bb0: {
        _3 = <A1 as FromToNativeWasmType>::to_native(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = [move _2];
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 1] {
    let mut _0: [i128; 1];

    bb0: {
        _0 = [const 0_i128; 1];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S1<A1>) -> A1 {
    debug c_struct => _1;
    let mut _0: A1;
    scope 1 {
        debug A1 => _2;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _0 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: A1) -> S1<A1> {
    debug self => _1;
    let mut _0: externals::function::inner::S1<A1>;
    let mut _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _1;
    }

    bb0: {
        _2 = <A1 as FromToNativeWasmType>::to_native(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = S1::<A1>(move _2);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 1];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 1] = {
    let mut _0: &[wasmer_types::Type; 1];
    let mut _1: [wasmer_types::Type; 1];

    bb0: {
        _1 = [const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<A1, Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _3: &Func;
    let _4: &Func;
    let _5: *const Func;
    let mut _6: *const ();
    let mut _8: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _9: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _10: &&Func;
    let mut _11: isize;
    let mut _12: isize;
    let mut _15: !;
    let mut _16: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _17: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _19: !;
    let mut _21: isize;
    scope 1 {
        debug func => _3;
        let _7: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _7;
            let _13: Rets;
            let _14: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _18: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _13;
            }
            scope 5 {
                debug trap => _14;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _18;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _20: &();
    }

    bb0: {
        _20 = const _;
        _6 = &raw const (*_20);
        _5 = move _6 as *const Func (PtrToPtr);
        _4 = &(*_5);
        _3 = _4;
        _10 = &_3;
        _9 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _10, A1: move _2 };
        _8 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _9);
        _7 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = discriminant(_7);
        switchInt(move _12) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _11 = discriminant(((_7 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _11) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _18 = move ((_7 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _19 = resume_panic(move _18) -> unwind continue;
    }

    bb5: {
        _13 = move ((((_7 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _21 = discriminant(_7);
        switchInt(move _21) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _14 = move ((((_7 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _17 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        _16 = move _17 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _15 = raise_user_trap(move _16) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1,);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: &&Func;
    let mut _7: &Func;

    bb0: {
        _6 = deref_copy (_1.0: &&Func);
        _7 = deref_copy (*_6);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = (move _4,);
        _2 = <Func as Fn<(A1,)>>::call(_7, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<A1, Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _3: &Func;
    let _4: &Func;
    let _5: *const Func;
    let mut _6: *const ();
    let mut _8: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _9: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _10: &&Func;
    let mut _11: &&Env;
    let mut _12: isize;
    let mut _13: isize;
    let mut _16: !;
    let mut _17: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _18: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _20: !;
    let mut _22: isize;
    scope 1 {
        debug func => _3;
        let _7: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _7;
            let _14: Rets;
            let _15: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _19: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _14;
            }
            scope 5 {
                debug trap => _15;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _19;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _21: &();
    }

    bb0: {
        _21 = const _;
        _6 = &raw const (*_21);
        _5 = move _6 as *const Func (PtrToPtr);
        _4 = &(*_5);
        _3 = _4;
        _10 = &_3;
        _11 = &_1;
        _9 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _10, env: move _11, A1: move _2 };
        _8 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _9);
        _7 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = discriminant(_7);
        switchInt(move _13) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _12 = discriminant(((_7 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _12) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _19 = move ((_7 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _20 = resume_panic(move _19) -> unwind continue;
    }

    bb5: {
        _14 = move ((((_7 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        _22 = discriminant(_7);
        switchInt(move _22) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _15 = move ((((_7 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _18 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = move _18 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _16 = raise_user_trap(move _17) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: &&Func;
    let mut _7: &Func;
    let mut _8: &&Env;
    let mut _9: &Env;

    bb0: {
        _6 = deref_copy (_1.0: &&Func);
        _7 = deref_copy (*_6);
        _8 = deref_copy (_1.1: &&Env);
        _9 = deref_copy (*_8);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = (_9, move _4);
        _2 = <Func as Fn<(&Env, A1)>>::call(_7, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 2]) -> (A1, A2) {
    debug array => _1;
    let mut _0: (A1, A2);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
    }

    bb0: {
        _2 = _1[0 of 2];
        _3 = _1[1 of 2];
        _5 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = (move _4, move _6);
        return;
    }

    bb5 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2), std::array::TryFromSliceError>;
    let mut _2: (A1, A2);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 2]>;
    let mut _4: std::result::Result<[i128; 2], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 2];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 2]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 2], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 2]);
        _2 = <(A1, A2) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2)) -> [i128; 2] {
    debug self => _1;
    let mut _0: [i128; 2];
    let mut _4: i128;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: i128;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A2;
    let mut _9: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
    }

    bb0: {
        _9 = const false;
        _2 = move (_1.0: A1);
        _9 = const true;
        _3 = move (_1.1: A2);
        _5 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _4 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _9 = const false;
        _8 = move _3;
        _7 = <A2 as FromToNativeWasmType>::to_native(move _8) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _6 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _7) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _0 = [move _4, move _6];
        _9 = const false;
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_9) -> [0: bb5, otherwise: bb6];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 2] {
    let mut _0: [i128; 2];

    bb0: {
        _0 = [const 0_i128; 2];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S2<A1, A2>) -> (A1, A2) {
    debug c_struct => _1;
    let mut _0: (A1, A2);
    let mut _4: A1;
    let mut _5: A2;
    let mut _6: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _7: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _7 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _7 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _7 = const false;
        _6 = move _3;
        _5 = <A2 as FromToNativeWasmType>::from_native(move _6) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = (move _4, move _5);
        _7 = const false;
        return;
    }

    bb3 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        switchInt(_7) -> [0: bb4, otherwise: bb5];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2)) -> S2<A1, A2> {
    debug self => _1;
    let mut _0: externals::function::inner::S2<A1, A2>;
    let _2: A1;
    let _3: A2;
    let mut _4: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _5: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
    }

    bb0: {
        _7 = const false;
        _2 = move (_1.0: A1);
        _7 = const true;
        _3 = move (_1.1: A2);
        _4 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _7 = const false;
        _6 = move _3;
        _5 = <A2 as FromToNativeWasmType>::to_native(move _6) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = S2::<A1, A2>(move _4, move _5);
        _7 = const false;
        return;
    }

    bb3 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        switchInt(_7) -> [0: bb4, otherwise: bb5];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 2];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 2] = {
    let mut _0: &[wasmer_types::Type; 2];
    let mut _1: [wasmer_types::Type; 2];

    bb0: {
        _1 = [const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _4: &Func;
    let _5: &Func;
    let _6: *const Func;
    let mut _7: *const ();
    let mut _9: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _10: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _11: &&Func;
    let mut _12: isize;
    let mut _13: isize;
    let mut _16: !;
    let mut _17: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _18: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _20: !;
    let mut _22: isize;
    scope 1 {
        debug func => _4;
        let _8: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _8;
            let _14: Rets;
            let _15: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _19: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _14;
            }
            scope 5 {
                debug trap => _15;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _19;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _21: &();
    }

    bb0: {
        _21 = const _;
        _7 = &raw const (*_21);
        _6 = move _7 as *const Func (PtrToPtr);
        _5 = &(*_6);
        _4 = _5;
        _11 = &_4;
        _10 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _11, A1: move _2, A2: move _3 };
        _9 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _10);
        _8 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = discriminant(_8);
        switchInt(move _13) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _12 = discriminant(((_8 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _12) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _19 = move ((_8 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _20 = resume_panic(move _19) -> unwind continue;
    }

    bb5: {
        _14 = move ((((_8 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        _22 = discriminant(_8);
        switchInt(move _22) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _15 = move ((((_8 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _18 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = move _18 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _16 = raise_user_trap(move _17) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: &&Func;
    let mut _9: &Func;
    let mut _10: bool;
    let mut _11: bool;

    bb0: {
        _10 = const false;
        _11 = const false;
        _11 = const true;
        _8 = deref_copy (_1.0: &&Func);
        _9 = deref_copy (*_8);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _10 = const true;
        _11 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _10 = const false;
        _3 = (move _4, move _6);
        _2 = <Func as Fn<(A1, A2)>>::call(_9, move _3) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _10 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_10) -> [0: bb9, otherwise: bb6];
    }

    bb8 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_11) -> [0: bb5, otherwise: bb8];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _4: &Func;
    let _5: &Func;
    let _6: *const Func;
    let mut _7: *const ();
    let mut _9: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _10: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _11: &&Func;
    let mut _12: &&Env;
    let mut _13: isize;
    let mut _14: isize;
    let mut _17: !;
    let mut _18: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _19: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _21: !;
    let mut _23: isize;
    scope 1 {
        debug func => _4;
        let _8: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _8;
            let _15: Rets;
            let _16: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _20: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _15;
            }
            scope 5 {
                debug trap => _16;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _20;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _22: &();
    }

    bb0: {
        _22 = const _;
        _7 = &raw const (*_22);
        _6 = move _7 as *const Func (PtrToPtr);
        _5 = &(*_6);
        _4 = _5;
        _11 = &_4;
        _12 = &_1;
        _10 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _11, env: move _12, A1: move _2, A2: move _3 };
        _9 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _10);
        _8 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _14 = discriminant(_8);
        switchInt(move _14) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _13 = discriminant(((_8 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _20 = move ((_8 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _21 = resume_panic(move _20) -> unwind continue;
    }

    bb5: {
        _15 = move ((((_8 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _23 = discriminant(_8);
        switchInt(move _23) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _16 = move ((((_8 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _19 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = move _19 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _17 = raise_user_trap(move _18) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: &&Func;
    let mut _9: &Func;
    let mut _10: &&Env;
    let mut _11: &Env;
    let mut _12: bool;
    let mut _13: bool;

    bb0: {
        _12 = const false;
        _13 = const false;
        _13 = const true;
        _8 = deref_copy (_1.0: &&Func);
        _9 = deref_copy (*_8);
        _10 = deref_copy (_1.1: &&Env);
        _11 = deref_copy (*_10);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _12 = const true;
        _13 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _12 = const false;
        _3 = (_11, move _4, move _6);
        _2 = <Func as Fn<(&Env, A1, A2)>>::call(_9, move _3) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _12 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_12) -> [0: bb9, otherwise: bb6];
    }

    bb8 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_13) -> [0: bb5, otherwise: bb8];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 3]) -> (A1, A2, A3) {
    debug array => _1;
    let mut _0: (A1, A2, A3);
    let mut _5: A1;
    let mut _6: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _7: A2;
    let mut _8: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _9: A3;
    let mut _10: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
    }

    bb0: {
        _2 = _1[0 of 3];
        _3 = _1[1 of 3];
        _4 = _1[2 of 3];
        _6 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <A1 as FromToNativeWasmType>::from_native(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _7 = <A2 as FromToNativeWasmType>::from_native(move _8) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _10 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        _9 = <A3 as FromToNativeWasmType>::from_native(move _10) -> [return: bb6, unwind: bb7];
    }

    bb6: {
        _0 = (move _5, move _7, move _9);
        return;
    }

    bb7 (cleanup): {
        drop(_7) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 3]>;
    let mut _4: std::result::Result<[i128; 3], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 3];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 3]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 3], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 3]);
        _2 = <(A1, A2, A3) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3)) -> [i128; 3] {
    debug self => _1;
    let mut _0: [i128; 3];
    let mut _5: i128;
    let mut _6: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _7: i128;
    let mut _8: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _9: A2;
    let mut _10: i128;
    let mut _11: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A3;
    let mut _13: bool;
    let mut _14: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
    }

    bb0: {
        _14 = const false;
        _13 = const false;
        _2 = move (_1.0: A1);
        _14 = const true;
        _3 = move (_1.1: A2);
        _13 = const true;
        _4 = move (_1.2: A3);
        _6 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _5 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _6) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _14 = const false;
        _9 = move _3;
        _8 = <A2 as FromToNativeWasmType>::to_native(move _9) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _7 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _8) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _13 = const false;
        _12 = move _4;
        _11 = <A3 as FromToNativeWasmType>::to_native(move _12) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _10 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _11) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _0 = [move _5, move _7, move _10];
        _13 = const false;
        _14 = const false;
        return;
    }

    bb7 (cleanup): {
        switchInt(_14) -> [0: bb8, otherwise: bb11];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_13) -> [0: bb7, otherwise: bb9];
    }

    bb11 (cleanup): {
        drop(_3) -> [return: bb8, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 3] {
    let mut _0: [i128; 3];

    bb0: {
        _0 = [const 0_i128; 3];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S3<A1, A2, A3>) -> (A1, A2, A3) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3);
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: bool;
    let mut _11: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _11 = const false;
        _10 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _11 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _5 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _11 = const false;
        _7 = move _3;
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _10 = const false;
        _9 = move _4;
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = (move _5, move _6, move _8);
        _10 = const false;
        _11 = const false;
        return;
    }

    bb4 (cleanup): {
        drop(_6) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        switchInt(_11) -> [0: bb7, otherwise: bb10];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_10) -> [0: bb6, otherwise: bb8];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3)) -> S3<A1, A2, A3> {
    debug self => _1;
    let mut _0: externals::function::inner::S3<A1, A2, A3>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _7: A2;
    let mut _8: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _9: A3;
    let mut _10: bool;
    let mut _11: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
    }

    bb0: {
        _11 = const false;
        _10 = const false;
        _2 = move (_1.0: A1);
        _11 = const true;
        _3 = move (_1.1: A2);
        _10 = const true;
        _4 = move (_1.2: A3);
        _5 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _11 = const false;
        _7 = move _3;
        _6 = <A2 as FromToNativeWasmType>::to_native(move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _10 = const false;
        _9 = move _4;
        _8 = <A3 as FromToNativeWasmType>::to_native(move _9) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = S3::<A1, A2, A3>(move _5, move _6, move _8);
        _10 = const false;
        _11 = const false;
        return;
    }

    bb4 (cleanup): {
        drop(_6) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        switchInt(_11) -> [0: bb7, otherwise: bb10];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_10) -> [0: bb6, otherwise: bb8];
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 3];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 3] = {
    let mut _0: &[wasmer_types::Type; 3];
    let mut _1: [wasmer_types::Type; 3];

    bb0: {
        _1 = [const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _5: &Func;
    let _6: &Func;
    let _7: *const Func;
    let mut _8: *const ();
    let mut _10: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _11: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _12: &&Func;
    let mut _13: isize;
    let mut _14: isize;
    let mut _17: !;
    let mut _18: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _19: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _21: !;
    let mut _23: isize;
    scope 1 {
        debug func => _5;
        let _9: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _9;
            let _15: Rets;
            let _16: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _20: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _15;
            }
            scope 5 {
                debug trap => _16;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _20;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _22: &();
    }

    bb0: {
        _22 = const _;
        _8 = &raw const (*_22);
        _7 = move _8 as *const Func (PtrToPtr);
        _6 = &(*_7);
        _5 = _6;
        _12 = &_5;
        _11 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _12, A1: move _2, A2: move _3, A3: move _4 };
        _10 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _11);
        _9 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _14 = discriminant(_9);
        switchInt(move _14) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _13 = discriminant(((_9 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _20 = move ((_9 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _21 = resume_panic(move _20) -> unwind continue;
    }

    bb5: {
        _15 = move ((((_9 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _23 = discriminant(_9);
        switchInt(move _23) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _16 = move ((((_9 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _19 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = move _19 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _17 = raise_user_trap(move _18) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: &&Func;
    let mut _11: &Func;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;

    bb0: {
        _13 = const false;
        _12 = const false;
        _15 = const false;
        _14 = const false;
        _14 = const true;
        _15 = const true;
        _10 = deref_copy (_1.0: &&Func);
        _11 = deref_copy (*_10);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb14];
    }

    bb1: {
        _13 = const true;
        _15 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _12 = const true;
        _14 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _13 = const false;
        _12 = const false;
        _3 = (move _4, move _6, move _8);
        _2 = <Func as Fn<(A1, A2, A3)>>::call(_11, move _3) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _12 = const false;
        _13 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_6) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_12) -> [0: bb10, otherwise: bb7];
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_13) -> [0: bb14, otherwise: bb9];
    }

    bb11 (cleanup): {
        switchInt(_14) -> [0: bb6, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_15) -> [0: bb11, otherwise: bb13];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _5: &Func;
    let _6: &Func;
    let _7: *const Func;
    let mut _8: *const ();
    let mut _10: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _11: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _12: &&Func;
    let mut _13: &&Env;
    let mut _14: isize;
    let mut _15: isize;
    let mut _18: !;
    let mut _19: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _20: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _22: !;
    let mut _24: isize;
    scope 1 {
        debug func => _5;
        let _9: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _9;
            let _16: Rets;
            let _17: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _21: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _16;
            }
            scope 5 {
                debug trap => _17;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _21;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _23: &();
    }

    bb0: {
        _23 = const _;
        _8 = &raw const (*_23);
        _7 = move _8 as *const Func (PtrToPtr);
        _6 = &(*_7);
        _5 = _6;
        _12 = &_5;
        _13 = &_1;
        _11 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _12, env: move _13, A1: move _2, A2: move _3, A3: move _4 };
        _10 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _11);
        _9 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _14 = discriminant(((_9 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _14) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _21 = move ((_9 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _22 = resume_panic(move _21) -> unwind continue;
    }

    bb5: {
        _16 = move ((((_9 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        _24 = discriminant(_9);
        switchInt(move _24) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _17 = move ((((_9 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _20 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _19 = move _20 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _18 = raise_user_trap(move _19) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: &&Func;
    let mut _11: &Func;
    let mut _12: &&Env;
    let mut _13: &Env;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;

    bb0: {
        _15 = const false;
        _14 = const false;
        _17 = const false;
        _16 = const false;
        _16 = const true;
        _17 = const true;
        _10 = deref_copy (_1.0: &&Func);
        _11 = deref_copy (*_10);
        _12 = deref_copy (_1.1: &&Env);
        _13 = deref_copy (*_12);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb14];
    }

    bb1: {
        _15 = const true;
        _17 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _14 = const true;
        _16 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _15 = const false;
        _14 = const false;
        _3 = (_13, move _4, move _6, move _8);
        _2 = <Func as Fn<(&Env, A1, A2, A3)>>::call(_11, move _3) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _14 = const false;
        _15 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_6) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_14) -> [0: bb10, otherwise: bb7];
    }

    bb9 (cleanup): {
        drop(_4) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_15) -> [0: bb14, otherwise: bb9];
    }

    bb11 (cleanup): {
        switchInt(_16) -> [0: bb6, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_17) -> [0: bb11, otherwise: bb13];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 4]) -> (A1, A2, A3, A4) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4);
    let mut _6: A1;
    let mut _7: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A2;
    let mut _9: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A3;
    let mut _11: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A4;
    let mut _13: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
    }

    bb0: {
        _2 = _1[0 of 4];
        _3 = _1[1 of 4];
        _4 = _1[2 of 4];
        _5 = _1[3 of 4];
        _7 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <A1 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _8 = <A2 as FromToNativeWasmType>::from_native(move _9) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _11 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _10 = <A3 as FromToNativeWasmType>::from_native(move _11) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _13 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _12 = <A4 as FromToNativeWasmType>::from_native(move _13) -> [return: bb8, unwind: bb9];
    }

    bb8: {
        _0 = (move _6, move _8, move _10, move _12);
        return;
    }

    bb9 (cleanup): {
        drop(_10) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_8) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_6) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 4]>;
    let mut _4: std::result::Result<[i128; 4], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 4];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 4]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 4], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 4]);
        _2 = <(A1, A2, A3, A4) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4)) -> [i128; 4] {
    debug self => _1;
    let mut _0: [i128; 4];
    let mut _6: i128;
    let mut _7: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: i128;
    let mut _9: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A2;
    let mut _11: i128;
    let mut _12: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: A3;
    let mut _14: i128;
    let mut _15: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A4;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
    }

    bb0: {
        _19 = const false;
        _18 = const false;
        _17 = const false;
        _2 = move (_1.0: A1);
        _19 = const true;
        _3 = move (_1.1: A2);
        _18 = const true;
        _4 = move (_1.2: A3);
        _17 = const true;
        _5 = move (_1.3: A4);
        _7 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb13];
    }

    bb1: {
        _6 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _7) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _19 = const false;
        _10 = move _3;
        _9 = <A2 as FromToNativeWasmType>::to_native(move _10) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _8 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _9) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _18 = const false;
        _13 = move _4;
        _12 = <A3 as FromToNativeWasmType>::to_native(move _13) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _11 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _12) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _17 = const false;
        _16 = move _5;
        _15 = <A4 as FromToNativeWasmType>::to_native(move _16) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _14 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _15) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _0 = [move _6, move _8, move _11, move _14];
        _17 = const false;
        _18 = const false;
        _19 = const false;
        return;
    }

    bb9 (cleanup): {
        switchInt(_18) -> [0: bb10, otherwise: bb14];
    }

    bb10 (cleanup): {
        switchInt(_19) -> [0: bb11, otherwise: bb15];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_17) -> [0: bb9, otherwise: bb12];
    }

    bb14 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 4] {
    let mut _0: [i128; 4];

    bb0: {
        _0 = [const 0_i128; 4];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S4<A1, A2, A3, A4>) -> (A1, A2, A3, A4) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4);
    let mut _6: A1;
    let mut _7: A2;
    let mut _8: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _9: A3;
    let mut _10: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _11: A4;
    let mut _12: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _15 = const false;
        _14 = const false;
        _13 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _15 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _13 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _15 = const false;
        _8 = move _3;
        _7 = <A2 as FromToNativeWasmType>::from_native(move _8) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _14 = const false;
        _10 = move _4;
        _9 = <A3 as FromToNativeWasmType>::from_native(move _10) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _13 = const false;
        _12 = move _5;
        _11 = <A4 as FromToNativeWasmType>::from_native(move _12) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = (move _6, move _7, move _9, move _11);
        _13 = const false;
        _14 = const false;
        _15 = const false;
        return;
    }

    bb5 (cleanup): {
        drop(_9) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop(_7) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_6) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_14) -> [0: bb9, otherwise: bb13];
    }

    bb9 (cleanup): {
        switchInt(_15) -> [0: bb10, otherwise: bb14];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_5) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_13) -> [0: bb8, otherwise: bb11];
    }

    bb13 (cleanup): {
        drop(_4) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4)) -> S4<A1, A2, A3, A4> {
    debug self => _1;
    let mut _0: externals::function::inner::S4<A1, A2, A3, A4>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let mut _6: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A2;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A3;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A4;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
    }

    bb0: {
        _15 = const false;
        _14 = const false;
        _13 = const false;
        _2 = move (_1.0: A1);
        _15 = const true;
        _3 = move (_1.1: A2);
        _14 = const true;
        _4 = move (_1.2: A3);
        _13 = const true;
        _5 = move (_1.3: A4);
        _6 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _15 = const false;
        _8 = move _3;
        _7 = <A2 as FromToNativeWasmType>::to_native(move _8) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _14 = const false;
        _10 = move _4;
        _9 = <A3 as FromToNativeWasmType>::to_native(move _10) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _13 = const false;
        _12 = move _5;
        _11 = <A4 as FromToNativeWasmType>::to_native(move _12) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = S4::<A1, A2, A3, A4>(move _6, move _7, move _9, move _11);
        _13 = const false;
        _14 = const false;
        _15 = const false;
        return;
    }

    bb5 (cleanup): {
        drop(_9) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop(_7) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_6) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_14) -> [0: bb9, otherwise: bb13];
    }

    bb9 (cleanup): {
        switchInt(_15) -> [0: bb10, otherwise: bb14];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_5) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_13) -> [0: bb8, otherwise: bb11];
    }

    bb13 (cleanup): {
        drop(_4) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 4];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 4] = {
    let mut _0: &[wasmer_types::Type; 4];
    let mut _1: [wasmer_types::Type; 4];

    bb0: {
        _1 = [const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _6: &Func;
    let _7: &Func;
    let _8: *const Func;
    let mut _9: *const ();
    let mut _11: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _12: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _13: &&Func;
    let mut _14: isize;
    let mut _15: isize;
    let mut _18: !;
    let mut _19: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _20: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _22: !;
    let mut _24: isize;
    scope 1 {
        debug func => _6;
        let _10: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _10;
            let _16: Rets;
            let _17: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _21: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _16;
            }
            scope 5 {
                debug trap => _17;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _21;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _23: &();
    }

    bb0: {
        _23 = const _;
        _9 = &raw const (*_23);
        _8 = move _9 as *const Func (PtrToPtr);
        _7 = &(*_8);
        _6 = _7;
        _13 = &_6;
        _12 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _13, A1: move _2, A2: move _3, A3: move _4, A4: move _5 };
        _11 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _12);
        _10 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _15 = discriminant(_10);
        switchInt(move _15) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _14 = discriminant(((_10 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _14) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _21 = move ((_10 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _22 = resume_panic(move _21) -> unwind continue;
    }

    bb5: {
        _16 = move ((((_10 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        _24 = discriminant(_10);
        switchInt(move _24) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _17 = move ((((_10 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _20 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _19 = move _20 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _18 = raise_user_trap(move _19) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: &&Func;
    let mut _13: &Func;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;

    bb0: {
        _16 = const false;
        _15 = const false;
        _14 = const false;
        _19 = const false;
        _18 = const false;
        _17 = const false;
        _17 = const true;
        _18 = const true;
        _19 = const true;
        _12 = deref_copy (_1.0: &&Func);
        _13 = deref_copy (*_12);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb19];
    }

    bb1: {
        _16 = const true;
        _19 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _15 = const true;
        _18 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _14 = const true;
        _17 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _16 = const false;
        _15 = const false;
        _14 = const false;
        _3 = (move _4, move _6, move _8, move _10);
        _2 = <Func as Fn<(A1, A2, A3, A4)>>::call(_13, move _3) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _14 = const false;
        _15 = const false;
        _16 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_8) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_14) -> [0: bb11, otherwise: bb8];
    }

    bb10 (cleanup): {
        drop(_6) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_15) -> [0: bb13, otherwise: bb10];
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_16) -> [0: bb19, otherwise: bb12];
    }

    bb14 (cleanup): {
        switchInt(_17) -> [0: bb7, otherwise: bb15];
    }

    bb15 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_18) -> [0: bb14, otherwise: bb17];
    }

    bb17 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_19) -> [0: bb16, otherwise: bb18];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _6: &Func;
    let _7: &Func;
    let _8: *const Func;
    let mut _9: *const ();
    let mut _11: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _12: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _13: &&Func;
    let mut _14: &&Env;
    let mut _15: isize;
    let mut _16: isize;
    let mut _19: !;
    let mut _20: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _21: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _23: !;
    let mut _25: isize;
    scope 1 {
        debug func => _6;
        let _10: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _10;
            let _17: Rets;
            let _18: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _22: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _17;
            }
            scope 5 {
                debug trap => _18;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _22;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _24: &();
    }

    bb0: {
        _24 = const _;
        _9 = &raw const (*_24);
        _8 = move _9 as *const Func (PtrToPtr);
        _7 = &(*_8);
        _6 = _7;
        _13 = &_6;
        _14 = &_1;
        _12 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _13, env: move _14, A1: move _2, A2: move _3, A3: move _4, A4: move _5 };
        _11 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _12);
        _10 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _16 = discriminant(_10);
        switchInt(move _16) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _15 = discriminant(((_10 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _15) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _22 = move ((_10 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _23 = resume_panic(move _22) -> unwind continue;
    }

    bb5: {
        _17 = move ((((_10 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        _25 = discriminant(_10);
        switchInt(move _25) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _18 = move ((((_10 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _21 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = move _21 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _19 = raise_user_trap(move _20) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: &&Func;
    let mut _13: &Func;
    let mut _14: &&Env;
    let mut _15: &Env;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;

    bb0: {
        _18 = const false;
        _17 = const false;
        _16 = const false;
        _21 = const false;
        _20 = const false;
        _19 = const false;
        _19 = const true;
        _20 = const true;
        _21 = const true;
        _12 = deref_copy (_1.0: &&Func);
        _13 = deref_copy (*_12);
        _14 = deref_copy (_1.1: &&Env);
        _15 = deref_copy (*_14);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb19];
    }

    bb1: {
        _18 = const true;
        _21 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _17 = const true;
        _20 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _16 = const true;
        _19 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _18 = const false;
        _17 = const false;
        _16 = const false;
        _3 = (_15, move _4, move _6, move _8, move _10);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4)>>::call(_13, move _3) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _16 = const false;
        _17 = const false;
        _18 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_8) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_16) -> [0: bb11, otherwise: bb8];
    }

    bb10 (cleanup): {
        drop(_6) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_17) -> [0: bb13, otherwise: bb10];
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_18) -> [0: bb19, otherwise: bb12];
    }

    bb14 (cleanup): {
        switchInt(_19) -> [0: bb7, otherwise: bb15];
    }

    bb15 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_20) -> [0: bb14, otherwise: bb17];
    }

    bb17 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_21) -> [0: bb16, otherwise: bb18];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 5]) -> (A1, A2, A3, A4, A5) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5);
    let mut _7: A1;
    let mut _8: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _9: A2;
    let mut _10: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _11: A3;
    let mut _12: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: A4;
    let mut _14: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A5;
    let mut _16: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
    }

    bb0: {
        _2 = _1[0 of 5];
        _3 = _1[1 of 5];
        _4 = _1[2 of 5];
        _5 = _1[3 of 5];
        _6 = _1[4 of 5];
        _8 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = <A1 as FromToNativeWasmType>::from_native(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _9 = <A2 as FromToNativeWasmType>::from_native(move _10) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _12 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _11 = <A3 as FromToNativeWasmType>::from_native(move _12) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _14 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _13 = <A4 as FromToNativeWasmType>::from_native(move _14) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _16 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        _15 = <A5 as FromToNativeWasmType>::from_native(move _16) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        _0 = (move _7, move _9, move _11, move _13, move _15);
        return;
    }

    bb11 (cleanup): {
        drop(_13) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_11) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_9) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_7) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 5]>;
    let mut _4: std::result::Result<[i128; 5], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 5];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 5]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 5], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 5]);
        _2 = <(A1, A2, A3, A4, A5) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5)) -> [i128; 5] {
    debug self => _1;
    let mut _0: [i128; 5];
    let mut _7: i128;
    let mut _8: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _9: i128;
    let mut _10: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _11: A2;
    let mut _12: i128;
    let mut _13: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A3;
    let mut _15: i128;
    let mut _16: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A4;
    let mut _18: i128;
    let mut _19: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A5;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
    }

    bb0: {
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _2 = move (_1.0: A1);
        _24 = const true;
        _3 = move (_1.1: A2);
        _23 = const true;
        _4 = move (_1.2: A3);
        _22 = const true;
        _5 = move (_1.3: A4);
        _21 = const true;
        _6 = move (_1.4: A5);
        _8 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _7 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _8) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _24 = const false;
        _11 = move _3;
        _10 = <A2 as FromToNativeWasmType>::to_native(move _11) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _9 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _10) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        _23 = const false;
        _14 = move _4;
        _13 = <A3 as FromToNativeWasmType>::to_native(move _14) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _12 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _13) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _22 = const false;
        _17 = move _5;
        _16 = <A4 as FromToNativeWasmType>::to_native(move _17) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _15 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _16) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _21 = const false;
        _20 = move _6;
        _19 = <A5 as FromToNativeWasmType>::to_native(move _20) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _18 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _19) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _0 = [move _7, move _9, move _12, move _15, move _18];
        _21 = const false;
        _22 = const false;
        _23 = const false;
        _24 = const false;
        return;
    }

    bb11 (cleanup): {
        switchInt(_22) -> [0: bb12, otherwise: bb17];
    }

    bb12 (cleanup): {
        switchInt(_23) -> [0: bb13, otherwise: bb18];
    }

    bb13 (cleanup): {
        switchInt(_24) -> [0: bb14, otherwise: bb19];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_6) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_21) -> [0: bb11, otherwise: bb15];
    }

    bb17 (cleanup): {
        drop(_5) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_4) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_3) -> [return: bb14, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 5] {
    let mut _0: [i128; 5];

    bb0: {
        _0 = [const 0_i128; 5];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S5<A1, A2, A3, A4, A5>) -> (A1, A2, A3, A4, A5) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5);
    let mut _7: A1;
    let mut _8: A2;
    let mut _9: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A3;
    let mut _11: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A4;
    let mut _13: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A5;
    let mut _15: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _19 = const false;
        _18 = const false;
        _17 = const false;
        _16 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _19 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _17 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _7 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb15];
    }

    bb1: {
        _19 = const false;
        _9 = move _3;
        _8 = <A2 as FromToNativeWasmType>::from_native(move _9) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _18 = const false;
        _11 = move _4;
        _10 = <A3 as FromToNativeWasmType>::from_native(move _11) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _17 = const false;
        _13 = move _5;
        _12 = <A4 as FromToNativeWasmType>::from_native(move _13) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _16 = const false;
        _15 = move _6;
        _14 = <A5 as FromToNativeWasmType>::from_native(move _15) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = (move _7, move _8, move _10, move _12, move _14);
        _16 = const false;
        _17 = const false;
        _18 = const false;
        _19 = const false;
        return;
    }

    bb6 (cleanup): {
        drop(_12) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_8) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_7) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_17) -> [0: bb11, otherwise: bb16];
    }

    bb11 (cleanup): {
        switchInt(_18) -> [0: bb12, otherwise: bb17];
    }

    bb12 (cleanup): {
        switchInt(_19) -> [0: bb13, otherwise: bb18];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_6) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_16) -> [0: bb10, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_5) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_4) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5)) -> S5<A1, A2, A3, A4, A5> {
    debug self => _1;
    let mut _0: externals::function::inner::S5<A1, A2, A3, A4, A5>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let mut _7: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _9: A2;
    let mut _10: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _11: A3;
    let mut _12: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: A4;
    let mut _14: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A5;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
    }

    bb0: {
        _19 = const false;
        _18 = const false;
        _17 = const false;
        _16 = const false;
        _2 = move (_1.0: A1);
        _19 = const true;
        _3 = move (_1.1: A2);
        _18 = const true;
        _4 = move (_1.2: A3);
        _17 = const true;
        _5 = move (_1.3: A4);
        _16 = const true;
        _6 = move (_1.4: A5);
        _7 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb15];
    }

    bb1: {
        _19 = const false;
        _9 = move _3;
        _8 = <A2 as FromToNativeWasmType>::to_native(move _9) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _18 = const false;
        _11 = move _4;
        _10 = <A3 as FromToNativeWasmType>::to_native(move _11) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _17 = const false;
        _13 = move _5;
        _12 = <A4 as FromToNativeWasmType>::to_native(move _13) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _16 = const false;
        _15 = move _6;
        _14 = <A5 as FromToNativeWasmType>::to_native(move _15) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = S5::<A1, A2, A3, A4, A5>(move _7, move _8, move _10, move _12, move _14);
        _16 = const false;
        _17 = const false;
        _18 = const false;
        _19 = const false;
        return;
    }

    bb6 (cleanup): {
        drop(_12) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_10) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_8) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_7) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_17) -> [0: bb11, otherwise: bb16];
    }

    bb11 (cleanup): {
        switchInt(_18) -> [0: bb12, otherwise: bb17];
    }

    bb12 (cleanup): {
        switchInt(_19) -> [0: bb13, otherwise: bb18];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_6) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_16) -> [0: bb10, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_5) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_4) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 5];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 5] = {
    let mut _0: &[wasmer_types::Type; 5];
    let mut _1: [wasmer_types::Type; 5];

    bb0: {
        _1 = [const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _7: &Func;
    let _8: &Func;
    let _9: *const Func;
    let mut _10: *const ();
    let mut _12: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _13: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _14: &&Func;
    let mut _15: isize;
    let mut _16: isize;
    let mut _19: !;
    let mut _20: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _21: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _23: !;
    let mut _25: isize;
    scope 1 {
        debug func => _7;
        let _11: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _11;
            let _17: Rets;
            let _18: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _22: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _17;
            }
            scope 5 {
                debug trap => _18;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _22;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _24: &();
    }

    bb0: {
        _24 = const _;
        _10 = &raw const (*_24);
        _9 = move _10 as *const Func (PtrToPtr);
        _8 = &(*_9);
        _7 = _8;
        _14 = &_7;
        _13 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _14, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6 };
        _12 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _13);
        _11 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _16 = discriminant(_11);
        switchInt(move _16) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _15 = discriminant(((_11 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _15) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _22 = move ((_11 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _23 = resume_panic(move _22) -> unwind continue;
    }

    bb5: {
        _17 = move ((((_11 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        _25 = discriminant(_11);
        switchInt(move _25) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _18 = move ((((_11 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _21 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = move _21 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _19 = raise_user_trap(move _20) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: &&Func;
    let mut _15: &Func;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;

    bb0: {
        _19 = const false;
        _18 = const false;
        _17 = const false;
        _16 = const false;
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _20 = const true;
        _21 = const true;
        _22 = const true;
        _23 = const true;
        _14 = deref_copy (_1.0: &&Func);
        _15 = deref_copy (*_14);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb24];
    }

    bb1: {
        _19 = const true;
        _23 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _18 = const true;
        _22 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _17 = const true;
        _21 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _16 = const true;
        _20 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _19 = const false;
        _18 = const false;
        _17 = const false;
        _16 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5)>>::call(_15, move _3) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _16 = const false;
        _17 = const false;
        _18 = const false;
        _19 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        drop(_10) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_16) -> [0: bb12, otherwise: bb9];
    }

    bb11 (cleanup): {
        drop(_8) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_17) -> [0: bb14, otherwise: bb11];
    }

    bb13 (cleanup): {
        drop(_6) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_18) -> [0: bb16, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_4) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_19) -> [0: bb24, otherwise: bb15];
    }

    bb17 (cleanup): {
        switchInt(_20) -> [0: bb8, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_21) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_22) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_23) -> [0: bb21, otherwise: bb23];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _7: &Func;
    let _8: &Func;
    let _9: *const Func;
    let mut _10: *const ();
    let mut _12: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _13: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _14: &&Func;
    let mut _15: &&Env;
    let mut _16: isize;
    let mut _17: isize;
    let mut _20: !;
    let mut _21: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _22: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _24: !;
    let mut _26: isize;
    scope 1 {
        debug func => _7;
        let _11: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _11;
            let _18: Rets;
            let _19: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _23: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _18;
            }
            scope 5 {
                debug trap => _19;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _23;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _25: &();
    }

    bb0: {
        _25 = const _;
        _10 = &raw const (*_25);
        _9 = move _10 as *const Func (PtrToPtr);
        _8 = &(*_9);
        _7 = _8;
        _14 = &_7;
        _15 = &_1;
        _13 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _14, env: move _15, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6 };
        _12 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _13);
        _11 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _17 = discriminant(_11);
        switchInt(move _17) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _16 = discriminant(((_11 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _16) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _23 = move ((_11 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _24 = resume_panic(move _23) -> unwind continue;
    }

    bb5: {
        _18 = move ((((_11 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        _26 = discriminant(_11);
        switchInt(move _26) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _19 = move ((((_11 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _22 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _21 = move _22 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _20 = raise_user_trap(move _21) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: &&Func;
    let mut _15: &Func;
    let mut _16: &&Env;
    let mut _17: &Env;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;

    bb0: {
        _21 = const false;
        _20 = const false;
        _19 = const false;
        _18 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _22 = const true;
        _23 = const true;
        _24 = const true;
        _25 = const true;
        _14 = deref_copy (_1.0: &&Func);
        _15 = deref_copy (*_14);
        _16 = deref_copy (_1.1: &&Env);
        _17 = deref_copy (*_16);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb24];
    }

    bb1: {
        _21 = const true;
        _25 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _20 = const true;
        _24 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _19 = const true;
        _23 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _18 = const true;
        _22 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _21 = const false;
        _20 = const false;
        _19 = const false;
        _18 = const false;
        _3 = (_17, move _4, move _6, move _8, move _10, move _12);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5)>>::call(_15, move _3) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _18 = const false;
        _19 = const false;
        _20 = const false;
        _21 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        drop(_10) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_18) -> [0: bb12, otherwise: bb9];
    }

    bb11 (cleanup): {
        drop(_8) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_19) -> [0: bb14, otherwise: bb11];
    }

    bb13 (cleanup): {
        drop(_6) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_20) -> [0: bb16, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_4) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_21) -> [0: bb24, otherwise: bb15];
    }

    bb17 (cleanup): {
        switchInt(_22) -> [0: bb8, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_23) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_24) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_25) -> [0: bb21, otherwise: bb23];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 6_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 6]) -> (A1, A2, A3, A4, A5, A6) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6);
    let mut _8: A1;
    let mut _9: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A2;
    let mut _11: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A3;
    let mut _13: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A4;
    let mut _15: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A5;
    let mut _17: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A6;
    let mut _19: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
    }

    bb0: {
        _2 = _1[0 of 6];
        _3 = _1[1 of 6];
        _4 = _1[2 of 6];
        _5 = _1[3 of 6];
        _6 = _1[4 of 6];
        _7 = _1[5 of 6];
        _9 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = <A1 as FromToNativeWasmType>::from_native(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _10 = <A2 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _13 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _12 = <A3 as FromToNativeWasmType>::from_native(move _13) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _15 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb15];
    }

    bb7: {
        _14 = <A4 as FromToNativeWasmType>::from_native(move _15) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        _17 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _16 = <A5 as FromToNativeWasmType>::from_native(move _17) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _19 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _18 = <A6 as FromToNativeWasmType>::from_native(move _19) -> [return: bb12, unwind: bb13];
    }

    bb12: {
        _0 = (move _8, move _10, move _12, move _14, move _16, move _18);
        return;
    }

    bb13 (cleanup): {
        drop(_16) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_14) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_12) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_10) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_8) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 6]>;
    let mut _4: std::result::Result<[i128; 6], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 6];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 6]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 6], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 6]);
        _2 = <(A1, A2, A3, A4, A5, A6) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6)) -> [i128; 6] {
    debug self => _1;
    let mut _0: [i128; 6];
    let mut _8: i128;
    let mut _9: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: i128;
    let mut _11: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A2;
    let mut _13: i128;
    let mut _14: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A3;
    let mut _16: i128;
    let mut _17: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A4;
    let mut _19: i128;
    let mut _20: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A5;
    let mut _22: i128;
    let mut _23: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A6;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
    }

    bb0: {
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _2 = move (_1.0: A1);
        _29 = const true;
        _3 = move (_1.1: A2);
        _28 = const true;
        _4 = move (_1.2: A3);
        _27 = const true;
        _5 = move (_1.3: A4);
        _26 = const true;
        _6 = move (_1.4: A5);
        _25 = const true;
        _7 = move (_1.5: A6);
        _9 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb19];
    }

    bb1: {
        _8 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _9) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _29 = const false;
        _12 = move _3;
        _11 = <A2 as FromToNativeWasmType>::to_native(move _12) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _10 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _11) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _28 = const false;
        _15 = move _4;
        _14 = <A3 as FromToNativeWasmType>::to_native(move _15) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _13 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _14) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _27 = const false;
        _18 = move _5;
        _17 = <A4 as FromToNativeWasmType>::to_native(move _18) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _16 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _17) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _26 = const false;
        _21 = move _6;
        _20 = <A5 as FromToNativeWasmType>::to_native(move _21) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        _19 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _20) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _25 = const false;
        _24 = move _7;
        _23 = <A6 as FromToNativeWasmType>::to_native(move _24) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _22 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _23) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        _0 = [move _8, move _10, move _13, move _16, move _19, move _22];
        _25 = const false;
        _26 = const false;
        _27 = const false;
        _28 = const false;
        _29 = const false;
        return;
    }

    bb13 (cleanup): {
        switchInt(_26) -> [0: bb14, otherwise: bb20];
    }

    bb14 (cleanup): {
        switchInt(_27) -> [0: bb15, otherwise: bb21];
    }

    bb15 (cleanup): {
        switchInt(_28) -> [0: bb16, otherwise: bb22];
    }

    bb16 (cleanup): {
        switchInt(_29) -> [0: bb17, otherwise: bb23];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_7) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_25) -> [0: bb13, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_6) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_5) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_4) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_3) -> [return: bb17, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 6] {
    let mut _0: [i128; 6];

    bb0: {
        _0 = [const 0_i128; 6];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 6_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S6<A1, A2, A3, A4, A5, A6>) -> (A1, A2, A3, A4, A5, A6) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6);
    let mut _8: A1;
    let mut _9: A2;
    let mut _10: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _11: A3;
    let mut _12: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: A4;
    let mut _14: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A5;
    let mut _16: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A6;
    let mut _18: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _19 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _23 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _21 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _19 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb18];
    }

    bb1: {
        _23 = const false;
        _10 = move _3;
        _9 = <A2 as FromToNativeWasmType>::from_native(move _10) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _22 = const false;
        _12 = move _4;
        _11 = <A3 as FromToNativeWasmType>::from_native(move _12) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _21 = const false;
        _14 = move _5;
        _13 = <A4 as FromToNativeWasmType>::from_native(move _14) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _20 = const false;
        _16 = move _6;
        _15 = <A5 as FromToNativeWasmType>::from_native(move _16) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _19 = const false;
        _18 = move _7;
        _17 = <A6 as FromToNativeWasmType>::from_native(move _18) -> [return: bb6, unwind: bb7];
    }

    bb6: {
        _0 = (move _8, move _9, move _11, move _13, move _15, move _17);
        _19 = const false;
        _20 = const false;
        _21 = const false;
        _22 = const false;
        _23 = const false;
        return;
    }

    bb7 (cleanup): {
        drop(_15) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_13) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_11) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_9) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_8) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_20) -> [0: bb13, otherwise: bb19];
    }

    bb13 (cleanup): {
        switchInt(_21) -> [0: bb14, otherwise: bb20];
    }

    bb14 (cleanup): {
        switchInt(_22) -> [0: bb15, otherwise: bb21];
    }

    bb15 (cleanup): {
        switchInt(_23) -> [0: bb16, otherwise: bb22];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17 (cleanup): {
        drop(_7) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_19) -> [0: bb12, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_6) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_5) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_4) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_3) -> [return: bb16, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6)) -> S6<A1, A2, A3, A4, A5, A6> {
    debug self => _1;
    let mut _0: externals::function::inner::S6<A1, A2, A3, A4, A5, A6>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let mut _8: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _9: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A2;
    let mut _11: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A3;
    let mut _13: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A4;
    let mut _15: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A5;
    let mut _17: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A6;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
    }

    bb0: {
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _19 = const false;
        _2 = move (_1.0: A1);
        _23 = const true;
        _3 = move (_1.1: A2);
        _22 = const true;
        _4 = move (_1.2: A3);
        _21 = const true;
        _5 = move (_1.3: A4);
        _20 = const true;
        _6 = move (_1.4: A5);
        _19 = const true;
        _7 = move (_1.5: A6);
        _8 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb18];
    }

    bb1: {
        _23 = const false;
        _10 = move _3;
        _9 = <A2 as FromToNativeWasmType>::to_native(move _10) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _22 = const false;
        _12 = move _4;
        _11 = <A3 as FromToNativeWasmType>::to_native(move _12) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _21 = const false;
        _14 = move _5;
        _13 = <A4 as FromToNativeWasmType>::to_native(move _14) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _20 = const false;
        _16 = move _6;
        _15 = <A5 as FromToNativeWasmType>::to_native(move _16) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _19 = const false;
        _18 = move _7;
        _17 = <A6 as FromToNativeWasmType>::to_native(move _18) -> [return: bb6, unwind: bb7];
    }

    bb6: {
        _0 = S6::<A1, A2, A3, A4, A5, A6>(move _8, move _9, move _11, move _13, move _15, move _17);
        _19 = const false;
        _20 = const false;
        _21 = const false;
        _22 = const false;
        _23 = const false;
        return;
    }

    bb7 (cleanup): {
        drop(_15) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_13) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_11) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_9) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_8) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_20) -> [0: bb13, otherwise: bb19];
    }

    bb13 (cleanup): {
        switchInt(_21) -> [0: bb14, otherwise: bb20];
    }

    bb14 (cleanup): {
        switchInt(_22) -> [0: bb15, otherwise: bb21];
    }

    bb15 (cleanup): {
        switchInt(_23) -> [0: bb16, otherwise: bb22];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17 (cleanup): {
        drop(_7) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_19) -> [0: bb12, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_6) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_5) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_4) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_3) -> [return: bb16, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 6];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 6] = {
    let mut _0: &[wasmer_types::Type; 6];
    let mut _1: [wasmer_types::Type; 6];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _8: &Func;
    let _9: &Func;
    let _10: *const Func;
    let mut _11: *const ();
    let mut _13: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _14: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _15: &&Func;
    let mut _16: isize;
    let mut _17: isize;
    let mut _20: !;
    let mut _21: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _22: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _24: !;
    let mut _26: isize;
    scope 1 {
        debug func => _8;
        let _12: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _12;
            let _18: Rets;
            let _19: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _23: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _18;
            }
            scope 5 {
                debug trap => _19;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _23;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _25: &();
    }

    bb0: {
        _25 = const _;
        _11 = &raw const (*_25);
        _10 = move _11 as *const Func (PtrToPtr);
        _9 = &(*_10);
        _8 = _9;
        _15 = &_8;
        _14 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _15, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7 };
        _13 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _14);
        _12 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        _17 = discriminant(_12);
        switchInt(move _17) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _16 = discriminant(((_12 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _16) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _23 = move ((_12 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _24 = resume_panic(move _23) -> unwind continue;
    }

    bb5: {
        _18 = move ((((_12 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        _26 = discriminant(_12);
        switchInt(move _26) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _19 = move ((((_12 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _22 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _21 = move _22 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _20 = raise_user_trap(move _21) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: &&Func;
    let mut _17: &Func;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;

    bb0: {
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _19 = const false;
        _18 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _23 = const true;
        _24 = const true;
        _25 = const true;
        _26 = const true;
        _27 = const true;
        _16 = deref_copy (_1.0: &&Func);
        _17 = deref_copy (*_16);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb29];
    }

    bb1: {
        _22 = const true;
        _27 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _21 = const true;
        _26 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _20 = const true;
        _25 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _19 = const true;
        _24 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _18 = const true;
        _23 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _19 = const false;
        _18 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6)>>::call(_17, move _3) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _18 = const false;
        _19 = const false;
        _20 = const false;
        _21 = const false;
        _22 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_12) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_18) -> [0: bb13, otherwise: bb10];
    }

    bb12 (cleanup): {
        drop(_10) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_19) -> [0: bb15, otherwise: bb12];
    }

    bb14 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_20) -> [0: bb17, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_6) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_21) -> [0: bb19, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_4) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_22) -> [0: bb29, otherwise: bb18];
    }

    bb20 (cleanup): {
        switchInt(_23) -> [0: bb9, otherwise: bb21];
    }

    bb21 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_24) -> [0: bb20, otherwise: bb23];
    }

    bb23 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_25) -> [0: bb22, otherwise: bb25];
    }

    bb25 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_26) -> [0: bb24, otherwise: bb27];
    }

    bb27 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_27) -> [0: bb26, otherwise: bb28];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _8: &Func;
    let _9: &Func;
    let _10: *const Func;
    let mut _11: *const ();
    let mut _13: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _14: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _15: &&Func;
    let mut _16: &&Env;
    let mut _17: isize;
    let mut _18: isize;
    let mut _21: !;
    let mut _22: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _23: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _25: !;
    let mut _27: isize;
    scope 1 {
        debug func => _8;
        let _12: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _12;
            let _19: Rets;
            let _20: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _24: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _19;
            }
            scope 5 {
                debug trap => _20;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _24;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _26: &();
    }

    bb0: {
        _26 = const _;
        _11 = &raw const (*_26);
        _10 = move _11 as *const Func (PtrToPtr);
        _9 = &(*_10);
        _8 = _9;
        _15 = &_8;
        _16 = &_1;
        _14 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _15, env: move _16, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7 };
        _13 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _14);
        _12 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        _18 = discriminant(_12);
        switchInt(move _18) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _17 = discriminant(((_12 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _17) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _24 = move ((_12 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _25 = resume_panic(move _24) -> unwind continue;
    }

    bb5: {
        _19 = move ((((_12 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _27 = discriminant(_12);
        switchInt(move _27) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _20 = move ((((_12 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _23 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        _22 = move _23 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _21 = raise_user_trap(move _22) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: &&Func;
    let mut _17: &Func;
    let mut _18: &&Env;
    let mut _19: &Env;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;

    bb0: {
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _25 = const true;
        _26 = const true;
        _27 = const true;
        _28 = const true;
        _29 = const true;
        _16 = deref_copy (_1.0: &&Func);
        _17 = deref_copy (*_16);
        _18 = deref_copy (_1.1: &&Env);
        _19 = deref_copy (*_18);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb29];
    }

    bb1: {
        _24 = const true;
        _29 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _23 = const true;
        _28 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _22 = const true;
        _27 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _21 = const true;
        _26 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _20 = const true;
        _25 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _3 = (_19, move _4, move _6, move _8, move _10, move _12, move _14);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6)>>::call(_17, move _3) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _20 = const false;
        _21 = const false;
        _22 = const false;
        _23 = const false;
        _24 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_12) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_20) -> [0: bb13, otherwise: bb10];
    }

    bb12 (cleanup): {
        drop(_10) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_21) -> [0: bb15, otherwise: bb12];
    }

    bb14 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_22) -> [0: bb17, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_6) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_23) -> [0: bb19, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_4) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_24) -> [0: bb29, otherwise: bb18];
    }

    bb20 (cleanup): {
        switchInt(_25) -> [0: bb9, otherwise: bb21];
    }

    bb21 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_26) -> [0: bb20, otherwise: bb23];
    }

    bb23 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_27) -> [0: bb22, otherwise: bb25];
    }

    bb25 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_28) -> [0: bb24, otherwise: bb27];
    }

    bb27 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_29) -> [0: bb26, otherwise: bb28];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 7_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 7]) -> (A1, A2, A3, A4, A5, A6, A7) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7);
    let mut _9: A1;
    let mut _10: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _11: A2;
    let mut _12: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: A3;
    let mut _14: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A4;
    let mut _16: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A5;
    let mut _18: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A6;
    let mut _20: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A7;
    let mut _22: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
    }

    bb0: {
        _2 = _1[0 of 7];
        _3 = _1[1 of 7];
        _4 = _1[2 of 7];
        _5 = _1[3 of 7];
        _6 = _1[4 of 7];
        _7 = _1[5 of 7];
        _8 = _1[6 of 7];
        _10 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = <A1 as FromToNativeWasmType>::from_native(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _11 = <A2 as FromToNativeWasmType>::from_native(move _12) -> [return: bb4, unwind: bb20];
    }

    bb4: {
        _14 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _13 = <A3 as FromToNativeWasmType>::from_native(move _14) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _16 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _15 = <A4 as FromToNativeWasmType>::from_native(move _16) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        _18 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _17 = <A5 as FromToNativeWasmType>::from_native(move _18) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _20 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _19 = <A6 as FromToNativeWasmType>::from_native(move _20) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _22 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb15];
    }

    bb13: {
        _21 = <A7 as FromToNativeWasmType>::from_native(move _22) -> [return: bb14, unwind: bb15];
    }

    bb14: {
        _0 = (move _9, move _11, move _13, move _15, move _17, move _19, move _21);
        return;
    }

    bb15 (cleanup): {
        drop(_19) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_17) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_15) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_13) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_11) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_9) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 7]>;
    let mut _4: std::result::Result<[i128; 7], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 7];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 7]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 7], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 7]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7)) -> [i128; 7] {
    debug self => _1;
    let mut _0: [i128; 7];
    let mut _9: i128;
    let mut _10: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _11: i128;
    let mut _12: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: A2;
    let mut _14: i128;
    let mut _15: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A3;
    let mut _17: i128;
    let mut _18: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A4;
    let mut _20: i128;
    let mut _21: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A5;
    let mut _23: i128;
    let mut _24: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A6;
    let mut _26: i128;
    let mut _27: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A7;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
    }

    bb0: {
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _2 = move (_1.0: A1);
        _34 = const true;
        _3 = move (_1.1: A2);
        _33 = const true;
        _4 = move (_1.2: A3);
        _32 = const true;
        _5 = move (_1.3: A4);
        _31 = const true;
        _6 = move (_1.4: A5);
        _30 = const true;
        _7 = move (_1.5: A6);
        _29 = const true;
        _8 = move (_1.6: A7);
        _10 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _9 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _10) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _34 = const false;
        _13 = move _3;
        _12 = <A2 as FromToNativeWasmType>::to_native(move _13) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _11 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _12) -> [return: bb4, unwind: bb22];
    }

    bb4: {
        _33 = const false;
        _16 = move _4;
        _15 = <A3 as FromToNativeWasmType>::to_native(move _16) -> [return: bb5, unwind: bb22];
    }

    bb5: {
        _14 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _15) -> [return: bb6, unwind: bb22];
    }

    bb6: {
        _32 = const false;
        _19 = move _5;
        _18 = <A4 as FromToNativeWasmType>::to_native(move _19) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        _17 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _18) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        _31 = const false;
        _22 = move _6;
        _21 = <A5 as FromToNativeWasmType>::to_native(move _22) -> [return: bb9, unwind: bb22];
    }

    bb9: {
        _20 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _21) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        _30 = const false;
        _25 = move _7;
        _24 = <A6 as FromToNativeWasmType>::to_native(move _25) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _23 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _24) -> [return: bb12, unwind: bb22];
    }

    bb12: {
        _29 = const false;
        _28 = move _8;
        _27 = <A7 as FromToNativeWasmType>::to_native(move _28) -> [return: bb13, unwind: bb22];
    }

    bb13: {
        _26 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _27) -> [return: bb14, unwind: bb22];
    }

    bb14: {
        _0 = [move _9, move _11, move _14, move _17, move _20, move _23, move _26];
        _29 = const false;
        _30 = const false;
        _31 = const false;
        _32 = const false;
        _33 = const false;
        _34 = const false;
        return;
    }

    bb15 (cleanup): {
        switchInt(_30) -> [0: bb16, otherwise: bb23];
    }

    bb16 (cleanup): {
        switchInt(_31) -> [0: bb17, otherwise: bb24];
    }

    bb17 (cleanup): {
        switchInt(_32) -> [0: bb18, otherwise: bb25];
    }

    bb18 (cleanup): {
        switchInt(_33) -> [0: bb19, otherwise: bb26];
    }

    bb19 (cleanup): {
        switchInt(_34) -> [0: bb20, otherwise: bb27];
    }

    bb20 (cleanup): {
        resume;
    }

    bb21 (cleanup): {
        drop(_8) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_29) -> [0: bb15, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_7) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_6) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_5) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_4) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 7] {
    let mut _0: [i128; 7];

    bb0: {
        _0 = [const 0_i128; 7];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 7_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S7<A1, A2, A3, A4, A5, A6, A7>) -> (A1, A2, A3, A4, A5, A6, A7) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7);
    let mut _9: A1;
    let mut _10: A2;
    let mut _11: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A3;
    let mut _13: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A4;
    let mut _15: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A5;
    let mut _17: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A6;
    let mut _19: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A7;
    let mut _21: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _27 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _25 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _23 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _9 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb21];
    }

    bb1: {
        _27 = const false;
        _11 = move _3;
        _10 = <A2 as FromToNativeWasmType>::from_native(move _11) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _26 = const false;
        _13 = move _4;
        _12 = <A3 as FromToNativeWasmType>::from_native(move _13) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _25 = const false;
        _15 = move _5;
        _14 = <A4 as FromToNativeWasmType>::from_native(move _15) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _24 = const false;
        _17 = move _6;
        _16 = <A5 as FromToNativeWasmType>::from_native(move _17) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _23 = const false;
        _19 = move _7;
        _18 = <A6 as FromToNativeWasmType>::from_native(move _19) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _22 = const false;
        _21 = move _8;
        _20 = <A7 as FromToNativeWasmType>::from_native(move _21) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        _0 = (move _9, move _10, move _12, move _14, move _16, move _18, move _20);
        _22 = const false;
        _23 = const false;
        _24 = const false;
        _25 = const false;
        _26 = const false;
        _27 = const false;
        return;
    }

    bb8 (cleanup): {
        drop(_18) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_16) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_14) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_12) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_10) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_9) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_23) -> [0: bb15, otherwise: bb22];
    }

    bb15 (cleanup): {
        switchInt(_24) -> [0: bb16, otherwise: bb23];
    }

    bb16 (cleanup): {
        switchInt(_25) -> [0: bb17, otherwise: bb24];
    }

    bb17 (cleanup): {
        switchInt(_26) -> [0: bb18, otherwise: bb25];
    }

    bb18 (cleanup): {
        switchInt(_27) -> [0: bb19, otherwise: bb26];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        drop(_8) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_22) -> [0: bb14, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_7) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_6) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_5) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_4) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_3) -> [return: bb19, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7)) -> S7<A1, A2, A3, A4, A5, A6, A7> {
    debug self => _1;
    let mut _0: externals::function::inner::S7<A1, A2, A3, A4, A5, A6, A7>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let mut _9: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _11: A2;
    let mut _12: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: A3;
    let mut _14: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A4;
    let mut _16: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A5;
    let mut _18: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A6;
    let mut _20: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A7;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
    }

    bb0: {
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _2 = move (_1.0: A1);
        _27 = const true;
        _3 = move (_1.1: A2);
        _26 = const true;
        _4 = move (_1.2: A3);
        _25 = const true;
        _5 = move (_1.3: A4);
        _24 = const true;
        _6 = move (_1.4: A5);
        _23 = const true;
        _7 = move (_1.5: A6);
        _22 = const true;
        _8 = move (_1.6: A7);
        _9 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb21];
    }

    bb1: {
        _27 = const false;
        _11 = move _3;
        _10 = <A2 as FromToNativeWasmType>::to_native(move _11) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _26 = const false;
        _13 = move _4;
        _12 = <A3 as FromToNativeWasmType>::to_native(move _13) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _25 = const false;
        _15 = move _5;
        _14 = <A4 as FromToNativeWasmType>::to_native(move _15) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _24 = const false;
        _17 = move _6;
        _16 = <A5 as FromToNativeWasmType>::to_native(move _17) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _23 = const false;
        _19 = move _7;
        _18 = <A6 as FromToNativeWasmType>::to_native(move _19) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _22 = const false;
        _21 = move _8;
        _20 = <A7 as FromToNativeWasmType>::to_native(move _21) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        _0 = S7::<A1, A2, A3, A4, A5, A6, A7>(move _9, move _10, move _12, move _14, move _16, move _18, move _20);
        _22 = const false;
        _23 = const false;
        _24 = const false;
        _25 = const false;
        _26 = const false;
        _27 = const false;
        return;
    }

    bb8 (cleanup): {
        drop(_18) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_16) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_14) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_12) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_10) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_9) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_23) -> [0: bb15, otherwise: bb22];
    }

    bb15 (cleanup): {
        switchInt(_24) -> [0: bb16, otherwise: bb23];
    }

    bb16 (cleanup): {
        switchInt(_25) -> [0: bb17, otherwise: bb24];
    }

    bb17 (cleanup): {
        switchInt(_26) -> [0: bb18, otherwise: bb25];
    }

    bb18 (cleanup): {
        switchInt(_27) -> [0: bb19, otherwise: bb26];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        drop(_8) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_22) -> [0: bb14, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_7) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_6) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_5) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_4) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_3) -> [return: bb19, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 7];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 7] = {
    let mut _0: &[wasmer_types::Type; 7];
    let mut _1: [wasmer_types::Type; 7];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _9: &Func;
    let _10: &Func;
    let _11: *const Func;
    let mut _12: *const ();
    let mut _14: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _15: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _16: &&Func;
    let mut _17: isize;
    let mut _18: isize;
    let mut _21: !;
    let mut _22: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _23: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _25: !;
    let mut _27: isize;
    scope 1 {
        debug func => _9;
        let _13: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _13;
            let _19: Rets;
            let _20: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _24: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _19;
            }
            scope 5 {
                debug trap => _20;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _24;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _26: &();
    }

    bb0: {
        _26 = const _;
        _12 = &raw const (*_26);
        _11 = move _12 as *const Func (PtrToPtr);
        _10 = &(*_11);
        _9 = _10;
        _16 = &_9;
        _15 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _16, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8 };
        _14 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _15);
        _13 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        _18 = discriminant(_13);
        switchInt(move _18) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _17 = discriminant(((_13 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _17) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _24 = move ((_13 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _25 = resume_panic(move _24) -> unwind continue;
    }

    bb5: {
        _19 = move ((((_13 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _27 = discriminant(_13);
        switchInt(move _27) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _20 = move ((((_13 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _23 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        _22 = move _23 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _21 = raise_user_trap(move _22) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: &&Func;
    let mut _19: &Func;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;

    bb0: {
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _26 = const true;
        _27 = const true;
        _28 = const true;
        _29 = const true;
        _30 = const true;
        _31 = const true;
        _18 = deref_copy (_1.0: &&Func);
        _19 = deref_copy (*_18);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb34];
    }

    bb1: {
        _25 = const true;
        _31 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _24 = const true;
        _30 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _23 = const true;
        _29 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb18];
    }

    bb4: {
        _22 = const true;
        _28 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _21 = const true;
        _27 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _20 = const true;
        _26 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7)>>::call(_19, move _3) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _20 = const false;
        _21 = const false;
        _22 = const false;
        _23 = const false;
        _24 = const false;
        _25 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_14) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_20) -> [0: bb14, otherwise: bb11];
    }

    bb13 (cleanup): {
        drop(_12) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_21) -> [0: bb16, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_10) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_22) -> [0: bb18, otherwise: bb15];
    }

    bb17 (cleanup): {
        drop(_8) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_23) -> [0: bb20, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_6) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_24) -> [0: bb22, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_4) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_25) -> [0: bb34, otherwise: bb21];
    }

    bb23 (cleanup): {
        switchInt(_26) -> [0: bb10, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_27) -> [0: bb23, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_28) -> [0: bb25, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_29) -> [0: bb27, otherwise: bb30];
    }

    bb30 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_30) -> [0: bb29, otherwise: bb32];
    }

    bb32 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_31) -> [0: bb31, otherwise: bb33];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _9: &Func;
    let _10: &Func;
    let _11: *const Func;
    let mut _12: *const ();
    let mut _14: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _15: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _16: &&Func;
    let mut _17: &&Env;
    let mut _18: isize;
    let mut _19: isize;
    let mut _22: !;
    let mut _23: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _24: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _26: !;
    let mut _28: isize;
    scope 1 {
        debug func => _9;
        let _13: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _13;
            let _20: Rets;
            let _21: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _25: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _20;
            }
            scope 5 {
                debug trap => _21;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _25;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _27: &();
    }

    bb0: {
        _27 = const _;
        _12 = &raw const (*_27);
        _11 = move _12 as *const Func (PtrToPtr);
        _10 = &(*_11);
        _9 = _10;
        _16 = &_9;
        _17 = &_1;
        _15 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _16, env: move _17, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8 };
        _14 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _15);
        _13 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        _19 = discriminant(_13);
        switchInt(move _19) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _18 = discriminant(((_13 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _18) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _25 = move ((_13 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _26 = resume_panic(move _25) -> unwind continue;
    }

    bb5: {
        _20 = move ((((_13 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        _28 = discriminant(_13);
        switchInt(move _28) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _21 = move ((((_13 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _24 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        _23 = move _24 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _22 = raise_user_trap(move _23) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: &&Func;
    let mut _19: &Func;
    let mut _20: &&Env;
    let mut _21: &Env;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;

    bb0: {
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _28 = const true;
        _29 = const true;
        _30 = const true;
        _31 = const true;
        _32 = const true;
        _33 = const true;
        _18 = deref_copy (_1.0: &&Func);
        _19 = deref_copy (*_18);
        _20 = deref_copy (_1.1: &&Env);
        _21 = deref_copy (*_20);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb34];
    }

    bb1: {
        _27 = const true;
        _33 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _26 = const true;
        _32 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _25 = const true;
        _31 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb18];
    }

    bb4: {
        _24 = const true;
        _30 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _23 = const true;
        _29 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _22 = const true;
        _28 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _3 = (_21, move _4, move _6, move _8, move _10, move _12, move _14, move _16);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7)>>::call(_19, move _3) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _22 = const false;
        _23 = const false;
        _24 = const false;
        _25 = const false;
        _26 = const false;
        _27 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_14) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_22) -> [0: bb14, otherwise: bb11];
    }

    bb13 (cleanup): {
        drop(_12) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_23) -> [0: bb16, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_10) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_24) -> [0: bb18, otherwise: bb15];
    }

    bb17 (cleanup): {
        drop(_8) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_25) -> [0: bb20, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_6) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_26) -> [0: bb22, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_4) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_27) -> [0: bb34, otherwise: bb21];
    }

    bb23 (cleanup): {
        switchInt(_28) -> [0: bb10, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_29) -> [0: bb23, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_30) -> [0: bb25, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_31) -> [0: bb27, otherwise: bb30];
    }

    bb30 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_32) -> [0: bb29, otherwise: bb32];
    }

    bb32 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_33) -> [0: bb31, otherwise: bb33];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 8]) -> (A1, A2, A3, A4, A5, A6, A7, A8) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8);
    let mut _10: A1;
    let mut _11: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A2;
    let mut _13: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A3;
    let mut _15: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A4;
    let mut _17: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A5;
    let mut _19: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A6;
    let mut _21: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A7;
    let mut _23: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A8;
    let mut _25: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
    }

    bb0: {
        _2 = _1[0 of 8];
        _3 = _1[1 of 8];
        _4 = _1[2 of 8];
        _5 = _1[3 of 8];
        _6 = _1[4 of 8];
        _7 = _1[5 of 8];
        _8 = _1[6 of 8];
        _9 = _1[7 of 8];
        _11 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = <A1 as FromToNativeWasmType>::from_native(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _13 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb23];
    }

    bb3: {
        _12 = <A2 as FromToNativeWasmType>::from_native(move _13) -> [return: bb4, unwind: bb23];
    }

    bb4: {
        _15 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb22];
    }

    bb5: {
        _14 = <A3 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb22];
    }

    bb6: {
        _17 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        _16 = <A4 as FromToNativeWasmType>::from_native(move _17) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _19 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        _18 = <A5 as FromToNativeWasmType>::from_native(move _19) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        _21 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _20 = <A6 as FromToNativeWasmType>::from_native(move _21) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        _23 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _22 = <A7 as FromToNativeWasmType>::from_native(move _23) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        _25 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb17];
    }

    bb15: {
        _24 = <A8 as FromToNativeWasmType>::from_native(move _25) -> [return: bb16, unwind: bb17];
    }

    bb16: {
        _0 = (move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24);
        return;
    }

    bb17 (cleanup): {
        drop(_22) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_20) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_18) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_16) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_14) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_12) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_10) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 8]>;
    let mut _4: std::result::Result<[i128; 8], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 8];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 8]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 8], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 8]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8)) -> [i128; 8] {
    debug self => _1;
    let mut _0: [i128; 8];
    let mut _10: i128;
    let mut _11: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: i128;
    let mut _13: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A2;
    let mut _15: i128;
    let mut _16: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A3;
    let mut _18: i128;
    let mut _19: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A4;
    let mut _21: i128;
    let mut _22: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A5;
    let mut _24: i128;
    let mut _25: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A6;
    let mut _27: i128;
    let mut _28: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A7;
    let mut _30: i128;
    let mut _31: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A8;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
    }

    bb0: {
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _2 = move (_1.0: A1);
        _39 = const true;
        _3 = move (_1.1: A2);
        _38 = const true;
        _4 = move (_1.2: A3);
        _37 = const true;
        _5 = move (_1.3: A4);
        _36 = const true;
        _6 = move (_1.4: A5);
        _35 = const true;
        _7 = move (_1.5: A6);
        _34 = const true;
        _8 = move (_1.6: A7);
        _33 = const true;
        _9 = move (_1.7: A8);
        _11 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb25];
    }

    bb1: {
        _10 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _11) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        _39 = const false;
        _14 = move _3;
        _13 = <A2 as FromToNativeWasmType>::to_native(move _14) -> [return: bb3, unwind: bb25];
    }

    bb3: {
        _12 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _13) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _38 = const false;
        _17 = move _4;
        _16 = <A3 as FromToNativeWasmType>::to_native(move _17) -> [return: bb5, unwind: bb25];
    }

    bb5: {
        _15 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _16) -> [return: bb6, unwind: bb25];
    }

    bb6: {
        _37 = const false;
        _20 = move _5;
        _19 = <A4 as FromToNativeWasmType>::to_native(move _20) -> [return: bb7, unwind: bb25];
    }

    bb7: {
        _18 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _19) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _36 = const false;
        _23 = move _6;
        _22 = <A5 as FromToNativeWasmType>::to_native(move _23) -> [return: bb9, unwind: bb25];
    }

    bb9: {
        _21 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _22) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        _35 = const false;
        _26 = move _7;
        _25 = <A6 as FromToNativeWasmType>::to_native(move _26) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _24 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _25) -> [return: bb12, unwind: bb25];
    }

    bb12: {
        _34 = const false;
        _29 = move _8;
        _28 = <A7 as FromToNativeWasmType>::to_native(move _29) -> [return: bb13, unwind: bb25];
    }

    bb13: {
        _27 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _28) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        _33 = const false;
        _32 = move _9;
        _31 = <A8 as FromToNativeWasmType>::to_native(move _32) -> [return: bb15, unwind: bb25];
    }

    bb15: {
        _30 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _31) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        _0 = [move _10, move _12, move _15, move _18, move _21, move _24, move _27, move _30];
        _33 = const false;
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        return;
    }

    bb17 (cleanup): {
        switchInt(_34) -> [0: bb18, otherwise: bb26];
    }

    bb18 (cleanup): {
        switchInt(_35) -> [0: bb19, otherwise: bb27];
    }

    bb19 (cleanup): {
        switchInt(_36) -> [0: bb20, otherwise: bb28];
    }

    bb20 (cleanup): {
        switchInt(_37) -> [0: bb21, otherwise: bb29];
    }

    bb21 (cleanup): {
        switchInt(_38) -> [0: bb22, otherwise: bb30];
    }

    bb22 (cleanup): {
        switchInt(_39) -> [0: bb23, otherwise: bb31];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24 (cleanup): {
        drop(_9) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_33) -> [0: bb17, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_8) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_7) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_6) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_5) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_4) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_3) -> [return: bb23, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 8] {
    let mut _0: [i128; 8];

    bb0: {
        _0 = [const 0_i128; 8];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S8<A1, A2, A3, A4, A5, A6, A7, A8>) -> (A1, A2, A3, A4, A5, A6, A7, A8) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8);
    let mut _10: A1;
    let mut _11: A2;
    let mut _12: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: A3;
    let mut _14: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A4;
    let mut _16: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A5;
    let mut _18: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A6;
    let mut _20: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A7;
    let mut _22: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A8;
    let mut _24: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _31 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _29 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _27 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _25 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb24];
    }

    bb1: {
        _31 = const false;
        _12 = move _3;
        _11 = <A2 as FromToNativeWasmType>::from_native(move _12) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _30 = const false;
        _14 = move _4;
        _13 = <A3 as FromToNativeWasmType>::from_native(move _14) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _29 = const false;
        _16 = move _5;
        _15 = <A4 as FromToNativeWasmType>::from_native(move _16) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _28 = const false;
        _18 = move _6;
        _17 = <A5 as FromToNativeWasmType>::from_native(move _18) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _27 = const false;
        _20 = move _7;
        _19 = <A6 as FromToNativeWasmType>::from_native(move _20) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _26 = const false;
        _22 = move _8;
        _21 = <A7 as FromToNativeWasmType>::from_native(move _22) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _25 = const false;
        _24 = move _9;
        _23 = <A8 as FromToNativeWasmType>::from_native(move _24) -> [return: bb8, unwind: bb9];
    }

    bb8: {
        _0 = (move _10, move _11, move _13, move _15, move _17, move _19, move _21, move _23);
        _25 = const false;
        _26 = const false;
        _27 = const false;
        _28 = const false;
        _29 = const false;
        _30 = const false;
        _31 = const false;
        return;
    }

    bb9 (cleanup): {
        drop(_21) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_19) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_17) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_15) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_13) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_11) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_10) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_26) -> [0: bb17, otherwise: bb25];
    }

    bb17 (cleanup): {
        switchInt(_27) -> [0: bb18, otherwise: bb26];
    }

    bb18 (cleanup): {
        switchInt(_28) -> [0: bb19, otherwise: bb27];
    }

    bb19 (cleanup): {
        switchInt(_29) -> [0: bb20, otherwise: bb28];
    }

    bb20 (cleanup): {
        switchInt(_30) -> [0: bb21, otherwise: bb29];
    }

    bb21 (cleanup): {
        switchInt(_31) -> [0: bb22, otherwise: bb30];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        drop(_9) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_25) -> [0: bb16, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_7) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_6) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_5) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_4) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_3) -> [return: bb22, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8)) -> S8<A1, A2, A3, A4, A5, A6, A7, A8> {
    debug self => _1;
    let mut _0: externals::function::inner::S8<A1, A2, A3, A4, A5, A6, A7, A8>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let mut _10: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _11: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A2;
    let mut _13: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A3;
    let mut _15: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A4;
    let mut _17: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A5;
    let mut _19: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A6;
    let mut _21: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A7;
    let mut _23: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A8;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
    }

    bb0: {
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _2 = move (_1.0: A1);
        _31 = const true;
        _3 = move (_1.1: A2);
        _30 = const true;
        _4 = move (_1.2: A3);
        _29 = const true;
        _5 = move (_1.3: A4);
        _28 = const true;
        _6 = move (_1.4: A5);
        _27 = const true;
        _7 = move (_1.5: A6);
        _26 = const true;
        _8 = move (_1.6: A7);
        _25 = const true;
        _9 = move (_1.7: A8);
        _10 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb24];
    }

    bb1: {
        _31 = const false;
        _12 = move _3;
        _11 = <A2 as FromToNativeWasmType>::to_native(move _12) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _30 = const false;
        _14 = move _4;
        _13 = <A3 as FromToNativeWasmType>::to_native(move _14) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _29 = const false;
        _16 = move _5;
        _15 = <A4 as FromToNativeWasmType>::to_native(move _16) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _28 = const false;
        _18 = move _6;
        _17 = <A5 as FromToNativeWasmType>::to_native(move _18) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _27 = const false;
        _20 = move _7;
        _19 = <A6 as FromToNativeWasmType>::to_native(move _20) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _26 = const false;
        _22 = move _8;
        _21 = <A7 as FromToNativeWasmType>::to_native(move _22) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _25 = const false;
        _24 = move _9;
        _23 = <A8 as FromToNativeWasmType>::to_native(move _24) -> [return: bb8, unwind: bb9];
    }

    bb8: {
        _0 = S8::<A1, A2, A3, A4, A5, A6, A7, A8>(move _10, move _11, move _13, move _15, move _17, move _19, move _21, move _23);
        _25 = const false;
        _26 = const false;
        _27 = const false;
        _28 = const false;
        _29 = const false;
        _30 = const false;
        _31 = const false;
        return;
    }

    bb9 (cleanup): {
        drop(_21) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_19) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_17) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_15) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_13) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_11) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_10) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_26) -> [0: bb17, otherwise: bb25];
    }

    bb17 (cleanup): {
        switchInt(_27) -> [0: bb18, otherwise: bb26];
    }

    bb18 (cleanup): {
        switchInt(_28) -> [0: bb19, otherwise: bb27];
    }

    bb19 (cleanup): {
        switchInt(_29) -> [0: bb20, otherwise: bb28];
    }

    bb20 (cleanup): {
        switchInt(_30) -> [0: bb21, otherwise: bb29];
    }

    bb21 (cleanup): {
        switchInt(_31) -> [0: bb22, otherwise: bb30];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        drop(_9) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_25) -> [0: bb16, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_7) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_6) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_5) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_4) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_3) -> [return: bb22, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 8];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 8] = {
    let mut _0: &[wasmer_types::Type; 8];
    let mut _1: [wasmer_types::Type; 8];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _10: &Func;
    let _11: &Func;
    let _12: *const Func;
    let mut _13: *const ();
    let mut _15: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _16: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _17: &&Func;
    let mut _18: isize;
    let mut _19: isize;
    let mut _22: !;
    let mut _23: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _24: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _26: !;
    let mut _28: isize;
    scope 1 {
        debug func => _10;
        let _14: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _14;
            let _20: Rets;
            let _21: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _25: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _20;
            }
            scope 5 {
                debug trap => _21;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _25;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _27: &();
    }

    bb0: {
        _27 = const _;
        _13 = &raw const (*_27);
        _12 = move _13 as *const Func (PtrToPtr);
        _11 = &(*_12);
        _10 = _11;
        _17 = &_10;
        _16 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _17, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9 };
        _15 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _16);
        _14 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        _19 = discriminant(_14);
        switchInt(move _19) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _18 = discriminant(((_14 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _18) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _25 = move ((_14 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _26 = resume_panic(move _25) -> unwind continue;
    }

    bb5: {
        _20 = move ((((_14 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        _28 = discriminant(_14);
        switchInt(move _28) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _21 = move ((((_14 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _24 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        _23 = move _24 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _22 = raise_user_trap(move _23) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: &&Func;
    let mut _21: &Func;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;

    bb0: {
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _29 = const true;
        _30 = const true;
        _31 = const true;
        _32 = const true;
        _33 = const true;
        _34 = const true;
        _35 = const true;
        _20 = deref_copy (_1.0: &&Func);
        _21 = deref_copy (*_20);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb39];
    }

    bb1: {
        _28 = const true;
        _35 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        _27 = const true;
        _34 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb23];
    }

    bb3: {
        _26 = const true;
        _33 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _25 = const true;
        _32 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _24 = const true;
        _31 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _23 = const true;
        _30 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb15];
    }

    bb7: {
        _22 = const true;
        _29 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8)>>::call(_21, move _3) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _22 = const false;
        _23 = const false;
        _24 = const false;
        _25 = const false;
        _26 = const false;
        _27 = const false;
        _28 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb10, unwind: bb39];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        drop(_16) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_22) -> [0: bb15, otherwise: bb12];
    }

    bb14 (cleanup): {
        drop(_14) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_23) -> [0: bb17, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_12) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_24) -> [0: bb19, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_10) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_25) -> [0: bb21, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_8) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_26) -> [0: bb23, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_6) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_27) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_4) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_28) -> [0: bb39, otherwise: bb24];
    }

    bb26 (cleanup): {
        switchInt(_29) -> [0: bb11, otherwise: bb27];
    }

    bb27 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_30) -> [0: bb26, otherwise: bb29];
    }

    bb29 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_31) -> [0: bb28, otherwise: bb31];
    }

    bb31 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_32) -> [0: bb30, otherwise: bb33];
    }

    bb33 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_33) -> [0: bb32, otherwise: bb35];
    }

    bb35 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_34) -> [0: bb34, otherwise: bb37];
    }

    bb37 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_35) -> [0: bb36, otherwise: bb38];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _10: &Func;
    let _11: &Func;
    let _12: *const Func;
    let mut _13: *const ();
    let mut _15: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _16: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _17: &&Func;
    let mut _18: &&Env;
    let mut _19: isize;
    let mut _20: isize;
    let mut _23: !;
    let mut _24: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _25: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _27: !;
    let mut _29: isize;
    scope 1 {
        debug func => _10;
        let _14: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _14;
            let _21: Rets;
            let _22: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _26: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _21;
            }
            scope 5 {
                debug trap => _22;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _26;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _28: &();
    }

    bb0: {
        _28 = const _;
        _13 = &raw const (*_28);
        _12 = move _13 as *const Func (PtrToPtr);
        _11 = &(*_12);
        _10 = _11;
        _17 = &_10;
        _18 = &_1;
        _16 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _17, env: move _18, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9 };
        _15 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _16);
        _14 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        _20 = discriminant(_14);
        switchInt(move _20) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _19 = discriminant(((_14 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _19) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _26 = move ((_14 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _27 = resume_panic(move _26) -> unwind continue;
    }

    bb5: {
        _21 = move ((((_14 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        _29 = discriminant(_14);
        switchInt(move _29) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _22 = move ((((_14 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _25 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        _24 = move _25 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _23 = raise_user_trap(move _24) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: &&Func;
    let mut _21: &Func;
    let mut _22: &&Env;
    let mut _23: &Env;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;

    bb0: {
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _31 = const true;
        _32 = const true;
        _33 = const true;
        _34 = const true;
        _35 = const true;
        _36 = const true;
        _37 = const true;
        _20 = deref_copy (_1.0: &&Func);
        _21 = deref_copy (*_20);
        _22 = deref_copy (_1.1: &&Env);
        _23 = deref_copy (*_22);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb39];
    }

    bb1: {
        _30 = const true;
        _37 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        _29 = const true;
        _36 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb23];
    }

    bb3: {
        _28 = const true;
        _35 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _27 = const true;
        _34 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _26 = const true;
        _33 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _25 = const true;
        _32 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb15];
    }

    bb7: {
        _24 = const true;
        _31 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _3 = (_23, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8)>>::call(_21, move _3) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _24 = const false;
        _25 = const false;
        _26 = const false;
        _27 = const false;
        _28 = const false;
        _29 = const false;
        _30 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb10, unwind: bb39];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        drop(_16) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_24) -> [0: bb15, otherwise: bb12];
    }

    bb14 (cleanup): {
        drop(_14) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_25) -> [0: bb17, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_12) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_26) -> [0: bb19, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_10) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_27) -> [0: bb21, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_8) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_28) -> [0: bb23, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_6) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_29) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_4) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_30) -> [0: bb39, otherwise: bb24];
    }

    bb26 (cleanup): {
        switchInt(_31) -> [0: bb11, otherwise: bb27];
    }

    bb27 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_32) -> [0: bb26, otherwise: bb29];
    }

    bb29 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_33) -> [0: bb28, otherwise: bb31];
    }

    bb31 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_34) -> [0: bb30, otherwise: bb33];
    }

    bb33 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_35) -> [0: bb32, otherwise: bb35];
    }

    bb35 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_36) -> [0: bb34, otherwise: bb37];
    }

    bb37 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_37) -> [0: bb36, otherwise: bb38];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 9_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 9]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9);
    let mut _11: A1;
    let mut _12: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: A2;
    let mut _14: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A3;
    let mut _16: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A4;
    let mut _18: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A5;
    let mut _20: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A6;
    let mut _22: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A7;
    let mut _24: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A8;
    let mut _26: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A9;
    let mut _28: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
    }

    bb0: {
        _2 = _1[0 of 9];
        _3 = _1[1 of 9];
        _4 = _1[2 of 9];
        _5 = _1[3 of 9];
        _6 = _1[4 of 9];
        _7 = _1[5 of 9];
        _8 = _1[6 of 9];
        _9 = _1[7 of 9];
        _10 = _1[8 of 9];
        _12 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = <A1 as FromToNativeWasmType>::from_native(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        _14 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        _13 = <A2 as FromToNativeWasmType>::from_native(move _14) -> [return: bb4, unwind: bb26];
    }

    bb4: {
        _16 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb25];
    }

    bb5: {
        _15 = <A3 as FromToNativeWasmType>::from_native(move _16) -> [return: bb6, unwind: bb25];
    }

    bb6: {
        _18 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _17 = <A4 as FromToNativeWasmType>::from_native(move _18) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _20 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb23];
    }

    bb9: {
        _19 = <A5 as FromToNativeWasmType>::from_native(move _20) -> [return: bb10, unwind: bb23];
    }

    bb10: {
        _22 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _21 = <A6 as FromToNativeWasmType>::from_native(move _22) -> [return: bb12, unwind: bb22];
    }

    bb12: {
        _24 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        _23 = <A7 as FromToNativeWasmType>::from_native(move _24) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        _26 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _25 = <A8 as FromToNativeWasmType>::from_native(move _26) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        _28 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb19];
    }

    bb17: {
        _27 = <A9 as FromToNativeWasmType>::from_native(move _28) -> [return: bb18, unwind: bb19];
    }

    bb18: {
        _0 = (move _11, move _13, move _15, move _17, move _19, move _21, move _23, move _25, move _27);
        return;
    }

    bb19 (cleanup): {
        drop(_25) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_23) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_21) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_19) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_17) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_15) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_13) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_11) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 9]>;
    let mut _4: std::result::Result<[i128; 9], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 9];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 9]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 9], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 9]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9)) -> [i128; 9] {
    debug self => _1;
    let mut _0: [i128; 9];
    let mut _11: i128;
    let mut _12: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: i128;
    let mut _14: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A2;
    let mut _16: i128;
    let mut _17: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A3;
    let mut _19: i128;
    let mut _20: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A4;
    let mut _22: i128;
    let mut _23: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A5;
    let mut _25: i128;
    let mut _26: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A6;
    let mut _28: i128;
    let mut _29: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A7;
    let mut _31: i128;
    let mut _32: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A8;
    let mut _34: i128;
    let mut _35: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A9;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
    }

    bb0: {
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _2 = move (_1.0: A1);
        _44 = const true;
        _3 = move (_1.1: A2);
        _43 = const true;
        _4 = move (_1.2: A3);
        _42 = const true;
        _5 = move (_1.3: A4);
        _41 = const true;
        _6 = move (_1.4: A5);
        _40 = const true;
        _7 = move (_1.5: A6);
        _39 = const true;
        _8 = move (_1.6: A7);
        _38 = const true;
        _9 = move (_1.7: A8);
        _37 = const true;
        _10 = move (_1.8: A9);
        _12 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb28];
    }

    bb1: {
        _11 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _12) -> [return: bb2, unwind: bb28];
    }

    bb2: {
        _44 = const false;
        _15 = move _3;
        _14 = <A2 as FromToNativeWasmType>::to_native(move _15) -> [return: bb3, unwind: bb28];
    }

    bb3: {
        _13 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _14) -> [return: bb4, unwind: bb28];
    }

    bb4: {
        _43 = const false;
        _18 = move _4;
        _17 = <A3 as FromToNativeWasmType>::to_native(move _18) -> [return: bb5, unwind: bb28];
    }

    bb5: {
        _16 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _17) -> [return: bb6, unwind: bb28];
    }

    bb6: {
        _42 = const false;
        _21 = move _5;
        _20 = <A4 as FromToNativeWasmType>::to_native(move _21) -> [return: bb7, unwind: bb28];
    }

    bb7: {
        _19 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _20) -> [return: bb8, unwind: bb28];
    }

    bb8: {
        _41 = const false;
        _24 = move _6;
        _23 = <A5 as FromToNativeWasmType>::to_native(move _24) -> [return: bb9, unwind: bb28];
    }

    bb9: {
        _22 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _23) -> [return: bb10, unwind: bb28];
    }

    bb10: {
        _40 = const false;
        _27 = move _7;
        _26 = <A6 as FromToNativeWasmType>::to_native(move _27) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        _25 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _26) -> [return: bb12, unwind: bb28];
    }

    bb12: {
        _39 = const false;
        _30 = move _8;
        _29 = <A7 as FromToNativeWasmType>::to_native(move _30) -> [return: bb13, unwind: bb28];
    }

    bb13: {
        _28 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _29) -> [return: bb14, unwind: bb28];
    }

    bb14: {
        _38 = const false;
        _33 = move _9;
        _32 = <A8 as FromToNativeWasmType>::to_native(move _33) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        _31 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _32) -> [return: bb16, unwind: bb28];
    }

    bb16: {
        _37 = const false;
        _36 = move _10;
        _35 = <A9 as FromToNativeWasmType>::to_native(move _36) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        _34 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _35) -> [return: bb18, unwind: bb28];
    }

    bb18: {
        _0 = [move _11, move _13, move _16, move _19, move _22, move _25, move _28, move _31, move _34];
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        return;
    }

    bb19 (cleanup): {
        switchInt(_38) -> [0: bb20, otherwise: bb29];
    }

    bb20 (cleanup): {
        switchInt(_39) -> [0: bb21, otherwise: bb30];
    }

    bb21 (cleanup): {
        switchInt(_40) -> [0: bb22, otherwise: bb31];
    }

    bb22 (cleanup): {
        switchInt(_41) -> [0: bb23, otherwise: bb32];
    }

    bb23 (cleanup): {
        switchInt(_42) -> [0: bb24, otherwise: bb33];
    }

    bb24 (cleanup): {
        switchInt(_43) -> [0: bb25, otherwise: bb34];
    }

    bb25 (cleanup): {
        switchInt(_44) -> [0: bb26, otherwise: bb35];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        drop(_10) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_37) -> [0: bb19, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_9) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_8) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_7) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_6) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_5) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_4) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_3) -> [return: bb26, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 9] {
    let mut _0: [i128; 9];

    bb0: {
        _0 = [const 0_i128; 9];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 9_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S9<A1, A2, A3, A4, A5, A6, A7, A8, A9>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9);
    let mut _11: A1;
    let mut _12: A2;
    let mut _13: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A3;
    let mut _15: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A4;
    let mut _17: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A5;
    let mut _19: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A6;
    let mut _21: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A7;
    let mut _23: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A8;
    let mut _25: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A9;
    let mut _27: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _35 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _33 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _31 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _29 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _11 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb27];
    }

    bb1: {
        _35 = const false;
        _13 = move _3;
        _12 = <A2 as FromToNativeWasmType>::from_native(move _13) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _34 = const false;
        _15 = move _4;
        _14 = <A3 as FromToNativeWasmType>::from_native(move _15) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _33 = const false;
        _17 = move _5;
        _16 = <A4 as FromToNativeWasmType>::from_native(move _17) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _32 = const false;
        _19 = move _6;
        _18 = <A5 as FromToNativeWasmType>::from_native(move _19) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _31 = const false;
        _21 = move _7;
        _20 = <A6 as FromToNativeWasmType>::from_native(move _21) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _30 = const false;
        _23 = move _8;
        _22 = <A7 as FromToNativeWasmType>::from_native(move _23) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _29 = const false;
        _25 = move _9;
        _24 = <A8 as FromToNativeWasmType>::from_native(move _25) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        _28 = const false;
        _27 = move _10;
        _26 = <A9 as FromToNativeWasmType>::from_native(move _27) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _0 = (move _11, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26);
        _28 = const false;
        _29 = const false;
        _30 = const false;
        _31 = const false;
        _32 = const false;
        _33 = const false;
        _34 = const false;
        _35 = const false;
        return;
    }

    bb10 (cleanup): {
        drop(_24) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_22) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_20) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_18) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_16) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_14) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_12) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_11) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_29) -> [0: bb19, otherwise: bb28];
    }

    bb19 (cleanup): {
        switchInt(_30) -> [0: bb20, otherwise: bb29];
    }

    bb20 (cleanup): {
        switchInt(_31) -> [0: bb21, otherwise: bb30];
    }

    bb21 (cleanup): {
        switchInt(_32) -> [0: bb22, otherwise: bb31];
    }

    bb22 (cleanup): {
        switchInt(_33) -> [0: bb23, otherwise: bb32];
    }

    bb23 (cleanup): {
        switchInt(_34) -> [0: bb24, otherwise: bb33];
    }

    bb24 (cleanup): {
        switchInt(_35) -> [0: bb25, otherwise: bb34];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        drop(_10) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_28) -> [0: bb18, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_9) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_8) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_7) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_6) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_5) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_4) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_3) -> [return: bb25, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9)) -> S9<A1, A2, A3, A4, A5, A6, A7, A8, A9> {
    debug self => _1;
    let mut _0: externals::function::inner::S9<A1, A2, A3, A4, A5, A6, A7, A8, A9>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let mut _11: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: A2;
    let mut _14: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A3;
    let mut _16: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A4;
    let mut _18: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A5;
    let mut _20: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A6;
    let mut _22: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A7;
    let mut _24: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A8;
    let mut _26: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A9;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
    }

    bb0: {
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _2 = move (_1.0: A1);
        _35 = const true;
        _3 = move (_1.1: A2);
        _34 = const true;
        _4 = move (_1.2: A3);
        _33 = const true;
        _5 = move (_1.3: A4);
        _32 = const true;
        _6 = move (_1.4: A5);
        _31 = const true;
        _7 = move (_1.5: A6);
        _30 = const true;
        _8 = move (_1.6: A7);
        _29 = const true;
        _9 = move (_1.7: A8);
        _28 = const true;
        _10 = move (_1.8: A9);
        _11 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb27];
    }

    bb1: {
        _35 = const false;
        _13 = move _3;
        _12 = <A2 as FromToNativeWasmType>::to_native(move _13) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _34 = const false;
        _15 = move _4;
        _14 = <A3 as FromToNativeWasmType>::to_native(move _15) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _33 = const false;
        _17 = move _5;
        _16 = <A4 as FromToNativeWasmType>::to_native(move _17) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _32 = const false;
        _19 = move _6;
        _18 = <A5 as FromToNativeWasmType>::to_native(move _19) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _31 = const false;
        _21 = move _7;
        _20 = <A6 as FromToNativeWasmType>::to_native(move _21) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _30 = const false;
        _23 = move _8;
        _22 = <A7 as FromToNativeWasmType>::to_native(move _23) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _29 = const false;
        _25 = move _9;
        _24 = <A8 as FromToNativeWasmType>::to_native(move _25) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        _28 = const false;
        _27 = move _10;
        _26 = <A9 as FromToNativeWasmType>::to_native(move _27) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _0 = S9::<A1, A2, A3, A4, A5, A6, A7, A8, A9>(move _11, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26);
        _28 = const false;
        _29 = const false;
        _30 = const false;
        _31 = const false;
        _32 = const false;
        _33 = const false;
        _34 = const false;
        _35 = const false;
        return;
    }

    bb10 (cleanup): {
        drop(_24) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_22) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_20) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_18) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_16) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_14) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_12) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_11) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_29) -> [0: bb19, otherwise: bb28];
    }

    bb19 (cleanup): {
        switchInt(_30) -> [0: bb20, otherwise: bb29];
    }

    bb20 (cleanup): {
        switchInt(_31) -> [0: bb21, otherwise: bb30];
    }

    bb21 (cleanup): {
        switchInt(_32) -> [0: bb22, otherwise: bb31];
    }

    bb22 (cleanup): {
        switchInt(_33) -> [0: bb23, otherwise: bb32];
    }

    bb23 (cleanup): {
        switchInt(_34) -> [0: bb24, otherwise: bb33];
    }

    bb24 (cleanup): {
        switchInt(_35) -> [0: bb25, otherwise: bb34];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        drop(_10) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_28) -> [0: bb18, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_9) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_8) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_7) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_6) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_5) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_4) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_3) -> [return: bb25, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 9];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 9] = {
    let mut _0: &[wasmer_types::Type; 9];
    let mut _1: [wasmer_types::Type; 9];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _11: &Func;
    let _12: &Func;
    let _13: *const Func;
    let mut _14: *const ();
    let mut _16: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _17: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _18: &&Func;
    let mut _19: isize;
    let mut _20: isize;
    let mut _23: !;
    let mut _24: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _25: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _27: !;
    let mut _29: isize;
    scope 1 {
        debug func => _11;
        let _15: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _15;
            let _21: Rets;
            let _22: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _26: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _21;
            }
            scope 5 {
                debug trap => _22;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _26;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _28: &();
    }

    bb0: {
        _28 = const _;
        _14 = &raw const (*_28);
        _13 = move _14 as *const Func (PtrToPtr);
        _12 = &(*_13);
        _11 = _12;
        _18 = &_11;
        _17 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _18, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10 };
        _16 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _17);
        _15 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _16) -> [return: bb1, unwind continue];
    }

    bb1: {
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _19 = discriminant(((_15 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _19) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _26 = move ((_15 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _27 = resume_panic(move _26) -> unwind continue;
    }

    bb5: {
        _21 = move ((((_15 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        _29 = discriminant(_15);
        switchInt(move _29) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _22 = move ((((_15 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _25 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        _24 = move _25 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _23 = raise_user_trap(move _24) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: &&Func;
    let mut _23: &Func;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;

    bb0: {
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _32 = const true;
        _33 = const true;
        _34 = const true;
        _35 = const true;
        _36 = const true;
        _37 = const true;
        _38 = const true;
        _39 = const true;
        _22 = deref_copy (_1.0: &&Func);
        _23 = deref_copy (*_22);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb44];
    }

    bb1: {
        _31 = const true;
        _39 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb28];
    }

    bb2: {
        _30 = const true;
        _38 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        _29 = const true;
        _37 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb24];
    }

    bb4: {
        _28 = const true;
        _36 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb22];
    }

    bb5: {
        _27 = const true;
        _35 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _26 = const true;
        _34 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _25 = const true;
        _33 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _24 = const true;
        _32 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9)>>::call(_23, move _3) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _24 = const false;
        _25 = const false;
        _26 = const false;
        _27 = const false;
        _28 = const false;
        _29 = const false;
        _30 = const false;
        _31 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb11, unwind: bb44];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_18) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_24) -> [0: bb16, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_16) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_25) -> [0: bb18, otherwise: bb15];
    }

    bb17 (cleanup): {
        drop(_14) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_26) -> [0: bb20, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_12) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_27) -> [0: bb22, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_10) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_28) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_8) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_29) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_6) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_30) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_4) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_31) -> [0: bb44, otherwise: bb27];
    }

    bb29 (cleanup): {
        switchInt(_32) -> [0: bb12, otherwise: bb30];
    }

    bb30 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_33) -> [0: bb29, otherwise: bb32];
    }

    bb32 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_34) -> [0: bb31, otherwise: bb34];
    }

    bb34 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_35) -> [0: bb33, otherwise: bb36];
    }

    bb36 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_36) -> [0: bb35, otherwise: bb38];
    }

    bb38 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_37) -> [0: bb37, otherwise: bb40];
    }

    bb40 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_38) -> [0: bb39, otherwise: bb42];
    }

    bb42 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_39) -> [0: bb41, otherwise: bb43];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _11: &Func;
    let _12: &Func;
    let _13: *const Func;
    let mut _14: *const ();
    let mut _16: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _17: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _18: &&Func;
    let mut _19: &&Env;
    let mut _20: isize;
    let mut _21: isize;
    let mut _24: !;
    let mut _25: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _26: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _28: !;
    let mut _30: isize;
    scope 1 {
        debug func => _11;
        let _15: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _15;
            let _22: Rets;
            let _23: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _27: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _22;
            }
            scope 5 {
                debug trap => _23;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _27;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _29: &();
    }

    bb0: {
        _29 = const _;
        _14 = &raw const (*_29);
        _13 = move _14 as *const Func (PtrToPtr);
        _12 = &(*_13);
        _11 = _12;
        _18 = &_11;
        _19 = &_1;
        _17 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _18, env: move _19, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10 };
        _16 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _17);
        _15 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _16) -> [return: bb1, unwind continue];
    }

    bb1: {
        _21 = discriminant(_15);
        switchInt(move _21) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _20 = discriminant(((_15 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _20) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _27 = move ((_15 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _28 = resume_panic(move _27) -> unwind continue;
    }

    bb5: {
        _22 = move ((((_15 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        _30 = discriminant(_15);
        switchInt(move _30) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _23 = move ((((_15 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _26 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        _25 = move _26 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _24 = raise_user_trap(move _25) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: &&Func;
    let mut _23: &Func;
    let mut _24: &&Env;
    let mut _25: &Env;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;

    bb0: {
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _34 = const true;
        _35 = const true;
        _36 = const true;
        _37 = const true;
        _38 = const true;
        _39 = const true;
        _40 = const true;
        _41 = const true;
        _22 = deref_copy (_1.0: &&Func);
        _23 = deref_copy (*_22);
        _24 = deref_copy (_1.1: &&Env);
        _25 = deref_copy (*_24);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb44];
    }

    bb1: {
        _33 = const true;
        _41 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb28];
    }

    bb2: {
        _32 = const true;
        _40 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        _31 = const true;
        _39 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb24];
    }

    bb4: {
        _30 = const true;
        _38 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb22];
    }

    bb5: {
        _29 = const true;
        _37 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _28 = const true;
        _36 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _27 = const true;
        _35 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _26 = const true;
        _34 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _3 = (_25, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9)>>::call(_23, move _3) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _26 = const false;
        _27 = const false;
        _28 = const false;
        _29 = const false;
        _30 = const false;
        _31 = const false;
        _32 = const false;
        _33 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb11, unwind: bb44];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_18) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_26) -> [0: bb16, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_16) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_27) -> [0: bb18, otherwise: bb15];
    }

    bb17 (cleanup): {
        drop(_14) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_28) -> [0: bb20, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_12) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_29) -> [0: bb22, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_10) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_30) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_8) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_31) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_6) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_32) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_4) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_33) -> [0: bb44, otherwise: bb27];
    }

    bb29 (cleanup): {
        switchInt(_34) -> [0: bb12, otherwise: bb30];
    }

    bb30 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_35) -> [0: bb29, otherwise: bb32];
    }

    bb32 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_36) -> [0: bb31, otherwise: bb34];
    }

    bb34 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_37) -> [0: bb33, otherwise: bb36];
    }

    bb36 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_38) -> [0: bb35, otherwise: bb38];
    }

    bb38 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_39) -> [0: bb37, otherwise: bb40];
    }

    bb40 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_40) -> [0: bb39, otherwise: bb42];
    }

    bb42 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_41) -> [0: bb41, otherwise: bb43];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 10]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10);
    let mut _12: A1;
    let mut _13: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A2;
    let mut _15: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A3;
    let mut _17: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A4;
    let mut _19: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A5;
    let mut _21: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A6;
    let mut _23: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A7;
    let mut _25: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A8;
    let mut _27: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A9;
    let mut _29: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A10;
    let mut _31: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
    }

    bb0: {
        _2 = _1[0 of 10];
        _3 = _1[1 of 10];
        _4 = _1[2 of 10];
        _5 = _1[3 of 10];
        _6 = _1[4 of 10];
        _7 = _1[5 of 10];
        _8 = _1[6 of 10];
        _9 = _1[7 of 10];
        _10 = _1[8 of 10];
        _11 = _1[9 of 10];
        _13 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = <A1 as FromToNativeWasmType>::from_native(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        _15 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb29];
    }

    bb3: {
        _14 = <A2 as FromToNativeWasmType>::from_native(move _15) -> [return: bb4, unwind: bb29];
    }

    bb4: {
        _17 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb28];
    }

    bb5: {
        _16 = <A3 as FromToNativeWasmType>::from_native(move _17) -> [return: bb6, unwind: bb28];
    }

    bb6: {
        _19 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb27];
    }

    bb7: {
        _18 = <A4 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb27];
    }

    bb8: {
        _21 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        _20 = <A5 as FromToNativeWasmType>::from_native(move _21) -> [return: bb10, unwind: bb26];
    }

    bb10: {
        _23 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _22 = <A6 as FromToNativeWasmType>::from_native(move _23) -> [return: bb12, unwind: bb25];
    }

    bb12: {
        _25 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _24 = <A7 as FromToNativeWasmType>::from_native(move _25) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _27 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        _26 = <A8 as FromToNativeWasmType>::from_native(move _27) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        _29 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        _28 = <A9 as FromToNativeWasmType>::from_native(move _29) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        _31 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb21];
    }

    bb19: {
        _30 = <A10 as FromToNativeWasmType>::from_native(move _31) -> [return: bb20, unwind: bb21];
    }

    bb20: {
        _0 = (move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30);
        return;
    }

    bb21 (cleanup): {
        drop(_28) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_26) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_24) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_22) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_20) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_18) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_16) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_14) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_12) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 10]>;
    let mut _4: std::result::Result<[i128; 10], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 10];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 10]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 10], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 10]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)) -> [i128; 10] {
    debug self => _1;
    let mut _0: [i128; 10];
    let mut _12: i128;
    let mut _13: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: i128;
    let mut _15: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A2;
    let mut _17: i128;
    let mut _18: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A3;
    let mut _20: i128;
    let mut _21: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A4;
    let mut _23: i128;
    let mut _24: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A5;
    let mut _26: i128;
    let mut _27: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A6;
    let mut _29: i128;
    let mut _30: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A7;
    let mut _32: i128;
    let mut _33: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A8;
    let mut _35: i128;
    let mut _36: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A9;
    let mut _38: i128;
    let mut _39: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A10;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
    }

    bb0: {
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _2 = move (_1.0: A1);
        _49 = const true;
        _3 = move (_1.1: A2);
        _48 = const true;
        _4 = move (_1.2: A3);
        _47 = const true;
        _5 = move (_1.3: A4);
        _46 = const true;
        _6 = move (_1.4: A5);
        _45 = const true;
        _7 = move (_1.5: A6);
        _44 = const true;
        _8 = move (_1.6: A7);
        _43 = const true;
        _9 = move (_1.7: A8);
        _42 = const true;
        _10 = move (_1.8: A9);
        _41 = const true;
        _11 = move (_1.9: A10);
        _13 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb31];
    }

    bb1: {
        _12 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _13) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _49 = const false;
        _16 = move _3;
        _15 = <A2 as FromToNativeWasmType>::to_native(move _16) -> [return: bb3, unwind: bb31];
    }

    bb3: {
        _14 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _15) -> [return: bb4, unwind: bb31];
    }

    bb4: {
        _48 = const false;
        _19 = move _4;
        _18 = <A3 as FromToNativeWasmType>::to_native(move _19) -> [return: bb5, unwind: bb31];
    }

    bb5: {
        _17 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _18) -> [return: bb6, unwind: bb31];
    }

    bb6: {
        _47 = const false;
        _22 = move _5;
        _21 = <A4 as FromToNativeWasmType>::to_native(move _22) -> [return: bb7, unwind: bb31];
    }

    bb7: {
        _20 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _21) -> [return: bb8, unwind: bb31];
    }

    bb8: {
        _46 = const false;
        _25 = move _6;
        _24 = <A5 as FromToNativeWasmType>::to_native(move _25) -> [return: bb9, unwind: bb31];
    }

    bb9: {
        _23 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _24) -> [return: bb10, unwind: bb31];
    }

    bb10: {
        _45 = const false;
        _28 = move _7;
        _27 = <A6 as FromToNativeWasmType>::to_native(move _28) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        _26 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _27) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        _44 = const false;
        _31 = move _8;
        _30 = <A7 as FromToNativeWasmType>::to_native(move _31) -> [return: bb13, unwind: bb31];
    }

    bb13: {
        _29 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _30) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        _43 = const false;
        _34 = move _9;
        _33 = <A8 as FromToNativeWasmType>::to_native(move _34) -> [return: bb15, unwind: bb31];
    }

    bb15: {
        _32 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _33) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _42 = const false;
        _37 = move _10;
        _36 = <A9 as FromToNativeWasmType>::to_native(move _37) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        _35 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _36) -> [return: bb18, unwind: bb31];
    }

    bb18: {
        _41 = const false;
        _40 = move _11;
        _39 = <A10 as FromToNativeWasmType>::to_native(move _40) -> [return: bb19, unwind: bb31];
    }

    bb19: {
        _38 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _39) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        _0 = [move _12, move _14, move _17, move _20, move _23, move _26, move _29, move _32, move _35, move _38];
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        return;
    }

    bb21 (cleanup): {
        switchInt(_42) -> [0: bb22, otherwise: bb32];
    }

    bb22 (cleanup): {
        switchInt(_43) -> [0: bb23, otherwise: bb33];
    }

    bb23 (cleanup): {
        switchInt(_44) -> [0: bb24, otherwise: bb34];
    }

    bb24 (cleanup): {
        switchInt(_45) -> [0: bb25, otherwise: bb35];
    }

    bb25 (cleanup): {
        switchInt(_46) -> [0: bb26, otherwise: bb36];
    }

    bb26 (cleanup): {
        switchInt(_47) -> [0: bb27, otherwise: bb37];
    }

    bb27 (cleanup): {
        switchInt(_48) -> [0: bb28, otherwise: bb38];
    }

    bb28 (cleanup): {
        switchInt(_49) -> [0: bb29, otherwise: bb39];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30 (cleanup): {
        drop(_11) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_41) -> [0: bb21, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_10) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_9) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_8) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_7) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_6) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_5) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_4) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 10] {
    let mut _0: [i128; 10];

    bb0: {
        _0 = [const 0_i128; 10];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 10_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S10<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10);
    let mut _12: A1;
    let mut _13: A2;
    let mut _14: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A3;
    let mut _16: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A4;
    let mut _18: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A5;
    let mut _20: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A6;
    let mut _22: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A7;
    let mut _24: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A8;
    let mut _26: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A9;
    let mut _28: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A10;
    let mut _30: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _39 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _37 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _35 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _33 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _31 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb30];
    }

    bb1: {
        _39 = const false;
        _14 = move _3;
        _13 = <A2 as FromToNativeWasmType>::from_native(move _14) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _38 = const false;
        _16 = move _4;
        _15 = <A3 as FromToNativeWasmType>::from_native(move _16) -> [return: bb3, unwind: bb18];
    }

    bb3: {
        _37 = const false;
        _18 = move _5;
        _17 = <A4 as FromToNativeWasmType>::from_native(move _18) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _36 = const false;
        _20 = move _6;
        _19 = <A5 as FromToNativeWasmType>::from_native(move _20) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _35 = const false;
        _22 = move _7;
        _21 = <A6 as FromToNativeWasmType>::from_native(move _22) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        _34 = const false;
        _24 = move _8;
        _23 = <A7 as FromToNativeWasmType>::from_native(move _24) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _33 = const false;
        _26 = move _9;
        _25 = <A8 as FromToNativeWasmType>::from_native(move _26) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _32 = const false;
        _28 = move _10;
        _27 = <A9 as FromToNativeWasmType>::from_native(move _28) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        _31 = const false;
        _30 = move _11;
        _29 = <A10 as FromToNativeWasmType>::from_native(move _30) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        _0 = (move _12, move _13, move _15, move _17, move _19, move _21, move _23, move _25, move _27, move _29);
        _31 = const false;
        _32 = const false;
        _33 = const false;
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        return;
    }

    bb11 (cleanup): {
        drop(_27) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_25) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_23) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_21) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_19) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_17) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_15) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_13) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_12) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_32) -> [0: bb21, otherwise: bb31];
    }

    bb21 (cleanup): {
        switchInt(_33) -> [0: bb22, otherwise: bb32];
    }

    bb22 (cleanup): {
        switchInt(_34) -> [0: bb23, otherwise: bb33];
    }

    bb23 (cleanup): {
        switchInt(_35) -> [0: bb24, otherwise: bb34];
    }

    bb24 (cleanup): {
        switchInt(_36) -> [0: bb25, otherwise: bb35];
    }

    bb25 (cleanup): {
        switchInt(_37) -> [0: bb26, otherwise: bb36];
    }

    bb26 (cleanup): {
        switchInt(_38) -> [0: bb27, otherwise: bb37];
    }

    bb27 (cleanup): {
        switchInt(_39) -> [0: bb28, otherwise: bb38];
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        drop(_11) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_31) -> [0: bb20, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_10) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_9) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_8) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_7) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_6) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_5) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_4) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_3) -> [return: bb28, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)) -> S10<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10> {
    debug self => _1;
    let mut _0: externals::function::inner::S10<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let mut _12: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A2;
    let mut _15: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A3;
    let mut _17: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A4;
    let mut _19: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A5;
    let mut _21: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A6;
    let mut _23: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A7;
    let mut _25: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A8;
    let mut _27: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A9;
    let mut _29: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A10;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
    }

    bb0: {
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _2 = move (_1.0: A1);
        _39 = const true;
        _3 = move (_1.1: A2);
        _38 = const true;
        _4 = move (_1.2: A3);
        _37 = const true;
        _5 = move (_1.3: A4);
        _36 = const true;
        _6 = move (_1.4: A5);
        _35 = const true;
        _7 = move (_1.5: A6);
        _34 = const true;
        _8 = move (_1.6: A7);
        _33 = const true;
        _9 = move (_1.7: A8);
        _32 = const true;
        _10 = move (_1.8: A9);
        _31 = const true;
        _11 = move (_1.9: A10);
        _12 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb30];
    }

    bb1: {
        _39 = const false;
        _14 = move _3;
        _13 = <A2 as FromToNativeWasmType>::to_native(move _14) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _38 = const false;
        _16 = move _4;
        _15 = <A3 as FromToNativeWasmType>::to_native(move _16) -> [return: bb3, unwind: bb18];
    }

    bb3: {
        _37 = const false;
        _18 = move _5;
        _17 = <A4 as FromToNativeWasmType>::to_native(move _18) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _36 = const false;
        _20 = move _6;
        _19 = <A5 as FromToNativeWasmType>::to_native(move _20) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _35 = const false;
        _22 = move _7;
        _21 = <A6 as FromToNativeWasmType>::to_native(move _22) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        _34 = const false;
        _24 = move _8;
        _23 = <A7 as FromToNativeWasmType>::to_native(move _24) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _33 = const false;
        _26 = move _9;
        _25 = <A8 as FromToNativeWasmType>::to_native(move _26) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _32 = const false;
        _28 = move _10;
        _27 = <A9 as FromToNativeWasmType>::to_native(move _28) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        _31 = const false;
        _30 = move _11;
        _29 = <A10 as FromToNativeWasmType>::to_native(move _30) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        _0 = S10::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>(move _12, move _13, move _15, move _17, move _19, move _21, move _23, move _25, move _27, move _29);
        _31 = const false;
        _32 = const false;
        _33 = const false;
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        return;
    }

    bb11 (cleanup): {
        drop(_27) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_25) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_23) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_21) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_19) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_17) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_15) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_13) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_12) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_32) -> [0: bb21, otherwise: bb31];
    }

    bb21 (cleanup): {
        switchInt(_33) -> [0: bb22, otherwise: bb32];
    }

    bb22 (cleanup): {
        switchInt(_34) -> [0: bb23, otherwise: bb33];
    }

    bb23 (cleanup): {
        switchInt(_35) -> [0: bb24, otherwise: bb34];
    }

    bb24 (cleanup): {
        switchInt(_36) -> [0: bb25, otherwise: bb35];
    }

    bb25 (cleanup): {
        switchInt(_37) -> [0: bb26, otherwise: bb36];
    }

    bb26 (cleanup): {
        switchInt(_38) -> [0: bb27, otherwise: bb37];
    }

    bb27 (cleanup): {
        switchInt(_39) -> [0: bb28, otherwise: bb38];
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        drop(_11) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_31) -> [0: bb20, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_10) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_9) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_8) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_7) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_6) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_5) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_4) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_3) -> [return: bb28, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 10];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 10] = {
    let mut _0: &[wasmer_types::Type; 10];
    let mut _1: [wasmer_types::Type; 10];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _12: &Func;
    let _13: &Func;
    let _14: *const Func;
    let mut _15: *const ();
    let mut _17: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _18: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _19: &&Func;
    let mut _20: isize;
    let mut _21: isize;
    let mut _24: !;
    let mut _25: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _26: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _28: !;
    let mut _30: isize;
    scope 1 {
        debug func => _12;
        let _16: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _16;
            let _22: Rets;
            let _23: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _27: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _22;
            }
            scope 5 {
                debug trap => _23;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _27;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _29: &();
    }

    bb0: {
        _29 = const _;
        _15 = &raw const (*_29);
        _14 = move _15 as *const Func (PtrToPtr);
        _13 = &(*_14);
        _12 = _13;
        _19 = &_12;
        _18 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _19, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11 };
        _17 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _18);
        _16 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _20 = discriminant(((_16 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _20) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _27 = move ((_16 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _28 = resume_panic(move _27) -> unwind continue;
    }

    bb5: {
        _22 = move ((((_16 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        _30 = discriminant(_16);
        switchInt(move _30) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _23 = move ((((_16 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _26 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        _25 = move _26 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _24 = raise_user_trap(move _25) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: &&Func;
    let mut _25: &Func;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;

    bb0: {
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _35 = const true;
        _36 = const true;
        _37 = const true;
        _38 = const true;
        _39 = const true;
        _40 = const true;
        _41 = const true;
        _42 = const true;
        _43 = const true;
        _24 = deref_copy (_1.0: &&Func);
        _25 = deref_copy (*_24);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb49];
    }

    bb1: {
        _34 = const true;
        _43 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _33 = const true;
        _42 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb29];
    }

    bb3: {
        _32 = const true;
        _41 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb27];
    }

    bb4: {
        _31 = const true;
        _40 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb25];
    }

    bb5: {
        _30 = const true;
        _39 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        _29 = const true;
        _38 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        _28 = const true;
        _37 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _27 = const true;
        _36 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _26 = const true;
        _35 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>>::call(_25, move _3) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        _26 = const false;
        _27 = const false;
        _28 = const false;
        _29 = const false;
        _30 = const false;
        _31 = const false;
        _32 = const false;
        _33 = const false;
        _34 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb12, unwind: bb49];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_20) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_26) -> [0: bb17, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_18) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_27) -> [0: bb19, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_16) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_28) -> [0: bb21, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_14) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_29) -> [0: bb23, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_12) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_30) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_10) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_31) -> [0: bb27, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_8) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_32) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_6) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_33) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_4) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_34) -> [0: bb49, otherwise: bb30];
    }

    bb32 (cleanup): {
        switchInt(_35) -> [0: bb13, otherwise: bb33];
    }

    bb33 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_36) -> [0: bb32, otherwise: bb35];
    }

    bb35 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_37) -> [0: bb34, otherwise: bb37];
    }

    bb37 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_38) -> [0: bb36, otherwise: bb39];
    }

    bb39 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_39) -> [0: bb38, otherwise: bb41];
    }

    bb41 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_40) -> [0: bb40, otherwise: bb43];
    }

    bb43 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_41) -> [0: bb42, otherwise: bb45];
    }

    bb45 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_42) -> [0: bb44, otherwise: bb47];
    }

    bb47 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_43) -> [0: bb46, otherwise: bb48];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _12: &Func;
    let _13: &Func;
    let _14: *const Func;
    let mut _15: *const ();
    let mut _17: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _18: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _19: &&Func;
    let mut _20: &&Env;
    let mut _21: isize;
    let mut _22: isize;
    let mut _25: !;
    let mut _26: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _27: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _29: !;
    let mut _31: isize;
    scope 1 {
        debug func => _12;
        let _16: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _16;
            let _23: Rets;
            let _24: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _28: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _23;
            }
            scope 5 {
                debug trap => _24;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _28;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _30: &();
    }

    bb0: {
        _30 = const _;
        _15 = &raw const (*_30);
        _14 = move _15 as *const Func (PtrToPtr);
        _13 = &(*_14);
        _12 = _13;
        _19 = &_12;
        _20 = &_1;
        _18 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _19, env: move _20, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11 };
        _17 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _18);
        _16 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        _22 = discriminant(_16);
        switchInt(move _22) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _21 = discriminant(((_16 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _21) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _28 = move ((_16 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _29 = resume_panic(move _28) -> unwind continue;
    }

    bb5: {
        _23 = move ((((_16 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _23) -> [return: bb6, unwind continue];
    }

    bb6: {
        _31 = discriminant(_16);
        switchInt(move _31) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _24 = move ((((_16 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _27 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        _26 = move _27 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _25 = raise_user_trap(move _26) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: &&Func;
    let mut _25: &Func;
    let mut _26: &&Env;
    let mut _27: &Env;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;

    bb0: {
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _37 = const true;
        _38 = const true;
        _39 = const true;
        _40 = const true;
        _41 = const true;
        _42 = const true;
        _43 = const true;
        _44 = const true;
        _45 = const true;
        _24 = deref_copy (_1.0: &&Func);
        _25 = deref_copy (*_24);
        _26 = deref_copy (_1.1: &&Env);
        _27 = deref_copy (*_26);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb49];
    }

    bb1: {
        _36 = const true;
        _45 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _35 = const true;
        _44 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb29];
    }

    bb3: {
        _34 = const true;
        _43 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb27];
    }

    bb4: {
        _33 = const true;
        _42 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb25];
    }

    bb5: {
        _32 = const true;
        _41 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        _31 = const true;
        _40 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        _30 = const true;
        _39 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _29 = const true;
        _38 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _28 = const true;
        _37 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _3 = (_27, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>>::call(_25, move _3) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        _28 = const false;
        _29 = const false;
        _30 = const false;
        _31 = const false;
        _32 = const false;
        _33 = const false;
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb12, unwind: bb49];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_20) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_28) -> [0: bb17, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_18) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_29) -> [0: bb19, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_16) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_30) -> [0: bb21, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_14) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_31) -> [0: bb23, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_12) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_32) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_10) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_33) -> [0: bb27, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_8) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_34) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_6) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_35) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_4) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_36) -> [0: bb49, otherwise: bb30];
    }

    bb32 (cleanup): {
        switchInt(_37) -> [0: bb13, otherwise: bb33];
    }

    bb33 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_38) -> [0: bb32, otherwise: bb35];
    }

    bb35 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_39) -> [0: bb34, otherwise: bb37];
    }

    bb37 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_40) -> [0: bb36, otherwise: bb39];
    }

    bb39 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_41) -> [0: bb38, otherwise: bb41];
    }

    bb41 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_42) -> [0: bb40, otherwise: bb43];
    }

    bb43 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_43) -> [0: bb42, otherwise: bb45];
    }

    bb45 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_44) -> [0: bb44, otherwise: bb47];
    }

    bb47 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_45) -> [0: bb46, otherwise: bb48];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 11_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 11]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11);
    let mut _13: A1;
    let mut _14: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A2;
    let mut _16: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A3;
    let mut _18: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A4;
    let mut _20: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A5;
    let mut _22: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A6;
    let mut _24: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A7;
    let mut _26: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A8;
    let mut _28: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A9;
    let mut _30: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A10;
    let mut _32: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A11;
    let mut _34: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
    }

    bb0: {
        _2 = _1[0 of 11];
        _3 = _1[1 of 11];
        _4 = _1[2 of 11];
        _5 = _1[3 of 11];
        _6 = _1[4 of 11];
        _7 = _1[5 of 11];
        _8 = _1[6 of 11];
        _9 = _1[7 of 11];
        _10 = _1[8 of 11];
        _11 = _1[9 of 11];
        _12 = _1[10 of 11];
        _14 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _13 = <A1 as FromToNativeWasmType>::from_native(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _16 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb32];
    }

    bb3: {
        _15 = <A2 as FromToNativeWasmType>::from_native(move _16) -> [return: bb4, unwind: bb32];
    }

    bb4: {
        _18 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb31];
    }

    bb5: {
        _17 = <A3 as FromToNativeWasmType>::from_native(move _18) -> [return: bb6, unwind: bb31];
    }

    bb6: {
        _20 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        _19 = <A4 as FromToNativeWasmType>::from_native(move _20) -> [return: bb8, unwind: bb30];
    }

    bb8: {
        _22 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb29];
    }

    bb9: {
        _21 = <A5 as FromToNativeWasmType>::from_native(move _22) -> [return: bb10, unwind: bb29];
    }

    bb10: {
        _24 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        _23 = <A6 as FromToNativeWasmType>::from_native(move _24) -> [return: bb12, unwind: bb28];
    }

    bb12: {
        _26 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb27];
    }

    bb13: {
        _25 = <A7 as FromToNativeWasmType>::from_native(move _26) -> [return: bb14, unwind: bb27];
    }

    bb14: {
        _28 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        _27 = <A8 as FromToNativeWasmType>::from_native(move _28) -> [return: bb16, unwind: bb26];
    }

    bb16: {
        _30 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        _29 = <A9 as FromToNativeWasmType>::from_native(move _30) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        _32 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        _31 = <A10 as FromToNativeWasmType>::from_native(move _32) -> [return: bb20, unwind: bb24];
    }

    bb20: {
        _34 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb23];
    }

    bb21: {
        _33 = <A11 as FromToNativeWasmType>::from_native(move _34) -> [return: bb22, unwind: bb23];
    }

    bb22: {
        _0 = (move _13, move _15, move _17, move _19, move _21, move _23, move _25, move _27, move _29, move _31, move _33);
        return;
    }

    bb23 (cleanup): {
        drop(_31) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_29) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_27) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_25) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_23) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_21) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_19) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_17) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_15) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_13) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 11]>;
    let mut _4: std::result::Result<[i128; 11], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 11];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 11]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 11], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 11]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)) -> [i128; 11] {
    debug self => _1;
    let mut _0: [i128; 11];
    let mut _13: i128;
    let mut _14: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: i128;
    let mut _16: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A2;
    let mut _18: i128;
    let mut _19: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A3;
    let mut _21: i128;
    let mut _22: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A4;
    let mut _24: i128;
    let mut _25: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A5;
    let mut _27: i128;
    let mut _28: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A6;
    let mut _30: i128;
    let mut _31: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A7;
    let mut _33: i128;
    let mut _34: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A8;
    let mut _36: i128;
    let mut _37: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A9;
    let mut _39: i128;
    let mut _40: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A10;
    let mut _42: i128;
    let mut _43: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A11;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
    }

    bb0: {
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _2 = move (_1.0: A1);
        _54 = const true;
        _3 = move (_1.1: A2);
        _53 = const true;
        _4 = move (_1.2: A3);
        _52 = const true;
        _5 = move (_1.3: A4);
        _51 = const true;
        _6 = move (_1.4: A5);
        _50 = const true;
        _7 = move (_1.5: A6);
        _49 = const true;
        _8 = move (_1.6: A7);
        _48 = const true;
        _9 = move (_1.7: A8);
        _47 = const true;
        _10 = move (_1.8: A9);
        _46 = const true;
        _11 = move (_1.9: A10);
        _45 = const true;
        _12 = move (_1.10: A11);
        _14 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb34];
    }

    bb1: {
        _13 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _14) -> [return: bb2, unwind: bb34];
    }

    bb2: {
        _54 = const false;
        _17 = move _3;
        _16 = <A2 as FromToNativeWasmType>::to_native(move _17) -> [return: bb3, unwind: bb34];
    }

    bb3: {
        _15 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _16) -> [return: bb4, unwind: bb34];
    }

    bb4: {
        _53 = const false;
        _20 = move _4;
        _19 = <A3 as FromToNativeWasmType>::to_native(move _20) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        _18 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _19) -> [return: bb6, unwind: bb34];
    }

    bb6: {
        _52 = const false;
        _23 = move _5;
        _22 = <A4 as FromToNativeWasmType>::to_native(move _23) -> [return: bb7, unwind: bb34];
    }

    bb7: {
        _21 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _22) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        _51 = const false;
        _26 = move _6;
        _25 = <A5 as FromToNativeWasmType>::to_native(move _26) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        _24 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _25) -> [return: bb10, unwind: bb34];
    }

    bb10: {
        _50 = const false;
        _29 = move _7;
        _28 = <A6 as FromToNativeWasmType>::to_native(move _29) -> [return: bb11, unwind: bb34];
    }

    bb11: {
        _27 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _28) -> [return: bb12, unwind: bb34];
    }

    bb12: {
        _49 = const false;
        _32 = move _8;
        _31 = <A7 as FromToNativeWasmType>::to_native(move _32) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        _30 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _31) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        _48 = const false;
        _35 = move _9;
        _34 = <A8 as FromToNativeWasmType>::to_native(move _35) -> [return: bb15, unwind: bb34];
    }

    bb15: {
        _33 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _34) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        _47 = const false;
        _38 = move _10;
        _37 = <A9 as FromToNativeWasmType>::to_native(move _38) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        _36 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _37) -> [return: bb18, unwind: bb34];
    }

    bb18: {
        _46 = const false;
        _41 = move _11;
        _40 = <A10 as FromToNativeWasmType>::to_native(move _41) -> [return: bb19, unwind: bb34];
    }

    bb19: {
        _39 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _40) -> [return: bb20, unwind: bb34];
    }

    bb20: {
        _45 = const false;
        _44 = move _12;
        _43 = <A11 as FromToNativeWasmType>::to_native(move _44) -> [return: bb21, unwind: bb34];
    }

    bb21: {
        _42 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _43) -> [return: bb22, unwind: bb34];
    }

    bb22: {
        _0 = [move _13, move _15, move _18, move _21, move _24, move _27, move _30, move _33, move _36, move _39, move _42];
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        return;
    }

    bb23 (cleanup): {
        switchInt(_46) -> [0: bb24, otherwise: bb35];
    }

    bb24 (cleanup): {
        switchInt(_47) -> [0: bb25, otherwise: bb36];
    }

    bb25 (cleanup): {
        switchInt(_48) -> [0: bb26, otherwise: bb37];
    }

    bb26 (cleanup): {
        switchInt(_49) -> [0: bb27, otherwise: bb38];
    }

    bb27 (cleanup): {
        switchInt(_50) -> [0: bb28, otherwise: bb39];
    }

    bb28 (cleanup): {
        switchInt(_51) -> [0: bb29, otherwise: bb40];
    }

    bb29 (cleanup): {
        switchInt(_52) -> [0: bb30, otherwise: bb41];
    }

    bb30 (cleanup): {
        switchInt(_53) -> [0: bb31, otherwise: bb42];
    }

    bb31 (cleanup): {
        switchInt(_54) -> [0: bb32, otherwise: bb43];
    }

    bb32 (cleanup): {
        resume;
    }

    bb33 (cleanup): {
        drop(_12) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_45) -> [0: bb23, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_11) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_10) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_9) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_8) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_7) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_6) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_5) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_4) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_3) -> [return: bb32, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 11] {
    let mut _0: [i128; 11];

    bb0: {
        _0 = [const 0_i128; 11];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 11_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S11<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11);
    let mut _13: A1;
    let mut _14: A2;
    let mut _15: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A3;
    let mut _17: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A4;
    let mut _19: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A5;
    let mut _21: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A6;
    let mut _23: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A7;
    let mut _25: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A8;
    let mut _27: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A9;
    let mut _29: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A10;
    let mut _31: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A11;
    let mut _33: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _43 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _41 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _39 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _37 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _35 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _13 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb33];
    }

    bb1: {
        _43 = const false;
        _15 = move _3;
        _14 = <A2 as FromToNativeWasmType>::from_native(move _15) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _42 = const false;
        _17 = move _4;
        _16 = <A3 as FromToNativeWasmType>::from_native(move _17) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _41 = const false;
        _19 = move _5;
        _18 = <A4 as FromToNativeWasmType>::from_native(move _19) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _40 = const false;
        _21 = move _6;
        _20 = <A5 as FromToNativeWasmType>::from_native(move _21) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _39 = const false;
        _23 = move _7;
        _22 = <A6 as FromToNativeWasmType>::from_native(move _23) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _38 = const false;
        _25 = move _8;
        _24 = <A7 as FromToNativeWasmType>::from_native(move _25) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _37 = const false;
        _27 = move _9;
        _26 = <A8 as FromToNativeWasmType>::from_native(move _27) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        _36 = const false;
        _29 = move _10;
        _28 = <A9 as FromToNativeWasmType>::from_native(move _29) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _35 = const false;
        _31 = move _11;
        _30 = <A10 as FromToNativeWasmType>::from_native(move _31) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        _34 = const false;
        _33 = move _12;
        _32 = <A11 as FromToNativeWasmType>::from_native(move _33) -> [return: bb11, unwind: bb12];
    }

    bb11: {
        _0 = (move _13, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32);
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        return;
    }

    bb12 (cleanup): {
        drop(_30) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_28) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_26) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_24) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_22) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_20) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_18) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_16) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_14) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_13) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_35) -> [0: bb23, otherwise: bb34];
    }

    bb23 (cleanup): {
        switchInt(_36) -> [0: bb24, otherwise: bb35];
    }

    bb24 (cleanup): {
        switchInt(_37) -> [0: bb25, otherwise: bb36];
    }

    bb25 (cleanup): {
        switchInt(_38) -> [0: bb26, otherwise: bb37];
    }

    bb26 (cleanup): {
        switchInt(_39) -> [0: bb27, otherwise: bb38];
    }

    bb27 (cleanup): {
        switchInt(_40) -> [0: bb28, otherwise: bb39];
    }

    bb28 (cleanup): {
        switchInt(_41) -> [0: bb29, otherwise: bb40];
    }

    bb29 (cleanup): {
        switchInt(_42) -> [0: bb30, otherwise: bb41];
    }

    bb30 (cleanup): {
        switchInt(_43) -> [0: bb31, otherwise: bb42];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32 (cleanup): {
        drop(_12) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_34) -> [0: bb22, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_11) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_10) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_9) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_8) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_7) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_6) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_5) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_4) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_3) -> [return: bb31, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)) -> S11<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11> {
    debug self => _1;
    let mut _0: externals::function::inner::S11<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let mut _13: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A2;
    let mut _16: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A3;
    let mut _18: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A4;
    let mut _20: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A5;
    let mut _22: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A6;
    let mut _24: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A7;
    let mut _26: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A8;
    let mut _28: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A9;
    let mut _30: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A10;
    let mut _32: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A11;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
    }

    bb0: {
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _2 = move (_1.0: A1);
        _43 = const true;
        _3 = move (_1.1: A2);
        _42 = const true;
        _4 = move (_1.2: A3);
        _41 = const true;
        _5 = move (_1.3: A4);
        _40 = const true;
        _6 = move (_1.4: A5);
        _39 = const true;
        _7 = move (_1.5: A6);
        _38 = const true;
        _8 = move (_1.6: A7);
        _37 = const true;
        _9 = move (_1.7: A8);
        _36 = const true;
        _10 = move (_1.8: A9);
        _35 = const true;
        _11 = move (_1.9: A10);
        _34 = const true;
        _12 = move (_1.10: A11);
        _13 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb33];
    }

    bb1: {
        _43 = const false;
        _15 = move _3;
        _14 = <A2 as FromToNativeWasmType>::to_native(move _15) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _42 = const false;
        _17 = move _4;
        _16 = <A3 as FromToNativeWasmType>::to_native(move _17) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _41 = const false;
        _19 = move _5;
        _18 = <A4 as FromToNativeWasmType>::to_native(move _19) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _40 = const false;
        _21 = move _6;
        _20 = <A5 as FromToNativeWasmType>::to_native(move _21) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _39 = const false;
        _23 = move _7;
        _22 = <A6 as FromToNativeWasmType>::to_native(move _23) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _38 = const false;
        _25 = move _8;
        _24 = <A7 as FromToNativeWasmType>::to_native(move _25) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _37 = const false;
        _27 = move _9;
        _26 = <A8 as FromToNativeWasmType>::to_native(move _27) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        _36 = const false;
        _29 = move _10;
        _28 = <A9 as FromToNativeWasmType>::to_native(move _29) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _35 = const false;
        _31 = move _11;
        _30 = <A10 as FromToNativeWasmType>::to_native(move _31) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        _34 = const false;
        _33 = move _12;
        _32 = <A11 as FromToNativeWasmType>::to_native(move _33) -> [return: bb11, unwind: bb12];
    }

    bb11: {
        _0 = S11::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>(move _13, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32);
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        return;
    }

    bb12 (cleanup): {
        drop(_30) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_28) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_26) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_24) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_22) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_20) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_18) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_16) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_14) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_13) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_35) -> [0: bb23, otherwise: bb34];
    }

    bb23 (cleanup): {
        switchInt(_36) -> [0: bb24, otherwise: bb35];
    }

    bb24 (cleanup): {
        switchInt(_37) -> [0: bb25, otherwise: bb36];
    }

    bb25 (cleanup): {
        switchInt(_38) -> [0: bb26, otherwise: bb37];
    }

    bb26 (cleanup): {
        switchInt(_39) -> [0: bb27, otherwise: bb38];
    }

    bb27 (cleanup): {
        switchInt(_40) -> [0: bb28, otherwise: bb39];
    }

    bb28 (cleanup): {
        switchInt(_41) -> [0: bb29, otherwise: bb40];
    }

    bb29 (cleanup): {
        switchInt(_42) -> [0: bb30, otherwise: bb41];
    }

    bb30 (cleanup): {
        switchInt(_43) -> [0: bb31, otherwise: bb42];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32 (cleanup): {
        drop(_12) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_34) -> [0: bb22, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_11) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_10) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_9) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_8) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_7) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_6) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_5) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_4) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_3) -> [return: bb31, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 11];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 11] = {
    let mut _0: &[wasmer_types::Type; 11];
    let mut _1: [wasmer_types::Type; 11];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _13: &Func;
    let _14: &Func;
    let _15: *const Func;
    let mut _16: *const ();
    let mut _18: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _19: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _20: &&Func;
    let mut _21: isize;
    let mut _22: isize;
    let mut _25: !;
    let mut _26: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _27: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _29: !;
    let mut _31: isize;
    scope 1 {
        debug func => _13;
        let _17: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _17;
            let _23: Rets;
            let _24: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _28: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _23;
            }
            scope 5 {
                debug trap => _24;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _28;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _30: &();
    }

    bb0: {
        _30 = const _;
        _16 = &raw const (*_30);
        _15 = move _16 as *const Func (PtrToPtr);
        _14 = &(*_15);
        _13 = _14;
        _20 = &_13;
        _19 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _20, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12 };
        _18 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _19);
        _17 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _18) -> [return: bb1, unwind continue];
    }

    bb1: {
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _21 = discriminant(((_17 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _21) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _28 = move ((_17 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _29 = resume_panic(move _28) -> unwind continue;
    }

    bb5: {
        _23 = move ((((_17 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _23) -> [return: bb6, unwind continue];
    }

    bb6: {
        _31 = discriminant(_17);
        switchInt(move _31) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _24 = move ((((_17 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _27 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        _26 = move _27 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _25 = raise_user_trap(move _26) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: &&Func;
    let mut _27: &Func;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;

    bb0: {
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _38 = const true;
        _39 = const true;
        _40 = const true;
        _41 = const true;
        _42 = const true;
        _43 = const true;
        _44 = const true;
        _45 = const true;
        _46 = const true;
        _47 = const true;
        _26 = deref_copy (_1.0: &&Func);
        _27 = deref_copy (*_26);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb54];
    }

    bb1: {
        _37 = const true;
        _47 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb34];
    }

    bb2: {
        _36 = const true;
        _46 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb32];
    }

    bb3: {
        _35 = const true;
        _45 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb30];
    }

    bb4: {
        _34 = const true;
        _44 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb28];
    }

    bb5: {
        _33 = const true;
        _43 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb26];
    }

    bb6: {
        _32 = const true;
        _42 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _31 = const true;
        _41 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        _30 = const true;
        _40 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        _29 = const true;
        _39 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _28 = const true;
        _38 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)>>::call(_27, move _3) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _28 = const false;
        _29 = const false;
        _30 = const false;
        _31 = const false;
        _32 = const false;
        _33 = const false;
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _37 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb13, unwind: bb54];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_22) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_28) -> [0: bb18, otherwise: bb15];
    }

    bb17 (cleanup): {
        drop(_20) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_29) -> [0: bb20, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_18) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_30) -> [0: bb22, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_16) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_31) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_14) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_32) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_12) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_33) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_10) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_34) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_8) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_35) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_6) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_36) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_4) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_37) -> [0: bb54, otherwise: bb33];
    }

    bb35 (cleanup): {
        switchInt(_38) -> [0: bb14, otherwise: bb36];
    }

    bb36 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_39) -> [0: bb35, otherwise: bb38];
    }

    bb38 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_40) -> [0: bb37, otherwise: bb40];
    }

    bb40 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_41) -> [0: bb39, otherwise: bb42];
    }

    bb42 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_42) -> [0: bb41, otherwise: bb44];
    }

    bb44 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_43) -> [0: bb43, otherwise: bb46];
    }

    bb46 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_44) -> [0: bb45, otherwise: bb48];
    }

    bb48 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_45) -> [0: bb47, otherwise: bb50];
    }

    bb50 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_46) -> [0: bb49, otherwise: bb52];
    }

    bb52 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_47) -> [0: bb51, otherwise: bb53];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _13: &Func;
    let _14: &Func;
    let _15: *const Func;
    let mut _16: *const ();
    let mut _18: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _19: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _20: &&Func;
    let mut _21: &&Env;
    let mut _22: isize;
    let mut _23: isize;
    let mut _26: !;
    let mut _27: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _28: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _30: !;
    let mut _32: isize;
    scope 1 {
        debug func => _13;
        let _17: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _17;
            let _24: Rets;
            let _25: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _29: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _24;
            }
            scope 5 {
                debug trap => _25;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _29;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _31: &();
    }

    bb0: {
        _31 = const _;
        _16 = &raw const (*_31);
        _15 = move _16 as *const Func (PtrToPtr);
        _14 = &(*_15);
        _13 = _14;
        _20 = &_13;
        _21 = &_1;
        _19 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _20, env: move _21, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12 };
        _18 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _19);
        _17 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _18) -> [return: bb1, unwind continue];
    }

    bb1: {
        _23 = discriminant(_17);
        switchInt(move _23) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _22 = discriminant(((_17 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _22) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _29 = move ((_17 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _30 = resume_panic(move _29) -> unwind continue;
    }

    bb5: {
        _24 = move ((((_17 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _24) -> [return: bb6, unwind continue];
    }

    bb6: {
        _32 = discriminant(_17);
        switchInt(move _32) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _25 = move ((((_17 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _28 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        _27 = move _28 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _26 = raise_user_trap(move _27) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: &&Func;
    let mut _27: &Func;
    let mut _28: &&Env;
    let mut _29: &Env;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;

    bb0: {
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _40 = const true;
        _41 = const true;
        _42 = const true;
        _43 = const true;
        _44 = const true;
        _45 = const true;
        _46 = const true;
        _47 = const true;
        _48 = const true;
        _49 = const true;
        _26 = deref_copy (_1.0: &&Func);
        _27 = deref_copy (*_26);
        _28 = deref_copy (_1.1: &&Env);
        _29 = deref_copy (*_28);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb54];
    }

    bb1: {
        _39 = const true;
        _49 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb34];
    }

    bb2: {
        _38 = const true;
        _48 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb32];
    }

    bb3: {
        _37 = const true;
        _47 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb30];
    }

    bb4: {
        _36 = const true;
        _46 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb28];
    }

    bb5: {
        _35 = const true;
        _45 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb26];
    }

    bb6: {
        _34 = const true;
        _44 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _33 = const true;
        _43 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        _32 = const true;
        _42 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        _31 = const true;
        _41 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _30 = const true;
        _40 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _3 = (_29, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)>>::call(_27, move _3) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _30 = const false;
        _31 = const false;
        _32 = const false;
        _33 = const false;
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb13, unwind: bb54];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_22) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_30) -> [0: bb18, otherwise: bb15];
    }

    bb17 (cleanup): {
        drop(_20) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_31) -> [0: bb20, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_18) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_32) -> [0: bb22, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_16) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_33) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_14) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_34) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_12) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_35) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_10) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_36) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_8) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_37) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_6) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_38) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_4) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_39) -> [0: bb54, otherwise: bb33];
    }

    bb35 (cleanup): {
        switchInt(_40) -> [0: bb14, otherwise: bb36];
    }

    bb36 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_41) -> [0: bb35, otherwise: bb38];
    }

    bb38 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_42) -> [0: bb37, otherwise: bb40];
    }

    bb40 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_43) -> [0: bb39, otherwise: bb42];
    }

    bb42 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_44) -> [0: bb41, otherwise: bb44];
    }

    bb44 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_45) -> [0: bb43, otherwise: bb46];
    }

    bb46 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_46) -> [0: bb45, otherwise: bb48];
    }

    bb48 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_47) -> [0: bb47, otherwise: bb50];
    }

    bb50 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_48) -> [0: bb49, otherwise: bb52];
    }

    bb52 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_49) -> [0: bb51, otherwise: bb53];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 12_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 12]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12);
    let mut _14: A1;
    let mut _15: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A2;
    let mut _17: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A3;
    let mut _19: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A4;
    let mut _21: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A5;
    let mut _23: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A6;
    let mut _25: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A7;
    let mut _27: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A8;
    let mut _29: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A9;
    let mut _31: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A10;
    let mut _33: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A11;
    let mut _35: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A12;
    let mut _37: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
    }

    bb0: {
        _2 = _1[0 of 12];
        _3 = _1[1 of 12];
        _4 = _1[2 of 12];
        _5 = _1[3 of 12];
        _6 = _1[4 of 12];
        _7 = _1[5 of 12];
        _8 = _1[6 of 12];
        _9 = _1[7 of 12];
        _10 = _1[8 of 12];
        _11 = _1[9 of 12];
        _12 = _1[10 of 12];
        _13 = _1[11 of 12];
        _15 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _14 = <A1 as FromToNativeWasmType>::from_native(move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        _17 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb35];
    }

    bb3: {
        _16 = <A2 as FromToNativeWasmType>::from_native(move _17) -> [return: bb4, unwind: bb35];
    }

    bb4: {
        _19 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        _18 = <A3 as FromToNativeWasmType>::from_native(move _19) -> [return: bb6, unwind: bb34];
    }

    bb6: {
        _21 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        _20 = <A4 as FromToNativeWasmType>::from_native(move _21) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        _23 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb32];
    }

    bb9: {
        _22 = <A5 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb32];
    }

    bb10: {
        _25 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        _24 = <A6 as FromToNativeWasmType>::from_native(move _25) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        _27 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        _26 = <A7 as FromToNativeWasmType>::from_native(move _27) -> [return: bb14, unwind: bb30];
    }

    bb14: {
        _29 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb29];
    }

    bb15: {
        _28 = <A8 as FromToNativeWasmType>::from_native(move _29) -> [return: bb16, unwind: bb29];
    }

    bb16: {
        _31 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        _30 = <A9 as FromToNativeWasmType>::from_native(move _31) -> [return: bb18, unwind: bb28];
    }

    bb18: {
        _33 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb27];
    }

    bb19: {
        _32 = <A10 as FromToNativeWasmType>::from_native(move _33) -> [return: bb20, unwind: bb27];
    }

    bb20: {
        _35 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb26];
    }

    bb21: {
        _34 = <A11 as FromToNativeWasmType>::from_native(move _35) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        _37 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb25];
    }

    bb23: {
        _36 = <A12 as FromToNativeWasmType>::from_native(move _37) -> [return: bb24, unwind: bb25];
    }

    bb24: {
        _0 = (move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36);
        return;
    }

    bb25 (cleanup): {
        drop(_34) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_32) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_30) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_28) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_26) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_24) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_22) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_20) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_18) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_16) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_14) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 12]>;
    let mut _4: std::result::Result<[i128; 12], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 12];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 12]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 12], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 12]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)) -> [i128; 12] {
    debug self => _1;
    let mut _0: [i128; 12];
    let mut _14: i128;
    let mut _15: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: i128;
    let mut _17: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A2;
    let mut _19: i128;
    let mut _20: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A3;
    let mut _22: i128;
    let mut _23: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A4;
    let mut _25: i128;
    let mut _26: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A5;
    let mut _28: i128;
    let mut _29: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A6;
    let mut _31: i128;
    let mut _32: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A7;
    let mut _34: i128;
    let mut _35: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A8;
    let mut _37: i128;
    let mut _38: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A9;
    let mut _40: i128;
    let mut _41: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A10;
    let mut _43: i128;
    let mut _44: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A11;
    let mut _46: i128;
    let mut _47: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A12;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
    }

    bb0: {
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _2 = move (_1.0: A1);
        _59 = const true;
        _3 = move (_1.1: A2);
        _58 = const true;
        _4 = move (_1.2: A3);
        _57 = const true;
        _5 = move (_1.3: A4);
        _56 = const true;
        _6 = move (_1.4: A5);
        _55 = const true;
        _7 = move (_1.5: A6);
        _54 = const true;
        _8 = move (_1.6: A7);
        _53 = const true;
        _9 = move (_1.7: A8);
        _52 = const true;
        _10 = move (_1.8: A9);
        _51 = const true;
        _11 = move (_1.9: A10);
        _50 = const true;
        _12 = move (_1.10: A11);
        _49 = const true;
        _13 = move (_1.11: A12);
        _15 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb37];
    }

    bb1: {
        _14 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _15) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        _59 = const false;
        _18 = move _3;
        _17 = <A2 as FromToNativeWasmType>::to_native(move _18) -> [return: bb3, unwind: bb37];
    }

    bb3: {
        _16 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _17) -> [return: bb4, unwind: bb37];
    }

    bb4: {
        _58 = const false;
        _21 = move _4;
        _20 = <A3 as FromToNativeWasmType>::to_native(move _21) -> [return: bb5, unwind: bb37];
    }

    bb5: {
        _19 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _20) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        _57 = const false;
        _24 = move _5;
        _23 = <A4 as FromToNativeWasmType>::to_native(move _24) -> [return: bb7, unwind: bb37];
    }

    bb7: {
        _22 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _23) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        _56 = const false;
        _27 = move _6;
        _26 = <A5 as FromToNativeWasmType>::to_native(move _27) -> [return: bb9, unwind: bb37];
    }

    bb9: {
        _25 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _26) -> [return: bb10, unwind: bb37];
    }

    bb10: {
        _55 = const false;
        _30 = move _7;
        _29 = <A6 as FromToNativeWasmType>::to_native(move _30) -> [return: bb11, unwind: bb37];
    }

    bb11: {
        _28 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _29) -> [return: bb12, unwind: bb37];
    }

    bb12: {
        _54 = const false;
        _33 = move _8;
        _32 = <A7 as FromToNativeWasmType>::to_native(move _33) -> [return: bb13, unwind: bb37];
    }

    bb13: {
        _31 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _32) -> [return: bb14, unwind: bb37];
    }

    bb14: {
        _53 = const false;
        _36 = move _9;
        _35 = <A8 as FromToNativeWasmType>::to_native(move _36) -> [return: bb15, unwind: bb37];
    }

    bb15: {
        _34 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _35) -> [return: bb16, unwind: bb37];
    }

    bb16: {
        _52 = const false;
        _39 = move _10;
        _38 = <A9 as FromToNativeWasmType>::to_native(move _39) -> [return: bb17, unwind: bb37];
    }

    bb17: {
        _37 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _38) -> [return: bb18, unwind: bb37];
    }

    bb18: {
        _51 = const false;
        _42 = move _11;
        _41 = <A10 as FromToNativeWasmType>::to_native(move _42) -> [return: bb19, unwind: bb37];
    }

    bb19: {
        _40 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _41) -> [return: bb20, unwind: bb37];
    }

    bb20: {
        _50 = const false;
        _45 = move _12;
        _44 = <A11 as FromToNativeWasmType>::to_native(move _45) -> [return: bb21, unwind: bb37];
    }

    bb21: {
        _43 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _44) -> [return: bb22, unwind: bb37];
    }

    bb22: {
        _49 = const false;
        _48 = move _13;
        _47 = <A12 as FromToNativeWasmType>::to_native(move _48) -> [return: bb23, unwind: bb37];
    }

    bb23: {
        _46 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _47) -> [return: bb24, unwind: bb37];
    }

    bb24: {
        _0 = [move _14, move _16, move _19, move _22, move _25, move _28, move _31, move _34, move _37, move _40, move _43, move _46];
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        return;
    }

    bb25 (cleanup): {
        switchInt(_50) -> [0: bb26, otherwise: bb38];
    }

    bb26 (cleanup): {
        switchInt(_51) -> [0: bb27, otherwise: bb39];
    }

    bb27 (cleanup): {
        switchInt(_52) -> [0: bb28, otherwise: bb40];
    }

    bb28 (cleanup): {
        switchInt(_53) -> [0: bb29, otherwise: bb41];
    }

    bb29 (cleanup): {
        switchInt(_54) -> [0: bb30, otherwise: bb42];
    }

    bb30 (cleanup): {
        switchInt(_55) -> [0: bb31, otherwise: bb43];
    }

    bb31 (cleanup): {
        switchInt(_56) -> [0: bb32, otherwise: bb44];
    }

    bb32 (cleanup): {
        switchInt(_57) -> [0: bb33, otherwise: bb45];
    }

    bb33 (cleanup): {
        switchInt(_58) -> [0: bb34, otherwise: bb46];
    }

    bb34 (cleanup): {
        switchInt(_59) -> [0: bb35, otherwise: bb47];
    }

    bb35 (cleanup): {
        resume;
    }

    bb36 (cleanup): {
        drop(_13) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_49) -> [0: bb25, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_12) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_11) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_10) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_9) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_8) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_7) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_6) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_5) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_4) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_3) -> [return: bb35, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 12] {
    let mut _0: [i128; 12];

    bb0: {
        _0 = [const 0_i128; 12];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 12_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S12<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12);
    let mut _14: A1;
    let mut _15: A2;
    let mut _16: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A3;
    let mut _18: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A4;
    let mut _20: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A5;
    let mut _22: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A6;
    let mut _24: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A7;
    let mut _26: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A8;
    let mut _28: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A9;
    let mut _30: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A10;
    let mut _32: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A11;
    let mut _34: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A12;
    let mut _36: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _47 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _45 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _43 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _41 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _39 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _37 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb36];
    }

    bb1: {
        _47 = const false;
        _16 = move _3;
        _15 = <A2 as FromToNativeWasmType>::from_native(move _16) -> [return: bb2, unwind: bb23];
    }

    bb2: {
        _46 = const false;
        _18 = move _4;
        _17 = <A3 as FromToNativeWasmType>::from_native(move _18) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _45 = const false;
        _20 = move _5;
        _19 = <A4 as FromToNativeWasmType>::from_native(move _20) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _44 = const false;
        _22 = move _6;
        _21 = <A5 as FromToNativeWasmType>::from_native(move _22) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _43 = const false;
        _24 = move _7;
        _23 = <A6 as FromToNativeWasmType>::from_native(move _24) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _42 = const false;
        _26 = move _8;
        _25 = <A7 as FromToNativeWasmType>::from_native(move _26) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _41 = const false;
        _28 = move _9;
        _27 = <A8 as FromToNativeWasmType>::from_native(move _28) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        _40 = const false;
        _30 = move _10;
        _29 = <A9 as FromToNativeWasmType>::from_native(move _30) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _39 = const false;
        _32 = move _11;
        _31 = <A10 as FromToNativeWasmType>::from_native(move _32) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _38 = const false;
        _34 = move _12;
        _33 = <A11 as FromToNativeWasmType>::from_native(move _34) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _37 = const false;
        _36 = move _13;
        _35 = <A12 as FromToNativeWasmType>::from_native(move _36) -> [return: bb12, unwind: bb13];
    }

    bb12: {
        _0 = (move _14, move _15, move _17, move _19, move _21, move _23, move _25, move _27, move _29, move _31, move _33, move _35);
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        return;
    }

    bb13 (cleanup): {
        drop(_33) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_31) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_29) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_27) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_25) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_23) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_21) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_19) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_17) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_15) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_14) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_38) -> [0: bb25, otherwise: bb37];
    }

    bb25 (cleanup): {
        switchInt(_39) -> [0: bb26, otherwise: bb38];
    }

    bb26 (cleanup): {
        switchInt(_40) -> [0: bb27, otherwise: bb39];
    }

    bb27 (cleanup): {
        switchInt(_41) -> [0: bb28, otherwise: bb40];
    }

    bb28 (cleanup): {
        switchInt(_42) -> [0: bb29, otherwise: bb41];
    }

    bb29 (cleanup): {
        switchInt(_43) -> [0: bb30, otherwise: bb42];
    }

    bb30 (cleanup): {
        switchInt(_44) -> [0: bb31, otherwise: bb43];
    }

    bb31 (cleanup): {
        switchInt(_45) -> [0: bb32, otherwise: bb44];
    }

    bb32 (cleanup): {
        switchInt(_46) -> [0: bb33, otherwise: bb45];
    }

    bb33 (cleanup): {
        switchInt(_47) -> [0: bb34, otherwise: bb46];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35 (cleanup): {
        drop(_13) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_37) -> [0: bb24, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_12) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_11) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_10) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_9) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_8) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_7) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_6) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_5) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_4) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_3) -> [return: bb34, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)) -> S12<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12> {
    debug self => _1;
    let mut _0: externals::function::inner::S12<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let mut _14: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A2;
    let mut _17: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A3;
    let mut _19: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A4;
    let mut _21: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A5;
    let mut _23: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A6;
    let mut _25: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A7;
    let mut _27: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A8;
    let mut _29: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A9;
    let mut _31: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A10;
    let mut _33: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A11;
    let mut _35: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A12;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
    }

    bb0: {
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _2 = move (_1.0: A1);
        _47 = const true;
        _3 = move (_1.1: A2);
        _46 = const true;
        _4 = move (_1.2: A3);
        _45 = const true;
        _5 = move (_1.3: A4);
        _44 = const true;
        _6 = move (_1.4: A5);
        _43 = const true;
        _7 = move (_1.5: A6);
        _42 = const true;
        _8 = move (_1.6: A7);
        _41 = const true;
        _9 = move (_1.7: A8);
        _40 = const true;
        _10 = move (_1.8: A9);
        _39 = const true;
        _11 = move (_1.9: A10);
        _38 = const true;
        _12 = move (_1.10: A11);
        _37 = const true;
        _13 = move (_1.11: A12);
        _14 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb36];
    }

    bb1: {
        _47 = const false;
        _16 = move _3;
        _15 = <A2 as FromToNativeWasmType>::to_native(move _16) -> [return: bb2, unwind: bb23];
    }

    bb2: {
        _46 = const false;
        _18 = move _4;
        _17 = <A3 as FromToNativeWasmType>::to_native(move _18) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _45 = const false;
        _20 = move _5;
        _19 = <A4 as FromToNativeWasmType>::to_native(move _20) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _44 = const false;
        _22 = move _6;
        _21 = <A5 as FromToNativeWasmType>::to_native(move _22) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _43 = const false;
        _24 = move _7;
        _23 = <A6 as FromToNativeWasmType>::to_native(move _24) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _42 = const false;
        _26 = move _8;
        _25 = <A7 as FromToNativeWasmType>::to_native(move _26) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _41 = const false;
        _28 = move _9;
        _27 = <A8 as FromToNativeWasmType>::to_native(move _28) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        _40 = const false;
        _30 = move _10;
        _29 = <A9 as FromToNativeWasmType>::to_native(move _30) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _39 = const false;
        _32 = move _11;
        _31 = <A10 as FromToNativeWasmType>::to_native(move _32) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _38 = const false;
        _34 = move _12;
        _33 = <A11 as FromToNativeWasmType>::to_native(move _34) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _37 = const false;
        _36 = move _13;
        _35 = <A12 as FromToNativeWasmType>::to_native(move _36) -> [return: bb12, unwind: bb13];
    }

    bb12: {
        _0 = S12::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>(move _14, move _15, move _17, move _19, move _21, move _23, move _25, move _27, move _29, move _31, move _33, move _35);
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        return;
    }

    bb13 (cleanup): {
        drop(_33) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_31) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_29) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_27) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_25) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_23) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_21) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_19) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_17) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_15) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_14) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_38) -> [0: bb25, otherwise: bb37];
    }

    bb25 (cleanup): {
        switchInt(_39) -> [0: bb26, otherwise: bb38];
    }

    bb26 (cleanup): {
        switchInt(_40) -> [0: bb27, otherwise: bb39];
    }

    bb27 (cleanup): {
        switchInt(_41) -> [0: bb28, otherwise: bb40];
    }

    bb28 (cleanup): {
        switchInt(_42) -> [0: bb29, otherwise: bb41];
    }

    bb29 (cleanup): {
        switchInt(_43) -> [0: bb30, otherwise: bb42];
    }

    bb30 (cleanup): {
        switchInt(_44) -> [0: bb31, otherwise: bb43];
    }

    bb31 (cleanup): {
        switchInt(_45) -> [0: bb32, otherwise: bb44];
    }

    bb32 (cleanup): {
        switchInt(_46) -> [0: bb33, otherwise: bb45];
    }

    bb33 (cleanup): {
        switchInt(_47) -> [0: bb34, otherwise: bb46];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35 (cleanup): {
        drop(_13) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_37) -> [0: bb24, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_12) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_11) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_10) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_9) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_8) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_7) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_6) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_5) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_4) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_3) -> [return: bb34, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 12];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 12] = {
    let mut _0: &[wasmer_types::Type; 12];
    let mut _1: [wasmer_types::Type; 12];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _14: &Func;
    let _15: &Func;
    let _16: *const Func;
    let mut _17: *const ();
    let mut _19: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _20: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _21: &&Func;
    let mut _22: isize;
    let mut _23: isize;
    let mut _26: !;
    let mut _27: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _28: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _30: !;
    let mut _32: isize;
    scope 1 {
        debug func => _14;
        let _18: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _18;
            let _24: Rets;
            let _25: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _29: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _24;
            }
            scope 5 {
                debug trap => _25;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _29;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _31: &();
    }

    bb0: {
        _31 = const _;
        _17 = &raw const (*_31);
        _16 = move _17 as *const Func (PtrToPtr);
        _15 = &(*_16);
        _14 = _15;
        _21 = &_14;
        _20 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _21, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13 };
        _19 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _20);
        _18 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _19) -> [return: bb1, unwind continue];
    }

    bb1: {
        _23 = discriminant(_18);
        switchInt(move _23) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _22 = discriminant(((_18 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _22) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _29 = move ((_18 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _30 = resume_panic(move _29) -> unwind continue;
    }

    bb5: {
        _24 = move ((((_18 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _24) -> [return: bb6, unwind continue];
    }

    bb6: {
        _32 = discriminant(_18);
        switchInt(move _32) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _25 = move ((((_18 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _28 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        _27 = move _28 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _26 = raise_user_trap(move _27) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: &&Func;
    let mut _29: &Func;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;

    bb0: {
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _41 = const true;
        _42 = const true;
        _43 = const true;
        _44 = const true;
        _45 = const true;
        _46 = const true;
        _47 = const true;
        _48 = const true;
        _49 = const true;
        _50 = const true;
        _51 = const true;
        _28 = deref_copy (_1.0: &&Func);
        _29 = deref_copy (*_28);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb59];
    }

    bb1: {
        _40 = const true;
        _51 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        _39 = const true;
        _50 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb35];
    }

    bb3: {
        _38 = const true;
        _49 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _37 = const true;
        _48 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb31];
    }

    bb5: {
        _36 = const true;
        _47 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        _35 = const true;
        _46 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb27];
    }

    bb7: {
        _34 = const true;
        _45 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _33 = const true;
        _44 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb23];
    }

    bb9: {
        _32 = const true;
        _43 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        _31 = const true;
        _42 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _30 = const true;
        _41 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)>>::call(_29, move _3) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _30 = const false;
        _31 = const false;
        _32 = const false;
        _33 = const false;
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb14, unwind: bb59];
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        drop(_24) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_30) -> [0: bb19, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_22) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_31) -> [0: bb21, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_20) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_32) -> [0: bb23, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_18) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_33) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_16) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_34) -> [0: bb27, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_14) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_35) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_12) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_36) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_10) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_37) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_8) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_38) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_6) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_39) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_4) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_40) -> [0: bb59, otherwise: bb36];
    }

    bb38 (cleanup): {
        switchInt(_41) -> [0: bb15, otherwise: bb39];
    }

    bb39 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_42) -> [0: bb38, otherwise: bb41];
    }

    bb41 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_43) -> [0: bb40, otherwise: bb43];
    }

    bb43 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_44) -> [0: bb42, otherwise: bb45];
    }

    bb45 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_45) -> [0: bb44, otherwise: bb47];
    }

    bb47 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_46) -> [0: bb46, otherwise: bb49];
    }

    bb49 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_47) -> [0: bb48, otherwise: bb51];
    }

    bb51 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_48) -> [0: bb50, otherwise: bb53];
    }

    bb53 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_49) -> [0: bb52, otherwise: bb55];
    }

    bb55 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_50) -> [0: bb54, otherwise: bb57];
    }

    bb57 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_51) -> [0: bb56, otherwise: bb58];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _14: &Func;
    let _15: &Func;
    let _16: *const Func;
    let mut _17: *const ();
    let mut _19: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _20: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _21: &&Func;
    let mut _22: &&Env;
    let mut _23: isize;
    let mut _24: isize;
    let mut _27: !;
    let mut _28: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _29: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _31: !;
    let mut _33: isize;
    scope 1 {
        debug func => _14;
        let _18: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _18;
            let _25: Rets;
            let _26: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _30: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _25;
            }
            scope 5 {
                debug trap => _26;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _30;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _32: &();
    }

    bb0: {
        _32 = const _;
        _17 = &raw const (*_32);
        _16 = move _17 as *const Func (PtrToPtr);
        _15 = &(*_16);
        _14 = _15;
        _21 = &_14;
        _22 = &_1;
        _20 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _21, env: move _22, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13 };
        _19 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _20);
        _18 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _19) -> [return: bb1, unwind continue];
    }

    bb1: {
        _24 = discriminant(_18);
        switchInt(move _24) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _23 = discriminant(((_18 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _23) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _30 = move ((_18 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _31 = resume_panic(move _30) -> unwind continue;
    }

    bb5: {
        _25 = move ((((_18 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _25) -> [return: bb6, unwind continue];
    }

    bb6: {
        _33 = discriminant(_18);
        switchInt(move _33) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _26 = move ((((_18 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _29 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        _28 = move _29 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _27 = raise_user_trap(move _28) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: &&Func;
    let mut _29: &Func;
    let mut _30: &&Env;
    let mut _31: &Env;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;

    bb0: {
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _43 = const true;
        _44 = const true;
        _45 = const true;
        _46 = const true;
        _47 = const true;
        _48 = const true;
        _49 = const true;
        _50 = const true;
        _51 = const true;
        _52 = const true;
        _53 = const true;
        _28 = deref_copy (_1.0: &&Func);
        _29 = deref_copy (*_28);
        _30 = deref_copy (_1.1: &&Env);
        _31 = deref_copy (*_30);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb59];
    }

    bb1: {
        _42 = const true;
        _53 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        _41 = const true;
        _52 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb35];
    }

    bb3: {
        _40 = const true;
        _51 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _39 = const true;
        _50 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb31];
    }

    bb5: {
        _38 = const true;
        _49 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        _37 = const true;
        _48 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb27];
    }

    bb7: {
        _36 = const true;
        _47 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _35 = const true;
        _46 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb23];
    }

    bb9: {
        _34 = const true;
        _45 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        _33 = const true;
        _44 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _32 = const true;
        _43 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _3 = (_31, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)>>::call(_29, move _3) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _32 = const false;
        _33 = const false;
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb14, unwind: bb59];
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        drop(_24) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_32) -> [0: bb19, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_22) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_33) -> [0: bb21, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_20) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_34) -> [0: bb23, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_18) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_35) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_16) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_36) -> [0: bb27, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_14) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_37) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_12) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_38) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_10) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_39) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_8) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_40) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_6) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_41) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_4) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_42) -> [0: bb59, otherwise: bb36];
    }

    bb38 (cleanup): {
        switchInt(_43) -> [0: bb15, otherwise: bb39];
    }

    bb39 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_44) -> [0: bb38, otherwise: bb41];
    }

    bb41 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_45) -> [0: bb40, otherwise: bb43];
    }

    bb43 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_46) -> [0: bb42, otherwise: bb45];
    }

    bb45 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_47) -> [0: bb44, otherwise: bb47];
    }

    bb47 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_48) -> [0: bb46, otherwise: bb49];
    }

    bb49 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_49) -> [0: bb48, otherwise: bb51];
    }

    bb51 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_50) -> [0: bb50, otherwise: bb53];
    }

    bb53 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_51) -> [0: bb52, otherwise: bb55];
    }

    bb55 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_52) -> [0: bb54, otherwise: bb57];
    }

    bb57 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_53) -> [0: bb56, otherwise: bb58];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 13_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 13]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13);
    let mut _15: A1;
    let mut _16: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A2;
    let mut _18: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A3;
    let mut _20: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A4;
    let mut _22: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A5;
    let mut _24: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A6;
    let mut _26: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A7;
    let mut _28: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A8;
    let mut _30: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A9;
    let mut _32: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A10;
    let mut _34: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A11;
    let mut _36: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A12;
    let mut _38: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A13;
    let mut _40: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
    }

    bb0: {
        _2 = _1[0 of 13];
        _3 = _1[1 of 13];
        _4 = _1[2 of 13];
        _5 = _1[3 of 13];
        _6 = _1[4 of 13];
        _7 = _1[5 of 13];
        _8 = _1[6 of 13];
        _9 = _1[7 of 13];
        _10 = _1[8 of 13];
        _11 = _1[9 of 13];
        _12 = _1[10 of 13];
        _13 = _1[11 of 13];
        _14 = _1[12 of 13];
        _16 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _15 = <A1 as FromToNativeWasmType>::from_native(move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        _18 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb38];
    }

    bb3: {
        _17 = <A2 as FromToNativeWasmType>::from_native(move _18) -> [return: bb4, unwind: bb38];
    }

    bb4: {
        _20 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb37];
    }

    bb5: {
        _19 = <A3 as FromToNativeWasmType>::from_native(move _20) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        _22 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb36];
    }

    bb7: {
        _21 = <A4 as FromToNativeWasmType>::from_native(move _22) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        _24 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb35];
    }

    bb9: {
        _23 = <A5 as FromToNativeWasmType>::from_native(move _24) -> [return: bb10, unwind: bb35];
    }

    bb10: {
        _26 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb34];
    }

    bb11: {
        _25 = <A6 as FromToNativeWasmType>::from_native(move _26) -> [return: bb12, unwind: bb34];
    }

    bb12: {
        _28 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb33];
    }

    bb13: {
        _27 = <A7 as FromToNativeWasmType>::from_native(move _28) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        _30 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _29 = <A8 as FromToNativeWasmType>::from_native(move _30) -> [return: bb16, unwind: bb32];
    }

    bb16: {
        _32 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        _31 = <A9 as FromToNativeWasmType>::from_native(move _32) -> [return: bb18, unwind: bb31];
    }

    bb18: {
        _34 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _33 = <A10 as FromToNativeWasmType>::from_native(move _34) -> [return: bb20, unwind: bb30];
    }

    bb20: {
        _36 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        _35 = <A11 as FromToNativeWasmType>::from_native(move _36) -> [return: bb22, unwind: bb29];
    }

    bb22: {
        _38 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        _37 = <A12 as FromToNativeWasmType>::from_native(move _38) -> [return: bb24, unwind: bb28];
    }

    bb24: {
        _40 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb27];
    }

    bb25: {
        _39 = <A13 as FromToNativeWasmType>::from_native(move _40) -> [return: bb26, unwind: bb27];
    }

    bb26: {
        _0 = (move _15, move _17, move _19, move _21, move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39);
        return;
    }

    bb27 (cleanup): {
        drop(_37) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_35) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_33) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_31) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_29) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_27) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_25) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_23) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_21) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_19) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_17) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_15) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 13]>;
    let mut _4: std::result::Result<[i128; 13], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 13];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 13]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 13], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 13]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)) -> [i128; 13] {
    debug self => _1;
    let mut _0: [i128; 13];
    let mut _15: i128;
    let mut _16: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: i128;
    let mut _18: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A2;
    let mut _20: i128;
    let mut _21: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A3;
    let mut _23: i128;
    let mut _24: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A4;
    let mut _26: i128;
    let mut _27: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A5;
    let mut _29: i128;
    let mut _30: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A6;
    let mut _32: i128;
    let mut _33: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A7;
    let mut _35: i128;
    let mut _36: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A8;
    let mut _38: i128;
    let mut _39: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A9;
    let mut _41: i128;
    let mut _42: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A10;
    let mut _44: i128;
    let mut _45: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A11;
    let mut _47: i128;
    let mut _48: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A12;
    let mut _50: i128;
    let mut _51: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A13;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
    }

    bb0: {
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _2 = move (_1.0: A1);
        _64 = const true;
        _3 = move (_1.1: A2);
        _63 = const true;
        _4 = move (_1.2: A3);
        _62 = const true;
        _5 = move (_1.3: A4);
        _61 = const true;
        _6 = move (_1.4: A5);
        _60 = const true;
        _7 = move (_1.5: A6);
        _59 = const true;
        _8 = move (_1.6: A7);
        _58 = const true;
        _9 = move (_1.7: A8);
        _57 = const true;
        _10 = move (_1.8: A9);
        _56 = const true;
        _11 = move (_1.9: A10);
        _55 = const true;
        _12 = move (_1.10: A11);
        _54 = const true;
        _13 = move (_1.11: A12);
        _53 = const true;
        _14 = move (_1.12: A13);
        _16 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb40];
    }

    bb1: {
        _15 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _16) -> [return: bb2, unwind: bb40];
    }

    bb2: {
        _64 = const false;
        _19 = move _3;
        _18 = <A2 as FromToNativeWasmType>::to_native(move _19) -> [return: bb3, unwind: bb40];
    }

    bb3: {
        _17 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _18) -> [return: bb4, unwind: bb40];
    }

    bb4: {
        _63 = const false;
        _22 = move _4;
        _21 = <A3 as FromToNativeWasmType>::to_native(move _22) -> [return: bb5, unwind: bb40];
    }

    bb5: {
        _20 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _21) -> [return: bb6, unwind: bb40];
    }

    bb6: {
        _62 = const false;
        _25 = move _5;
        _24 = <A4 as FromToNativeWasmType>::to_native(move _25) -> [return: bb7, unwind: bb40];
    }

    bb7: {
        _23 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _24) -> [return: bb8, unwind: bb40];
    }

    bb8: {
        _61 = const false;
        _28 = move _6;
        _27 = <A5 as FromToNativeWasmType>::to_native(move _28) -> [return: bb9, unwind: bb40];
    }

    bb9: {
        _26 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _27) -> [return: bb10, unwind: bb40];
    }

    bb10: {
        _60 = const false;
        _31 = move _7;
        _30 = <A6 as FromToNativeWasmType>::to_native(move _31) -> [return: bb11, unwind: bb40];
    }

    bb11: {
        _29 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _30) -> [return: bb12, unwind: bb40];
    }

    bb12: {
        _59 = const false;
        _34 = move _8;
        _33 = <A7 as FromToNativeWasmType>::to_native(move _34) -> [return: bb13, unwind: bb40];
    }

    bb13: {
        _32 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _33) -> [return: bb14, unwind: bb40];
    }

    bb14: {
        _58 = const false;
        _37 = move _9;
        _36 = <A8 as FromToNativeWasmType>::to_native(move _37) -> [return: bb15, unwind: bb40];
    }

    bb15: {
        _35 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _36) -> [return: bb16, unwind: bb40];
    }

    bb16: {
        _57 = const false;
        _40 = move _10;
        _39 = <A9 as FromToNativeWasmType>::to_native(move _40) -> [return: bb17, unwind: bb40];
    }

    bb17: {
        _38 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _39) -> [return: bb18, unwind: bb40];
    }

    bb18: {
        _56 = const false;
        _43 = move _11;
        _42 = <A10 as FromToNativeWasmType>::to_native(move _43) -> [return: bb19, unwind: bb40];
    }

    bb19: {
        _41 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _42) -> [return: bb20, unwind: bb40];
    }

    bb20: {
        _55 = const false;
        _46 = move _12;
        _45 = <A11 as FromToNativeWasmType>::to_native(move _46) -> [return: bb21, unwind: bb40];
    }

    bb21: {
        _44 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _45) -> [return: bb22, unwind: bb40];
    }

    bb22: {
        _54 = const false;
        _49 = move _13;
        _48 = <A12 as FromToNativeWasmType>::to_native(move _49) -> [return: bb23, unwind: bb40];
    }

    bb23: {
        _47 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _48) -> [return: bb24, unwind: bb40];
    }

    bb24: {
        _53 = const false;
        _52 = move _14;
        _51 = <A13 as FromToNativeWasmType>::to_native(move _52) -> [return: bb25, unwind: bb40];
    }

    bb25: {
        _50 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _51) -> [return: bb26, unwind: bb40];
    }

    bb26: {
        _0 = [move _15, move _17, move _20, move _23, move _26, move _29, move _32, move _35, move _38, move _41, move _44, move _47, move _50];
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        return;
    }

    bb27 (cleanup): {
        switchInt(_54) -> [0: bb28, otherwise: bb41];
    }

    bb28 (cleanup): {
        switchInt(_55) -> [0: bb29, otherwise: bb42];
    }

    bb29 (cleanup): {
        switchInt(_56) -> [0: bb30, otherwise: bb43];
    }

    bb30 (cleanup): {
        switchInt(_57) -> [0: bb31, otherwise: bb44];
    }

    bb31 (cleanup): {
        switchInt(_58) -> [0: bb32, otherwise: bb45];
    }

    bb32 (cleanup): {
        switchInt(_59) -> [0: bb33, otherwise: bb46];
    }

    bb33 (cleanup): {
        switchInt(_60) -> [0: bb34, otherwise: bb47];
    }

    bb34 (cleanup): {
        switchInt(_61) -> [0: bb35, otherwise: bb48];
    }

    bb35 (cleanup): {
        switchInt(_62) -> [0: bb36, otherwise: bb49];
    }

    bb36 (cleanup): {
        switchInt(_63) -> [0: bb37, otherwise: bb50];
    }

    bb37 (cleanup): {
        switchInt(_64) -> [0: bb38, otherwise: bb51];
    }

    bb38 (cleanup): {
        resume;
    }

    bb39 (cleanup): {
        drop(_14) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_53) -> [0: bb27, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_13) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_12) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_11) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_10) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_9) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_8) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_7) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_6) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_5) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_4) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_3) -> [return: bb38, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 13] {
    let mut _0: [i128; 13];

    bb0: {
        _0 = [const 0_i128; 13];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 13_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S13<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13);
    let mut _15: A1;
    let mut _16: A2;
    let mut _17: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A3;
    let mut _19: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A4;
    let mut _21: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A5;
    let mut _23: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A6;
    let mut _25: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A7;
    let mut _27: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A8;
    let mut _29: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A9;
    let mut _31: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A10;
    let mut _33: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A11;
    let mut _35: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A12;
    let mut _37: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A13;
    let mut _39: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _51 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _50 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _49 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _48 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _47 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _45 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _43 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _41 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _15 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb39];
    }

    bb1: {
        _51 = const false;
        _17 = move _3;
        _16 = <A2 as FromToNativeWasmType>::from_native(move _17) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        _50 = const false;
        _19 = move _4;
        _18 = <A3 as FromToNativeWasmType>::from_native(move _19) -> [return: bb3, unwind: bb24];
    }

    bb3: {
        _49 = const false;
        _21 = move _5;
        _20 = <A4 as FromToNativeWasmType>::from_native(move _21) -> [return: bb4, unwind: bb23];
    }

    bb4: {
        _48 = const false;
        _23 = move _6;
        _22 = <A5 as FromToNativeWasmType>::from_native(move _23) -> [return: bb5, unwind: bb22];
    }

    bb5: {
        _47 = const false;
        _25 = move _7;
        _24 = <A6 as FromToNativeWasmType>::from_native(move _25) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _46 = const false;
        _27 = move _8;
        _26 = <A7 as FromToNativeWasmType>::from_native(move _27) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        _45 = const false;
        _29 = move _9;
        _28 = <A8 as FromToNativeWasmType>::from_native(move _29) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _44 = const false;
        _31 = move _10;
        _30 = <A9 as FromToNativeWasmType>::from_native(move _31) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _43 = const false;
        _33 = move _11;
        _32 = <A10 as FromToNativeWasmType>::from_native(move _33) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _42 = const false;
        _35 = move _12;
        _34 = <A11 as FromToNativeWasmType>::from_native(move _35) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _41 = const false;
        _37 = move _13;
        _36 = <A12 as FromToNativeWasmType>::from_native(move _37) -> [return: bb12, unwind: bb15];
    }

    bb12: {
        _40 = const false;
        _39 = move _14;
        _38 = <A13 as FromToNativeWasmType>::from_native(move _39) -> [return: bb13, unwind: bb14];
    }

    bb13: {
        _0 = (move _15, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38);
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        return;
    }

    bb14 (cleanup): {
        drop(_36) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_34) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_32) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_30) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_28) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_26) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_24) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_22) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_20) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_18) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_16) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_15) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_41) -> [0: bb27, otherwise: bb40];
    }

    bb27 (cleanup): {
        switchInt(_42) -> [0: bb28, otherwise: bb41];
    }

    bb28 (cleanup): {
        switchInt(_43) -> [0: bb29, otherwise: bb42];
    }

    bb29 (cleanup): {
        switchInt(_44) -> [0: bb30, otherwise: bb43];
    }

    bb30 (cleanup): {
        switchInt(_45) -> [0: bb31, otherwise: bb44];
    }

    bb31 (cleanup): {
        switchInt(_46) -> [0: bb32, otherwise: bb45];
    }

    bb32 (cleanup): {
        switchInt(_47) -> [0: bb33, otherwise: bb46];
    }

    bb33 (cleanup): {
        switchInt(_48) -> [0: bb34, otherwise: bb47];
    }

    bb34 (cleanup): {
        switchInt(_49) -> [0: bb35, otherwise: bb48];
    }

    bb35 (cleanup): {
        switchInt(_50) -> [0: bb36, otherwise: bb49];
    }

    bb36 (cleanup): {
        switchInt(_51) -> [0: bb37, otherwise: bb50];
    }

    bb37 (cleanup): {
        resume;
    }

    bb38 (cleanup): {
        drop(_14) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_40) -> [0: bb26, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_13) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_12) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_11) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_10) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_9) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_8) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_7) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_6) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_5) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_4) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_3) -> [return: bb37, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)) -> S13<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13> {
    debug self => _1;
    let mut _0: externals::function::inner::S13<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let mut _15: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A2;
    let mut _18: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A3;
    let mut _20: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A4;
    let mut _22: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A5;
    let mut _24: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A6;
    let mut _26: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A7;
    let mut _28: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A8;
    let mut _30: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A9;
    let mut _32: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A10;
    let mut _34: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A11;
    let mut _36: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A12;
    let mut _38: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A13;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
    }

    bb0: {
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _2 = move (_1.0: A1);
        _51 = const true;
        _3 = move (_1.1: A2);
        _50 = const true;
        _4 = move (_1.2: A3);
        _49 = const true;
        _5 = move (_1.3: A4);
        _48 = const true;
        _6 = move (_1.4: A5);
        _47 = const true;
        _7 = move (_1.5: A6);
        _46 = const true;
        _8 = move (_1.6: A7);
        _45 = const true;
        _9 = move (_1.7: A8);
        _44 = const true;
        _10 = move (_1.8: A9);
        _43 = const true;
        _11 = move (_1.9: A10);
        _42 = const true;
        _12 = move (_1.10: A11);
        _41 = const true;
        _13 = move (_1.11: A12);
        _40 = const true;
        _14 = move (_1.12: A13);
        _15 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb39];
    }

    bb1: {
        _51 = const false;
        _17 = move _3;
        _16 = <A2 as FromToNativeWasmType>::to_native(move _17) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        _50 = const false;
        _19 = move _4;
        _18 = <A3 as FromToNativeWasmType>::to_native(move _19) -> [return: bb3, unwind: bb24];
    }

    bb3: {
        _49 = const false;
        _21 = move _5;
        _20 = <A4 as FromToNativeWasmType>::to_native(move _21) -> [return: bb4, unwind: bb23];
    }

    bb4: {
        _48 = const false;
        _23 = move _6;
        _22 = <A5 as FromToNativeWasmType>::to_native(move _23) -> [return: bb5, unwind: bb22];
    }

    bb5: {
        _47 = const false;
        _25 = move _7;
        _24 = <A6 as FromToNativeWasmType>::to_native(move _25) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _46 = const false;
        _27 = move _8;
        _26 = <A7 as FromToNativeWasmType>::to_native(move _27) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        _45 = const false;
        _29 = move _9;
        _28 = <A8 as FromToNativeWasmType>::to_native(move _29) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _44 = const false;
        _31 = move _10;
        _30 = <A9 as FromToNativeWasmType>::to_native(move _31) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _43 = const false;
        _33 = move _11;
        _32 = <A10 as FromToNativeWasmType>::to_native(move _33) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _42 = const false;
        _35 = move _12;
        _34 = <A11 as FromToNativeWasmType>::to_native(move _35) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _41 = const false;
        _37 = move _13;
        _36 = <A12 as FromToNativeWasmType>::to_native(move _37) -> [return: bb12, unwind: bb15];
    }

    bb12: {
        _40 = const false;
        _39 = move _14;
        _38 = <A13 as FromToNativeWasmType>::to_native(move _39) -> [return: bb13, unwind: bb14];
    }

    bb13: {
        _0 = S13::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>(move _15, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38);
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        return;
    }

    bb14 (cleanup): {
        drop(_36) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_34) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_32) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_30) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_28) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_26) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_24) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_22) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_20) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_18) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_16) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_15) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_41) -> [0: bb27, otherwise: bb40];
    }

    bb27 (cleanup): {
        switchInt(_42) -> [0: bb28, otherwise: bb41];
    }

    bb28 (cleanup): {
        switchInt(_43) -> [0: bb29, otherwise: bb42];
    }

    bb29 (cleanup): {
        switchInt(_44) -> [0: bb30, otherwise: bb43];
    }

    bb30 (cleanup): {
        switchInt(_45) -> [0: bb31, otherwise: bb44];
    }

    bb31 (cleanup): {
        switchInt(_46) -> [0: bb32, otherwise: bb45];
    }

    bb32 (cleanup): {
        switchInt(_47) -> [0: bb33, otherwise: bb46];
    }

    bb33 (cleanup): {
        switchInt(_48) -> [0: bb34, otherwise: bb47];
    }

    bb34 (cleanup): {
        switchInt(_49) -> [0: bb35, otherwise: bb48];
    }

    bb35 (cleanup): {
        switchInt(_50) -> [0: bb36, otherwise: bb49];
    }

    bb36 (cleanup): {
        switchInt(_51) -> [0: bb37, otherwise: bb50];
    }

    bb37 (cleanup): {
        resume;
    }

    bb38 (cleanup): {
        drop(_14) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_40) -> [0: bb26, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_13) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_12) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_11) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_10) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_9) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_8) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_7) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_6) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_5) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_4) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_3) -> [return: bb37, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 13];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 13] = {
    let mut _0: &[wasmer_types::Type; 13];
    let mut _1: [wasmer_types::Type; 13];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _15: &Func;
    let _16: &Func;
    let _17: *const Func;
    let mut _18: *const ();
    let mut _20: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _21: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _22: &&Func;
    let mut _23: isize;
    let mut _24: isize;
    let mut _27: !;
    let mut _28: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _29: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _31: !;
    let mut _33: isize;
    scope 1 {
        debug func => _15;
        let _19: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _19;
            let _25: Rets;
            let _26: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _30: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _25;
            }
            scope 5 {
                debug trap => _26;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _30;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _32: &();
    }

    bb0: {
        _32 = const _;
        _18 = &raw const (*_32);
        _17 = move _18 as *const Func (PtrToPtr);
        _16 = &(*_17);
        _15 = _16;
        _22 = &_15;
        _21 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _22, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14 };
        _20 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _21);
        _19 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _20) -> [return: bb1, unwind continue];
    }

    bb1: {
        _24 = discriminant(_19);
        switchInt(move _24) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _23 = discriminant(((_19 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _23) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _30 = move ((_19 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _31 = resume_panic(move _30) -> unwind continue;
    }

    bb5: {
        _25 = move ((((_19 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _25) -> [return: bb6, unwind continue];
    }

    bb6: {
        _33 = discriminant(_19);
        switchInt(move _33) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _26 = move ((((_19 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _29 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        _28 = move _29 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _27 = raise_user_trap(move _28) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: &&Func;
    let mut _31: &Func;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;

    bb0: {
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _44 = const true;
        _45 = const true;
        _46 = const true;
        _47 = const true;
        _48 = const true;
        _49 = const true;
        _50 = const true;
        _51 = const true;
        _52 = const true;
        _53 = const true;
        _54 = const true;
        _55 = const true;
        _30 = deref_copy (_1.0: &&Func);
        _31 = deref_copy (*_30);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb64];
    }

    bb1: {
        _43 = const true;
        _55 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb40];
    }

    bb2: {
        _42 = const true;
        _54 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb38];
    }

    bb3: {
        _41 = const true;
        _53 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        _40 = const true;
        _52 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        _39 = const true;
        _51 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb32];
    }

    bb6: {
        _38 = const true;
        _50 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        _37 = const true;
        _49 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb28];
    }

    bb8: {
        _36 = const true;
        _48 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        _35 = const true;
        _47 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        _34 = const true;
        _46 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _33 = const true;
        _45 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        _32 = const true;
        _44 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)>>::call(_31, move _3) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        _32 = const false;
        _33 = const false;
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb15, unwind: bb64];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        resume;
    }

    bb17 (cleanup): {
        drop(_26) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_32) -> [0: bb20, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_24) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_33) -> [0: bb22, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_22) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_34) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_20) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_35) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_18) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_36) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_16) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_37) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_14) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_38) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_12) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_39) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_10) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_40) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_8) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_41) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_6) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_42) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_4) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_43) -> [0: bb64, otherwise: bb39];
    }

    bb41 (cleanup): {
        switchInt(_44) -> [0: bb16, otherwise: bb42];
    }

    bb42 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_45) -> [0: bb41, otherwise: bb44];
    }

    bb44 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_46) -> [0: bb43, otherwise: bb46];
    }

    bb46 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_47) -> [0: bb45, otherwise: bb48];
    }

    bb48 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_48) -> [0: bb47, otherwise: bb50];
    }

    bb50 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_49) -> [0: bb49, otherwise: bb52];
    }

    bb52 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_50) -> [0: bb51, otherwise: bb54];
    }

    bb54 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_51) -> [0: bb53, otherwise: bb56];
    }

    bb56 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_52) -> [0: bb55, otherwise: bb58];
    }

    bb58 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_53) -> [0: bb57, otherwise: bb60];
    }

    bb60 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_54) -> [0: bb59, otherwise: bb62];
    }

    bb62 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_55) -> [0: bb61, otherwise: bb63];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _15: &Func;
    let _16: &Func;
    let _17: *const Func;
    let mut _18: *const ();
    let mut _20: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _21: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _22: &&Func;
    let mut _23: &&Env;
    let mut _24: isize;
    let mut _25: isize;
    let mut _28: !;
    let mut _29: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _30: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _32: !;
    let mut _34: isize;
    scope 1 {
        debug func => _15;
        let _19: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _19;
            let _26: Rets;
            let _27: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _31: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _26;
            }
            scope 5 {
                debug trap => _27;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _31;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _33: &();
    }

    bb0: {
        _33 = const _;
        _18 = &raw const (*_33);
        _17 = move _18 as *const Func (PtrToPtr);
        _16 = &(*_17);
        _15 = _16;
        _22 = &_15;
        _23 = &_1;
        _21 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _22, env: move _23, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14 };
        _20 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _21);
        _19 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _20) -> [return: bb1, unwind continue];
    }

    bb1: {
        _25 = discriminant(_19);
        switchInt(move _25) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _24 = discriminant(((_19 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _24) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _31 = move ((_19 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _32 = resume_panic(move _31) -> unwind continue;
    }

    bb5: {
        _26 = move ((((_19 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _26) -> [return: bb6, unwind continue];
    }

    bb6: {
        _34 = discriminant(_19);
        switchInt(move _34) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _27 = move ((((_19 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _30 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _27) -> [return: bb8, unwind continue];
    }

    bb8: {
        _29 = move _30 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _28 = raise_user_trap(move _29) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: &&Func;
    let mut _31: &Func;
    let mut _32: &&Env;
    let mut _33: &Env;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;

    bb0: {
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _46 = const true;
        _47 = const true;
        _48 = const true;
        _49 = const true;
        _50 = const true;
        _51 = const true;
        _52 = const true;
        _53 = const true;
        _54 = const true;
        _55 = const true;
        _56 = const true;
        _57 = const true;
        _30 = deref_copy (_1.0: &&Func);
        _31 = deref_copy (*_30);
        _32 = deref_copy (_1.1: &&Env);
        _33 = deref_copy (*_32);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb64];
    }

    bb1: {
        _45 = const true;
        _57 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb40];
    }

    bb2: {
        _44 = const true;
        _56 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb38];
    }

    bb3: {
        _43 = const true;
        _55 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        _42 = const true;
        _54 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        _41 = const true;
        _53 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb32];
    }

    bb6: {
        _40 = const true;
        _52 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        _39 = const true;
        _51 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb28];
    }

    bb8: {
        _38 = const true;
        _50 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        _37 = const true;
        _49 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        _36 = const true;
        _48 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _35 = const true;
        _47 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        _34 = const true;
        _46 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _3 = (_33, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)>>::call(_31, move _3) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb15, unwind: bb64];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        resume;
    }

    bb17 (cleanup): {
        drop(_26) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_34) -> [0: bb20, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_24) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_35) -> [0: bb22, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_22) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_36) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_20) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_37) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_18) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_38) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_16) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_39) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_14) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_40) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_12) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_41) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_10) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_42) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_8) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_43) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_6) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_44) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_4) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_45) -> [0: bb64, otherwise: bb39];
    }

    bb41 (cleanup): {
        switchInt(_46) -> [0: bb16, otherwise: bb42];
    }

    bb42 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_47) -> [0: bb41, otherwise: bb44];
    }

    bb44 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_48) -> [0: bb43, otherwise: bb46];
    }

    bb46 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_49) -> [0: bb45, otherwise: bb48];
    }

    bb48 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_50) -> [0: bb47, otherwise: bb50];
    }

    bb50 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_51) -> [0: bb49, otherwise: bb52];
    }

    bb52 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_52) -> [0: bb51, otherwise: bb54];
    }

    bb54 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_53) -> [0: bb53, otherwise: bb56];
    }

    bb56 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_54) -> [0: bb55, otherwise: bb58];
    }

    bb58 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_55) -> [0: bb57, otherwise: bb60];
    }

    bb60 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_56) -> [0: bb59, otherwise: bb62];
    }

    bb62 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_57) -> [0: bb61, otherwise: bb63];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 14_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 14]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14);
    let mut _16: A1;
    let mut _17: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A2;
    let mut _19: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A3;
    let mut _21: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A4;
    let mut _23: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A5;
    let mut _25: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A6;
    let mut _27: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A7;
    let mut _29: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A8;
    let mut _31: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A9;
    let mut _33: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A10;
    let mut _35: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A11;
    let mut _37: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A12;
    let mut _39: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A13;
    let mut _41: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A14;
    let mut _43: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
    }

    bb0: {
        _2 = _1[0 of 14];
        _3 = _1[1 of 14];
        _4 = _1[2 of 14];
        _5 = _1[3 of 14];
        _6 = _1[4 of 14];
        _7 = _1[5 of 14];
        _8 = _1[6 of 14];
        _9 = _1[7 of 14];
        _10 = _1[8 of 14];
        _11 = _1[9 of 14];
        _12 = _1[10 of 14];
        _13 = _1[11 of 14];
        _14 = _1[12 of 14];
        _15 = _1[13 of 14];
        _17 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _16 = <A1 as FromToNativeWasmType>::from_native(move _17) -> [return: bb2, unwind continue];
    }

    bb2: {
        _19 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb41];
    }

    bb3: {
        _18 = <A2 as FromToNativeWasmType>::from_native(move _19) -> [return: bb4, unwind: bb41];
    }

    bb4: {
        _21 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb40];
    }

    bb5: {
        _20 = <A3 as FromToNativeWasmType>::from_native(move _21) -> [return: bb6, unwind: bb40];
    }

    bb6: {
        _23 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb39];
    }

    bb7: {
        _22 = <A4 as FromToNativeWasmType>::from_native(move _23) -> [return: bb8, unwind: bb39];
    }

    bb8: {
        _25 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb38];
    }

    bb9: {
        _24 = <A5 as FromToNativeWasmType>::from_native(move _25) -> [return: bb10, unwind: bb38];
    }

    bb10: {
        _27 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb37];
    }

    bb11: {
        _26 = <A6 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb37];
    }

    bb12: {
        _29 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        _28 = <A7 as FromToNativeWasmType>::from_native(move _29) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        _31 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb35];
    }

    bb15: {
        _30 = <A8 as FromToNativeWasmType>::from_native(move _31) -> [return: bb16, unwind: bb35];
    }

    bb16: {
        _33 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        _32 = <A9 as FromToNativeWasmType>::from_native(move _33) -> [return: bb18, unwind: bb34];
    }

    bb18: {
        _35 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb33];
    }

    bb19: {
        _34 = <A10 as FromToNativeWasmType>::from_native(move _35) -> [return: bb20, unwind: bb33];
    }

    bb20: {
        _37 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _36 = <A11 as FromToNativeWasmType>::from_native(move _37) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        _39 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _38 = <A12 as FromToNativeWasmType>::from_native(move _39) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        _41 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb30];
    }

    bb25: {
        _40 = <A13 as FromToNativeWasmType>::from_native(move _41) -> [return: bb26, unwind: bb30];
    }

    bb26: {
        _43 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb29];
    }

    bb27: {
        _42 = <A14 as FromToNativeWasmType>::from_native(move _43) -> [return: bb28, unwind: bb29];
    }

    bb28: {
        _0 = (move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42);
        return;
    }

    bb29 (cleanup): {
        drop(_40) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_38) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_36) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_34) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_32) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_30) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_28) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_26) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_24) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_22) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_20) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_18) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_16) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 14]>;
    let mut _4: std::result::Result<[i128; 14], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 14];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 14]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 14], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 14]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)) -> [i128; 14] {
    debug self => _1;
    let mut _0: [i128; 14];
    let mut _16: i128;
    let mut _17: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: i128;
    let mut _19: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A2;
    let mut _21: i128;
    let mut _22: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A3;
    let mut _24: i128;
    let mut _25: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A4;
    let mut _27: i128;
    let mut _28: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A5;
    let mut _30: i128;
    let mut _31: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A6;
    let mut _33: i128;
    let mut _34: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A7;
    let mut _36: i128;
    let mut _37: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A8;
    let mut _39: i128;
    let mut _40: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A9;
    let mut _42: i128;
    let mut _43: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A10;
    let mut _45: i128;
    let mut _46: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A11;
    let mut _48: i128;
    let mut _49: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A12;
    let mut _51: i128;
    let mut _52: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A13;
    let mut _54: i128;
    let mut _55: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A14;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
    }

    bb0: {
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _2 = move (_1.0: A1);
        _69 = const true;
        _3 = move (_1.1: A2);
        _68 = const true;
        _4 = move (_1.2: A3);
        _67 = const true;
        _5 = move (_1.3: A4);
        _66 = const true;
        _6 = move (_1.4: A5);
        _65 = const true;
        _7 = move (_1.5: A6);
        _64 = const true;
        _8 = move (_1.6: A7);
        _63 = const true;
        _9 = move (_1.7: A8);
        _62 = const true;
        _10 = move (_1.8: A9);
        _61 = const true;
        _11 = move (_1.9: A10);
        _60 = const true;
        _12 = move (_1.10: A11);
        _59 = const true;
        _13 = move (_1.11: A12);
        _58 = const true;
        _14 = move (_1.12: A13);
        _57 = const true;
        _15 = move (_1.13: A14);
        _17 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb43];
    }

    bb1: {
        _16 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _17) -> [return: bb2, unwind: bb43];
    }

    bb2: {
        _69 = const false;
        _20 = move _3;
        _19 = <A2 as FromToNativeWasmType>::to_native(move _20) -> [return: bb3, unwind: bb43];
    }

    bb3: {
        _18 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _19) -> [return: bb4, unwind: bb43];
    }

    bb4: {
        _68 = const false;
        _23 = move _4;
        _22 = <A3 as FromToNativeWasmType>::to_native(move _23) -> [return: bb5, unwind: bb43];
    }

    bb5: {
        _21 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _22) -> [return: bb6, unwind: bb43];
    }

    bb6: {
        _67 = const false;
        _26 = move _5;
        _25 = <A4 as FromToNativeWasmType>::to_native(move _26) -> [return: bb7, unwind: bb43];
    }

    bb7: {
        _24 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _25) -> [return: bb8, unwind: bb43];
    }

    bb8: {
        _66 = const false;
        _29 = move _6;
        _28 = <A5 as FromToNativeWasmType>::to_native(move _29) -> [return: bb9, unwind: bb43];
    }

    bb9: {
        _27 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _28) -> [return: bb10, unwind: bb43];
    }

    bb10: {
        _65 = const false;
        _32 = move _7;
        _31 = <A6 as FromToNativeWasmType>::to_native(move _32) -> [return: bb11, unwind: bb43];
    }

    bb11: {
        _30 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _31) -> [return: bb12, unwind: bb43];
    }

    bb12: {
        _64 = const false;
        _35 = move _8;
        _34 = <A7 as FromToNativeWasmType>::to_native(move _35) -> [return: bb13, unwind: bb43];
    }

    bb13: {
        _33 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _34) -> [return: bb14, unwind: bb43];
    }

    bb14: {
        _63 = const false;
        _38 = move _9;
        _37 = <A8 as FromToNativeWasmType>::to_native(move _38) -> [return: bb15, unwind: bb43];
    }

    bb15: {
        _36 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _37) -> [return: bb16, unwind: bb43];
    }

    bb16: {
        _62 = const false;
        _41 = move _10;
        _40 = <A9 as FromToNativeWasmType>::to_native(move _41) -> [return: bb17, unwind: bb43];
    }

    bb17: {
        _39 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _40) -> [return: bb18, unwind: bb43];
    }

    bb18: {
        _61 = const false;
        _44 = move _11;
        _43 = <A10 as FromToNativeWasmType>::to_native(move _44) -> [return: bb19, unwind: bb43];
    }

    bb19: {
        _42 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _43) -> [return: bb20, unwind: bb43];
    }

    bb20: {
        _60 = const false;
        _47 = move _12;
        _46 = <A11 as FromToNativeWasmType>::to_native(move _47) -> [return: bb21, unwind: bb43];
    }

    bb21: {
        _45 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _46) -> [return: bb22, unwind: bb43];
    }

    bb22: {
        _59 = const false;
        _50 = move _13;
        _49 = <A12 as FromToNativeWasmType>::to_native(move _50) -> [return: bb23, unwind: bb43];
    }

    bb23: {
        _48 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _49) -> [return: bb24, unwind: bb43];
    }

    bb24: {
        _58 = const false;
        _53 = move _14;
        _52 = <A13 as FromToNativeWasmType>::to_native(move _53) -> [return: bb25, unwind: bb43];
    }

    bb25: {
        _51 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _52) -> [return: bb26, unwind: bb43];
    }

    bb26: {
        _57 = const false;
        _56 = move _15;
        _55 = <A14 as FromToNativeWasmType>::to_native(move _56) -> [return: bb27, unwind: bb43];
    }

    bb27: {
        _54 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _55) -> [return: bb28, unwind: bb43];
    }

    bb28: {
        _0 = [move _16, move _18, move _21, move _24, move _27, move _30, move _33, move _36, move _39, move _42, move _45, move _48, move _51, move _54];
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        return;
    }

    bb29 (cleanup): {
        switchInt(_58) -> [0: bb30, otherwise: bb44];
    }

    bb30 (cleanup): {
        switchInt(_59) -> [0: bb31, otherwise: bb45];
    }

    bb31 (cleanup): {
        switchInt(_60) -> [0: bb32, otherwise: bb46];
    }

    bb32 (cleanup): {
        switchInt(_61) -> [0: bb33, otherwise: bb47];
    }

    bb33 (cleanup): {
        switchInt(_62) -> [0: bb34, otherwise: bb48];
    }

    bb34 (cleanup): {
        switchInt(_63) -> [0: bb35, otherwise: bb49];
    }

    bb35 (cleanup): {
        switchInt(_64) -> [0: bb36, otherwise: bb50];
    }

    bb36 (cleanup): {
        switchInt(_65) -> [0: bb37, otherwise: bb51];
    }

    bb37 (cleanup): {
        switchInt(_66) -> [0: bb38, otherwise: bb52];
    }

    bb38 (cleanup): {
        switchInt(_67) -> [0: bb39, otherwise: bb53];
    }

    bb39 (cleanup): {
        switchInt(_68) -> [0: bb40, otherwise: bb54];
    }

    bb40 (cleanup): {
        switchInt(_69) -> [0: bb41, otherwise: bb55];
    }

    bb41 (cleanup): {
        resume;
    }

    bb42 (cleanup): {
        drop(_15) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_57) -> [0: bb29, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_14) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_13) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_12) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_11) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_10) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_9) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_8) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_7) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_6) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_5) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_4) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_3) -> [return: bb41, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 14] {
    let mut _0: [i128; 14];

    bb0: {
        _0 = [const 0_i128; 14];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 14_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S14<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14);
    let mut _16: A1;
    let mut _17: A2;
    let mut _18: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A3;
    let mut _20: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A4;
    let mut _22: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A5;
    let mut _24: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A6;
    let mut _26: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A7;
    let mut _28: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A8;
    let mut _30: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A9;
    let mut _32: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A10;
    let mut _34: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A11;
    let mut _36: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A12;
    let mut _38: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A13;
    let mut _40: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A14;
    let mut _42: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _55 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _54 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _53 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _52 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _51 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _50 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _49 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _48 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _47 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _45 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _43 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb42];
    }

    bb1: {
        _55 = const false;
        _18 = move _3;
        _17 = <A2 as FromToNativeWasmType>::from_native(move _18) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _54 = const false;
        _20 = move _4;
        _19 = <A3 as FromToNativeWasmType>::from_native(move _20) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        _53 = const false;
        _22 = move _5;
        _21 = <A4 as FromToNativeWasmType>::from_native(move _22) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _52 = const false;
        _24 = move _6;
        _23 = <A5 as FromToNativeWasmType>::from_native(move _24) -> [return: bb5, unwind: bb24];
    }

    bb5: {
        _51 = const false;
        _26 = move _7;
        _25 = <A6 as FromToNativeWasmType>::from_native(move _26) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        _50 = const false;
        _28 = move _8;
        _27 = <A7 as FromToNativeWasmType>::from_native(move _28) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        _49 = const false;
        _30 = move _9;
        _29 = <A8 as FromToNativeWasmType>::from_native(move _30) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _48 = const false;
        _32 = move _10;
        _31 = <A9 as FromToNativeWasmType>::from_native(move _32) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        _47 = const false;
        _34 = move _11;
        _33 = <A10 as FromToNativeWasmType>::from_native(move _34) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _46 = const false;
        _36 = move _12;
        _35 = <A11 as FromToNativeWasmType>::from_native(move _36) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _45 = const false;
        _38 = move _13;
        _37 = <A12 as FromToNativeWasmType>::from_native(move _38) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _44 = const false;
        _40 = move _14;
        _39 = <A13 as FromToNativeWasmType>::from_native(move _40) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _43 = const false;
        _42 = move _15;
        _41 = <A14 as FromToNativeWasmType>::from_native(move _42) -> [return: bb14, unwind: bb15];
    }

    bb14: {
        _0 = (move _16, move _17, move _19, move _21, move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41);
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        return;
    }

    bb15 (cleanup): {
        drop(_39) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_37) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_35) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_33) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_31) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_29) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_27) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_25) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_23) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_21) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_19) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_17) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_16) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_44) -> [0: bb29, otherwise: bb43];
    }

    bb29 (cleanup): {
        switchInt(_45) -> [0: bb30, otherwise: bb44];
    }

    bb30 (cleanup): {
        switchInt(_46) -> [0: bb31, otherwise: bb45];
    }

    bb31 (cleanup): {
        switchInt(_47) -> [0: bb32, otherwise: bb46];
    }

    bb32 (cleanup): {
        switchInt(_48) -> [0: bb33, otherwise: bb47];
    }

    bb33 (cleanup): {
        switchInt(_49) -> [0: bb34, otherwise: bb48];
    }

    bb34 (cleanup): {
        switchInt(_50) -> [0: bb35, otherwise: bb49];
    }

    bb35 (cleanup): {
        switchInt(_51) -> [0: bb36, otherwise: bb50];
    }

    bb36 (cleanup): {
        switchInt(_52) -> [0: bb37, otherwise: bb51];
    }

    bb37 (cleanup): {
        switchInt(_53) -> [0: bb38, otherwise: bb52];
    }

    bb38 (cleanup): {
        switchInt(_54) -> [0: bb39, otherwise: bb53];
    }

    bb39 (cleanup): {
        switchInt(_55) -> [0: bb40, otherwise: bb54];
    }

    bb40 (cleanup): {
        resume;
    }

    bb41 (cleanup): {
        drop(_15) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_43) -> [0: bb28, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_14) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_13) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_12) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_11) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_10) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_9) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_8) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_7) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_6) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_5) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_4) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_3) -> [return: bb40, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)) -> S14<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14> {
    debug self => _1;
    let mut _0: externals::function::inner::S14<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let mut _16: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A2;
    let mut _19: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A3;
    let mut _21: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A4;
    let mut _23: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A5;
    let mut _25: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A6;
    let mut _27: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A7;
    let mut _29: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A8;
    let mut _31: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A9;
    let mut _33: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A10;
    let mut _35: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A11;
    let mut _37: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A12;
    let mut _39: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A13;
    let mut _41: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A14;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
    }

    bb0: {
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _2 = move (_1.0: A1);
        _55 = const true;
        _3 = move (_1.1: A2);
        _54 = const true;
        _4 = move (_1.2: A3);
        _53 = const true;
        _5 = move (_1.3: A4);
        _52 = const true;
        _6 = move (_1.4: A5);
        _51 = const true;
        _7 = move (_1.5: A6);
        _50 = const true;
        _8 = move (_1.6: A7);
        _49 = const true;
        _9 = move (_1.7: A8);
        _48 = const true;
        _10 = move (_1.8: A9);
        _47 = const true;
        _11 = move (_1.9: A10);
        _46 = const true;
        _12 = move (_1.10: A11);
        _45 = const true;
        _13 = move (_1.11: A12);
        _44 = const true;
        _14 = move (_1.12: A13);
        _43 = const true;
        _15 = move (_1.13: A14);
        _16 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb42];
    }

    bb1: {
        _55 = const false;
        _18 = move _3;
        _17 = <A2 as FromToNativeWasmType>::to_native(move _18) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _54 = const false;
        _20 = move _4;
        _19 = <A3 as FromToNativeWasmType>::to_native(move _20) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        _53 = const false;
        _22 = move _5;
        _21 = <A4 as FromToNativeWasmType>::to_native(move _22) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _52 = const false;
        _24 = move _6;
        _23 = <A5 as FromToNativeWasmType>::to_native(move _24) -> [return: bb5, unwind: bb24];
    }

    bb5: {
        _51 = const false;
        _26 = move _7;
        _25 = <A6 as FromToNativeWasmType>::to_native(move _26) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        _50 = const false;
        _28 = move _8;
        _27 = <A7 as FromToNativeWasmType>::to_native(move _28) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        _49 = const false;
        _30 = move _9;
        _29 = <A8 as FromToNativeWasmType>::to_native(move _30) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        _48 = const false;
        _32 = move _10;
        _31 = <A9 as FromToNativeWasmType>::to_native(move _32) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        _47 = const false;
        _34 = move _11;
        _33 = <A10 as FromToNativeWasmType>::to_native(move _34) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _46 = const false;
        _36 = move _12;
        _35 = <A11 as FromToNativeWasmType>::to_native(move _36) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _45 = const false;
        _38 = move _13;
        _37 = <A12 as FromToNativeWasmType>::to_native(move _38) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _44 = const false;
        _40 = move _14;
        _39 = <A13 as FromToNativeWasmType>::to_native(move _40) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _43 = const false;
        _42 = move _15;
        _41 = <A14 as FromToNativeWasmType>::to_native(move _42) -> [return: bb14, unwind: bb15];
    }

    bb14: {
        _0 = S14::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>(move _16, move _17, move _19, move _21, move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41);
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        return;
    }

    bb15 (cleanup): {
        drop(_39) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_37) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_35) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_33) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_31) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_29) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_27) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_25) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_23) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_21) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_19) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_17) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_16) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_44) -> [0: bb29, otherwise: bb43];
    }

    bb29 (cleanup): {
        switchInt(_45) -> [0: bb30, otherwise: bb44];
    }

    bb30 (cleanup): {
        switchInt(_46) -> [0: bb31, otherwise: bb45];
    }

    bb31 (cleanup): {
        switchInt(_47) -> [0: bb32, otherwise: bb46];
    }

    bb32 (cleanup): {
        switchInt(_48) -> [0: bb33, otherwise: bb47];
    }

    bb33 (cleanup): {
        switchInt(_49) -> [0: bb34, otherwise: bb48];
    }

    bb34 (cleanup): {
        switchInt(_50) -> [0: bb35, otherwise: bb49];
    }

    bb35 (cleanup): {
        switchInt(_51) -> [0: bb36, otherwise: bb50];
    }

    bb36 (cleanup): {
        switchInt(_52) -> [0: bb37, otherwise: bb51];
    }

    bb37 (cleanup): {
        switchInt(_53) -> [0: bb38, otherwise: bb52];
    }

    bb38 (cleanup): {
        switchInt(_54) -> [0: bb39, otherwise: bb53];
    }

    bb39 (cleanup): {
        switchInt(_55) -> [0: bb40, otherwise: bb54];
    }

    bb40 (cleanup): {
        resume;
    }

    bb41 (cleanup): {
        drop(_15) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_43) -> [0: bb28, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_14) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_13) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_12) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_11) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_10) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_9) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_8) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_7) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_6) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_5) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_4) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_3) -> [return: bb40, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 14];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 14] = {
    let mut _0: &[wasmer_types::Type; 14];
    let mut _1: [wasmer_types::Type; 14];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _16: &Func;
    let _17: &Func;
    let _18: *const Func;
    let mut _19: *const ();
    let mut _21: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _22: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _23: &&Func;
    let mut _24: isize;
    let mut _25: isize;
    let mut _28: !;
    let mut _29: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _30: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _32: !;
    let mut _34: isize;
    scope 1 {
        debug func => _16;
        let _20: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _20;
            let _26: Rets;
            let _27: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _31: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _26;
            }
            scope 5 {
                debug trap => _27;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _31;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _33: &();
    }

    bb0: {
        _33 = const _;
        _19 = &raw const (*_33);
        _18 = move _19 as *const Func (PtrToPtr);
        _17 = &(*_18);
        _16 = _17;
        _23 = &_16;
        _22 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _23, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15 };
        _21 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _22);
        _20 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _21) -> [return: bb1, unwind continue];
    }

    bb1: {
        _25 = discriminant(_20);
        switchInt(move _25) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _24 = discriminant(((_20 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _24) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _31 = move ((_20 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _32 = resume_panic(move _31) -> unwind continue;
    }

    bb5: {
        _26 = move ((((_20 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _26) -> [return: bb6, unwind continue];
    }

    bb6: {
        _34 = discriminant(_20);
        switchInt(move _34) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _27 = move ((((_20 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _30 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _27) -> [return: bb8, unwind continue];
    }

    bb8: {
        _29 = move _30 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _28 = raise_user_trap(move _29) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: &&Func;
    let mut _33: &Func;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;

    bb0: {
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _47 = const true;
        _48 = const true;
        _49 = const true;
        _50 = const true;
        _51 = const true;
        _52 = const true;
        _53 = const true;
        _54 = const true;
        _55 = const true;
        _56 = const true;
        _57 = const true;
        _58 = const true;
        _59 = const true;
        _32 = deref_copy (_1.0: &&Func);
        _33 = deref_copy (*_32);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb69];
    }

    bb1: {
        _46 = const true;
        _59 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb43];
    }

    bb2: {
        _45 = const true;
        _58 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb41];
    }

    bb3: {
        _44 = const true;
        _57 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb39];
    }

    bb4: {
        _43 = const true;
        _56 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb37];
    }

    bb5: {
        _42 = const true;
        _55 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb35];
    }

    bb6: {
        _41 = const true;
        _54 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        _40 = const true;
        _53 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb31];
    }

    bb8: {
        _39 = const true;
        _52 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb29];
    }

    bb9: {
        _38 = const true;
        _51 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        _37 = const true;
        _50 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _36 = const true;
        _49 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        _35 = const true;
        _48 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        _34 = const true;
        _47 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)>>::call(_33, move _3) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        _34 = const false;
        _35 = const false;
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb16, unwind: bb69];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_28) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_34) -> [0: bb21, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_26) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_35) -> [0: bb23, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_24) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_36) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_22) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_37) -> [0: bb27, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_20) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_38) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_18) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_39) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_16) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_40) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_14) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_41) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_12) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_42) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_10) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_43) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_8) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_44) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_6) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_45) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_4) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_46) -> [0: bb69, otherwise: bb42];
    }

    bb44 (cleanup): {
        switchInt(_47) -> [0: bb17, otherwise: bb45];
    }

    bb45 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_48) -> [0: bb44, otherwise: bb47];
    }

    bb47 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_49) -> [0: bb46, otherwise: bb49];
    }

    bb49 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_50) -> [0: bb48, otherwise: bb51];
    }

    bb51 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_51) -> [0: bb50, otherwise: bb53];
    }

    bb53 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_52) -> [0: bb52, otherwise: bb55];
    }

    bb55 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_53) -> [0: bb54, otherwise: bb57];
    }

    bb57 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_54) -> [0: bb56, otherwise: bb59];
    }

    bb59 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_55) -> [0: bb58, otherwise: bb61];
    }

    bb61 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_56) -> [0: bb60, otherwise: bb63];
    }

    bb63 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_57) -> [0: bb62, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_58) -> [0: bb64, otherwise: bb67];
    }

    bb67 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_59) -> [0: bb66, otherwise: bb68];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _16: &Func;
    let _17: &Func;
    let _18: *const Func;
    let mut _19: *const ();
    let mut _21: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _22: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _23: &&Func;
    let mut _24: &&Env;
    let mut _25: isize;
    let mut _26: isize;
    let mut _29: !;
    let mut _30: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _31: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _33: !;
    let mut _35: isize;
    scope 1 {
        debug func => _16;
        let _20: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _20;
            let _27: Rets;
            let _28: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _32: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _27;
            }
            scope 5 {
                debug trap => _28;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _32;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _34: &();
    }

    bb0: {
        _34 = const _;
        _19 = &raw const (*_34);
        _18 = move _19 as *const Func (PtrToPtr);
        _17 = &(*_18);
        _16 = _17;
        _23 = &_16;
        _24 = &_1;
        _22 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _23, env: move _24, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15 };
        _21 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _22);
        _20 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _21) -> [return: bb1, unwind continue];
    }

    bb1: {
        _26 = discriminant(_20);
        switchInt(move _26) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _25 = discriminant(((_20 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _25) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _32 = move ((_20 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _33 = resume_panic(move _32) -> unwind continue;
    }

    bb5: {
        _27 = move ((((_20 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _27) -> [return: bb6, unwind continue];
    }

    bb6: {
        _35 = discriminant(_20);
        switchInt(move _35) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _28 = move ((((_20 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _31 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _28) -> [return: bb8, unwind continue];
    }

    bb8: {
        _30 = move _31 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _29 = raise_user_trap(move _30) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: &&Func;
    let mut _33: &Func;
    let mut _34: &&Env;
    let mut _35: &Env;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;

    bb0: {
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _49 = const true;
        _50 = const true;
        _51 = const true;
        _52 = const true;
        _53 = const true;
        _54 = const true;
        _55 = const true;
        _56 = const true;
        _57 = const true;
        _58 = const true;
        _59 = const true;
        _60 = const true;
        _61 = const true;
        _32 = deref_copy (_1.0: &&Func);
        _33 = deref_copy (*_32);
        _34 = deref_copy (_1.1: &&Env);
        _35 = deref_copy (*_34);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb69];
    }

    bb1: {
        _48 = const true;
        _61 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb43];
    }

    bb2: {
        _47 = const true;
        _60 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb41];
    }

    bb3: {
        _46 = const true;
        _59 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb39];
    }

    bb4: {
        _45 = const true;
        _58 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb37];
    }

    bb5: {
        _44 = const true;
        _57 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb35];
    }

    bb6: {
        _43 = const true;
        _56 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        _42 = const true;
        _55 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb31];
    }

    bb8: {
        _41 = const true;
        _54 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb29];
    }

    bb9: {
        _40 = const true;
        _53 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        _39 = const true;
        _52 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _38 = const true;
        _51 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        _37 = const true;
        _50 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        _36 = const true;
        _49 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _3 = (_35, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)>>::call(_33, move _3) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb16, unwind: bb69];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_28) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_36) -> [0: bb21, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_26) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_37) -> [0: bb23, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_24) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_38) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_22) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_39) -> [0: bb27, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_20) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_40) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_18) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_41) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_16) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_42) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_14) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_43) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_12) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_44) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_10) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_45) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_8) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_46) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_6) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_47) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_4) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_48) -> [0: bb69, otherwise: bb42];
    }

    bb44 (cleanup): {
        switchInt(_49) -> [0: bb17, otherwise: bb45];
    }

    bb45 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_50) -> [0: bb44, otherwise: bb47];
    }

    bb47 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_51) -> [0: bb46, otherwise: bb49];
    }

    bb49 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_52) -> [0: bb48, otherwise: bb51];
    }

    bb51 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_53) -> [0: bb50, otherwise: bb53];
    }

    bb53 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_54) -> [0: bb52, otherwise: bb55];
    }

    bb55 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_55) -> [0: bb54, otherwise: bb57];
    }

    bb57 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_56) -> [0: bb56, otherwise: bb59];
    }

    bb59 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_57) -> [0: bb58, otherwise: bb61];
    }

    bb61 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_58) -> [0: bb60, otherwise: bb63];
    }

    bb63 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_59) -> [0: bb62, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_60) -> [0: bb64, otherwise: bb67];
    }

    bb67 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_61) -> [0: bb66, otherwise: bb68];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 15_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 15]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15);
    let mut _17: A1;
    let mut _18: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A2;
    let mut _20: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A3;
    let mut _22: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A4;
    let mut _24: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A5;
    let mut _26: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A6;
    let mut _28: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A7;
    let mut _30: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A8;
    let mut _32: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A9;
    let mut _34: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A10;
    let mut _36: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A11;
    let mut _38: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A12;
    let mut _40: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A13;
    let mut _42: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A14;
    let mut _44: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A15;
    let mut _46: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
        let _16: i128;
    }

    bb0: {
        _2 = _1[0 of 15];
        _3 = _1[1 of 15];
        _4 = _1[2 of 15];
        _5 = _1[3 of 15];
        _6 = _1[4 of 15];
        _7 = _1[5 of 15];
        _8 = _1[6 of 15];
        _9 = _1[7 of 15];
        _10 = _1[8 of 15];
        _11 = _1[9 of 15];
        _12 = _1[10 of 15];
        _13 = _1[11 of 15];
        _14 = _1[12 of 15];
        _15 = _1[13 of 15];
        _16 = _1[14 of 15];
        _18 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _17 = <A1 as FromToNativeWasmType>::from_native(move _18) -> [return: bb2, unwind continue];
    }

    bb2: {
        _20 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb44];
    }

    bb3: {
        _19 = <A2 as FromToNativeWasmType>::from_native(move _20) -> [return: bb4, unwind: bb44];
    }

    bb4: {
        _22 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb43];
    }

    bb5: {
        _21 = <A3 as FromToNativeWasmType>::from_native(move _22) -> [return: bb6, unwind: bb43];
    }

    bb6: {
        _24 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        _23 = <A4 as FromToNativeWasmType>::from_native(move _24) -> [return: bb8, unwind: bb42];
    }

    bb8: {
        _26 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb41];
    }

    bb9: {
        _25 = <A5 as FromToNativeWasmType>::from_native(move _26) -> [return: bb10, unwind: bb41];
    }

    bb10: {
        _28 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb40];
    }

    bb11: {
        _27 = <A6 as FromToNativeWasmType>::from_native(move _28) -> [return: bb12, unwind: bb40];
    }

    bb12: {
        _30 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb39];
    }

    bb13: {
        _29 = <A7 as FromToNativeWasmType>::from_native(move _30) -> [return: bb14, unwind: bb39];
    }

    bb14: {
        _32 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb38];
    }

    bb15: {
        _31 = <A8 as FromToNativeWasmType>::from_native(move _32) -> [return: bb16, unwind: bb38];
    }

    bb16: {
        _34 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb37];
    }

    bb17: {
        _33 = <A9 as FromToNativeWasmType>::from_native(move _34) -> [return: bb18, unwind: bb37];
    }

    bb18: {
        _36 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb36];
    }

    bb19: {
        _35 = <A10 as FromToNativeWasmType>::from_native(move _36) -> [return: bb20, unwind: bb36];
    }

    bb20: {
        _38 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb35];
    }

    bb21: {
        _37 = <A11 as FromToNativeWasmType>::from_native(move _38) -> [return: bb22, unwind: bb35];
    }

    bb22: {
        _40 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb34];
    }

    bb23: {
        _39 = <A12 as FromToNativeWasmType>::from_native(move _40) -> [return: bb24, unwind: bb34];
    }

    bb24: {
        _42 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb33];
    }

    bb25: {
        _41 = <A13 as FromToNativeWasmType>::from_native(move _42) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        _44 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb32];
    }

    bb27: {
        _43 = <A14 as FromToNativeWasmType>::from_native(move _44) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        _46 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_16) -> [return: bb29, unwind: bb31];
    }

    bb29: {
        _45 = <A15 as FromToNativeWasmType>::from_native(move _46) -> [return: bb30, unwind: bb31];
    }

    bb30: {
        _0 = (move _17, move _19, move _21, move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45);
        return;
    }

    bb31 (cleanup): {
        drop(_43) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_41) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_39) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_37) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_35) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_33) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_31) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_29) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_27) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_25) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_23) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_21) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_19) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_17) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 15]>;
    let mut _4: std::result::Result<[i128; 15], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 15];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 15]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 15], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 15]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)) -> [i128; 15] {
    debug self => _1;
    let mut _0: [i128; 15];
    let mut _17: i128;
    let mut _18: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: i128;
    let mut _20: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A2;
    let mut _22: i128;
    let mut _23: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A3;
    let mut _25: i128;
    let mut _26: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A4;
    let mut _28: i128;
    let mut _29: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A5;
    let mut _31: i128;
    let mut _32: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A6;
    let mut _34: i128;
    let mut _35: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A7;
    let mut _37: i128;
    let mut _38: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A8;
    let mut _40: i128;
    let mut _41: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A9;
    let mut _43: i128;
    let mut _44: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A10;
    let mut _46: i128;
    let mut _47: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A11;
    let mut _49: i128;
    let mut _50: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A12;
    let mut _52: i128;
    let mut _53: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A13;
    let mut _55: i128;
    let mut _56: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A14;
    let mut _58: i128;
    let mut _59: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A15;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
        let _16: A15;
    }

    bb0: {
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _2 = move (_1.0: A1);
        _74 = const true;
        _3 = move (_1.1: A2);
        _73 = const true;
        _4 = move (_1.2: A3);
        _72 = const true;
        _5 = move (_1.3: A4);
        _71 = const true;
        _6 = move (_1.4: A5);
        _70 = const true;
        _7 = move (_1.5: A6);
        _69 = const true;
        _8 = move (_1.6: A7);
        _68 = const true;
        _9 = move (_1.7: A8);
        _67 = const true;
        _10 = move (_1.8: A9);
        _66 = const true;
        _11 = move (_1.9: A10);
        _65 = const true;
        _12 = move (_1.10: A11);
        _64 = const true;
        _13 = move (_1.11: A12);
        _63 = const true;
        _14 = move (_1.12: A13);
        _62 = const true;
        _15 = move (_1.13: A14);
        _61 = const true;
        _16 = move (_1.14: A15);
        _18 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb46];
    }

    bb1: {
        _17 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _18) -> [return: bb2, unwind: bb46];
    }

    bb2: {
        _74 = const false;
        _21 = move _3;
        _20 = <A2 as FromToNativeWasmType>::to_native(move _21) -> [return: bb3, unwind: bb46];
    }

    bb3: {
        _19 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _20) -> [return: bb4, unwind: bb46];
    }

    bb4: {
        _73 = const false;
        _24 = move _4;
        _23 = <A3 as FromToNativeWasmType>::to_native(move _24) -> [return: bb5, unwind: bb46];
    }

    bb5: {
        _22 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _23) -> [return: bb6, unwind: bb46];
    }

    bb6: {
        _72 = const false;
        _27 = move _5;
        _26 = <A4 as FromToNativeWasmType>::to_native(move _27) -> [return: bb7, unwind: bb46];
    }

    bb7: {
        _25 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _26) -> [return: bb8, unwind: bb46];
    }

    bb8: {
        _71 = const false;
        _30 = move _6;
        _29 = <A5 as FromToNativeWasmType>::to_native(move _30) -> [return: bb9, unwind: bb46];
    }

    bb9: {
        _28 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _29) -> [return: bb10, unwind: bb46];
    }

    bb10: {
        _70 = const false;
        _33 = move _7;
        _32 = <A6 as FromToNativeWasmType>::to_native(move _33) -> [return: bb11, unwind: bb46];
    }

    bb11: {
        _31 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _32) -> [return: bb12, unwind: bb46];
    }

    bb12: {
        _69 = const false;
        _36 = move _8;
        _35 = <A7 as FromToNativeWasmType>::to_native(move _36) -> [return: bb13, unwind: bb46];
    }

    bb13: {
        _34 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _35) -> [return: bb14, unwind: bb46];
    }

    bb14: {
        _68 = const false;
        _39 = move _9;
        _38 = <A8 as FromToNativeWasmType>::to_native(move _39) -> [return: bb15, unwind: bb46];
    }

    bb15: {
        _37 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _38) -> [return: bb16, unwind: bb46];
    }

    bb16: {
        _67 = const false;
        _42 = move _10;
        _41 = <A9 as FromToNativeWasmType>::to_native(move _42) -> [return: bb17, unwind: bb46];
    }

    bb17: {
        _40 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _41) -> [return: bb18, unwind: bb46];
    }

    bb18: {
        _66 = const false;
        _45 = move _11;
        _44 = <A10 as FromToNativeWasmType>::to_native(move _45) -> [return: bb19, unwind: bb46];
    }

    bb19: {
        _43 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _44) -> [return: bb20, unwind: bb46];
    }

    bb20: {
        _65 = const false;
        _48 = move _12;
        _47 = <A11 as FromToNativeWasmType>::to_native(move _48) -> [return: bb21, unwind: bb46];
    }

    bb21: {
        _46 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _47) -> [return: bb22, unwind: bb46];
    }

    bb22: {
        _64 = const false;
        _51 = move _13;
        _50 = <A12 as FromToNativeWasmType>::to_native(move _51) -> [return: bb23, unwind: bb46];
    }

    bb23: {
        _49 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _50) -> [return: bb24, unwind: bb46];
    }

    bb24: {
        _63 = const false;
        _54 = move _14;
        _53 = <A13 as FromToNativeWasmType>::to_native(move _54) -> [return: bb25, unwind: bb46];
    }

    bb25: {
        _52 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _53) -> [return: bb26, unwind: bb46];
    }

    bb26: {
        _62 = const false;
        _57 = move _15;
        _56 = <A14 as FromToNativeWasmType>::to_native(move _57) -> [return: bb27, unwind: bb46];
    }

    bb27: {
        _55 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _56) -> [return: bb28, unwind: bb46];
    }

    bb28: {
        _61 = const false;
        _60 = move _16;
        _59 = <A15 as FromToNativeWasmType>::to_native(move _60) -> [return: bb29, unwind: bb46];
    }

    bb29: {
        _58 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _59) -> [return: bb30, unwind: bb46];
    }

    bb30: {
        _0 = [move _17, move _19, move _22, move _25, move _28, move _31, move _34, move _37, move _40, move _43, move _46, move _49, move _52, move _55, move _58];
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        return;
    }

    bb31 (cleanup): {
        switchInt(_62) -> [0: bb32, otherwise: bb47];
    }

    bb32 (cleanup): {
        switchInt(_63) -> [0: bb33, otherwise: bb48];
    }

    bb33 (cleanup): {
        switchInt(_64) -> [0: bb34, otherwise: bb49];
    }

    bb34 (cleanup): {
        switchInt(_65) -> [0: bb35, otherwise: bb50];
    }

    bb35 (cleanup): {
        switchInt(_66) -> [0: bb36, otherwise: bb51];
    }

    bb36 (cleanup): {
        switchInt(_67) -> [0: bb37, otherwise: bb52];
    }

    bb37 (cleanup): {
        switchInt(_68) -> [0: bb38, otherwise: bb53];
    }

    bb38 (cleanup): {
        switchInt(_69) -> [0: bb39, otherwise: bb54];
    }

    bb39 (cleanup): {
        switchInt(_70) -> [0: bb40, otherwise: bb55];
    }

    bb40 (cleanup): {
        switchInt(_71) -> [0: bb41, otherwise: bb56];
    }

    bb41 (cleanup): {
        switchInt(_72) -> [0: bb42, otherwise: bb57];
    }

    bb42 (cleanup): {
        switchInt(_73) -> [0: bb43, otherwise: bb58];
    }

    bb43 (cleanup): {
        switchInt(_74) -> [0: bb44, otherwise: bb59];
    }

    bb44 (cleanup): {
        resume;
    }

    bb45 (cleanup): {
        drop(_16) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_61) -> [0: bb31, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_15) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_14) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_13) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_12) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_11) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_10) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_9) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_8) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_7) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_6) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_5) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_4) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_3) -> [return: bb44, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 15] {
    let mut _0: [i128; 15];

    bb0: {
        _0 = [const 0_i128; 15];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 15_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S15<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15);
    let mut _17: A1;
    let mut _18: A2;
    let mut _19: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A3;
    let mut _21: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A4;
    let mut _23: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A5;
    let mut _25: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A6;
    let mut _27: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A7;
    let mut _29: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A8;
    let mut _31: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A9;
    let mut _33: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A10;
    let mut _35: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A11;
    let mut _37: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A12;
    let mut _39: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A13;
    let mut _41: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A14;
    let mut _43: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A15;
    let mut _45: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
        let _16: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _59 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _58 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _57 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _56 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _55 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _54 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _53 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _52 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _51 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _50 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _49 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _48 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _47 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = const true;
        _16 = move (_1.14: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _17 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb45];
    }

    bb1: {
        _59 = const false;
        _19 = move _3;
        _18 = <A2 as FromToNativeWasmType>::from_native(move _19) -> [return: bb2, unwind: bb29];
    }

    bb2: {
        _58 = const false;
        _21 = move _4;
        _20 = <A3 as FromToNativeWasmType>::from_native(move _21) -> [return: bb3, unwind: bb28];
    }

    bb3: {
        _57 = const false;
        _23 = move _5;
        _22 = <A4 as FromToNativeWasmType>::from_native(move _23) -> [return: bb4, unwind: bb27];
    }

    bb4: {
        _56 = const false;
        _25 = move _6;
        _24 = <A5 as FromToNativeWasmType>::from_native(move _25) -> [return: bb5, unwind: bb26];
    }

    bb5: {
        _55 = const false;
        _27 = move _7;
        _26 = <A6 as FromToNativeWasmType>::from_native(move _27) -> [return: bb6, unwind: bb25];
    }

    bb6: {
        _54 = const false;
        _29 = move _8;
        _28 = <A7 as FromToNativeWasmType>::from_native(move _29) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _53 = const false;
        _31 = move _9;
        _30 = <A8 as FromToNativeWasmType>::from_native(move _31) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _52 = const false;
        _33 = move _10;
        _32 = <A9 as FromToNativeWasmType>::from_native(move _33) -> [return: bb9, unwind: bb22];
    }

    bb9: {
        _51 = const false;
        _35 = move _11;
        _34 = <A10 as FromToNativeWasmType>::from_native(move _35) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        _50 = const false;
        _37 = move _12;
        _36 = <A11 as FromToNativeWasmType>::from_native(move _37) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        _49 = const false;
        _39 = move _13;
        _38 = <A12 as FromToNativeWasmType>::from_native(move _39) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        _48 = const false;
        _41 = move _14;
        _40 = <A13 as FromToNativeWasmType>::from_native(move _41) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _47 = const false;
        _43 = move _15;
        _42 = <A14 as FromToNativeWasmType>::from_native(move _43) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        _46 = const false;
        _45 = move _16;
        _44 = <A15 as FromToNativeWasmType>::from_native(move _45) -> [return: bb15, unwind: bb16];
    }

    bb15: {
        _0 = (move _17, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44);
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        return;
    }

    bb16 (cleanup): {
        drop(_42) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_40) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_38) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_36) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_34) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_32) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_30) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_28) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_26) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_24) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_22) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_20) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_18) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_17) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_47) -> [0: bb31, otherwise: bb46];
    }

    bb31 (cleanup): {
        switchInt(_48) -> [0: bb32, otherwise: bb47];
    }

    bb32 (cleanup): {
        switchInt(_49) -> [0: bb33, otherwise: bb48];
    }

    bb33 (cleanup): {
        switchInt(_50) -> [0: bb34, otherwise: bb49];
    }

    bb34 (cleanup): {
        switchInt(_51) -> [0: bb35, otherwise: bb50];
    }

    bb35 (cleanup): {
        switchInt(_52) -> [0: bb36, otherwise: bb51];
    }

    bb36 (cleanup): {
        switchInt(_53) -> [0: bb37, otherwise: bb52];
    }

    bb37 (cleanup): {
        switchInt(_54) -> [0: bb38, otherwise: bb53];
    }

    bb38 (cleanup): {
        switchInt(_55) -> [0: bb39, otherwise: bb54];
    }

    bb39 (cleanup): {
        switchInt(_56) -> [0: bb40, otherwise: bb55];
    }

    bb40 (cleanup): {
        switchInt(_57) -> [0: bb41, otherwise: bb56];
    }

    bb41 (cleanup): {
        switchInt(_58) -> [0: bb42, otherwise: bb57];
    }

    bb42 (cleanup): {
        switchInt(_59) -> [0: bb43, otherwise: bb58];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44 (cleanup): {
        drop(_16) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_46) -> [0: bb30, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_15) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_14) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_13) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_12) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_11) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_10) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_9) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_8) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_7) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_6) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_5) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_4) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_3) -> [return: bb43, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)) -> S15<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15> {
    debug self => _1;
    let mut _0: externals::function::inner::S15<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let _16: A15;
    let mut _17: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A2;
    let mut _20: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A3;
    let mut _22: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A4;
    let mut _24: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A5;
    let mut _26: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A6;
    let mut _28: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A7;
    let mut _30: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A8;
    let mut _32: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A9;
    let mut _34: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A10;
    let mut _36: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A11;
    let mut _38: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A12;
    let mut _40: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A13;
    let mut _42: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A14;
    let mut _44: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A15;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
    }

    bb0: {
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _2 = move (_1.0: A1);
        _59 = const true;
        _3 = move (_1.1: A2);
        _58 = const true;
        _4 = move (_1.2: A3);
        _57 = const true;
        _5 = move (_1.3: A4);
        _56 = const true;
        _6 = move (_1.4: A5);
        _55 = const true;
        _7 = move (_1.5: A6);
        _54 = const true;
        _8 = move (_1.6: A7);
        _53 = const true;
        _9 = move (_1.7: A8);
        _52 = const true;
        _10 = move (_1.8: A9);
        _51 = const true;
        _11 = move (_1.9: A10);
        _50 = const true;
        _12 = move (_1.10: A11);
        _49 = const true;
        _13 = move (_1.11: A12);
        _48 = const true;
        _14 = move (_1.12: A13);
        _47 = const true;
        _15 = move (_1.13: A14);
        _46 = const true;
        _16 = move (_1.14: A15);
        _17 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb45];
    }

    bb1: {
        _59 = const false;
        _19 = move _3;
        _18 = <A2 as FromToNativeWasmType>::to_native(move _19) -> [return: bb2, unwind: bb29];
    }

    bb2: {
        _58 = const false;
        _21 = move _4;
        _20 = <A3 as FromToNativeWasmType>::to_native(move _21) -> [return: bb3, unwind: bb28];
    }

    bb3: {
        _57 = const false;
        _23 = move _5;
        _22 = <A4 as FromToNativeWasmType>::to_native(move _23) -> [return: bb4, unwind: bb27];
    }

    bb4: {
        _56 = const false;
        _25 = move _6;
        _24 = <A5 as FromToNativeWasmType>::to_native(move _25) -> [return: bb5, unwind: bb26];
    }

    bb5: {
        _55 = const false;
        _27 = move _7;
        _26 = <A6 as FromToNativeWasmType>::to_native(move _27) -> [return: bb6, unwind: bb25];
    }

    bb6: {
        _54 = const false;
        _29 = move _8;
        _28 = <A7 as FromToNativeWasmType>::to_native(move _29) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _53 = const false;
        _31 = move _9;
        _30 = <A8 as FromToNativeWasmType>::to_native(move _31) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _52 = const false;
        _33 = move _10;
        _32 = <A9 as FromToNativeWasmType>::to_native(move _33) -> [return: bb9, unwind: bb22];
    }

    bb9: {
        _51 = const false;
        _35 = move _11;
        _34 = <A10 as FromToNativeWasmType>::to_native(move _35) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        _50 = const false;
        _37 = move _12;
        _36 = <A11 as FromToNativeWasmType>::to_native(move _37) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        _49 = const false;
        _39 = move _13;
        _38 = <A12 as FromToNativeWasmType>::to_native(move _39) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        _48 = const false;
        _41 = move _14;
        _40 = <A13 as FromToNativeWasmType>::to_native(move _41) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _47 = const false;
        _43 = move _15;
        _42 = <A14 as FromToNativeWasmType>::to_native(move _43) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        _46 = const false;
        _45 = move _16;
        _44 = <A15 as FromToNativeWasmType>::to_native(move _45) -> [return: bb15, unwind: bb16];
    }

    bb15: {
        _0 = S15::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>(move _17, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44);
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        return;
    }

    bb16 (cleanup): {
        drop(_42) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_40) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_38) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_36) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_34) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_32) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_30) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_28) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_26) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_24) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_22) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_20) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_18) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_17) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_47) -> [0: bb31, otherwise: bb46];
    }

    bb31 (cleanup): {
        switchInt(_48) -> [0: bb32, otherwise: bb47];
    }

    bb32 (cleanup): {
        switchInt(_49) -> [0: bb33, otherwise: bb48];
    }

    bb33 (cleanup): {
        switchInt(_50) -> [0: bb34, otherwise: bb49];
    }

    bb34 (cleanup): {
        switchInt(_51) -> [0: bb35, otherwise: bb50];
    }

    bb35 (cleanup): {
        switchInt(_52) -> [0: bb36, otherwise: bb51];
    }

    bb36 (cleanup): {
        switchInt(_53) -> [0: bb37, otherwise: bb52];
    }

    bb37 (cleanup): {
        switchInt(_54) -> [0: bb38, otherwise: bb53];
    }

    bb38 (cleanup): {
        switchInt(_55) -> [0: bb39, otherwise: bb54];
    }

    bb39 (cleanup): {
        switchInt(_56) -> [0: bb40, otherwise: bb55];
    }

    bb40 (cleanup): {
        switchInt(_57) -> [0: bb41, otherwise: bb56];
    }

    bb41 (cleanup): {
        switchInt(_58) -> [0: bb42, otherwise: bb57];
    }

    bb42 (cleanup): {
        switchInt(_59) -> [0: bb43, otherwise: bb58];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44 (cleanup): {
        drop(_16) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_46) -> [0: bb30, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_15) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_14) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_13) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_12) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_11) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_10) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_9) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_8) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_7) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_6) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_5) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_4) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_3) -> [return: bb43, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 15];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 15] = {
    let mut _0: &[wasmer_types::Type; 15];
    let mut _1: [wasmer_types::Type; 15];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _17: &Func;
    let _18: &Func;
    let _19: *const Func;
    let mut _20: *const ();
    let mut _22: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _23: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _24: &&Func;
    let mut _25: isize;
    let mut _26: isize;
    let mut _29: !;
    let mut _30: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _31: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _33: !;
    let mut _35: isize;
    scope 1 {
        debug func => _17;
        let _21: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _21;
            let _27: Rets;
            let _28: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _32: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _27;
            }
            scope 5 {
                debug trap => _28;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _32;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _34: &();
    }

    bb0: {
        _34 = const _;
        _20 = &raw const (*_34);
        _19 = move _20 as *const Func (PtrToPtr);
        _18 = &(*_19);
        _17 = _18;
        _24 = &_17;
        _23 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _24, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16 };
        _22 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _23);
        _21 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _22) -> [return: bb1, unwind continue];
    }

    bb1: {
        _26 = discriminant(_21);
        switchInt(move _26) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _25 = discriminant(((_21 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _25) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _32 = move ((_21 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _33 = resume_panic(move _32) -> unwind continue;
    }

    bb5: {
        _27 = move ((((_21 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _27) -> [return: bb6, unwind continue];
    }

    bb6: {
        _35 = discriminant(_21);
        switchInt(move _35) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _28 = move ((((_21 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _31 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _28) -> [return: bb8, unwind continue];
    }

    bb8: {
        _30 = move _31 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _29 = raise_user_trap(move _30) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: &&Func;
    let mut _35: &Func;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;

    bb0: {
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _50 = const true;
        _51 = const true;
        _52 = const true;
        _53 = const true;
        _54 = const true;
        _55 = const true;
        _56 = const true;
        _57 = const true;
        _58 = const true;
        _59 = const true;
        _60 = const true;
        _61 = const true;
        _62 = const true;
        _63 = const true;
        _34 = deref_copy (_1.0: &&Func);
        _35 = deref_copy (*_34);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb74];
    }

    bb1: {
        _49 = const true;
        _63 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb46];
    }

    bb2: {
        _48 = const true;
        _62 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb44];
    }

    bb3: {
        _47 = const true;
        _61 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb42];
    }

    bb4: {
        _46 = const true;
        _60 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb40];
    }

    bb5: {
        _45 = const true;
        _59 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb38];
    }

    bb6: {
        _44 = const true;
        _58 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb36];
    }

    bb7: {
        _43 = const true;
        _57 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        _42 = const true;
        _56 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb32];
    }

    bb9: {
        _41 = const true;
        _55 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb30];
    }

    bb10: {
        _40 = const true;
        _54 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        _39 = const true;
        _53 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb26];
    }

    bb12: {
        _38 = const true;
        _52 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _37 = const true;
        _51 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb22];
    }

    bb14: {
        _36 = const true;
        _50 = const false;
        _33 = move (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)>>::call(_35, move _3) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        _36 = const false;
        _37 = const false;
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb17, unwind: bb74];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        drop(_30) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_36) -> [0: bb22, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_28) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_37) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_26) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_38) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_24) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_39) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_22) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_40) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_20) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_41) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_18) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_42) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_16) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_43) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_14) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_44) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_12) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_45) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_10) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_46) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_8) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_47) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_6) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_48) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_4) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_49) -> [0: bb74, otherwise: bb45];
    }

    bb47 (cleanup): {
        switchInt(_50) -> [0: bb18, otherwise: bb48];
    }

    bb48 (cleanup): {
        drop((_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_51) -> [0: bb47, otherwise: bb50];
    }

    bb50 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_52) -> [0: bb49, otherwise: bb52];
    }

    bb52 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_53) -> [0: bb51, otherwise: bb54];
    }

    bb54 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_54) -> [0: bb53, otherwise: bb56];
    }

    bb56 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_55) -> [0: bb55, otherwise: bb58];
    }

    bb58 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_56) -> [0: bb57, otherwise: bb60];
    }

    bb60 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_57) -> [0: bb59, otherwise: bb62];
    }

    bb62 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_58) -> [0: bb61, otherwise: bb64];
    }

    bb64 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_59) -> [0: bb63, otherwise: bb66];
    }

    bb66 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_60) -> [0: bb65, otherwise: bb68];
    }

    bb68 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_61) -> [0: bb67, otherwise: bb70];
    }

    bb70 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_62) -> [0: bb69, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_63) -> [0: bb71, otherwise: bb73];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _17: &Func;
    let _18: &Func;
    let _19: *const Func;
    let mut _20: *const ();
    let mut _22: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _23: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _24: &&Func;
    let mut _25: &&Env;
    let mut _26: isize;
    let mut _27: isize;
    let mut _30: !;
    let mut _31: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _32: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _34: !;
    let mut _36: isize;
    scope 1 {
        debug func => _17;
        let _21: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _21;
            let _28: Rets;
            let _29: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _33: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _28;
            }
            scope 5 {
                debug trap => _29;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _33;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _35: &();
    }

    bb0: {
        _35 = const _;
        _20 = &raw const (*_35);
        _19 = move _20 as *const Func (PtrToPtr);
        _18 = &(*_19);
        _17 = _18;
        _24 = &_17;
        _25 = &_1;
        _23 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _24, env: move _25, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16 };
        _22 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _23);
        _21 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _22) -> [return: bb1, unwind continue];
    }

    bb1: {
        _27 = discriminant(_21);
        switchInt(move _27) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _26 = discriminant(((_21 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _26) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _33 = move ((_21 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _34 = resume_panic(move _33) -> unwind continue;
    }

    bb5: {
        _28 = move ((((_21 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _28) -> [return: bb6, unwind continue];
    }

    bb6: {
        _36 = discriminant(_21);
        switchInt(move _36) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _29 = move ((((_21 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _32 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _29) -> [return: bb8, unwind continue];
    }

    bb8: {
        _31 = move _32 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _30 = raise_user_trap(move _31) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: &&Func;
    let mut _35: &Func;
    let mut _36: &&Env;
    let mut _37: &Env;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;

    bb0: {
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _52 = const true;
        _53 = const true;
        _54 = const true;
        _55 = const true;
        _56 = const true;
        _57 = const true;
        _58 = const true;
        _59 = const true;
        _60 = const true;
        _61 = const true;
        _62 = const true;
        _63 = const true;
        _64 = const true;
        _65 = const true;
        _34 = deref_copy (_1.0: &&Func);
        _35 = deref_copy (*_34);
        _36 = deref_copy (_1.1: &&Env);
        _37 = deref_copy (*_36);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb74];
    }

    bb1: {
        _51 = const true;
        _65 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb46];
    }

    bb2: {
        _50 = const true;
        _64 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb44];
    }

    bb3: {
        _49 = const true;
        _63 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb42];
    }

    bb4: {
        _48 = const true;
        _62 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb40];
    }

    bb5: {
        _47 = const true;
        _61 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb38];
    }

    bb6: {
        _46 = const true;
        _60 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb36];
    }

    bb7: {
        _45 = const true;
        _59 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        _44 = const true;
        _58 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb32];
    }

    bb9: {
        _43 = const true;
        _57 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb30];
    }

    bb10: {
        _42 = const true;
        _56 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        _41 = const true;
        _55 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb26];
    }

    bb12: {
        _40 = const true;
        _54 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _39 = const true;
        _53 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb22];
    }

    bb14: {
        _38 = const true;
        _52 = const false;
        _33 = move (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _3 = (_37, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)>>::call(_35, move _3) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb17, unwind: bb74];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        drop(_30) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_38) -> [0: bb22, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_28) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_39) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_26) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_40) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_24) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_41) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_22) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_42) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_20) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_43) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_18) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_44) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_16) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_45) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_14) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_46) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_12) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_47) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_10) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_48) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_8) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_49) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_6) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_50) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_4) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_51) -> [0: bb74, otherwise: bb45];
    }

    bb47 (cleanup): {
        switchInt(_52) -> [0: bb18, otherwise: bb48];
    }

    bb48 (cleanup): {
        drop((_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_53) -> [0: bb47, otherwise: bb50];
    }

    bb50 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_54) -> [0: bb49, otherwise: bb52];
    }

    bb52 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_55) -> [0: bb51, otherwise: bb54];
    }

    bb54 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_56) -> [0: bb53, otherwise: bb56];
    }

    bb56 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_57) -> [0: bb55, otherwise: bb58];
    }

    bb58 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_58) -> [0: bb57, otherwise: bb60];
    }

    bb60 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_59) -> [0: bb59, otherwise: bb62];
    }

    bb62 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_60) -> [0: bb61, otherwise: bb64];
    }

    bb64 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_61) -> [0: bb63, otherwise: bb66];
    }

    bb66 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_62) -> [0: bb65, otherwise: bb68];
    }

    bb68 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_63) -> [0: bb67, otherwise: bb70];
    }

    bb70 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_64) -> [0: bb69, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_65) -> [0: bb71, otherwise: bb73];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 16_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 16]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);
    let mut _18: A1;
    let mut _19: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A2;
    let mut _21: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A3;
    let mut _23: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A4;
    let mut _25: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A5;
    let mut _27: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A6;
    let mut _29: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A7;
    let mut _31: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A8;
    let mut _33: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A9;
    let mut _35: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A10;
    let mut _37: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A11;
    let mut _39: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A12;
    let mut _41: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A13;
    let mut _43: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A14;
    let mut _45: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A15;
    let mut _47: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A16;
    let mut _49: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
        let _16: i128;
        let _17: i128;
    }

    bb0: {
        _2 = _1[0 of 16];
        _3 = _1[1 of 16];
        _4 = _1[2 of 16];
        _5 = _1[3 of 16];
        _6 = _1[4 of 16];
        _7 = _1[5 of 16];
        _8 = _1[6 of 16];
        _9 = _1[7 of 16];
        _10 = _1[8 of 16];
        _11 = _1[9 of 16];
        _12 = _1[10 of 16];
        _13 = _1[11 of 16];
        _14 = _1[12 of 16];
        _15 = _1[13 of 16];
        _16 = _1[14 of 16];
        _17 = _1[15 of 16];
        _19 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _18 = <A1 as FromToNativeWasmType>::from_native(move _19) -> [return: bb2, unwind continue];
    }

    bb2: {
        _21 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb47];
    }

    bb3: {
        _20 = <A2 as FromToNativeWasmType>::from_native(move _21) -> [return: bb4, unwind: bb47];
    }

    bb4: {
        _23 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb46];
    }

    bb5: {
        _22 = <A3 as FromToNativeWasmType>::from_native(move _23) -> [return: bb6, unwind: bb46];
    }

    bb6: {
        _25 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb45];
    }

    bb7: {
        _24 = <A4 as FromToNativeWasmType>::from_native(move _25) -> [return: bb8, unwind: bb45];
    }

    bb8: {
        _27 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb44];
    }

    bb9: {
        _26 = <A5 as FromToNativeWasmType>::from_native(move _27) -> [return: bb10, unwind: bb44];
    }

    bb10: {
        _29 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb43];
    }

    bb11: {
        _28 = <A6 as FromToNativeWasmType>::from_native(move _29) -> [return: bb12, unwind: bb43];
    }

    bb12: {
        _31 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb42];
    }

    bb13: {
        _30 = <A7 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb42];
    }

    bb14: {
        _33 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb41];
    }

    bb15: {
        _32 = <A8 as FromToNativeWasmType>::from_native(move _33) -> [return: bb16, unwind: bb41];
    }

    bb16: {
        _35 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb40];
    }

    bb17: {
        _34 = <A9 as FromToNativeWasmType>::from_native(move _35) -> [return: bb18, unwind: bb40];
    }

    bb18: {
        _37 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb39];
    }

    bb19: {
        _36 = <A10 as FromToNativeWasmType>::from_native(move _37) -> [return: bb20, unwind: bb39];
    }

    bb20: {
        _39 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb38];
    }

    bb21: {
        _38 = <A11 as FromToNativeWasmType>::from_native(move _39) -> [return: bb22, unwind: bb38];
    }

    bb22: {
        _41 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb37];
    }

    bb23: {
        _40 = <A12 as FromToNativeWasmType>::from_native(move _41) -> [return: bb24, unwind: bb37];
    }

    bb24: {
        _43 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb36];
    }

    bb25: {
        _42 = <A13 as FromToNativeWasmType>::from_native(move _43) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        _45 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb35];
    }

    bb27: {
        _44 = <A14 as FromToNativeWasmType>::from_native(move _45) -> [return: bb28, unwind: bb35];
    }

    bb28: {
        _47 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_16) -> [return: bb29, unwind: bb34];
    }

    bb29: {
        _46 = <A15 as FromToNativeWasmType>::from_native(move _47) -> [return: bb30, unwind: bb34];
    }

    bb30: {
        _49 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_17) -> [return: bb31, unwind: bb33];
    }

    bb31: {
        _48 = <A16 as FromToNativeWasmType>::from_native(move _49) -> [return: bb32, unwind: bb33];
    }

    bb32: {
        _0 = (move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48);
        return;
    }

    bb33 (cleanup): {
        drop(_46) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_44) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_42) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_40) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_38) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_36) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_34) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_32) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_30) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_28) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_26) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_24) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_22) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_20) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_18) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 16]>;
    let mut _4: std::result::Result<[i128; 16], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 16];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 16]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 16], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 16]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)) -> [i128; 16] {
    debug self => _1;
    let mut _0: [i128; 16];
    let mut _18: i128;
    let mut _19: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: i128;
    let mut _21: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A2;
    let mut _23: i128;
    let mut _24: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A3;
    let mut _26: i128;
    let mut _27: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A4;
    let mut _29: i128;
    let mut _30: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A5;
    let mut _32: i128;
    let mut _33: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A6;
    let mut _35: i128;
    let mut _36: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A7;
    let mut _38: i128;
    let mut _39: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A8;
    let mut _41: i128;
    let mut _42: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A9;
    let mut _44: i128;
    let mut _45: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A10;
    let mut _47: i128;
    let mut _48: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A11;
    let mut _50: i128;
    let mut _51: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A12;
    let mut _53: i128;
    let mut _54: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A13;
    let mut _56: i128;
    let mut _57: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A14;
    let mut _59: i128;
    let mut _60: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A15;
    let mut _62: i128;
    let mut _63: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A16;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
        let _16: A15;
        let _17: A16;
    }

    bb0: {
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _2 = move (_1.0: A1);
        _79 = const true;
        _3 = move (_1.1: A2);
        _78 = const true;
        _4 = move (_1.2: A3);
        _77 = const true;
        _5 = move (_1.3: A4);
        _76 = const true;
        _6 = move (_1.4: A5);
        _75 = const true;
        _7 = move (_1.5: A6);
        _74 = const true;
        _8 = move (_1.6: A7);
        _73 = const true;
        _9 = move (_1.7: A8);
        _72 = const true;
        _10 = move (_1.8: A9);
        _71 = const true;
        _11 = move (_1.9: A10);
        _70 = const true;
        _12 = move (_1.10: A11);
        _69 = const true;
        _13 = move (_1.11: A12);
        _68 = const true;
        _14 = move (_1.12: A13);
        _67 = const true;
        _15 = move (_1.13: A14);
        _66 = const true;
        _16 = move (_1.14: A15);
        _65 = const true;
        _17 = move (_1.15: A16);
        _19 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb49];
    }

    bb1: {
        _18 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _19) -> [return: bb2, unwind: bb49];
    }

    bb2: {
        _79 = const false;
        _22 = move _3;
        _21 = <A2 as FromToNativeWasmType>::to_native(move _22) -> [return: bb3, unwind: bb49];
    }

    bb3: {
        _20 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _21) -> [return: bb4, unwind: bb49];
    }

    bb4: {
        _78 = const false;
        _25 = move _4;
        _24 = <A3 as FromToNativeWasmType>::to_native(move _25) -> [return: bb5, unwind: bb49];
    }

    bb5: {
        _23 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _24) -> [return: bb6, unwind: bb49];
    }

    bb6: {
        _77 = const false;
        _28 = move _5;
        _27 = <A4 as FromToNativeWasmType>::to_native(move _28) -> [return: bb7, unwind: bb49];
    }

    bb7: {
        _26 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _27) -> [return: bb8, unwind: bb49];
    }

    bb8: {
        _76 = const false;
        _31 = move _6;
        _30 = <A5 as FromToNativeWasmType>::to_native(move _31) -> [return: bb9, unwind: bb49];
    }

    bb9: {
        _29 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _30) -> [return: bb10, unwind: bb49];
    }

    bb10: {
        _75 = const false;
        _34 = move _7;
        _33 = <A6 as FromToNativeWasmType>::to_native(move _34) -> [return: bb11, unwind: bb49];
    }

    bb11: {
        _32 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _33) -> [return: bb12, unwind: bb49];
    }

    bb12: {
        _74 = const false;
        _37 = move _8;
        _36 = <A7 as FromToNativeWasmType>::to_native(move _37) -> [return: bb13, unwind: bb49];
    }

    bb13: {
        _35 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _36) -> [return: bb14, unwind: bb49];
    }

    bb14: {
        _73 = const false;
        _40 = move _9;
        _39 = <A8 as FromToNativeWasmType>::to_native(move _40) -> [return: bb15, unwind: bb49];
    }

    bb15: {
        _38 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _39) -> [return: bb16, unwind: bb49];
    }

    bb16: {
        _72 = const false;
        _43 = move _10;
        _42 = <A9 as FromToNativeWasmType>::to_native(move _43) -> [return: bb17, unwind: bb49];
    }

    bb17: {
        _41 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _42) -> [return: bb18, unwind: bb49];
    }

    bb18: {
        _71 = const false;
        _46 = move _11;
        _45 = <A10 as FromToNativeWasmType>::to_native(move _46) -> [return: bb19, unwind: bb49];
    }

    bb19: {
        _44 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _45) -> [return: bb20, unwind: bb49];
    }

    bb20: {
        _70 = const false;
        _49 = move _12;
        _48 = <A11 as FromToNativeWasmType>::to_native(move _49) -> [return: bb21, unwind: bb49];
    }

    bb21: {
        _47 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _48) -> [return: bb22, unwind: bb49];
    }

    bb22: {
        _69 = const false;
        _52 = move _13;
        _51 = <A12 as FromToNativeWasmType>::to_native(move _52) -> [return: bb23, unwind: bb49];
    }

    bb23: {
        _50 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _51) -> [return: bb24, unwind: bb49];
    }

    bb24: {
        _68 = const false;
        _55 = move _14;
        _54 = <A13 as FromToNativeWasmType>::to_native(move _55) -> [return: bb25, unwind: bb49];
    }

    bb25: {
        _53 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _54) -> [return: bb26, unwind: bb49];
    }

    bb26: {
        _67 = const false;
        _58 = move _15;
        _57 = <A14 as FromToNativeWasmType>::to_native(move _58) -> [return: bb27, unwind: bb49];
    }

    bb27: {
        _56 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _57) -> [return: bb28, unwind: bb49];
    }

    bb28: {
        _66 = const false;
        _61 = move _16;
        _60 = <A15 as FromToNativeWasmType>::to_native(move _61) -> [return: bb29, unwind: bb49];
    }

    bb29: {
        _59 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _60) -> [return: bb30, unwind: bb49];
    }

    bb30: {
        _65 = const false;
        _64 = move _17;
        _63 = <A16 as FromToNativeWasmType>::to_native(move _64) -> [return: bb31, unwind: bb49];
    }

    bb31: {
        _62 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _63) -> [return: bb32, unwind: bb49];
    }

    bb32: {
        _0 = [move _18, move _20, move _23, move _26, move _29, move _32, move _35, move _38, move _41, move _44, move _47, move _50, move _53, move _56, move _59, move _62];
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        return;
    }

    bb33 (cleanup): {
        switchInt(_66) -> [0: bb34, otherwise: bb50];
    }

    bb34 (cleanup): {
        switchInt(_67) -> [0: bb35, otherwise: bb51];
    }

    bb35 (cleanup): {
        switchInt(_68) -> [0: bb36, otherwise: bb52];
    }

    bb36 (cleanup): {
        switchInt(_69) -> [0: bb37, otherwise: bb53];
    }

    bb37 (cleanup): {
        switchInt(_70) -> [0: bb38, otherwise: bb54];
    }

    bb38 (cleanup): {
        switchInt(_71) -> [0: bb39, otherwise: bb55];
    }

    bb39 (cleanup): {
        switchInt(_72) -> [0: bb40, otherwise: bb56];
    }

    bb40 (cleanup): {
        switchInt(_73) -> [0: bb41, otherwise: bb57];
    }

    bb41 (cleanup): {
        switchInt(_74) -> [0: bb42, otherwise: bb58];
    }

    bb42 (cleanup): {
        switchInt(_75) -> [0: bb43, otherwise: bb59];
    }

    bb43 (cleanup): {
        switchInt(_76) -> [0: bb44, otherwise: bb60];
    }

    bb44 (cleanup): {
        switchInt(_77) -> [0: bb45, otherwise: bb61];
    }

    bb45 (cleanup): {
        switchInt(_78) -> [0: bb46, otherwise: bb62];
    }

    bb46 (cleanup): {
        switchInt(_79) -> [0: bb47, otherwise: bb63];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48 (cleanup): {
        drop(_17) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_65) -> [0: bb33, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_16) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_15) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_14) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_13) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_12) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_11) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_10) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_9) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_8) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_7) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_6) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_5) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_4) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_3) -> [return: bb47, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 16] {
    let mut _0: [i128; 16];

    bb0: {
        _0 = [const 0_i128; 16];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 16_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S16<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);
    let mut _18: A1;
    let mut _19: A2;
    let mut _20: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A3;
    let mut _22: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A4;
    let mut _24: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A5;
    let mut _26: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A6;
    let mut _28: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A7;
    let mut _30: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A8;
    let mut _32: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A9;
    let mut _34: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A10;
    let mut _36: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A11;
    let mut _38: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A12;
    let mut _40: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A13;
    let mut _42: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A14;
    let mut _44: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A15;
    let mut _46: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A16;
    let mut _48: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
        let _16: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
        let _17: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _63 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _62 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _61 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _60 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _59 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _58 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _57 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _56 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _55 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _54 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _53 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _52 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _51 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _50 = const true;
        _16 = move (_1.14: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _49 = const true;
        _17 = move (_1.15: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb48];
    }

    bb1: {
        _63 = const false;
        _20 = move _3;
        _19 = <A2 as FromToNativeWasmType>::from_native(move _20) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _62 = const false;
        _22 = move _4;
        _21 = <A3 as FromToNativeWasmType>::from_native(move _22) -> [return: bb3, unwind: bb30];
    }

    bb3: {
        _61 = const false;
        _24 = move _5;
        _23 = <A4 as FromToNativeWasmType>::from_native(move _24) -> [return: bb4, unwind: bb29];
    }

    bb4: {
        _60 = const false;
        _26 = move _6;
        _25 = <A5 as FromToNativeWasmType>::from_native(move _26) -> [return: bb5, unwind: bb28];
    }

    bb5: {
        _59 = const false;
        _28 = move _7;
        _27 = <A6 as FromToNativeWasmType>::from_native(move _28) -> [return: bb6, unwind: bb27];
    }

    bb6: {
        _58 = const false;
        _30 = move _8;
        _29 = <A7 as FromToNativeWasmType>::from_native(move _30) -> [return: bb7, unwind: bb26];
    }

    bb7: {
        _57 = const false;
        _32 = move _9;
        _31 = <A8 as FromToNativeWasmType>::from_native(move _32) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _56 = const false;
        _34 = move _10;
        _33 = <A9 as FromToNativeWasmType>::from_native(move _34) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _55 = const false;
        _36 = move _11;
        _35 = <A10 as FromToNativeWasmType>::from_native(move _36) -> [return: bb10, unwind: bb23];
    }

    bb10: {
        _54 = const false;
        _38 = move _12;
        _37 = <A11 as FromToNativeWasmType>::from_native(move _38) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _53 = const false;
        _40 = move _13;
        _39 = <A12 as FromToNativeWasmType>::from_native(move _40) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        _52 = const false;
        _42 = move _14;
        _41 = <A13 as FromToNativeWasmType>::from_native(move _42) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _51 = const false;
        _44 = move _15;
        _43 = <A14 as FromToNativeWasmType>::from_native(move _44) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _50 = const false;
        _46 = move _16;
        _45 = <A15 as FromToNativeWasmType>::from_native(move _46) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        _49 = const false;
        _48 = move _17;
        _47 = <A16 as FromToNativeWasmType>::from_native(move _48) -> [return: bb16, unwind: bb17];
    }

    bb16: {
        _0 = (move _18, move _19, move _21, move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47);
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        return;
    }

    bb17 (cleanup): {
        drop(_45) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_43) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_41) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_39) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_37) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_35) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_33) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_31) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_29) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_27) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_25) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_23) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_21) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_19) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_18) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_50) -> [0: bb33, otherwise: bb49];
    }

    bb33 (cleanup): {
        switchInt(_51) -> [0: bb34, otherwise: bb50];
    }

    bb34 (cleanup): {
        switchInt(_52) -> [0: bb35, otherwise: bb51];
    }

    bb35 (cleanup): {
        switchInt(_53) -> [0: bb36, otherwise: bb52];
    }

    bb36 (cleanup): {
        switchInt(_54) -> [0: bb37, otherwise: bb53];
    }

    bb37 (cleanup): {
        switchInt(_55) -> [0: bb38, otherwise: bb54];
    }

    bb38 (cleanup): {
        switchInt(_56) -> [0: bb39, otherwise: bb55];
    }

    bb39 (cleanup): {
        switchInt(_57) -> [0: bb40, otherwise: bb56];
    }

    bb40 (cleanup): {
        switchInt(_58) -> [0: bb41, otherwise: bb57];
    }

    bb41 (cleanup): {
        switchInt(_59) -> [0: bb42, otherwise: bb58];
    }

    bb42 (cleanup): {
        switchInt(_60) -> [0: bb43, otherwise: bb59];
    }

    bb43 (cleanup): {
        switchInt(_61) -> [0: bb44, otherwise: bb60];
    }

    bb44 (cleanup): {
        switchInt(_62) -> [0: bb45, otherwise: bb61];
    }

    bb45 (cleanup): {
        switchInt(_63) -> [0: bb46, otherwise: bb62];
    }

    bb46 (cleanup): {
        resume;
    }

    bb47 (cleanup): {
        drop(_17) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_49) -> [0: bb32, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_16) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_15) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_14) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_13) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_12) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_11) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_10) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_9) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_8) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_7) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_6) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_5) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_4) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_3) -> [return: bb46, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)) -> S16<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16> {
    debug self => _1;
    let mut _0: externals::function::inner::S16<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let _16: A15;
    let _17: A16;
    let mut _18: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A2;
    let mut _21: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A3;
    let mut _23: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A4;
    let mut _25: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A5;
    let mut _27: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A6;
    let mut _29: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A7;
    let mut _31: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A8;
    let mut _33: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A9;
    let mut _35: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A10;
    let mut _37: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A11;
    let mut _39: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A12;
    let mut _41: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A13;
    let mut _43: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A14;
    let mut _45: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A15;
    let mut _47: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A16;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
    }

    bb0: {
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _2 = move (_1.0: A1);
        _63 = const true;
        _3 = move (_1.1: A2);
        _62 = const true;
        _4 = move (_1.2: A3);
        _61 = const true;
        _5 = move (_1.3: A4);
        _60 = const true;
        _6 = move (_1.4: A5);
        _59 = const true;
        _7 = move (_1.5: A6);
        _58 = const true;
        _8 = move (_1.6: A7);
        _57 = const true;
        _9 = move (_1.7: A8);
        _56 = const true;
        _10 = move (_1.8: A9);
        _55 = const true;
        _11 = move (_1.9: A10);
        _54 = const true;
        _12 = move (_1.10: A11);
        _53 = const true;
        _13 = move (_1.11: A12);
        _52 = const true;
        _14 = move (_1.12: A13);
        _51 = const true;
        _15 = move (_1.13: A14);
        _50 = const true;
        _16 = move (_1.14: A15);
        _49 = const true;
        _17 = move (_1.15: A16);
        _18 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb48];
    }

    bb1: {
        _63 = const false;
        _20 = move _3;
        _19 = <A2 as FromToNativeWasmType>::to_native(move _20) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _62 = const false;
        _22 = move _4;
        _21 = <A3 as FromToNativeWasmType>::to_native(move _22) -> [return: bb3, unwind: bb30];
    }

    bb3: {
        _61 = const false;
        _24 = move _5;
        _23 = <A4 as FromToNativeWasmType>::to_native(move _24) -> [return: bb4, unwind: bb29];
    }

    bb4: {
        _60 = const false;
        _26 = move _6;
        _25 = <A5 as FromToNativeWasmType>::to_native(move _26) -> [return: bb5, unwind: bb28];
    }

    bb5: {
        _59 = const false;
        _28 = move _7;
        _27 = <A6 as FromToNativeWasmType>::to_native(move _28) -> [return: bb6, unwind: bb27];
    }

    bb6: {
        _58 = const false;
        _30 = move _8;
        _29 = <A7 as FromToNativeWasmType>::to_native(move _30) -> [return: bb7, unwind: bb26];
    }

    bb7: {
        _57 = const false;
        _32 = move _9;
        _31 = <A8 as FromToNativeWasmType>::to_native(move _32) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _56 = const false;
        _34 = move _10;
        _33 = <A9 as FromToNativeWasmType>::to_native(move _34) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _55 = const false;
        _36 = move _11;
        _35 = <A10 as FromToNativeWasmType>::to_native(move _36) -> [return: bb10, unwind: bb23];
    }

    bb10: {
        _54 = const false;
        _38 = move _12;
        _37 = <A11 as FromToNativeWasmType>::to_native(move _38) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _53 = const false;
        _40 = move _13;
        _39 = <A12 as FromToNativeWasmType>::to_native(move _40) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        _52 = const false;
        _42 = move _14;
        _41 = <A13 as FromToNativeWasmType>::to_native(move _42) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _51 = const false;
        _44 = move _15;
        _43 = <A14 as FromToNativeWasmType>::to_native(move _44) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _50 = const false;
        _46 = move _16;
        _45 = <A15 as FromToNativeWasmType>::to_native(move _46) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        _49 = const false;
        _48 = move _17;
        _47 = <A16 as FromToNativeWasmType>::to_native(move _48) -> [return: bb16, unwind: bb17];
    }

    bb16: {
        _0 = S16::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>(move _18, move _19, move _21, move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47);
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        return;
    }

    bb17 (cleanup): {
        drop(_45) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_43) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_41) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_39) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_37) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_35) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_33) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_31) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_29) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_27) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_25) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_23) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_21) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_19) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_18) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_50) -> [0: bb33, otherwise: bb49];
    }

    bb33 (cleanup): {
        switchInt(_51) -> [0: bb34, otherwise: bb50];
    }

    bb34 (cleanup): {
        switchInt(_52) -> [0: bb35, otherwise: bb51];
    }

    bb35 (cleanup): {
        switchInt(_53) -> [0: bb36, otherwise: bb52];
    }

    bb36 (cleanup): {
        switchInt(_54) -> [0: bb37, otherwise: bb53];
    }

    bb37 (cleanup): {
        switchInt(_55) -> [0: bb38, otherwise: bb54];
    }

    bb38 (cleanup): {
        switchInt(_56) -> [0: bb39, otherwise: bb55];
    }

    bb39 (cleanup): {
        switchInt(_57) -> [0: bb40, otherwise: bb56];
    }

    bb40 (cleanup): {
        switchInt(_58) -> [0: bb41, otherwise: bb57];
    }

    bb41 (cleanup): {
        switchInt(_59) -> [0: bb42, otherwise: bb58];
    }

    bb42 (cleanup): {
        switchInt(_60) -> [0: bb43, otherwise: bb59];
    }

    bb43 (cleanup): {
        switchInt(_61) -> [0: bb44, otherwise: bb60];
    }

    bb44 (cleanup): {
        switchInt(_62) -> [0: bb45, otherwise: bb61];
    }

    bb45 (cleanup): {
        switchInt(_63) -> [0: bb46, otherwise: bb62];
    }

    bb46 (cleanup): {
        resume;
    }

    bb47 (cleanup): {
        drop(_17) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_49) -> [0: bb32, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_16) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_15) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_14) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_13) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_12) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_11) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_10) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_9) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_8) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_7) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_6) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_5) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_4) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_3) -> [return: bb46, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 16];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 16] = {
    let mut _0: &[wasmer_types::Type; 16];
    let mut _1: [wasmer_types::Type; 16];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _18: &Func;
    let _19: &Func;
    let _20: *const Func;
    let mut _21: *const ();
    let mut _23: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _24: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _25: &&Func;
    let mut _26: isize;
    let mut _27: isize;
    let mut _30: !;
    let mut _31: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _32: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _34: !;
    let mut _36: isize;
    scope 1 {
        debug func => _18;
        let _22: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _22;
            let _28: Rets;
            let _29: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _33: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _28;
            }
            scope 5 {
                debug trap => _29;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _33;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _35: &();
    }

    bb0: {
        _35 = const _;
        _21 = &raw const (*_35);
        _20 = move _21 as *const Func (PtrToPtr);
        _19 = &(*_20);
        _18 = _19;
        _25 = &_18;
        _24 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _25, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17 };
        _23 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _24);
        _22 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _23) -> [return: bb1, unwind continue];
    }

    bb1: {
        _27 = discriminant(_22);
        switchInt(move _27) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _26 = discriminant(((_22 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _26) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _33 = move ((_22 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _34 = resume_panic(move _33) -> unwind continue;
    }

    bb5: {
        _28 = move ((((_22 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _28) -> [return: bb6, unwind continue];
    }

    bb6: {
        _36 = discriminant(_22);
        switchInt(move _36) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _29 = move ((((_22 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _32 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _29) -> [return: bb8, unwind continue];
    }

    bb8: {
        _31 = move _32 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _30 = raise_user_trap(move _31) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: &&Func;
    let mut _37: &Func;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;

    bb0: {
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _53 = const true;
        _54 = const true;
        _55 = const true;
        _56 = const true;
        _57 = const true;
        _58 = const true;
        _59 = const true;
        _60 = const true;
        _61 = const true;
        _62 = const true;
        _63 = const true;
        _64 = const true;
        _65 = const true;
        _66 = const true;
        _67 = const true;
        _36 = deref_copy (_1.0: &&Func);
        _37 = deref_copy (*_36);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb79];
    }

    bb1: {
        _52 = const true;
        _67 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb49];
    }

    bb2: {
        _51 = const true;
        _66 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb47];
    }

    bb3: {
        _50 = const true;
        _65 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb45];
    }

    bb4: {
        _49 = const true;
        _64 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb43];
    }

    bb5: {
        _48 = const true;
        _63 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb41];
    }

    bb6: {
        _47 = const true;
        _62 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb39];
    }

    bb7: {
        _46 = const true;
        _61 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        _45 = const true;
        _60 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb35];
    }

    bb9: {
        _44 = const true;
        _59 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _43 = const true;
        _58 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        _42 = const true;
        _57 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _41 = const true;
        _56 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb27];
    }

    bb13: {
        _40 = const true;
        _55 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        _39 = const true;
        _54 = const false;
        _33 = move (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        _38 = const true;
        _53 = const false;
        _35 = move (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)>>::call(_37, move _3) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb18, unwind: bb79];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        drop(_32) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_38) -> [0: bb23, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_30) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_39) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_28) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_40) -> [0: bb27, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_26) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_41) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_24) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_42) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_22) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_43) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_20) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_44) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_18) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_45) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_16) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_46) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_14) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_47) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_12) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_48) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_10) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_49) -> [0: bb45, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_8) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_50) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_6) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_51) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_4) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_52) -> [0: bb79, otherwise: bb48];
    }

    bb50 (cleanup): {
        switchInt(_53) -> [0: bb19, otherwise: bb51];
    }

    bb51 (cleanup): {
        drop((_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_54) -> [0: bb50, otherwise: bb53];
    }

    bb53 (cleanup): {
        drop((_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_55) -> [0: bb52, otherwise: bb55];
    }

    bb55 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_56) -> [0: bb54, otherwise: bb57];
    }

    bb57 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_57) -> [0: bb56, otherwise: bb59];
    }

    bb59 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_58) -> [0: bb58, otherwise: bb61];
    }

    bb61 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_59) -> [0: bb60, otherwise: bb63];
    }

    bb63 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_60) -> [0: bb62, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_61) -> [0: bb64, otherwise: bb67];
    }

    bb67 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_62) -> [0: bb66, otherwise: bb69];
    }

    bb69 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_63) -> [0: bb68, otherwise: bb71];
    }

    bb71 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_64) -> [0: bb70, otherwise: bb73];
    }

    bb73 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_65) -> [0: bb72, otherwise: bb75];
    }

    bb75 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_66) -> [0: bb74, otherwise: bb77];
    }

    bb77 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_67) -> [0: bb76, otherwise: bb78];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _18: &Func;
    let _19: &Func;
    let _20: *const Func;
    let mut _21: *const ();
    let mut _23: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _24: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _25: &&Func;
    let mut _26: &&Env;
    let mut _27: isize;
    let mut _28: isize;
    let mut _31: !;
    let mut _32: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _33: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _35: !;
    let mut _37: isize;
    scope 1 {
        debug func => _18;
        let _22: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _22;
            let _29: Rets;
            let _30: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _34: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _29;
            }
            scope 5 {
                debug trap => _30;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _34;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _36: &();
    }

    bb0: {
        _36 = const _;
        _21 = &raw const (*_36);
        _20 = move _21 as *const Func (PtrToPtr);
        _19 = &(*_20);
        _18 = _19;
        _25 = &_18;
        _26 = &_1;
        _24 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _25, env: move _26, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17 };
        _23 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _24);
        _22 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _23) -> [return: bb1, unwind continue];
    }

    bb1: {
        _28 = discriminant(_22);
        switchInt(move _28) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _27 = discriminant(((_22 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _27) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _34 = move ((_22 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _35 = resume_panic(move _34) -> unwind continue;
    }

    bb5: {
        _29 = move ((((_22 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _29) -> [return: bb6, unwind continue];
    }

    bb6: {
        _37 = discriminant(_22);
        switchInt(move _37) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _30 = move ((((_22 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _33 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _30) -> [return: bb8, unwind continue];
    }

    bb8: {
        _32 = move _33 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _31 = raise_user_trap(move _32) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: &&Func;
    let mut _37: &Func;
    let mut _38: &&Env;
    let mut _39: &Env;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;

    bb0: {
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _55 = const true;
        _56 = const true;
        _57 = const true;
        _58 = const true;
        _59 = const true;
        _60 = const true;
        _61 = const true;
        _62 = const true;
        _63 = const true;
        _64 = const true;
        _65 = const true;
        _66 = const true;
        _67 = const true;
        _68 = const true;
        _69 = const true;
        _36 = deref_copy (_1.0: &&Func);
        _37 = deref_copy (*_36);
        _38 = deref_copy (_1.1: &&Env);
        _39 = deref_copy (*_38);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb79];
    }

    bb1: {
        _54 = const true;
        _69 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb49];
    }

    bb2: {
        _53 = const true;
        _68 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb47];
    }

    bb3: {
        _52 = const true;
        _67 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb45];
    }

    bb4: {
        _51 = const true;
        _66 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb43];
    }

    bb5: {
        _50 = const true;
        _65 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb41];
    }

    bb6: {
        _49 = const true;
        _64 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb39];
    }

    bb7: {
        _48 = const true;
        _63 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        _47 = const true;
        _62 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb35];
    }

    bb9: {
        _46 = const true;
        _61 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _45 = const true;
        _60 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        _44 = const true;
        _59 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _43 = const true;
        _58 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb27];
    }

    bb13: {
        _42 = const true;
        _57 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        _41 = const true;
        _56 = const false;
        _33 = move (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        _40 = const true;
        _55 = const false;
        _35 = move (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _3 = (_39, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)>>::call(_37, move _3) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb18, unwind: bb79];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        resume;
    }

    bb20 (cleanup): {
        drop(_32) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_40) -> [0: bb23, otherwise: bb20];
    }

    bb22 (cleanup): {
        drop(_30) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_41) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_28) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_42) -> [0: bb27, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_26) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_43) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_24) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_44) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_22) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_45) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_20) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_46) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_18) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_47) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_16) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_48) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_14) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_49) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_12) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_50) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_10) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_51) -> [0: bb45, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_8) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_52) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_6) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_53) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_4) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_54) -> [0: bb79, otherwise: bb48];
    }

    bb50 (cleanup): {
        switchInt(_55) -> [0: bb19, otherwise: bb51];
    }

    bb51 (cleanup): {
        drop((_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_56) -> [0: bb50, otherwise: bb53];
    }

    bb53 (cleanup): {
        drop((_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_57) -> [0: bb52, otherwise: bb55];
    }

    bb55 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_58) -> [0: bb54, otherwise: bb57];
    }

    bb57 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_59) -> [0: bb56, otherwise: bb59];
    }

    bb59 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_60) -> [0: bb58, otherwise: bb61];
    }

    bb61 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_61) -> [0: bb60, otherwise: bb63];
    }

    bb63 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_62) -> [0: bb62, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_63) -> [0: bb64, otherwise: bb67];
    }

    bb67 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_64) -> [0: bb66, otherwise: bb69];
    }

    bb69 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_65) -> [0: bb68, otherwise: bb71];
    }

    bb71 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_66) -> [0: bb70, otherwise: bb73];
    }

    bb73 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_67) -> [0: bb72, otherwise: bb75];
    }

    bb75 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_68) -> [0: bb74, otherwise: bb77];
    }

    bb77 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_69) -> [0: bb76, otherwise: bb78];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 17_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 17]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17);
    let mut _19: A1;
    let mut _20: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A2;
    let mut _22: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A3;
    let mut _24: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A4;
    let mut _26: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A5;
    let mut _28: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A6;
    let mut _30: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A7;
    let mut _32: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A8;
    let mut _34: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A9;
    let mut _36: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A10;
    let mut _38: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A11;
    let mut _40: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A12;
    let mut _42: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A13;
    let mut _44: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A14;
    let mut _46: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A15;
    let mut _48: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A16;
    let mut _50: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A17;
    let mut _52: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
        let _16: i128;
        let _17: i128;
        let _18: i128;
    }

    bb0: {
        _2 = _1[0 of 17];
        _3 = _1[1 of 17];
        _4 = _1[2 of 17];
        _5 = _1[3 of 17];
        _6 = _1[4 of 17];
        _7 = _1[5 of 17];
        _8 = _1[6 of 17];
        _9 = _1[7 of 17];
        _10 = _1[8 of 17];
        _11 = _1[9 of 17];
        _12 = _1[10 of 17];
        _13 = _1[11 of 17];
        _14 = _1[12 of 17];
        _15 = _1[13 of 17];
        _16 = _1[14 of 17];
        _17 = _1[15 of 17];
        _18 = _1[16 of 17];
        _20 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _19 = <A1 as FromToNativeWasmType>::from_native(move _20) -> [return: bb2, unwind continue];
    }

    bb2: {
        _22 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb50];
    }

    bb3: {
        _21 = <A2 as FromToNativeWasmType>::from_native(move _22) -> [return: bb4, unwind: bb50];
    }

    bb4: {
        _24 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb49];
    }

    bb5: {
        _23 = <A3 as FromToNativeWasmType>::from_native(move _24) -> [return: bb6, unwind: bb49];
    }

    bb6: {
        _26 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb48];
    }

    bb7: {
        _25 = <A4 as FromToNativeWasmType>::from_native(move _26) -> [return: bb8, unwind: bb48];
    }

    bb8: {
        _28 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb47];
    }

    bb9: {
        _27 = <A5 as FromToNativeWasmType>::from_native(move _28) -> [return: bb10, unwind: bb47];
    }

    bb10: {
        _30 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb46];
    }

    bb11: {
        _29 = <A6 as FromToNativeWasmType>::from_native(move _30) -> [return: bb12, unwind: bb46];
    }

    bb12: {
        _32 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb45];
    }

    bb13: {
        _31 = <A7 as FromToNativeWasmType>::from_native(move _32) -> [return: bb14, unwind: bb45];
    }

    bb14: {
        _34 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb44];
    }

    bb15: {
        _33 = <A8 as FromToNativeWasmType>::from_native(move _34) -> [return: bb16, unwind: bb44];
    }

    bb16: {
        _36 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb43];
    }

    bb17: {
        _35 = <A9 as FromToNativeWasmType>::from_native(move _36) -> [return: bb18, unwind: bb43];
    }

    bb18: {
        _38 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb42];
    }

    bb19: {
        _37 = <A10 as FromToNativeWasmType>::from_native(move _38) -> [return: bb20, unwind: bb42];
    }

    bb20: {
        _40 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb41];
    }

    bb21: {
        _39 = <A11 as FromToNativeWasmType>::from_native(move _40) -> [return: bb22, unwind: bb41];
    }

    bb22: {
        _42 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb40];
    }

    bb23: {
        _41 = <A12 as FromToNativeWasmType>::from_native(move _42) -> [return: bb24, unwind: bb40];
    }

    bb24: {
        _44 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb39];
    }

    bb25: {
        _43 = <A13 as FromToNativeWasmType>::from_native(move _44) -> [return: bb26, unwind: bb39];
    }

    bb26: {
        _46 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb38];
    }

    bb27: {
        _45 = <A14 as FromToNativeWasmType>::from_native(move _46) -> [return: bb28, unwind: bb38];
    }

    bb28: {
        _48 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_16) -> [return: bb29, unwind: bb37];
    }

    bb29: {
        _47 = <A15 as FromToNativeWasmType>::from_native(move _48) -> [return: bb30, unwind: bb37];
    }

    bb30: {
        _50 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_17) -> [return: bb31, unwind: bb36];
    }

    bb31: {
        _49 = <A16 as FromToNativeWasmType>::from_native(move _50) -> [return: bb32, unwind: bb36];
    }

    bb32: {
        _52 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_18) -> [return: bb33, unwind: bb35];
    }

    bb33: {
        _51 = <A17 as FromToNativeWasmType>::from_native(move _52) -> [return: bb34, unwind: bb35];
    }

    bb34: {
        _0 = (move _19, move _21, move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51);
        return;
    }

    bb35 (cleanup): {
        drop(_49) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_47) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_45) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_43) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_41) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_39) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_37) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_35) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_33) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_31) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_29) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_27) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_25) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_23) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_21) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_19) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 17]>;
    let mut _4: std::result::Result<[i128; 17], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 17];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 17]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 17], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 17]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)) -> [i128; 17] {
    debug self => _1;
    let mut _0: [i128; 17];
    let mut _19: i128;
    let mut _20: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: i128;
    let mut _22: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A2;
    let mut _24: i128;
    let mut _25: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A3;
    let mut _27: i128;
    let mut _28: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A4;
    let mut _30: i128;
    let mut _31: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A5;
    let mut _33: i128;
    let mut _34: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A6;
    let mut _36: i128;
    let mut _37: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A7;
    let mut _39: i128;
    let mut _40: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A8;
    let mut _42: i128;
    let mut _43: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A9;
    let mut _45: i128;
    let mut _46: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A10;
    let mut _48: i128;
    let mut _49: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A11;
    let mut _51: i128;
    let mut _52: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A12;
    let mut _54: i128;
    let mut _55: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A13;
    let mut _57: i128;
    let mut _58: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A14;
    let mut _60: i128;
    let mut _61: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A15;
    let mut _63: i128;
    let mut _64: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A16;
    let mut _66: i128;
    let mut _67: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _68: A17;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
        let _16: A15;
        let _17: A16;
        let _18: A17;
    }

    bb0: {
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _2 = move (_1.0: A1);
        _84 = const true;
        _3 = move (_1.1: A2);
        _83 = const true;
        _4 = move (_1.2: A3);
        _82 = const true;
        _5 = move (_1.3: A4);
        _81 = const true;
        _6 = move (_1.4: A5);
        _80 = const true;
        _7 = move (_1.5: A6);
        _79 = const true;
        _8 = move (_1.6: A7);
        _78 = const true;
        _9 = move (_1.7: A8);
        _77 = const true;
        _10 = move (_1.8: A9);
        _76 = const true;
        _11 = move (_1.9: A10);
        _75 = const true;
        _12 = move (_1.10: A11);
        _74 = const true;
        _13 = move (_1.11: A12);
        _73 = const true;
        _14 = move (_1.12: A13);
        _72 = const true;
        _15 = move (_1.13: A14);
        _71 = const true;
        _16 = move (_1.14: A15);
        _70 = const true;
        _17 = move (_1.15: A16);
        _69 = const true;
        _18 = move (_1.16: A17);
        _20 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb52];
    }

    bb1: {
        _19 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _20) -> [return: bb2, unwind: bb52];
    }

    bb2: {
        _84 = const false;
        _23 = move _3;
        _22 = <A2 as FromToNativeWasmType>::to_native(move _23) -> [return: bb3, unwind: bb52];
    }

    bb3: {
        _21 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _22) -> [return: bb4, unwind: bb52];
    }

    bb4: {
        _83 = const false;
        _26 = move _4;
        _25 = <A3 as FromToNativeWasmType>::to_native(move _26) -> [return: bb5, unwind: bb52];
    }

    bb5: {
        _24 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _25) -> [return: bb6, unwind: bb52];
    }

    bb6: {
        _82 = const false;
        _29 = move _5;
        _28 = <A4 as FromToNativeWasmType>::to_native(move _29) -> [return: bb7, unwind: bb52];
    }

    bb7: {
        _27 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _28) -> [return: bb8, unwind: bb52];
    }

    bb8: {
        _81 = const false;
        _32 = move _6;
        _31 = <A5 as FromToNativeWasmType>::to_native(move _32) -> [return: bb9, unwind: bb52];
    }

    bb9: {
        _30 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _31) -> [return: bb10, unwind: bb52];
    }

    bb10: {
        _80 = const false;
        _35 = move _7;
        _34 = <A6 as FromToNativeWasmType>::to_native(move _35) -> [return: bb11, unwind: bb52];
    }

    bb11: {
        _33 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _34) -> [return: bb12, unwind: bb52];
    }

    bb12: {
        _79 = const false;
        _38 = move _8;
        _37 = <A7 as FromToNativeWasmType>::to_native(move _38) -> [return: bb13, unwind: bb52];
    }

    bb13: {
        _36 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _37) -> [return: bb14, unwind: bb52];
    }

    bb14: {
        _78 = const false;
        _41 = move _9;
        _40 = <A8 as FromToNativeWasmType>::to_native(move _41) -> [return: bb15, unwind: bb52];
    }

    bb15: {
        _39 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _40) -> [return: bb16, unwind: bb52];
    }

    bb16: {
        _77 = const false;
        _44 = move _10;
        _43 = <A9 as FromToNativeWasmType>::to_native(move _44) -> [return: bb17, unwind: bb52];
    }

    bb17: {
        _42 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _43) -> [return: bb18, unwind: bb52];
    }

    bb18: {
        _76 = const false;
        _47 = move _11;
        _46 = <A10 as FromToNativeWasmType>::to_native(move _47) -> [return: bb19, unwind: bb52];
    }

    bb19: {
        _45 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _46) -> [return: bb20, unwind: bb52];
    }

    bb20: {
        _75 = const false;
        _50 = move _12;
        _49 = <A11 as FromToNativeWasmType>::to_native(move _50) -> [return: bb21, unwind: bb52];
    }

    bb21: {
        _48 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _49) -> [return: bb22, unwind: bb52];
    }

    bb22: {
        _74 = const false;
        _53 = move _13;
        _52 = <A12 as FromToNativeWasmType>::to_native(move _53) -> [return: bb23, unwind: bb52];
    }

    bb23: {
        _51 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _52) -> [return: bb24, unwind: bb52];
    }

    bb24: {
        _73 = const false;
        _56 = move _14;
        _55 = <A13 as FromToNativeWasmType>::to_native(move _56) -> [return: bb25, unwind: bb52];
    }

    bb25: {
        _54 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _55) -> [return: bb26, unwind: bb52];
    }

    bb26: {
        _72 = const false;
        _59 = move _15;
        _58 = <A14 as FromToNativeWasmType>::to_native(move _59) -> [return: bb27, unwind: bb52];
    }

    bb27: {
        _57 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _58) -> [return: bb28, unwind: bb52];
    }

    bb28: {
        _71 = const false;
        _62 = move _16;
        _61 = <A15 as FromToNativeWasmType>::to_native(move _62) -> [return: bb29, unwind: bb52];
    }

    bb29: {
        _60 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _61) -> [return: bb30, unwind: bb52];
    }

    bb30: {
        _70 = const false;
        _65 = move _17;
        _64 = <A16 as FromToNativeWasmType>::to_native(move _65) -> [return: bb31, unwind: bb52];
    }

    bb31: {
        _63 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _64) -> [return: bb32, unwind: bb52];
    }

    bb32: {
        _69 = const false;
        _68 = move _18;
        _67 = <A17 as FromToNativeWasmType>::to_native(move _68) -> [return: bb33, unwind: bb52];
    }

    bb33: {
        _66 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _67) -> [return: bb34, unwind: bb52];
    }

    bb34: {
        _0 = [move _19, move _21, move _24, move _27, move _30, move _33, move _36, move _39, move _42, move _45, move _48, move _51, move _54, move _57, move _60, move _63, move _66];
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        return;
    }

    bb35 (cleanup): {
        switchInt(_70) -> [0: bb36, otherwise: bb53];
    }

    bb36 (cleanup): {
        switchInt(_71) -> [0: bb37, otherwise: bb54];
    }

    bb37 (cleanup): {
        switchInt(_72) -> [0: bb38, otherwise: bb55];
    }

    bb38 (cleanup): {
        switchInt(_73) -> [0: bb39, otherwise: bb56];
    }

    bb39 (cleanup): {
        switchInt(_74) -> [0: bb40, otherwise: bb57];
    }

    bb40 (cleanup): {
        switchInt(_75) -> [0: bb41, otherwise: bb58];
    }

    bb41 (cleanup): {
        switchInt(_76) -> [0: bb42, otherwise: bb59];
    }

    bb42 (cleanup): {
        switchInt(_77) -> [0: bb43, otherwise: bb60];
    }

    bb43 (cleanup): {
        switchInt(_78) -> [0: bb44, otherwise: bb61];
    }

    bb44 (cleanup): {
        switchInt(_79) -> [0: bb45, otherwise: bb62];
    }

    bb45 (cleanup): {
        switchInt(_80) -> [0: bb46, otherwise: bb63];
    }

    bb46 (cleanup): {
        switchInt(_81) -> [0: bb47, otherwise: bb64];
    }

    bb47 (cleanup): {
        switchInt(_82) -> [0: bb48, otherwise: bb65];
    }

    bb48 (cleanup): {
        switchInt(_83) -> [0: bb49, otherwise: bb66];
    }

    bb49 (cleanup): {
        switchInt(_84) -> [0: bb50, otherwise: bb67];
    }

    bb50 (cleanup): {
        resume;
    }

    bb51 (cleanup): {
        drop(_18) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_69) -> [0: bb35, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_17) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_16) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_15) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_14) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_13) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_12) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_11) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_10) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_9) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_8) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_7) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_6) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_5) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_4) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_3) -> [return: bb50, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 17] {
    let mut _0: [i128; 17];

    bb0: {
        _0 = [const 0_i128; 17];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 17_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S17<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17);
    let mut _19: A1;
    let mut _20: A2;
    let mut _21: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A3;
    let mut _23: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A4;
    let mut _25: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A5;
    let mut _27: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A6;
    let mut _29: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A7;
    let mut _31: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A8;
    let mut _33: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A9;
    let mut _35: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A10;
    let mut _37: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A11;
    let mut _39: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A12;
    let mut _41: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A13;
    let mut _43: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A14;
    let mut _45: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A15;
    let mut _47: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A16;
    let mut _49: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A17;
    let mut _51: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
        let _16: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
        let _17: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
        let _18: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _67 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _66 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _65 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _64 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _63 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _62 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _61 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _60 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _59 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _58 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _57 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _56 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _55 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _54 = const true;
        _16 = move (_1.14: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _53 = const true;
        _17 = move (_1.15: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _52 = const true;
        _18 = move (_1.16: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _19 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb51];
    }

    bb1: {
        _67 = const false;
        _21 = move _3;
        _20 = <A2 as FromToNativeWasmType>::from_native(move _21) -> [return: bb2, unwind: bb33];
    }

    bb2: {
        _66 = const false;
        _23 = move _4;
        _22 = <A3 as FromToNativeWasmType>::from_native(move _23) -> [return: bb3, unwind: bb32];
    }

    bb3: {
        _65 = const false;
        _25 = move _5;
        _24 = <A4 as FromToNativeWasmType>::from_native(move _25) -> [return: bb4, unwind: bb31];
    }

    bb4: {
        _64 = const false;
        _27 = move _6;
        _26 = <A5 as FromToNativeWasmType>::from_native(move _27) -> [return: bb5, unwind: bb30];
    }

    bb5: {
        _63 = const false;
        _29 = move _7;
        _28 = <A6 as FromToNativeWasmType>::from_native(move _29) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        _62 = const false;
        _31 = move _8;
        _30 = <A7 as FromToNativeWasmType>::from_native(move _31) -> [return: bb7, unwind: bb28];
    }

    bb7: {
        _61 = const false;
        _33 = move _9;
        _32 = <A8 as FromToNativeWasmType>::from_native(move _33) -> [return: bb8, unwind: bb27];
    }

    bb8: {
        _60 = const false;
        _35 = move _10;
        _34 = <A9 as FromToNativeWasmType>::from_native(move _35) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        _59 = const false;
        _37 = move _11;
        _36 = <A10 as FromToNativeWasmType>::from_native(move _37) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        _58 = const false;
        _39 = move _12;
        _38 = <A11 as FromToNativeWasmType>::from_native(move _39) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        _57 = const false;
        _41 = move _13;
        _40 = <A12 as FromToNativeWasmType>::from_native(move _41) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        _56 = const false;
        _43 = move _14;
        _42 = <A13 as FromToNativeWasmType>::from_native(move _43) -> [return: bb13, unwind: bb22];
    }

    bb13: {
        _55 = const false;
        _45 = move _15;
        _44 = <A14 as FromToNativeWasmType>::from_native(move _45) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        _54 = const false;
        _47 = move _16;
        _46 = <A15 as FromToNativeWasmType>::from_native(move _47) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _53 = const false;
        _49 = move _17;
        _48 = <A16 as FromToNativeWasmType>::from_native(move _49) -> [return: bb16, unwind: bb19];
    }

    bb16: {
        _52 = const false;
        _51 = move _18;
        _50 = <A17 as FromToNativeWasmType>::from_native(move _51) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _0 = (move _19, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50);
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        return;
    }

    bb18 (cleanup): {
        drop(_48) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_46) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_44) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_42) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_40) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_38) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_36) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_34) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_32) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_30) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_28) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_26) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_24) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_22) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_20) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_19) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_53) -> [0: bb35, otherwise: bb52];
    }

    bb35 (cleanup): {
        switchInt(_54) -> [0: bb36, otherwise: bb53];
    }

    bb36 (cleanup): {
        switchInt(_55) -> [0: bb37, otherwise: bb54];
    }

    bb37 (cleanup): {
        switchInt(_56) -> [0: bb38, otherwise: bb55];
    }

    bb38 (cleanup): {
        switchInt(_57) -> [0: bb39, otherwise: bb56];
    }

    bb39 (cleanup): {
        switchInt(_58) -> [0: bb40, otherwise: bb57];
    }

    bb40 (cleanup): {
        switchInt(_59) -> [0: bb41, otherwise: bb58];
    }

    bb41 (cleanup): {
        switchInt(_60) -> [0: bb42, otherwise: bb59];
    }

    bb42 (cleanup): {
        switchInt(_61) -> [0: bb43, otherwise: bb60];
    }

    bb43 (cleanup): {
        switchInt(_62) -> [0: bb44, otherwise: bb61];
    }

    bb44 (cleanup): {
        switchInt(_63) -> [0: bb45, otherwise: bb62];
    }

    bb45 (cleanup): {
        switchInt(_64) -> [0: bb46, otherwise: bb63];
    }

    bb46 (cleanup): {
        switchInt(_65) -> [0: bb47, otherwise: bb64];
    }

    bb47 (cleanup): {
        switchInt(_66) -> [0: bb48, otherwise: bb65];
    }

    bb48 (cleanup): {
        switchInt(_67) -> [0: bb49, otherwise: bb66];
    }

    bb49 (cleanup): {
        resume;
    }

    bb50 (cleanup): {
        drop(_18) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_52) -> [0: bb34, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_17) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_16) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_15) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_14) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_13) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_12) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_11) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_10) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_9) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_8) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_7) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_6) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_5) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_4) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_3) -> [return: bb49, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)) -> S17<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17> {
    debug self => _1;
    let mut _0: externals::function::inner::S17<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let _16: A15;
    let _17: A16;
    let _18: A17;
    let mut _19: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A2;
    let mut _22: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A3;
    let mut _24: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A4;
    let mut _26: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A5;
    let mut _28: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A6;
    let mut _30: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A7;
    let mut _32: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A8;
    let mut _34: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A9;
    let mut _36: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A10;
    let mut _38: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A11;
    let mut _40: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A12;
    let mut _42: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A13;
    let mut _44: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A14;
    let mut _46: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A15;
    let mut _48: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A16;
    let mut _50: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A17;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
    }

    bb0: {
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _2 = move (_1.0: A1);
        _67 = const true;
        _3 = move (_1.1: A2);
        _66 = const true;
        _4 = move (_1.2: A3);
        _65 = const true;
        _5 = move (_1.3: A4);
        _64 = const true;
        _6 = move (_1.4: A5);
        _63 = const true;
        _7 = move (_1.5: A6);
        _62 = const true;
        _8 = move (_1.6: A7);
        _61 = const true;
        _9 = move (_1.7: A8);
        _60 = const true;
        _10 = move (_1.8: A9);
        _59 = const true;
        _11 = move (_1.9: A10);
        _58 = const true;
        _12 = move (_1.10: A11);
        _57 = const true;
        _13 = move (_1.11: A12);
        _56 = const true;
        _14 = move (_1.12: A13);
        _55 = const true;
        _15 = move (_1.13: A14);
        _54 = const true;
        _16 = move (_1.14: A15);
        _53 = const true;
        _17 = move (_1.15: A16);
        _52 = const true;
        _18 = move (_1.16: A17);
        _19 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb51];
    }

    bb1: {
        _67 = const false;
        _21 = move _3;
        _20 = <A2 as FromToNativeWasmType>::to_native(move _21) -> [return: bb2, unwind: bb33];
    }

    bb2: {
        _66 = const false;
        _23 = move _4;
        _22 = <A3 as FromToNativeWasmType>::to_native(move _23) -> [return: bb3, unwind: bb32];
    }

    bb3: {
        _65 = const false;
        _25 = move _5;
        _24 = <A4 as FromToNativeWasmType>::to_native(move _25) -> [return: bb4, unwind: bb31];
    }

    bb4: {
        _64 = const false;
        _27 = move _6;
        _26 = <A5 as FromToNativeWasmType>::to_native(move _27) -> [return: bb5, unwind: bb30];
    }

    bb5: {
        _63 = const false;
        _29 = move _7;
        _28 = <A6 as FromToNativeWasmType>::to_native(move _29) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        _62 = const false;
        _31 = move _8;
        _30 = <A7 as FromToNativeWasmType>::to_native(move _31) -> [return: bb7, unwind: bb28];
    }

    bb7: {
        _61 = const false;
        _33 = move _9;
        _32 = <A8 as FromToNativeWasmType>::to_native(move _33) -> [return: bb8, unwind: bb27];
    }

    bb8: {
        _60 = const false;
        _35 = move _10;
        _34 = <A9 as FromToNativeWasmType>::to_native(move _35) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        _59 = const false;
        _37 = move _11;
        _36 = <A10 as FromToNativeWasmType>::to_native(move _37) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        _58 = const false;
        _39 = move _12;
        _38 = <A11 as FromToNativeWasmType>::to_native(move _39) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        _57 = const false;
        _41 = move _13;
        _40 = <A12 as FromToNativeWasmType>::to_native(move _41) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        _56 = const false;
        _43 = move _14;
        _42 = <A13 as FromToNativeWasmType>::to_native(move _43) -> [return: bb13, unwind: bb22];
    }

    bb13: {
        _55 = const false;
        _45 = move _15;
        _44 = <A14 as FromToNativeWasmType>::to_native(move _45) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        _54 = const false;
        _47 = move _16;
        _46 = <A15 as FromToNativeWasmType>::to_native(move _47) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _53 = const false;
        _49 = move _17;
        _48 = <A16 as FromToNativeWasmType>::to_native(move _49) -> [return: bb16, unwind: bb19];
    }

    bb16: {
        _52 = const false;
        _51 = move _18;
        _50 = <A17 as FromToNativeWasmType>::to_native(move _51) -> [return: bb17, unwind: bb18];
    }

    bb17: {
        _0 = S17::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>(move _19, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50);
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        return;
    }

    bb18 (cleanup): {
        drop(_48) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_46) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_44) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_42) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_40) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_38) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_36) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_34) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_32) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_30) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_28) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_26) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_24) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_22) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_20) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_19) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_53) -> [0: bb35, otherwise: bb52];
    }

    bb35 (cleanup): {
        switchInt(_54) -> [0: bb36, otherwise: bb53];
    }

    bb36 (cleanup): {
        switchInt(_55) -> [0: bb37, otherwise: bb54];
    }

    bb37 (cleanup): {
        switchInt(_56) -> [0: bb38, otherwise: bb55];
    }

    bb38 (cleanup): {
        switchInt(_57) -> [0: bb39, otherwise: bb56];
    }

    bb39 (cleanup): {
        switchInt(_58) -> [0: bb40, otherwise: bb57];
    }

    bb40 (cleanup): {
        switchInt(_59) -> [0: bb41, otherwise: bb58];
    }

    bb41 (cleanup): {
        switchInt(_60) -> [0: bb42, otherwise: bb59];
    }

    bb42 (cleanup): {
        switchInt(_61) -> [0: bb43, otherwise: bb60];
    }

    bb43 (cleanup): {
        switchInt(_62) -> [0: bb44, otherwise: bb61];
    }

    bb44 (cleanup): {
        switchInt(_63) -> [0: bb45, otherwise: bb62];
    }

    bb45 (cleanup): {
        switchInt(_64) -> [0: bb46, otherwise: bb63];
    }

    bb46 (cleanup): {
        switchInt(_65) -> [0: bb47, otherwise: bb64];
    }

    bb47 (cleanup): {
        switchInt(_66) -> [0: bb48, otherwise: bb65];
    }

    bb48 (cleanup): {
        switchInt(_67) -> [0: bb49, otherwise: bb66];
    }

    bb49 (cleanup): {
        resume;
    }

    bb50 (cleanup): {
        drop(_18) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_52) -> [0: bb34, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_17) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_16) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_15) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_14) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_13) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_12) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_11) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_10) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_9) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_8) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_7) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_6) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_5) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_4) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_3) -> [return: bb49, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 17];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 17] = {
    let mut _0: &[wasmer_types::Type; 17];
    let mut _1: [wasmer_types::Type; 17];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _19: &Func;
    let _20: &Func;
    let _21: *const Func;
    let mut _22: *const ();
    let mut _24: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _25: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _26: &&Func;
    let mut _27: isize;
    let mut _28: isize;
    let mut _31: !;
    let mut _32: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _33: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _35: !;
    let mut _37: isize;
    scope 1 {
        debug func => _19;
        let _23: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _23;
            let _29: Rets;
            let _30: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _34: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _29;
            }
            scope 5 {
                debug trap => _30;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _34;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _36: &();
    }

    bb0: {
        _36 = const _;
        _22 = &raw const (*_36);
        _21 = move _22 as *const Func (PtrToPtr);
        _20 = &(*_21);
        _19 = _20;
        _26 = &_19;
        _25 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _26, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18 };
        _24 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _25);
        _23 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _24) -> [return: bb1, unwind continue];
    }

    bb1: {
        _28 = discriminant(_23);
        switchInt(move _28) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _27 = discriminant(((_23 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _27) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _34 = move ((_23 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _35 = resume_panic(move _34) -> unwind continue;
    }

    bb5: {
        _29 = move ((((_23 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _29) -> [return: bb6, unwind continue];
    }

    bb6: {
        _37 = discriminant(_23);
        switchInt(move _37) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _30 = move ((((_23 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _33 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _30) -> [return: bb8, unwind continue];
    }

    bb8: {
        _32 = move _33 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _31 = raise_user_trap(move _32) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: &&Func;
    let mut _39: &Func;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;

    bb0: {
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _56 = const true;
        _57 = const true;
        _58 = const true;
        _59 = const true;
        _60 = const true;
        _61 = const true;
        _62 = const true;
        _63 = const true;
        _64 = const true;
        _65 = const true;
        _66 = const true;
        _67 = const true;
        _68 = const true;
        _69 = const true;
        _70 = const true;
        _71 = const true;
        _38 = deref_copy (_1.0: &&Func);
        _39 = deref_copy (*_38);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb84];
    }

    bb1: {
        _55 = const true;
        _71 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb52];
    }

    bb2: {
        _54 = const true;
        _70 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb50];
    }

    bb3: {
        _53 = const true;
        _69 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb48];
    }

    bb4: {
        _52 = const true;
        _68 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb46];
    }

    bb5: {
        _51 = const true;
        _67 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb44];
    }

    bb6: {
        _50 = const true;
        _66 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        _49 = const true;
        _65 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb40];
    }

    bb8: {
        _48 = const true;
        _64 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb38];
    }

    bb9: {
        _47 = const true;
        _63 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb36];
    }

    bb10: {
        _46 = const true;
        _62 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb34];
    }

    bb11: {
        _45 = const true;
        _61 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        _44 = const true;
        _60 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        _43 = const true;
        _59 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb28];
    }

    bb14: {
        _42 = const true;
        _58 = const false;
        _33 = move (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        _41 = const true;
        _57 = const false;
        _35 = move (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb24];
    }

    bb16: {
        _40 = const true;
        _56 = const false;
        _37 = move (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)>>::call(_39, move _3) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        _40 = const false;
        _41 = const false;
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb19, unwind: bb84];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        resume;
    }

    bb21 (cleanup): {
        drop(_34) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_40) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_32) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_41) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_30) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_42) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_28) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_43) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_26) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_44) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_24) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_45) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_22) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_46) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_20) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_47) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_18) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_48) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_16) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_49) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_14) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_50) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_12) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_51) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_10) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_52) -> [0: bb48, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_8) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_53) -> [0: bb50, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_6) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_54) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_4) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_55) -> [0: bb84, otherwise: bb51];
    }

    bb53 (cleanup): {
        switchInt(_56) -> [0: bb20, otherwise: bb54];
    }

    bb54 (cleanup): {
        drop((_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_57) -> [0: bb53, otherwise: bb56];
    }

    bb56 (cleanup): {
        drop((_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_58) -> [0: bb55, otherwise: bb58];
    }

    bb58 (cleanup): {
        drop((_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_59) -> [0: bb57, otherwise: bb60];
    }

    bb60 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_60) -> [0: bb59, otherwise: bb62];
    }

    bb62 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_61) -> [0: bb61, otherwise: bb64];
    }

    bb64 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_62) -> [0: bb63, otherwise: bb66];
    }

    bb66 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_63) -> [0: bb65, otherwise: bb68];
    }

    bb68 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_64) -> [0: bb67, otherwise: bb70];
    }

    bb70 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_65) -> [0: bb69, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_66) -> [0: bb71, otherwise: bb74];
    }

    bb74 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_67) -> [0: bb73, otherwise: bb76];
    }

    bb76 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_68) -> [0: bb75, otherwise: bb78];
    }

    bb78 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_69) -> [0: bb77, otherwise: bb80];
    }

    bb80 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_70) -> [0: bb79, otherwise: bb82];
    }

    bb82 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_71) -> [0: bb81, otherwise: bb83];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _19: &Func;
    let _20: &Func;
    let _21: *const Func;
    let mut _22: *const ();
    let mut _24: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _25: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _26: &&Func;
    let mut _27: &&Env;
    let mut _28: isize;
    let mut _29: isize;
    let mut _32: !;
    let mut _33: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _34: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _36: !;
    let mut _38: isize;
    scope 1 {
        debug func => _19;
        let _23: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _23;
            let _30: Rets;
            let _31: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _35: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _30;
            }
            scope 5 {
                debug trap => _31;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _35;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _37: &();
    }

    bb0: {
        _37 = const _;
        _22 = &raw const (*_37);
        _21 = move _22 as *const Func (PtrToPtr);
        _20 = &(*_21);
        _19 = _20;
        _26 = &_19;
        _27 = &_1;
        _25 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _26, env: move _27, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18 };
        _24 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _25);
        _23 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _24) -> [return: bb1, unwind continue];
    }

    bb1: {
        _29 = discriminant(_23);
        switchInt(move _29) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _28 = discriminant(((_23 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _28) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _35 = move ((_23 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _36 = resume_panic(move _35) -> unwind continue;
    }

    bb5: {
        _30 = move ((((_23 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _30) -> [return: bb6, unwind continue];
    }

    bb6: {
        _38 = discriminant(_23);
        switchInt(move _38) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _31 = move ((((_23 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _34 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _31) -> [return: bb8, unwind continue];
    }

    bb8: {
        _33 = move _34 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _32 = raise_user_trap(move _33) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: &&Func;
    let mut _39: &Func;
    let mut _40: &&Env;
    let mut _41: &Env;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;

    bb0: {
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _58 = const true;
        _59 = const true;
        _60 = const true;
        _61 = const true;
        _62 = const true;
        _63 = const true;
        _64 = const true;
        _65 = const true;
        _66 = const true;
        _67 = const true;
        _68 = const true;
        _69 = const true;
        _70 = const true;
        _71 = const true;
        _72 = const true;
        _73 = const true;
        _38 = deref_copy (_1.0: &&Func);
        _39 = deref_copy (*_38);
        _40 = deref_copy (_1.1: &&Env);
        _41 = deref_copy (*_40);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb84];
    }

    bb1: {
        _57 = const true;
        _73 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb52];
    }

    bb2: {
        _56 = const true;
        _72 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb50];
    }

    bb3: {
        _55 = const true;
        _71 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb48];
    }

    bb4: {
        _54 = const true;
        _70 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb46];
    }

    bb5: {
        _53 = const true;
        _69 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb44];
    }

    bb6: {
        _52 = const true;
        _68 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        _51 = const true;
        _67 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb40];
    }

    bb8: {
        _50 = const true;
        _66 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb38];
    }

    bb9: {
        _49 = const true;
        _65 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb36];
    }

    bb10: {
        _48 = const true;
        _64 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb34];
    }

    bb11: {
        _47 = const true;
        _63 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        _46 = const true;
        _62 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        _45 = const true;
        _61 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb28];
    }

    bb14: {
        _44 = const true;
        _60 = const false;
        _33 = move (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        _43 = const true;
        _59 = const false;
        _35 = move (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb24];
    }

    bb16: {
        _42 = const true;
        _58 = const false;
        _37 = move (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _3 = (_41, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)>>::call(_39, move _3) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb19, unwind: bb84];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        resume;
    }

    bb21 (cleanup): {
        drop(_34) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_42) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_32) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_43) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_30) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_44) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_28) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_45) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_26) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_46) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_24) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_47) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_22) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_48) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_20) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_49) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_18) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_50) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_16) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_51) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_14) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_52) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_12) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_53) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_10) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_54) -> [0: bb48, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_8) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_55) -> [0: bb50, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_6) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_56) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_4) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_57) -> [0: bb84, otherwise: bb51];
    }

    bb53 (cleanup): {
        switchInt(_58) -> [0: bb20, otherwise: bb54];
    }

    bb54 (cleanup): {
        drop((_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_59) -> [0: bb53, otherwise: bb56];
    }

    bb56 (cleanup): {
        drop((_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_60) -> [0: bb55, otherwise: bb58];
    }

    bb58 (cleanup): {
        drop((_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_61) -> [0: bb57, otherwise: bb60];
    }

    bb60 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_62) -> [0: bb59, otherwise: bb62];
    }

    bb62 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_63) -> [0: bb61, otherwise: bb64];
    }

    bb64 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_64) -> [0: bb63, otherwise: bb66];
    }

    bb66 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_65) -> [0: bb65, otherwise: bb68];
    }

    bb68 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_66) -> [0: bb67, otherwise: bb70];
    }

    bb70 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_67) -> [0: bb69, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_68) -> [0: bb71, otherwise: bb74];
    }

    bb74 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_69) -> [0: bb73, otherwise: bb76];
    }

    bb76 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_70) -> [0: bb75, otherwise: bb78];
    }

    bb78 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_71) -> [0: bb77, otherwise: bb80];
    }

    bb80 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_72) -> [0: bb79, otherwise: bb82];
    }

    bb82 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_73) -> [0: bb81, otherwise: bb83];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 18_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 18]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18);
    let mut _20: A1;
    let mut _21: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A2;
    let mut _23: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A3;
    let mut _25: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A4;
    let mut _27: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A5;
    let mut _29: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A6;
    let mut _31: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A7;
    let mut _33: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A8;
    let mut _35: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A9;
    let mut _37: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A10;
    let mut _39: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A11;
    let mut _41: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A12;
    let mut _43: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A13;
    let mut _45: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A14;
    let mut _47: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A15;
    let mut _49: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A16;
    let mut _51: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A17;
    let mut _53: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A18;
    let mut _55: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
        let _16: i128;
        let _17: i128;
        let _18: i128;
        let _19: i128;
    }

    bb0: {
        _2 = _1[0 of 18];
        _3 = _1[1 of 18];
        _4 = _1[2 of 18];
        _5 = _1[3 of 18];
        _6 = _1[4 of 18];
        _7 = _1[5 of 18];
        _8 = _1[6 of 18];
        _9 = _1[7 of 18];
        _10 = _1[8 of 18];
        _11 = _1[9 of 18];
        _12 = _1[10 of 18];
        _13 = _1[11 of 18];
        _14 = _1[12 of 18];
        _15 = _1[13 of 18];
        _16 = _1[14 of 18];
        _17 = _1[15 of 18];
        _18 = _1[16 of 18];
        _19 = _1[17 of 18];
        _21 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _20 = <A1 as FromToNativeWasmType>::from_native(move _21) -> [return: bb2, unwind continue];
    }

    bb2: {
        _23 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb53];
    }

    bb3: {
        _22 = <A2 as FromToNativeWasmType>::from_native(move _23) -> [return: bb4, unwind: bb53];
    }

    bb4: {
        _25 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb52];
    }

    bb5: {
        _24 = <A3 as FromToNativeWasmType>::from_native(move _25) -> [return: bb6, unwind: bb52];
    }

    bb6: {
        _27 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb51];
    }

    bb7: {
        _26 = <A4 as FromToNativeWasmType>::from_native(move _27) -> [return: bb8, unwind: bb51];
    }

    bb8: {
        _29 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb50];
    }

    bb9: {
        _28 = <A5 as FromToNativeWasmType>::from_native(move _29) -> [return: bb10, unwind: bb50];
    }

    bb10: {
        _31 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb49];
    }

    bb11: {
        _30 = <A6 as FromToNativeWasmType>::from_native(move _31) -> [return: bb12, unwind: bb49];
    }

    bb12: {
        _33 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb48];
    }

    bb13: {
        _32 = <A7 as FromToNativeWasmType>::from_native(move _33) -> [return: bb14, unwind: bb48];
    }

    bb14: {
        _35 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb47];
    }

    bb15: {
        _34 = <A8 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb47];
    }

    bb16: {
        _37 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb46];
    }

    bb17: {
        _36 = <A9 as FromToNativeWasmType>::from_native(move _37) -> [return: bb18, unwind: bb46];
    }

    bb18: {
        _39 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb45];
    }

    bb19: {
        _38 = <A10 as FromToNativeWasmType>::from_native(move _39) -> [return: bb20, unwind: bb45];
    }

    bb20: {
        _41 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb44];
    }

    bb21: {
        _40 = <A11 as FromToNativeWasmType>::from_native(move _41) -> [return: bb22, unwind: bb44];
    }

    bb22: {
        _43 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb43];
    }

    bb23: {
        _42 = <A12 as FromToNativeWasmType>::from_native(move _43) -> [return: bb24, unwind: bb43];
    }

    bb24: {
        _45 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb42];
    }

    bb25: {
        _44 = <A13 as FromToNativeWasmType>::from_native(move _45) -> [return: bb26, unwind: bb42];
    }

    bb26: {
        _47 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb41];
    }

    bb27: {
        _46 = <A14 as FromToNativeWasmType>::from_native(move _47) -> [return: bb28, unwind: bb41];
    }

    bb28: {
        _49 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_16) -> [return: bb29, unwind: bb40];
    }

    bb29: {
        _48 = <A15 as FromToNativeWasmType>::from_native(move _49) -> [return: bb30, unwind: bb40];
    }

    bb30: {
        _51 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_17) -> [return: bb31, unwind: bb39];
    }

    bb31: {
        _50 = <A16 as FromToNativeWasmType>::from_native(move _51) -> [return: bb32, unwind: bb39];
    }

    bb32: {
        _53 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_18) -> [return: bb33, unwind: bb38];
    }

    bb33: {
        _52 = <A17 as FromToNativeWasmType>::from_native(move _53) -> [return: bb34, unwind: bb38];
    }

    bb34: {
        _55 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_19) -> [return: bb35, unwind: bb37];
    }

    bb35: {
        _54 = <A18 as FromToNativeWasmType>::from_native(move _55) -> [return: bb36, unwind: bb37];
    }

    bb36: {
        _0 = (move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54);
        return;
    }

    bb37 (cleanup): {
        drop(_52) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_50) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_48) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_46) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_44) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_42) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_40) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_38) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_36) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_34) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_32) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_30) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_28) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_26) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_24) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_22) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_20) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 18]>;
    let mut _4: std::result::Result<[i128; 18], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 18];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 18]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 18], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 18]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)) -> [i128; 18] {
    debug self => _1;
    let mut _0: [i128; 18];
    let mut _20: i128;
    let mut _21: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: i128;
    let mut _23: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A2;
    let mut _25: i128;
    let mut _26: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A3;
    let mut _28: i128;
    let mut _29: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A4;
    let mut _31: i128;
    let mut _32: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A5;
    let mut _34: i128;
    let mut _35: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A6;
    let mut _37: i128;
    let mut _38: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A7;
    let mut _40: i128;
    let mut _41: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A8;
    let mut _43: i128;
    let mut _44: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A9;
    let mut _46: i128;
    let mut _47: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A10;
    let mut _49: i128;
    let mut _50: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A11;
    let mut _52: i128;
    let mut _53: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A12;
    let mut _55: i128;
    let mut _56: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A13;
    let mut _58: i128;
    let mut _59: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A14;
    let mut _61: i128;
    let mut _62: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A15;
    let mut _64: i128;
    let mut _65: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A16;
    let mut _67: i128;
    let mut _68: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _69: A17;
    let mut _70: i128;
    let mut _71: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _72: A18;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
        let _16: A15;
        let _17: A16;
        let _18: A17;
        let _19: A18;
    }

    bb0: {
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _2 = move (_1.0: A1);
        _89 = const true;
        _3 = move (_1.1: A2);
        _88 = const true;
        _4 = move (_1.2: A3);
        _87 = const true;
        _5 = move (_1.3: A4);
        _86 = const true;
        _6 = move (_1.4: A5);
        _85 = const true;
        _7 = move (_1.5: A6);
        _84 = const true;
        _8 = move (_1.6: A7);
        _83 = const true;
        _9 = move (_1.7: A8);
        _82 = const true;
        _10 = move (_1.8: A9);
        _81 = const true;
        _11 = move (_1.9: A10);
        _80 = const true;
        _12 = move (_1.10: A11);
        _79 = const true;
        _13 = move (_1.11: A12);
        _78 = const true;
        _14 = move (_1.12: A13);
        _77 = const true;
        _15 = move (_1.13: A14);
        _76 = const true;
        _16 = move (_1.14: A15);
        _75 = const true;
        _17 = move (_1.15: A16);
        _74 = const true;
        _18 = move (_1.16: A17);
        _73 = const true;
        _19 = move (_1.17: A18);
        _21 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb55];
    }

    bb1: {
        _20 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _21) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        _89 = const false;
        _24 = move _3;
        _23 = <A2 as FromToNativeWasmType>::to_native(move _24) -> [return: bb3, unwind: bb55];
    }

    bb3: {
        _22 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _23) -> [return: bb4, unwind: bb55];
    }

    bb4: {
        _88 = const false;
        _27 = move _4;
        _26 = <A3 as FromToNativeWasmType>::to_native(move _27) -> [return: bb5, unwind: bb55];
    }

    bb5: {
        _25 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _26) -> [return: bb6, unwind: bb55];
    }

    bb6: {
        _87 = const false;
        _30 = move _5;
        _29 = <A4 as FromToNativeWasmType>::to_native(move _30) -> [return: bb7, unwind: bb55];
    }

    bb7: {
        _28 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _29) -> [return: bb8, unwind: bb55];
    }

    bb8: {
        _86 = const false;
        _33 = move _6;
        _32 = <A5 as FromToNativeWasmType>::to_native(move _33) -> [return: bb9, unwind: bb55];
    }

    bb9: {
        _31 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _32) -> [return: bb10, unwind: bb55];
    }

    bb10: {
        _85 = const false;
        _36 = move _7;
        _35 = <A6 as FromToNativeWasmType>::to_native(move _36) -> [return: bb11, unwind: bb55];
    }

    bb11: {
        _34 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _35) -> [return: bb12, unwind: bb55];
    }

    bb12: {
        _84 = const false;
        _39 = move _8;
        _38 = <A7 as FromToNativeWasmType>::to_native(move _39) -> [return: bb13, unwind: bb55];
    }

    bb13: {
        _37 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _38) -> [return: bb14, unwind: bb55];
    }

    bb14: {
        _83 = const false;
        _42 = move _9;
        _41 = <A8 as FromToNativeWasmType>::to_native(move _42) -> [return: bb15, unwind: bb55];
    }

    bb15: {
        _40 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _41) -> [return: bb16, unwind: bb55];
    }

    bb16: {
        _82 = const false;
        _45 = move _10;
        _44 = <A9 as FromToNativeWasmType>::to_native(move _45) -> [return: bb17, unwind: bb55];
    }

    bb17: {
        _43 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _44) -> [return: bb18, unwind: bb55];
    }

    bb18: {
        _81 = const false;
        _48 = move _11;
        _47 = <A10 as FromToNativeWasmType>::to_native(move _48) -> [return: bb19, unwind: bb55];
    }

    bb19: {
        _46 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _47) -> [return: bb20, unwind: bb55];
    }

    bb20: {
        _80 = const false;
        _51 = move _12;
        _50 = <A11 as FromToNativeWasmType>::to_native(move _51) -> [return: bb21, unwind: bb55];
    }

    bb21: {
        _49 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _50) -> [return: bb22, unwind: bb55];
    }

    bb22: {
        _79 = const false;
        _54 = move _13;
        _53 = <A12 as FromToNativeWasmType>::to_native(move _54) -> [return: bb23, unwind: bb55];
    }

    bb23: {
        _52 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _53) -> [return: bb24, unwind: bb55];
    }

    bb24: {
        _78 = const false;
        _57 = move _14;
        _56 = <A13 as FromToNativeWasmType>::to_native(move _57) -> [return: bb25, unwind: bb55];
    }

    bb25: {
        _55 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _56) -> [return: bb26, unwind: bb55];
    }

    bb26: {
        _77 = const false;
        _60 = move _15;
        _59 = <A14 as FromToNativeWasmType>::to_native(move _60) -> [return: bb27, unwind: bb55];
    }

    bb27: {
        _58 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _59) -> [return: bb28, unwind: bb55];
    }

    bb28: {
        _76 = const false;
        _63 = move _16;
        _62 = <A15 as FromToNativeWasmType>::to_native(move _63) -> [return: bb29, unwind: bb55];
    }

    bb29: {
        _61 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _62) -> [return: bb30, unwind: bb55];
    }

    bb30: {
        _75 = const false;
        _66 = move _17;
        _65 = <A16 as FromToNativeWasmType>::to_native(move _66) -> [return: bb31, unwind: bb55];
    }

    bb31: {
        _64 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _65) -> [return: bb32, unwind: bb55];
    }

    bb32: {
        _74 = const false;
        _69 = move _18;
        _68 = <A17 as FromToNativeWasmType>::to_native(move _69) -> [return: bb33, unwind: bb55];
    }

    bb33: {
        _67 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _68) -> [return: bb34, unwind: bb55];
    }

    bb34: {
        _73 = const false;
        _72 = move _19;
        _71 = <A18 as FromToNativeWasmType>::to_native(move _72) -> [return: bb35, unwind: bb55];
    }

    bb35: {
        _70 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _71) -> [return: bb36, unwind: bb55];
    }

    bb36: {
        _0 = [move _20, move _22, move _25, move _28, move _31, move _34, move _37, move _40, move _43, move _46, move _49, move _52, move _55, move _58, move _61, move _64, move _67, move _70];
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        _88 = const false;
        _89 = const false;
        return;
    }

    bb37 (cleanup): {
        switchInt(_74) -> [0: bb38, otherwise: bb56];
    }

    bb38 (cleanup): {
        switchInt(_75) -> [0: bb39, otherwise: bb57];
    }

    bb39 (cleanup): {
        switchInt(_76) -> [0: bb40, otherwise: bb58];
    }

    bb40 (cleanup): {
        switchInt(_77) -> [0: bb41, otherwise: bb59];
    }

    bb41 (cleanup): {
        switchInt(_78) -> [0: bb42, otherwise: bb60];
    }

    bb42 (cleanup): {
        switchInt(_79) -> [0: bb43, otherwise: bb61];
    }

    bb43 (cleanup): {
        switchInt(_80) -> [0: bb44, otherwise: bb62];
    }

    bb44 (cleanup): {
        switchInt(_81) -> [0: bb45, otherwise: bb63];
    }

    bb45 (cleanup): {
        switchInt(_82) -> [0: bb46, otherwise: bb64];
    }

    bb46 (cleanup): {
        switchInt(_83) -> [0: bb47, otherwise: bb65];
    }

    bb47 (cleanup): {
        switchInt(_84) -> [0: bb48, otherwise: bb66];
    }

    bb48 (cleanup): {
        switchInt(_85) -> [0: bb49, otherwise: bb67];
    }

    bb49 (cleanup): {
        switchInt(_86) -> [0: bb50, otherwise: bb68];
    }

    bb50 (cleanup): {
        switchInt(_87) -> [0: bb51, otherwise: bb69];
    }

    bb51 (cleanup): {
        switchInt(_88) -> [0: bb52, otherwise: bb70];
    }

    bb52 (cleanup): {
        switchInt(_89) -> [0: bb53, otherwise: bb71];
    }

    bb53 (cleanup): {
        resume;
    }

    bb54 (cleanup): {
        drop(_19) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_73) -> [0: bb37, otherwise: bb54];
    }

    bb56 (cleanup): {
        drop(_18) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_17) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_16) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_15) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_14) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_13) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_12) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_11) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_10) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_9) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_8) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_7) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_6) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_5) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_4) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_3) -> [return: bb53, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 18] {
    let mut _0: [i128; 18];

    bb0: {
        _0 = [const 0_i128; 18];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 18_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S18<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18);
    let mut _20: A1;
    let mut _21: A2;
    let mut _22: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A3;
    let mut _24: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A4;
    let mut _26: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A5;
    let mut _28: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A6;
    let mut _30: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A7;
    let mut _32: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A8;
    let mut _34: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A9;
    let mut _36: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A10;
    let mut _38: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A11;
    let mut _40: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A12;
    let mut _42: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A13;
    let mut _44: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A14;
    let mut _46: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A15;
    let mut _48: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A16;
    let mut _50: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A17;
    let mut _52: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A18;
    let mut _54: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
        let _16: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
        let _17: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
        let _18: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
        let _19: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _71 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _70 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _69 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _68 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _67 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _66 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _65 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _64 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _63 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _62 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _61 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _60 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _59 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _58 = const true;
        _16 = move (_1.14: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _57 = const true;
        _17 = move (_1.15: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _56 = const true;
        _18 = move (_1.16: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _55 = const true;
        _19 = move (_1.17: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb54];
    }

    bb1: {
        _71 = const false;
        _22 = move _3;
        _21 = <A2 as FromToNativeWasmType>::from_native(move _22) -> [return: bb2, unwind: bb35];
    }

    bb2: {
        _70 = const false;
        _24 = move _4;
        _23 = <A3 as FromToNativeWasmType>::from_native(move _24) -> [return: bb3, unwind: bb34];
    }

    bb3: {
        _69 = const false;
        _26 = move _5;
        _25 = <A4 as FromToNativeWasmType>::from_native(move _26) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _68 = const false;
        _28 = move _6;
        _27 = <A5 as FromToNativeWasmType>::from_native(move _28) -> [return: bb5, unwind: bb32];
    }

    bb5: {
        _67 = const false;
        _30 = move _7;
        _29 = <A6 as FromToNativeWasmType>::from_native(move _30) -> [return: bb6, unwind: bb31];
    }

    bb6: {
        _66 = const false;
        _32 = move _8;
        _31 = <A7 as FromToNativeWasmType>::from_native(move _32) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        _65 = const false;
        _34 = move _9;
        _33 = <A8 as FromToNativeWasmType>::from_native(move _34) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        _64 = const false;
        _36 = move _10;
        _35 = <A9 as FromToNativeWasmType>::from_native(move _36) -> [return: bb9, unwind: bb28];
    }

    bb9: {
        _63 = const false;
        _38 = move _11;
        _37 = <A10 as FromToNativeWasmType>::from_native(move _38) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        _62 = const false;
        _40 = move _12;
        _39 = <A11 as FromToNativeWasmType>::from_native(move _40) -> [return: bb11, unwind: bb26];
    }

    bb11: {
        _61 = const false;
        _42 = move _13;
        _41 = <A12 as FromToNativeWasmType>::from_native(move _42) -> [return: bb12, unwind: bb25];
    }

    bb12: {
        _60 = const false;
        _44 = move _14;
        _43 = <A13 as FromToNativeWasmType>::from_native(move _44) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _59 = const false;
        _46 = move _15;
        _45 = <A14 as FromToNativeWasmType>::from_native(move _46) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _58 = const false;
        _48 = move _16;
        _47 = <A15 as FromToNativeWasmType>::from_native(move _48) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        _57 = const false;
        _50 = move _17;
        _49 = <A16 as FromToNativeWasmType>::from_native(move _50) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _56 = const false;
        _52 = move _18;
        _51 = <A17 as FromToNativeWasmType>::from_native(move _52) -> [return: bb17, unwind: bb20];
    }

    bb17: {
        _55 = const false;
        _54 = move _19;
        _53 = <A18 as FromToNativeWasmType>::from_native(move _54) -> [return: bb18, unwind: bb19];
    }

    bb18: {
        _0 = (move _20, move _21, move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53);
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        return;
    }

    bb19 (cleanup): {
        drop(_51) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_49) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_47) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_45) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_43) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_41) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_39) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_37) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_35) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_33) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_31) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_29) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_27) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_25) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_23) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_21) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_20) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_56) -> [0: bb37, otherwise: bb55];
    }

    bb37 (cleanup): {
        switchInt(_57) -> [0: bb38, otherwise: bb56];
    }

    bb38 (cleanup): {
        switchInt(_58) -> [0: bb39, otherwise: bb57];
    }

    bb39 (cleanup): {
        switchInt(_59) -> [0: bb40, otherwise: bb58];
    }

    bb40 (cleanup): {
        switchInt(_60) -> [0: bb41, otherwise: bb59];
    }

    bb41 (cleanup): {
        switchInt(_61) -> [0: bb42, otherwise: bb60];
    }

    bb42 (cleanup): {
        switchInt(_62) -> [0: bb43, otherwise: bb61];
    }

    bb43 (cleanup): {
        switchInt(_63) -> [0: bb44, otherwise: bb62];
    }

    bb44 (cleanup): {
        switchInt(_64) -> [0: bb45, otherwise: bb63];
    }

    bb45 (cleanup): {
        switchInt(_65) -> [0: bb46, otherwise: bb64];
    }

    bb46 (cleanup): {
        switchInt(_66) -> [0: bb47, otherwise: bb65];
    }

    bb47 (cleanup): {
        switchInt(_67) -> [0: bb48, otherwise: bb66];
    }

    bb48 (cleanup): {
        switchInt(_68) -> [0: bb49, otherwise: bb67];
    }

    bb49 (cleanup): {
        switchInt(_69) -> [0: bb50, otherwise: bb68];
    }

    bb50 (cleanup): {
        switchInt(_70) -> [0: bb51, otherwise: bb69];
    }

    bb51 (cleanup): {
        switchInt(_71) -> [0: bb52, otherwise: bb70];
    }

    bb52 (cleanup): {
        resume;
    }

    bb53 (cleanup): {
        drop(_19) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_55) -> [0: bb36, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_18) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_17) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_16) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_15) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_14) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_13) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_12) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_11) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_10) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_9) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_8) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_7) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_6) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_5) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_4) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_3) -> [return: bb52, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)) -> S18<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18> {
    debug self => _1;
    let mut _0: externals::function::inner::S18<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let _16: A15;
    let _17: A16;
    let _18: A17;
    let _19: A18;
    let mut _20: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A2;
    let mut _23: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A3;
    let mut _25: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A4;
    let mut _27: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A5;
    let mut _29: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A6;
    let mut _31: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A7;
    let mut _33: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A8;
    let mut _35: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A9;
    let mut _37: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A10;
    let mut _39: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A11;
    let mut _41: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A12;
    let mut _43: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A13;
    let mut _45: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A14;
    let mut _47: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A15;
    let mut _49: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A16;
    let mut _51: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A17;
    let mut _53: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A18;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
    }

    bb0: {
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _2 = move (_1.0: A1);
        _71 = const true;
        _3 = move (_1.1: A2);
        _70 = const true;
        _4 = move (_1.2: A3);
        _69 = const true;
        _5 = move (_1.3: A4);
        _68 = const true;
        _6 = move (_1.4: A5);
        _67 = const true;
        _7 = move (_1.5: A6);
        _66 = const true;
        _8 = move (_1.6: A7);
        _65 = const true;
        _9 = move (_1.7: A8);
        _64 = const true;
        _10 = move (_1.8: A9);
        _63 = const true;
        _11 = move (_1.9: A10);
        _62 = const true;
        _12 = move (_1.10: A11);
        _61 = const true;
        _13 = move (_1.11: A12);
        _60 = const true;
        _14 = move (_1.12: A13);
        _59 = const true;
        _15 = move (_1.13: A14);
        _58 = const true;
        _16 = move (_1.14: A15);
        _57 = const true;
        _17 = move (_1.15: A16);
        _56 = const true;
        _18 = move (_1.16: A17);
        _55 = const true;
        _19 = move (_1.17: A18);
        _20 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb54];
    }

    bb1: {
        _71 = const false;
        _22 = move _3;
        _21 = <A2 as FromToNativeWasmType>::to_native(move _22) -> [return: bb2, unwind: bb35];
    }

    bb2: {
        _70 = const false;
        _24 = move _4;
        _23 = <A3 as FromToNativeWasmType>::to_native(move _24) -> [return: bb3, unwind: bb34];
    }

    bb3: {
        _69 = const false;
        _26 = move _5;
        _25 = <A4 as FromToNativeWasmType>::to_native(move _26) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _68 = const false;
        _28 = move _6;
        _27 = <A5 as FromToNativeWasmType>::to_native(move _28) -> [return: bb5, unwind: bb32];
    }

    bb5: {
        _67 = const false;
        _30 = move _7;
        _29 = <A6 as FromToNativeWasmType>::to_native(move _30) -> [return: bb6, unwind: bb31];
    }

    bb6: {
        _66 = const false;
        _32 = move _8;
        _31 = <A7 as FromToNativeWasmType>::to_native(move _32) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        _65 = const false;
        _34 = move _9;
        _33 = <A8 as FromToNativeWasmType>::to_native(move _34) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        _64 = const false;
        _36 = move _10;
        _35 = <A9 as FromToNativeWasmType>::to_native(move _36) -> [return: bb9, unwind: bb28];
    }

    bb9: {
        _63 = const false;
        _38 = move _11;
        _37 = <A10 as FromToNativeWasmType>::to_native(move _38) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        _62 = const false;
        _40 = move _12;
        _39 = <A11 as FromToNativeWasmType>::to_native(move _40) -> [return: bb11, unwind: bb26];
    }

    bb11: {
        _61 = const false;
        _42 = move _13;
        _41 = <A12 as FromToNativeWasmType>::to_native(move _42) -> [return: bb12, unwind: bb25];
    }

    bb12: {
        _60 = const false;
        _44 = move _14;
        _43 = <A13 as FromToNativeWasmType>::to_native(move _44) -> [return: bb13, unwind: bb24];
    }

    bb13: {
        _59 = const false;
        _46 = move _15;
        _45 = <A14 as FromToNativeWasmType>::to_native(move _46) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _58 = const false;
        _48 = move _16;
        _47 = <A15 as FromToNativeWasmType>::to_native(move _48) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        _57 = const false;
        _50 = move _17;
        _49 = <A16 as FromToNativeWasmType>::to_native(move _50) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _56 = const false;
        _52 = move _18;
        _51 = <A17 as FromToNativeWasmType>::to_native(move _52) -> [return: bb17, unwind: bb20];
    }

    bb17: {
        _55 = const false;
        _54 = move _19;
        _53 = <A18 as FromToNativeWasmType>::to_native(move _54) -> [return: bb18, unwind: bb19];
    }

    bb18: {
        _0 = S18::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>(move _20, move _21, move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53);
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        return;
    }

    bb19 (cleanup): {
        drop(_51) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_49) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_47) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_45) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_43) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_41) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_39) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_37) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_35) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_33) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_31) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_29) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_27) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_25) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_23) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_21) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_20) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_56) -> [0: bb37, otherwise: bb55];
    }

    bb37 (cleanup): {
        switchInt(_57) -> [0: bb38, otherwise: bb56];
    }

    bb38 (cleanup): {
        switchInt(_58) -> [0: bb39, otherwise: bb57];
    }

    bb39 (cleanup): {
        switchInt(_59) -> [0: bb40, otherwise: bb58];
    }

    bb40 (cleanup): {
        switchInt(_60) -> [0: bb41, otherwise: bb59];
    }

    bb41 (cleanup): {
        switchInt(_61) -> [0: bb42, otherwise: bb60];
    }

    bb42 (cleanup): {
        switchInt(_62) -> [0: bb43, otherwise: bb61];
    }

    bb43 (cleanup): {
        switchInt(_63) -> [0: bb44, otherwise: bb62];
    }

    bb44 (cleanup): {
        switchInt(_64) -> [0: bb45, otherwise: bb63];
    }

    bb45 (cleanup): {
        switchInt(_65) -> [0: bb46, otherwise: bb64];
    }

    bb46 (cleanup): {
        switchInt(_66) -> [0: bb47, otherwise: bb65];
    }

    bb47 (cleanup): {
        switchInt(_67) -> [0: bb48, otherwise: bb66];
    }

    bb48 (cleanup): {
        switchInt(_68) -> [0: bb49, otherwise: bb67];
    }

    bb49 (cleanup): {
        switchInt(_69) -> [0: bb50, otherwise: bb68];
    }

    bb50 (cleanup): {
        switchInt(_70) -> [0: bb51, otherwise: bb69];
    }

    bb51 (cleanup): {
        switchInt(_71) -> [0: bb52, otherwise: bb70];
    }

    bb52 (cleanup): {
        resume;
    }

    bb53 (cleanup): {
        drop(_19) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_55) -> [0: bb36, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_18) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_17) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_16) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_15) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_14) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_13) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_12) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_11) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_10) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_9) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_8) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_7) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_6) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_5) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_4) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_3) -> [return: bb52, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 18];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 18] = {
    let mut _0: &[wasmer_types::Type; 18];
    let mut _1: [wasmer_types::Type; 18];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _20: &Func;
    let _21: &Func;
    let _22: *const Func;
    let mut _23: *const ();
    let mut _25: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _26: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _27: &&Func;
    let mut _28: isize;
    let mut _29: isize;
    let mut _32: !;
    let mut _33: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _34: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _36: !;
    let mut _38: isize;
    scope 1 {
        debug func => _20;
        let _24: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _24;
            let _30: Rets;
            let _31: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _35: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _30;
            }
            scope 5 {
                debug trap => _31;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _35;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _37: &();
    }

    bb0: {
        _37 = const _;
        _23 = &raw const (*_37);
        _22 = move _23 as *const Func (PtrToPtr);
        _21 = &(*_22);
        _20 = _21;
        _27 = &_20;
        _26 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _27, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19 };
        _25 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _26);
        _24 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _25) -> [return: bb1, unwind continue];
    }

    bb1: {
        _29 = discriminant(_24);
        switchInt(move _29) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _28 = discriminant(((_24 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _28) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _35 = move ((_24 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _36 = resume_panic(move _35) -> unwind continue;
    }

    bb5: {
        _30 = move ((((_24 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _30) -> [return: bb6, unwind continue];
    }

    bb6: {
        _38 = discriminant(_24);
        switchInt(move _38) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _31 = move ((((_24 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _34 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _31) -> [return: bb8, unwind continue];
    }

    bb8: {
        _33 = move _34 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _32 = raise_user_trap(move _33) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: &&Func;
    let mut _41: &Func;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;

    bb0: {
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _59 = const true;
        _60 = const true;
        _61 = const true;
        _62 = const true;
        _63 = const true;
        _64 = const true;
        _65 = const true;
        _66 = const true;
        _67 = const true;
        _68 = const true;
        _69 = const true;
        _70 = const true;
        _71 = const true;
        _72 = const true;
        _73 = const true;
        _74 = const true;
        _75 = const true;
        _40 = deref_copy (_1.0: &&Func);
        _41 = deref_copy (*_40);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb89];
    }

    bb1: {
        _58 = const true;
        _75 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        _57 = const true;
        _74 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb53];
    }

    bb3: {
        _56 = const true;
        _73 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb51];
    }

    bb4: {
        _55 = const true;
        _72 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb49];
    }

    bb5: {
        _54 = const true;
        _71 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb47];
    }

    bb6: {
        _53 = const true;
        _70 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb45];
    }

    bb7: {
        _52 = const true;
        _69 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb43];
    }

    bb8: {
        _51 = const true;
        _68 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb41];
    }

    bb9: {
        _50 = const true;
        _67 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb39];
    }

    bb10: {
        _49 = const true;
        _66 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb37];
    }

    bb11: {
        _48 = const true;
        _65 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb35];
    }

    bb12: {
        _47 = const true;
        _64 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb33];
    }

    bb13: {
        _46 = const true;
        _63 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        _45 = const true;
        _62 = const false;
        _33 = move (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb29];
    }

    bb15: {
        _44 = const true;
        _61 = const false;
        _35 = move (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        _43 = const true;
        _60 = const false;
        _37 = move (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        _42 = const true;
        _59 = const false;
        _39 = move (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)>>::call(_41, move _3) -> [return: bb19, unwind: bb23];
    }

    bb19: {
        _42 = const false;
        _43 = const false;
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb20, unwind: bb89];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_36) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_42) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_34) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_43) -> [0: bb27, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_32) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_44) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_30) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_45) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_28) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_46) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_26) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_47) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_24) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_48) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_22) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_49) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_20) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_50) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_18) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_51) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_16) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_52) -> [0: bb45, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_14) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_53) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_12) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_54) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_10) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_55) -> [0: bb51, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_8) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_56) -> [0: bb53, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_6) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_57) -> [0: bb55, otherwise: bb52];
    }

    bb54 (cleanup): {
        drop(_4) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_58) -> [0: bb89, otherwise: bb54];
    }

    bb56 (cleanup): {
        switchInt(_59) -> [0: bb21, otherwise: bb57];
    }

    bb57 (cleanup): {
        drop((_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_60) -> [0: bb56, otherwise: bb59];
    }

    bb59 (cleanup): {
        drop((_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_61) -> [0: bb58, otherwise: bb61];
    }

    bb61 (cleanup): {
        drop((_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_62) -> [0: bb60, otherwise: bb63];
    }

    bb63 (cleanup): {
        drop((_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_63) -> [0: bb62, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_64) -> [0: bb64, otherwise: bb67];
    }

    bb67 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_65) -> [0: bb66, otherwise: bb69];
    }

    bb69 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_66) -> [0: bb68, otherwise: bb71];
    }

    bb71 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_67) -> [0: bb70, otherwise: bb73];
    }

    bb73 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_68) -> [0: bb72, otherwise: bb75];
    }

    bb75 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_69) -> [0: bb74, otherwise: bb77];
    }

    bb77 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_70) -> [0: bb76, otherwise: bb79];
    }

    bb79 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_71) -> [0: bb78, otherwise: bb81];
    }

    bb81 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_72) -> [0: bb80, otherwise: bb83];
    }

    bb83 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_73) -> [0: bb82, otherwise: bb85];
    }

    bb85 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_74) -> [0: bb84, otherwise: bb87];
    }

    bb87 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_75) -> [0: bb86, otherwise: bb88];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _20: &Func;
    let _21: &Func;
    let _22: *const Func;
    let mut _23: *const ();
    let mut _25: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _26: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _27: &&Func;
    let mut _28: &&Env;
    let mut _29: isize;
    let mut _30: isize;
    let mut _33: !;
    let mut _34: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _35: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _37: !;
    let mut _39: isize;
    scope 1 {
        debug func => _20;
        let _24: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _24;
            let _31: Rets;
            let _32: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _36: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _31;
            }
            scope 5 {
                debug trap => _32;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _36;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _38: &();
    }

    bb0: {
        _38 = const _;
        _23 = &raw const (*_38);
        _22 = move _23 as *const Func (PtrToPtr);
        _21 = &(*_22);
        _20 = _21;
        _27 = &_20;
        _28 = &_1;
        _26 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _27, env: move _28, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19 };
        _25 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _26);
        _24 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _25) -> [return: bb1, unwind continue];
    }

    bb1: {
        _30 = discriminant(_24);
        switchInt(move _30) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _29 = discriminant(((_24 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _29) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _36 = move ((_24 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _37 = resume_panic(move _36) -> unwind continue;
    }

    bb5: {
        _31 = move ((((_24 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _31) -> [return: bb6, unwind continue];
    }

    bb6: {
        _39 = discriminant(_24);
        switchInt(move _39) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _32 = move ((((_24 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _35 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _32) -> [return: bb8, unwind continue];
    }

    bb8: {
        _34 = move _35 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _33 = raise_user_trap(move _34) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: &&Func;
    let mut _41: &Func;
    let mut _42: &&Env;
    let mut _43: &Env;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;

    bb0: {
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _61 = const true;
        _62 = const true;
        _63 = const true;
        _64 = const true;
        _65 = const true;
        _66 = const true;
        _67 = const true;
        _68 = const true;
        _69 = const true;
        _70 = const true;
        _71 = const true;
        _72 = const true;
        _73 = const true;
        _74 = const true;
        _75 = const true;
        _76 = const true;
        _77 = const true;
        _40 = deref_copy (_1.0: &&Func);
        _41 = deref_copy (*_40);
        _42 = deref_copy (_1.1: &&Env);
        _43 = deref_copy (*_42);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb89];
    }

    bb1: {
        _60 = const true;
        _77 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        _59 = const true;
        _76 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb53];
    }

    bb3: {
        _58 = const true;
        _75 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb51];
    }

    bb4: {
        _57 = const true;
        _74 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb49];
    }

    bb5: {
        _56 = const true;
        _73 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb47];
    }

    bb6: {
        _55 = const true;
        _72 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb45];
    }

    bb7: {
        _54 = const true;
        _71 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb43];
    }

    bb8: {
        _53 = const true;
        _70 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb41];
    }

    bb9: {
        _52 = const true;
        _69 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb39];
    }

    bb10: {
        _51 = const true;
        _68 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb37];
    }

    bb11: {
        _50 = const true;
        _67 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb35];
    }

    bb12: {
        _49 = const true;
        _66 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb33];
    }

    bb13: {
        _48 = const true;
        _65 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        _47 = const true;
        _64 = const false;
        _33 = move (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb29];
    }

    bb15: {
        _46 = const true;
        _63 = const false;
        _35 = move (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        _45 = const true;
        _62 = const false;
        _37 = move (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        _44 = const true;
        _61 = const false;
        _39 = move (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _3 = (_43, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)>>::call(_41, move _3) -> [return: bb19, unwind: bb23];
    }

    bb19: {
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb20, unwind: bb89];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_36) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_44) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_34) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_45) -> [0: bb27, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_32) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_46) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_30) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_47) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_28) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_48) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_26) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_49) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_24) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_50) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_22) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_51) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_20) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_52) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_18) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_53) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_16) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_54) -> [0: bb45, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_14) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_55) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_12) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_56) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_10) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_57) -> [0: bb51, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_8) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_58) -> [0: bb53, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_6) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_59) -> [0: bb55, otherwise: bb52];
    }

    bb54 (cleanup): {
        drop(_4) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_60) -> [0: bb89, otherwise: bb54];
    }

    bb56 (cleanup): {
        switchInt(_61) -> [0: bb21, otherwise: bb57];
    }

    bb57 (cleanup): {
        drop((_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_62) -> [0: bb56, otherwise: bb59];
    }

    bb59 (cleanup): {
        drop((_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_63) -> [0: bb58, otherwise: bb61];
    }

    bb61 (cleanup): {
        drop((_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_64) -> [0: bb60, otherwise: bb63];
    }

    bb63 (cleanup): {
        drop((_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_65) -> [0: bb62, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_66) -> [0: bb64, otherwise: bb67];
    }

    bb67 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_67) -> [0: bb66, otherwise: bb69];
    }

    bb69 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_68) -> [0: bb68, otherwise: bb71];
    }

    bb71 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_69) -> [0: bb70, otherwise: bb73];
    }

    bb73 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_70) -> [0: bb72, otherwise: bb75];
    }

    bb75 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_71) -> [0: bb74, otherwise: bb77];
    }

    bb77 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_72) -> [0: bb76, otherwise: bb79];
    }

    bb79 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_73) -> [0: bb78, otherwise: bb81];
    }

    bb81 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_74) -> [0: bb80, otherwise: bb83];
    }

    bb83 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_75) -> [0: bb82, otherwise: bb85];
    }

    bb85 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_76) -> [0: bb84, otherwise: bb87];
    }

    bb87 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_77) -> [0: bb86, otherwise: bb88];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 19_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 19]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19);
    let mut _21: A1;
    let mut _22: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A2;
    let mut _24: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A3;
    let mut _26: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A4;
    let mut _28: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A5;
    let mut _30: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A6;
    let mut _32: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A7;
    let mut _34: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A8;
    let mut _36: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A9;
    let mut _38: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A10;
    let mut _40: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A11;
    let mut _42: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A12;
    let mut _44: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A13;
    let mut _46: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A14;
    let mut _48: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A15;
    let mut _50: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A16;
    let mut _52: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A17;
    let mut _54: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A18;
    let mut _56: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A19;
    let mut _58: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
        let _16: i128;
        let _17: i128;
        let _18: i128;
        let _19: i128;
        let _20: i128;
    }

    bb0: {
        _2 = _1[0 of 19];
        _3 = _1[1 of 19];
        _4 = _1[2 of 19];
        _5 = _1[3 of 19];
        _6 = _1[4 of 19];
        _7 = _1[5 of 19];
        _8 = _1[6 of 19];
        _9 = _1[7 of 19];
        _10 = _1[8 of 19];
        _11 = _1[9 of 19];
        _12 = _1[10 of 19];
        _13 = _1[11 of 19];
        _14 = _1[12 of 19];
        _15 = _1[13 of 19];
        _16 = _1[14 of 19];
        _17 = _1[15 of 19];
        _18 = _1[16 of 19];
        _19 = _1[17 of 19];
        _20 = _1[18 of 19];
        _22 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _21 = <A1 as FromToNativeWasmType>::from_native(move _22) -> [return: bb2, unwind continue];
    }

    bb2: {
        _24 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb56];
    }

    bb3: {
        _23 = <A2 as FromToNativeWasmType>::from_native(move _24) -> [return: bb4, unwind: bb56];
    }

    bb4: {
        _26 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb55];
    }

    bb5: {
        _25 = <A3 as FromToNativeWasmType>::from_native(move _26) -> [return: bb6, unwind: bb55];
    }

    bb6: {
        _28 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb54];
    }

    bb7: {
        _27 = <A4 as FromToNativeWasmType>::from_native(move _28) -> [return: bb8, unwind: bb54];
    }

    bb8: {
        _30 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb53];
    }

    bb9: {
        _29 = <A5 as FromToNativeWasmType>::from_native(move _30) -> [return: bb10, unwind: bb53];
    }

    bb10: {
        _32 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb52];
    }

    bb11: {
        _31 = <A6 as FromToNativeWasmType>::from_native(move _32) -> [return: bb12, unwind: bb52];
    }

    bb12: {
        _34 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb51];
    }

    bb13: {
        _33 = <A7 as FromToNativeWasmType>::from_native(move _34) -> [return: bb14, unwind: bb51];
    }

    bb14: {
        _36 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb50];
    }

    bb15: {
        _35 = <A8 as FromToNativeWasmType>::from_native(move _36) -> [return: bb16, unwind: bb50];
    }

    bb16: {
        _38 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb49];
    }

    bb17: {
        _37 = <A9 as FromToNativeWasmType>::from_native(move _38) -> [return: bb18, unwind: bb49];
    }

    bb18: {
        _40 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb48];
    }

    bb19: {
        _39 = <A10 as FromToNativeWasmType>::from_native(move _40) -> [return: bb20, unwind: bb48];
    }

    bb20: {
        _42 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb47];
    }

    bb21: {
        _41 = <A11 as FromToNativeWasmType>::from_native(move _42) -> [return: bb22, unwind: bb47];
    }

    bb22: {
        _44 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb46];
    }

    bb23: {
        _43 = <A12 as FromToNativeWasmType>::from_native(move _44) -> [return: bb24, unwind: bb46];
    }

    bb24: {
        _46 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb45];
    }

    bb25: {
        _45 = <A13 as FromToNativeWasmType>::from_native(move _46) -> [return: bb26, unwind: bb45];
    }

    bb26: {
        _48 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb44];
    }

    bb27: {
        _47 = <A14 as FromToNativeWasmType>::from_native(move _48) -> [return: bb28, unwind: bb44];
    }

    bb28: {
        _50 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_16) -> [return: bb29, unwind: bb43];
    }

    bb29: {
        _49 = <A15 as FromToNativeWasmType>::from_native(move _50) -> [return: bb30, unwind: bb43];
    }

    bb30: {
        _52 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_17) -> [return: bb31, unwind: bb42];
    }

    bb31: {
        _51 = <A16 as FromToNativeWasmType>::from_native(move _52) -> [return: bb32, unwind: bb42];
    }

    bb32: {
        _54 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_18) -> [return: bb33, unwind: bb41];
    }

    bb33: {
        _53 = <A17 as FromToNativeWasmType>::from_native(move _54) -> [return: bb34, unwind: bb41];
    }

    bb34: {
        _56 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_19) -> [return: bb35, unwind: bb40];
    }

    bb35: {
        _55 = <A18 as FromToNativeWasmType>::from_native(move _56) -> [return: bb36, unwind: bb40];
    }

    bb36: {
        _58 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_20) -> [return: bb37, unwind: bb39];
    }

    bb37: {
        _57 = <A19 as FromToNativeWasmType>::from_native(move _58) -> [return: bb38, unwind: bb39];
    }

    bb38: {
        _0 = (move _21, move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57);
        return;
    }

    bb39 (cleanup): {
        drop(_55) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_53) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_51) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_49) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_47) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_45) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_43) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_41) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_39) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_37) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_35) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_33) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_31) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_29) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_27) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_25) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_23) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_21) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 19]>;
    let mut _4: std::result::Result<[i128; 19], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 19];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 19]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 19], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 19]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)) -> [i128; 19] {
    debug self => _1;
    let mut _0: [i128; 19];
    let mut _21: i128;
    let mut _22: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: i128;
    let mut _24: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A2;
    let mut _26: i128;
    let mut _27: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A3;
    let mut _29: i128;
    let mut _30: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A4;
    let mut _32: i128;
    let mut _33: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A5;
    let mut _35: i128;
    let mut _36: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A6;
    let mut _38: i128;
    let mut _39: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A7;
    let mut _41: i128;
    let mut _42: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A8;
    let mut _44: i128;
    let mut _45: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A9;
    let mut _47: i128;
    let mut _48: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A10;
    let mut _50: i128;
    let mut _51: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A11;
    let mut _53: i128;
    let mut _54: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A12;
    let mut _56: i128;
    let mut _57: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A13;
    let mut _59: i128;
    let mut _60: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A14;
    let mut _62: i128;
    let mut _63: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A15;
    let mut _65: i128;
    let mut _66: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _67: A16;
    let mut _68: i128;
    let mut _69: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _70: A17;
    let mut _71: i128;
    let mut _72: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _73: A18;
    let mut _74: i128;
    let mut _75: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _76: A19;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
        let _16: A15;
        let _17: A16;
        let _18: A17;
        let _19: A18;
        let _20: A19;
    }

    bb0: {
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _2 = move (_1.0: A1);
        _94 = const true;
        _3 = move (_1.1: A2);
        _93 = const true;
        _4 = move (_1.2: A3);
        _92 = const true;
        _5 = move (_1.3: A4);
        _91 = const true;
        _6 = move (_1.4: A5);
        _90 = const true;
        _7 = move (_1.5: A6);
        _89 = const true;
        _8 = move (_1.6: A7);
        _88 = const true;
        _9 = move (_1.7: A8);
        _87 = const true;
        _10 = move (_1.8: A9);
        _86 = const true;
        _11 = move (_1.9: A10);
        _85 = const true;
        _12 = move (_1.10: A11);
        _84 = const true;
        _13 = move (_1.11: A12);
        _83 = const true;
        _14 = move (_1.12: A13);
        _82 = const true;
        _15 = move (_1.13: A14);
        _81 = const true;
        _16 = move (_1.14: A15);
        _80 = const true;
        _17 = move (_1.15: A16);
        _79 = const true;
        _18 = move (_1.16: A17);
        _78 = const true;
        _19 = move (_1.17: A18);
        _77 = const true;
        _20 = move (_1.18: A19);
        _22 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb58];
    }

    bb1: {
        _21 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _22) -> [return: bb2, unwind: bb58];
    }

    bb2: {
        _94 = const false;
        _25 = move _3;
        _24 = <A2 as FromToNativeWasmType>::to_native(move _25) -> [return: bb3, unwind: bb58];
    }

    bb3: {
        _23 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _24) -> [return: bb4, unwind: bb58];
    }

    bb4: {
        _93 = const false;
        _28 = move _4;
        _27 = <A3 as FromToNativeWasmType>::to_native(move _28) -> [return: bb5, unwind: bb58];
    }

    bb5: {
        _26 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _27) -> [return: bb6, unwind: bb58];
    }

    bb6: {
        _92 = const false;
        _31 = move _5;
        _30 = <A4 as FromToNativeWasmType>::to_native(move _31) -> [return: bb7, unwind: bb58];
    }

    bb7: {
        _29 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _30) -> [return: bb8, unwind: bb58];
    }

    bb8: {
        _91 = const false;
        _34 = move _6;
        _33 = <A5 as FromToNativeWasmType>::to_native(move _34) -> [return: bb9, unwind: bb58];
    }

    bb9: {
        _32 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _33) -> [return: bb10, unwind: bb58];
    }

    bb10: {
        _90 = const false;
        _37 = move _7;
        _36 = <A6 as FromToNativeWasmType>::to_native(move _37) -> [return: bb11, unwind: bb58];
    }

    bb11: {
        _35 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _36) -> [return: bb12, unwind: bb58];
    }

    bb12: {
        _89 = const false;
        _40 = move _8;
        _39 = <A7 as FromToNativeWasmType>::to_native(move _40) -> [return: bb13, unwind: bb58];
    }

    bb13: {
        _38 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _39) -> [return: bb14, unwind: bb58];
    }

    bb14: {
        _88 = const false;
        _43 = move _9;
        _42 = <A8 as FromToNativeWasmType>::to_native(move _43) -> [return: bb15, unwind: bb58];
    }

    bb15: {
        _41 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _42) -> [return: bb16, unwind: bb58];
    }

    bb16: {
        _87 = const false;
        _46 = move _10;
        _45 = <A9 as FromToNativeWasmType>::to_native(move _46) -> [return: bb17, unwind: bb58];
    }

    bb17: {
        _44 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _45) -> [return: bb18, unwind: bb58];
    }

    bb18: {
        _86 = const false;
        _49 = move _11;
        _48 = <A10 as FromToNativeWasmType>::to_native(move _49) -> [return: bb19, unwind: bb58];
    }

    bb19: {
        _47 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _48) -> [return: bb20, unwind: bb58];
    }

    bb20: {
        _85 = const false;
        _52 = move _12;
        _51 = <A11 as FromToNativeWasmType>::to_native(move _52) -> [return: bb21, unwind: bb58];
    }

    bb21: {
        _50 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _51) -> [return: bb22, unwind: bb58];
    }

    bb22: {
        _84 = const false;
        _55 = move _13;
        _54 = <A12 as FromToNativeWasmType>::to_native(move _55) -> [return: bb23, unwind: bb58];
    }

    bb23: {
        _53 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _54) -> [return: bb24, unwind: bb58];
    }

    bb24: {
        _83 = const false;
        _58 = move _14;
        _57 = <A13 as FromToNativeWasmType>::to_native(move _58) -> [return: bb25, unwind: bb58];
    }

    bb25: {
        _56 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _57) -> [return: bb26, unwind: bb58];
    }

    bb26: {
        _82 = const false;
        _61 = move _15;
        _60 = <A14 as FromToNativeWasmType>::to_native(move _61) -> [return: bb27, unwind: bb58];
    }

    bb27: {
        _59 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _60) -> [return: bb28, unwind: bb58];
    }

    bb28: {
        _81 = const false;
        _64 = move _16;
        _63 = <A15 as FromToNativeWasmType>::to_native(move _64) -> [return: bb29, unwind: bb58];
    }

    bb29: {
        _62 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _63) -> [return: bb30, unwind: bb58];
    }

    bb30: {
        _80 = const false;
        _67 = move _17;
        _66 = <A16 as FromToNativeWasmType>::to_native(move _67) -> [return: bb31, unwind: bb58];
    }

    bb31: {
        _65 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _66) -> [return: bb32, unwind: bb58];
    }

    bb32: {
        _79 = const false;
        _70 = move _18;
        _69 = <A17 as FromToNativeWasmType>::to_native(move _70) -> [return: bb33, unwind: bb58];
    }

    bb33: {
        _68 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _69) -> [return: bb34, unwind: bb58];
    }

    bb34: {
        _78 = const false;
        _73 = move _19;
        _72 = <A18 as FromToNativeWasmType>::to_native(move _73) -> [return: bb35, unwind: bb58];
    }

    bb35: {
        _71 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _72) -> [return: bb36, unwind: bb58];
    }

    bb36: {
        _77 = const false;
        _76 = move _20;
        _75 = <A19 as FromToNativeWasmType>::to_native(move _76) -> [return: bb37, unwind: bb58];
    }

    bb37: {
        _74 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _75) -> [return: bb38, unwind: bb58];
    }

    bb38: {
        _0 = [move _21, move _23, move _26, move _29, move _32, move _35, move _38, move _41, move _44, move _47, move _50, move _53, move _56, move _59, move _62, move _65, move _68, move _71, move _74];
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        _88 = const false;
        _89 = const false;
        _90 = const false;
        _91 = const false;
        _92 = const false;
        _93 = const false;
        _94 = const false;
        return;
    }

    bb39 (cleanup): {
        switchInt(_78) -> [0: bb40, otherwise: bb59];
    }

    bb40 (cleanup): {
        switchInt(_79) -> [0: bb41, otherwise: bb60];
    }

    bb41 (cleanup): {
        switchInt(_80) -> [0: bb42, otherwise: bb61];
    }

    bb42 (cleanup): {
        switchInt(_81) -> [0: bb43, otherwise: bb62];
    }

    bb43 (cleanup): {
        switchInt(_82) -> [0: bb44, otherwise: bb63];
    }

    bb44 (cleanup): {
        switchInt(_83) -> [0: bb45, otherwise: bb64];
    }

    bb45 (cleanup): {
        switchInt(_84) -> [0: bb46, otherwise: bb65];
    }

    bb46 (cleanup): {
        switchInt(_85) -> [0: bb47, otherwise: bb66];
    }

    bb47 (cleanup): {
        switchInt(_86) -> [0: bb48, otherwise: bb67];
    }

    bb48 (cleanup): {
        switchInt(_87) -> [0: bb49, otherwise: bb68];
    }

    bb49 (cleanup): {
        switchInt(_88) -> [0: bb50, otherwise: bb69];
    }

    bb50 (cleanup): {
        switchInt(_89) -> [0: bb51, otherwise: bb70];
    }

    bb51 (cleanup): {
        switchInt(_90) -> [0: bb52, otherwise: bb71];
    }

    bb52 (cleanup): {
        switchInt(_91) -> [0: bb53, otherwise: bb72];
    }

    bb53 (cleanup): {
        switchInt(_92) -> [0: bb54, otherwise: bb73];
    }

    bb54 (cleanup): {
        switchInt(_93) -> [0: bb55, otherwise: bb74];
    }

    bb55 (cleanup): {
        switchInt(_94) -> [0: bb56, otherwise: bb75];
    }

    bb56 (cleanup): {
        resume;
    }

    bb57 (cleanup): {
        drop(_20) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_77) -> [0: bb39, otherwise: bb57];
    }

    bb59 (cleanup): {
        drop(_19) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_18) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_17) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_16) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_15) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_14) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_13) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_12) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_11) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_10) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_9) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_8) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_7) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_6) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_5) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_4) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_3) -> [return: bb56, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 19] {
    let mut _0: [i128; 19];

    bb0: {
        _0 = [const 0_i128; 19];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 19_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S19<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19);
    let mut _21: A1;
    let mut _22: A2;
    let mut _23: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A3;
    let mut _25: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A4;
    let mut _27: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A5;
    let mut _29: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A6;
    let mut _31: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A7;
    let mut _33: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A8;
    let mut _35: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A9;
    let mut _37: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A10;
    let mut _39: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A11;
    let mut _41: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A12;
    let mut _43: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A13;
    let mut _45: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A14;
    let mut _47: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A15;
    let mut _49: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A16;
    let mut _51: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A17;
    let mut _53: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A18;
    let mut _55: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A19;
    let mut _57: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
        let _16: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
        let _17: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
        let _18: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
        let _19: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
        let _20: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _75 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _74 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _73 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _72 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _71 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _70 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _69 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _68 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _67 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _66 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _65 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _64 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _63 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _62 = const true;
        _16 = move (_1.14: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _61 = const true;
        _17 = move (_1.15: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _60 = const true;
        _18 = move (_1.16: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _59 = const true;
        _19 = move (_1.17: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _58 = const true;
        _20 = move (_1.18: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _21 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb57];
    }

    bb1: {
        _75 = const false;
        _23 = move _3;
        _22 = <A2 as FromToNativeWasmType>::from_native(move _23) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        _74 = const false;
        _25 = move _4;
        _24 = <A3 as FromToNativeWasmType>::from_native(move _25) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        _73 = const false;
        _27 = move _5;
        _26 = <A4 as FromToNativeWasmType>::from_native(move _27) -> [return: bb4, unwind: bb35];
    }

    bb4: {
        _72 = const false;
        _29 = move _6;
        _28 = <A5 as FromToNativeWasmType>::from_native(move _29) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        _71 = const false;
        _31 = move _7;
        _30 = <A6 as FromToNativeWasmType>::from_native(move _31) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _70 = const false;
        _33 = move _8;
        _32 = <A7 as FromToNativeWasmType>::from_native(move _33) -> [return: bb7, unwind: bb32];
    }

    bb7: {
        _69 = const false;
        _35 = move _9;
        _34 = <A8 as FromToNativeWasmType>::from_native(move _35) -> [return: bb8, unwind: bb31];
    }

    bb8: {
        _68 = const false;
        _37 = move _10;
        _36 = <A9 as FromToNativeWasmType>::from_native(move _37) -> [return: bb9, unwind: bb30];
    }

    bb9: {
        _67 = const false;
        _39 = move _11;
        _38 = <A10 as FromToNativeWasmType>::from_native(move _39) -> [return: bb10, unwind: bb29];
    }

    bb10: {
        _66 = const false;
        _41 = move _12;
        _40 = <A11 as FromToNativeWasmType>::from_native(move _41) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        _65 = const false;
        _43 = move _13;
        _42 = <A12 as FromToNativeWasmType>::from_native(move _43) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _64 = const false;
        _45 = move _14;
        _44 = <A13 as FromToNativeWasmType>::from_native(move _45) -> [return: bb13, unwind: bb26];
    }

    bb13: {
        _63 = const false;
        _47 = move _15;
        _46 = <A14 as FromToNativeWasmType>::from_native(move _47) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        _62 = const false;
        _49 = move _16;
        _48 = <A15 as FromToNativeWasmType>::from_native(move _49) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        _61 = const false;
        _51 = move _17;
        _50 = <A16 as FromToNativeWasmType>::from_native(move _51) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        _60 = const false;
        _53 = move _18;
        _52 = <A17 as FromToNativeWasmType>::from_native(move _53) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        _59 = const false;
        _55 = move _19;
        _54 = <A18 as FromToNativeWasmType>::from_native(move _55) -> [return: bb18, unwind: bb21];
    }

    bb18: {
        _58 = const false;
        _57 = move _20;
        _56 = <A19 as FromToNativeWasmType>::from_native(move _57) -> [return: bb19, unwind: bb20];
    }

    bb19: {
        _0 = (move _21, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56);
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        return;
    }

    bb20 (cleanup): {
        drop(_54) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_52) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_50) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_48) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_46) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_44) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_42) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_40) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_38) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_36) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_34) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_32) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_30) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_28) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_26) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_24) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_22) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_21) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_59) -> [0: bb39, otherwise: bb58];
    }

    bb39 (cleanup): {
        switchInt(_60) -> [0: bb40, otherwise: bb59];
    }

    bb40 (cleanup): {
        switchInt(_61) -> [0: bb41, otherwise: bb60];
    }

    bb41 (cleanup): {
        switchInt(_62) -> [0: bb42, otherwise: bb61];
    }

    bb42 (cleanup): {
        switchInt(_63) -> [0: bb43, otherwise: bb62];
    }

    bb43 (cleanup): {
        switchInt(_64) -> [0: bb44, otherwise: bb63];
    }

    bb44 (cleanup): {
        switchInt(_65) -> [0: bb45, otherwise: bb64];
    }

    bb45 (cleanup): {
        switchInt(_66) -> [0: bb46, otherwise: bb65];
    }

    bb46 (cleanup): {
        switchInt(_67) -> [0: bb47, otherwise: bb66];
    }

    bb47 (cleanup): {
        switchInt(_68) -> [0: bb48, otherwise: bb67];
    }

    bb48 (cleanup): {
        switchInt(_69) -> [0: bb49, otherwise: bb68];
    }

    bb49 (cleanup): {
        switchInt(_70) -> [0: bb50, otherwise: bb69];
    }

    bb50 (cleanup): {
        switchInt(_71) -> [0: bb51, otherwise: bb70];
    }

    bb51 (cleanup): {
        switchInt(_72) -> [0: bb52, otherwise: bb71];
    }

    bb52 (cleanup): {
        switchInt(_73) -> [0: bb53, otherwise: bb72];
    }

    bb53 (cleanup): {
        switchInt(_74) -> [0: bb54, otherwise: bb73];
    }

    bb54 (cleanup): {
        switchInt(_75) -> [0: bb55, otherwise: bb74];
    }

    bb55 (cleanup): {
        resume;
    }

    bb56 (cleanup): {
        drop(_20) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_58) -> [0: bb38, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_19) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_18) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_17) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_16) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_15) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_14) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_13) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_12) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_11) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_10) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_9) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_8) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_7) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_6) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_5) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_4) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_3) -> [return: bb55, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)) -> S19<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19> {
    debug self => _1;
    let mut _0: externals::function::inner::S19<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let _16: A15;
    let _17: A16;
    let _18: A17;
    let _19: A18;
    let _20: A19;
    let mut _21: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A2;
    let mut _24: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A3;
    let mut _26: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A4;
    let mut _28: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A5;
    let mut _30: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A6;
    let mut _32: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A7;
    let mut _34: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A8;
    let mut _36: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A9;
    let mut _38: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A10;
    let mut _40: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A11;
    let mut _42: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A12;
    let mut _44: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A13;
    let mut _46: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A14;
    let mut _48: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A15;
    let mut _50: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A16;
    let mut _52: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A17;
    let mut _54: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A18;
    let mut _56: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A19;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
    }

    bb0: {
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _2 = move (_1.0: A1);
        _75 = const true;
        _3 = move (_1.1: A2);
        _74 = const true;
        _4 = move (_1.2: A3);
        _73 = const true;
        _5 = move (_1.3: A4);
        _72 = const true;
        _6 = move (_1.4: A5);
        _71 = const true;
        _7 = move (_1.5: A6);
        _70 = const true;
        _8 = move (_1.6: A7);
        _69 = const true;
        _9 = move (_1.7: A8);
        _68 = const true;
        _10 = move (_1.8: A9);
        _67 = const true;
        _11 = move (_1.9: A10);
        _66 = const true;
        _12 = move (_1.10: A11);
        _65 = const true;
        _13 = move (_1.11: A12);
        _64 = const true;
        _14 = move (_1.12: A13);
        _63 = const true;
        _15 = move (_1.13: A14);
        _62 = const true;
        _16 = move (_1.14: A15);
        _61 = const true;
        _17 = move (_1.15: A16);
        _60 = const true;
        _18 = move (_1.16: A17);
        _59 = const true;
        _19 = move (_1.17: A18);
        _58 = const true;
        _20 = move (_1.18: A19);
        _21 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb57];
    }

    bb1: {
        _75 = const false;
        _23 = move _3;
        _22 = <A2 as FromToNativeWasmType>::to_native(move _23) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        _74 = const false;
        _25 = move _4;
        _24 = <A3 as FromToNativeWasmType>::to_native(move _25) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        _73 = const false;
        _27 = move _5;
        _26 = <A4 as FromToNativeWasmType>::to_native(move _27) -> [return: bb4, unwind: bb35];
    }

    bb4: {
        _72 = const false;
        _29 = move _6;
        _28 = <A5 as FromToNativeWasmType>::to_native(move _29) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        _71 = const false;
        _31 = move _7;
        _30 = <A6 as FromToNativeWasmType>::to_native(move _31) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _70 = const false;
        _33 = move _8;
        _32 = <A7 as FromToNativeWasmType>::to_native(move _33) -> [return: bb7, unwind: bb32];
    }

    bb7: {
        _69 = const false;
        _35 = move _9;
        _34 = <A8 as FromToNativeWasmType>::to_native(move _35) -> [return: bb8, unwind: bb31];
    }

    bb8: {
        _68 = const false;
        _37 = move _10;
        _36 = <A9 as FromToNativeWasmType>::to_native(move _37) -> [return: bb9, unwind: bb30];
    }

    bb9: {
        _67 = const false;
        _39 = move _11;
        _38 = <A10 as FromToNativeWasmType>::to_native(move _39) -> [return: bb10, unwind: bb29];
    }

    bb10: {
        _66 = const false;
        _41 = move _12;
        _40 = <A11 as FromToNativeWasmType>::to_native(move _41) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        _65 = const false;
        _43 = move _13;
        _42 = <A12 as FromToNativeWasmType>::to_native(move _43) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _64 = const false;
        _45 = move _14;
        _44 = <A13 as FromToNativeWasmType>::to_native(move _45) -> [return: bb13, unwind: bb26];
    }

    bb13: {
        _63 = const false;
        _47 = move _15;
        _46 = <A14 as FromToNativeWasmType>::to_native(move _47) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        _62 = const false;
        _49 = move _16;
        _48 = <A15 as FromToNativeWasmType>::to_native(move _49) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        _61 = const false;
        _51 = move _17;
        _50 = <A16 as FromToNativeWasmType>::to_native(move _51) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        _60 = const false;
        _53 = move _18;
        _52 = <A17 as FromToNativeWasmType>::to_native(move _53) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        _59 = const false;
        _55 = move _19;
        _54 = <A18 as FromToNativeWasmType>::to_native(move _55) -> [return: bb18, unwind: bb21];
    }

    bb18: {
        _58 = const false;
        _57 = move _20;
        _56 = <A19 as FromToNativeWasmType>::to_native(move _57) -> [return: bb19, unwind: bb20];
    }

    bb19: {
        _0 = S19::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>(move _21, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56);
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        return;
    }

    bb20 (cleanup): {
        drop(_54) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_52) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_50) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_48) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_46) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_44) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_42) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_40) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_38) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_36) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_34) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_32) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_30) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_28) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_26) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_24) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_22) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_21) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_59) -> [0: bb39, otherwise: bb58];
    }

    bb39 (cleanup): {
        switchInt(_60) -> [0: bb40, otherwise: bb59];
    }

    bb40 (cleanup): {
        switchInt(_61) -> [0: bb41, otherwise: bb60];
    }

    bb41 (cleanup): {
        switchInt(_62) -> [0: bb42, otherwise: bb61];
    }

    bb42 (cleanup): {
        switchInt(_63) -> [0: bb43, otherwise: bb62];
    }

    bb43 (cleanup): {
        switchInt(_64) -> [0: bb44, otherwise: bb63];
    }

    bb44 (cleanup): {
        switchInt(_65) -> [0: bb45, otherwise: bb64];
    }

    bb45 (cleanup): {
        switchInt(_66) -> [0: bb46, otherwise: bb65];
    }

    bb46 (cleanup): {
        switchInt(_67) -> [0: bb47, otherwise: bb66];
    }

    bb47 (cleanup): {
        switchInt(_68) -> [0: bb48, otherwise: bb67];
    }

    bb48 (cleanup): {
        switchInt(_69) -> [0: bb49, otherwise: bb68];
    }

    bb49 (cleanup): {
        switchInt(_70) -> [0: bb50, otherwise: bb69];
    }

    bb50 (cleanup): {
        switchInt(_71) -> [0: bb51, otherwise: bb70];
    }

    bb51 (cleanup): {
        switchInt(_72) -> [0: bb52, otherwise: bb71];
    }

    bb52 (cleanup): {
        switchInt(_73) -> [0: bb53, otherwise: bb72];
    }

    bb53 (cleanup): {
        switchInt(_74) -> [0: bb54, otherwise: bb73];
    }

    bb54 (cleanup): {
        switchInt(_75) -> [0: bb55, otherwise: bb74];
    }

    bb55 (cleanup): {
        resume;
    }

    bb56 (cleanup): {
        drop(_20) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_58) -> [0: bb38, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_19) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_18) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_17) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_16) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_15) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_14) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_13) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_12) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_11) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_10) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_9) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_8) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_7) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_6) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_5) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_4) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_3) -> [return: bb55, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 19];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 19] = {
    let mut _0: &[wasmer_types::Type; 19];
    let mut _1: [wasmer_types::Type; 19];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _21: &Func;
    let _22: &Func;
    let _23: *const Func;
    let mut _24: *const ();
    let mut _26: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _27: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _28: &&Func;
    let mut _29: isize;
    let mut _30: isize;
    let mut _33: !;
    let mut _34: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _35: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _37: !;
    let mut _39: isize;
    scope 1 {
        debug func => _21;
        let _25: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _25;
            let _31: Rets;
            let _32: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _36: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _31;
            }
            scope 5 {
                debug trap => _32;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _36;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _38: &();
    }

    bb0: {
        _38 = const _;
        _24 = &raw const (*_38);
        _23 = move _24 as *const Func (PtrToPtr);
        _22 = &(*_23);
        _21 = _22;
        _28 = &_21;
        _27 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _28, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20 };
        _26 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _27);
        _25 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _26) -> [return: bb1, unwind continue];
    }

    bb1: {
        _30 = discriminant(_25);
        switchInt(move _30) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _29 = discriminant(((_25 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _29) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _36 = move ((_25 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _37 = resume_panic(move _36) -> unwind continue;
    }

    bb5: {
        _31 = move ((((_25 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _31) -> [return: bb6, unwind continue];
    }

    bb6: {
        _39 = discriminant(_25);
        switchInt(move _39) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _32 = move ((((_25 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _35 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _32) -> [return: bb8, unwind continue];
    }

    bb8: {
        _34 = move _35 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _33 = raise_user_trap(move _34) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: &&Func;
    let mut _43: &Func;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;

    bb0: {
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _62 = const true;
        _63 = const true;
        _64 = const true;
        _65 = const true;
        _66 = const true;
        _67 = const true;
        _68 = const true;
        _69 = const true;
        _70 = const true;
        _71 = const true;
        _72 = const true;
        _73 = const true;
        _74 = const true;
        _75 = const true;
        _76 = const true;
        _77 = const true;
        _78 = const true;
        _79 = const true;
        _42 = deref_copy (_1.0: &&Func);
        _43 = deref_copy (*_42);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb94];
    }

    bb1: {
        _61 = const true;
        _79 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb58];
    }

    bb2: {
        _60 = const true;
        _78 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb56];
    }

    bb3: {
        _59 = const true;
        _77 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb54];
    }

    bb4: {
        _58 = const true;
        _76 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb52];
    }

    bb5: {
        _57 = const true;
        _75 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb50];
    }

    bb6: {
        _56 = const true;
        _74 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb48];
    }

    bb7: {
        _55 = const true;
        _73 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb46];
    }

    bb8: {
        _54 = const true;
        _72 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb44];
    }

    bb9: {
        _53 = const true;
        _71 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb42];
    }

    bb10: {
        _52 = const true;
        _70 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb40];
    }

    bb11: {
        _51 = const true;
        _69 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb38];
    }

    bb12: {
        _50 = const true;
        _68 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        _49 = const true;
        _67 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        _48 = const true;
        _66 = const false;
        _33 = move (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _47 = const true;
        _65 = const false;
        _35 = move (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb30];
    }

    bb16: {
        _46 = const true;
        _64 = const false;
        _37 = move (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        _45 = const true;
        _63 = const false;
        _39 = move (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb26];
    }

    bb18: {
        _44 = const true;
        _62 = const false;
        _41 = move (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)>>::call(_43, move _3) -> [return: bb20, unwind: bb24];
    }

    bb20: {
        _44 = const false;
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb21, unwind: bb94];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        drop(_38) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_44) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_36) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_45) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_34) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_46) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_32) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_47) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_30) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_48) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_28) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_49) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_26) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_50) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_24) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_51) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_22) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_52) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_20) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_53) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_18) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_54) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_16) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_55) -> [0: bb48, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_14) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_56) -> [0: bb50, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_12) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_57) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_10) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_58) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_8) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_59) -> [0: bb56, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_6) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_60) -> [0: bb58, otherwise: bb55];
    }

    bb57 (cleanup): {
        drop(_4) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_61) -> [0: bb94, otherwise: bb57];
    }

    bb59 (cleanup): {
        switchInt(_62) -> [0: bb22, otherwise: bb60];
    }

    bb60 (cleanup): {
        drop((_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_63) -> [0: bb59, otherwise: bb62];
    }

    bb62 (cleanup): {
        drop((_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_64) -> [0: bb61, otherwise: bb64];
    }

    bb64 (cleanup): {
        drop((_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_65) -> [0: bb63, otherwise: bb66];
    }

    bb66 (cleanup): {
        drop((_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_66) -> [0: bb65, otherwise: bb68];
    }

    bb68 (cleanup): {
        drop((_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_67) -> [0: bb67, otherwise: bb70];
    }

    bb70 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_68) -> [0: bb69, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_69) -> [0: bb71, otherwise: bb74];
    }

    bb74 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_70) -> [0: bb73, otherwise: bb76];
    }

    bb76 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_71) -> [0: bb75, otherwise: bb78];
    }

    bb78 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_72) -> [0: bb77, otherwise: bb80];
    }

    bb80 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_73) -> [0: bb79, otherwise: bb82];
    }

    bb82 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_74) -> [0: bb81, otherwise: bb84];
    }

    bb84 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        switchInt(_75) -> [0: bb83, otherwise: bb86];
    }

    bb86 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_76) -> [0: bb85, otherwise: bb88];
    }

    bb88 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_77) -> [0: bb87, otherwise: bb90];
    }

    bb90 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_78) -> [0: bb89, otherwise: bb92];
    }

    bb92 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_79) -> [0: bb91, otherwise: bb93];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _21: &Func;
    let _22: &Func;
    let _23: *const Func;
    let mut _24: *const ();
    let mut _26: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _27: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _28: &&Func;
    let mut _29: &&Env;
    let mut _30: isize;
    let mut _31: isize;
    let mut _34: !;
    let mut _35: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _36: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _38: !;
    let mut _40: isize;
    scope 1 {
        debug func => _21;
        let _25: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _25;
            let _32: Rets;
            let _33: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _37: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _32;
            }
            scope 5 {
                debug trap => _33;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _37;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _39: &();
    }

    bb0: {
        _39 = const _;
        _24 = &raw const (*_39);
        _23 = move _24 as *const Func (PtrToPtr);
        _22 = &(*_23);
        _21 = _22;
        _28 = &_21;
        _29 = &_1;
        _27 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _28, env: move _29, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20 };
        _26 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _27);
        _25 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _26) -> [return: bb1, unwind continue];
    }

    bb1: {
        _31 = discriminant(_25);
        switchInt(move _31) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _30 = discriminant(((_25 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _30) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _37 = move ((_25 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _38 = resume_panic(move _37) -> unwind continue;
    }

    bb5: {
        _32 = move ((((_25 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _32) -> [return: bb6, unwind continue];
    }

    bb6: {
        _40 = discriminant(_25);
        switchInt(move _40) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _33 = move ((((_25 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _36 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _33) -> [return: bb8, unwind continue];
    }

    bb8: {
        _35 = move _36 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _34 = raise_user_trap(move _35) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: &&Func;
    let mut _43: &Func;
    let mut _44: &&Env;
    let mut _45: &Env;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;

    bb0: {
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _64 = const true;
        _65 = const true;
        _66 = const true;
        _67 = const true;
        _68 = const true;
        _69 = const true;
        _70 = const true;
        _71 = const true;
        _72 = const true;
        _73 = const true;
        _74 = const true;
        _75 = const true;
        _76 = const true;
        _77 = const true;
        _78 = const true;
        _79 = const true;
        _80 = const true;
        _81 = const true;
        _42 = deref_copy (_1.0: &&Func);
        _43 = deref_copy (*_42);
        _44 = deref_copy (_1.1: &&Env);
        _45 = deref_copy (*_44);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb94];
    }

    bb1: {
        _63 = const true;
        _81 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb58];
    }

    bb2: {
        _62 = const true;
        _80 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb56];
    }

    bb3: {
        _61 = const true;
        _79 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb54];
    }

    bb4: {
        _60 = const true;
        _78 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb52];
    }

    bb5: {
        _59 = const true;
        _77 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb50];
    }

    bb6: {
        _58 = const true;
        _76 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb48];
    }

    bb7: {
        _57 = const true;
        _75 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb46];
    }

    bb8: {
        _56 = const true;
        _74 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb44];
    }

    bb9: {
        _55 = const true;
        _73 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb42];
    }

    bb10: {
        _54 = const true;
        _72 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb40];
    }

    bb11: {
        _53 = const true;
        _71 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb38];
    }

    bb12: {
        _52 = const true;
        _70 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        _51 = const true;
        _69 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        _50 = const true;
        _68 = const false;
        _33 = move (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _49 = const true;
        _67 = const false;
        _35 = move (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb30];
    }

    bb16: {
        _48 = const true;
        _66 = const false;
        _37 = move (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        _47 = const true;
        _65 = const false;
        _39 = move (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb26];
    }

    bb18: {
        _46 = const true;
        _64 = const false;
        _41 = move (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _3 = (_45, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)>>::call(_43, move _3) -> [return: bb20, unwind: bb24];
    }

    bb20: {
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb21, unwind: bb94];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        drop(_38) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_46) -> [0: bb26, otherwise: bb23];
    }

    bb25 (cleanup): {
        drop(_36) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_47) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_34) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_48) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_32) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_49) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_30) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_50) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_28) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_51) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_26) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_52) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_24) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_53) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_22) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_54) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_20) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_55) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_18) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_56) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_16) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_57) -> [0: bb48, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_14) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_58) -> [0: bb50, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_12) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_59) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_10) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_60) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_8) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_61) -> [0: bb56, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_6) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_62) -> [0: bb58, otherwise: bb55];
    }

    bb57 (cleanup): {
        drop(_4) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_63) -> [0: bb94, otherwise: bb57];
    }

    bb59 (cleanup): {
        switchInt(_64) -> [0: bb22, otherwise: bb60];
    }

    bb60 (cleanup): {
        drop((_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_65) -> [0: bb59, otherwise: bb62];
    }

    bb62 (cleanup): {
        drop((_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_66) -> [0: bb61, otherwise: bb64];
    }

    bb64 (cleanup): {
        drop((_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_67) -> [0: bb63, otherwise: bb66];
    }

    bb66 (cleanup): {
        drop((_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_68) -> [0: bb65, otherwise: bb68];
    }

    bb68 (cleanup): {
        drop((_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_69) -> [0: bb67, otherwise: bb70];
    }

    bb70 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_70) -> [0: bb69, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_71) -> [0: bb71, otherwise: bb74];
    }

    bb74 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_72) -> [0: bb73, otherwise: bb76];
    }

    bb76 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_73) -> [0: bb75, otherwise: bb78];
    }

    bb78 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_74) -> [0: bb77, otherwise: bb80];
    }

    bb80 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_75) -> [0: bb79, otherwise: bb82];
    }

    bb82 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_76) -> [0: bb81, otherwise: bb84];
    }

    bb84 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        switchInt(_77) -> [0: bb83, otherwise: bb86];
    }

    bb86 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_78) -> [0: bb85, otherwise: bb88];
    }

    bb88 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_79) -> [0: bb87, otherwise: bb90];
    }

    bb90 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_80) -> [0: bb89, otherwise: bb92];
    }

    bb92 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_81) -> [0: bb91, otherwise: bb93];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 20_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 20]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20);
    let mut _22: A1;
    let mut _23: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A2;
    let mut _25: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A3;
    let mut _27: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A4;
    let mut _29: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A5;
    let mut _31: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A6;
    let mut _33: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A7;
    let mut _35: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A8;
    let mut _37: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A9;
    let mut _39: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A10;
    let mut _41: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A11;
    let mut _43: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A12;
    let mut _45: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A13;
    let mut _47: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A14;
    let mut _49: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A15;
    let mut _51: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A16;
    let mut _53: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A17;
    let mut _55: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A18;
    let mut _57: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A19;
    let mut _59: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A20;
    let mut _61: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
        let _16: i128;
        let _17: i128;
        let _18: i128;
        let _19: i128;
        let _20: i128;
        let _21: i128;
    }

    bb0: {
        _2 = _1[0 of 20];
        _3 = _1[1 of 20];
        _4 = _1[2 of 20];
        _5 = _1[3 of 20];
        _6 = _1[4 of 20];
        _7 = _1[5 of 20];
        _8 = _1[6 of 20];
        _9 = _1[7 of 20];
        _10 = _1[8 of 20];
        _11 = _1[9 of 20];
        _12 = _1[10 of 20];
        _13 = _1[11 of 20];
        _14 = _1[12 of 20];
        _15 = _1[13 of 20];
        _16 = _1[14 of 20];
        _17 = _1[15 of 20];
        _18 = _1[16 of 20];
        _19 = _1[17 of 20];
        _20 = _1[18 of 20];
        _21 = _1[19 of 20];
        _23 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _22 = <A1 as FromToNativeWasmType>::from_native(move _23) -> [return: bb2, unwind continue];
    }

    bb2: {
        _25 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb59];
    }

    bb3: {
        _24 = <A2 as FromToNativeWasmType>::from_native(move _25) -> [return: bb4, unwind: bb59];
    }

    bb4: {
        _27 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb58];
    }

    bb5: {
        _26 = <A3 as FromToNativeWasmType>::from_native(move _27) -> [return: bb6, unwind: bb58];
    }

    bb6: {
        _29 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb57];
    }

    bb7: {
        _28 = <A4 as FromToNativeWasmType>::from_native(move _29) -> [return: bb8, unwind: bb57];
    }

    bb8: {
        _31 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb56];
    }

    bb9: {
        _30 = <A5 as FromToNativeWasmType>::from_native(move _31) -> [return: bb10, unwind: bb56];
    }

    bb10: {
        _33 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb55];
    }

    bb11: {
        _32 = <A6 as FromToNativeWasmType>::from_native(move _33) -> [return: bb12, unwind: bb55];
    }

    bb12: {
        _35 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb54];
    }

    bb13: {
        _34 = <A7 as FromToNativeWasmType>::from_native(move _35) -> [return: bb14, unwind: bb54];
    }

    bb14: {
        _37 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb53];
    }

    bb15: {
        _36 = <A8 as FromToNativeWasmType>::from_native(move _37) -> [return: bb16, unwind: bb53];
    }

    bb16: {
        _39 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb52];
    }

    bb17: {
        _38 = <A9 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb52];
    }

    bb18: {
        _41 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb51];
    }

    bb19: {
        _40 = <A10 as FromToNativeWasmType>::from_native(move _41) -> [return: bb20, unwind: bb51];
    }

    bb20: {
        _43 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb50];
    }

    bb21: {
        _42 = <A11 as FromToNativeWasmType>::from_native(move _43) -> [return: bb22, unwind: bb50];
    }

    bb22: {
        _45 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb49];
    }

    bb23: {
        _44 = <A12 as FromToNativeWasmType>::from_native(move _45) -> [return: bb24, unwind: bb49];
    }

    bb24: {
        _47 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb48];
    }

    bb25: {
        _46 = <A13 as FromToNativeWasmType>::from_native(move _47) -> [return: bb26, unwind: bb48];
    }

    bb26: {
        _49 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb47];
    }

    bb27: {
        _48 = <A14 as FromToNativeWasmType>::from_native(move _49) -> [return: bb28, unwind: bb47];
    }

    bb28: {
        _51 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_16) -> [return: bb29, unwind: bb46];
    }

    bb29: {
        _50 = <A15 as FromToNativeWasmType>::from_native(move _51) -> [return: bb30, unwind: bb46];
    }

    bb30: {
        _53 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_17) -> [return: bb31, unwind: bb45];
    }

    bb31: {
        _52 = <A16 as FromToNativeWasmType>::from_native(move _53) -> [return: bb32, unwind: bb45];
    }

    bb32: {
        _55 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_18) -> [return: bb33, unwind: bb44];
    }

    bb33: {
        _54 = <A17 as FromToNativeWasmType>::from_native(move _55) -> [return: bb34, unwind: bb44];
    }

    bb34: {
        _57 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_19) -> [return: bb35, unwind: bb43];
    }

    bb35: {
        _56 = <A18 as FromToNativeWasmType>::from_native(move _57) -> [return: bb36, unwind: bb43];
    }

    bb36: {
        _59 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_20) -> [return: bb37, unwind: bb42];
    }

    bb37: {
        _58 = <A19 as FromToNativeWasmType>::from_native(move _59) -> [return: bb38, unwind: bb42];
    }

    bb38: {
        _61 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_21) -> [return: bb39, unwind: bb41];
    }

    bb39: {
        _60 = <A20 as FromToNativeWasmType>::from_native(move _61) -> [return: bb40, unwind: bb41];
    }

    bb40: {
        _0 = (move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56, move _58, move _60);
        return;
    }

    bb41 (cleanup): {
        drop(_58) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_56) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_54) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_52) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_50) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_48) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_46) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_44) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_42) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_40) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_38) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_36) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_34) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_32) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_30) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_28) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_26) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_24) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_22) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 20]>;
    let mut _4: std::result::Result<[i128; 20], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 20];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 20]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 20], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 20]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)) -> [i128; 20] {
    debug self => _1;
    let mut _0: [i128; 20];
    let mut _22: i128;
    let mut _23: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: i128;
    let mut _25: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A2;
    let mut _27: i128;
    let mut _28: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A3;
    let mut _30: i128;
    let mut _31: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A4;
    let mut _33: i128;
    let mut _34: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A5;
    let mut _36: i128;
    let mut _37: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A6;
    let mut _39: i128;
    let mut _40: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A7;
    let mut _42: i128;
    let mut _43: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A8;
    let mut _45: i128;
    let mut _46: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A9;
    let mut _48: i128;
    let mut _49: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A10;
    let mut _51: i128;
    let mut _52: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A11;
    let mut _54: i128;
    let mut _55: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A12;
    let mut _57: i128;
    let mut _58: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A13;
    let mut _60: i128;
    let mut _61: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A14;
    let mut _63: i128;
    let mut _64: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A15;
    let mut _66: i128;
    let mut _67: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _68: A16;
    let mut _69: i128;
    let mut _70: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _71: A17;
    let mut _72: i128;
    let mut _73: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _74: A18;
    let mut _75: i128;
    let mut _76: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _77: A19;
    let mut _78: i128;
    let mut _79: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _80: A20;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
        let _16: A15;
        let _17: A16;
        let _18: A17;
        let _19: A18;
        let _20: A19;
        let _21: A20;
    }

    bb0: {
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _2 = move (_1.0: A1);
        _99 = const true;
        _3 = move (_1.1: A2);
        _98 = const true;
        _4 = move (_1.2: A3);
        _97 = const true;
        _5 = move (_1.3: A4);
        _96 = const true;
        _6 = move (_1.4: A5);
        _95 = const true;
        _7 = move (_1.5: A6);
        _94 = const true;
        _8 = move (_1.6: A7);
        _93 = const true;
        _9 = move (_1.7: A8);
        _92 = const true;
        _10 = move (_1.8: A9);
        _91 = const true;
        _11 = move (_1.9: A10);
        _90 = const true;
        _12 = move (_1.10: A11);
        _89 = const true;
        _13 = move (_1.11: A12);
        _88 = const true;
        _14 = move (_1.12: A13);
        _87 = const true;
        _15 = move (_1.13: A14);
        _86 = const true;
        _16 = move (_1.14: A15);
        _85 = const true;
        _17 = move (_1.15: A16);
        _84 = const true;
        _18 = move (_1.16: A17);
        _83 = const true;
        _19 = move (_1.17: A18);
        _82 = const true;
        _20 = move (_1.18: A19);
        _81 = const true;
        _21 = move (_1.19: A20);
        _23 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb61];
    }

    bb1: {
        _22 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _23) -> [return: bb2, unwind: bb61];
    }

    bb2: {
        _99 = const false;
        _26 = move _3;
        _25 = <A2 as FromToNativeWasmType>::to_native(move _26) -> [return: bb3, unwind: bb61];
    }

    bb3: {
        _24 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _25) -> [return: bb4, unwind: bb61];
    }

    bb4: {
        _98 = const false;
        _29 = move _4;
        _28 = <A3 as FromToNativeWasmType>::to_native(move _29) -> [return: bb5, unwind: bb61];
    }

    bb5: {
        _27 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _28) -> [return: bb6, unwind: bb61];
    }

    bb6: {
        _97 = const false;
        _32 = move _5;
        _31 = <A4 as FromToNativeWasmType>::to_native(move _32) -> [return: bb7, unwind: bb61];
    }

    bb7: {
        _30 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _31) -> [return: bb8, unwind: bb61];
    }

    bb8: {
        _96 = const false;
        _35 = move _6;
        _34 = <A5 as FromToNativeWasmType>::to_native(move _35) -> [return: bb9, unwind: bb61];
    }

    bb9: {
        _33 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _34) -> [return: bb10, unwind: bb61];
    }

    bb10: {
        _95 = const false;
        _38 = move _7;
        _37 = <A6 as FromToNativeWasmType>::to_native(move _38) -> [return: bb11, unwind: bb61];
    }

    bb11: {
        _36 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _37) -> [return: bb12, unwind: bb61];
    }

    bb12: {
        _94 = const false;
        _41 = move _8;
        _40 = <A7 as FromToNativeWasmType>::to_native(move _41) -> [return: bb13, unwind: bb61];
    }

    bb13: {
        _39 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _40) -> [return: bb14, unwind: bb61];
    }

    bb14: {
        _93 = const false;
        _44 = move _9;
        _43 = <A8 as FromToNativeWasmType>::to_native(move _44) -> [return: bb15, unwind: bb61];
    }

    bb15: {
        _42 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _43) -> [return: bb16, unwind: bb61];
    }

    bb16: {
        _92 = const false;
        _47 = move _10;
        _46 = <A9 as FromToNativeWasmType>::to_native(move _47) -> [return: bb17, unwind: bb61];
    }

    bb17: {
        _45 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _46) -> [return: bb18, unwind: bb61];
    }

    bb18: {
        _91 = const false;
        _50 = move _11;
        _49 = <A10 as FromToNativeWasmType>::to_native(move _50) -> [return: bb19, unwind: bb61];
    }

    bb19: {
        _48 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _49) -> [return: bb20, unwind: bb61];
    }

    bb20: {
        _90 = const false;
        _53 = move _12;
        _52 = <A11 as FromToNativeWasmType>::to_native(move _53) -> [return: bb21, unwind: bb61];
    }

    bb21: {
        _51 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _52) -> [return: bb22, unwind: bb61];
    }

    bb22: {
        _89 = const false;
        _56 = move _13;
        _55 = <A12 as FromToNativeWasmType>::to_native(move _56) -> [return: bb23, unwind: bb61];
    }

    bb23: {
        _54 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _55) -> [return: bb24, unwind: bb61];
    }

    bb24: {
        _88 = const false;
        _59 = move _14;
        _58 = <A13 as FromToNativeWasmType>::to_native(move _59) -> [return: bb25, unwind: bb61];
    }

    bb25: {
        _57 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _58) -> [return: bb26, unwind: bb61];
    }

    bb26: {
        _87 = const false;
        _62 = move _15;
        _61 = <A14 as FromToNativeWasmType>::to_native(move _62) -> [return: bb27, unwind: bb61];
    }

    bb27: {
        _60 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _61) -> [return: bb28, unwind: bb61];
    }

    bb28: {
        _86 = const false;
        _65 = move _16;
        _64 = <A15 as FromToNativeWasmType>::to_native(move _65) -> [return: bb29, unwind: bb61];
    }

    bb29: {
        _63 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _64) -> [return: bb30, unwind: bb61];
    }

    bb30: {
        _85 = const false;
        _68 = move _17;
        _67 = <A16 as FromToNativeWasmType>::to_native(move _68) -> [return: bb31, unwind: bb61];
    }

    bb31: {
        _66 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _67) -> [return: bb32, unwind: bb61];
    }

    bb32: {
        _84 = const false;
        _71 = move _18;
        _70 = <A17 as FromToNativeWasmType>::to_native(move _71) -> [return: bb33, unwind: bb61];
    }

    bb33: {
        _69 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _70) -> [return: bb34, unwind: bb61];
    }

    bb34: {
        _83 = const false;
        _74 = move _19;
        _73 = <A18 as FromToNativeWasmType>::to_native(move _74) -> [return: bb35, unwind: bb61];
    }

    bb35: {
        _72 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _73) -> [return: bb36, unwind: bb61];
    }

    bb36: {
        _82 = const false;
        _77 = move _20;
        _76 = <A19 as FromToNativeWasmType>::to_native(move _77) -> [return: bb37, unwind: bb61];
    }

    bb37: {
        _75 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _76) -> [return: bb38, unwind: bb61];
    }

    bb38: {
        _81 = const false;
        _80 = move _21;
        _79 = <A20 as FromToNativeWasmType>::to_native(move _80) -> [return: bb39, unwind: bb61];
    }

    bb39: {
        _78 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _79) -> [return: bb40, unwind: bb61];
    }

    bb40: {
        _0 = [move _22, move _24, move _27, move _30, move _33, move _36, move _39, move _42, move _45, move _48, move _51, move _54, move _57, move _60, move _63, move _66, move _69, move _72, move _75, move _78];
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        _88 = const false;
        _89 = const false;
        _90 = const false;
        _91 = const false;
        _92 = const false;
        _93 = const false;
        _94 = const false;
        _95 = const false;
        _96 = const false;
        _97 = const false;
        _98 = const false;
        _99 = const false;
        return;
    }

    bb41 (cleanup): {
        switchInt(_82) -> [0: bb42, otherwise: bb62];
    }

    bb42 (cleanup): {
        switchInt(_83) -> [0: bb43, otherwise: bb63];
    }

    bb43 (cleanup): {
        switchInt(_84) -> [0: bb44, otherwise: bb64];
    }

    bb44 (cleanup): {
        switchInt(_85) -> [0: bb45, otherwise: bb65];
    }

    bb45 (cleanup): {
        switchInt(_86) -> [0: bb46, otherwise: bb66];
    }

    bb46 (cleanup): {
        switchInt(_87) -> [0: bb47, otherwise: bb67];
    }

    bb47 (cleanup): {
        switchInt(_88) -> [0: bb48, otherwise: bb68];
    }

    bb48 (cleanup): {
        switchInt(_89) -> [0: bb49, otherwise: bb69];
    }

    bb49 (cleanup): {
        switchInt(_90) -> [0: bb50, otherwise: bb70];
    }

    bb50 (cleanup): {
        switchInt(_91) -> [0: bb51, otherwise: bb71];
    }

    bb51 (cleanup): {
        switchInt(_92) -> [0: bb52, otherwise: bb72];
    }

    bb52 (cleanup): {
        switchInt(_93) -> [0: bb53, otherwise: bb73];
    }

    bb53 (cleanup): {
        switchInt(_94) -> [0: bb54, otherwise: bb74];
    }

    bb54 (cleanup): {
        switchInt(_95) -> [0: bb55, otherwise: bb75];
    }

    bb55 (cleanup): {
        switchInt(_96) -> [0: bb56, otherwise: bb76];
    }

    bb56 (cleanup): {
        switchInt(_97) -> [0: bb57, otherwise: bb77];
    }

    bb57 (cleanup): {
        switchInt(_98) -> [0: bb58, otherwise: bb78];
    }

    bb58 (cleanup): {
        switchInt(_99) -> [0: bb59, otherwise: bb79];
    }

    bb59 (cleanup): {
        resume;
    }

    bb60 (cleanup): {
        drop(_21) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_81) -> [0: bb41, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_20) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_19) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_18) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_17) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_16) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_15) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_14) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_13) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_12) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_11) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_10) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_9) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_8) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_7) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_6) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_5) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_4) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_3) -> [return: bb59, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 20] {
    let mut _0: [i128; 20];

    bb0: {
        _0 = [const 0_i128; 20];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 20_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S20<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20);
    let mut _22: A1;
    let mut _23: A2;
    let mut _24: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A3;
    let mut _26: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A4;
    let mut _28: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A5;
    let mut _30: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A6;
    let mut _32: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A7;
    let mut _34: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A8;
    let mut _36: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A9;
    let mut _38: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A10;
    let mut _40: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A11;
    let mut _42: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A12;
    let mut _44: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A13;
    let mut _46: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A14;
    let mut _48: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A15;
    let mut _50: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A16;
    let mut _52: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A17;
    let mut _54: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A18;
    let mut _56: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A19;
    let mut _58: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A20;
    let mut _60: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
        let _16: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
        let _17: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
        let _18: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
        let _19: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
        let _20: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
        let _21: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _79 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _78 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _77 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _76 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _75 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _74 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _73 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _72 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _71 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _70 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _69 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _68 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _67 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _66 = const true;
        _16 = move (_1.14: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _65 = const true;
        _17 = move (_1.15: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _64 = const true;
        _18 = move (_1.16: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _63 = const true;
        _19 = move (_1.17: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _62 = const true;
        _20 = move (_1.18: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _61 = const true;
        _21 = move (_1.19: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb60];
    }

    bb1: {
        _79 = const false;
        _24 = move _3;
        _23 = <A2 as FromToNativeWasmType>::from_native(move _24) -> [return: bb2, unwind: bb39];
    }

    bb2: {
        _78 = const false;
        _26 = move _4;
        _25 = <A3 as FromToNativeWasmType>::from_native(move _26) -> [return: bb3, unwind: bb38];
    }

    bb3: {
        _77 = const false;
        _28 = move _5;
        _27 = <A4 as FromToNativeWasmType>::from_native(move _28) -> [return: bb4, unwind: bb37];
    }

    bb4: {
        _76 = const false;
        _30 = move _6;
        _29 = <A5 as FromToNativeWasmType>::from_native(move _30) -> [return: bb5, unwind: bb36];
    }

    bb5: {
        _75 = const false;
        _32 = move _7;
        _31 = <A6 as FromToNativeWasmType>::from_native(move _32) -> [return: bb6, unwind: bb35];
    }

    bb6: {
        _74 = const false;
        _34 = move _8;
        _33 = <A7 as FromToNativeWasmType>::from_native(move _34) -> [return: bb7, unwind: bb34];
    }

    bb7: {
        _73 = const false;
        _36 = move _9;
        _35 = <A8 as FromToNativeWasmType>::from_native(move _36) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        _72 = const false;
        _38 = move _10;
        _37 = <A9 as FromToNativeWasmType>::from_native(move _38) -> [return: bb9, unwind: bb32];
    }

    bb9: {
        _71 = const false;
        _40 = move _11;
        _39 = <A10 as FromToNativeWasmType>::from_native(move _40) -> [return: bb10, unwind: bb31];
    }

    bb10: {
        _70 = const false;
        _42 = move _12;
        _41 = <A11 as FromToNativeWasmType>::from_native(move _42) -> [return: bb11, unwind: bb30];
    }

    bb11: {
        _69 = const false;
        _44 = move _13;
        _43 = <A12 as FromToNativeWasmType>::from_native(move _44) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _68 = const false;
        _46 = move _14;
        _45 = <A13 as FromToNativeWasmType>::from_native(move _46) -> [return: bb13, unwind: bb28];
    }

    bb13: {
        _67 = const false;
        _48 = move _15;
        _47 = <A14 as FromToNativeWasmType>::from_native(move _48) -> [return: bb14, unwind: bb27];
    }

    bb14: {
        _66 = const false;
        _50 = move _16;
        _49 = <A15 as FromToNativeWasmType>::from_native(move _50) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        _65 = const false;
        _52 = move _17;
        _51 = <A16 as FromToNativeWasmType>::from_native(move _52) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        _64 = const false;
        _54 = move _18;
        _53 = <A17 as FromToNativeWasmType>::from_native(move _54) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        _63 = const false;
        _56 = move _19;
        _55 = <A18 as FromToNativeWasmType>::from_native(move _56) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        _62 = const false;
        _58 = move _20;
        _57 = <A19 as FromToNativeWasmType>::from_native(move _58) -> [return: bb19, unwind: bb22];
    }

    bb19: {
        _61 = const false;
        _60 = move _21;
        _59 = <A20 as FromToNativeWasmType>::from_native(move _60) -> [return: bb20, unwind: bb21];
    }

    bb20: {
        _0 = (move _22, move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57, move _59);
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        return;
    }

    bb21 (cleanup): {
        drop(_57) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_55) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_53) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_51) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_49) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_47) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_45) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_43) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_41) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_39) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_37) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_35) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_33) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_31) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_29) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_27) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_25) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_23) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_22) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_62) -> [0: bb41, otherwise: bb61];
    }

    bb41 (cleanup): {
        switchInt(_63) -> [0: bb42, otherwise: bb62];
    }

    bb42 (cleanup): {
        switchInt(_64) -> [0: bb43, otherwise: bb63];
    }

    bb43 (cleanup): {
        switchInt(_65) -> [0: bb44, otherwise: bb64];
    }

    bb44 (cleanup): {
        switchInt(_66) -> [0: bb45, otherwise: bb65];
    }

    bb45 (cleanup): {
        switchInt(_67) -> [0: bb46, otherwise: bb66];
    }

    bb46 (cleanup): {
        switchInt(_68) -> [0: bb47, otherwise: bb67];
    }

    bb47 (cleanup): {
        switchInt(_69) -> [0: bb48, otherwise: bb68];
    }

    bb48 (cleanup): {
        switchInt(_70) -> [0: bb49, otherwise: bb69];
    }

    bb49 (cleanup): {
        switchInt(_71) -> [0: bb50, otherwise: bb70];
    }

    bb50 (cleanup): {
        switchInt(_72) -> [0: bb51, otherwise: bb71];
    }

    bb51 (cleanup): {
        switchInt(_73) -> [0: bb52, otherwise: bb72];
    }

    bb52 (cleanup): {
        switchInt(_74) -> [0: bb53, otherwise: bb73];
    }

    bb53 (cleanup): {
        switchInt(_75) -> [0: bb54, otherwise: bb74];
    }

    bb54 (cleanup): {
        switchInt(_76) -> [0: bb55, otherwise: bb75];
    }

    bb55 (cleanup): {
        switchInt(_77) -> [0: bb56, otherwise: bb76];
    }

    bb56 (cleanup): {
        switchInt(_78) -> [0: bb57, otherwise: bb77];
    }

    bb57 (cleanup): {
        switchInt(_79) -> [0: bb58, otherwise: bb78];
    }

    bb58 (cleanup): {
        resume;
    }

    bb59 (cleanup): {
        drop(_21) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_61) -> [0: bb40, otherwise: bb59];
    }

    bb61 (cleanup): {
        drop(_20) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_19) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_18) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_17) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_16) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_15) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_14) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_13) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_12) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_11) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_10) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_9) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_8) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_7) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_6) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_5) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_4) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_3) -> [return: bb58, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)) -> S20<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20> {
    debug self => _1;
    let mut _0: externals::function::inner::S20<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let _16: A15;
    let _17: A16;
    let _18: A17;
    let _19: A18;
    let _20: A19;
    let _21: A20;
    let mut _22: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A2;
    let mut _25: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A3;
    let mut _27: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A4;
    let mut _29: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A5;
    let mut _31: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A6;
    let mut _33: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A7;
    let mut _35: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A8;
    let mut _37: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A9;
    let mut _39: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A10;
    let mut _41: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A11;
    let mut _43: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A12;
    let mut _45: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A13;
    let mut _47: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A14;
    let mut _49: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A15;
    let mut _51: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A16;
    let mut _53: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A17;
    let mut _55: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A18;
    let mut _57: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A19;
    let mut _59: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A20;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
    }

    bb0: {
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _2 = move (_1.0: A1);
        _79 = const true;
        _3 = move (_1.1: A2);
        _78 = const true;
        _4 = move (_1.2: A3);
        _77 = const true;
        _5 = move (_1.3: A4);
        _76 = const true;
        _6 = move (_1.4: A5);
        _75 = const true;
        _7 = move (_1.5: A6);
        _74 = const true;
        _8 = move (_1.6: A7);
        _73 = const true;
        _9 = move (_1.7: A8);
        _72 = const true;
        _10 = move (_1.8: A9);
        _71 = const true;
        _11 = move (_1.9: A10);
        _70 = const true;
        _12 = move (_1.10: A11);
        _69 = const true;
        _13 = move (_1.11: A12);
        _68 = const true;
        _14 = move (_1.12: A13);
        _67 = const true;
        _15 = move (_1.13: A14);
        _66 = const true;
        _16 = move (_1.14: A15);
        _65 = const true;
        _17 = move (_1.15: A16);
        _64 = const true;
        _18 = move (_1.16: A17);
        _63 = const true;
        _19 = move (_1.17: A18);
        _62 = const true;
        _20 = move (_1.18: A19);
        _61 = const true;
        _21 = move (_1.19: A20);
        _22 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb60];
    }

    bb1: {
        _79 = const false;
        _24 = move _3;
        _23 = <A2 as FromToNativeWasmType>::to_native(move _24) -> [return: bb2, unwind: bb39];
    }

    bb2: {
        _78 = const false;
        _26 = move _4;
        _25 = <A3 as FromToNativeWasmType>::to_native(move _26) -> [return: bb3, unwind: bb38];
    }

    bb3: {
        _77 = const false;
        _28 = move _5;
        _27 = <A4 as FromToNativeWasmType>::to_native(move _28) -> [return: bb4, unwind: bb37];
    }

    bb4: {
        _76 = const false;
        _30 = move _6;
        _29 = <A5 as FromToNativeWasmType>::to_native(move _30) -> [return: bb5, unwind: bb36];
    }

    bb5: {
        _75 = const false;
        _32 = move _7;
        _31 = <A6 as FromToNativeWasmType>::to_native(move _32) -> [return: bb6, unwind: bb35];
    }

    bb6: {
        _74 = const false;
        _34 = move _8;
        _33 = <A7 as FromToNativeWasmType>::to_native(move _34) -> [return: bb7, unwind: bb34];
    }

    bb7: {
        _73 = const false;
        _36 = move _9;
        _35 = <A8 as FromToNativeWasmType>::to_native(move _36) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        _72 = const false;
        _38 = move _10;
        _37 = <A9 as FromToNativeWasmType>::to_native(move _38) -> [return: bb9, unwind: bb32];
    }

    bb9: {
        _71 = const false;
        _40 = move _11;
        _39 = <A10 as FromToNativeWasmType>::to_native(move _40) -> [return: bb10, unwind: bb31];
    }

    bb10: {
        _70 = const false;
        _42 = move _12;
        _41 = <A11 as FromToNativeWasmType>::to_native(move _42) -> [return: bb11, unwind: bb30];
    }

    bb11: {
        _69 = const false;
        _44 = move _13;
        _43 = <A12 as FromToNativeWasmType>::to_native(move _44) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _68 = const false;
        _46 = move _14;
        _45 = <A13 as FromToNativeWasmType>::to_native(move _46) -> [return: bb13, unwind: bb28];
    }

    bb13: {
        _67 = const false;
        _48 = move _15;
        _47 = <A14 as FromToNativeWasmType>::to_native(move _48) -> [return: bb14, unwind: bb27];
    }

    bb14: {
        _66 = const false;
        _50 = move _16;
        _49 = <A15 as FromToNativeWasmType>::to_native(move _50) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        _65 = const false;
        _52 = move _17;
        _51 = <A16 as FromToNativeWasmType>::to_native(move _52) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        _64 = const false;
        _54 = move _18;
        _53 = <A17 as FromToNativeWasmType>::to_native(move _54) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        _63 = const false;
        _56 = move _19;
        _55 = <A18 as FromToNativeWasmType>::to_native(move _56) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        _62 = const false;
        _58 = move _20;
        _57 = <A19 as FromToNativeWasmType>::to_native(move _58) -> [return: bb19, unwind: bb22];
    }

    bb19: {
        _61 = const false;
        _60 = move _21;
        _59 = <A20 as FromToNativeWasmType>::to_native(move _60) -> [return: bb20, unwind: bb21];
    }

    bb20: {
        _0 = S20::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>(move _22, move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57, move _59);
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        return;
    }

    bb21 (cleanup): {
        drop(_57) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_55) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_53) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_51) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_49) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_47) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_45) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_43) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_41) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_39) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_37) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_35) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_33) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_31) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_29) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_27) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_25) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_23) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_22) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_62) -> [0: bb41, otherwise: bb61];
    }

    bb41 (cleanup): {
        switchInt(_63) -> [0: bb42, otherwise: bb62];
    }

    bb42 (cleanup): {
        switchInt(_64) -> [0: bb43, otherwise: bb63];
    }

    bb43 (cleanup): {
        switchInt(_65) -> [0: bb44, otherwise: bb64];
    }

    bb44 (cleanup): {
        switchInt(_66) -> [0: bb45, otherwise: bb65];
    }

    bb45 (cleanup): {
        switchInt(_67) -> [0: bb46, otherwise: bb66];
    }

    bb46 (cleanup): {
        switchInt(_68) -> [0: bb47, otherwise: bb67];
    }

    bb47 (cleanup): {
        switchInt(_69) -> [0: bb48, otherwise: bb68];
    }

    bb48 (cleanup): {
        switchInt(_70) -> [0: bb49, otherwise: bb69];
    }

    bb49 (cleanup): {
        switchInt(_71) -> [0: bb50, otherwise: bb70];
    }

    bb50 (cleanup): {
        switchInt(_72) -> [0: bb51, otherwise: bb71];
    }

    bb51 (cleanup): {
        switchInt(_73) -> [0: bb52, otherwise: bb72];
    }

    bb52 (cleanup): {
        switchInt(_74) -> [0: bb53, otherwise: bb73];
    }

    bb53 (cleanup): {
        switchInt(_75) -> [0: bb54, otherwise: bb74];
    }

    bb54 (cleanup): {
        switchInt(_76) -> [0: bb55, otherwise: bb75];
    }

    bb55 (cleanup): {
        switchInt(_77) -> [0: bb56, otherwise: bb76];
    }

    bb56 (cleanup): {
        switchInt(_78) -> [0: bb57, otherwise: bb77];
    }

    bb57 (cleanup): {
        switchInt(_79) -> [0: bb58, otherwise: bb78];
    }

    bb58 (cleanup): {
        resume;
    }

    bb59 (cleanup): {
        drop(_21) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_61) -> [0: bb40, otherwise: bb59];
    }

    bb61 (cleanup): {
        drop(_20) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_19) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_18) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_17) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_16) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_15) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_14) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_13) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_12) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_11) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_10) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_9) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_8) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_7) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_6) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_5) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_4) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_3) -> [return: bb58, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 20];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 20] = {
    let mut _0: &[wasmer_types::Type; 20];
    let mut _1: [wasmer_types::Type; 20];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _22: &Func;
    let _23: &Func;
    let _24: *const Func;
    let mut _25: *const ();
    let mut _27: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _28: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _29: &&Func;
    let mut _30: isize;
    let mut _31: isize;
    let mut _34: !;
    let mut _35: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _36: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _38: !;
    let mut _40: isize;
    scope 1 {
        debug func => _22;
        let _26: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _26;
            let _32: Rets;
            let _33: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _37: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _32;
            }
            scope 5 {
                debug trap => _33;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _37;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _39: &();
    }

    bb0: {
        _39 = const _;
        _25 = &raw const (*_39);
        _24 = move _25 as *const Func (PtrToPtr);
        _23 = &(*_24);
        _22 = _23;
        _29 = &_22;
        _28 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _29, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21 };
        _27 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _28);
        _26 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _27) -> [return: bb1, unwind continue];
    }

    bb1: {
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _30 = discriminant(((_26 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _30) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _37 = move ((_26 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _38 = resume_panic(move _37) -> unwind continue;
    }

    bb5: {
        _32 = move ((((_26 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _32) -> [return: bb6, unwind continue];
    }

    bb6: {
        _40 = discriminant(_26);
        switchInt(move _40) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _33 = move ((((_26 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _36 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _33) -> [return: bb8, unwind continue];
    }

    bb8: {
        _35 = move _36 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _34 = raise_user_trap(move _35) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: &&Func;
    let mut _45: &Func;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;

    bb0: {
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _65 = const true;
        _66 = const true;
        _67 = const true;
        _68 = const true;
        _69 = const true;
        _70 = const true;
        _71 = const true;
        _72 = const true;
        _73 = const true;
        _74 = const true;
        _75 = const true;
        _76 = const true;
        _77 = const true;
        _78 = const true;
        _79 = const true;
        _80 = const true;
        _81 = const true;
        _82 = const true;
        _83 = const true;
        _44 = deref_copy (_1.0: &&Func);
        _45 = deref_copy (*_44);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb99];
    }

    bb1: {
        _64 = const true;
        _83 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb61];
    }

    bb2: {
        _63 = const true;
        _82 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb59];
    }

    bb3: {
        _62 = const true;
        _81 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb57];
    }

    bb4: {
        _61 = const true;
        _80 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb55];
    }

    bb5: {
        _60 = const true;
        _79 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb53];
    }

    bb6: {
        _59 = const true;
        _78 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb51];
    }

    bb7: {
        _58 = const true;
        _77 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb49];
    }

    bb8: {
        _57 = const true;
        _76 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb47];
    }

    bb9: {
        _56 = const true;
        _75 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb45];
    }

    bb10: {
        _55 = const true;
        _74 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb43];
    }

    bb11: {
        _54 = const true;
        _73 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb41];
    }

    bb12: {
        _53 = const true;
        _72 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb39];
    }

    bb13: {
        _52 = const true;
        _71 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb37];
    }

    bb14: {
        _51 = const true;
        _70 = const false;
        _33 = move (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb35];
    }

    bb15: {
        _50 = const true;
        _69 = const false;
        _35 = move (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        _49 = const true;
        _68 = const false;
        _37 = move (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        _48 = const true;
        _67 = const false;
        _39 = move (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb29];
    }

    bb18: {
        _47 = const true;
        _66 = const false;
        _41 = move (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb27];
    }

    bb19: {
        _46 = const true;
        _65 = const false;
        _43 = move (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb25];
    }

    bb20: {
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)>>::call(_45, move _3) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        _46 = const false;
        _47 = const false;
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb22, unwind: bb99];
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        resume;
    }

    bb24 (cleanup): {
        drop(_40) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_46) -> [0: bb27, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_38) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_47) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_36) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_48) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_34) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_49) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_32) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_50) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_30) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_51) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_28) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_52) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_26) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_53) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_24) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_54) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_22) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_55) -> [0: bb45, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_20) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_56) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_18) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_57) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_16) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_58) -> [0: bb51, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_14) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_59) -> [0: bb53, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_12) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_60) -> [0: bb55, otherwise: bb52];
    }

    bb54 (cleanup): {
        drop(_10) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_61) -> [0: bb57, otherwise: bb54];
    }

    bb56 (cleanup): {
        drop(_8) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_62) -> [0: bb59, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_6) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_63) -> [0: bb61, otherwise: bb58];
    }

    bb60 (cleanup): {
        drop(_4) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_64) -> [0: bb99, otherwise: bb60];
    }

    bb62 (cleanup): {
        switchInt(_65) -> [0: bb23, otherwise: bb63];
    }

    bb63 (cleanup): {
        drop((_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_66) -> [0: bb62, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop((_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_67) -> [0: bb64, otherwise: bb67];
    }

    bb67 (cleanup): {
        drop((_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_68) -> [0: bb66, otherwise: bb69];
    }

    bb69 (cleanup): {
        drop((_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_69) -> [0: bb68, otherwise: bb71];
    }

    bb71 (cleanup): {
        drop((_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_70) -> [0: bb70, otherwise: bb73];
    }

    bb73 (cleanup): {
        drop((_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_71) -> [0: bb72, otherwise: bb75];
    }

    bb75 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_72) -> [0: bb74, otherwise: bb77];
    }

    bb77 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_73) -> [0: bb76, otherwise: bb79];
    }

    bb79 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_74) -> [0: bb78, otherwise: bb81];
    }

    bb81 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_75) -> [0: bb80, otherwise: bb83];
    }

    bb83 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_76) -> [0: bb82, otherwise: bb85];
    }

    bb85 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_77) -> [0: bb84, otherwise: bb87];
    }

    bb87 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        switchInt(_78) -> [0: bb86, otherwise: bb89];
    }

    bb89 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        switchInt(_79) -> [0: bb88, otherwise: bb91];
    }

    bb91 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        switchInt(_80) -> [0: bb90, otherwise: bb93];
    }

    bb93 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_81) -> [0: bb92, otherwise: bb95];
    }

    bb95 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        switchInt(_82) -> [0: bb94, otherwise: bb97];
    }

    bb97 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        switchInt(_83) -> [0: bb96, otherwise: bb98];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _22: &Func;
    let _23: &Func;
    let _24: *const Func;
    let mut _25: *const ();
    let mut _27: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _28: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _29: &&Func;
    let mut _30: &&Env;
    let mut _31: isize;
    let mut _32: isize;
    let mut _35: !;
    let mut _36: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _37: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _39: !;
    let mut _41: isize;
    scope 1 {
        debug func => _22;
        let _26: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _26;
            let _33: Rets;
            let _34: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _38: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _33;
            }
            scope 5 {
                debug trap => _34;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _38;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _40: &();
    }

    bb0: {
        _40 = const _;
        _25 = &raw const (*_40);
        _24 = move _25 as *const Func (PtrToPtr);
        _23 = &(*_24);
        _22 = _23;
        _29 = &_22;
        _30 = &_1;
        _28 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _29, env: move _30, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21 };
        _27 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _28);
        _26 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _27) -> [return: bb1, unwind continue];
    }

    bb1: {
        _32 = discriminant(_26);
        switchInt(move _32) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _31 = discriminant(((_26 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _31) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _38 = move ((_26 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _39 = resume_panic(move _38) -> unwind continue;
    }

    bb5: {
        _33 = move ((((_26 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _33) -> [return: bb6, unwind continue];
    }

    bb6: {
        _41 = discriminant(_26);
        switchInt(move _41) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _34 = move ((((_26 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _37 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _34) -> [return: bb8, unwind continue];
    }

    bb8: {
        _36 = move _37 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _35 = raise_user_trap(move _36) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: &&Func;
    let mut _45: &Func;
    let mut _46: &&Env;
    let mut _47: &Env;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;

    bb0: {
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _67 = const true;
        _68 = const true;
        _69 = const true;
        _70 = const true;
        _71 = const true;
        _72 = const true;
        _73 = const true;
        _74 = const true;
        _75 = const true;
        _76 = const true;
        _77 = const true;
        _78 = const true;
        _79 = const true;
        _80 = const true;
        _81 = const true;
        _82 = const true;
        _83 = const true;
        _84 = const true;
        _85 = const true;
        _44 = deref_copy (_1.0: &&Func);
        _45 = deref_copy (*_44);
        _46 = deref_copy (_1.1: &&Env);
        _47 = deref_copy (*_46);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb99];
    }

    bb1: {
        _66 = const true;
        _85 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb61];
    }

    bb2: {
        _65 = const true;
        _84 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb59];
    }

    bb3: {
        _64 = const true;
        _83 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb57];
    }

    bb4: {
        _63 = const true;
        _82 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb55];
    }

    bb5: {
        _62 = const true;
        _81 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb53];
    }

    bb6: {
        _61 = const true;
        _80 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb51];
    }

    bb7: {
        _60 = const true;
        _79 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb49];
    }

    bb8: {
        _59 = const true;
        _78 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb47];
    }

    bb9: {
        _58 = const true;
        _77 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb45];
    }

    bb10: {
        _57 = const true;
        _76 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb43];
    }

    bb11: {
        _56 = const true;
        _75 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb41];
    }

    bb12: {
        _55 = const true;
        _74 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb39];
    }

    bb13: {
        _54 = const true;
        _73 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb37];
    }

    bb14: {
        _53 = const true;
        _72 = const false;
        _33 = move (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb35];
    }

    bb15: {
        _52 = const true;
        _71 = const false;
        _35 = move (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        _51 = const true;
        _70 = const false;
        _37 = move (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        _50 = const true;
        _69 = const false;
        _39 = move (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb29];
    }

    bb18: {
        _49 = const true;
        _68 = const false;
        _41 = move (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb27];
    }

    bb19: {
        _48 = const true;
        _67 = const false;
        _43 = move (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb25];
    }

    bb20: {
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _3 = (_47, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)>>::call(_45, move _3) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb22, unwind: bb99];
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        resume;
    }

    bb24 (cleanup): {
        drop(_40) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_48) -> [0: bb27, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_38) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_49) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_36) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_50) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_34) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_51) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_32) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_52) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_30) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_53) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_28) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_54) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_26) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_55) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_24) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_56) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_22) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_57) -> [0: bb45, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_20) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_58) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_18) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_59) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_16) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_60) -> [0: bb51, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_14) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_61) -> [0: bb53, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_12) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_62) -> [0: bb55, otherwise: bb52];
    }

    bb54 (cleanup): {
        drop(_10) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_63) -> [0: bb57, otherwise: bb54];
    }

    bb56 (cleanup): {
        drop(_8) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_64) -> [0: bb59, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_6) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_65) -> [0: bb61, otherwise: bb58];
    }

    bb60 (cleanup): {
        drop(_4) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_66) -> [0: bb99, otherwise: bb60];
    }

    bb62 (cleanup): {
        switchInt(_67) -> [0: bb23, otherwise: bb63];
    }

    bb63 (cleanup): {
        drop((_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_68) -> [0: bb62, otherwise: bb65];
    }

    bb65 (cleanup): {
        drop((_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_69) -> [0: bb64, otherwise: bb67];
    }

    bb67 (cleanup): {
        drop((_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_70) -> [0: bb66, otherwise: bb69];
    }

    bb69 (cleanup): {
        drop((_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_71) -> [0: bb68, otherwise: bb71];
    }

    bb71 (cleanup): {
        drop((_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_72) -> [0: bb70, otherwise: bb73];
    }

    bb73 (cleanup): {
        drop((_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_73) -> [0: bb72, otherwise: bb75];
    }

    bb75 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_74) -> [0: bb74, otherwise: bb77];
    }

    bb77 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_75) -> [0: bb76, otherwise: bb79];
    }

    bb79 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_76) -> [0: bb78, otherwise: bb81];
    }

    bb81 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_77) -> [0: bb80, otherwise: bb83];
    }

    bb83 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_78) -> [0: bb82, otherwise: bb85];
    }

    bb85 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_79) -> [0: bb84, otherwise: bb87];
    }

    bb87 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        switchInt(_80) -> [0: bb86, otherwise: bb89];
    }

    bb89 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        switchInt(_81) -> [0: bb88, otherwise: bb91];
    }

    bb91 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        switchInt(_82) -> [0: bb90, otherwise: bb93];
    }

    bb93 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_83) -> [0: bb92, otherwise: bb95];
    }

    bb95 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        switchInt(_84) -> [0: bb94, otherwise: bb97];
    }

    bb97 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        switchInt(_85) -> [0: bb96, otherwise: bb98];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 21_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 21]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21);
    let mut _23: A1;
    let mut _24: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A2;
    let mut _26: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A3;
    let mut _28: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A4;
    let mut _30: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A5;
    let mut _32: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A6;
    let mut _34: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A7;
    let mut _36: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A8;
    let mut _38: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A9;
    let mut _40: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A10;
    let mut _42: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A11;
    let mut _44: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A12;
    let mut _46: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A13;
    let mut _48: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A14;
    let mut _50: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A15;
    let mut _52: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A16;
    let mut _54: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A17;
    let mut _56: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A18;
    let mut _58: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A19;
    let mut _60: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A20;
    let mut _62: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A21;
    let mut _64: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
        let _16: i128;
        let _17: i128;
        let _18: i128;
        let _19: i128;
        let _20: i128;
        let _21: i128;
        let _22: i128;
    }

    bb0: {
        _2 = _1[0 of 21];
        _3 = _1[1 of 21];
        _4 = _1[2 of 21];
        _5 = _1[3 of 21];
        _6 = _1[4 of 21];
        _7 = _1[5 of 21];
        _8 = _1[6 of 21];
        _9 = _1[7 of 21];
        _10 = _1[8 of 21];
        _11 = _1[9 of 21];
        _12 = _1[10 of 21];
        _13 = _1[11 of 21];
        _14 = _1[12 of 21];
        _15 = _1[13 of 21];
        _16 = _1[14 of 21];
        _17 = _1[15 of 21];
        _18 = _1[16 of 21];
        _19 = _1[17 of 21];
        _20 = _1[18 of 21];
        _21 = _1[19 of 21];
        _22 = _1[20 of 21];
        _24 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _23 = <A1 as FromToNativeWasmType>::from_native(move _24) -> [return: bb2, unwind continue];
    }

    bb2: {
        _26 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb62];
    }

    bb3: {
        _25 = <A2 as FromToNativeWasmType>::from_native(move _26) -> [return: bb4, unwind: bb62];
    }

    bb4: {
        _28 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb61];
    }

    bb5: {
        _27 = <A3 as FromToNativeWasmType>::from_native(move _28) -> [return: bb6, unwind: bb61];
    }

    bb6: {
        _30 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb60];
    }

    bb7: {
        _29 = <A4 as FromToNativeWasmType>::from_native(move _30) -> [return: bb8, unwind: bb60];
    }

    bb8: {
        _32 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb59];
    }

    bb9: {
        _31 = <A5 as FromToNativeWasmType>::from_native(move _32) -> [return: bb10, unwind: bb59];
    }

    bb10: {
        _34 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb58];
    }

    bb11: {
        _33 = <A6 as FromToNativeWasmType>::from_native(move _34) -> [return: bb12, unwind: bb58];
    }

    bb12: {
        _36 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb57];
    }

    bb13: {
        _35 = <A7 as FromToNativeWasmType>::from_native(move _36) -> [return: bb14, unwind: bb57];
    }

    bb14: {
        _38 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb56];
    }

    bb15: {
        _37 = <A8 as FromToNativeWasmType>::from_native(move _38) -> [return: bb16, unwind: bb56];
    }

    bb16: {
        _40 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb55];
    }

    bb17: {
        _39 = <A9 as FromToNativeWasmType>::from_native(move _40) -> [return: bb18, unwind: bb55];
    }

    bb18: {
        _42 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb54];
    }

    bb19: {
        _41 = <A10 as FromToNativeWasmType>::from_native(move _42) -> [return: bb20, unwind: bb54];
    }

    bb20: {
        _44 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb53];
    }

    bb21: {
        _43 = <A11 as FromToNativeWasmType>::from_native(move _44) -> [return: bb22, unwind: bb53];
    }

    bb22: {
        _46 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb52];
    }

    bb23: {
        _45 = <A12 as FromToNativeWasmType>::from_native(move _46) -> [return: bb24, unwind: bb52];
    }

    bb24: {
        _48 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb51];
    }

    bb25: {
        _47 = <A13 as FromToNativeWasmType>::from_native(move _48) -> [return: bb26, unwind: bb51];
    }

    bb26: {
        _50 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb50];
    }

    bb27: {
        _49 = <A14 as FromToNativeWasmType>::from_native(move _50) -> [return: bb28, unwind: bb50];
    }

    bb28: {
        _52 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_16) -> [return: bb29, unwind: bb49];
    }

    bb29: {
        _51 = <A15 as FromToNativeWasmType>::from_native(move _52) -> [return: bb30, unwind: bb49];
    }

    bb30: {
        _54 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_17) -> [return: bb31, unwind: bb48];
    }

    bb31: {
        _53 = <A16 as FromToNativeWasmType>::from_native(move _54) -> [return: bb32, unwind: bb48];
    }

    bb32: {
        _56 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_18) -> [return: bb33, unwind: bb47];
    }

    bb33: {
        _55 = <A17 as FromToNativeWasmType>::from_native(move _56) -> [return: bb34, unwind: bb47];
    }

    bb34: {
        _58 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_19) -> [return: bb35, unwind: bb46];
    }

    bb35: {
        _57 = <A18 as FromToNativeWasmType>::from_native(move _58) -> [return: bb36, unwind: bb46];
    }

    bb36: {
        _60 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_20) -> [return: bb37, unwind: bb45];
    }

    bb37: {
        _59 = <A19 as FromToNativeWasmType>::from_native(move _60) -> [return: bb38, unwind: bb45];
    }

    bb38: {
        _62 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_21) -> [return: bb39, unwind: bb44];
    }

    bb39: {
        _61 = <A20 as FromToNativeWasmType>::from_native(move _62) -> [return: bb40, unwind: bb44];
    }

    bb40: {
        _64 = <<A21 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_22) -> [return: bb41, unwind: bb43];
    }

    bb41: {
        _63 = <A21 as FromToNativeWasmType>::from_native(move _64) -> [return: bb42, unwind: bb43];
    }

    bb42: {
        _0 = (move _23, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57, move _59, move _61, move _63);
        return;
    }

    bb43 (cleanup): {
        drop(_61) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_59) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_57) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_55) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_53) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_51) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_49) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_47) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_45) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_43) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_41) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_39) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_37) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_35) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_33) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_31) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_29) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_27) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_25) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_23) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 21]>;
    let mut _4: std::result::Result<[i128; 21], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 21];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 21]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 21], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 21]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)) -> [i128; 21] {
    debug self => _1;
    let mut _0: [i128; 21];
    let mut _23: i128;
    let mut _24: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: i128;
    let mut _26: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A2;
    let mut _28: i128;
    let mut _29: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A3;
    let mut _31: i128;
    let mut _32: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A4;
    let mut _34: i128;
    let mut _35: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A5;
    let mut _37: i128;
    let mut _38: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A6;
    let mut _40: i128;
    let mut _41: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A7;
    let mut _43: i128;
    let mut _44: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A8;
    let mut _46: i128;
    let mut _47: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A9;
    let mut _49: i128;
    let mut _50: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A10;
    let mut _52: i128;
    let mut _53: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A11;
    let mut _55: i128;
    let mut _56: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A12;
    let mut _58: i128;
    let mut _59: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A13;
    let mut _61: i128;
    let mut _62: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A14;
    let mut _64: i128;
    let mut _65: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A15;
    let mut _67: i128;
    let mut _68: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _69: A16;
    let mut _70: i128;
    let mut _71: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _72: A17;
    let mut _73: i128;
    let mut _74: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _75: A18;
    let mut _76: i128;
    let mut _77: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _78: A19;
    let mut _79: i128;
    let mut _80: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _81: A20;
    let mut _82: i128;
    let mut _83: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _84: A21;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
        let _16: A15;
        let _17: A16;
        let _18: A17;
        let _19: A18;
        let _20: A19;
        let _21: A20;
        let _22: A21;
    }

    bb0: {
        _104 = const false;
        _103 = const false;
        _102 = const false;
        _101 = const false;
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _2 = move (_1.0: A1);
        _104 = const true;
        _3 = move (_1.1: A2);
        _103 = const true;
        _4 = move (_1.2: A3);
        _102 = const true;
        _5 = move (_1.3: A4);
        _101 = const true;
        _6 = move (_1.4: A5);
        _100 = const true;
        _7 = move (_1.5: A6);
        _99 = const true;
        _8 = move (_1.6: A7);
        _98 = const true;
        _9 = move (_1.7: A8);
        _97 = const true;
        _10 = move (_1.8: A9);
        _96 = const true;
        _11 = move (_1.9: A10);
        _95 = const true;
        _12 = move (_1.10: A11);
        _94 = const true;
        _13 = move (_1.11: A12);
        _93 = const true;
        _14 = move (_1.12: A13);
        _92 = const true;
        _15 = move (_1.13: A14);
        _91 = const true;
        _16 = move (_1.14: A15);
        _90 = const true;
        _17 = move (_1.15: A16);
        _89 = const true;
        _18 = move (_1.16: A17);
        _88 = const true;
        _19 = move (_1.17: A18);
        _87 = const true;
        _20 = move (_1.18: A19);
        _86 = const true;
        _21 = move (_1.19: A20);
        _85 = const true;
        _22 = move (_1.20: A21);
        _24 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb64];
    }

    bb1: {
        _23 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _24) -> [return: bb2, unwind: bb64];
    }

    bb2: {
        _104 = const false;
        _27 = move _3;
        _26 = <A2 as FromToNativeWasmType>::to_native(move _27) -> [return: bb3, unwind: bb64];
    }

    bb3: {
        _25 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _26) -> [return: bb4, unwind: bb64];
    }

    bb4: {
        _103 = const false;
        _30 = move _4;
        _29 = <A3 as FromToNativeWasmType>::to_native(move _30) -> [return: bb5, unwind: bb64];
    }

    bb5: {
        _28 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _29) -> [return: bb6, unwind: bb64];
    }

    bb6: {
        _102 = const false;
        _33 = move _5;
        _32 = <A4 as FromToNativeWasmType>::to_native(move _33) -> [return: bb7, unwind: bb64];
    }

    bb7: {
        _31 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _32) -> [return: bb8, unwind: bb64];
    }

    bb8: {
        _101 = const false;
        _36 = move _6;
        _35 = <A5 as FromToNativeWasmType>::to_native(move _36) -> [return: bb9, unwind: bb64];
    }

    bb9: {
        _34 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _35) -> [return: bb10, unwind: bb64];
    }

    bb10: {
        _100 = const false;
        _39 = move _7;
        _38 = <A6 as FromToNativeWasmType>::to_native(move _39) -> [return: bb11, unwind: bb64];
    }

    bb11: {
        _37 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _38) -> [return: bb12, unwind: bb64];
    }

    bb12: {
        _99 = const false;
        _42 = move _8;
        _41 = <A7 as FromToNativeWasmType>::to_native(move _42) -> [return: bb13, unwind: bb64];
    }

    bb13: {
        _40 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _41) -> [return: bb14, unwind: bb64];
    }

    bb14: {
        _98 = const false;
        _45 = move _9;
        _44 = <A8 as FromToNativeWasmType>::to_native(move _45) -> [return: bb15, unwind: bb64];
    }

    bb15: {
        _43 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _44) -> [return: bb16, unwind: bb64];
    }

    bb16: {
        _97 = const false;
        _48 = move _10;
        _47 = <A9 as FromToNativeWasmType>::to_native(move _48) -> [return: bb17, unwind: bb64];
    }

    bb17: {
        _46 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _47) -> [return: bb18, unwind: bb64];
    }

    bb18: {
        _96 = const false;
        _51 = move _11;
        _50 = <A10 as FromToNativeWasmType>::to_native(move _51) -> [return: bb19, unwind: bb64];
    }

    bb19: {
        _49 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _50) -> [return: bb20, unwind: bb64];
    }

    bb20: {
        _95 = const false;
        _54 = move _12;
        _53 = <A11 as FromToNativeWasmType>::to_native(move _54) -> [return: bb21, unwind: bb64];
    }

    bb21: {
        _52 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _53) -> [return: bb22, unwind: bb64];
    }

    bb22: {
        _94 = const false;
        _57 = move _13;
        _56 = <A12 as FromToNativeWasmType>::to_native(move _57) -> [return: bb23, unwind: bb64];
    }

    bb23: {
        _55 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _56) -> [return: bb24, unwind: bb64];
    }

    bb24: {
        _93 = const false;
        _60 = move _14;
        _59 = <A13 as FromToNativeWasmType>::to_native(move _60) -> [return: bb25, unwind: bb64];
    }

    bb25: {
        _58 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _59) -> [return: bb26, unwind: bb64];
    }

    bb26: {
        _92 = const false;
        _63 = move _15;
        _62 = <A14 as FromToNativeWasmType>::to_native(move _63) -> [return: bb27, unwind: bb64];
    }

    bb27: {
        _61 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _62) -> [return: bb28, unwind: bb64];
    }

    bb28: {
        _91 = const false;
        _66 = move _16;
        _65 = <A15 as FromToNativeWasmType>::to_native(move _66) -> [return: bb29, unwind: bb64];
    }

    bb29: {
        _64 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _65) -> [return: bb30, unwind: bb64];
    }

    bb30: {
        _90 = const false;
        _69 = move _17;
        _68 = <A16 as FromToNativeWasmType>::to_native(move _69) -> [return: bb31, unwind: bb64];
    }

    bb31: {
        _67 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _68) -> [return: bb32, unwind: bb64];
    }

    bb32: {
        _89 = const false;
        _72 = move _18;
        _71 = <A17 as FromToNativeWasmType>::to_native(move _72) -> [return: bb33, unwind: bb64];
    }

    bb33: {
        _70 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _71) -> [return: bb34, unwind: bb64];
    }

    bb34: {
        _88 = const false;
        _75 = move _19;
        _74 = <A18 as FromToNativeWasmType>::to_native(move _75) -> [return: bb35, unwind: bb64];
    }

    bb35: {
        _73 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _74) -> [return: bb36, unwind: bb64];
    }

    bb36: {
        _87 = const false;
        _78 = move _20;
        _77 = <A19 as FromToNativeWasmType>::to_native(move _78) -> [return: bb37, unwind: bb64];
    }

    bb37: {
        _76 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _77) -> [return: bb38, unwind: bb64];
    }

    bb38: {
        _86 = const false;
        _81 = move _21;
        _80 = <A20 as FromToNativeWasmType>::to_native(move _81) -> [return: bb39, unwind: bb64];
    }

    bb39: {
        _79 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _80) -> [return: bb40, unwind: bb64];
    }

    bb40: {
        _85 = const false;
        _84 = move _22;
        _83 = <A21 as FromToNativeWasmType>::to_native(move _84) -> [return: bb41, unwind: bb64];
    }

    bb41: {
        _82 = <<A21 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _83) -> [return: bb42, unwind: bb64];
    }

    bb42: {
        _0 = [move _23, move _25, move _28, move _31, move _34, move _37, move _40, move _43, move _46, move _49, move _52, move _55, move _58, move _61, move _64, move _67, move _70, move _73, move _76, move _79, move _82];
        _85 = const false;
        _86 = const false;
        _87 = const false;
        _88 = const false;
        _89 = const false;
        _90 = const false;
        _91 = const false;
        _92 = const false;
        _93 = const false;
        _94 = const false;
        _95 = const false;
        _96 = const false;
        _97 = const false;
        _98 = const false;
        _99 = const false;
        _100 = const false;
        _101 = const false;
        _102 = const false;
        _103 = const false;
        _104 = const false;
        return;
    }

    bb43 (cleanup): {
        switchInt(_86) -> [0: bb44, otherwise: bb65];
    }

    bb44 (cleanup): {
        switchInt(_87) -> [0: bb45, otherwise: bb66];
    }

    bb45 (cleanup): {
        switchInt(_88) -> [0: bb46, otherwise: bb67];
    }

    bb46 (cleanup): {
        switchInt(_89) -> [0: bb47, otherwise: bb68];
    }

    bb47 (cleanup): {
        switchInt(_90) -> [0: bb48, otherwise: bb69];
    }

    bb48 (cleanup): {
        switchInt(_91) -> [0: bb49, otherwise: bb70];
    }

    bb49 (cleanup): {
        switchInt(_92) -> [0: bb50, otherwise: bb71];
    }

    bb50 (cleanup): {
        switchInt(_93) -> [0: bb51, otherwise: bb72];
    }

    bb51 (cleanup): {
        switchInt(_94) -> [0: bb52, otherwise: bb73];
    }

    bb52 (cleanup): {
        switchInt(_95) -> [0: bb53, otherwise: bb74];
    }

    bb53 (cleanup): {
        switchInt(_96) -> [0: bb54, otherwise: bb75];
    }

    bb54 (cleanup): {
        switchInt(_97) -> [0: bb55, otherwise: bb76];
    }

    bb55 (cleanup): {
        switchInt(_98) -> [0: bb56, otherwise: bb77];
    }

    bb56 (cleanup): {
        switchInt(_99) -> [0: bb57, otherwise: bb78];
    }

    bb57 (cleanup): {
        switchInt(_100) -> [0: bb58, otherwise: bb79];
    }

    bb58 (cleanup): {
        switchInt(_101) -> [0: bb59, otherwise: bb80];
    }

    bb59 (cleanup): {
        switchInt(_102) -> [0: bb60, otherwise: bb81];
    }

    bb60 (cleanup): {
        switchInt(_103) -> [0: bb61, otherwise: bb82];
    }

    bb61 (cleanup): {
        switchInt(_104) -> [0: bb62, otherwise: bb83];
    }

    bb62 (cleanup): {
        resume;
    }

    bb63 (cleanup): {
        drop(_22) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_85) -> [0: bb43, otherwise: bb63];
    }

    bb65 (cleanup): {
        drop(_21) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_20) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_19) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_18) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_17) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_16) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_15) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_14) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_13) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_12) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_11) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_10) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_9) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_8) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_7) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_6) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_5) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_4) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_3) -> [return: bb62, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 21] {
    let mut _0: [i128; 21];

    bb0: {
        _0 = [const 0_i128; 21];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 21_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S21<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21);
    let mut _23: A1;
    let mut _24: A2;
    let mut _25: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A3;
    let mut _27: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A4;
    let mut _29: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A5;
    let mut _31: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A6;
    let mut _33: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A7;
    let mut _35: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A8;
    let mut _37: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A9;
    let mut _39: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A10;
    let mut _41: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A11;
    let mut _43: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A12;
    let mut _45: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A13;
    let mut _47: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A14;
    let mut _49: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A15;
    let mut _51: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A16;
    let mut _53: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A17;
    let mut _55: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A18;
    let mut _57: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A19;
    let mut _59: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A20;
    let mut _61: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A21;
    let mut _63: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
        let _16: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
        let _17: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
        let _18: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
        let _19: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
        let _20: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
        let _21: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
        let _22: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _83 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _82 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _81 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _80 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _79 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _78 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _77 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _76 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _75 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _74 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _73 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _72 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _71 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _70 = const true;
        _16 = move (_1.14: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _69 = const true;
        _17 = move (_1.15: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _68 = const true;
        _18 = move (_1.16: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _67 = const true;
        _19 = move (_1.17: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _66 = const true;
        _20 = move (_1.18: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _65 = const true;
        _21 = move (_1.19: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _64 = const true;
        _22 = move (_1.20: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _23 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb63];
    }

    bb1: {
        _83 = const false;
        _25 = move _3;
        _24 = <A2 as FromToNativeWasmType>::from_native(move _25) -> [return: bb2, unwind: bb41];
    }

    bb2: {
        _82 = const false;
        _27 = move _4;
        _26 = <A3 as FromToNativeWasmType>::from_native(move _27) -> [return: bb3, unwind: bb40];
    }

    bb3: {
        _81 = const false;
        _29 = move _5;
        _28 = <A4 as FromToNativeWasmType>::from_native(move _29) -> [return: bb4, unwind: bb39];
    }

    bb4: {
        _80 = const false;
        _31 = move _6;
        _30 = <A5 as FromToNativeWasmType>::from_native(move _31) -> [return: bb5, unwind: bb38];
    }

    bb5: {
        _79 = const false;
        _33 = move _7;
        _32 = <A6 as FromToNativeWasmType>::from_native(move _33) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        _78 = const false;
        _35 = move _8;
        _34 = <A7 as FromToNativeWasmType>::from_native(move _35) -> [return: bb7, unwind: bb36];
    }

    bb7: {
        _77 = const false;
        _37 = move _9;
        _36 = <A8 as FromToNativeWasmType>::from_native(move _37) -> [return: bb8, unwind: bb35];
    }

    bb8: {
        _76 = const false;
        _39 = move _10;
        _38 = <A9 as FromToNativeWasmType>::from_native(move _39) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        _75 = const false;
        _41 = move _11;
        _40 = <A10 as FromToNativeWasmType>::from_native(move _41) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _74 = const false;
        _43 = move _12;
        _42 = <A11 as FromToNativeWasmType>::from_native(move _43) -> [return: bb11, unwind: bb32];
    }

    bb11: {
        _73 = const false;
        _45 = move _13;
        _44 = <A12 as FromToNativeWasmType>::from_native(move _45) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        _72 = const false;
        _47 = move _14;
        _46 = <A13 as FromToNativeWasmType>::from_native(move _47) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        _71 = const false;
        _49 = move _15;
        _48 = <A14 as FromToNativeWasmType>::from_native(move _49) -> [return: bb14, unwind: bb29];
    }

    bb14: {
        _70 = const false;
        _51 = move _16;
        _50 = <A15 as FromToNativeWasmType>::from_native(move _51) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        _69 = const false;
        _53 = move _17;
        _52 = <A16 as FromToNativeWasmType>::from_native(move _53) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        _68 = const false;
        _55 = move _18;
        _54 = <A17 as FromToNativeWasmType>::from_native(move _55) -> [return: bb17, unwind: bb26];
    }

    bb17: {
        _67 = const false;
        _57 = move _19;
        _56 = <A18 as FromToNativeWasmType>::from_native(move _57) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        _66 = const false;
        _59 = move _20;
        _58 = <A19 as FromToNativeWasmType>::from_native(move _59) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        _65 = const false;
        _61 = move _21;
        _60 = <A20 as FromToNativeWasmType>::from_native(move _61) -> [return: bb20, unwind: bb23];
    }

    bb20: {
        _64 = const false;
        _63 = move _22;
        _62 = <A21 as FromToNativeWasmType>::from_native(move _63) -> [return: bb21, unwind: bb22];
    }

    bb21: {
        _0 = (move _23, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56, move _58, move _60, move _62);
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        return;
    }

    bb22 (cleanup): {
        drop(_60) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_58) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_56) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_54) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_52) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_50) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_48) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_46) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_44) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_42) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_40) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_38) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_36) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_34) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_32) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_30) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_28) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_26) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_24) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_23) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_65) -> [0: bb43, otherwise: bb64];
    }

    bb43 (cleanup): {
        switchInt(_66) -> [0: bb44, otherwise: bb65];
    }

    bb44 (cleanup): {
        switchInt(_67) -> [0: bb45, otherwise: bb66];
    }

    bb45 (cleanup): {
        switchInt(_68) -> [0: bb46, otherwise: bb67];
    }

    bb46 (cleanup): {
        switchInt(_69) -> [0: bb47, otherwise: bb68];
    }

    bb47 (cleanup): {
        switchInt(_70) -> [0: bb48, otherwise: bb69];
    }

    bb48 (cleanup): {
        switchInt(_71) -> [0: bb49, otherwise: bb70];
    }

    bb49 (cleanup): {
        switchInt(_72) -> [0: bb50, otherwise: bb71];
    }

    bb50 (cleanup): {
        switchInt(_73) -> [0: bb51, otherwise: bb72];
    }

    bb51 (cleanup): {
        switchInt(_74) -> [0: bb52, otherwise: bb73];
    }

    bb52 (cleanup): {
        switchInt(_75) -> [0: bb53, otherwise: bb74];
    }

    bb53 (cleanup): {
        switchInt(_76) -> [0: bb54, otherwise: bb75];
    }

    bb54 (cleanup): {
        switchInt(_77) -> [0: bb55, otherwise: bb76];
    }

    bb55 (cleanup): {
        switchInt(_78) -> [0: bb56, otherwise: bb77];
    }

    bb56 (cleanup): {
        switchInt(_79) -> [0: bb57, otherwise: bb78];
    }

    bb57 (cleanup): {
        switchInt(_80) -> [0: bb58, otherwise: bb79];
    }

    bb58 (cleanup): {
        switchInt(_81) -> [0: bb59, otherwise: bb80];
    }

    bb59 (cleanup): {
        switchInt(_82) -> [0: bb60, otherwise: bb81];
    }

    bb60 (cleanup): {
        switchInt(_83) -> [0: bb61, otherwise: bb82];
    }

    bb61 (cleanup): {
        resume;
    }

    bb62 (cleanup): {
        drop(_22) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_64) -> [0: bb42, otherwise: bb62];
    }

    bb64 (cleanup): {
        drop(_21) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_20) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_19) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_18) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_17) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_16) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_15) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_14) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_13) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_12) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_11) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_10) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_9) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_8) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_7) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_6) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_5) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_4) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_3) -> [return: bb61, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)) -> S21<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21> {
    debug self => _1;
    let mut _0: externals::function::inner::S21<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let _16: A15;
    let _17: A16;
    let _18: A17;
    let _19: A18;
    let _20: A19;
    let _21: A20;
    let _22: A21;
    let mut _23: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A2;
    let mut _26: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A3;
    let mut _28: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A4;
    let mut _30: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A5;
    let mut _32: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A6;
    let mut _34: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A7;
    let mut _36: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A8;
    let mut _38: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A9;
    let mut _40: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A10;
    let mut _42: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A11;
    let mut _44: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A12;
    let mut _46: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A13;
    let mut _48: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A14;
    let mut _50: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A15;
    let mut _52: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A16;
    let mut _54: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A17;
    let mut _56: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A18;
    let mut _58: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A19;
    let mut _60: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A20;
    let mut _62: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A21;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
    }

    bb0: {
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _2 = move (_1.0: A1);
        _83 = const true;
        _3 = move (_1.1: A2);
        _82 = const true;
        _4 = move (_1.2: A3);
        _81 = const true;
        _5 = move (_1.3: A4);
        _80 = const true;
        _6 = move (_1.4: A5);
        _79 = const true;
        _7 = move (_1.5: A6);
        _78 = const true;
        _8 = move (_1.6: A7);
        _77 = const true;
        _9 = move (_1.7: A8);
        _76 = const true;
        _10 = move (_1.8: A9);
        _75 = const true;
        _11 = move (_1.9: A10);
        _74 = const true;
        _12 = move (_1.10: A11);
        _73 = const true;
        _13 = move (_1.11: A12);
        _72 = const true;
        _14 = move (_1.12: A13);
        _71 = const true;
        _15 = move (_1.13: A14);
        _70 = const true;
        _16 = move (_1.14: A15);
        _69 = const true;
        _17 = move (_1.15: A16);
        _68 = const true;
        _18 = move (_1.16: A17);
        _67 = const true;
        _19 = move (_1.17: A18);
        _66 = const true;
        _20 = move (_1.18: A19);
        _65 = const true;
        _21 = move (_1.19: A20);
        _64 = const true;
        _22 = move (_1.20: A21);
        _23 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb63];
    }

    bb1: {
        _83 = const false;
        _25 = move _3;
        _24 = <A2 as FromToNativeWasmType>::to_native(move _25) -> [return: bb2, unwind: bb41];
    }

    bb2: {
        _82 = const false;
        _27 = move _4;
        _26 = <A3 as FromToNativeWasmType>::to_native(move _27) -> [return: bb3, unwind: bb40];
    }

    bb3: {
        _81 = const false;
        _29 = move _5;
        _28 = <A4 as FromToNativeWasmType>::to_native(move _29) -> [return: bb4, unwind: bb39];
    }

    bb4: {
        _80 = const false;
        _31 = move _6;
        _30 = <A5 as FromToNativeWasmType>::to_native(move _31) -> [return: bb5, unwind: bb38];
    }

    bb5: {
        _79 = const false;
        _33 = move _7;
        _32 = <A6 as FromToNativeWasmType>::to_native(move _33) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        _78 = const false;
        _35 = move _8;
        _34 = <A7 as FromToNativeWasmType>::to_native(move _35) -> [return: bb7, unwind: bb36];
    }

    bb7: {
        _77 = const false;
        _37 = move _9;
        _36 = <A8 as FromToNativeWasmType>::to_native(move _37) -> [return: bb8, unwind: bb35];
    }

    bb8: {
        _76 = const false;
        _39 = move _10;
        _38 = <A9 as FromToNativeWasmType>::to_native(move _39) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        _75 = const false;
        _41 = move _11;
        _40 = <A10 as FromToNativeWasmType>::to_native(move _41) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _74 = const false;
        _43 = move _12;
        _42 = <A11 as FromToNativeWasmType>::to_native(move _43) -> [return: bb11, unwind: bb32];
    }

    bb11: {
        _73 = const false;
        _45 = move _13;
        _44 = <A12 as FromToNativeWasmType>::to_native(move _45) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        _72 = const false;
        _47 = move _14;
        _46 = <A13 as FromToNativeWasmType>::to_native(move _47) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        _71 = const false;
        _49 = move _15;
        _48 = <A14 as FromToNativeWasmType>::to_native(move _49) -> [return: bb14, unwind: bb29];
    }

    bb14: {
        _70 = const false;
        _51 = move _16;
        _50 = <A15 as FromToNativeWasmType>::to_native(move _51) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        _69 = const false;
        _53 = move _17;
        _52 = <A16 as FromToNativeWasmType>::to_native(move _53) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        _68 = const false;
        _55 = move _18;
        _54 = <A17 as FromToNativeWasmType>::to_native(move _55) -> [return: bb17, unwind: bb26];
    }

    bb17: {
        _67 = const false;
        _57 = move _19;
        _56 = <A18 as FromToNativeWasmType>::to_native(move _57) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        _66 = const false;
        _59 = move _20;
        _58 = <A19 as FromToNativeWasmType>::to_native(move _59) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        _65 = const false;
        _61 = move _21;
        _60 = <A20 as FromToNativeWasmType>::to_native(move _61) -> [return: bb20, unwind: bb23];
    }

    bb20: {
        _64 = const false;
        _63 = move _22;
        _62 = <A21 as FromToNativeWasmType>::to_native(move _63) -> [return: bb21, unwind: bb22];
    }

    bb21: {
        _0 = S21::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>(move _23, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56, move _58, move _60, move _62);
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        return;
    }

    bb22 (cleanup): {
        drop(_60) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_58) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_56) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_54) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_52) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_50) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_48) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_46) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_44) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_42) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_40) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_38) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_36) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_34) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_32) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_30) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_28) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_26) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_24) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_23) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_65) -> [0: bb43, otherwise: bb64];
    }

    bb43 (cleanup): {
        switchInt(_66) -> [0: bb44, otherwise: bb65];
    }

    bb44 (cleanup): {
        switchInt(_67) -> [0: bb45, otherwise: bb66];
    }

    bb45 (cleanup): {
        switchInt(_68) -> [0: bb46, otherwise: bb67];
    }

    bb46 (cleanup): {
        switchInt(_69) -> [0: bb47, otherwise: bb68];
    }

    bb47 (cleanup): {
        switchInt(_70) -> [0: bb48, otherwise: bb69];
    }

    bb48 (cleanup): {
        switchInt(_71) -> [0: bb49, otherwise: bb70];
    }

    bb49 (cleanup): {
        switchInt(_72) -> [0: bb50, otherwise: bb71];
    }

    bb50 (cleanup): {
        switchInt(_73) -> [0: bb51, otherwise: bb72];
    }

    bb51 (cleanup): {
        switchInt(_74) -> [0: bb52, otherwise: bb73];
    }

    bb52 (cleanup): {
        switchInt(_75) -> [0: bb53, otherwise: bb74];
    }

    bb53 (cleanup): {
        switchInt(_76) -> [0: bb54, otherwise: bb75];
    }

    bb54 (cleanup): {
        switchInt(_77) -> [0: bb55, otherwise: bb76];
    }

    bb55 (cleanup): {
        switchInt(_78) -> [0: bb56, otherwise: bb77];
    }

    bb56 (cleanup): {
        switchInt(_79) -> [0: bb57, otherwise: bb78];
    }

    bb57 (cleanup): {
        switchInt(_80) -> [0: bb58, otherwise: bb79];
    }

    bb58 (cleanup): {
        switchInt(_81) -> [0: bb59, otherwise: bb80];
    }

    bb59 (cleanup): {
        switchInt(_82) -> [0: bb60, otherwise: bb81];
    }

    bb60 (cleanup): {
        switchInt(_83) -> [0: bb61, otherwise: bb82];
    }

    bb61 (cleanup): {
        resume;
    }

    bb62 (cleanup): {
        drop(_22) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_64) -> [0: bb42, otherwise: bb62];
    }

    bb64 (cleanup): {
        drop(_21) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_20) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_19) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_18) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_17) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_16) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_15) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_14) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_13) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_12) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_11) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_10) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_9) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_8) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_7) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_6) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_5) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_4) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_3) -> [return: bb61, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 21];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 21] = {
    let mut _0: &[wasmer_types::Type; 21];
    let mut _1: [wasmer_types::Type; 21];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native, _22: <A21 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    debug A21 => _22;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _23: &Func;
    let _24: &Func;
    let _25: *const Func;
    let mut _26: *const ();
    let mut _28: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _29: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _30: &&Func;
    let mut _31: isize;
    let mut _32: isize;
    let mut _35: !;
    let mut _36: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _37: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _39: !;
    let mut _41: isize;
    scope 1 {
        debug func => _23;
        let _27: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _27;
            let _33: Rets;
            let _34: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _38: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _33;
            }
            scope 5 {
                debug trap => _34;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _38;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _40: &();
    }

    bb0: {
        _40 = const _;
        _26 = &raw const (*_40);
        _25 = move _26 as *const Func (PtrToPtr);
        _24 = &(*_25);
        _23 = _24;
        _30 = &_23;
        _29 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _30, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21, A21: move _22 };
        _28 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _29);
        _27 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _28) -> [return: bb1, unwind continue];
    }

    bb1: {
        _32 = discriminant(_27);
        switchInt(move _32) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _31 = discriminant(((_27 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _31) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _38 = move ((_27 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _39 = resume_panic(move _38) -> unwind continue;
    }

    bb5: {
        _33 = move ((((_27 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _33) -> [return: bb6, unwind continue];
    }

    bb6: {
        _41 = discriminant(_27);
        switchInt(move _41) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _34 = move ((((_27 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _37 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _34) -> [return: bb8, unwind continue];
    }

    bb8: {
        _36 = move _37 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _35 = raise_user_trap(move _36) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A21 => (_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A21;
    let mut _45: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: &&Func;
    let mut _47: &Func;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;

    bb0: {
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _68 = const true;
        _69 = const true;
        _70 = const true;
        _71 = const true;
        _72 = const true;
        _73 = const true;
        _74 = const true;
        _75 = const true;
        _76 = const true;
        _77 = const true;
        _78 = const true;
        _79 = const true;
        _80 = const true;
        _81 = const true;
        _82 = const true;
        _83 = const true;
        _84 = const true;
        _85 = const true;
        _86 = const true;
        _87 = const true;
        _46 = deref_copy (_1.0: &&Func);
        _47 = deref_copy (*_46);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb104];
    }

    bb1: {
        _67 = const true;
        _87 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb64];
    }

    bb2: {
        _66 = const true;
        _86 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb62];
    }

    bb3: {
        _65 = const true;
        _85 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb60];
    }

    bb4: {
        _64 = const true;
        _84 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb58];
    }

    bb5: {
        _63 = const true;
        _83 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb56];
    }

    bb6: {
        _62 = const true;
        _82 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb54];
    }

    bb7: {
        _61 = const true;
        _81 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb52];
    }

    bb8: {
        _60 = const true;
        _80 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb50];
    }

    bb9: {
        _59 = const true;
        _79 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb48];
    }

    bb10: {
        _58 = const true;
        _78 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb46];
    }

    bb11: {
        _57 = const true;
        _77 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb44];
    }

    bb12: {
        _56 = const true;
        _76 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb42];
    }

    bb13: {
        _55 = const true;
        _75 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb40];
    }

    bb14: {
        _54 = const true;
        _74 = const false;
        _33 = move (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb38];
    }

    bb15: {
        _53 = const true;
        _73 = const false;
        _35 = move (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb36];
    }

    bb16: {
        _52 = const true;
        _72 = const false;
        _37 = move (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        _51 = const true;
        _71 = const false;
        _39 = move (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb32];
    }

    bb18: {
        _50 = const true;
        _70 = const false;
        _41 = move (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _49 = const true;
        _69 = const false;
        _43 = move (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb28];
    }

    bb20: {
        _48 = const true;
        _68 = const false;
        _45 = move (_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = <A21 as FromToNativeWasmType>::from_native(move _45) -> [return: bb21, unwind: bb26];
    }

    bb21: {
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _48 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)>>::call(_47, move _3) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        _48 = const false;
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb23, unwind: bb104];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        resume;
    }

    bb25 (cleanup): {
        drop(_42) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_48) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_40) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_49) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_38) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_50) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_36) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_51) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_34) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_52) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_32) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_53) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_30) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_54) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_28) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_55) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_26) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_56) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_24) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_57) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_22) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_58) -> [0: bb48, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_20) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_59) -> [0: bb50, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_18) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_60) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_16) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_61) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_14) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_62) -> [0: bb56, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_12) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_63) -> [0: bb58, otherwise: bb55];
    }

    bb57 (cleanup): {
        drop(_10) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_64) -> [0: bb60, otherwise: bb57];
    }

    bb59 (cleanup): {
        drop(_8) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_65) -> [0: bb62, otherwise: bb59];
    }

    bb61 (cleanup): {
        drop(_6) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_66) -> [0: bb64, otherwise: bb61];
    }

    bb63 (cleanup): {
        drop(_4) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_67) -> [0: bb104, otherwise: bb63];
    }

    bb65 (cleanup): {
        switchInt(_68) -> [0: bb24, otherwise: bb66];
    }

    bb66 (cleanup): {
        drop((_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_69) -> [0: bb65, otherwise: bb68];
    }

    bb68 (cleanup): {
        drop((_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_70) -> [0: bb67, otherwise: bb70];
    }

    bb70 (cleanup): {
        drop((_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_71) -> [0: bb69, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop((_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_72) -> [0: bb71, otherwise: bb74];
    }

    bb74 (cleanup): {
        drop((_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_73) -> [0: bb73, otherwise: bb76];
    }

    bb76 (cleanup): {
        drop((_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_74) -> [0: bb75, otherwise: bb78];
    }

    bb78 (cleanup): {
        drop((_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_75) -> [0: bb77, otherwise: bb80];
    }

    bb80 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_76) -> [0: bb79, otherwise: bb82];
    }

    bb82 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_77) -> [0: bb81, otherwise: bb84];
    }

    bb84 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        switchInt(_78) -> [0: bb83, otherwise: bb86];
    }

    bb86 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_79) -> [0: bb85, otherwise: bb88];
    }

    bb88 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_80) -> [0: bb87, otherwise: bb90];
    }

    bb90 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_81) -> [0: bb89, otherwise: bb92];
    }

    bb92 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_82) -> [0: bb91, otherwise: bb94];
    }

    bb94 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        switchInt(_83) -> [0: bb93, otherwise: bb96];
    }

    bb96 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        switchInt(_84) -> [0: bb95, otherwise: bb98];
    }

    bb98 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        switchInt(_85) -> [0: bb97, otherwise: bb100];
    }

    bb100 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        switchInt(_86) -> [0: bb99, otherwise: bb102];
    }

    bb102 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        switchInt(_87) -> [0: bb101, otherwise: bb103];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native, _22: <A21 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    debug A21 => _22;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _23: &Func;
    let _24: &Func;
    let _25: *const Func;
    let mut _26: *const ();
    let mut _28: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _29: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _30: &&Func;
    let mut _31: &&Env;
    let mut _32: isize;
    let mut _33: isize;
    let mut _36: !;
    let mut _37: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _38: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _40: !;
    let mut _42: isize;
    scope 1 {
        debug func => _23;
        let _27: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _27;
            let _34: Rets;
            let _35: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _39: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _34;
            }
            scope 5 {
                debug trap => _35;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _39;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _41: &();
    }

    bb0: {
        _41 = const _;
        _26 = &raw const (*_41);
        _25 = move _26 as *const Func (PtrToPtr);
        _24 = &(*_25);
        _23 = _24;
        _30 = &_23;
        _31 = &_1;
        _29 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _30, env: move _31, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21, A21: move _22 };
        _28 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _29);
        _27 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _28) -> [return: bb1, unwind continue];
    }

    bb1: {
        _33 = discriminant(_27);
        switchInt(move _33) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _32 = discriminant(((_27 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _32) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _39 = move ((_27 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _40 = resume_panic(move _39) -> unwind continue;
    }

    bb5: {
        _34 = move ((((_27 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _34) -> [return: bb6, unwind continue];
    }

    bb6: {
        _42 = discriminant(_27);
        switchInt(move _42) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _35 = move ((((_27 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _38 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _35) -> [return: bb8, unwind continue];
    }

    bb8: {
        _37 = move _38 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _36 = raise_user_trap(move _37) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A21 => (_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A21;
    let mut _45: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: &&Func;
    let mut _47: &Func;
    let mut _48: &&Env;
    let mut _49: &Env;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;

    bb0: {
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _70 = const true;
        _71 = const true;
        _72 = const true;
        _73 = const true;
        _74 = const true;
        _75 = const true;
        _76 = const true;
        _77 = const true;
        _78 = const true;
        _79 = const true;
        _80 = const true;
        _81 = const true;
        _82 = const true;
        _83 = const true;
        _84 = const true;
        _85 = const true;
        _86 = const true;
        _87 = const true;
        _88 = const true;
        _89 = const true;
        _46 = deref_copy (_1.0: &&Func);
        _47 = deref_copy (*_46);
        _48 = deref_copy (_1.1: &&Env);
        _49 = deref_copy (*_48);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb104];
    }

    bb1: {
        _69 = const true;
        _89 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb64];
    }

    bb2: {
        _68 = const true;
        _88 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb62];
    }

    bb3: {
        _67 = const true;
        _87 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb60];
    }

    bb4: {
        _66 = const true;
        _86 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb58];
    }

    bb5: {
        _65 = const true;
        _85 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb56];
    }

    bb6: {
        _64 = const true;
        _84 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb54];
    }

    bb7: {
        _63 = const true;
        _83 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb52];
    }

    bb8: {
        _62 = const true;
        _82 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb50];
    }

    bb9: {
        _61 = const true;
        _81 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb48];
    }

    bb10: {
        _60 = const true;
        _80 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb46];
    }

    bb11: {
        _59 = const true;
        _79 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb44];
    }

    bb12: {
        _58 = const true;
        _78 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb42];
    }

    bb13: {
        _57 = const true;
        _77 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb40];
    }

    bb14: {
        _56 = const true;
        _76 = const false;
        _33 = move (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb38];
    }

    bb15: {
        _55 = const true;
        _75 = const false;
        _35 = move (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb36];
    }

    bb16: {
        _54 = const true;
        _74 = const false;
        _37 = move (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        _53 = const true;
        _73 = const false;
        _39 = move (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb32];
    }

    bb18: {
        _52 = const true;
        _72 = const false;
        _41 = move (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _51 = const true;
        _71 = const false;
        _43 = move (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb28];
    }

    bb20: {
        _50 = const true;
        _70 = const false;
        _45 = move (_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = <A21 as FromToNativeWasmType>::from_native(move _45) -> [return: bb21, unwind: bb26];
    }

    bb21: {
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _3 = (_49, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)>>::call(_47, move _3) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb23, unwind: bb104];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        resume;
    }

    bb25 (cleanup): {
        drop(_42) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_50) -> [0: bb28, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_40) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_51) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_38) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_52) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_36) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_53) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_34) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_54) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_32) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_55) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_30) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_56) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_28) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_57) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_26) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_58) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_24) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_59) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_22) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_60) -> [0: bb48, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_20) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_61) -> [0: bb50, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_18) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_62) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_16) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_63) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_14) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_64) -> [0: bb56, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_12) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_65) -> [0: bb58, otherwise: bb55];
    }

    bb57 (cleanup): {
        drop(_10) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_66) -> [0: bb60, otherwise: bb57];
    }

    bb59 (cleanup): {
        drop(_8) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_67) -> [0: bb62, otherwise: bb59];
    }

    bb61 (cleanup): {
        drop(_6) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_68) -> [0: bb64, otherwise: bb61];
    }

    bb63 (cleanup): {
        drop(_4) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_69) -> [0: bb104, otherwise: bb63];
    }

    bb65 (cleanup): {
        switchInt(_70) -> [0: bb24, otherwise: bb66];
    }

    bb66 (cleanup): {
        drop((_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_71) -> [0: bb65, otherwise: bb68];
    }

    bb68 (cleanup): {
        drop((_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_72) -> [0: bb67, otherwise: bb70];
    }

    bb70 (cleanup): {
        drop((_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_73) -> [0: bb69, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop((_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_74) -> [0: bb71, otherwise: bb74];
    }

    bb74 (cleanup): {
        drop((_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_75) -> [0: bb73, otherwise: bb76];
    }

    bb76 (cleanup): {
        drop((_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_76) -> [0: bb75, otherwise: bb78];
    }

    bb78 (cleanup): {
        drop((_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_77) -> [0: bb77, otherwise: bb80];
    }

    bb80 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_78) -> [0: bb79, otherwise: bb82];
    }

    bb82 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_79) -> [0: bb81, otherwise: bb84];
    }

    bb84 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        switchInt(_80) -> [0: bb83, otherwise: bb86];
    }

    bb86 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_81) -> [0: bb85, otherwise: bb88];
    }

    bb88 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_82) -> [0: bb87, otherwise: bb90];
    }

    bb90 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_83) -> [0: bb89, otherwise: bb92];
    }

    bb92 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_84) -> [0: bb91, otherwise: bb94];
    }

    bb94 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        switchInt(_85) -> [0: bb93, otherwise: bb96];
    }

    bb96 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        switchInt(_86) -> [0: bb95, otherwise: bb98];
    }

    bb98 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        switchInt(_87) -> [0: bb97, otherwise: bb100];
    }

    bb100 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        switchInt(_88) -> [0: bb99, otherwise: bb102];
    }

    bb102 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        switchInt(_89) -> [0: bb101, otherwise: bb103];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 22_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 22]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22);
    let mut _24: A1;
    let mut _25: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A2;
    let mut _27: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A3;
    let mut _29: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A4;
    let mut _31: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A5;
    let mut _33: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A6;
    let mut _35: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A7;
    let mut _37: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A8;
    let mut _39: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A9;
    let mut _41: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A10;
    let mut _43: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A11;
    let mut _45: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A12;
    let mut _47: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A13;
    let mut _49: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A14;
    let mut _51: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A15;
    let mut _53: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A16;
    let mut _55: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A17;
    let mut _57: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A18;
    let mut _59: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A19;
    let mut _61: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A20;
    let mut _63: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A21;
    let mut _65: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A22;
    let mut _67: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
        let _16: i128;
        let _17: i128;
        let _18: i128;
        let _19: i128;
        let _20: i128;
        let _21: i128;
        let _22: i128;
        let _23: i128;
    }

    bb0: {
        _2 = _1[0 of 22];
        _3 = _1[1 of 22];
        _4 = _1[2 of 22];
        _5 = _1[3 of 22];
        _6 = _1[4 of 22];
        _7 = _1[5 of 22];
        _8 = _1[6 of 22];
        _9 = _1[7 of 22];
        _10 = _1[8 of 22];
        _11 = _1[9 of 22];
        _12 = _1[10 of 22];
        _13 = _1[11 of 22];
        _14 = _1[12 of 22];
        _15 = _1[13 of 22];
        _16 = _1[14 of 22];
        _17 = _1[15 of 22];
        _18 = _1[16 of 22];
        _19 = _1[17 of 22];
        _20 = _1[18 of 22];
        _21 = _1[19 of 22];
        _22 = _1[20 of 22];
        _23 = _1[21 of 22];
        _25 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _24 = <A1 as FromToNativeWasmType>::from_native(move _25) -> [return: bb2, unwind continue];
    }

    bb2: {
        _27 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb65];
    }

    bb3: {
        _26 = <A2 as FromToNativeWasmType>::from_native(move _27) -> [return: bb4, unwind: bb65];
    }

    bb4: {
        _29 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb64];
    }

    bb5: {
        _28 = <A3 as FromToNativeWasmType>::from_native(move _29) -> [return: bb6, unwind: bb64];
    }

    bb6: {
        _31 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb63];
    }

    bb7: {
        _30 = <A4 as FromToNativeWasmType>::from_native(move _31) -> [return: bb8, unwind: bb63];
    }

    bb8: {
        _33 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb62];
    }

    bb9: {
        _32 = <A5 as FromToNativeWasmType>::from_native(move _33) -> [return: bb10, unwind: bb62];
    }

    bb10: {
        _35 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb61];
    }

    bb11: {
        _34 = <A6 as FromToNativeWasmType>::from_native(move _35) -> [return: bb12, unwind: bb61];
    }

    bb12: {
        _37 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb60];
    }

    bb13: {
        _36 = <A7 as FromToNativeWasmType>::from_native(move _37) -> [return: bb14, unwind: bb60];
    }

    bb14: {
        _39 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb59];
    }

    bb15: {
        _38 = <A8 as FromToNativeWasmType>::from_native(move _39) -> [return: bb16, unwind: bb59];
    }

    bb16: {
        _41 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb58];
    }

    bb17: {
        _40 = <A9 as FromToNativeWasmType>::from_native(move _41) -> [return: bb18, unwind: bb58];
    }

    bb18: {
        _43 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb57];
    }

    bb19: {
        _42 = <A10 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb57];
    }

    bb20: {
        _45 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb56];
    }

    bb21: {
        _44 = <A11 as FromToNativeWasmType>::from_native(move _45) -> [return: bb22, unwind: bb56];
    }

    bb22: {
        _47 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb55];
    }

    bb23: {
        _46 = <A12 as FromToNativeWasmType>::from_native(move _47) -> [return: bb24, unwind: bb55];
    }

    bb24: {
        _49 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb54];
    }

    bb25: {
        _48 = <A13 as FromToNativeWasmType>::from_native(move _49) -> [return: bb26, unwind: bb54];
    }

    bb26: {
        _51 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb53];
    }

    bb27: {
        _50 = <A14 as FromToNativeWasmType>::from_native(move _51) -> [return: bb28, unwind: bb53];
    }

    bb28: {
        _53 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_16) -> [return: bb29, unwind: bb52];
    }

    bb29: {
        _52 = <A15 as FromToNativeWasmType>::from_native(move _53) -> [return: bb30, unwind: bb52];
    }

    bb30: {
        _55 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_17) -> [return: bb31, unwind: bb51];
    }

    bb31: {
        _54 = <A16 as FromToNativeWasmType>::from_native(move _55) -> [return: bb32, unwind: bb51];
    }

    bb32: {
        _57 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_18) -> [return: bb33, unwind: bb50];
    }

    bb33: {
        _56 = <A17 as FromToNativeWasmType>::from_native(move _57) -> [return: bb34, unwind: bb50];
    }

    bb34: {
        _59 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_19) -> [return: bb35, unwind: bb49];
    }

    bb35: {
        _58 = <A18 as FromToNativeWasmType>::from_native(move _59) -> [return: bb36, unwind: bb49];
    }

    bb36: {
        _61 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_20) -> [return: bb37, unwind: bb48];
    }

    bb37: {
        _60 = <A19 as FromToNativeWasmType>::from_native(move _61) -> [return: bb38, unwind: bb48];
    }

    bb38: {
        _63 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_21) -> [return: bb39, unwind: bb47];
    }

    bb39: {
        _62 = <A20 as FromToNativeWasmType>::from_native(move _63) -> [return: bb40, unwind: bb47];
    }

    bb40: {
        _65 = <<A21 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_22) -> [return: bb41, unwind: bb46];
    }

    bb41: {
        _64 = <A21 as FromToNativeWasmType>::from_native(move _65) -> [return: bb42, unwind: bb46];
    }

    bb42: {
        _67 = <<A22 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_23) -> [return: bb43, unwind: bb45];
    }

    bb43: {
        _66 = <A22 as FromToNativeWasmType>::from_native(move _67) -> [return: bb44, unwind: bb45];
    }

    bb44: {
        _0 = (move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56, move _58, move _60, move _62, move _64, move _66);
        return;
    }

    bb45 (cleanup): {
        drop(_64) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_62) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_60) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_58) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_56) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_54) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_52) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_50) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_48) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_46) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_44) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_42) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_40) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_38) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_36) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_34) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_32) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_30) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_28) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_26) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_24) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 22]>;
    let mut _4: std::result::Result<[i128; 22], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 22];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 22]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 22], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 22]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)) -> [i128; 22] {
    debug self => _1;
    let mut _0: [i128; 22];
    let mut _24: i128;
    let mut _25: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: i128;
    let mut _27: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A2;
    let mut _29: i128;
    let mut _30: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A3;
    let mut _32: i128;
    let mut _33: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A4;
    let mut _35: i128;
    let mut _36: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A5;
    let mut _38: i128;
    let mut _39: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A6;
    let mut _41: i128;
    let mut _42: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A7;
    let mut _44: i128;
    let mut _45: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A8;
    let mut _47: i128;
    let mut _48: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A9;
    let mut _50: i128;
    let mut _51: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A10;
    let mut _53: i128;
    let mut _54: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A11;
    let mut _56: i128;
    let mut _57: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A12;
    let mut _59: i128;
    let mut _60: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A13;
    let mut _62: i128;
    let mut _63: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A14;
    let mut _65: i128;
    let mut _66: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _67: A15;
    let mut _68: i128;
    let mut _69: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _70: A16;
    let mut _71: i128;
    let mut _72: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _73: A17;
    let mut _74: i128;
    let mut _75: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _76: A18;
    let mut _77: i128;
    let mut _78: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _79: A19;
    let mut _80: i128;
    let mut _81: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _82: A20;
    let mut _83: i128;
    let mut _84: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _85: A21;
    let mut _86: i128;
    let mut _87: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _88: A22;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
        let _16: A15;
        let _17: A16;
        let _18: A17;
        let _19: A18;
        let _20: A19;
        let _21: A20;
        let _22: A21;
        let _23: A22;
    }

    bb0: {
        _109 = const false;
        _108 = const false;
        _107 = const false;
        _106 = const false;
        _105 = const false;
        _104 = const false;
        _103 = const false;
        _102 = const false;
        _101 = const false;
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _2 = move (_1.0: A1);
        _109 = const true;
        _3 = move (_1.1: A2);
        _108 = const true;
        _4 = move (_1.2: A3);
        _107 = const true;
        _5 = move (_1.3: A4);
        _106 = const true;
        _6 = move (_1.4: A5);
        _105 = const true;
        _7 = move (_1.5: A6);
        _104 = const true;
        _8 = move (_1.6: A7);
        _103 = const true;
        _9 = move (_1.7: A8);
        _102 = const true;
        _10 = move (_1.8: A9);
        _101 = const true;
        _11 = move (_1.9: A10);
        _100 = const true;
        _12 = move (_1.10: A11);
        _99 = const true;
        _13 = move (_1.11: A12);
        _98 = const true;
        _14 = move (_1.12: A13);
        _97 = const true;
        _15 = move (_1.13: A14);
        _96 = const true;
        _16 = move (_1.14: A15);
        _95 = const true;
        _17 = move (_1.15: A16);
        _94 = const true;
        _18 = move (_1.16: A17);
        _93 = const true;
        _19 = move (_1.17: A18);
        _92 = const true;
        _20 = move (_1.18: A19);
        _91 = const true;
        _21 = move (_1.19: A20);
        _90 = const true;
        _22 = move (_1.20: A21);
        _89 = const true;
        _23 = move (_1.21: A22);
        _25 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb67];
    }

    bb1: {
        _24 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _25) -> [return: bb2, unwind: bb67];
    }

    bb2: {
        _109 = const false;
        _28 = move _3;
        _27 = <A2 as FromToNativeWasmType>::to_native(move _28) -> [return: bb3, unwind: bb67];
    }

    bb3: {
        _26 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _27) -> [return: bb4, unwind: bb67];
    }

    bb4: {
        _108 = const false;
        _31 = move _4;
        _30 = <A3 as FromToNativeWasmType>::to_native(move _31) -> [return: bb5, unwind: bb67];
    }

    bb5: {
        _29 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _30) -> [return: bb6, unwind: bb67];
    }

    bb6: {
        _107 = const false;
        _34 = move _5;
        _33 = <A4 as FromToNativeWasmType>::to_native(move _34) -> [return: bb7, unwind: bb67];
    }

    bb7: {
        _32 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _33) -> [return: bb8, unwind: bb67];
    }

    bb8: {
        _106 = const false;
        _37 = move _6;
        _36 = <A5 as FromToNativeWasmType>::to_native(move _37) -> [return: bb9, unwind: bb67];
    }

    bb9: {
        _35 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _36) -> [return: bb10, unwind: bb67];
    }

    bb10: {
        _105 = const false;
        _40 = move _7;
        _39 = <A6 as FromToNativeWasmType>::to_native(move _40) -> [return: bb11, unwind: bb67];
    }

    bb11: {
        _38 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _39) -> [return: bb12, unwind: bb67];
    }

    bb12: {
        _104 = const false;
        _43 = move _8;
        _42 = <A7 as FromToNativeWasmType>::to_native(move _43) -> [return: bb13, unwind: bb67];
    }

    bb13: {
        _41 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _42) -> [return: bb14, unwind: bb67];
    }

    bb14: {
        _103 = const false;
        _46 = move _9;
        _45 = <A8 as FromToNativeWasmType>::to_native(move _46) -> [return: bb15, unwind: bb67];
    }

    bb15: {
        _44 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _45) -> [return: bb16, unwind: bb67];
    }

    bb16: {
        _102 = const false;
        _49 = move _10;
        _48 = <A9 as FromToNativeWasmType>::to_native(move _49) -> [return: bb17, unwind: bb67];
    }

    bb17: {
        _47 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _48) -> [return: bb18, unwind: bb67];
    }

    bb18: {
        _101 = const false;
        _52 = move _11;
        _51 = <A10 as FromToNativeWasmType>::to_native(move _52) -> [return: bb19, unwind: bb67];
    }

    bb19: {
        _50 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _51) -> [return: bb20, unwind: bb67];
    }

    bb20: {
        _100 = const false;
        _55 = move _12;
        _54 = <A11 as FromToNativeWasmType>::to_native(move _55) -> [return: bb21, unwind: bb67];
    }

    bb21: {
        _53 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _54) -> [return: bb22, unwind: bb67];
    }

    bb22: {
        _99 = const false;
        _58 = move _13;
        _57 = <A12 as FromToNativeWasmType>::to_native(move _58) -> [return: bb23, unwind: bb67];
    }

    bb23: {
        _56 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _57) -> [return: bb24, unwind: bb67];
    }

    bb24: {
        _98 = const false;
        _61 = move _14;
        _60 = <A13 as FromToNativeWasmType>::to_native(move _61) -> [return: bb25, unwind: bb67];
    }

    bb25: {
        _59 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _60) -> [return: bb26, unwind: bb67];
    }

    bb26: {
        _97 = const false;
        _64 = move _15;
        _63 = <A14 as FromToNativeWasmType>::to_native(move _64) -> [return: bb27, unwind: bb67];
    }

    bb27: {
        _62 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _63) -> [return: bb28, unwind: bb67];
    }

    bb28: {
        _96 = const false;
        _67 = move _16;
        _66 = <A15 as FromToNativeWasmType>::to_native(move _67) -> [return: bb29, unwind: bb67];
    }

    bb29: {
        _65 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _66) -> [return: bb30, unwind: bb67];
    }

    bb30: {
        _95 = const false;
        _70 = move _17;
        _69 = <A16 as FromToNativeWasmType>::to_native(move _70) -> [return: bb31, unwind: bb67];
    }

    bb31: {
        _68 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _69) -> [return: bb32, unwind: bb67];
    }

    bb32: {
        _94 = const false;
        _73 = move _18;
        _72 = <A17 as FromToNativeWasmType>::to_native(move _73) -> [return: bb33, unwind: bb67];
    }

    bb33: {
        _71 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _72) -> [return: bb34, unwind: bb67];
    }

    bb34: {
        _93 = const false;
        _76 = move _19;
        _75 = <A18 as FromToNativeWasmType>::to_native(move _76) -> [return: bb35, unwind: bb67];
    }

    bb35: {
        _74 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _75) -> [return: bb36, unwind: bb67];
    }

    bb36: {
        _92 = const false;
        _79 = move _20;
        _78 = <A19 as FromToNativeWasmType>::to_native(move _79) -> [return: bb37, unwind: bb67];
    }

    bb37: {
        _77 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _78) -> [return: bb38, unwind: bb67];
    }

    bb38: {
        _91 = const false;
        _82 = move _21;
        _81 = <A20 as FromToNativeWasmType>::to_native(move _82) -> [return: bb39, unwind: bb67];
    }

    bb39: {
        _80 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _81) -> [return: bb40, unwind: bb67];
    }

    bb40: {
        _90 = const false;
        _85 = move _22;
        _84 = <A21 as FromToNativeWasmType>::to_native(move _85) -> [return: bb41, unwind: bb67];
    }

    bb41: {
        _83 = <<A21 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _84) -> [return: bb42, unwind: bb67];
    }

    bb42: {
        _89 = const false;
        _88 = move _23;
        _87 = <A22 as FromToNativeWasmType>::to_native(move _88) -> [return: bb43, unwind: bb67];
    }

    bb43: {
        _86 = <<A22 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _87) -> [return: bb44, unwind: bb67];
    }

    bb44: {
        _0 = [move _24, move _26, move _29, move _32, move _35, move _38, move _41, move _44, move _47, move _50, move _53, move _56, move _59, move _62, move _65, move _68, move _71, move _74, move _77, move _80, move _83, move _86];
        _89 = const false;
        _90 = const false;
        _91 = const false;
        _92 = const false;
        _93 = const false;
        _94 = const false;
        _95 = const false;
        _96 = const false;
        _97 = const false;
        _98 = const false;
        _99 = const false;
        _100 = const false;
        _101 = const false;
        _102 = const false;
        _103 = const false;
        _104 = const false;
        _105 = const false;
        _106 = const false;
        _107 = const false;
        _108 = const false;
        _109 = const false;
        return;
    }

    bb45 (cleanup): {
        switchInt(_90) -> [0: bb46, otherwise: bb68];
    }

    bb46 (cleanup): {
        switchInt(_91) -> [0: bb47, otherwise: bb69];
    }

    bb47 (cleanup): {
        switchInt(_92) -> [0: bb48, otherwise: bb70];
    }

    bb48 (cleanup): {
        switchInt(_93) -> [0: bb49, otherwise: bb71];
    }

    bb49 (cleanup): {
        switchInt(_94) -> [0: bb50, otherwise: bb72];
    }

    bb50 (cleanup): {
        switchInt(_95) -> [0: bb51, otherwise: bb73];
    }

    bb51 (cleanup): {
        switchInt(_96) -> [0: bb52, otherwise: bb74];
    }

    bb52 (cleanup): {
        switchInt(_97) -> [0: bb53, otherwise: bb75];
    }

    bb53 (cleanup): {
        switchInt(_98) -> [0: bb54, otherwise: bb76];
    }

    bb54 (cleanup): {
        switchInt(_99) -> [0: bb55, otherwise: bb77];
    }

    bb55 (cleanup): {
        switchInt(_100) -> [0: bb56, otherwise: bb78];
    }

    bb56 (cleanup): {
        switchInt(_101) -> [0: bb57, otherwise: bb79];
    }

    bb57 (cleanup): {
        switchInt(_102) -> [0: bb58, otherwise: bb80];
    }

    bb58 (cleanup): {
        switchInt(_103) -> [0: bb59, otherwise: bb81];
    }

    bb59 (cleanup): {
        switchInt(_104) -> [0: bb60, otherwise: bb82];
    }

    bb60 (cleanup): {
        switchInt(_105) -> [0: bb61, otherwise: bb83];
    }

    bb61 (cleanup): {
        switchInt(_106) -> [0: bb62, otherwise: bb84];
    }

    bb62 (cleanup): {
        switchInt(_107) -> [0: bb63, otherwise: bb85];
    }

    bb63 (cleanup): {
        switchInt(_108) -> [0: bb64, otherwise: bb86];
    }

    bb64 (cleanup): {
        switchInt(_109) -> [0: bb65, otherwise: bb87];
    }

    bb65 (cleanup): {
        resume;
    }

    bb66 (cleanup): {
        drop(_23) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_89) -> [0: bb45, otherwise: bb66];
    }

    bb68 (cleanup): {
        drop(_22) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_21) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_20) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_19) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_18) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_17) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_16) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_15) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_14) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_13) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_12) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_11) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_10) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_9) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_8) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_7) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_6) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_5) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_4) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_3) -> [return: bb65, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 22] {
    let mut _0: [i128; 22];

    bb0: {
        _0 = [const 0_i128; 22];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 22_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S22<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22);
    let mut _24: A1;
    let mut _25: A2;
    let mut _26: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A3;
    let mut _28: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A4;
    let mut _30: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A5;
    let mut _32: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A6;
    let mut _34: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A7;
    let mut _36: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A8;
    let mut _38: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A9;
    let mut _40: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A10;
    let mut _42: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A11;
    let mut _44: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A12;
    let mut _46: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A13;
    let mut _48: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A14;
    let mut _50: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A15;
    let mut _52: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A16;
    let mut _54: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A17;
    let mut _56: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A18;
    let mut _58: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A19;
    let mut _60: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A20;
    let mut _62: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A21;
    let mut _64: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A22;
    let mut _66: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
        let _16: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
        let _17: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
        let _18: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
        let _19: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
        let _20: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
        let _21: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
        let _22: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
        let _23: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _87 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _86 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _85 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _84 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _83 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _82 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _81 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _80 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _79 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _78 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _77 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _76 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _75 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _74 = const true;
        _16 = move (_1.14: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _73 = const true;
        _17 = move (_1.15: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _72 = const true;
        _18 = move (_1.16: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _71 = const true;
        _19 = move (_1.17: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _70 = const true;
        _20 = move (_1.18: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _69 = const true;
        _21 = move (_1.19: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _68 = const true;
        _22 = move (_1.20: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _67 = const true;
        _23 = move (_1.21: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb66];
    }

    bb1: {
        _87 = const false;
        _26 = move _3;
        _25 = <A2 as FromToNativeWasmType>::from_native(move _26) -> [return: bb2, unwind: bb43];
    }

    bb2: {
        _86 = const false;
        _28 = move _4;
        _27 = <A3 as FromToNativeWasmType>::from_native(move _28) -> [return: bb3, unwind: bb42];
    }

    bb3: {
        _85 = const false;
        _30 = move _5;
        _29 = <A4 as FromToNativeWasmType>::from_native(move _30) -> [return: bb4, unwind: bb41];
    }

    bb4: {
        _84 = const false;
        _32 = move _6;
        _31 = <A5 as FromToNativeWasmType>::from_native(move _32) -> [return: bb5, unwind: bb40];
    }

    bb5: {
        _83 = const false;
        _34 = move _7;
        _33 = <A6 as FromToNativeWasmType>::from_native(move _34) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        _82 = const false;
        _36 = move _8;
        _35 = <A7 as FromToNativeWasmType>::from_native(move _36) -> [return: bb7, unwind: bb38];
    }

    bb7: {
        _81 = const false;
        _38 = move _9;
        _37 = <A8 as FromToNativeWasmType>::from_native(move _38) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        _80 = const false;
        _40 = move _10;
        _39 = <A9 as FromToNativeWasmType>::from_native(move _40) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        _79 = const false;
        _42 = move _11;
        _41 = <A10 as FromToNativeWasmType>::from_native(move _42) -> [return: bb10, unwind: bb35];
    }

    bb10: {
        _78 = const false;
        _44 = move _12;
        _43 = <A11 as FromToNativeWasmType>::from_native(move _44) -> [return: bb11, unwind: bb34];
    }

    bb11: {
        _77 = const false;
        _46 = move _13;
        _45 = <A12 as FromToNativeWasmType>::from_native(move _46) -> [return: bb12, unwind: bb33];
    }

    bb12: {
        _76 = const false;
        _48 = move _14;
        _47 = <A13 as FromToNativeWasmType>::from_native(move _48) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _75 = const false;
        _50 = move _15;
        _49 = <A14 as FromToNativeWasmType>::from_native(move _50) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        _74 = const false;
        _52 = move _16;
        _51 = <A15 as FromToNativeWasmType>::from_native(move _52) -> [return: bb15, unwind: bb30];
    }

    bb15: {
        _73 = const false;
        _54 = move _17;
        _53 = <A16 as FromToNativeWasmType>::from_native(move _54) -> [return: bb16, unwind: bb29];
    }

    bb16: {
        _72 = const false;
        _56 = move _18;
        _55 = <A17 as FromToNativeWasmType>::from_native(move _56) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        _71 = const false;
        _58 = move _19;
        _57 = <A18 as FromToNativeWasmType>::from_native(move _58) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        _70 = const false;
        _60 = move _20;
        _59 = <A19 as FromToNativeWasmType>::from_native(move _60) -> [return: bb19, unwind: bb26];
    }

    bb19: {
        _69 = const false;
        _62 = move _21;
        _61 = <A20 as FromToNativeWasmType>::from_native(move _62) -> [return: bb20, unwind: bb25];
    }

    bb20: {
        _68 = const false;
        _64 = move _22;
        _63 = <A21 as FromToNativeWasmType>::from_native(move _64) -> [return: bb21, unwind: bb24];
    }

    bb21: {
        _67 = const false;
        _66 = move _23;
        _65 = <A22 as FromToNativeWasmType>::from_native(move _66) -> [return: bb22, unwind: bb23];
    }

    bb22: {
        _0 = (move _24, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57, move _59, move _61, move _63, move _65);
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        return;
    }

    bb23 (cleanup): {
        drop(_63) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_61) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_59) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_57) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_55) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_53) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_51) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_49) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_47) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_45) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_43) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_41) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_39) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_37) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_35) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_33) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_31) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_29) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_27) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_25) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_24) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_68) -> [0: bb45, otherwise: bb67];
    }

    bb45 (cleanup): {
        switchInt(_69) -> [0: bb46, otherwise: bb68];
    }

    bb46 (cleanup): {
        switchInt(_70) -> [0: bb47, otherwise: bb69];
    }

    bb47 (cleanup): {
        switchInt(_71) -> [0: bb48, otherwise: bb70];
    }

    bb48 (cleanup): {
        switchInt(_72) -> [0: bb49, otherwise: bb71];
    }

    bb49 (cleanup): {
        switchInt(_73) -> [0: bb50, otherwise: bb72];
    }

    bb50 (cleanup): {
        switchInt(_74) -> [0: bb51, otherwise: bb73];
    }

    bb51 (cleanup): {
        switchInt(_75) -> [0: bb52, otherwise: bb74];
    }

    bb52 (cleanup): {
        switchInt(_76) -> [0: bb53, otherwise: bb75];
    }

    bb53 (cleanup): {
        switchInt(_77) -> [0: bb54, otherwise: bb76];
    }

    bb54 (cleanup): {
        switchInt(_78) -> [0: bb55, otherwise: bb77];
    }

    bb55 (cleanup): {
        switchInt(_79) -> [0: bb56, otherwise: bb78];
    }

    bb56 (cleanup): {
        switchInt(_80) -> [0: bb57, otherwise: bb79];
    }

    bb57 (cleanup): {
        switchInt(_81) -> [0: bb58, otherwise: bb80];
    }

    bb58 (cleanup): {
        switchInt(_82) -> [0: bb59, otherwise: bb81];
    }

    bb59 (cleanup): {
        switchInt(_83) -> [0: bb60, otherwise: bb82];
    }

    bb60 (cleanup): {
        switchInt(_84) -> [0: bb61, otherwise: bb83];
    }

    bb61 (cleanup): {
        switchInt(_85) -> [0: bb62, otherwise: bb84];
    }

    bb62 (cleanup): {
        switchInt(_86) -> [0: bb63, otherwise: bb85];
    }

    bb63 (cleanup): {
        switchInt(_87) -> [0: bb64, otherwise: bb86];
    }

    bb64 (cleanup): {
        resume;
    }

    bb65 (cleanup): {
        drop(_23) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_67) -> [0: bb44, otherwise: bb65];
    }

    bb67 (cleanup): {
        drop(_22) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_21) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_20) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_19) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_18) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_17) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_16) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_15) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_14) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_13) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_12) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_11) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_10) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_9) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_8) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_7) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_6) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_5) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_4) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_3) -> [return: bb64, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)) -> S22<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22> {
    debug self => _1;
    let mut _0: externals::function::inner::S22<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let _16: A15;
    let _17: A16;
    let _18: A17;
    let _19: A18;
    let _20: A19;
    let _21: A20;
    let _22: A21;
    let _23: A22;
    let mut _24: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A2;
    let mut _27: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A3;
    let mut _29: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A4;
    let mut _31: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A5;
    let mut _33: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A6;
    let mut _35: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A7;
    let mut _37: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A8;
    let mut _39: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A9;
    let mut _41: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A10;
    let mut _43: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A11;
    let mut _45: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A12;
    let mut _47: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A13;
    let mut _49: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A14;
    let mut _51: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A15;
    let mut _53: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A16;
    let mut _55: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A17;
    let mut _57: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A18;
    let mut _59: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A19;
    let mut _61: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A20;
    let mut _63: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A21;
    let mut _65: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A22;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
    }

    bb0: {
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _2 = move (_1.0: A1);
        _87 = const true;
        _3 = move (_1.1: A2);
        _86 = const true;
        _4 = move (_1.2: A3);
        _85 = const true;
        _5 = move (_1.3: A4);
        _84 = const true;
        _6 = move (_1.4: A5);
        _83 = const true;
        _7 = move (_1.5: A6);
        _82 = const true;
        _8 = move (_1.6: A7);
        _81 = const true;
        _9 = move (_1.7: A8);
        _80 = const true;
        _10 = move (_1.8: A9);
        _79 = const true;
        _11 = move (_1.9: A10);
        _78 = const true;
        _12 = move (_1.10: A11);
        _77 = const true;
        _13 = move (_1.11: A12);
        _76 = const true;
        _14 = move (_1.12: A13);
        _75 = const true;
        _15 = move (_1.13: A14);
        _74 = const true;
        _16 = move (_1.14: A15);
        _73 = const true;
        _17 = move (_1.15: A16);
        _72 = const true;
        _18 = move (_1.16: A17);
        _71 = const true;
        _19 = move (_1.17: A18);
        _70 = const true;
        _20 = move (_1.18: A19);
        _69 = const true;
        _21 = move (_1.19: A20);
        _68 = const true;
        _22 = move (_1.20: A21);
        _67 = const true;
        _23 = move (_1.21: A22);
        _24 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb66];
    }

    bb1: {
        _87 = const false;
        _26 = move _3;
        _25 = <A2 as FromToNativeWasmType>::to_native(move _26) -> [return: bb2, unwind: bb43];
    }

    bb2: {
        _86 = const false;
        _28 = move _4;
        _27 = <A3 as FromToNativeWasmType>::to_native(move _28) -> [return: bb3, unwind: bb42];
    }

    bb3: {
        _85 = const false;
        _30 = move _5;
        _29 = <A4 as FromToNativeWasmType>::to_native(move _30) -> [return: bb4, unwind: bb41];
    }

    bb4: {
        _84 = const false;
        _32 = move _6;
        _31 = <A5 as FromToNativeWasmType>::to_native(move _32) -> [return: bb5, unwind: bb40];
    }

    bb5: {
        _83 = const false;
        _34 = move _7;
        _33 = <A6 as FromToNativeWasmType>::to_native(move _34) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        _82 = const false;
        _36 = move _8;
        _35 = <A7 as FromToNativeWasmType>::to_native(move _36) -> [return: bb7, unwind: bb38];
    }

    bb7: {
        _81 = const false;
        _38 = move _9;
        _37 = <A8 as FromToNativeWasmType>::to_native(move _38) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        _80 = const false;
        _40 = move _10;
        _39 = <A9 as FromToNativeWasmType>::to_native(move _40) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        _79 = const false;
        _42 = move _11;
        _41 = <A10 as FromToNativeWasmType>::to_native(move _42) -> [return: bb10, unwind: bb35];
    }

    bb10: {
        _78 = const false;
        _44 = move _12;
        _43 = <A11 as FromToNativeWasmType>::to_native(move _44) -> [return: bb11, unwind: bb34];
    }

    bb11: {
        _77 = const false;
        _46 = move _13;
        _45 = <A12 as FromToNativeWasmType>::to_native(move _46) -> [return: bb12, unwind: bb33];
    }

    bb12: {
        _76 = const false;
        _48 = move _14;
        _47 = <A13 as FromToNativeWasmType>::to_native(move _48) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _75 = const false;
        _50 = move _15;
        _49 = <A14 as FromToNativeWasmType>::to_native(move _50) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        _74 = const false;
        _52 = move _16;
        _51 = <A15 as FromToNativeWasmType>::to_native(move _52) -> [return: bb15, unwind: bb30];
    }

    bb15: {
        _73 = const false;
        _54 = move _17;
        _53 = <A16 as FromToNativeWasmType>::to_native(move _54) -> [return: bb16, unwind: bb29];
    }

    bb16: {
        _72 = const false;
        _56 = move _18;
        _55 = <A17 as FromToNativeWasmType>::to_native(move _56) -> [return: bb17, unwind: bb28];
    }

    bb17: {
        _71 = const false;
        _58 = move _19;
        _57 = <A18 as FromToNativeWasmType>::to_native(move _58) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        _70 = const false;
        _60 = move _20;
        _59 = <A19 as FromToNativeWasmType>::to_native(move _60) -> [return: bb19, unwind: bb26];
    }

    bb19: {
        _69 = const false;
        _62 = move _21;
        _61 = <A20 as FromToNativeWasmType>::to_native(move _62) -> [return: bb20, unwind: bb25];
    }

    bb20: {
        _68 = const false;
        _64 = move _22;
        _63 = <A21 as FromToNativeWasmType>::to_native(move _64) -> [return: bb21, unwind: bb24];
    }

    bb21: {
        _67 = const false;
        _66 = move _23;
        _65 = <A22 as FromToNativeWasmType>::to_native(move _66) -> [return: bb22, unwind: bb23];
    }

    bb22: {
        _0 = S22::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22>(move _24, move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57, move _59, move _61, move _63, move _65);
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        return;
    }

    bb23 (cleanup): {
        drop(_63) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_61) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_59) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_57) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_55) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_53) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_51) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_49) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_47) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_45) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_43) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_41) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_39) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_37) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_35) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_33) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_31) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_29) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_27) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_25) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_24) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_68) -> [0: bb45, otherwise: bb67];
    }

    bb45 (cleanup): {
        switchInt(_69) -> [0: bb46, otherwise: bb68];
    }

    bb46 (cleanup): {
        switchInt(_70) -> [0: bb47, otherwise: bb69];
    }

    bb47 (cleanup): {
        switchInt(_71) -> [0: bb48, otherwise: bb70];
    }

    bb48 (cleanup): {
        switchInt(_72) -> [0: bb49, otherwise: bb71];
    }

    bb49 (cleanup): {
        switchInt(_73) -> [0: bb50, otherwise: bb72];
    }

    bb50 (cleanup): {
        switchInt(_74) -> [0: bb51, otherwise: bb73];
    }

    bb51 (cleanup): {
        switchInt(_75) -> [0: bb52, otherwise: bb74];
    }

    bb52 (cleanup): {
        switchInt(_76) -> [0: bb53, otherwise: bb75];
    }

    bb53 (cleanup): {
        switchInt(_77) -> [0: bb54, otherwise: bb76];
    }

    bb54 (cleanup): {
        switchInt(_78) -> [0: bb55, otherwise: bb77];
    }

    bb55 (cleanup): {
        switchInt(_79) -> [0: bb56, otherwise: bb78];
    }

    bb56 (cleanup): {
        switchInt(_80) -> [0: bb57, otherwise: bb79];
    }

    bb57 (cleanup): {
        switchInt(_81) -> [0: bb58, otherwise: bb80];
    }

    bb58 (cleanup): {
        switchInt(_82) -> [0: bb59, otherwise: bb81];
    }

    bb59 (cleanup): {
        switchInt(_83) -> [0: bb60, otherwise: bb82];
    }

    bb60 (cleanup): {
        switchInt(_84) -> [0: bb61, otherwise: bb83];
    }

    bb61 (cleanup): {
        switchInt(_85) -> [0: bb62, otherwise: bb84];
    }

    bb62 (cleanup): {
        switchInt(_86) -> [0: bb63, otherwise: bb85];
    }

    bb63 (cleanup): {
        switchInt(_87) -> [0: bb64, otherwise: bb86];
    }

    bb64 (cleanup): {
        resume;
    }

    bb65 (cleanup): {
        drop(_23) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_67) -> [0: bb44, otherwise: bb65];
    }

    bb67 (cleanup): {
        drop(_22) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_21) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_20) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_19) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_18) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_17) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_16) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_15) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_14) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_13) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_12) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_11) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_10) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_9) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_8) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_7) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_6) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_5) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_4) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_3) -> [return: bb64, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 22];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 22] = {
    let mut _0: &[wasmer_types::Type; 22];
    let mut _1: [wasmer_types::Type; 22];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native, _22: <A21 as FromToNativeWasmType>::Native, _23: <A22 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    debug A21 => _22;
    debug A22 => _23;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _24: &Func;
    let _25: &Func;
    let _26: *const Func;
    let mut _27: *const ();
    let mut _29: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _30: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _31: &&Func;
    let mut _32: isize;
    let mut _33: isize;
    let mut _36: !;
    let mut _37: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _38: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _40: !;
    let mut _42: isize;
    scope 1 {
        debug func => _24;
        let _28: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _28;
            let _34: Rets;
            let _35: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _39: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _34;
            }
            scope 5 {
                debug trap => _35;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _39;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _41: &();
    }

    bb0: {
        _41 = const _;
        _27 = &raw const (*_41);
        _26 = move _27 as *const Func (PtrToPtr);
        _25 = &(*_26);
        _24 = _25;
        _31 = &_24;
        _30 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _31, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21, A21: move _22, A22: move _23 };
        _29 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _30);
        _28 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _29) -> [return: bb1, unwind continue];
    }

    bb1: {
        _33 = discriminant(_28);
        switchInt(move _33) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _32 = discriminant(((_28 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _32) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _39 = move ((_28 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _40 = resume_panic(move _39) -> unwind continue;
    }

    bb5: {
        _34 = move ((((_28 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _34) -> [return: bb6, unwind continue];
    }

    bb6: {
        _42 = discriminant(_28);
        switchInt(move _42) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _35 = move ((((_28 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _38 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _35) -> [return: bb8, unwind continue];
    }

    bb8: {
        _37 = move _38 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _36 = raise_user_trap(move _37) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A21 => (_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A22 => (_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A21;
    let mut _45: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A22;
    let mut _47: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: &&Func;
    let mut _49: &Func;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;

    bb0: {
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _71 = const true;
        _72 = const true;
        _73 = const true;
        _74 = const true;
        _75 = const true;
        _76 = const true;
        _77 = const true;
        _78 = const true;
        _79 = const true;
        _80 = const true;
        _81 = const true;
        _82 = const true;
        _83 = const true;
        _84 = const true;
        _85 = const true;
        _86 = const true;
        _87 = const true;
        _88 = const true;
        _89 = const true;
        _90 = const true;
        _91 = const true;
        _48 = deref_copy (_1.0: &&Func);
        _49 = deref_copy (*_48);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb109];
    }

    bb1: {
        _70 = const true;
        _91 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb67];
    }

    bb2: {
        _69 = const true;
        _90 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb65];
    }

    bb3: {
        _68 = const true;
        _89 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb63];
    }

    bb4: {
        _67 = const true;
        _88 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb61];
    }

    bb5: {
        _66 = const true;
        _87 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb59];
    }

    bb6: {
        _65 = const true;
        _86 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb57];
    }

    bb7: {
        _64 = const true;
        _85 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb55];
    }

    bb8: {
        _63 = const true;
        _84 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb53];
    }

    bb9: {
        _62 = const true;
        _83 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb51];
    }

    bb10: {
        _61 = const true;
        _82 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb49];
    }

    bb11: {
        _60 = const true;
        _81 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb47];
    }

    bb12: {
        _59 = const true;
        _80 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb45];
    }

    bb13: {
        _58 = const true;
        _79 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb43];
    }

    bb14: {
        _57 = const true;
        _78 = const false;
        _33 = move (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb41];
    }

    bb15: {
        _56 = const true;
        _77 = const false;
        _35 = move (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb39];
    }

    bb16: {
        _55 = const true;
        _76 = const false;
        _37 = move (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb37];
    }

    bb17: {
        _54 = const true;
        _75 = const false;
        _39 = move (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb35];
    }

    bb18: {
        _53 = const true;
        _74 = const false;
        _41 = move (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb33];
    }

    bb19: {
        _52 = const true;
        _73 = const false;
        _43 = move (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        _51 = const true;
        _72 = const false;
        _45 = move (_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = <A21 as FromToNativeWasmType>::from_native(move _45) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        _50 = const true;
        _71 = const false;
        _47 = move (_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = <A22 as FromToNativeWasmType>::from_native(move _47) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)>>::call(_49, move _3) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        _50 = const false;
        _51 = const false;
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb24, unwind: bb109];
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        drop(_44) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_50) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_42) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_51) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_40) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_52) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_38) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_53) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_36) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_54) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_34) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_55) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_32) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_56) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_30) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_57) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_28) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_58) -> [0: bb45, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_26) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_59) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_24) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_60) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_22) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_61) -> [0: bb51, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_20) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_62) -> [0: bb53, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_18) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_63) -> [0: bb55, otherwise: bb52];
    }

    bb54 (cleanup): {
        drop(_16) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_64) -> [0: bb57, otherwise: bb54];
    }

    bb56 (cleanup): {
        drop(_14) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_65) -> [0: bb59, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_12) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_66) -> [0: bb61, otherwise: bb58];
    }

    bb60 (cleanup): {
        drop(_10) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_67) -> [0: bb63, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_8) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_68) -> [0: bb65, otherwise: bb62];
    }

    bb64 (cleanup): {
        drop(_6) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_69) -> [0: bb67, otherwise: bb64];
    }

    bb66 (cleanup): {
        drop(_4) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_70) -> [0: bb109, otherwise: bb66];
    }

    bb68 (cleanup): {
        switchInt(_71) -> [0: bb25, otherwise: bb69];
    }

    bb69 (cleanup): {
        drop((_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_72) -> [0: bb68, otherwise: bb71];
    }

    bb71 (cleanup): {
        drop((_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_73) -> [0: bb70, otherwise: bb73];
    }

    bb73 (cleanup): {
        drop((_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_74) -> [0: bb72, otherwise: bb75];
    }

    bb75 (cleanup): {
        drop((_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_75) -> [0: bb74, otherwise: bb77];
    }

    bb77 (cleanup): {
        drop((_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_76) -> [0: bb76, otherwise: bb79];
    }

    bb79 (cleanup): {
        drop((_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_77) -> [0: bb78, otherwise: bb81];
    }

    bb81 (cleanup): {
        drop((_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_78) -> [0: bb80, otherwise: bb83];
    }

    bb83 (cleanup): {
        drop((_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_79) -> [0: bb82, otherwise: bb85];
    }

    bb85 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_80) -> [0: bb84, otherwise: bb87];
    }

    bb87 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        switchInt(_81) -> [0: bb86, otherwise: bb89];
    }

    bb89 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        switchInt(_82) -> [0: bb88, otherwise: bb91];
    }

    bb91 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        switchInt(_83) -> [0: bb90, otherwise: bb93];
    }

    bb93 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_84) -> [0: bb92, otherwise: bb95];
    }

    bb95 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        switchInt(_85) -> [0: bb94, otherwise: bb97];
    }

    bb97 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        switchInt(_86) -> [0: bb96, otherwise: bb99];
    }

    bb99 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        switchInt(_87) -> [0: bb98, otherwise: bb101];
    }

    bb101 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_88) -> [0: bb100, otherwise: bb103];
    }

    bb103 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        switchInt(_89) -> [0: bb102, otherwise: bb105];
    }

    bb105 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        switchInt(_90) -> [0: bb104, otherwise: bb107];
    }

    bb107 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        switchInt(_91) -> [0: bb106, otherwise: bb108];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native, _22: <A21 as FromToNativeWasmType>::Native, _23: <A22 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    debug A21 => _22;
    debug A22 => _23;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _24: &Func;
    let _25: &Func;
    let _26: *const Func;
    let mut _27: *const ();
    let mut _29: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _30: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _31: &&Func;
    let mut _32: &&Env;
    let mut _33: isize;
    let mut _34: isize;
    let mut _37: !;
    let mut _38: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _39: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _41: !;
    let mut _43: isize;
    scope 1 {
        debug func => _24;
        let _28: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _28;
            let _35: Rets;
            let _36: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _40: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _35;
            }
            scope 5 {
                debug trap => _36;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _40;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _42: &();
    }

    bb0: {
        _42 = const _;
        _27 = &raw const (*_42);
        _26 = move _27 as *const Func (PtrToPtr);
        _25 = &(*_26);
        _24 = _25;
        _31 = &_24;
        _32 = &_1;
        _30 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _31, env: move _32, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21, A21: move _22, A22: move _23 };
        _29 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _30);
        _28 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _29) -> [return: bb1, unwind continue];
    }

    bb1: {
        _34 = discriminant(_28);
        switchInt(move _34) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _33 = discriminant(((_28 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _33) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _40 = move ((_28 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _41 = resume_panic(move _40) -> unwind continue;
    }

    bb5: {
        _35 = move ((((_28 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _35) -> [return: bb6, unwind continue];
    }

    bb6: {
        _43 = discriminant(_28);
        switchInt(move _43) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _36 = move ((((_28 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _39 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _36) -> [return: bb8, unwind continue];
    }

    bb8: {
        _38 = move _39 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _37 = raise_user_trap(move _38) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A21 => (_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A22 => (_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A21;
    let mut _45: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A22;
    let mut _47: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: &&Func;
    let mut _49: &Func;
    let mut _50: &&Env;
    let mut _51: &Env;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;

    bb0: {
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _73 = const true;
        _74 = const true;
        _75 = const true;
        _76 = const true;
        _77 = const true;
        _78 = const true;
        _79 = const true;
        _80 = const true;
        _81 = const true;
        _82 = const true;
        _83 = const true;
        _84 = const true;
        _85 = const true;
        _86 = const true;
        _87 = const true;
        _88 = const true;
        _89 = const true;
        _90 = const true;
        _91 = const true;
        _92 = const true;
        _93 = const true;
        _48 = deref_copy (_1.0: &&Func);
        _49 = deref_copy (*_48);
        _50 = deref_copy (_1.1: &&Env);
        _51 = deref_copy (*_50);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb109];
    }

    bb1: {
        _72 = const true;
        _93 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb67];
    }

    bb2: {
        _71 = const true;
        _92 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb65];
    }

    bb3: {
        _70 = const true;
        _91 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb63];
    }

    bb4: {
        _69 = const true;
        _90 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb61];
    }

    bb5: {
        _68 = const true;
        _89 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb59];
    }

    bb6: {
        _67 = const true;
        _88 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb57];
    }

    bb7: {
        _66 = const true;
        _87 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb55];
    }

    bb8: {
        _65 = const true;
        _86 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb53];
    }

    bb9: {
        _64 = const true;
        _85 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb51];
    }

    bb10: {
        _63 = const true;
        _84 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb49];
    }

    bb11: {
        _62 = const true;
        _83 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb47];
    }

    bb12: {
        _61 = const true;
        _82 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb45];
    }

    bb13: {
        _60 = const true;
        _81 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb43];
    }

    bb14: {
        _59 = const true;
        _80 = const false;
        _33 = move (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb41];
    }

    bb15: {
        _58 = const true;
        _79 = const false;
        _35 = move (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb39];
    }

    bb16: {
        _57 = const true;
        _78 = const false;
        _37 = move (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb37];
    }

    bb17: {
        _56 = const true;
        _77 = const false;
        _39 = move (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb35];
    }

    bb18: {
        _55 = const true;
        _76 = const false;
        _41 = move (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb33];
    }

    bb19: {
        _54 = const true;
        _75 = const false;
        _43 = move (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        _53 = const true;
        _74 = const false;
        _45 = move (_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = <A21 as FromToNativeWasmType>::from_native(move _45) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        _52 = const true;
        _73 = const false;
        _47 = move (_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = <A22 as FromToNativeWasmType>::from_native(move _47) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _3 = (_51, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)>>::call(_49, move _3) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb24, unwind: bb109];
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        drop(_44) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_52) -> [0: bb29, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_42) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_53) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_40) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_54) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_38) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_55) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_36) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_56) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_34) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_57) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_32) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_58) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_30) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_59) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_28) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_60) -> [0: bb45, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_26) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_61) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_24) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_62) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_22) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_63) -> [0: bb51, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_20) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_64) -> [0: bb53, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_18) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_65) -> [0: bb55, otherwise: bb52];
    }

    bb54 (cleanup): {
        drop(_16) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_66) -> [0: bb57, otherwise: bb54];
    }

    bb56 (cleanup): {
        drop(_14) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_67) -> [0: bb59, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_12) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_68) -> [0: bb61, otherwise: bb58];
    }

    bb60 (cleanup): {
        drop(_10) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_69) -> [0: bb63, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_8) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_70) -> [0: bb65, otherwise: bb62];
    }

    bb64 (cleanup): {
        drop(_6) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_71) -> [0: bb67, otherwise: bb64];
    }

    bb66 (cleanup): {
        drop(_4) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_72) -> [0: bb109, otherwise: bb66];
    }

    bb68 (cleanup): {
        switchInt(_73) -> [0: bb25, otherwise: bb69];
    }

    bb69 (cleanup): {
        drop((_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_74) -> [0: bb68, otherwise: bb71];
    }

    bb71 (cleanup): {
        drop((_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_75) -> [0: bb70, otherwise: bb73];
    }

    bb73 (cleanup): {
        drop((_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_76) -> [0: bb72, otherwise: bb75];
    }

    bb75 (cleanup): {
        drop((_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_77) -> [0: bb74, otherwise: bb77];
    }

    bb77 (cleanup): {
        drop((_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_78) -> [0: bb76, otherwise: bb79];
    }

    bb79 (cleanup): {
        drop((_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_79) -> [0: bb78, otherwise: bb81];
    }

    bb81 (cleanup): {
        drop((_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_80) -> [0: bb80, otherwise: bb83];
    }

    bb83 (cleanup): {
        drop((_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_81) -> [0: bb82, otherwise: bb85];
    }

    bb85 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_82) -> [0: bb84, otherwise: bb87];
    }

    bb87 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        switchInt(_83) -> [0: bb86, otherwise: bb89];
    }

    bb89 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        switchInt(_84) -> [0: bb88, otherwise: bb91];
    }

    bb91 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        switchInt(_85) -> [0: bb90, otherwise: bb93];
    }

    bb93 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_86) -> [0: bb92, otherwise: bb95];
    }

    bb95 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        switchInt(_87) -> [0: bb94, otherwise: bb97];
    }

    bb97 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        switchInt(_88) -> [0: bb96, otherwise: bb99];
    }

    bb99 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        switchInt(_89) -> [0: bb98, otherwise: bb101];
    }

    bb101 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_90) -> [0: bb100, otherwise: bb103];
    }

    bb103 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        switchInt(_91) -> [0: bb102, otherwise: bb105];
    }

    bb105 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        switchInt(_92) -> [0: bb104, otherwise: bb107];
    }

    bb107 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        switchInt(_93) -> [0: bb106, otherwise: bb108];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 23_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 23]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23);
    let mut _25: A1;
    let mut _26: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A2;
    let mut _28: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A3;
    let mut _30: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A4;
    let mut _32: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A5;
    let mut _34: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A6;
    let mut _36: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A7;
    let mut _38: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A8;
    let mut _40: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A9;
    let mut _42: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A10;
    let mut _44: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A11;
    let mut _46: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A12;
    let mut _48: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A13;
    let mut _50: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A14;
    let mut _52: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A15;
    let mut _54: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A16;
    let mut _56: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A17;
    let mut _58: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A18;
    let mut _60: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A19;
    let mut _62: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A20;
    let mut _64: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A21;
    let mut _66: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _67: A22;
    let mut _68: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _69: A23;
    let mut _70: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
        let _16: i128;
        let _17: i128;
        let _18: i128;
        let _19: i128;
        let _20: i128;
        let _21: i128;
        let _22: i128;
        let _23: i128;
        let _24: i128;
    }

    bb0: {
        _2 = _1[0 of 23];
        _3 = _1[1 of 23];
        _4 = _1[2 of 23];
        _5 = _1[3 of 23];
        _6 = _1[4 of 23];
        _7 = _1[5 of 23];
        _8 = _1[6 of 23];
        _9 = _1[7 of 23];
        _10 = _1[8 of 23];
        _11 = _1[9 of 23];
        _12 = _1[10 of 23];
        _13 = _1[11 of 23];
        _14 = _1[12 of 23];
        _15 = _1[13 of 23];
        _16 = _1[14 of 23];
        _17 = _1[15 of 23];
        _18 = _1[16 of 23];
        _19 = _1[17 of 23];
        _20 = _1[18 of 23];
        _21 = _1[19 of 23];
        _22 = _1[20 of 23];
        _23 = _1[21 of 23];
        _24 = _1[22 of 23];
        _26 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _25 = <A1 as FromToNativeWasmType>::from_native(move _26) -> [return: bb2, unwind continue];
    }

    bb2: {
        _28 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb68];
    }

    bb3: {
        _27 = <A2 as FromToNativeWasmType>::from_native(move _28) -> [return: bb4, unwind: bb68];
    }

    bb4: {
        _30 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb67];
    }

    bb5: {
        _29 = <A3 as FromToNativeWasmType>::from_native(move _30) -> [return: bb6, unwind: bb67];
    }

    bb6: {
        _32 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb66];
    }

    bb7: {
        _31 = <A4 as FromToNativeWasmType>::from_native(move _32) -> [return: bb8, unwind: bb66];
    }

    bb8: {
        _34 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb65];
    }

    bb9: {
        _33 = <A5 as FromToNativeWasmType>::from_native(move _34) -> [return: bb10, unwind: bb65];
    }

    bb10: {
        _36 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb64];
    }

    bb11: {
        _35 = <A6 as FromToNativeWasmType>::from_native(move _36) -> [return: bb12, unwind: bb64];
    }

    bb12: {
        _38 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb63];
    }

    bb13: {
        _37 = <A7 as FromToNativeWasmType>::from_native(move _38) -> [return: bb14, unwind: bb63];
    }

    bb14: {
        _40 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb62];
    }

    bb15: {
        _39 = <A8 as FromToNativeWasmType>::from_native(move _40) -> [return: bb16, unwind: bb62];
    }

    bb16: {
        _42 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb61];
    }

    bb17: {
        _41 = <A9 as FromToNativeWasmType>::from_native(move _42) -> [return: bb18, unwind: bb61];
    }

    bb18: {
        _44 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb60];
    }

    bb19: {
        _43 = <A10 as FromToNativeWasmType>::from_native(move _44) -> [return: bb20, unwind: bb60];
    }

    bb20: {
        _46 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb59];
    }

    bb21: {
        _45 = <A11 as FromToNativeWasmType>::from_native(move _46) -> [return: bb22, unwind: bb59];
    }

    bb22: {
        _48 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb58];
    }

    bb23: {
        _47 = <A12 as FromToNativeWasmType>::from_native(move _48) -> [return: bb24, unwind: bb58];
    }

    bb24: {
        _50 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb57];
    }

    bb25: {
        _49 = <A13 as FromToNativeWasmType>::from_native(move _50) -> [return: bb26, unwind: bb57];
    }

    bb26: {
        _52 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb56];
    }

    bb27: {
        _51 = <A14 as FromToNativeWasmType>::from_native(move _52) -> [return: bb28, unwind: bb56];
    }

    bb28: {
        _54 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_16) -> [return: bb29, unwind: bb55];
    }

    bb29: {
        _53 = <A15 as FromToNativeWasmType>::from_native(move _54) -> [return: bb30, unwind: bb55];
    }

    bb30: {
        _56 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_17) -> [return: bb31, unwind: bb54];
    }

    bb31: {
        _55 = <A16 as FromToNativeWasmType>::from_native(move _56) -> [return: bb32, unwind: bb54];
    }

    bb32: {
        _58 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_18) -> [return: bb33, unwind: bb53];
    }

    bb33: {
        _57 = <A17 as FromToNativeWasmType>::from_native(move _58) -> [return: bb34, unwind: bb53];
    }

    bb34: {
        _60 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_19) -> [return: bb35, unwind: bb52];
    }

    bb35: {
        _59 = <A18 as FromToNativeWasmType>::from_native(move _60) -> [return: bb36, unwind: bb52];
    }

    bb36: {
        _62 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_20) -> [return: bb37, unwind: bb51];
    }

    bb37: {
        _61 = <A19 as FromToNativeWasmType>::from_native(move _62) -> [return: bb38, unwind: bb51];
    }

    bb38: {
        _64 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_21) -> [return: bb39, unwind: bb50];
    }

    bb39: {
        _63 = <A20 as FromToNativeWasmType>::from_native(move _64) -> [return: bb40, unwind: bb50];
    }

    bb40: {
        _66 = <<A21 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_22) -> [return: bb41, unwind: bb49];
    }

    bb41: {
        _65 = <A21 as FromToNativeWasmType>::from_native(move _66) -> [return: bb42, unwind: bb49];
    }

    bb42: {
        _68 = <<A22 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_23) -> [return: bb43, unwind: bb48];
    }

    bb43: {
        _67 = <A22 as FromToNativeWasmType>::from_native(move _68) -> [return: bb44, unwind: bb48];
    }

    bb44: {
        _70 = <<A23 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_24) -> [return: bb45, unwind: bb47];
    }

    bb45: {
        _69 = <A23 as FromToNativeWasmType>::from_native(move _70) -> [return: bb46, unwind: bb47];
    }

    bb46: {
        _0 = (move _25, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57, move _59, move _61, move _63, move _65, move _67, move _69);
        return;
    }

    bb47 (cleanup): {
        drop(_67) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_65) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_63) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_61) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_59) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_57) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_55) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_53) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_51) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_49) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_47) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_45) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_43) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_41) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_39) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_37) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_35) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_33) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_31) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_29) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_27) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_25) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 23]>;
    let mut _4: std::result::Result<[i128; 23], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 23];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 23]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 23], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 23]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23)) -> [i128; 23] {
    debug self => _1;
    let mut _0: [i128; 23];
    let mut _25: i128;
    let mut _26: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: i128;
    let mut _28: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A2;
    let mut _30: i128;
    let mut _31: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A3;
    let mut _33: i128;
    let mut _34: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A4;
    let mut _36: i128;
    let mut _37: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A5;
    let mut _39: i128;
    let mut _40: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A6;
    let mut _42: i128;
    let mut _43: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A7;
    let mut _45: i128;
    let mut _46: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A8;
    let mut _48: i128;
    let mut _49: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A9;
    let mut _51: i128;
    let mut _52: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A10;
    let mut _54: i128;
    let mut _55: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A11;
    let mut _57: i128;
    let mut _58: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A12;
    let mut _60: i128;
    let mut _61: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A13;
    let mut _63: i128;
    let mut _64: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A14;
    let mut _66: i128;
    let mut _67: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _68: A15;
    let mut _69: i128;
    let mut _70: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _71: A16;
    let mut _72: i128;
    let mut _73: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _74: A17;
    let mut _75: i128;
    let mut _76: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _77: A18;
    let mut _78: i128;
    let mut _79: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _80: A19;
    let mut _81: i128;
    let mut _82: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _83: A20;
    let mut _84: i128;
    let mut _85: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _86: A21;
    let mut _87: i128;
    let mut _88: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _89: A22;
    let mut _90: i128;
    let mut _91: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _92: A23;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
        let _16: A15;
        let _17: A16;
        let _18: A17;
        let _19: A18;
        let _20: A19;
        let _21: A20;
        let _22: A21;
        let _23: A22;
        let _24: A23;
    }

    bb0: {
        _114 = const false;
        _113 = const false;
        _112 = const false;
        _111 = const false;
        _110 = const false;
        _109 = const false;
        _108 = const false;
        _107 = const false;
        _106 = const false;
        _105 = const false;
        _104 = const false;
        _103 = const false;
        _102 = const false;
        _101 = const false;
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _2 = move (_1.0: A1);
        _114 = const true;
        _3 = move (_1.1: A2);
        _113 = const true;
        _4 = move (_1.2: A3);
        _112 = const true;
        _5 = move (_1.3: A4);
        _111 = const true;
        _6 = move (_1.4: A5);
        _110 = const true;
        _7 = move (_1.5: A6);
        _109 = const true;
        _8 = move (_1.6: A7);
        _108 = const true;
        _9 = move (_1.7: A8);
        _107 = const true;
        _10 = move (_1.8: A9);
        _106 = const true;
        _11 = move (_1.9: A10);
        _105 = const true;
        _12 = move (_1.10: A11);
        _104 = const true;
        _13 = move (_1.11: A12);
        _103 = const true;
        _14 = move (_1.12: A13);
        _102 = const true;
        _15 = move (_1.13: A14);
        _101 = const true;
        _16 = move (_1.14: A15);
        _100 = const true;
        _17 = move (_1.15: A16);
        _99 = const true;
        _18 = move (_1.16: A17);
        _98 = const true;
        _19 = move (_1.17: A18);
        _97 = const true;
        _20 = move (_1.18: A19);
        _96 = const true;
        _21 = move (_1.19: A20);
        _95 = const true;
        _22 = move (_1.20: A21);
        _94 = const true;
        _23 = move (_1.21: A22);
        _93 = const true;
        _24 = move (_1.22: A23);
        _26 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb70];
    }

    bb1: {
        _25 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _26) -> [return: bb2, unwind: bb70];
    }

    bb2: {
        _114 = const false;
        _29 = move _3;
        _28 = <A2 as FromToNativeWasmType>::to_native(move _29) -> [return: bb3, unwind: bb70];
    }

    bb3: {
        _27 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _28) -> [return: bb4, unwind: bb70];
    }

    bb4: {
        _113 = const false;
        _32 = move _4;
        _31 = <A3 as FromToNativeWasmType>::to_native(move _32) -> [return: bb5, unwind: bb70];
    }

    bb5: {
        _30 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _31) -> [return: bb6, unwind: bb70];
    }

    bb6: {
        _112 = const false;
        _35 = move _5;
        _34 = <A4 as FromToNativeWasmType>::to_native(move _35) -> [return: bb7, unwind: bb70];
    }

    bb7: {
        _33 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _34) -> [return: bb8, unwind: bb70];
    }

    bb8: {
        _111 = const false;
        _38 = move _6;
        _37 = <A5 as FromToNativeWasmType>::to_native(move _38) -> [return: bb9, unwind: bb70];
    }

    bb9: {
        _36 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _37) -> [return: bb10, unwind: bb70];
    }

    bb10: {
        _110 = const false;
        _41 = move _7;
        _40 = <A6 as FromToNativeWasmType>::to_native(move _41) -> [return: bb11, unwind: bb70];
    }

    bb11: {
        _39 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _40) -> [return: bb12, unwind: bb70];
    }

    bb12: {
        _109 = const false;
        _44 = move _8;
        _43 = <A7 as FromToNativeWasmType>::to_native(move _44) -> [return: bb13, unwind: bb70];
    }

    bb13: {
        _42 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _43) -> [return: bb14, unwind: bb70];
    }

    bb14: {
        _108 = const false;
        _47 = move _9;
        _46 = <A8 as FromToNativeWasmType>::to_native(move _47) -> [return: bb15, unwind: bb70];
    }

    bb15: {
        _45 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _46) -> [return: bb16, unwind: bb70];
    }

    bb16: {
        _107 = const false;
        _50 = move _10;
        _49 = <A9 as FromToNativeWasmType>::to_native(move _50) -> [return: bb17, unwind: bb70];
    }

    bb17: {
        _48 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _49) -> [return: bb18, unwind: bb70];
    }

    bb18: {
        _106 = const false;
        _53 = move _11;
        _52 = <A10 as FromToNativeWasmType>::to_native(move _53) -> [return: bb19, unwind: bb70];
    }

    bb19: {
        _51 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _52) -> [return: bb20, unwind: bb70];
    }

    bb20: {
        _105 = const false;
        _56 = move _12;
        _55 = <A11 as FromToNativeWasmType>::to_native(move _56) -> [return: bb21, unwind: bb70];
    }

    bb21: {
        _54 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _55) -> [return: bb22, unwind: bb70];
    }

    bb22: {
        _104 = const false;
        _59 = move _13;
        _58 = <A12 as FromToNativeWasmType>::to_native(move _59) -> [return: bb23, unwind: bb70];
    }

    bb23: {
        _57 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _58) -> [return: bb24, unwind: bb70];
    }

    bb24: {
        _103 = const false;
        _62 = move _14;
        _61 = <A13 as FromToNativeWasmType>::to_native(move _62) -> [return: bb25, unwind: bb70];
    }

    bb25: {
        _60 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _61) -> [return: bb26, unwind: bb70];
    }

    bb26: {
        _102 = const false;
        _65 = move _15;
        _64 = <A14 as FromToNativeWasmType>::to_native(move _65) -> [return: bb27, unwind: bb70];
    }

    bb27: {
        _63 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _64) -> [return: bb28, unwind: bb70];
    }

    bb28: {
        _101 = const false;
        _68 = move _16;
        _67 = <A15 as FromToNativeWasmType>::to_native(move _68) -> [return: bb29, unwind: bb70];
    }

    bb29: {
        _66 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _67) -> [return: bb30, unwind: bb70];
    }

    bb30: {
        _100 = const false;
        _71 = move _17;
        _70 = <A16 as FromToNativeWasmType>::to_native(move _71) -> [return: bb31, unwind: bb70];
    }

    bb31: {
        _69 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _70) -> [return: bb32, unwind: bb70];
    }

    bb32: {
        _99 = const false;
        _74 = move _18;
        _73 = <A17 as FromToNativeWasmType>::to_native(move _74) -> [return: bb33, unwind: bb70];
    }

    bb33: {
        _72 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _73) -> [return: bb34, unwind: bb70];
    }

    bb34: {
        _98 = const false;
        _77 = move _19;
        _76 = <A18 as FromToNativeWasmType>::to_native(move _77) -> [return: bb35, unwind: bb70];
    }

    bb35: {
        _75 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _76) -> [return: bb36, unwind: bb70];
    }

    bb36: {
        _97 = const false;
        _80 = move _20;
        _79 = <A19 as FromToNativeWasmType>::to_native(move _80) -> [return: bb37, unwind: bb70];
    }

    bb37: {
        _78 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _79) -> [return: bb38, unwind: bb70];
    }

    bb38: {
        _96 = const false;
        _83 = move _21;
        _82 = <A20 as FromToNativeWasmType>::to_native(move _83) -> [return: bb39, unwind: bb70];
    }

    bb39: {
        _81 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _82) -> [return: bb40, unwind: bb70];
    }

    bb40: {
        _95 = const false;
        _86 = move _22;
        _85 = <A21 as FromToNativeWasmType>::to_native(move _86) -> [return: bb41, unwind: bb70];
    }

    bb41: {
        _84 = <<A21 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _85) -> [return: bb42, unwind: bb70];
    }

    bb42: {
        _94 = const false;
        _89 = move _23;
        _88 = <A22 as FromToNativeWasmType>::to_native(move _89) -> [return: bb43, unwind: bb70];
    }

    bb43: {
        _87 = <<A22 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _88) -> [return: bb44, unwind: bb70];
    }

    bb44: {
        _93 = const false;
        _92 = move _24;
        _91 = <A23 as FromToNativeWasmType>::to_native(move _92) -> [return: bb45, unwind: bb70];
    }

    bb45: {
        _90 = <<A23 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _91) -> [return: bb46, unwind: bb70];
    }

    bb46: {
        _0 = [move _25, move _27, move _30, move _33, move _36, move _39, move _42, move _45, move _48, move _51, move _54, move _57, move _60, move _63, move _66, move _69, move _72, move _75, move _78, move _81, move _84, move _87, move _90];
        _93 = const false;
        _94 = const false;
        _95 = const false;
        _96 = const false;
        _97 = const false;
        _98 = const false;
        _99 = const false;
        _100 = const false;
        _101 = const false;
        _102 = const false;
        _103 = const false;
        _104 = const false;
        _105 = const false;
        _106 = const false;
        _107 = const false;
        _108 = const false;
        _109 = const false;
        _110 = const false;
        _111 = const false;
        _112 = const false;
        _113 = const false;
        _114 = const false;
        return;
    }

    bb47 (cleanup): {
        switchInt(_94) -> [0: bb48, otherwise: bb71];
    }

    bb48 (cleanup): {
        switchInt(_95) -> [0: bb49, otherwise: bb72];
    }

    bb49 (cleanup): {
        switchInt(_96) -> [0: bb50, otherwise: bb73];
    }

    bb50 (cleanup): {
        switchInt(_97) -> [0: bb51, otherwise: bb74];
    }

    bb51 (cleanup): {
        switchInt(_98) -> [0: bb52, otherwise: bb75];
    }

    bb52 (cleanup): {
        switchInt(_99) -> [0: bb53, otherwise: bb76];
    }

    bb53 (cleanup): {
        switchInt(_100) -> [0: bb54, otherwise: bb77];
    }

    bb54 (cleanup): {
        switchInt(_101) -> [0: bb55, otherwise: bb78];
    }

    bb55 (cleanup): {
        switchInt(_102) -> [0: bb56, otherwise: bb79];
    }

    bb56 (cleanup): {
        switchInt(_103) -> [0: bb57, otherwise: bb80];
    }

    bb57 (cleanup): {
        switchInt(_104) -> [0: bb58, otherwise: bb81];
    }

    bb58 (cleanup): {
        switchInt(_105) -> [0: bb59, otherwise: bb82];
    }

    bb59 (cleanup): {
        switchInt(_106) -> [0: bb60, otherwise: bb83];
    }

    bb60 (cleanup): {
        switchInt(_107) -> [0: bb61, otherwise: bb84];
    }

    bb61 (cleanup): {
        switchInt(_108) -> [0: bb62, otherwise: bb85];
    }

    bb62 (cleanup): {
        switchInt(_109) -> [0: bb63, otherwise: bb86];
    }

    bb63 (cleanup): {
        switchInt(_110) -> [0: bb64, otherwise: bb87];
    }

    bb64 (cleanup): {
        switchInt(_111) -> [0: bb65, otherwise: bb88];
    }

    bb65 (cleanup): {
        switchInt(_112) -> [0: bb66, otherwise: bb89];
    }

    bb66 (cleanup): {
        switchInt(_113) -> [0: bb67, otherwise: bb90];
    }

    bb67 (cleanup): {
        switchInt(_114) -> [0: bb68, otherwise: bb91];
    }

    bb68 (cleanup): {
        resume;
    }

    bb69 (cleanup): {
        drop(_24) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_93) -> [0: bb47, otherwise: bb69];
    }

    bb71 (cleanup): {
        drop(_23) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_22) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_21) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_20) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_19) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_18) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_17) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_16) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_15) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_14) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_13) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_12) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_11) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_10) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_9) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_8) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_7) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_6) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_5) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_4) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_3) -> [return: bb68, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 23] {
    let mut _0: [i128; 23];

    bb0: {
        _0 = [const 0_i128; 23];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 23_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S23<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23);
    let mut _25: A1;
    let mut _26: A2;
    let mut _27: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A3;
    let mut _29: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A4;
    let mut _31: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A5;
    let mut _33: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A6;
    let mut _35: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A7;
    let mut _37: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A8;
    let mut _39: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A9;
    let mut _41: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A10;
    let mut _43: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A11;
    let mut _45: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A12;
    let mut _47: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A13;
    let mut _49: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A14;
    let mut _51: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A15;
    let mut _53: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A16;
    let mut _55: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A17;
    let mut _57: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A18;
    let mut _59: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A19;
    let mut _61: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A20;
    let mut _63: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A21;
    let mut _65: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A22;
    let mut _67: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _68: A23;
    let mut _69: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
        let _16: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
        let _17: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
        let _18: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
        let _19: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
        let _20: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
        let _21: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
        let _22: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
        let _23: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
        let _24: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _91 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _90 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _89 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _88 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _87 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _86 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _85 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _84 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _83 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _82 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _81 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _80 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _79 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _78 = const true;
        _16 = move (_1.14: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _77 = const true;
        _17 = move (_1.15: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _76 = const true;
        _18 = move (_1.16: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _75 = const true;
        _19 = move (_1.17: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _74 = const true;
        _20 = move (_1.18: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _73 = const true;
        _21 = move (_1.19: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _72 = const true;
        _22 = move (_1.20: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _71 = const true;
        _23 = move (_1.21: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _70 = const true;
        _24 = move (_1.22: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
        _25 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb69];
    }

    bb1: {
        _91 = const false;
        _27 = move _3;
        _26 = <A2 as FromToNativeWasmType>::from_native(move _27) -> [return: bb2, unwind: bb45];
    }

    bb2: {
        _90 = const false;
        _29 = move _4;
        _28 = <A3 as FromToNativeWasmType>::from_native(move _29) -> [return: bb3, unwind: bb44];
    }

    bb3: {
        _89 = const false;
        _31 = move _5;
        _30 = <A4 as FromToNativeWasmType>::from_native(move _31) -> [return: bb4, unwind: bb43];
    }

    bb4: {
        _88 = const false;
        _33 = move _6;
        _32 = <A5 as FromToNativeWasmType>::from_native(move _33) -> [return: bb5, unwind: bb42];
    }

    bb5: {
        _87 = const false;
        _35 = move _7;
        _34 = <A6 as FromToNativeWasmType>::from_native(move _35) -> [return: bb6, unwind: bb41];
    }

    bb6: {
        _86 = const false;
        _37 = move _8;
        _36 = <A7 as FromToNativeWasmType>::from_native(move _37) -> [return: bb7, unwind: bb40];
    }

    bb7: {
        _85 = const false;
        _39 = move _9;
        _38 = <A8 as FromToNativeWasmType>::from_native(move _39) -> [return: bb8, unwind: bb39];
    }

    bb8: {
        _84 = const false;
        _41 = move _10;
        _40 = <A9 as FromToNativeWasmType>::from_native(move _41) -> [return: bb9, unwind: bb38];
    }

    bb9: {
        _83 = const false;
        _43 = move _11;
        _42 = <A10 as FromToNativeWasmType>::from_native(move _43) -> [return: bb10, unwind: bb37];
    }

    bb10: {
        _82 = const false;
        _45 = move _12;
        _44 = <A11 as FromToNativeWasmType>::from_native(move _45) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        _81 = const false;
        _47 = move _13;
        _46 = <A12 as FromToNativeWasmType>::from_native(move _47) -> [return: bb12, unwind: bb35];
    }

    bb12: {
        _80 = const false;
        _49 = move _14;
        _48 = <A13 as FromToNativeWasmType>::from_native(move _49) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        _79 = const false;
        _51 = move _15;
        _50 = <A14 as FromToNativeWasmType>::from_native(move _51) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        _78 = const false;
        _53 = move _16;
        _52 = <A15 as FromToNativeWasmType>::from_native(move _53) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _77 = const false;
        _55 = move _17;
        _54 = <A16 as FromToNativeWasmType>::from_native(move _55) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _76 = const false;
        _57 = move _18;
        _56 = <A17 as FromToNativeWasmType>::from_native(move _57) -> [return: bb17, unwind: bb30];
    }

    bb17: {
        _75 = const false;
        _59 = move _19;
        _58 = <A18 as FromToNativeWasmType>::from_native(move _59) -> [return: bb18, unwind: bb29];
    }

    bb18: {
        _74 = const false;
        _61 = move _20;
        _60 = <A19 as FromToNativeWasmType>::from_native(move _61) -> [return: bb19, unwind: bb28];
    }

    bb19: {
        _73 = const false;
        _63 = move _21;
        _62 = <A20 as FromToNativeWasmType>::from_native(move _63) -> [return: bb20, unwind: bb27];
    }

    bb20: {
        _72 = const false;
        _65 = move _22;
        _64 = <A21 as FromToNativeWasmType>::from_native(move _65) -> [return: bb21, unwind: bb26];
    }

    bb21: {
        _71 = const false;
        _67 = move _23;
        _66 = <A22 as FromToNativeWasmType>::from_native(move _67) -> [return: bb22, unwind: bb25];
    }

    bb22: {
        _70 = const false;
        _69 = move _24;
        _68 = <A23 as FromToNativeWasmType>::from_native(move _69) -> [return: bb23, unwind: bb24];
    }

    bb23: {
        _0 = (move _25, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56, move _58, move _60, move _62, move _64, move _66, move _68);
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        _88 = const false;
        _89 = const false;
        _90 = const false;
        _91 = const false;
        return;
    }

    bb24 (cleanup): {
        drop(_66) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_64) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_62) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_60) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_58) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_56) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_54) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_52) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_50) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_48) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_46) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_44) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_42) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_40) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_38) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_36) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_34) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_32) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_30) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_28) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_26) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_25) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_71) -> [0: bb47, otherwise: bb70];
    }

    bb47 (cleanup): {
        switchInt(_72) -> [0: bb48, otherwise: bb71];
    }

    bb48 (cleanup): {
        switchInt(_73) -> [0: bb49, otherwise: bb72];
    }

    bb49 (cleanup): {
        switchInt(_74) -> [0: bb50, otherwise: bb73];
    }

    bb50 (cleanup): {
        switchInt(_75) -> [0: bb51, otherwise: bb74];
    }

    bb51 (cleanup): {
        switchInt(_76) -> [0: bb52, otherwise: bb75];
    }

    bb52 (cleanup): {
        switchInt(_77) -> [0: bb53, otherwise: bb76];
    }

    bb53 (cleanup): {
        switchInt(_78) -> [0: bb54, otherwise: bb77];
    }

    bb54 (cleanup): {
        switchInt(_79) -> [0: bb55, otherwise: bb78];
    }

    bb55 (cleanup): {
        switchInt(_80) -> [0: bb56, otherwise: bb79];
    }

    bb56 (cleanup): {
        switchInt(_81) -> [0: bb57, otherwise: bb80];
    }

    bb57 (cleanup): {
        switchInt(_82) -> [0: bb58, otherwise: bb81];
    }

    bb58 (cleanup): {
        switchInt(_83) -> [0: bb59, otherwise: bb82];
    }

    bb59 (cleanup): {
        switchInt(_84) -> [0: bb60, otherwise: bb83];
    }

    bb60 (cleanup): {
        switchInt(_85) -> [0: bb61, otherwise: bb84];
    }

    bb61 (cleanup): {
        switchInt(_86) -> [0: bb62, otherwise: bb85];
    }

    bb62 (cleanup): {
        switchInt(_87) -> [0: bb63, otherwise: bb86];
    }

    bb63 (cleanup): {
        switchInt(_88) -> [0: bb64, otherwise: bb87];
    }

    bb64 (cleanup): {
        switchInt(_89) -> [0: bb65, otherwise: bb88];
    }

    bb65 (cleanup): {
        switchInt(_90) -> [0: bb66, otherwise: bb89];
    }

    bb66 (cleanup): {
        switchInt(_91) -> [0: bb67, otherwise: bb90];
    }

    bb67 (cleanup): {
        resume;
    }

    bb68 (cleanup): {
        drop(_24) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_70) -> [0: bb46, otherwise: bb68];
    }

    bb70 (cleanup): {
        drop(_23) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_22) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_21) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_20) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_19) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_18) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_17) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_16) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_15) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_14) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_13) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_12) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_11) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_10) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_9) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_8) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_7) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_6) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_5) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_4) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_3) -> [return: bb67, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23)) -> S23<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23> {
    debug self => _1;
    let mut _0: externals::function::inner::S23<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let _16: A15;
    let _17: A16;
    let _18: A17;
    let _19: A18;
    let _20: A19;
    let _21: A20;
    let _22: A21;
    let _23: A22;
    let _24: A23;
    let mut _25: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A2;
    let mut _28: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A3;
    let mut _30: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A4;
    let mut _32: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A5;
    let mut _34: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A6;
    let mut _36: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A7;
    let mut _38: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A8;
    let mut _40: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A9;
    let mut _42: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A10;
    let mut _44: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A11;
    let mut _46: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A12;
    let mut _48: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A13;
    let mut _50: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A14;
    let mut _52: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A15;
    let mut _54: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A16;
    let mut _56: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A17;
    let mut _58: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A18;
    let mut _60: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A19;
    let mut _62: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A20;
    let mut _64: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A21;
    let mut _66: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _67: A22;
    let mut _68: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _69: A23;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
    }

    bb0: {
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _2 = move (_1.0: A1);
        _91 = const true;
        _3 = move (_1.1: A2);
        _90 = const true;
        _4 = move (_1.2: A3);
        _89 = const true;
        _5 = move (_1.3: A4);
        _88 = const true;
        _6 = move (_1.4: A5);
        _87 = const true;
        _7 = move (_1.5: A6);
        _86 = const true;
        _8 = move (_1.6: A7);
        _85 = const true;
        _9 = move (_1.7: A8);
        _84 = const true;
        _10 = move (_1.8: A9);
        _83 = const true;
        _11 = move (_1.9: A10);
        _82 = const true;
        _12 = move (_1.10: A11);
        _81 = const true;
        _13 = move (_1.11: A12);
        _80 = const true;
        _14 = move (_1.12: A13);
        _79 = const true;
        _15 = move (_1.13: A14);
        _78 = const true;
        _16 = move (_1.14: A15);
        _77 = const true;
        _17 = move (_1.15: A16);
        _76 = const true;
        _18 = move (_1.16: A17);
        _75 = const true;
        _19 = move (_1.17: A18);
        _74 = const true;
        _20 = move (_1.18: A19);
        _73 = const true;
        _21 = move (_1.19: A20);
        _72 = const true;
        _22 = move (_1.20: A21);
        _71 = const true;
        _23 = move (_1.21: A22);
        _70 = const true;
        _24 = move (_1.22: A23);
        _25 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb69];
    }

    bb1: {
        _91 = const false;
        _27 = move _3;
        _26 = <A2 as FromToNativeWasmType>::to_native(move _27) -> [return: bb2, unwind: bb45];
    }

    bb2: {
        _90 = const false;
        _29 = move _4;
        _28 = <A3 as FromToNativeWasmType>::to_native(move _29) -> [return: bb3, unwind: bb44];
    }

    bb3: {
        _89 = const false;
        _31 = move _5;
        _30 = <A4 as FromToNativeWasmType>::to_native(move _31) -> [return: bb4, unwind: bb43];
    }

    bb4: {
        _88 = const false;
        _33 = move _6;
        _32 = <A5 as FromToNativeWasmType>::to_native(move _33) -> [return: bb5, unwind: bb42];
    }

    bb5: {
        _87 = const false;
        _35 = move _7;
        _34 = <A6 as FromToNativeWasmType>::to_native(move _35) -> [return: bb6, unwind: bb41];
    }

    bb6: {
        _86 = const false;
        _37 = move _8;
        _36 = <A7 as FromToNativeWasmType>::to_native(move _37) -> [return: bb7, unwind: bb40];
    }

    bb7: {
        _85 = const false;
        _39 = move _9;
        _38 = <A8 as FromToNativeWasmType>::to_native(move _39) -> [return: bb8, unwind: bb39];
    }

    bb8: {
        _84 = const false;
        _41 = move _10;
        _40 = <A9 as FromToNativeWasmType>::to_native(move _41) -> [return: bb9, unwind: bb38];
    }

    bb9: {
        _83 = const false;
        _43 = move _11;
        _42 = <A10 as FromToNativeWasmType>::to_native(move _43) -> [return: bb10, unwind: bb37];
    }

    bb10: {
        _82 = const false;
        _45 = move _12;
        _44 = <A11 as FromToNativeWasmType>::to_native(move _45) -> [return: bb11, unwind: bb36];
    }

    bb11: {
        _81 = const false;
        _47 = move _13;
        _46 = <A12 as FromToNativeWasmType>::to_native(move _47) -> [return: bb12, unwind: bb35];
    }

    bb12: {
        _80 = const false;
        _49 = move _14;
        _48 = <A13 as FromToNativeWasmType>::to_native(move _49) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        _79 = const false;
        _51 = move _15;
        _50 = <A14 as FromToNativeWasmType>::to_native(move _51) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        _78 = const false;
        _53 = move _16;
        _52 = <A15 as FromToNativeWasmType>::to_native(move _53) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _77 = const false;
        _55 = move _17;
        _54 = <A16 as FromToNativeWasmType>::to_native(move _55) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _76 = const false;
        _57 = move _18;
        _56 = <A17 as FromToNativeWasmType>::to_native(move _57) -> [return: bb17, unwind: bb30];
    }

    bb17: {
        _75 = const false;
        _59 = move _19;
        _58 = <A18 as FromToNativeWasmType>::to_native(move _59) -> [return: bb18, unwind: bb29];
    }

    bb18: {
        _74 = const false;
        _61 = move _20;
        _60 = <A19 as FromToNativeWasmType>::to_native(move _61) -> [return: bb19, unwind: bb28];
    }

    bb19: {
        _73 = const false;
        _63 = move _21;
        _62 = <A20 as FromToNativeWasmType>::to_native(move _63) -> [return: bb20, unwind: bb27];
    }

    bb20: {
        _72 = const false;
        _65 = move _22;
        _64 = <A21 as FromToNativeWasmType>::to_native(move _65) -> [return: bb21, unwind: bb26];
    }

    bb21: {
        _71 = const false;
        _67 = move _23;
        _66 = <A22 as FromToNativeWasmType>::to_native(move _67) -> [return: bb22, unwind: bb25];
    }

    bb22: {
        _70 = const false;
        _69 = move _24;
        _68 = <A23 as FromToNativeWasmType>::to_native(move _69) -> [return: bb23, unwind: bb24];
    }

    bb23: {
        _0 = S23::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23>(move _25, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56, move _58, move _60, move _62, move _64, move _66, move _68);
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        _88 = const false;
        _89 = const false;
        _90 = const false;
        _91 = const false;
        return;
    }

    bb24 (cleanup): {
        drop(_66) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_64) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_62) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_60) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_58) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_56) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_54) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_52) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_50) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_48) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_46) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_44) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_42) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_40) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_38) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_36) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_34) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_32) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_30) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_28) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_26) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_25) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_71) -> [0: bb47, otherwise: bb70];
    }

    bb47 (cleanup): {
        switchInt(_72) -> [0: bb48, otherwise: bb71];
    }

    bb48 (cleanup): {
        switchInt(_73) -> [0: bb49, otherwise: bb72];
    }

    bb49 (cleanup): {
        switchInt(_74) -> [0: bb50, otherwise: bb73];
    }

    bb50 (cleanup): {
        switchInt(_75) -> [0: bb51, otherwise: bb74];
    }

    bb51 (cleanup): {
        switchInt(_76) -> [0: bb52, otherwise: bb75];
    }

    bb52 (cleanup): {
        switchInt(_77) -> [0: bb53, otherwise: bb76];
    }

    bb53 (cleanup): {
        switchInt(_78) -> [0: bb54, otherwise: bb77];
    }

    bb54 (cleanup): {
        switchInt(_79) -> [0: bb55, otherwise: bb78];
    }

    bb55 (cleanup): {
        switchInt(_80) -> [0: bb56, otherwise: bb79];
    }

    bb56 (cleanup): {
        switchInt(_81) -> [0: bb57, otherwise: bb80];
    }

    bb57 (cleanup): {
        switchInt(_82) -> [0: bb58, otherwise: bb81];
    }

    bb58 (cleanup): {
        switchInt(_83) -> [0: bb59, otherwise: bb82];
    }

    bb59 (cleanup): {
        switchInt(_84) -> [0: bb60, otherwise: bb83];
    }

    bb60 (cleanup): {
        switchInt(_85) -> [0: bb61, otherwise: bb84];
    }

    bb61 (cleanup): {
        switchInt(_86) -> [0: bb62, otherwise: bb85];
    }

    bb62 (cleanup): {
        switchInt(_87) -> [0: bb63, otherwise: bb86];
    }

    bb63 (cleanup): {
        switchInt(_88) -> [0: bb64, otherwise: bb87];
    }

    bb64 (cleanup): {
        switchInt(_89) -> [0: bb65, otherwise: bb88];
    }

    bb65 (cleanup): {
        switchInt(_90) -> [0: bb66, otherwise: bb89];
    }

    bb66 (cleanup): {
        switchInt(_91) -> [0: bb67, otherwise: bb90];
    }

    bb67 (cleanup): {
        resume;
    }

    bb68 (cleanup): {
        drop(_24) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_70) -> [0: bb46, otherwise: bb68];
    }

    bb70 (cleanup): {
        drop(_23) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_22) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_21) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_20) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_19) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_18) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_17) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_16) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_15) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_14) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_13) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_12) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_11) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_10) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_9) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_8) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_7) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_6) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_5) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_4) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_3) -> [return: bb67, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 23];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 23] = {
    let mut _0: &[wasmer_types::Type; 23];
    let mut _1: [wasmer_types::Type; 23];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native, _22: <A21 as FromToNativeWasmType>::Native, _23: <A22 as FromToNativeWasmType>::Native, _24: <A23 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    debug A21 => _22;
    debug A22 => _23;
    debug A23 => _24;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _25: &Func;
    let _26: &Func;
    let _27: *const Func;
    let mut _28: *const ();
    let mut _30: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _31: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _32: &&Func;
    let mut _33: isize;
    let mut _34: isize;
    let mut _37: !;
    let mut _38: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _39: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _41: !;
    let mut _43: isize;
    scope 1 {
        debug func => _25;
        let _29: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _29;
            let _35: Rets;
            let _36: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _40: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _35;
            }
            scope 5 {
                debug trap => _36;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _40;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _42: &();
    }

    bb0: {
        _42 = const _;
        _28 = &raw const (*_42);
        _27 = move _28 as *const Func (PtrToPtr);
        _26 = &(*_27);
        _25 = _26;
        _32 = &_25;
        _31 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _32, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21, A21: move _22, A22: move _23, A23: move _24 };
        _30 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _31);
        _29 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _30) -> [return: bb1, unwind continue];
    }

    bb1: {
        _34 = discriminant(_29);
        switchInt(move _34) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _33 = discriminant(((_29 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _33) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _40 = move ((_29 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _41 = resume_panic(move _40) -> unwind continue;
    }

    bb5: {
        _35 = move ((((_29 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _35) -> [return: bb6, unwind continue];
    }

    bb6: {
        _43 = discriminant(_29);
        switchInt(move _43) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _36 = move ((((_29 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _39 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _36) -> [return: bb8, unwind continue];
    }

    bb8: {
        _38 = move _39 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _37 = raise_user_trap(move _38) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A21 => (_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A22 => (_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A23 => (_1.23: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A21;
    let mut _45: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A22;
    let mut _47: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A23;
    let mut _49: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: &&Func;
    let mut _51: &Func;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;

    bb0: {
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _74 = const true;
        _75 = const true;
        _76 = const true;
        _77 = const true;
        _78 = const true;
        _79 = const true;
        _80 = const true;
        _81 = const true;
        _82 = const true;
        _83 = const true;
        _84 = const true;
        _85 = const true;
        _86 = const true;
        _87 = const true;
        _88 = const true;
        _89 = const true;
        _90 = const true;
        _91 = const true;
        _92 = const true;
        _93 = const true;
        _94 = const true;
        _95 = const true;
        _50 = deref_copy (_1.0: &&Func);
        _51 = deref_copy (*_50);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb114];
    }

    bb1: {
        _73 = const true;
        _95 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb70];
    }

    bb2: {
        _72 = const true;
        _94 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb68];
    }

    bb3: {
        _71 = const true;
        _93 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb66];
    }

    bb4: {
        _70 = const true;
        _92 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb64];
    }

    bb5: {
        _69 = const true;
        _91 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb62];
    }

    bb6: {
        _68 = const true;
        _90 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb60];
    }

    bb7: {
        _67 = const true;
        _89 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb58];
    }

    bb8: {
        _66 = const true;
        _88 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb56];
    }

    bb9: {
        _65 = const true;
        _87 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb54];
    }

    bb10: {
        _64 = const true;
        _86 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb52];
    }

    bb11: {
        _63 = const true;
        _85 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb50];
    }

    bb12: {
        _62 = const true;
        _84 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb48];
    }

    bb13: {
        _61 = const true;
        _83 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb46];
    }

    bb14: {
        _60 = const true;
        _82 = const false;
        _33 = move (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb44];
    }

    bb15: {
        _59 = const true;
        _81 = const false;
        _35 = move (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb42];
    }

    bb16: {
        _58 = const true;
        _80 = const false;
        _37 = move (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb40];
    }

    bb17: {
        _57 = const true;
        _79 = const false;
        _39 = move (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb38];
    }

    bb18: {
        _56 = const true;
        _78 = const false;
        _41 = move (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb36];
    }

    bb19: {
        _55 = const true;
        _77 = const false;
        _43 = move (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb34];
    }

    bb20: {
        _54 = const true;
        _76 = const false;
        _45 = move (_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = <A21 as FromToNativeWasmType>::from_native(move _45) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _53 = const true;
        _75 = const false;
        _47 = move (_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = <A22 as FromToNativeWasmType>::from_native(move _47) -> [return: bb22, unwind: bb30];
    }

    bb22: {
        _52 = const true;
        _74 = const false;
        _49 = move (_1.23: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
        _48 = <A23 as FromToNativeWasmType>::from_native(move _49) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _53 = const false;
        _52 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23)>>::call(_51, move _3) -> [return: bb24, unwind: bb28];
    }

    bb24: {
        _52 = const false;
        _53 = const false;
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb25, unwind: bb114];
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        drop(_46) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_52) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_44) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_53) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_42) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_54) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_40) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_55) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_38) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_56) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_36) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_57) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_34) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_58) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_32) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_59) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_30) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_60) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_28) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_61) -> [0: bb48, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_26) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_62) -> [0: bb50, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_24) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_63) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_22) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_64) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_20) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_65) -> [0: bb56, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_18) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_66) -> [0: bb58, otherwise: bb55];
    }

    bb57 (cleanup): {
        drop(_16) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_67) -> [0: bb60, otherwise: bb57];
    }

    bb59 (cleanup): {
        drop(_14) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_68) -> [0: bb62, otherwise: bb59];
    }

    bb61 (cleanup): {
        drop(_12) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_69) -> [0: bb64, otherwise: bb61];
    }

    bb63 (cleanup): {
        drop(_10) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_70) -> [0: bb66, otherwise: bb63];
    }

    bb65 (cleanup): {
        drop(_8) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_71) -> [0: bb68, otherwise: bb65];
    }

    bb67 (cleanup): {
        drop(_6) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_72) -> [0: bb70, otherwise: bb67];
    }

    bb69 (cleanup): {
        drop(_4) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_73) -> [0: bb114, otherwise: bb69];
    }

    bb71 (cleanup): {
        switchInt(_74) -> [0: bb26, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop((_1.23: <A23 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_75) -> [0: bb71, otherwise: bb74];
    }

    bb74 (cleanup): {
        drop((_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_76) -> [0: bb73, otherwise: bb76];
    }

    bb76 (cleanup): {
        drop((_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_77) -> [0: bb75, otherwise: bb78];
    }

    bb78 (cleanup): {
        drop((_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_78) -> [0: bb77, otherwise: bb80];
    }

    bb80 (cleanup): {
        drop((_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_79) -> [0: bb79, otherwise: bb82];
    }

    bb82 (cleanup): {
        drop((_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_80) -> [0: bb81, otherwise: bb84];
    }

    bb84 (cleanup): {
        drop((_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        switchInt(_81) -> [0: bb83, otherwise: bb86];
    }

    bb86 (cleanup): {
        drop((_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_82) -> [0: bb85, otherwise: bb88];
    }

    bb88 (cleanup): {
        drop((_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_83) -> [0: bb87, otherwise: bb90];
    }

    bb90 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_84) -> [0: bb89, otherwise: bb92];
    }

    bb92 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_85) -> [0: bb91, otherwise: bb94];
    }

    bb94 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        switchInt(_86) -> [0: bb93, otherwise: bb96];
    }

    bb96 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        switchInt(_87) -> [0: bb95, otherwise: bb98];
    }

    bb98 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        switchInt(_88) -> [0: bb97, otherwise: bb100];
    }

    bb100 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        switchInt(_89) -> [0: bb99, otherwise: bb102];
    }

    bb102 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        switchInt(_90) -> [0: bb101, otherwise: bb104];
    }

    bb104 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        switchInt(_91) -> [0: bb103, otherwise: bb106];
    }

    bb106 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        switchInt(_92) -> [0: bb105, otherwise: bb108];
    }

    bb108 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        switchInt(_93) -> [0: bb107, otherwise: bb110];
    }

    bb110 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        switchInt(_94) -> [0: bb109, otherwise: bb112];
    }

    bb112 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        switchInt(_95) -> [0: bb111, otherwise: bb113];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native, _22: <A21 as FromToNativeWasmType>::Native, _23: <A22 as FromToNativeWasmType>::Native, _24: <A23 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    debug A21 => _22;
    debug A22 => _23;
    debug A23 => _24;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _25: &Func;
    let _26: &Func;
    let _27: *const Func;
    let mut _28: *const ();
    let mut _30: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _31: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _32: &&Func;
    let mut _33: &&Env;
    let mut _34: isize;
    let mut _35: isize;
    let mut _38: !;
    let mut _39: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _40: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _42: !;
    let mut _44: isize;
    scope 1 {
        debug func => _25;
        let _29: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _29;
            let _36: Rets;
            let _37: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _41: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _36;
            }
            scope 5 {
                debug trap => _37;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _41;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _43: &();
    }

    bb0: {
        _43 = const _;
        _28 = &raw const (*_43);
        _27 = move _28 as *const Func (PtrToPtr);
        _26 = &(*_27);
        _25 = _26;
        _32 = &_25;
        _33 = &_1;
        _31 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _32, env: move _33, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21, A21: move _22, A22: move _23, A23: move _24 };
        _30 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _31);
        _29 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _30) -> [return: bb1, unwind continue];
    }

    bb1: {
        _35 = discriminant(_29);
        switchInt(move _35) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _34 = discriminant(((_29 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _34) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _41 = move ((_29 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _42 = resume_panic(move _41) -> unwind continue;
    }

    bb5: {
        _36 = move ((((_29 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _36) -> [return: bb6, unwind continue];
    }

    bb6: {
        _44 = discriminant(_29);
        switchInt(move _44) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _37 = move ((((_29 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _40 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _37) -> [return: bb8, unwind continue];
    }

    bb8: {
        _39 = move _40 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _38 = raise_user_trap(move _39) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A21 => (_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A22 => (_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A23 => (_1.24: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A21;
    let mut _45: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A22;
    let mut _47: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A23;
    let mut _49: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: &&Func;
    let mut _51: &Func;
    let mut _52: &&Env;
    let mut _53: &Env;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;

    bb0: {
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _76 = const true;
        _77 = const true;
        _78 = const true;
        _79 = const true;
        _80 = const true;
        _81 = const true;
        _82 = const true;
        _83 = const true;
        _84 = const true;
        _85 = const true;
        _86 = const true;
        _87 = const true;
        _88 = const true;
        _89 = const true;
        _90 = const true;
        _91 = const true;
        _92 = const true;
        _93 = const true;
        _94 = const true;
        _95 = const true;
        _96 = const true;
        _97 = const true;
        _50 = deref_copy (_1.0: &&Func);
        _51 = deref_copy (*_50);
        _52 = deref_copy (_1.1: &&Env);
        _53 = deref_copy (*_52);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb114];
    }

    bb1: {
        _75 = const true;
        _97 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb70];
    }

    bb2: {
        _74 = const true;
        _96 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb68];
    }

    bb3: {
        _73 = const true;
        _95 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb66];
    }

    bb4: {
        _72 = const true;
        _94 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb64];
    }

    bb5: {
        _71 = const true;
        _93 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb62];
    }

    bb6: {
        _70 = const true;
        _92 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb60];
    }

    bb7: {
        _69 = const true;
        _91 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb58];
    }

    bb8: {
        _68 = const true;
        _90 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb56];
    }

    bb9: {
        _67 = const true;
        _89 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb54];
    }

    bb10: {
        _66 = const true;
        _88 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb52];
    }

    bb11: {
        _65 = const true;
        _87 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb50];
    }

    bb12: {
        _64 = const true;
        _86 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb48];
    }

    bb13: {
        _63 = const true;
        _85 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb46];
    }

    bb14: {
        _62 = const true;
        _84 = const false;
        _33 = move (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb44];
    }

    bb15: {
        _61 = const true;
        _83 = const false;
        _35 = move (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb42];
    }

    bb16: {
        _60 = const true;
        _82 = const false;
        _37 = move (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb40];
    }

    bb17: {
        _59 = const true;
        _81 = const false;
        _39 = move (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb38];
    }

    bb18: {
        _58 = const true;
        _80 = const false;
        _41 = move (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb36];
    }

    bb19: {
        _57 = const true;
        _79 = const false;
        _43 = move (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb34];
    }

    bb20: {
        _56 = const true;
        _78 = const false;
        _45 = move (_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = <A21 as FromToNativeWasmType>::from_native(move _45) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _55 = const true;
        _77 = const false;
        _47 = move (_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = <A22 as FromToNativeWasmType>::from_native(move _47) -> [return: bb22, unwind: bb30];
    }

    bb22: {
        _54 = const true;
        _76 = const false;
        _49 = move (_1.24: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
        _48 = <A23 as FromToNativeWasmType>::from_native(move _49) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _3 = (_53, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23)>>::call(_51, move _3) -> [return: bb24, unwind: bb28];
    }

    bb24: {
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb25, unwind: bb114];
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        drop(_46) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_54) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_44) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_55) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_42) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_56) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_40) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_57) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_38) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_58) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_36) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_59) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_34) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_60) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_32) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_61) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_30) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_62) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_28) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_63) -> [0: bb48, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_26) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_64) -> [0: bb50, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_24) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_65) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_22) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_66) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_20) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_67) -> [0: bb56, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_18) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_68) -> [0: bb58, otherwise: bb55];
    }

    bb57 (cleanup): {
        drop(_16) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_69) -> [0: bb60, otherwise: bb57];
    }

    bb59 (cleanup): {
        drop(_14) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_70) -> [0: bb62, otherwise: bb59];
    }

    bb61 (cleanup): {
        drop(_12) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_71) -> [0: bb64, otherwise: bb61];
    }

    bb63 (cleanup): {
        drop(_10) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_72) -> [0: bb66, otherwise: bb63];
    }

    bb65 (cleanup): {
        drop(_8) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_73) -> [0: bb68, otherwise: bb65];
    }

    bb67 (cleanup): {
        drop(_6) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_74) -> [0: bb70, otherwise: bb67];
    }

    bb69 (cleanup): {
        drop(_4) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_75) -> [0: bb114, otherwise: bb69];
    }

    bb71 (cleanup): {
        switchInt(_76) -> [0: bb26, otherwise: bb72];
    }

    bb72 (cleanup): {
        drop((_1.24: <A23 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_77) -> [0: bb71, otherwise: bb74];
    }

    bb74 (cleanup): {
        drop((_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_78) -> [0: bb73, otherwise: bb76];
    }

    bb76 (cleanup): {
        drop((_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_79) -> [0: bb75, otherwise: bb78];
    }

    bb78 (cleanup): {
        drop((_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_80) -> [0: bb77, otherwise: bb80];
    }

    bb80 (cleanup): {
        drop((_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_81) -> [0: bb79, otherwise: bb82];
    }

    bb82 (cleanup): {
        drop((_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_82) -> [0: bb81, otherwise: bb84];
    }

    bb84 (cleanup): {
        drop((_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        switchInt(_83) -> [0: bb83, otherwise: bb86];
    }

    bb86 (cleanup): {
        drop((_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_84) -> [0: bb85, otherwise: bb88];
    }

    bb88 (cleanup): {
        drop((_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_85) -> [0: bb87, otherwise: bb90];
    }

    bb90 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_86) -> [0: bb89, otherwise: bb92];
    }

    bb92 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_87) -> [0: bb91, otherwise: bb94];
    }

    bb94 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        switchInt(_88) -> [0: bb93, otherwise: bb96];
    }

    bb96 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        switchInt(_89) -> [0: bb95, otherwise: bb98];
    }

    bb98 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        switchInt(_90) -> [0: bb97, otherwise: bb100];
    }

    bb100 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        switchInt(_91) -> [0: bb99, otherwise: bb102];
    }

    bb102 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        switchInt(_92) -> [0: bb101, otherwise: bb104];
    }

    bb104 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        switchInt(_93) -> [0: bb103, otherwise: bb106];
    }

    bb106 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        switchInt(_94) -> [0: bb105, otherwise: bb108];
    }

    bb108 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        switchInt(_95) -> [0: bb107, otherwise: bb110];
    }

    bb110 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        switchInt(_96) -> [0: bb109, otherwise: bb112];
    }

    bb112 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        switchInt(_97) -> [0: bb111, otherwise: bb113];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 24_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 24]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24);
    let mut _26: A1;
    let mut _27: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A2;
    let mut _29: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A3;
    let mut _31: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A4;
    let mut _33: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A5;
    let mut _35: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A6;
    let mut _37: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A7;
    let mut _39: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A8;
    let mut _41: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A9;
    let mut _43: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A10;
    let mut _45: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A11;
    let mut _47: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A12;
    let mut _49: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A13;
    let mut _51: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A14;
    let mut _53: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A15;
    let mut _55: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A16;
    let mut _57: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A17;
    let mut _59: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A18;
    let mut _61: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A19;
    let mut _63: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A20;
    let mut _65: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A21;
    let mut _67: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _68: A22;
    let mut _69: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _70: A23;
    let mut _71: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _72: A24;
    let mut _73: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
        debug A24 => _25;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
        let _16: i128;
        let _17: i128;
        let _18: i128;
        let _19: i128;
        let _20: i128;
        let _21: i128;
        let _22: i128;
        let _23: i128;
        let _24: i128;
        let _25: i128;
    }

    bb0: {
        _2 = _1[0 of 24];
        _3 = _1[1 of 24];
        _4 = _1[2 of 24];
        _5 = _1[3 of 24];
        _6 = _1[4 of 24];
        _7 = _1[5 of 24];
        _8 = _1[6 of 24];
        _9 = _1[7 of 24];
        _10 = _1[8 of 24];
        _11 = _1[9 of 24];
        _12 = _1[10 of 24];
        _13 = _1[11 of 24];
        _14 = _1[12 of 24];
        _15 = _1[13 of 24];
        _16 = _1[14 of 24];
        _17 = _1[15 of 24];
        _18 = _1[16 of 24];
        _19 = _1[17 of 24];
        _20 = _1[18 of 24];
        _21 = _1[19 of 24];
        _22 = _1[20 of 24];
        _23 = _1[21 of 24];
        _24 = _1[22 of 24];
        _25 = _1[23 of 24];
        _27 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _26 = <A1 as FromToNativeWasmType>::from_native(move _27) -> [return: bb2, unwind continue];
    }

    bb2: {
        _29 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb71];
    }

    bb3: {
        _28 = <A2 as FromToNativeWasmType>::from_native(move _29) -> [return: bb4, unwind: bb71];
    }

    bb4: {
        _31 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb70];
    }

    bb5: {
        _30 = <A3 as FromToNativeWasmType>::from_native(move _31) -> [return: bb6, unwind: bb70];
    }

    bb6: {
        _33 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb69];
    }

    bb7: {
        _32 = <A4 as FromToNativeWasmType>::from_native(move _33) -> [return: bb8, unwind: bb69];
    }

    bb8: {
        _35 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb68];
    }

    bb9: {
        _34 = <A5 as FromToNativeWasmType>::from_native(move _35) -> [return: bb10, unwind: bb68];
    }

    bb10: {
        _37 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb67];
    }

    bb11: {
        _36 = <A6 as FromToNativeWasmType>::from_native(move _37) -> [return: bb12, unwind: bb67];
    }

    bb12: {
        _39 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb66];
    }

    bb13: {
        _38 = <A7 as FromToNativeWasmType>::from_native(move _39) -> [return: bb14, unwind: bb66];
    }

    bb14: {
        _41 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb65];
    }

    bb15: {
        _40 = <A8 as FromToNativeWasmType>::from_native(move _41) -> [return: bb16, unwind: bb65];
    }

    bb16: {
        _43 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb64];
    }

    bb17: {
        _42 = <A9 as FromToNativeWasmType>::from_native(move _43) -> [return: bb18, unwind: bb64];
    }

    bb18: {
        _45 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb63];
    }

    bb19: {
        _44 = <A10 as FromToNativeWasmType>::from_native(move _45) -> [return: bb20, unwind: bb63];
    }

    bb20: {
        _47 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb62];
    }

    bb21: {
        _46 = <A11 as FromToNativeWasmType>::from_native(move _47) -> [return: bb22, unwind: bb62];
    }

    bb22: {
        _49 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb61];
    }

    bb23: {
        _48 = <A12 as FromToNativeWasmType>::from_native(move _49) -> [return: bb24, unwind: bb61];
    }

    bb24: {
        _51 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb60];
    }

    bb25: {
        _50 = <A13 as FromToNativeWasmType>::from_native(move _51) -> [return: bb26, unwind: bb60];
    }

    bb26: {
        _53 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb59];
    }

    bb27: {
        _52 = <A14 as FromToNativeWasmType>::from_native(move _53) -> [return: bb28, unwind: bb59];
    }

    bb28: {
        _55 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_16) -> [return: bb29, unwind: bb58];
    }

    bb29: {
        _54 = <A15 as FromToNativeWasmType>::from_native(move _55) -> [return: bb30, unwind: bb58];
    }

    bb30: {
        _57 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_17) -> [return: bb31, unwind: bb57];
    }

    bb31: {
        _56 = <A16 as FromToNativeWasmType>::from_native(move _57) -> [return: bb32, unwind: bb57];
    }

    bb32: {
        _59 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_18) -> [return: bb33, unwind: bb56];
    }

    bb33: {
        _58 = <A17 as FromToNativeWasmType>::from_native(move _59) -> [return: bb34, unwind: bb56];
    }

    bb34: {
        _61 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_19) -> [return: bb35, unwind: bb55];
    }

    bb35: {
        _60 = <A18 as FromToNativeWasmType>::from_native(move _61) -> [return: bb36, unwind: bb55];
    }

    bb36: {
        _63 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_20) -> [return: bb37, unwind: bb54];
    }

    bb37: {
        _62 = <A19 as FromToNativeWasmType>::from_native(move _63) -> [return: bb38, unwind: bb54];
    }

    bb38: {
        _65 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_21) -> [return: bb39, unwind: bb53];
    }

    bb39: {
        _64 = <A20 as FromToNativeWasmType>::from_native(move _65) -> [return: bb40, unwind: bb53];
    }

    bb40: {
        _67 = <<A21 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_22) -> [return: bb41, unwind: bb52];
    }

    bb41: {
        _66 = <A21 as FromToNativeWasmType>::from_native(move _67) -> [return: bb42, unwind: bb52];
    }

    bb42: {
        _69 = <<A22 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_23) -> [return: bb43, unwind: bb51];
    }

    bb43: {
        _68 = <A22 as FromToNativeWasmType>::from_native(move _69) -> [return: bb44, unwind: bb51];
    }

    bb44: {
        _71 = <<A23 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_24) -> [return: bb45, unwind: bb50];
    }

    bb45: {
        _70 = <A23 as FromToNativeWasmType>::from_native(move _71) -> [return: bb46, unwind: bb50];
    }

    bb46: {
        _73 = <<A24 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_25) -> [return: bb47, unwind: bb49];
    }

    bb47: {
        _72 = <A24 as FromToNativeWasmType>::from_native(move _73) -> [return: bb48, unwind: bb49];
    }

    bb48: {
        _0 = (move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56, move _58, move _60, move _62, move _64, move _66, move _68, move _70, move _72);
        return;
    }

    bb49 (cleanup): {
        drop(_70) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_68) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_66) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_64) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_62) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_60) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_58) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_56) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_54) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_52) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_50) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_48) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_46) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_44) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_42) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_40) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_38) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_36) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_34) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_32) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_30) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_28) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_26) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 24]>;
    let mut _4: std::result::Result<[i128; 24], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 24];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 24]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 24], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 24]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24)) -> [i128; 24] {
    debug self => _1;
    let mut _0: [i128; 24];
    let mut _26: i128;
    let mut _27: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: i128;
    let mut _29: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A2;
    let mut _31: i128;
    let mut _32: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A3;
    let mut _34: i128;
    let mut _35: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A4;
    let mut _37: i128;
    let mut _38: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A5;
    let mut _40: i128;
    let mut _41: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A6;
    let mut _43: i128;
    let mut _44: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A7;
    let mut _46: i128;
    let mut _47: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A8;
    let mut _49: i128;
    let mut _50: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A9;
    let mut _52: i128;
    let mut _53: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A10;
    let mut _55: i128;
    let mut _56: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A11;
    let mut _58: i128;
    let mut _59: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A12;
    let mut _61: i128;
    let mut _62: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A13;
    let mut _64: i128;
    let mut _65: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A14;
    let mut _67: i128;
    let mut _68: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _69: A15;
    let mut _70: i128;
    let mut _71: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _72: A16;
    let mut _73: i128;
    let mut _74: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _75: A17;
    let mut _76: i128;
    let mut _77: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _78: A18;
    let mut _79: i128;
    let mut _80: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _81: A19;
    let mut _82: i128;
    let mut _83: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _84: A20;
    let mut _85: i128;
    let mut _86: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _87: A21;
    let mut _88: i128;
    let mut _89: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _90: A22;
    let mut _91: i128;
    let mut _92: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _93: A23;
    let mut _94: i128;
    let mut _95: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _96: A24;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
        debug A24 => _25;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
        let _16: A15;
        let _17: A16;
        let _18: A17;
        let _19: A18;
        let _20: A19;
        let _21: A20;
        let _22: A21;
        let _23: A22;
        let _24: A23;
        let _25: A24;
    }

    bb0: {
        _119 = const false;
        _118 = const false;
        _117 = const false;
        _116 = const false;
        _115 = const false;
        _114 = const false;
        _113 = const false;
        _112 = const false;
        _111 = const false;
        _110 = const false;
        _109 = const false;
        _108 = const false;
        _107 = const false;
        _106 = const false;
        _105 = const false;
        _104 = const false;
        _103 = const false;
        _102 = const false;
        _101 = const false;
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _2 = move (_1.0: A1);
        _119 = const true;
        _3 = move (_1.1: A2);
        _118 = const true;
        _4 = move (_1.2: A3);
        _117 = const true;
        _5 = move (_1.3: A4);
        _116 = const true;
        _6 = move (_1.4: A5);
        _115 = const true;
        _7 = move (_1.5: A6);
        _114 = const true;
        _8 = move (_1.6: A7);
        _113 = const true;
        _9 = move (_1.7: A8);
        _112 = const true;
        _10 = move (_1.8: A9);
        _111 = const true;
        _11 = move (_1.9: A10);
        _110 = const true;
        _12 = move (_1.10: A11);
        _109 = const true;
        _13 = move (_1.11: A12);
        _108 = const true;
        _14 = move (_1.12: A13);
        _107 = const true;
        _15 = move (_1.13: A14);
        _106 = const true;
        _16 = move (_1.14: A15);
        _105 = const true;
        _17 = move (_1.15: A16);
        _104 = const true;
        _18 = move (_1.16: A17);
        _103 = const true;
        _19 = move (_1.17: A18);
        _102 = const true;
        _20 = move (_1.18: A19);
        _101 = const true;
        _21 = move (_1.19: A20);
        _100 = const true;
        _22 = move (_1.20: A21);
        _99 = const true;
        _23 = move (_1.21: A22);
        _98 = const true;
        _24 = move (_1.22: A23);
        _97 = const true;
        _25 = move (_1.23: A24);
        _27 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb73];
    }

    bb1: {
        _26 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _27) -> [return: bb2, unwind: bb73];
    }

    bb2: {
        _119 = const false;
        _30 = move _3;
        _29 = <A2 as FromToNativeWasmType>::to_native(move _30) -> [return: bb3, unwind: bb73];
    }

    bb3: {
        _28 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _29) -> [return: bb4, unwind: bb73];
    }

    bb4: {
        _118 = const false;
        _33 = move _4;
        _32 = <A3 as FromToNativeWasmType>::to_native(move _33) -> [return: bb5, unwind: bb73];
    }

    bb5: {
        _31 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _32) -> [return: bb6, unwind: bb73];
    }

    bb6: {
        _117 = const false;
        _36 = move _5;
        _35 = <A4 as FromToNativeWasmType>::to_native(move _36) -> [return: bb7, unwind: bb73];
    }

    bb7: {
        _34 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _35) -> [return: bb8, unwind: bb73];
    }

    bb8: {
        _116 = const false;
        _39 = move _6;
        _38 = <A5 as FromToNativeWasmType>::to_native(move _39) -> [return: bb9, unwind: bb73];
    }

    bb9: {
        _37 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _38) -> [return: bb10, unwind: bb73];
    }

    bb10: {
        _115 = const false;
        _42 = move _7;
        _41 = <A6 as FromToNativeWasmType>::to_native(move _42) -> [return: bb11, unwind: bb73];
    }

    bb11: {
        _40 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _41) -> [return: bb12, unwind: bb73];
    }

    bb12: {
        _114 = const false;
        _45 = move _8;
        _44 = <A7 as FromToNativeWasmType>::to_native(move _45) -> [return: bb13, unwind: bb73];
    }

    bb13: {
        _43 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _44) -> [return: bb14, unwind: bb73];
    }

    bb14: {
        _113 = const false;
        _48 = move _9;
        _47 = <A8 as FromToNativeWasmType>::to_native(move _48) -> [return: bb15, unwind: bb73];
    }

    bb15: {
        _46 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _47) -> [return: bb16, unwind: bb73];
    }

    bb16: {
        _112 = const false;
        _51 = move _10;
        _50 = <A9 as FromToNativeWasmType>::to_native(move _51) -> [return: bb17, unwind: bb73];
    }

    bb17: {
        _49 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _50) -> [return: bb18, unwind: bb73];
    }

    bb18: {
        _111 = const false;
        _54 = move _11;
        _53 = <A10 as FromToNativeWasmType>::to_native(move _54) -> [return: bb19, unwind: bb73];
    }

    bb19: {
        _52 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _53) -> [return: bb20, unwind: bb73];
    }

    bb20: {
        _110 = const false;
        _57 = move _12;
        _56 = <A11 as FromToNativeWasmType>::to_native(move _57) -> [return: bb21, unwind: bb73];
    }

    bb21: {
        _55 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _56) -> [return: bb22, unwind: bb73];
    }

    bb22: {
        _109 = const false;
        _60 = move _13;
        _59 = <A12 as FromToNativeWasmType>::to_native(move _60) -> [return: bb23, unwind: bb73];
    }

    bb23: {
        _58 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _59) -> [return: bb24, unwind: bb73];
    }

    bb24: {
        _108 = const false;
        _63 = move _14;
        _62 = <A13 as FromToNativeWasmType>::to_native(move _63) -> [return: bb25, unwind: bb73];
    }

    bb25: {
        _61 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _62) -> [return: bb26, unwind: bb73];
    }

    bb26: {
        _107 = const false;
        _66 = move _15;
        _65 = <A14 as FromToNativeWasmType>::to_native(move _66) -> [return: bb27, unwind: bb73];
    }

    bb27: {
        _64 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _65) -> [return: bb28, unwind: bb73];
    }

    bb28: {
        _106 = const false;
        _69 = move _16;
        _68 = <A15 as FromToNativeWasmType>::to_native(move _69) -> [return: bb29, unwind: bb73];
    }

    bb29: {
        _67 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _68) -> [return: bb30, unwind: bb73];
    }

    bb30: {
        _105 = const false;
        _72 = move _17;
        _71 = <A16 as FromToNativeWasmType>::to_native(move _72) -> [return: bb31, unwind: bb73];
    }

    bb31: {
        _70 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _71) -> [return: bb32, unwind: bb73];
    }

    bb32: {
        _104 = const false;
        _75 = move _18;
        _74 = <A17 as FromToNativeWasmType>::to_native(move _75) -> [return: bb33, unwind: bb73];
    }

    bb33: {
        _73 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _74) -> [return: bb34, unwind: bb73];
    }

    bb34: {
        _103 = const false;
        _78 = move _19;
        _77 = <A18 as FromToNativeWasmType>::to_native(move _78) -> [return: bb35, unwind: bb73];
    }

    bb35: {
        _76 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _77) -> [return: bb36, unwind: bb73];
    }

    bb36: {
        _102 = const false;
        _81 = move _20;
        _80 = <A19 as FromToNativeWasmType>::to_native(move _81) -> [return: bb37, unwind: bb73];
    }

    bb37: {
        _79 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _80) -> [return: bb38, unwind: bb73];
    }

    bb38: {
        _101 = const false;
        _84 = move _21;
        _83 = <A20 as FromToNativeWasmType>::to_native(move _84) -> [return: bb39, unwind: bb73];
    }

    bb39: {
        _82 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _83) -> [return: bb40, unwind: bb73];
    }

    bb40: {
        _100 = const false;
        _87 = move _22;
        _86 = <A21 as FromToNativeWasmType>::to_native(move _87) -> [return: bb41, unwind: bb73];
    }

    bb41: {
        _85 = <<A21 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _86) -> [return: bb42, unwind: bb73];
    }

    bb42: {
        _99 = const false;
        _90 = move _23;
        _89 = <A22 as FromToNativeWasmType>::to_native(move _90) -> [return: bb43, unwind: bb73];
    }

    bb43: {
        _88 = <<A22 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _89) -> [return: bb44, unwind: bb73];
    }

    bb44: {
        _98 = const false;
        _93 = move _24;
        _92 = <A23 as FromToNativeWasmType>::to_native(move _93) -> [return: bb45, unwind: bb73];
    }

    bb45: {
        _91 = <<A23 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _92) -> [return: bb46, unwind: bb73];
    }

    bb46: {
        _97 = const false;
        _96 = move _25;
        _95 = <A24 as FromToNativeWasmType>::to_native(move _96) -> [return: bb47, unwind: bb73];
    }

    bb47: {
        _94 = <<A24 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _95) -> [return: bb48, unwind: bb73];
    }

    bb48: {
        _0 = [move _26, move _28, move _31, move _34, move _37, move _40, move _43, move _46, move _49, move _52, move _55, move _58, move _61, move _64, move _67, move _70, move _73, move _76, move _79, move _82, move _85, move _88, move _91, move _94];
        _97 = const false;
        _98 = const false;
        _99 = const false;
        _100 = const false;
        _101 = const false;
        _102 = const false;
        _103 = const false;
        _104 = const false;
        _105 = const false;
        _106 = const false;
        _107 = const false;
        _108 = const false;
        _109 = const false;
        _110 = const false;
        _111 = const false;
        _112 = const false;
        _113 = const false;
        _114 = const false;
        _115 = const false;
        _116 = const false;
        _117 = const false;
        _118 = const false;
        _119 = const false;
        return;
    }

    bb49 (cleanup): {
        switchInt(_98) -> [0: bb50, otherwise: bb74];
    }

    bb50 (cleanup): {
        switchInt(_99) -> [0: bb51, otherwise: bb75];
    }

    bb51 (cleanup): {
        switchInt(_100) -> [0: bb52, otherwise: bb76];
    }

    bb52 (cleanup): {
        switchInt(_101) -> [0: bb53, otherwise: bb77];
    }

    bb53 (cleanup): {
        switchInt(_102) -> [0: bb54, otherwise: bb78];
    }

    bb54 (cleanup): {
        switchInt(_103) -> [0: bb55, otherwise: bb79];
    }

    bb55 (cleanup): {
        switchInt(_104) -> [0: bb56, otherwise: bb80];
    }

    bb56 (cleanup): {
        switchInt(_105) -> [0: bb57, otherwise: bb81];
    }

    bb57 (cleanup): {
        switchInt(_106) -> [0: bb58, otherwise: bb82];
    }

    bb58 (cleanup): {
        switchInt(_107) -> [0: bb59, otherwise: bb83];
    }

    bb59 (cleanup): {
        switchInt(_108) -> [0: bb60, otherwise: bb84];
    }

    bb60 (cleanup): {
        switchInt(_109) -> [0: bb61, otherwise: bb85];
    }

    bb61 (cleanup): {
        switchInt(_110) -> [0: bb62, otherwise: bb86];
    }

    bb62 (cleanup): {
        switchInt(_111) -> [0: bb63, otherwise: bb87];
    }

    bb63 (cleanup): {
        switchInt(_112) -> [0: bb64, otherwise: bb88];
    }

    bb64 (cleanup): {
        switchInt(_113) -> [0: bb65, otherwise: bb89];
    }

    bb65 (cleanup): {
        switchInt(_114) -> [0: bb66, otherwise: bb90];
    }

    bb66 (cleanup): {
        switchInt(_115) -> [0: bb67, otherwise: bb91];
    }

    bb67 (cleanup): {
        switchInt(_116) -> [0: bb68, otherwise: bb92];
    }

    bb68 (cleanup): {
        switchInt(_117) -> [0: bb69, otherwise: bb93];
    }

    bb69 (cleanup): {
        switchInt(_118) -> [0: bb70, otherwise: bb94];
    }

    bb70 (cleanup): {
        switchInt(_119) -> [0: bb71, otherwise: bb95];
    }

    bb71 (cleanup): {
        resume;
    }

    bb72 (cleanup): {
        drop(_25) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_97) -> [0: bb49, otherwise: bb72];
    }

    bb74 (cleanup): {
        drop(_24) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_23) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_22) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_21) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_20) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_19) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_18) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_17) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_16) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_15) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_14) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_13) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_12) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_11) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_10) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_9) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_8) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_7) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_6) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_5) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_4) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_3) -> [return: bb71, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 24] {
    let mut _0: [i128; 24];

    bb0: {
        _0 = [const 0_i128; 24];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 24_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S24<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24);
    let mut _26: A1;
    let mut _27: A2;
    let mut _28: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A3;
    let mut _30: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A4;
    let mut _32: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A5;
    let mut _34: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A6;
    let mut _36: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A7;
    let mut _38: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A8;
    let mut _40: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A9;
    let mut _42: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A10;
    let mut _44: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A11;
    let mut _46: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A12;
    let mut _48: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A13;
    let mut _50: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A14;
    let mut _52: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A15;
    let mut _54: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A16;
    let mut _56: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A17;
    let mut _58: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A18;
    let mut _60: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A19;
    let mut _62: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A20;
    let mut _64: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A21;
    let mut _66: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _67: A22;
    let mut _68: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _69: A23;
    let mut _70: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _71: A24;
    let mut _72: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
        debug A24 => _25;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
        let _16: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
        let _17: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
        let _18: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
        let _19: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
        let _20: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
        let _21: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
        let _22: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
        let _23: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
        let _24: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
        let _25: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _95 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _94 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _93 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _92 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _91 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _90 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _89 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _88 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _87 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _86 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _85 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _84 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _83 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _82 = const true;
        _16 = move (_1.14: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _81 = const true;
        _17 = move (_1.15: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _80 = const true;
        _18 = move (_1.16: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _79 = const true;
        _19 = move (_1.17: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _78 = const true;
        _20 = move (_1.18: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _77 = const true;
        _21 = move (_1.19: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _76 = const true;
        _22 = move (_1.20: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _75 = const true;
        _23 = move (_1.21: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _74 = const true;
        _24 = move (_1.22: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
        _73 = const true;
        _25 = move (_1.23: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb72];
    }

    bb1: {
        _95 = const false;
        _28 = move _3;
        _27 = <A2 as FromToNativeWasmType>::from_native(move _28) -> [return: bb2, unwind: bb47];
    }

    bb2: {
        _94 = const false;
        _30 = move _4;
        _29 = <A3 as FromToNativeWasmType>::from_native(move _30) -> [return: bb3, unwind: bb46];
    }

    bb3: {
        _93 = const false;
        _32 = move _5;
        _31 = <A4 as FromToNativeWasmType>::from_native(move _32) -> [return: bb4, unwind: bb45];
    }

    bb4: {
        _92 = const false;
        _34 = move _6;
        _33 = <A5 as FromToNativeWasmType>::from_native(move _34) -> [return: bb5, unwind: bb44];
    }

    bb5: {
        _91 = const false;
        _36 = move _7;
        _35 = <A6 as FromToNativeWasmType>::from_native(move _36) -> [return: bb6, unwind: bb43];
    }

    bb6: {
        _90 = const false;
        _38 = move _8;
        _37 = <A7 as FromToNativeWasmType>::from_native(move _38) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        _89 = const false;
        _40 = move _9;
        _39 = <A8 as FromToNativeWasmType>::from_native(move _40) -> [return: bb8, unwind: bb41];
    }

    bb8: {
        _88 = const false;
        _42 = move _10;
        _41 = <A9 as FromToNativeWasmType>::from_native(move _42) -> [return: bb9, unwind: bb40];
    }

    bb9: {
        _87 = const false;
        _44 = move _11;
        _43 = <A10 as FromToNativeWasmType>::from_native(move _44) -> [return: bb10, unwind: bb39];
    }

    bb10: {
        _86 = const false;
        _46 = move _12;
        _45 = <A11 as FromToNativeWasmType>::from_native(move _46) -> [return: bb11, unwind: bb38];
    }

    bb11: {
        _85 = const false;
        _48 = move _13;
        _47 = <A12 as FromToNativeWasmType>::from_native(move _48) -> [return: bb12, unwind: bb37];
    }

    bb12: {
        _84 = const false;
        _50 = move _14;
        _49 = <A13 as FromToNativeWasmType>::from_native(move _50) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        _83 = const false;
        _52 = move _15;
        _51 = <A14 as FromToNativeWasmType>::from_native(move _52) -> [return: bb14, unwind: bb35];
    }

    bb14: {
        _82 = const false;
        _54 = move _16;
        _53 = <A15 as FromToNativeWasmType>::from_native(move _54) -> [return: bb15, unwind: bb34];
    }

    bb15: {
        _81 = const false;
        _56 = move _17;
        _55 = <A16 as FromToNativeWasmType>::from_native(move _56) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        _80 = const false;
        _58 = move _18;
        _57 = <A17 as FromToNativeWasmType>::from_native(move _58) -> [return: bb17, unwind: bb32];
    }

    bb17: {
        _79 = const false;
        _60 = move _19;
        _59 = <A18 as FromToNativeWasmType>::from_native(move _60) -> [return: bb18, unwind: bb31];
    }

    bb18: {
        _78 = const false;
        _62 = move _20;
        _61 = <A19 as FromToNativeWasmType>::from_native(move _62) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _77 = const false;
        _64 = move _21;
        _63 = <A20 as FromToNativeWasmType>::from_native(move _64) -> [return: bb20, unwind: bb29];
    }

    bb20: {
        _76 = const false;
        _66 = move _22;
        _65 = <A21 as FromToNativeWasmType>::from_native(move _66) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        _75 = const false;
        _68 = move _23;
        _67 = <A22 as FromToNativeWasmType>::from_native(move _68) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        _74 = const false;
        _70 = move _24;
        _69 = <A23 as FromToNativeWasmType>::from_native(move _70) -> [return: bb23, unwind: bb26];
    }

    bb23: {
        _73 = const false;
        _72 = move _25;
        _71 = <A24 as FromToNativeWasmType>::from_native(move _72) -> [return: bb24, unwind: bb25];
    }

    bb24: {
        _0 = (move _26, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57, move _59, move _61, move _63, move _65, move _67, move _69, move _71);
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        _88 = const false;
        _89 = const false;
        _90 = const false;
        _91 = const false;
        _92 = const false;
        _93 = const false;
        _94 = const false;
        _95 = const false;
        return;
    }

    bb25 (cleanup): {
        drop(_69) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_67) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_65) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_63) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_61) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_59) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_57) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_55) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_53) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_51) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_49) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_47) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_45) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_43) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_41) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_39) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_37) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_35) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_33) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_31) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_29) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_27) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_26) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_74) -> [0: bb49, otherwise: bb73];
    }

    bb49 (cleanup): {
        switchInt(_75) -> [0: bb50, otherwise: bb74];
    }

    bb50 (cleanup): {
        switchInt(_76) -> [0: bb51, otherwise: bb75];
    }

    bb51 (cleanup): {
        switchInt(_77) -> [0: bb52, otherwise: bb76];
    }

    bb52 (cleanup): {
        switchInt(_78) -> [0: bb53, otherwise: bb77];
    }

    bb53 (cleanup): {
        switchInt(_79) -> [0: bb54, otherwise: bb78];
    }

    bb54 (cleanup): {
        switchInt(_80) -> [0: bb55, otherwise: bb79];
    }

    bb55 (cleanup): {
        switchInt(_81) -> [0: bb56, otherwise: bb80];
    }

    bb56 (cleanup): {
        switchInt(_82) -> [0: bb57, otherwise: bb81];
    }

    bb57 (cleanup): {
        switchInt(_83) -> [0: bb58, otherwise: bb82];
    }

    bb58 (cleanup): {
        switchInt(_84) -> [0: bb59, otherwise: bb83];
    }

    bb59 (cleanup): {
        switchInt(_85) -> [0: bb60, otherwise: bb84];
    }

    bb60 (cleanup): {
        switchInt(_86) -> [0: bb61, otherwise: bb85];
    }

    bb61 (cleanup): {
        switchInt(_87) -> [0: bb62, otherwise: bb86];
    }

    bb62 (cleanup): {
        switchInt(_88) -> [0: bb63, otherwise: bb87];
    }

    bb63 (cleanup): {
        switchInt(_89) -> [0: bb64, otherwise: bb88];
    }

    bb64 (cleanup): {
        switchInt(_90) -> [0: bb65, otherwise: bb89];
    }

    bb65 (cleanup): {
        switchInt(_91) -> [0: bb66, otherwise: bb90];
    }

    bb66 (cleanup): {
        switchInt(_92) -> [0: bb67, otherwise: bb91];
    }

    bb67 (cleanup): {
        switchInt(_93) -> [0: bb68, otherwise: bb92];
    }

    bb68 (cleanup): {
        switchInt(_94) -> [0: bb69, otherwise: bb93];
    }

    bb69 (cleanup): {
        switchInt(_95) -> [0: bb70, otherwise: bb94];
    }

    bb70 (cleanup): {
        resume;
    }

    bb71 (cleanup): {
        drop(_25) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_73) -> [0: bb48, otherwise: bb71];
    }

    bb73 (cleanup): {
        drop(_24) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_23) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_22) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_21) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_20) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_19) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_18) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_17) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_16) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_15) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_14) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_13) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_12) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_11) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_10) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_9) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_8) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_7) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_6) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_5) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_4) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_3) -> [return: bb70, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24)) -> S24<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24> {
    debug self => _1;
    let mut _0: externals::function::inner::S24<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let _16: A15;
    let _17: A16;
    let _18: A17;
    let _19: A18;
    let _20: A19;
    let _21: A20;
    let _22: A21;
    let _23: A22;
    let _24: A23;
    let _25: A24;
    let mut _26: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A2;
    let mut _29: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A3;
    let mut _31: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A4;
    let mut _33: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A5;
    let mut _35: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A6;
    let mut _37: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A7;
    let mut _39: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A8;
    let mut _41: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A9;
    let mut _43: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A10;
    let mut _45: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A11;
    let mut _47: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A12;
    let mut _49: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A13;
    let mut _51: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A14;
    let mut _53: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A15;
    let mut _55: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A16;
    let mut _57: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A17;
    let mut _59: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A18;
    let mut _61: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A19;
    let mut _63: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A20;
    let mut _65: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A21;
    let mut _67: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _68: A22;
    let mut _69: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _70: A23;
    let mut _71: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _72: A24;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
        debug A24 => _25;
    }

    bb0: {
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _2 = move (_1.0: A1);
        _95 = const true;
        _3 = move (_1.1: A2);
        _94 = const true;
        _4 = move (_1.2: A3);
        _93 = const true;
        _5 = move (_1.3: A4);
        _92 = const true;
        _6 = move (_1.4: A5);
        _91 = const true;
        _7 = move (_1.5: A6);
        _90 = const true;
        _8 = move (_1.6: A7);
        _89 = const true;
        _9 = move (_1.7: A8);
        _88 = const true;
        _10 = move (_1.8: A9);
        _87 = const true;
        _11 = move (_1.9: A10);
        _86 = const true;
        _12 = move (_1.10: A11);
        _85 = const true;
        _13 = move (_1.11: A12);
        _84 = const true;
        _14 = move (_1.12: A13);
        _83 = const true;
        _15 = move (_1.13: A14);
        _82 = const true;
        _16 = move (_1.14: A15);
        _81 = const true;
        _17 = move (_1.15: A16);
        _80 = const true;
        _18 = move (_1.16: A17);
        _79 = const true;
        _19 = move (_1.17: A18);
        _78 = const true;
        _20 = move (_1.18: A19);
        _77 = const true;
        _21 = move (_1.19: A20);
        _76 = const true;
        _22 = move (_1.20: A21);
        _75 = const true;
        _23 = move (_1.21: A22);
        _74 = const true;
        _24 = move (_1.22: A23);
        _73 = const true;
        _25 = move (_1.23: A24);
        _26 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb72];
    }

    bb1: {
        _95 = const false;
        _28 = move _3;
        _27 = <A2 as FromToNativeWasmType>::to_native(move _28) -> [return: bb2, unwind: bb47];
    }

    bb2: {
        _94 = const false;
        _30 = move _4;
        _29 = <A3 as FromToNativeWasmType>::to_native(move _30) -> [return: bb3, unwind: bb46];
    }

    bb3: {
        _93 = const false;
        _32 = move _5;
        _31 = <A4 as FromToNativeWasmType>::to_native(move _32) -> [return: bb4, unwind: bb45];
    }

    bb4: {
        _92 = const false;
        _34 = move _6;
        _33 = <A5 as FromToNativeWasmType>::to_native(move _34) -> [return: bb5, unwind: bb44];
    }

    bb5: {
        _91 = const false;
        _36 = move _7;
        _35 = <A6 as FromToNativeWasmType>::to_native(move _36) -> [return: bb6, unwind: bb43];
    }

    bb6: {
        _90 = const false;
        _38 = move _8;
        _37 = <A7 as FromToNativeWasmType>::to_native(move _38) -> [return: bb7, unwind: bb42];
    }

    bb7: {
        _89 = const false;
        _40 = move _9;
        _39 = <A8 as FromToNativeWasmType>::to_native(move _40) -> [return: bb8, unwind: bb41];
    }

    bb8: {
        _88 = const false;
        _42 = move _10;
        _41 = <A9 as FromToNativeWasmType>::to_native(move _42) -> [return: bb9, unwind: bb40];
    }

    bb9: {
        _87 = const false;
        _44 = move _11;
        _43 = <A10 as FromToNativeWasmType>::to_native(move _44) -> [return: bb10, unwind: bb39];
    }

    bb10: {
        _86 = const false;
        _46 = move _12;
        _45 = <A11 as FromToNativeWasmType>::to_native(move _46) -> [return: bb11, unwind: bb38];
    }

    bb11: {
        _85 = const false;
        _48 = move _13;
        _47 = <A12 as FromToNativeWasmType>::to_native(move _48) -> [return: bb12, unwind: bb37];
    }

    bb12: {
        _84 = const false;
        _50 = move _14;
        _49 = <A13 as FromToNativeWasmType>::to_native(move _50) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        _83 = const false;
        _52 = move _15;
        _51 = <A14 as FromToNativeWasmType>::to_native(move _52) -> [return: bb14, unwind: bb35];
    }

    bb14: {
        _82 = const false;
        _54 = move _16;
        _53 = <A15 as FromToNativeWasmType>::to_native(move _54) -> [return: bb15, unwind: bb34];
    }

    bb15: {
        _81 = const false;
        _56 = move _17;
        _55 = <A16 as FromToNativeWasmType>::to_native(move _56) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        _80 = const false;
        _58 = move _18;
        _57 = <A17 as FromToNativeWasmType>::to_native(move _58) -> [return: bb17, unwind: bb32];
    }

    bb17: {
        _79 = const false;
        _60 = move _19;
        _59 = <A18 as FromToNativeWasmType>::to_native(move _60) -> [return: bb18, unwind: bb31];
    }

    bb18: {
        _78 = const false;
        _62 = move _20;
        _61 = <A19 as FromToNativeWasmType>::to_native(move _62) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _77 = const false;
        _64 = move _21;
        _63 = <A20 as FromToNativeWasmType>::to_native(move _64) -> [return: bb20, unwind: bb29];
    }

    bb20: {
        _76 = const false;
        _66 = move _22;
        _65 = <A21 as FromToNativeWasmType>::to_native(move _66) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        _75 = const false;
        _68 = move _23;
        _67 = <A22 as FromToNativeWasmType>::to_native(move _68) -> [return: bb22, unwind: bb27];
    }

    bb22: {
        _74 = const false;
        _70 = move _24;
        _69 = <A23 as FromToNativeWasmType>::to_native(move _70) -> [return: bb23, unwind: bb26];
    }

    bb23: {
        _73 = const false;
        _72 = move _25;
        _71 = <A24 as FromToNativeWasmType>::to_native(move _72) -> [return: bb24, unwind: bb25];
    }

    bb24: {
        _0 = S24::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24>(move _26, move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57, move _59, move _61, move _63, move _65, move _67, move _69, move _71);
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        _88 = const false;
        _89 = const false;
        _90 = const false;
        _91 = const false;
        _92 = const false;
        _93 = const false;
        _94 = const false;
        _95 = const false;
        return;
    }

    bb25 (cleanup): {
        drop(_69) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_67) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_65) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_63) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_61) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_59) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_57) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_55) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_53) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_51) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_49) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_47) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_45) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_43) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_41) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_39) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_37) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_35) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_33) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_31) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_29) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_27) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_26) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_74) -> [0: bb49, otherwise: bb73];
    }

    bb49 (cleanup): {
        switchInt(_75) -> [0: bb50, otherwise: bb74];
    }

    bb50 (cleanup): {
        switchInt(_76) -> [0: bb51, otherwise: bb75];
    }

    bb51 (cleanup): {
        switchInt(_77) -> [0: bb52, otherwise: bb76];
    }

    bb52 (cleanup): {
        switchInt(_78) -> [0: bb53, otherwise: bb77];
    }

    bb53 (cleanup): {
        switchInt(_79) -> [0: bb54, otherwise: bb78];
    }

    bb54 (cleanup): {
        switchInt(_80) -> [0: bb55, otherwise: bb79];
    }

    bb55 (cleanup): {
        switchInt(_81) -> [0: bb56, otherwise: bb80];
    }

    bb56 (cleanup): {
        switchInt(_82) -> [0: bb57, otherwise: bb81];
    }

    bb57 (cleanup): {
        switchInt(_83) -> [0: bb58, otherwise: bb82];
    }

    bb58 (cleanup): {
        switchInt(_84) -> [0: bb59, otherwise: bb83];
    }

    bb59 (cleanup): {
        switchInt(_85) -> [0: bb60, otherwise: bb84];
    }

    bb60 (cleanup): {
        switchInt(_86) -> [0: bb61, otherwise: bb85];
    }

    bb61 (cleanup): {
        switchInt(_87) -> [0: bb62, otherwise: bb86];
    }

    bb62 (cleanup): {
        switchInt(_88) -> [0: bb63, otherwise: bb87];
    }

    bb63 (cleanup): {
        switchInt(_89) -> [0: bb64, otherwise: bb88];
    }

    bb64 (cleanup): {
        switchInt(_90) -> [0: bb65, otherwise: bb89];
    }

    bb65 (cleanup): {
        switchInt(_91) -> [0: bb66, otherwise: bb90];
    }

    bb66 (cleanup): {
        switchInt(_92) -> [0: bb67, otherwise: bb91];
    }

    bb67 (cleanup): {
        switchInt(_93) -> [0: bb68, otherwise: bb92];
    }

    bb68 (cleanup): {
        switchInt(_94) -> [0: bb69, otherwise: bb93];
    }

    bb69 (cleanup): {
        switchInt(_95) -> [0: bb70, otherwise: bb94];
    }

    bb70 (cleanup): {
        resume;
    }

    bb71 (cleanup): {
        drop(_25) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_73) -> [0: bb48, otherwise: bb71];
    }

    bb73 (cleanup): {
        drop(_24) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_23) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_22) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_21) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_20) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_19) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_18) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_17) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_16) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_15) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_14) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_13) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_12) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_11) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_10) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_9) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_8) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_7) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_6) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_5) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_4) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_3) -> [return: bb70, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 24];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 24] = {
    let mut _0: &[wasmer_types::Type; 24];
    let mut _1: [wasmer_types::Type; 24];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native, <A24 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native, <A24 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native, _22: <A21 as FromToNativeWasmType>::Native, _23: <A22 as FromToNativeWasmType>::Native, _24: <A23 as FromToNativeWasmType>::Native, _25: <A24 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    debug A21 => _22;
    debug A22 => _23;
    debug A23 => _24;
    debug A24 => _25;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _26: &Func;
    let _27: &Func;
    let _28: *const Func;
    let mut _29: *const ();
    let mut _31: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _32: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _33: &&Func;
    let mut _34: isize;
    let mut _35: isize;
    let mut _38: !;
    let mut _39: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _40: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _42: !;
    let mut _44: isize;
    scope 1 {
        debug func => _26;
        let _30: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _30;
            let _36: Rets;
            let _37: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _41: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _36;
            }
            scope 5 {
                debug trap => _37;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _41;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _43: &();
    }

    bb0: {
        _43 = const _;
        _29 = &raw const (*_43);
        _28 = move _29 as *const Func (PtrToPtr);
        _27 = &(*_28);
        _26 = _27;
        _33 = &_26;
        _32 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _33, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21, A21: move _22, A22: move _23, A23: move _24, A24: move _25 };
        _31 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _32);
        _30 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _31) -> [return: bb1, unwind continue];
    }

    bb1: {
        _35 = discriminant(_30);
        switchInt(move _35) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _34 = discriminant(((_30 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _34) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _41 = move ((_30 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _42 = resume_panic(move _41) -> unwind continue;
    }

    bb5: {
        _36 = move ((((_30 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _36) -> [return: bb6, unwind continue];
    }

    bb6: {
        _44 = discriminant(_30);
        switchInt(move _44) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _37 = move ((((_30 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _40 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _37) -> [return: bb8, unwind continue];
    }

    bb8: {
        _39 = move _40 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _38 = raise_user_trap(move _39) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A21 => (_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A22 => (_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A23 => (_1.23: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A24 => (_1.24: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A21;
    let mut _45: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A22;
    let mut _47: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A23;
    let mut _49: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A24;
    let mut _51: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: &&Func;
    let mut _53: &Func;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;

    bb0: {
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _77 = const true;
        _78 = const true;
        _79 = const true;
        _80 = const true;
        _81 = const true;
        _82 = const true;
        _83 = const true;
        _84 = const true;
        _85 = const true;
        _86 = const true;
        _87 = const true;
        _88 = const true;
        _89 = const true;
        _90 = const true;
        _91 = const true;
        _92 = const true;
        _93 = const true;
        _94 = const true;
        _95 = const true;
        _96 = const true;
        _97 = const true;
        _98 = const true;
        _99 = const true;
        _52 = deref_copy (_1.0: &&Func);
        _53 = deref_copy (*_52);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb119];
    }

    bb1: {
        _76 = const true;
        _99 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb73];
    }

    bb2: {
        _75 = const true;
        _98 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb71];
    }

    bb3: {
        _74 = const true;
        _97 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb69];
    }

    bb4: {
        _73 = const true;
        _96 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb67];
    }

    bb5: {
        _72 = const true;
        _95 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb65];
    }

    bb6: {
        _71 = const true;
        _94 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb63];
    }

    bb7: {
        _70 = const true;
        _93 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb61];
    }

    bb8: {
        _69 = const true;
        _92 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb59];
    }

    bb9: {
        _68 = const true;
        _91 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb57];
    }

    bb10: {
        _67 = const true;
        _90 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb55];
    }

    bb11: {
        _66 = const true;
        _89 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb53];
    }

    bb12: {
        _65 = const true;
        _88 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb51];
    }

    bb13: {
        _64 = const true;
        _87 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb49];
    }

    bb14: {
        _63 = const true;
        _86 = const false;
        _33 = move (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb47];
    }

    bb15: {
        _62 = const true;
        _85 = const false;
        _35 = move (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb45];
    }

    bb16: {
        _61 = const true;
        _84 = const false;
        _37 = move (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb43];
    }

    bb17: {
        _60 = const true;
        _83 = const false;
        _39 = move (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb41];
    }

    bb18: {
        _59 = const true;
        _82 = const false;
        _41 = move (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb39];
    }

    bb19: {
        _58 = const true;
        _81 = const false;
        _43 = move (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb37];
    }

    bb20: {
        _57 = const true;
        _80 = const false;
        _45 = move (_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = <A21 as FromToNativeWasmType>::from_native(move _45) -> [return: bb21, unwind: bb35];
    }

    bb21: {
        _56 = const true;
        _79 = const false;
        _47 = move (_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = <A22 as FromToNativeWasmType>::from_native(move _47) -> [return: bb22, unwind: bb33];
    }

    bb22: {
        _55 = const true;
        _78 = const false;
        _49 = move (_1.23: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
        _48 = <A23 as FromToNativeWasmType>::from_native(move _49) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _54 = const true;
        _77 = const false;
        _51 = move (_1.24: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
        _50 = <A24 as FromToNativeWasmType>::from_native(move _51) -> [return: bb24, unwind: bb29];
    }

    bb24: {
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _55 = const false;
        _54 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24)>>::call(_53, move _3) -> [return: bb25, unwind: bb29];
    }

    bb25: {
        _54 = const false;
        _55 = const false;
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb26, unwind: bb119];
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        resume;
    }

    bb28 (cleanup): {
        drop(_48) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_54) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_46) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_55) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_44) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_56) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_42) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_57) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_40) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_58) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_38) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_59) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_36) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_60) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_34) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_61) -> [0: bb45, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_32) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_62) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_30) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_63) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_28) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_64) -> [0: bb51, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_26) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_65) -> [0: bb53, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_24) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_66) -> [0: bb55, otherwise: bb52];
    }

    bb54 (cleanup): {
        drop(_22) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_67) -> [0: bb57, otherwise: bb54];
    }

    bb56 (cleanup): {
        drop(_20) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_68) -> [0: bb59, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_18) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_69) -> [0: bb61, otherwise: bb58];
    }

    bb60 (cleanup): {
        drop(_16) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_70) -> [0: bb63, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_14) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_71) -> [0: bb65, otherwise: bb62];
    }

    bb64 (cleanup): {
        drop(_12) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_72) -> [0: bb67, otherwise: bb64];
    }

    bb66 (cleanup): {
        drop(_10) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_73) -> [0: bb69, otherwise: bb66];
    }

    bb68 (cleanup): {
        drop(_8) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_74) -> [0: bb71, otherwise: bb68];
    }

    bb70 (cleanup): {
        drop(_6) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_75) -> [0: bb73, otherwise: bb70];
    }

    bb72 (cleanup): {
        drop(_4) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_76) -> [0: bb119, otherwise: bb72];
    }

    bb74 (cleanup): {
        switchInt(_77) -> [0: bb27, otherwise: bb75];
    }

    bb75 (cleanup): {
        drop((_1.24: <A24 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_78) -> [0: bb74, otherwise: bb77];
    }

    bb77 (cleanup): {
        drop((_1.23: <A23 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_79) -> [0: bb76, otherwise: bb79];
    }

    bb79 (cleanup): {
        drop((_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_80) -> [0: bb78, otherwise: bb81];
    }

    bb81 (cleanup): {
        drop((_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_81) -> [0: bb80, otherwise: bb83];
    }

    bb83 (cleanup): {
        drop((_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_82) -> [0: bb82, otherwise: bb85];
    }

    bb85 (cleanup): {
        drop((_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_83) -> [0: bb84, otherwise: bb87];
    }

    bb87 (cleanup): {
        drop((_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        switchInt(_84) -> [0: bb86, otherwise: bb89];
    }

    bb89 (cleanup): {
        drop((_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        switchInt(_85) -> [0: bb88, otherwise: bb91];
    }

    bb91 (cleanup): {
        drop((_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        switchInt(_86) -> [0: bb90, otherwise: bb93];
    }

    bb93 (cleanup): {
        drop((_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_87) -> [0: bb92, otherwise: bb95];
    }

    bb95 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        switchInt(_88) -> [0: bb94, otherwise: bb97];
    }

    bb97 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        switchInt(_89) -> [0: bb96, otherwise: bb99];
    }

    bb99 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        switchInt(_90) -> [0: bb98, otherwise: bb101];
    }

    bb101 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_91) -> [0: bb100, otherwise: bb103];
    }

    bb103 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        switchInt(_92) -> [0: bb102, otherwise: bb105];
    }

    bb105 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        switchInt(_93) -> [0: bb104, otherwise: bb107];
    }

    bb107 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        switchInt(_94) -> [0: bb106, otherwise: bb109];
    }

    bb109 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        switchInt(_95) -> [0: bb108, otherwise: bb111];
    }

    bb111 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        switchInt(_96) -> [0: bb110, otherwise: bb113];
    }

    bb113 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        switchInt(_97) -> [0: bb112, otherwise: bb115];
    }

    bb115 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        switchInt(_98) -> [0: bb114, otherwise: bb117];
    }

    bb117 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        switchInt(_99) -> [0: bb116, otherwise: bb118];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native, <A24 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native, <A24 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native, _22: <A21 as FromToNativeWasmType>::Native, _23: <A22 as FromToNativeWasmType>::Native, _24: <A23 as FromToNativeWasmType>::Native, _25: <A24 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    debug A21 => _22;
    debug A22 => _23;
    debug A23 => _24;
    debug A24 => _25;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _26: &Func;
    let _27: &Func;
    let _28: *const Func;
    let mut _29: *const ();
    let mut _31: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _32: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _33: &&Func;
    let mut _34: &&Env;
    let mut _35: isize;
    let mut _36: isize;
    let mut _39: !;
    let mut _40: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _41: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _43: !;
    let mut _45: isize;
    scope 1 {
        debug func => _26;
        let _30: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _30;
            let _37: Rets;
            let _38: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _42: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _37;
            }
            scope 5 {
                debug trap => _38;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _42;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _44: &();
    }

    bb0: {
        _44 = const _;
        _29 = &raw const (*_44);
        _28 = move _29 as *const Func (PtrToPtr);
        _27 = &(*_28);
        _26 = _27;
        _33 = &_26;
        _34 = &_1;
        _32 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _33, env: move _34, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21, A21: move _22, A22: move _23, A23: move _24, A24: move _25 };
        _31 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _32);
        _30 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _31) -> [return: bb1, unwind continue];
    }

    bb1: {
        _36 = discriminant(_30);
        switchInt(move _36) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _35 = discriminant(((_30 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _35) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _42 = move ((_30 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _43 = resume_panic(move _42) -> unwind continue;
    }

    bb5: {
        _37 = move ((((_30 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _37) -> [return: bb6, unwind continue];
    }

    bb6: {
        _45 = discriminant(_30);
        switchInt(move _45) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _38 = move ((((_30 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _41 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _38) -> [return: bb8, unwind continue];
    }

    bb8: {
        _40 = move _41 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _39 = raise_user_trap(move _40) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A21 => (_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A22 => (_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A23 => (_1.24: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A24 => (_1.25: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A21;
    let mut _45: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A22;
    let mut _47: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A23;
    let mut _49: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A24;
    let mut _51: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: &&Func;
    let mut _53: &Func;
    let mut _54: &&Env;
    let mut _55: &Env;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;

    bb0: {
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _101 = const false;
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _79 = const true;
        _80 = const true;
        _81 = const true;
        _82 = const true;
        _83 = const true;
        _84 = const true;
        _85 = const true;
        _86 = const true;
        _87 = const true;
        _88 = const true;
        _89 = const true;
        _90 = const true;
        _91 = const true;
        _92 = const true;
        _93 = const true;
        _94 = const true;
        _95 = const true;
        _96 = const true;
        _97 = const true;
        _98 = const true;
        _99 = const true;
        _100 = const true;
        _101 = const true;
        _52 = deref_copy (_1.0: &&Func);
        _53 = deref_copy (*_52);
        _54 = deref_copy (_1.1: &&Env);
        _55 = deref_copy (*_54);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb119];
    }

    bb1: {
        _78 = const true;
        _101 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb73];
    }

    bb2: {
        _77 = const true;
        _100 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb71];
    }

    bb3: {
        _76 = const true;
        _99 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb69];
    }

    bb4: {
        _75 = const true;
        _98 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb67];
    }

    bb5: {
        _74 = const true;
        _97 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb65];
    }

    bb6: {
        _73 = const true;
        _96 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb63];
    }

    bb7: {
        _72 = const true;
        _95 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb61];
    }

    bb8: {
        _71 = const true;
        _94 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb59];
    }

    bb9: {
        _70 = const true;
        _93 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb57];
    }

    bb10: {
        _69 = const true;
        _92 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb55];
    }

    bb11: {
        _68 = const true;
        _91 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb53];
    }

    bb12: {
        _67 = const true;
        _90 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb51];
    }

    bb13: {
        _66 = const true;
        _89 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb49];
    }

    bb14: {
        _65 = const true;
        _88 = const false;
        _33 = move (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb47];
    }

    bb15: {
        _64 = const true;
        _87 = const false;
        _35 = move (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb45];
    }

    bb16: {
        _63 = const true;
        _86 = const false;
        _37 = move (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb43];
    }

    bb17: {
        _62 = const true;
        _85 = const false;
        _39 = move (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb41];
    }

    bb18: {
        _61 = const true;
        _84 = const false;
        _41 = move (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb39];
    }

    bb19: {
        _60 = const true;
        _83 = const false;
        _43 = move (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb37];
    }

    bb20: {
        _59 = const true;
        _82 = const false;
        _45 = move (_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = <A21 as FromToNativeWasmType>::from_native(move _45) -> [return: bb21, unwind: bb35];
    }

    bb21: {
        _58 = const true;
        _81 = const false;
        _47 = move (_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = <A22 as FromToNativeWasmType>::from_native(move _47) -> [return: bb22, unwind: bb33];
    }

    bb22: {
        _57 = const true;
        _80 = const false;
        _49 = move (_1.24: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
        _48 = <A23 as FromToNativeWasmType>::from_native(move _49) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _56 = const true;
        _79 = const false;
        _51 = move (_1.25: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
        _50 = <A24 as FromToNativeWasmType>::from_native(move _51) -> [return: bb24, unwind: bb29];
    }

    bb24: {
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _3 = (_55, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24)>>::call(_53, move _3) -> [return: bb25, unwind: bb29];
    }

    bb25: {
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb26, unwind: bb119];
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        resume;
    }

    bb28 (cleanup): {
        drop(_48) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_56) -> [0: bb31, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_46) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_57) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_44) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_58) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_42) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_59) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_40) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_60) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_38) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_61) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_36) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_62) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_34) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_63) -> [0: bb45, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_32) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_64) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_30) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_65) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_28) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_66) -> [0: bb51, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_26) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_67) -> [0: bb53, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_24) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_68) -> [0: bb55, otherwise: bb52];
    }

    bb54 (cleanup): {
        drop(_22) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_69) -> [0: bb57, otherwise: bb54];
    }

    bb56 (cleanup): {
        drop(_20) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_70) -> [0: bb59, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_18) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_71) -> [0: bb61, otherwise: bb58];
    }

    bb60 (cleanup): {
        drop(_16) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_72) -> [0: bb63, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_14) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_73) -> [0: bb65, otherwise: bb62];
    }

    bb64 (cleanup): {
        drop(_12) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_74) -> [0: bb67, otherwise: bb64];
    }

    bb66 (cleanup): {
        drop(_10) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_75) -> [0: bb69, otherwise: bb66];
    }

    bb68 (cleanup): {
        drop(_8) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_76) -> [0: bb71, otherwise: bb68];
    }

    bb70 (cleanup): {
        drop(_6) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_77) -> [0: bb73, otherwise: bb70];
    }

    bb72 (cleanup): {
        drop(_4) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_78) -> [0: bb119, otherwise: bb72];
    }

    bb74 (cleanup): {
        switchInt(_79) -> [0: bb27, otherwise: bb75];
    }

    bb75 (cleanup): {
        drop((_1.25: <A24 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_80) -> [0: bb74, otherwise: bb77];
    }

    bb77 (cleanup): {
        drop((_1.24: <A23 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_81) -> [0: bb76, otherwise: bb79];
    }

    bb79 (cleanup): {
        drop((_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        switchInt(_82) -> [0: bb78, otherwise: bb81];
    }

    bb81 (cleanup): {
        drop((_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_83) -> [0: bb80, otherwise: bb83];
    }

    bb83 (cleanup): {
        drop((_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_84) -> [0: bb82, otherwise: bb85];
    }

    bb85 (cleanup): {
        drop((_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_85) -> [0: bb84, otherwise: bb87];
    }

    bb87 (cleanup): {
        drop((_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        switchInt(_86) -> [0: bb86, otherwise: bb89];
    }

    bb89 (cleanup): {
        drop((_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        switchInt(_87) -> [0: bb88, otherwise: bb91];
    }

    bb91 (cleanup): {
        drop((_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        switchInt(_88) -> [0: bb90, otherwise: bb93];
    }

    bb93 (cleanup): {
        drop((_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_89) -> [0: bb92, otherwise: bb95];
    }

    bb95 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        switchInt(_90) -> [0: bb94, otherwise: bb97];
    }

    bb97 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        switchInt(_91) -> [0: bb96, otherwise: bb99];
    }

    bb99 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        switchInt(_92) -> [0: bb98, otherwise: bb101];
    }

    bb101 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_93) -> [0: bb100, otherwise: bb103];
    }

    bb103 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        switchInt(_94) -> [0: bb102, otherwise: bb105];
    }

    bb105 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        switchInt(_95) -> [0: bb104, otherwise: bb107];
    }

    bb107 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        switchInt(_96) -> [0: bb106, otherwise: bb109];
    }

    bb109 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        switchInt(_97) -> [0: bb108, otherwise: bb111];
    }

    bb111 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        switchInt(_98) -> [0: bb110, otherwise: bb113];
    }

    bb113 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        switchInt(_99) -> [0: bb112, otherwise: bb115];
    }

    bb115 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        switchInt(_100) -> [0: bb114, otherwise: bb117];
    }

    bb117 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        switchInt(_101) -> [0: bb116, otherwise: bb118];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 25_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 25]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25);
    let mut _27: A1;
    let mut _28: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A2;
    let mut _30: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A3;
    let mut _32: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A4;
    let mut _34: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A5;
    let mut _36: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A6;
    let mut _38: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A7;
    let mut _40: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A8;
    let mut _42: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A9;
    let mut _44: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A10;
    let mut _46: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A11;
    let mut _48: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A12;
    let mut _50: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A13;
    let mut _52: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A14;
    let mut _54: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A15;
    let mut _56: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A16;
    let mut _58: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A17;
    let mut _60: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A18;
    let mut _62: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A19;
    let mut _64: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A20;
    let mut _66: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _67: A21;
    let mut _68: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _69: A22;
    let mut _70: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _71: A23;
    let mut _72: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _73: A24;
    let mut _74: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _75: A25;
    let mut _76: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
        debug A24 => _25;
        debug A25 => _26;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
        let _16: i128;
        let _17: i128;
        let _18: i128;
        let _19: i128;
        let _20: i128;
        let _21: i128;
        let _22: i128;
        let _23: i128;
        let _24: i128;
        let _25: i128;
        let _26: i128;
    }

    bb0: {
        _2 = _1[0 of 25];
        _3 = _1[1 of 25];
        _4 = _1[2 of 25];
        _5 = _1[3 of 25];
        _6 = _1[4 of 25];
        _7 = _1[5 of 25];
        _8 = _1[6 of 25];
        _9 = _1[7 of 25];
        _10 = _1[8 of 25];
        _11 = _1[9 of 25];
        _12 = _1[10 of 25];
        _13 = _1[11 of 25];
        _14 = _1[12 of 25];
        _15 = _1[13 of 25];
        _16 = _1[14 of 25];
        _17 = _1[15 of 25];
        _18 = _1[16 of 25];
        _19 = _1[17 of 25];
        _20 = _1[18 of 25];
        _21 = _1[19 of 25];
        _22 = _1[20 of 25];
        _23 = _1[21 of 25];
        _24 = _1[22 of 25];
        _25 = _1[23 of 25];
        _26 = _1[24 of 25];
        _28 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _27 = <A1 as FromToNativeWasmType>::from_native(move _28) -> [return: bb2, unwind continue];
    }

    bb2: {
        _30 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb74];
    }

    bb3: {
        _29 = <A2 as FromToNativeWasmType>::from_native(move _30) -> [return: bb4, unwind: bb74];
    }

    bb4: {
        _32 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb73];
    }

    bb5: {
        _31 = <A3 as FromToNativeWasmType>::from_native(move _32) -> [return: bb6, unwind: bb73];
    }

    bb6: {
        _34 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb72];
    }

    bb7: {
        _33 = <A4 as FromToNativeWasmType>::from_native(move _34) -> [return: bb8, unwind: bb72];
    }

    bb8: {
        _36 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb71];
    }

    bb9: {
        _35 = <A5 as FromToNativeWasmType>::from_native(move _36) -> [return: bb10, unwind: bb71];
    }

    bb10: {
        _38 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb70];
    }

    bb11: {
        _37 = <A6 as FromToNativeWasmType>::from_native(move _38) -> [return: bb12, unwind: bb70];
    }

    bb12: {
        _40 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb69];
    }

    bb13: {
        _39 = <A7 as FromToNativeWasmType>::from_native(move _40) -> [return: bb14, unwind: bb69];
    }

    bb14: {
        _42 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb68];
    }

    bb15: {
        _41 = <A8 as FromToNativeWasmType>::from_native(move _42) -> [return: bb16, unwind: bb68];
    }

    bb16: {
        _44 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb67];
    }

    bb17: {
        _43 = <A9 as FromToNativeWasmType>::from_native(move _44) -> [return: bb18, unwind: bb67];
    }

    bb18: {
        _46 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb66];
    }

    bb19: {
        _45 = <A10 as FromToNativeWasmType>::from_native(move _46) -> [return: bb20, unwind: bb66];
    }

    bb20: {
        _48 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb65];
    }

    bb21: {
        _47 = <A11 as FromToNativeWasmType>::from_native(move _48) -> [return: bb22, unwind: bb65];
    }

    bb22: {
        _50 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb64];
    }

    bb23: {
        _49 = <A12 as FromToNativeWasmType>::from_native(move _50) -> [return: bb24, unwind: bb64];
    }

    bb24: {
        _52 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb63];
    }

    bb25: {
        _51 = <A13 as FromToNativeWasmType>::from_native(move _52) -> [return: bb26, unwind: bb63];
    }

    bb26: {
        _54 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb62];
    }

    bb27: {
        _53 = <A14 as FromToNativeWasmType>::from_native(move _54) -> [return: bb28, unwind: bb62];
    }

    bb28: {
        _56 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_16) -> [return: bb29, unwind: bb61];
    }

    bb29: {
        _55 = <A15 as FromToNativeWasmType>::from_native(move _56) -> [return: bb30, unwind: bb61];
    }

    bb30: {
        _58 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_17) -> [return: bb31, unwind: bb60];
    }

    bb31: {
        _57 = <A16 as FromToNativeWasmType>::from_native(move _58) -> [return: bb32, unwind: bb60];
    }

    bb32: {
        _60 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_18) -> [return: bb33, unwind: bb59];
    }

    bb33: {
        _59 = <A17 as FromToNativeWasmType>::from_native(move _60) -> [return: bb34, unwind: bb59];
    }

    bb34: {
        _62 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_19) -> [return: bb35, unwind: bb58];
    }

    bb35: {
        _61 = <A18 as FromToNativeWasmType>::from_native(move _62) -> [return: bb36, unwind: bb58];
    }

    bb36: {
        _64 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_20) -> [return: bb37, unwind: bb57];
    }

    bb37: {
        _63 = <A19 as FromToNativeWasmType>::from_native(move _64) -> [return: bb38, unwind: bb57];
    }

    bb38: {
        _66 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_21) -> [return: bb39, unwind: bb56];
    }

    bb39: {
        _65 = <A20 as FromToNativeWasmType>::from_native(move _66) -> [return: bb40, unwind: bb56];
    }

    bb40: {
        _68 = <<A21 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_22) -> [return: bb41, unwind: bb55];
    }

    bb41: {
        _67 = <A21 as FromToNativeWasmType>::from_native(move _68) -> [return: bb42, unwind: bb55];
    }

    bb42: {
        _70 = <<A22 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_23) -> [return: bb43, unwind: bb54];
    }

    bb43: {
        _69 = <A22 as FromToNativeWasmType>::from_native(move _70) -> [return: bb44, unwind: bb54];
    }

    bb44: {
        _72 = <<A23 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_24) -> [return: bb45, unwind: bb53];
    }

    bb45: {
        _71 = <A23 as FromToNativeWasmType>::from_native(move _72) -> [return: bb46, unwind: bb53];
    }

    bb46: {
        _74 = <<A24 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_25) -> [return: bb47, unwind: bb52];
    }

    bb47: {
        _73 = <A24 as FromToNativeWasmType>::from_native(move _74) -> [return: bb48, unwind: bb52];
    }

    bb48: {
        _76 = <<A25 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_26) -> [return: bb49, unwind: bb51];
    }

    bb49: {
        _75 = <A25 as FromToNativeWasmType>::from_native(move _76) -> [return: bb50, unwind: bb51];
    }

    bb50: {
        _0 = (move _27, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57, move _59, move _61, move _63, move _65, move _67, move _69, move _71, move _73, move _75);
        return;
    }

    bb51 (cleanup): {
        drop(_73) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_71) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_69) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_67) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_65) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_63) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_61) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_59) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_57) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_55) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_53) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_51) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_49) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_47) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_45) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_43) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_41) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_39) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_37) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_35) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_33) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_31) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_29) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_27) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 25]>;
    let mut _4: std::result::Result<[i128; 25], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 25];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 25]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 25], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 25]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25)) -> [i128; 25] {
    debug self => _1;
    let mut _0: [i128; 25];
    let mut _27: i128;
    let mut _28: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: i128;
    let mut _30: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A2;
    let mut _32: i128;
    let mut _33: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A3;
    let mut _35: i128;
    let mut _36: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A4;
    let mut _38: i128;
    let mut _39: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A5;
    let mut _41: i128;
    let mut _42: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A6;
    let mut _44: i128;
    let mut _45: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A7;
    let mut _47: i128;
    let mut _48: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A8;
    let mut _50: i128;
    let mut _51: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A9;
    let mut _53: i128;
    let mut _54: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A10;
    let mut _56: i128;
    let mut _57: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A11;
    let mut _59: i128;
    let mut _60: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A12;
    let mut _62: i128;
    let mut _63: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A13;
    let mut _65: i128;
    let mut _66: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _67: A14;
    let mut _68: i128;
    let mut _69: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _70: A15;
    let mut _71: i128;
    let mut _72: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _73: A16;
    let mut _74: i128;
    let mut _75: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _76: A17;
    let mut _77: i128;
    let mut _78: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _79: A18;
    let mut _80: i128;
    let mut _81: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _82: A19;
    let mut _83: i128;
    let mut _84: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _85: A20;
    let mut _86: i128;
    let mut _87: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _88: A21;
    let mut _89: i128;
    let mut _90: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _91: A22;
    let mut _92: i128;
    let mut _93: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _94: A23;
    let mut _95: i128;
    let mut _96: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _97: A24;
    let mut _98: i128;
    let mut _99: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _100: A25;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: bool;
    let mut _124: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
        debug A24 => _25;
        debug A25 => _26;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
        let _16: A15;
        let _17: A16;
        let _18: A17;
        let _19: A18;
        let _20: A19;
        let _21: A20;
        let _22: A21;
        let _23: A22;
        let _24: A23;
        let _25: A24;
        let _26: A25;
    }

    bb0: {
        _124 = const false;
        _123 = const false;
        _122 = const false;
        _121 = const false;
        _120 = const false;
        _119 = const false;
        _118 = const false;
        _117 = const false;
        _116 = const false;
        _115 = const false;
        _114 = const false;
        _113 = const false;
        _112 = const false;
        _111 = const false;
        _110 = const false;
        _109 = const false;
        _108 = const false;
        _107 = const false;
        _106 = const false;
        _105 = const false;
        _104 = const false;
        _103 = const false;
        _102 = const false;
        _101 = const false;
        _2 = move (_1.0: A1);
        _124 = const true;
        _3 = move (_1.1: A2);
        _123 = const true;
        _4 = move (_1.2: A3);
        _122 = const true;
        _5 = move (_1.3: A4);
        _121 = const true;
        _6 = move (_1.4: A5);
        _120 = const true;
        _7 = move (_1.5: A6);
        _119 = const true;
        _8 = move (_1.6: A7);
        _118 = const true;
        _9 = move (_1.7: A8);
        _117 = const true;
        _10 = move (_1.8: A9);
        _116 = const true;
        _11 = move (_1.9: A10);
        _115 = const true;
        _12 = move (_1.10: A11);
        _114 = const true;
        _13 = move (_1.11: A12);
        _113 = const true;
        _14 = move (_1.12: A13);
        _112 = const true;
        _15 = move (_1.13: A14);
        _111 = const true;
        _16 = move (_1.14: A15);
        _110 = const true;
        _17 = move (_1.15: A16);
        _109 = const true;
        _18 = move (_1.16: A17);
        _108 = const true;
        _19 = move (_1.17: A18);
        _107 = const true;
        _20 = move (_1.18: A19);
        _106 = const true;
        _21 = move (_1.19: A20);
        _105 = const true;
        _22 = move (_1.20: A21);
        _104 = const true;
        _23 = move (_1.21: A22);
        _103 = const true;
        _24 = move (_1.22: A23);
        _102 = const true;
        _25 = move (_1.23: A24);
        _101 = const true;
        _26 = move (_1.24: A25);
        _28 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb76];
    }

    bb1: {
        _27 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _28) -> [return: bb2, unwind: bb76];
    }

    bb2: {
        _124 = const false;
        _31 = move _3;
        _30 = <A2 as FromToNativeWasmType>::to_native(move _31) -> [return: bb3, unwind: bb76];
    }

    bb3: {
        _29 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _30) -> [return: bb4, unwind: bb76];
    }

    bb4: {
        _123 = const false;
        _34 = move _4;
        _33 = <A3 as FromToNativeWasmType>::to_native(move _34) -> [return: bb5, unwind: bb76];
    }

    bb5: {
        _32 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _33) -> [return: bb6, unwind: bb76];
    }

    bb6: {
        _122 = const false;
        _37 = move _5;
        _36 = <A4 as FromToNativeWasmType>::to_native(move _37) -> [return: bb7, unwind: bb76];
    }

    bb7: {
        _35 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _36) -> [return: bb8, unwind: bb76];
    }

    bb8: {
        _121 = const false;
        _40 = move _6;
        _39 = <A5 as FromToNativeWasmType>::to_native(move _40) -> [return: bb9, unwind: bb76];
    }

    bb9: {
        _38 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _39) -> [return: bb10, unwind: bb76];
    }

    bb10: {
        _120 = const false;
        _43 = move _7;
        _42 = <A6 as FromToNativeWasmType>::to_native(move _43) -> [return: bb11, unwind: bb76];
    }

    bb11: {
        _41 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _42) -> [return: bb12, unwind: bb76];
    }

    bb12: {
        _119 = const false;
        _46 = move _8;
        _45 = <A7 as FromToNativeWasmType>::to_native(move _46) -> [return: bb13, unwind: bb76];
    }

    bb13: {
        _44 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _45) -> [return: bb14, unwind: bb76];
    }

    bb14: {
        _118 = const false;
        _49 = move _9;
        _48 = <A8 as FromToNativeWasmType>::to_native(move _49) -> [return: bb15, unwind: bb76];
    }

    bb15: {
        _47 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _48) -> [return: bb16, unwind: bb76];
    }

    bb16: {
        _117 = const false;
        _52 = move _10;
        _51 = <A9 as FromToNativeWasmType>::to_native(move _52) -> [return: bb17, unwind: bb76];
    }

    bb17: {
        _50 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _51) -> [return: bb18, unwind: bb76];
    }

    bb18: {
        _116 = const false;
        _55 = move _11;
        _54 = <A10 as FromToNativeWasmType>::to_native(move _55) -> [return: bb19, unwind: bb76];
    }

    bb19: {
        _53 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _54) -> [return: bb20, unwind: bb76];
    }

    bb20: {
        _115 = const false;
        _58 = move _12;
        _57 = <A11 as FromToNativeWasmType>::to_native(move _58) -> [return: bb21, unwind: bb76];
    }

    bb21: {
        _56 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _57) -> [return: bb22, unwind: bb76];
    }

    bb22: {
        _114 = const false;
        _61 = move _13;
        _60 = <A12 as FromToNativeWasmType>::to_native(move _61) -> [return: bb23, unwind: bb76];
    }

    bb23: {
        _59 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _60) -> [return: bb24, unwind: bb76];
    }

    bb24: {
        _113 = const false;
        _64 = move _14;
        _63 = <A13 as FromToNativeWasmType>::to_native(move _64) -> [return: bb25, unwind: bb76];
    }

    bb25: {
        _62 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _63) -> [return: bb26, unwind: bb76];
    }

    bb26: {
        _112 = const false;
        _67 = move _15;
        _66 = <A14 as FromToNativeWasmType>::to_native(move _67) -> [return: bb27, unwind: bb76];
    }

    bb27: {
        _65 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _66) -> [return: bb28, unwind: bb76];
    }

    bb28: {
        _111 = const false;
        _70 = move _16;
        _69 = <A15 as FromToNativeWasmType>::to_native(move _70) -> [return: bb29, unwind: bb76];
    }

    bb29: {
        _68 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _69) -> [return: bb30, unwind: bb76];
    }

    bb30: {
        _110 = const false;
        _73 = move _17;
        _72 = <A16 as FromToNativeWasmType>::to_native(move _73) -> [return: bb31, unwind: bb76];
    }

    bb31: {
        _71 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _72) -> [return: bb32, unwind: bb76];
    }

    bb32: {
        _109 = const false;
        _76 = move _18;
        _75 = <A17 as FromToNativeWasmType>::to_native(move _76) -> [return: bb33, unwind: bb76];
    }

    bb33: {
        _74 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _75) -> [return: bb34, unwind: bb76];
    }

    bb34: {
        _108 = const false;
        _79 = move _19;
        _78 = <A18 as FromToNativeWasmType>::to_native(move _79) -> [return: bb35, unwind: bb76];
    }

    bb35: {
        _77 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _78) -> [return: bb36, unwind: bb76];
    }

    bb36: {
        _107 = const false;
        _82 = move _20;
        _81 = <A19 as FromToNativeWasmType>::to_native(move _82) -> [return: bb37, unwind: bb76];
    }

    bb37: {
        _80 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _81) -> [return: bb38, unwind: bb76];
    }

    bb38: {
        _106 = const false;
        _85 = move _21;
        _84 = <A20 as FromToNativeWasmType>::to_native(move _85) -> [return: bb39, unwind: bb76];
    }

    bb39: {
        _83 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _84) -> [return: bb40, unwind: bb76];
    }

    bb40: {
        _105 = const false;
        _88 = move _22;
        _87 = <A21 as FromToNativeWasmType>::to_native(move _88) -> [return: bb41, unwind: bb76];
    }

    bb41: {
        _86 = <<A21 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _87) -> [return: bb42, unwind: bb76];
    }

    bb42: {
        _104 = const false;
        _91 = move _23;
        _90 = <A22 as FromToNativeWasmType>::to_native(move _91) -> [return: bb43, unwind: bb76];
    }

    bb43: {
        _89 = <<A22 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _90) -> [return: bb44, unwind: bb76];
    }

    bb44: {
        _103 = const false;
        _94 = move _24;
        _93 = <A23 as FromToNativeWasmType>::to_native(move _94) -> [return: bb45, unwind: bb76];
    }

    bb45: {
        _92 = <<A23 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _93) -> [return: bb46, unwind: bb76];
    }

    bb46: {
        _102 = const false;
        _97 = move _25;
        _96 = <A24 as FromToNativeWasmType>::to_native(move _97) -> [return: bb47, unwind: bb76];
    }

    bb47: {
        _95 = <<A24 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _96) -> [return: bb48, unwind: bb76];
    }

    bb48: {
        _101 = const false;
        _100 = move _26;
        _99 = <A25 as FromToNativeWasmType>::to_native(move _100) -> [return: bb49, unwind: bb76];
    }

    bb49: {
        _98 = <<A25 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _99) -> [return: bb50, unwind: bb76];
    }

    bb50: {
        _0 = [move _27, move _29, move _32, move _35, move _38, move _41, move _44, move _47, move _50, move _53, move _56, move _59, move _62, move _65, move _68, move _71, move _74, move _77, move _80, move _83, move _86, move _89, move _92, move _95, move _98];
        _101 = const false;
        _102 = const false;
        _103 = const false;
        _104 = const false;
        _105 = const false;
        _106 = const false;
        _107 = const false;
        _108 = const false;
        _109 = const false;
        _110 = const false;
        _111 = const false;
        _112 = const false;
        _113 = const false;
        _114 = const false;
        _115 = const false;
        _116 = const false;
        _117 = const false;
        _118 = const false;
        _119 = const false;
        _120 = const false;
        _121 = const false;
        _122 = const false;
        _123 = const false;
        _124 = const false;
        return;
    }

    bb51 (cleanup): {
        switchInt(_102) -> [0: bb52, otherwise: bb77];
    }

    bb52 (cleanup): {
        switchInt(_103) -> [0: bb53, otherwise: bb78];
    }

    bb53 (cleanup): {
        switchInt(_104) -> [0: bb54, otherwise: bb79];
    }

    bb54 (cleanup): {
        switchInt(_105) -> [0: bb55, otherwise: bb80];
    }

    bb55 (cleanup): {
        switchInt(_106) -> [0: bb56, otherwise: bb81];
    }

    bb56 (cleanup): {
        switchInt(_107) -> [0: bb57, otherwise: bb82];
    }

    bb57 (cleanup): {
        switchInt(_108) -> [0: bb58, otherwise: bb83];
    }

    bb58 (cleanup): {
        switchInt(_109) -> [0: bb59, otherwise: bb84];
    }

    bb59 (cleanup): {
        switchInt(_110) -> [0: bb60, otherwise: bb85];
    }

    bb60 (cleanup): {
        switchInt(_111) -> [0: bb61, otherwise: bb86];
    }

    bb61 (cleanup): {
        switchInt(_112) -> [0: bb62, otherwise: bb87];
    }

    bb62 (cleanup): {
        switchInt(_113) -> [0: bb63, otherwise: bb88];
    }

    bb63 (cleanup): {
        switchInt(_114) -> [0: bb64, otherwise: bb89];
    }

    bb64 (cleanup): {
        switchInt(_115) -> [0: bb65, otherwise: bb90];
    }

    bb65 (cleanup): {
        switchInt(_116) -> [0: bb66, otherwise: bb91];
    }

    bb66 (cleanup): {
        switchInt(_117) -> [0: bb67, otherwise: bb92];
    }

    bb67 (cleanup): {
        switchInt(_118) -> [0: bb68, otherwise: bb93];
    }

    bb68 (cleanup): {
        switchInt(_119) -> [0: bb69, otherwise: bb94];
    }

    bb69 (cleanup): {
        switchInt(_120) -> [0: bb70, otherwise: bb95];
    }

    bb70 (cleanup): {
        switchInt(_121) -> [0: bb71, otherwise: bb96];
    }

    bb71 (cleanup): {
        switchInt(_122) -> [0: bb72, otherwise: bb97];
    }

    bb72 (cleanup): {
        switchInt(_123) -> [0: bb73, otherwise: bb98];
    }

    bb73 (cleanup): {
        switchInt(_124) -> [0: bb74, otherwise: bb99];
    }

    bb74 (cleanup): {
        resume;
    }

    bb75 (cleanup): {
        drop(_26) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_101) -> [0: bb51, otherwise: bb75];
    }

    bb77 (cleanup): {
        drop(_25) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_24) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_23) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_22) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_21) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_20) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_19) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_18) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_17) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_16) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_15) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_14) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_13) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_12) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_11) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_10) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_9) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_8) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_7) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_6) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_5) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_4) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_3) -> [return: bb74, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 25] {
    let mut _0: [i128; 25];

    bb0: {
        _0 = [const 0_i128; 25];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 25_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S25<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25);
    let mut _27: A1;
    let mut _28: A2;
    let mut _29: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A3;
    let mut _31: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A4;
    let mut _33: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A5;
    let mut _35: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A6;
    let mut _37: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A7;
    let mut _39: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A8;
    let mut _41: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A9;
    let mut _43: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A10;
    let mut _45: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A11;
    let mut _47: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A12;
    let mut _49: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A13;
    let mut _51: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A14;
    let mut _53: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A15;
    let mut _55: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A16;
    let mut _57: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A17;
    let mut _59: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A18;
    let mut _61: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A19;
    let mut _63: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A20;
    let mut _65: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A21;
    let mut _67: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _68: A22;
    let mut _69: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _70: A23;
    let mut _71: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _72: A24;
    let mut _73: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _74: A25;
    let mut _75: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
        debug A24 => _25;
        debug A25 => _26;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
        let _16: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
        let _17: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
        let _18: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
        let _19: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
        let _20: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
        let _21: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
        let _22: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
        let _23: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
        let _24: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
        let _25: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
        let _26: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _99 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _98 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _97 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _96 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _95 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _94 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _93 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _92 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _91 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _90 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _89 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _88 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _87 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _86 = const true;
        _16 = move (_1.14: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _85 = const true;
        _17 = move (_1.15: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _84 = const true;
        _18 = move (_1.16: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _83 = const true;
        _19 = move (_1.17: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _82 = const true;
        _20 = move (_1.18: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _81 = const true;
        _21 = move (_1.19: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _80 = const true;
        _22 = move (_1.20: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _79 = const true;
        _23 = move (_1.21: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _78 = const true;
        _24 = move (_1.22: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
        _77 = const true;
        _25 = move (_1.23: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
        _76 = const true;
        _26 = move (_1.24: <A25 as externals::function::inner::FromToNativeWasmType>::Native);
        _27 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb75];
    }

    bb1: {
        _99 = const false;
        _29 = move _3;
        _28 = <A2 as FromToNativeWasmType>::from_native(move _29) -> [return: bb2, unwind: bb49];
    }

    bb2: {
        _98 = const false;
        _31 = move _4;
        _30 = <A3 as FromToNativeWasmType>::from_native(move _31) -> [return: bb3, unwind: bb48];
    }

    bb3: {
        _97 = const false;
        _33 = move _5;
        _32 = <A4 as FromToNativeWasmType>::from_native(move _33) -> [return: bb4, unwind: bb47];
    }

    bb4: {
        _96 = const false;
        _35 = move _6;
        _34 = <A5 as FromToNativeWasmType>::from_native(move _35) -> [return: bb5, unwind: bb46];
    }

    bb5: {
        _95 = const false;
        _37 = move _7;
        _36 = <A6 as FromToNativeWasmType>::from_native(move _37) -> [return: bb6, unwind: bb45];
    }

    bb6: {
        _94 = const false;
        _39 = move _8;
        _38 = <A7 as FromToNativeWasmType>::from_native(move _39) -> [return: bb7, unwind: bb44];
    }

    bb7: {
        _93 = const false;
        _41 = move _9;
        _40 = <A8 as FromToNativeWasmType>::from_native(move _41) -> [return: bb8, unwind: bb43];
    }

    bb8: {
        _92 = const false;
        _43 = move _10;
        _42 = <A9 as FromToNativeWasmType>::from_native(move _43) -> [return: bb9, unwind: bb42];
    }

    bb9: {
        _91 = const false;
        _45 = move _11;
        _44 = <A10 as FromToNativeWasmType>::from_native(move _45) -> [return: bb10, unwind: bb41];
    }

    bb10: {
        _90 = const false;
        _47 = move _12;
        _46 = <A11 as FromToNativeWasmType>::from_native(move _47) -> [return: bb11, unwind: bb40];
    }

    bb11: {
        _89 = const false;
        _49 = move _13;
        _48 = <A12 as FromToNativeWasmType>::from_native(move _49) -> [return: bb12, unwind: bb39];
    }

    bb12: {
        _88 = const false;
        _51 = move _14;
        _50 = <A13 as FromToNativeWasmType>::from_native(move _51) -> [return: bb13, unwind: bb38];
    }

    bb13: {
        _87 = const false;
        _53 = move _15;
        _52 = <A14 as FromToNativeWasmType>::from_native(move _53) -> [return: bb14, unwind: bb37];
    }

    bb14: {
        _86 = const false;
        _55 = move _16;
        _54 = <A15 as FromToNativeWasmType>::from_native(move _55) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        _85 = const false;
        _57 = move _17;
        _56 = <A16 as FromToNativeWasmType>::from_native(move _57) -> [return: bb16, unwind: bb35];
    }

    bb16: {
        _84 = const false;
        _59 = move _18;
        _58 = <A17 as FromToNativeWasmType>::from_native(move _59) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        _83 = const false;
        _61 = move _19;
        _60 = <A18 as FromToNativeWasmType>::from_native(move _61) -> [return: bb18, unwind: bb33];
    }

    bb18: {
        _82 = const false;
        _63 = move _20;
        _62 = <A19 as FromToNativeWasmType>::from_native(move _63) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        _81 = const false;
        _65 = move _21;
        _64 = <A20 as FromToNativeWasmType>::from_native(move _65) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        _80 = const false;
        _67 = move _22;
        _66 = <A21 as FromToNativeWasmType>::from_native(move _67) -> [return: bb21, unwind: bb30];
    }

    bb21: {
        _79 = const false;
        _69 = move _23;
        _68 = <A22 as FromToNativeWasmType>::from_native(move _69) -> [return: bb22, unwind: bb29];
    }

    bb22: {
        _78 = const false;
        _71 = move _24;
        _70 = <A23 as FromToNativeWasmType>::from_native(move _71) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        _77 = const false;
        _73 = move _25;
        _72 = <A24 as FromToNativeWasmType>::from_native(move _73) -> [return: bb24, unwind: bb27];
    }

    bb24: {
        _76 = const false;
        _75 = move _26;
        _74 = <A25 as FromToNativeWasmType>::from_native(move _75) -> [return: bb25, unwind: bb26];
    }

    bb25: {
        _0 = (move _27, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56, move _58, move _60, move _62, move _64, move _66, move _68, move _70, move _72, move _74);
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        _88 = const false;
        _89 = const false;
        _90 = const false;
        _91 = const false;
        _92 = const false;
        _93 = const false;
        _94 = const false;
        _95 = const false;
        _96 = const false;
        _97 = const false;
        _98 = const false;
        _99 = const false;
        return;
    }

    bb26 (cleanup): {
        drop(_72) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_70) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_68) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_66) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_64) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_62) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_60) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_58) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_56) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_54) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_52) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_50) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_48) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_46) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_44) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_42) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_40) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_38) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_36) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_34) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_32) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_30) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_28) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_27) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_77) -> [0: bb51, otherwise: bb76];
    }

    bb51 (cleanup): {
        switchInt(_78) -> [0: bb52, otherwise: bb77];
    }

    bb52 (cleanup): {
        switchInt(_79) -> [0: bb53, otherwise: bb78];
    }

    bb53 (cleanup): {
        switchInt(_80) -> [0: bb54, otherwise: bb79];
    }

    bb54 (cleanup): {
        switchInt(_81) -> [0: bb55, otherwise: bb80];
    }

    bb55 (cleanup): {
        switchInt(_82) -> [0: bb56, otherwise: bb81];
    }

    bb56 (cleanup): {
        switchInt(_83) -> [0: bb57, otherwise: bb82];
    }

    bb57 (cleanup): {
        switchInt(_84) -> [0: bb58, otherwise: bb83];
    }

    bb58 (cleanup): {
        switchInt(_85) -> [0: bb59, otherwise: bb84];
    }

    bb59 (cleanup): {
        switchInt(_86) -> [0: bb60, otherwise: bb85];
    }

    bb60 (cleanup): {
        switchInt(_87) -> [0: bb61, otherwise: bb86];
    }

    bb61 (cleanup): {
        switchInt(_88) -> [0: bb62, otherwise: bb87];
    }

    bb62 (cleanup): {
        switchInt(_89) -> [0: bb63, otherwise: bb88];
    }

    bb63 (cleanup): {
        switchInt(_90) -> [0: bb64, otherwise: bb89];
    }

    bb64 (cleanup): {
        switchInt(_91) -> [0: bb65, otherwise: bb90];
    }

    bb65 (cleanup): {
        switchInt(_92) -> [0: bb66, otherwise: bb91];
    }

    bb66 (cleanup): {
        switchInt(_93) -> [0: bb67, otherwise: bb92];
    }

    bb67 (cleanup): {
        switchInt(_94) -> [0: bb68, otherwise: bb93];
    }

    bb68 (cleanup): {
        switchInt(_95) -> [0: bb69, otherwise: bb94];
    }

    bb69 (cleanup): {
        switchInt(_96) -> [0: bb70, otherwise: bb95];
    }

    bb70 (cleanup): {
        switchInt(_97) -> [0: bb71, otherwise: bb96];
    }

    bb71 (cleanup): {
        switchInt(_98) -> [0: bb72, otherwise: bb97];
    }

    bb72 (cleanup): {
        switchInt(_99) -> [0: bb73, otherwise: bb98];
    }

    bb73 (cleanup): {
        resume;
    }

    bb74 (cleanup): {
        drop(_26) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_76) -> [0: bb50, otherwise: bb74];
    }

    bb76 (cleanup): {
        drop(_25) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_24) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_23) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_22) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_21) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_20) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_19) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_18) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_17) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_16) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_15) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_14) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_13) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_12) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_11) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_10) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_9) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_8) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_7) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_6) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_5) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_4) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_3) -> [return: bb73, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25)) -> S25<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25> {
    debug self => _1;
    let mut _0: externals::function::inner::S25<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let _16: A15;
    let _17: A16;
    let _18: A17;
    let _19: A18;
    let _20: A19;
    let _21: A20;
    let _22: A21;
    let _23: A22;
    let _24: A23;
    let _25: A24;
    let _26: A25;
    let mut _27: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A2;
    let mut _30: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A3;
    let mut _32: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A4;
    let mut _34: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A5;
    let mut _36: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A6;
    let mut _38: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A7;
    let mut _40: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A8;
    let mut _42: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A9;
    let mut _44: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A10;
    let mut _46: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A11;
    let mut _48: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A12;
    let mut _50: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A13;
    let mut _52: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A14;
    let mut _54: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A15;
    let mut _56: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A16;
    let mut _58: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A17;
    let mut _60: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A18;
    let mut _62: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A19;
    let mut _64: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A20;
    let mut _66: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _67: A21;
    let mut _68: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _69: A22;
    let mut _70: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _71: A23;
    let mut _72: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _73: A24;
    let mut _74: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _75: A25;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
        debug A24 => _25;
        debug A25 => _26;
    }

    bb0: {
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _2 = move (_1.0: A1);
        _99 = const true;
        _3 = move (_1.1: A2);
        _98 = const true;
        _4 = move (_1.2: A3);
        _97 = const true;
        _5 = move (_1.3: A4);
        _96 = const true;
        _6 = move (_1.4: A5);
        _95 = const true;
        _7 = move (_1.5: A6);
        _94 = const true;
        _8 = move (_1.6: A7);
        _93 = const true;
        _9 = move (_1.7: A8);
        _92 = const true;
        _10 = move (_1.8: A9);
        _91 = const true;
        _11 = move (_1.9: A10);
        _90 = const true;
        _12 = move (_1.10: A11);
        _89 = const true;
        _13 = move (_1.11: A12);
        _88 = const true;
        _14 = move (_1.12: A13);
        _87 = const true;
        _15 = move (_1.13: A14);
        _86 = const true;
        _16 = move (_1.14: A15);
        _85 = const true;
        _17 = move (_1.15: A16);
        _84 = const true;
        _18 = move (_1.16: A17);
        _83 = const true;
        _19 = move (_1.17: A18);
        _82 = const true;
        _20 = move (_1.18: A19);
        _81 = const true;
        _21 = move (_1.19: A20);
        _80 = const true;
        _22 = move (_1.20: A21);
        _79 = const true;
        _23 = move (_1.21: A22);
        _78 = const true;
        _24 = move (_1.22: A23);
        _77 = const true;
        _25 = move (_1.23: A24);
        _76 = const true;
        _26 = move (_1.24: A25);
        _27 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb75];
    }

    bb1: {
        _99 = const false;
        _29 = move _3;
        _28 = <A2 as FromToNativeWasmType>::to_native(move _29) -> [return: bb2, unwind: bb49];
    }

    bb2: {
        _98 = const false;
        _31 = move _4;
        _30 = <A3 as FromToNativeWasmType>::to_native(move _31) -> [return: bb3, unwind: bb48];
    }

    bb3: {
        _97 = const false;
        _33 = move _5;
        _32 = <A4 as FromToNativeWasmType>::to_native(move _33) -> [return: bb4, unwind: bb47];
    }

    bb4: {
        _96 = const false;
        _35 = move _6;
        _34 = <A5 as FromToNativeWasmType>::to_native(move _35) -> [return: bb5, unwind: bb46];
    }

    bb5: {
        _95 = const false;
        _37 = move _7;
        _36 = <A6 as FromToNativeWasmType>::to_native(move _37) -> [return: bb6, unwind: bb45];
    }

    bb6: {
        _94 = const false;
        _39 = move _8;
        _38 = <A7 as FromToNativeWasmType>::to_native(move _39) -> [return: bb7, unwind: bb44];
    }

    bb7: {
        _93 = const false;
        _41 = move _9;
        _40 = <A8 as FromToNativeWasmType>::to_native(move _41) -> [return: bb8, unwind: bb43];
    }

    bb8: {
        _92 = const false;
        _43 = move _10;
        _42 = <A9 as FromToNativeWasmType>::to_native(move _43) -> [return: bb9, unwind: bb42];
    }

    bb9: {
        _91 = const false;
        _45 = move _11;
        _44 = <A10 as FromToNativeWasmType>::to_native(move _45) -> [return: bb10, unwind: bb41];
    }

    bb10: {
        _90 = const false;
        _47 = move _12;
        _46 = <A11 as FromToNativeWasmType>::to_native(move _47) -> [return: bb11, unwind: bb40];
    }

    bb11: {
        _89 = const false;
        _49 = move _13;
        _48 = <A12 as FromToNativeWasmType>::to_native(move _49) -> [return: bb12, unwind: bb39];
    }

    bb12: {
        _88 = const false;
        _51 = move _14;
        _50 = <A13 as FromToNativeWasmType>::to_native(move _51) -> [return: bb13, unwind: bb38];
    }

    bb13: {
        _87 = const false;
        _53 = move _15;
        _52 = <A14 as FromToNativeWasmType>::to_native(move _53) -> [return: bb14, unwind: bb37];
    }

    bb14: {
        _86 = const false;
        _55 = move _16;
        _54 = <A15 as FromToNativeWasmType>::to_native(move _55) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        _85 = const false;
        _57 = move _17;
        _56 = <A16 as FromToNativeWasmType>::to_native(move _57) -> [return: bb16, unwind: bb35];
    }

    bb16: {
        _84 = const false;
        _59 = move _18;
        _58 = <A17 as FromToNativeWasmType>::to_native(move _59) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        _83 = const false;
        _61 = move _19;
        _60 = <A18 as FromToNativeWasmType>::to_native(move _61) -> [return: bb18, unwind: bb33];
    }

    bb18: {
        _82 = const false;
        _63 = move _20;
        _62 = <A19 as FromToNativeWasmType>::to_native(move _63) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        _81 = const false;
        _65 = move _21;
        _64 = <A20 as FromToNativeWasmType>::to_native(move _65) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        _80 = const false;
        _67 = move _22;
        _66 = <A21 as FromToNativeWasmType>::to_native(move _67) -> [return: bb21, unwind: bb30];
    }

    bb21: {
        _79 = const false;
        _69 = move _23;
        _68 = <A22 as FromToNativeWasmType>::to_native(move _69) -> [return: bb22, unwind: bb29];
    }

    bb22: {
        _78 = const false;
        _71 = move _24;
        _70 = <A23 as FromToNativeWasmType>::to_native(move _71) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        _77 = const false;
        _73 = move _25;
        _72 = <A24 as FromToNativeWasmType>::to_native(move _73) -> [return: bb24, unwind: bb27];
    }

    bb24: {
        _76 = const false;
        _75 = move _26;
        _74 = <A25 as FromToNativeWasmType>::to_native(move _75) -> [return: bb25, unwind: bb26];
    }

    bb25: {
        _0 = S25::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25>(move _27, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56, move _58, move _60, move _62, move _64, move _66, move _68, move _70, move _72, move _74);
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        _88 = const false;
        _89 = const false;
        _90 = const false;
        _91 = const false;
        _92 = const false;
        _93 = const false;
        _94 = const false;
        _95 = const false;
        _96 = const false;
        _97 = const false;
        _98 = const false;
        _99 = const false;
        return;
    }

    bb26 (cleanup): {
        drop(_72) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_70) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_68) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_66) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_64) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_62) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_60) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_58) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_56) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_54) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_52) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_50) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_48) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_46) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_44) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_42) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_40) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_38) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_36) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_34) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_32) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_30) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_28) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_27) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_77) -> [0: bb51, otherwise: bb76];
    }

    bb51 (cleanup): {
        switchInt(_78) -> [0: bb52, otherwise: bb77];
    }

    bb52 (cleanup): {
        switchInt(_79) -> [0: bb53, otherwise: bb78];
    }

    bb53 (cleanup): {
        switchInt(_80) -> [0: bb54, otherwise: bb79];
    }

    bb54 (cleanup): {
        switchInt(_81) -> [0: bb55, otherwise: bb80];
    }

    bb55 (cleanup): {
        switchInt(_82) -> [0: bb56, otherwise: bb81];
    }

    bb56 (cleanup): {
        switchInt(_83) -> [0: bb57, otherwise: bb82];
    }

    bb57 (cleanup): {
        switchInt(_84) -> [0: bb58, otherwise: bb83];
    }

    bb58 (cleanup): {
        switchInt(_85) -> [0: bb59, otherwise: bb84];
    }

    bb59 (cleanup): {
        switchInt(_86) -> [0: bb60, otherwise: bb85];
    }

    bb60 (cleanup): {
        switchInt(_87) -> [0: bb61, otherwise: bb86];
    }

    bb61 (cleanup): {
        switchInt(_88) -> [0: bb62, otherwise: bb87];
    }

    bb62 (cleanup): {
        switchInt(_89) -> [0: bb63, otherwise: bb88];
    }

    bb63 (cleanup): {
        switchInt(_90) -> [0: bb64, otherwise: bb89];
    }

    bb64 (cleanup): {
        switchInt(_91) -> [0: bb65, otherwise: bb90];
    }

    bb65 (cleanup): {
        switchInt(_92) -> [0: bb66, otherwise: bb91];
    }

    bb66 (cleanup): {
        switchInt(_93) -> [0: bb67, otherwise: bb92];
    }

    bb67 (cleanup): {
        switchInt(_94) -> [0: bb68, otherwise: bb93];
    }

    bb68 (cleanup): {
        switchInt(_95) -> [0: bb69, otherwise: bb94];
    }

    bb69 (cleanup): {
        switchInt(_96) -> [0: bb70, otherwise: bb95];
    }

    bb70 (cleanup): {
        switchInt(_97) -> [0: bb71, otherwise: bb96];
    }

    bb71 (cleanup): {
        switchInt(_98) -> [0: bb72, otherwise: bb97];
    }

    bb72 (cleanup): {
        switchInt(_99) -> [0: bb73, otherwise: bb98];
    }

    bb73 (cleanup): {
        resume;
    }

    bb74 (cleanup): {
        drop(_26) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_76) -> [0: bb50, otherwise: bb74];
    }

    bb76 (cleanup): {
        drop(_25) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_24) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_23) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_22) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_21) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_20) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_19) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_18) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_17) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_16) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_15) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_14) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_13) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_12) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_11) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_10) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_9) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_8) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_7) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_6) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_5) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_4) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_3) -> [return: bb73, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 25];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 25] = {
    let mut _0: &[wasmer_types::Type; 25];
    let mut _1: [wasmer_types::Type; 25];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native, <A24 as externals::function::inner::FromToNativeWasmType>::Native, <A25 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native, <A24 as externals::function::inner::FromToNativeWasmType>::Native, <A25 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native, _22: <A21 as FromToNativeWasmType>::Native, _23: <A22 as FromToNativeWasmType>::Native, _24: <A23 as FromToNativeWasmType>::Native, _25: <A24 as FromToNativeWasmType>::Native, _26: <A25 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    debug A21 => _22;
    debug A22 => _23;
    debug A23 => _24;
    debug A24 => _25;
    debug A25 => _26;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _27: &Func;
    let _28: &Func;
    let _29: *const Func;
    let mut _30: *const ();
    let mut _32: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _33: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _34: &&Func;
    let mut _35: isize;
    let mut _36: isize;
    let mut _39: !;
    let mut _40: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _41: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _43: !;
    let mut _45: isize;
    scope 1 {
        debug func => _27;
        let _31: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _31;
            let _37: Rets;
            let _38: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _42: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _37;
            }
            scope 5 {
                debug trap => _38;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _42;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _44: &();
    }

    bb0: {
        _44 = const _;
        _30 = &raw const (*_44);
        _29 = move _30 as *const Func (PtrToPtr);
        _28 = &(*_29);
        _27 = _28;
        _34 = &_27;
        _33 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _34, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21, A21: move _22, A22: move _23, A23: move _24, A24: move _25, A25: move _26 };
        _32 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _33);
        _31 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _36 = discriminant(_31);
        switchInt(move _36) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _35 = discriminant(((_31 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _35) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _42 = move ((_31 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _43 = resume_panic(move _42) -> unwind continue;
    }

    bb5: {
        _37 = move ((((_31 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _37) -> [return: bb6, unwind continue];
    }

    bb6: {
        _45 = discriminant(_31);
        switchInt(move _45) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _38 = move ((((_31 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _41 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _38) -> [return: bb8, unwind continue];
    }

    bb8: {
        _40 = move _41 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _39 = raise_user_trap(move _40) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A21 => (_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A22 => (_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A23 => (_1.23: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A24 => (_1.24: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A25 => (_1.25: <A25 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A21;
    let mut _45: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A22;
    let mut _47: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A23;
    let mut _49: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A24;
    let mut _51: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A25;
    let mut _53: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: &&Func;
    let mut _55: &Func;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;

    bb0: {
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _103 = const false;
        _102 = const false;
        _101 = const false;
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _80 = const true;
        _81 = const true;
        _82 = const true;
        _83 = const true;
        _84 = const true;
        _85 = const true;
        _86 = const true;
        _87 = const true;
        _88 = const true;
        _89 = const true;
        _90 = const true;
        _91 = const true;
        _92 = const true;
        _93 = const true;
        _94 = const true;
        _95 = const true;
        _96 = const true;
        _97 = const true;
        _98 = const true;
        _99 = const true;
        _100 = const true;
        _101 = const true;
        _102 = const true;
        _103 = const true;
        _54 = deref_copy (_1.0: &&Func);
        _55 = deref_copy (*_54);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb124];
    }

    bb1: {
        _79 = const true;
        _103 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb76];
    }

    bb2: {
        _78 = const true;
        _102 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb74];
    }

    bb3: {
        _77 = const true;
        _101 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb72];
    }

    bb4: {
        _76 = const true;
        _100 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb70];
    }

    bb5: {
        _75 = const true;
        _99 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb68];
    }

    bb6: {
        _74 = const true;
        _98 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb66];
    }

    bb7: {
        _73 = const true;
        _97 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb64];
    }

    bb8: {
        _72 = const true;
        _96 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb62];
    }

    bb9: {
        _71 = const true;
        _95 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb60];
    }

    bb10: {
        _70 = const true;
        _94 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb58];
    }

    bb11: {
        _69 = const true;
        _93 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb56];
    }

    bb12: {
        _68 = const true;
        _92 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb54];
    }

    bb13: {
        _67 = const true;
        _91 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb52];
    }

    bb14: {
        _66 = const true;
        _90 = const false;
        _33 = move (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb50];
    }

    bb15: {
        _65 = const true;
        _89 = const false;
        _35 = move (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb48];
    }

    bb16: {
        _64 = const true;
        _88 = const false;
        _37 = move (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb46];
    }

    bb17: {
        _63 = const true;
        _87 = const false;
        _39 = move (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb44];
    }

    bb18: {
        _62 = const true;
        _86 = const false;
        _41 = move (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb42];
    }

    bb19: {
        _61 = const true;
        _85 = const false;
        _43 = move (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb40];
    }

    bb20: {
        _60 = const true;
        _84 = const false;
        _45 = move (_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = <A21 as FromToNativeWasmType>::from_native(move _45) -> [return: bb21, unwind: bb38];
    }

    bb21: {
        _59 = const true;
        _83 = const false;
        _47 = move (_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = <A22 as FromToNativeWasmType>::from_native(move _47) -> [return: bb22, unwind: bb36];
    }

    bb22: {
        _58 = const true;
        _82 = const false;
        _49 = move (_1.23: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
        _48 = <A23 as FromToNativeWasmType>::from_native(move _49) -> [return: bb23, unwind: bb34];
    }

    bb23: {
        _57 = const true;
        _81 = const false;
        _51 = move (_1.24: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
        _50 = <A24 as FromToNativeWasmType>::from_native(move _51) -> [return: bb24, unwind: bb32];
    }

    bb24: {
        _56 = const true;
        _80 = const false;
        _53 = move (_1.25: <A25 as externals::function::inner::FromToNativeWasmType>::Native);
        _52 = <A25 as FromToNativeWasmType>::from_native(move _53) -> [return: bb25, unwind: bb30];
    }

    bb25: {
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25)>>::call(_55, move _3) -> [return: bb26, unwind: bb30];
    }

    bb26: {
        _56 = const false;
        _57 = const false;
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb27, unwind: bb124];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        drop(_50) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_56) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_48) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_57) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_46) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_58) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_44) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_59) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_42) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_60) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_40) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_61) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_38) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_62) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_36) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_63) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_34) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_64) -> [0: bb48, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_32) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_65) -> [0: bb50, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_30) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_66) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_28) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_67) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_26) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_68) -> [0: bb56, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_24) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_69) -> [0: bb58, otherwise: bb55];
    }

    bb57 (cleanup): {
        drop(_22) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_70) -> [0: bb60, otherwise: bb57];
    }

    bb59 (cleanup): {
        drop(_20) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_71) -> [0: bb62, otherwise: bb59];
    }

    bb61 (cleanup): {
        drop(_18) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_72) -> [0: bb64, otherwise: bb61];
    }

    bb63 (cleanup): {
        drop(_16) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_73) -> [0: bb66, otherwise: bb63];
    }

    bb65 (cleanup): {
        drop(_14) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_74) -> [0: bb68, otherwise: bb65];
    }

    bb67 (cleanup): {
        drop(_12) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_75) -> [0: bb70, otherwise: bb67];
    }

    bb69 (cleanup): {
        drop(_10) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_76) -> [0: bb72, otherwise: bb69];
    }

    bb71 (cleanup): {
        drop(_8) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_77) -> [0: bb74, otherwise: bb71];
    }

    bb73 (cleanup): {
        drop(_6) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_78) -> [0: bb76, otherwise: bb73];
    }

    bb75 (cleanup): {
        drop(_4) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_79) -> [0: bb124, otherwise: bb75];
    }

    bb77 (cleanup): {
        switchInt(_80) -> [0: bb28, otherwise: bb78];
    }

    bb78 (cleanup): {
        drop((_1.25: <A25 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_81) -> [0: bb77, otherwise: bb80];
    }

    bb80 (cleanup): {
        drop((_1.24: <A24 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_82) -> [0: bb79, otherwise: bb82];
    }

    bb82 (cleanup): {
        drop((_1.23: <A23 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_83) -> [0: bb81, otherwise: bb84];
    }

    bb84 (cleanup): {
        drop((_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        switchInt(_84) -> [0: bb83, otherwise: bb86];
    }

    bb86 (cleanup): {
        drop((_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_85) -> [0: bb85, otherwise: bb88];
    }

    bb88 (cleanup): {
        drop((_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_86) -> [0: bb87, otherwise: bb90];
    }

    bb90 (cleanup): {
        drop((_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_87) -> [0: bb89, otherwise: bb92];
    }

    bb92 (cleanup): {
        drop((_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_88) -> [0: bb91, otherwise: bb94];
    }

    bb94 (cleanup): {
        drop((_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        switchInt(_89) -> [0: bb93, otherwise: bb96];
    }

    bb96 (cleanup): {
        drop((_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        switchInt(_90) -> [0: bb95, otherwise: bb98];
    }

    bb98 (cleanup): {
        drop((_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        switchInt(_91) -> [0: bb97, otherwise: bb100];
    }

    bb100 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        switchInt(_92) -> [0: bb99, otherwise: bb102];
    }

    bb102 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        switchInt(_93) -> [0: bb101, otherwise: bb104];
    }

    bb104 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        switchInt(_94) -> [0: bb103, otherwise: bb106];
    }

    bb106 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        switchInt(_95) -> [0: bb105, otherwise: bb108];
    }

    bb108 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        switchInt(_96) -> [0: bb107, otherwise: bb110];
    }

    bb110 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        switchInt(_97) -> [0: bb109, otherwise: bb112];
    }

    bb112 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        switchInt(_98) -> [0: bb111, otherwise: bb114];
    }

    bb114 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        switchInt(_99) -> [0: bb113, otherwise: bb116];
    }

    bb116 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        switchInt(_100) -> [0: bb115, otherwise: bb118];
    }

    bb118 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        switchInt(_101) -> [0: bb117, otherwise: bb120];
    }

    bb120 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        switchInt(_102) -> [0: bb119, otherwise: bb122];
    }

    bb122 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        switchInt(_103) -> [0: bb121, otherwise: bb123];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native, <A24 as externals::function::inner::FromToNativeWasmType>::Native, <A25 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native, <A24 as externals::function::inner::FromToNativeWasmType>::Native, <A25 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native, _22: <A21 as FromToNativeWasmType>::Native, _23: <A22 as FromToNativeWasmType>::Native, _24: <A23 as FromToNativeWasmType>::Native, _25: <A24 as FromToNativeWasmType>::Native, _26: <A25 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    debug A21 => _22;
    debug A22 => _23;
    debug A23 => _24;
    debug A24 => _25;
    debug A25 => _26;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _27: &Func;
    let _28: &Func;
    let _29: *const Func;
    let mut _30: *const ();
    let mut _32: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _33: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _34: &&Func;
    let mut _35: &&Env;
    let mut _36: isize;
    let mut _37: isize;
    let mut _40: !;
    let mut _41: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _42: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _44: !;
    let mut _46: isize;
    scope 1 {
        debug func => _27;
        let _31: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _31;
            let _38: Rets;
            let _39: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _43: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _38;
            }
            scope 5 {
                debug trap => _39;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _43;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _45: &();
    }

    bb0: {
        _45 = const _;
        _30 = &raw const (*_45);
        _29 = move _30 as *const Func (PtrToPtr);
        _28 = &(*_29);
        _27 = _28;
        _34 = &_27;
        _35 = &_1;
        _33 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _34, env: move _35, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21, A21: move _22, A22: move _23, A23: move _24, A24: move _25, A25: move _26 };
        _32 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _33);
        _31 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _37 = discriminant(_31);
        switchInt(move _37) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _36 = discriminant(((_31 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _36) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _43 = move ((_31 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _44 = resume_panic(move _43) -> unwind continue;
    }

    bb5: {
        _38 = move ((((_31 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _38) -> [return: bb6, unwind continue];
    }

    bb6: {
        _46 = discriminant(_31);
        switchInt(move _46) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _39 = move ((((_31 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _42 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _39) -> [return: bb8, unwind continue];
    }

    bb8: {
        _41 = move _42 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _40 = raise_user_trap(move _41) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A21 => (_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A22 => (_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A23 => (_1.24: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A24 => (_1.25: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A25 => (_1.26: <A25 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A21;
    let mut _45: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A22;
    let mut _47: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A23;
    let mut _49: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A24;
    let mut _51: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A25;
    let mut _53: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: &&Func;
    let mut _55: &Func;
    let mut _56: &&Env;
    let mut _57: &Env;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;

    bb0: {
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _105 = const false;
        _104 = const false;
        _103 = const false;
        _102 = const false;
        _101 = const false;
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _82 = const true;
        _83 = const true;
        _84 = const true;
        _85 = const true;
        _86 = const true;
        _87 = const true;
        _88 = const true;
        _89 = const true;
        _90 = const true;
        _91 = const true;
        _92 = const true;
        _93 = const true;
        _94 = const true;
        _95 = const true;
        _96 = const true;
        _97 = const true;
        _98 = const true;
        _99 = const true;
        _100 = const true;
        _101 = const true;
        _102 = const true;
        _103 = const true;
        _104 = const true;
        _105 = const true;
        _54 = deref_copy (_1.0: &&Func);
        _55 = deref_copy (*_54);
        _56 = deref_copy (_1.1: &&Env);
        _57 = deref_copy (*_56);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb124];
    }

    bb1: {
        _81 = const true;
        _105 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb76];
    }

    bb2: {
        _80 = const true;
        _104 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb74];
    }

    bb3: {
        _79 = const true;
        _103 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb72];
    }

    bb4: {
        _78 = const true;
        _102 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb70];
    }

    bb5: {
        _77 = const true;
        _101 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb68];
    }

    bb6: {
        _76 = const true;
        _100 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb66];
    }

    bb7: {
        _75 = const true;
        _99 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb64];
    }

    bb8: {
        _74 = const true;
        _98 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb62];
    }

    bb9: {
        _73 = const true;
        _97 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb60];
    }

    bb10: {
        _72 = const true;
        _96 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb58];
    }

    bb11: {
        _71 = const true;
        _95 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb56];
    }

    bb12: {
        _70 = const true;
        _94 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb54];
    }

    bb13: {
        _69 = const true;
        _93 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb52];
    }

    bb14: {
        _68 = const true;
        _92 = const false;
        _33 = move (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb50];
    }

    bb15: {
        _67 = const true;
        _91 = const false;
        _35 = move (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb48];
    }

    bb16: {
        _66 = const true;
        _90 = const false;
        _37 = move (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb46];
    }

    bb17: {
        _65 = const true;
        _89 = const false;
        _39 = move (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb44];
    }

    bb18: {
        _64 = const true;
        _88 = const false;
        _41 = move (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb42];
    }

    bb19: {
        _63 = const true;
        _87 = const false;
        _43 = move (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb40];
    }

    bb20: {
        _62 = const true;
        _86 = const false;
        _45 = move (_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = <A21 as FromToNativeWasmType>::from_native(move _45) -> [return: bb21, unwind: bb38];
    }

    bb21: {
        _61 = const true;
        _85 = const false;
        _47 = move (_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = <A22 as FromToNativeWasmType>::from_native(move _47) -> [return: bb22, unwind: bb36];
    }

    bb22: {
        _60 = const true;
        _84 = const false;
        _49 = move (_1.24: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
        _48 = <A23 as FromToNativeWasmType>::from_native(move _49) -> [return: bb23, unwind: bb34];
    }

    bb23: {
        _59 = const true;
        _83 = const false;
        _51 = move (_1.25: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
        _50 = <A24 as FromToNativeWasmType>::from_native(move _51) -> [return: bb24, unwind: bb32];
    }

    bb24: {
        _58 = const true;
        _82 = const false;
        _53 = move (_1.26: <A25 as externals::function::inner::FromToNativeWasmType>::Native);
        _52 = <A25 as FromToNativeWasmType>::from_native(move _53) -> [return: bb25, unwind: bb30];
    }

    bb25: {
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _3 = (_57, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25)>>::call(_55, move _3) -> [return: bb26, unwind: bb30];
    }

    bb26: {
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb27, unwind: bb124];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        drop(_50) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_58) -> [0: bb32, otherwise: bb29];
    }

    bb31 (cleanup): {
        drop(_48) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_59) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_46) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_60) -> [0: bb36, otherwise: bb33];
    }

    bb35 (cleanup): {
        drop(_44) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_61) -> [0: bb38, otherwise: bb35];
    }

    bb37 (cleanup): {
        drop(_42) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_62) -> [0: bb40, otherwise: bb37];
    }

    bb39 (cleanup): {
        drop(_40) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_63) -> [0: bb42, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_38) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_64) -> [0: bb44, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_36) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_65) -> [0: bb46, otherwise: bb43];
    }

    bb45 (cleanup): {
        drop(_34) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_66) -> [0: bb48, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_32) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_67) -> [0: bb50, otherwise: bb47];
    }

    bb49 (cleanup): {
        drop(_30) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_68) -> [0: bb52, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_28) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_69) -> [0: bb54, otherwise: bb51];
    }

    bb53 (cleanup): {
        drop(_26) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        switchInt(_70) -> [0: bb56, otherwise: bb53];
    }

    bb55 (cleanup): {
        drop(_24) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        switchInt(_71) -> [0: bb58, otherwise: bb55];
    }

    bb57 (cleanup): {
        drop(_22) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_72) -> [0: bb60, otherwise: bb57];
    }

    bb59 (cleanup): {
        drop(_20) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        switchInt(_73) -> [0: bb62, otherwise: bb59];
    }

    bb61 (cleanup): {
        drop(_18) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        switchInt(_74) -> [0: bb64, otherwise: bb61];
    }

    bb63 (cleanup): {
        drop(_16) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        switchInt(_75) -> [0: bb66, otherwise: bb63];
    }

    bb65 (cleanup): {
        drop(_14) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        switchInt(_76) -> [0: bb68, otherwise: bb65];
    }

    bb67 (cleanup): {
        drop(_12) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_77) -> [0: bb70, otherwise: bb67];
    }

    bb69 (cleanup): {
        drop(_10) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_78) -> [0: bb72, otherwise: bb69];
    }

    bb71 (cleanup): {
        drop(_8) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_79) -> [0: bb74, otherwise: bb71];
    }

    bb73 (cleanup): {
        drop(_6) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        switchInt(_80) -> [0: bb76, otherwise: bb73];
    }

    bb75 (cleanup): {
        drop(_4) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        switchInt(_81) -> [0: bb124, otherwise: bb75];
    }

    bb77 (cleanup): {
        switchInt(_82) -> [0: bb28, otherwise: bb78];
    }

    bb78 (cleanup): {
        drop((_1.26: <A25 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_83) -> [0: bb77, otherwise: bb80];
    }

    bb80 (cleanup): {
        drop((_1.25: <A24 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_84) -> [0: bb79, otherwise: bb82];
    }

    bb82 (cleanup): {
        drop((_1.24: <A23 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_85) -> [0: bb81, otherwise: bb84];
    }

    bb84 (cleanup): {
        drop((_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        switchInt(_86) -> [0: bb83, otherwise: bb86];
    }

    bb86 (cleanup): {
        drop((_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_87) -> [0: bb85, otherwise: bb88];
    }

    bb88 (cleanup): {
        drop((_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_88) -> [0: bb87, otherwise: bb90];
    }

    bb90 (cleanup): {
        drop((_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_89) -> [0: bb89, otherwise: bb92];
    }

    bb92 (cleanup): {
        drop((_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_90) -> [0: bb91, otherwise: bb94];
    }

    bb94 (cleanup): {
        drop((_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        switchInt(_91) -> [0: bb93, otherwise: bb96];
    }

    bb96 (cleanup): {
        drop((_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        switchInt(_92) -> [0: bb95, otherwise: bb98];
    }

    bb98 (cleanup): {
        drop((_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        switchInt(_93) -> [0: bb97, otherwise: bb100];
    }

    bb100 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        switchInt(_94) -> [0: bb99, otherwise: bb102];
    }

    bb102 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        switchInt(_95) -> [0: bb101, otherwise: bb104];
    }

    bb104 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        switchInt(_96) -> [0: bb103, otherwise: bb106];
    }

    bb106 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        switchInt(_97) -> [0: bb105, otherwise: bb108];
    }

    bb108 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        switchInt(_98) -> [0: bb107, otherwise: bb110];
    }

    bb110 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        switchInt(_99) -> [0: bb109, otherwise: bb112];
    }

    bb112 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        switchInt(_100) -> [0: bb111, otherwise: bb114];
    }

    bb114 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        switchInt(_101) -> [0: bb113, otherwise: bb116];
    }

    bb116 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        switchInt(_102) -> [0: bb115, otherwise: bb118];
    }

    bb118 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        switchInt(_103) -> [0: bb117, otherwise: bb120];
    }

    bb120 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        switchInt(_104) -> [0: bb119, otherwise: bb122];
    }

    bb122 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        switchInt(_105) -> [0: bb121, otherwise: bb123];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::Array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 26_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_array(_1: [i128; 26]) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26) {
    debug array => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26);
    let mut _28: A1;
    let mut _29: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A2;
    let mut _31: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A3;
    let mut _33: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A4;
    let mut _35: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A5;
    let mut _37: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A6;
    let mut _39: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A7;
    let mut _41: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A8;
    let mut _43: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A9;
    let mut _45: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A10;
    let mut _47: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A11;
    let mut _49: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A12;
    let mut _51: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A13;
    let mut _53: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A14;
    let mut _55: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A15;
    let mut _57: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A16;
    let mut _59: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A17;
    let mut _61: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A18;
    let mut _63: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A19;
    let mut _65: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A20;
    let mut _67: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _68: A21;
    let mut _69: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _70: A22;
    let mut _71: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _72: A23;
    let mut _73: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _74: A24;
    let mut _75: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _76: A25;
    let mut _77: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _78: A26;
    let mut _79: <A26 as externals::function::inner::FromToNativeWasmType>::Native;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
        debug A24 => _25;
        debug A25 => _26;
        debug A26 => _27;
    }
    scope 2 {
        let _2: i128;
        let _3: i128;
        let _4: i128;
        let _5: i128;
        let _6: i128;
        let _7: i128;
        let _8: i128;
        let _9: i128;
        let _10: i128;
        let _11: i128;
        let _12: i128;
        let _13: i128;
        let _14: i128;
        let _15: i128;
        let _16: i128;
        let _17: i128;
        let _18: i128;
        let _19: i128;
        let _20: i128;
        let _21: i128;
        let _22: i128;
        let _23: i128;
        let _24: i128;
        let _25: i128;
        let _26: i128;
        let _27: i128;
    }

    bb0: {
        _2 = _1[0 of 26];
        _3 = _1[1 of 26];
        _4 = _1[2 of 26];
        _5 = _1[3 of 26];
        _6 = _1[4 of 26];
        _7 = _1[5 of 26];
        _8 = _1[6 of 26];
        _9 = _1[7 of 26];
        _10 = _1[8 of 26];
        _11 = _1[9 of 26];
        _12 = _1[10 of 26];
        _13 = _1[11 of 26];
        _14 = _1[12 of 26];
        _15 = _1[13 of 26];
        _16 = _1[14 of 26];
        _17 = _1[15 of 26];
        _18 = _1[16 of 26];
        _19 = _1[17 of 26];
        _20 = _1[18 of 26];
        _21 = _1[19 of 26];
        _22 = _1[20 of 26];
        _23 = _1[21 of 26];
        _24 = _1[22 of 26];
        _25 = _1[23 of 26];
        _26 = _1[24 of 26];
        _27 = _1[25 of 26];
        _29 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _28 = <A1 as FromToNativeWasmType>::from_native(move _29) -> [return: bb2, unwind continue];
    }

    bb2: {
        _31 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_3) -> [return: bb3, unwind: bb77];
    }

    bb3: {
        _30 = <A2 as FromToNativeWasmType>::from_native(move _31) -> [return: bb4, unwind: bb77];
    }

    bb4: {
        _33 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_4) -> [return: bb5, unwind: bb76];
    }

    bb5: {
        _32 = <A3 as FromToNativeWasmType>::from_native(move _33) -> [return: bb6, unwind: bb76];
    }

    bb6: {
        _35 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_5) -> [return: bb7, unwind: bb75];
    }

    bb7: {
        _34 = <A4 as FromToNativeWasmType>::from_native(move _35) -> [return: bb8, unwind: bb75];
    }

    bb8: {
        _37 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_6) -> [return: bb9, unwind: bb74];
    }

    bb9: {
        _36 = <A5 as FromToNativeWasmType>::from_native(move _37) -> [return: bb10, unwind: bb74];
    }

    bb10: {
        _39 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_7) -> [return: bb11, unwind: bb73];
    }

    bb11: {
        _38 = <A6 as FromToNativeWasmType>::from_native(move _39) -> [return: bb12, unwind: bb73];
    }

    bb12: {
        _41 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_8) -> [return: bb13, unwind: bb72];
    }

    bb13: {
        _40 = <A7 as FromToNativeWasmType>::from_native(move _41) -> [return: bb14, unwind: bb72];
    }

    bb14: {
        _43 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_9) -> [return: bb15, unwind: bb71];
    }

    bb15: {
        _42 = <A8 as FromToNativeWasmType>::from_native(move _43) -> [return: bb16, unwind: bb71];
    }

    bb16: {
        _45 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_10) -> [return: bb17, unwind: bb70];
    }

    bb17: {
        _44 = <A9 as FromToNativeWasmType>::from_native(move _45) -> [return: bb18, unwind: bb70];
    }

    bb18: {
        _47 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_11) -> [return: bb19, unwind: bb69];
    }

    bb19: {
        _46 = <A10 as FromToNativeWasmType>::from_native(move _47) -> [return: bb20, unwind: bb69];
    }

    bb20: {
        _49 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_12) -> [return: bb21, unwind: bb68];
    }

    bb21: {
        _48 = <A11 as FromToNativeWasmType>::from_native(move _49) -> [return: bb22, unwind: bb68];
    }

    bb22: {
        _51 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_13) -> [return: bb23, unwind: bb67];
    }

    bb23: {
        _50 = <A12 as FromToNativeWasmType>::from_native(move _51) -> [return: bb24, unwind: bb67];
    }

    bb24: {
        _53 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_14) -> [return: bb25, unwind: bb66];
    }

    bb25: {
        _52 = <A13 as FromToNativeWasmType>::from_native(move _53) -> [return: bb26, unwind: bb66];
    }

    bb26: {
        _55 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_15) -> [return: bb27, unwind: bb65];
    }

    bb27: {
        _54 = <A14 as FromToNativeWasmType>::from_native(move _55) -> [return: bb28, unwind: bb65];
    }

    bb28: {
        _57 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_16) -> [return: bb29, unwind: bb64];
    }

    bb29: {
        _56 = <A15 as FromToNativeWasmType>::from_native(move _57) -> [return: bb30, unwind: bb64];
    }

    bb30: {
        _59 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_17) -> [return: bb31, unwind: bb63];
    }

    bb31: {
        _58 = <A16 as FromToNativeWasmType>::from_native(move _59) -> [return: bb32, unwind: bb63];
    }

    bb32: {
        _61 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_18) -> [return: bb33, unwind: bb62];
    }

    bb33: {
        _60 = <A17 as FromToNativeWasmType>::from_native(move _61) -> [return: bb34, unwind: bb62];
    }

    bb34: {
        _63 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_19) -> [return: bb35, unwind: bb61];
    }

    bb35: {
        _62 = <A18 as FromToNativeWasmType>::from_native(move _63) -> [return: bb36, unwind: bb61];
    }

    bb36: {
        _65 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_20) -> [return: bb37, unwind: bb60];
    }

    bb37: {
        _64 = <A19 as FromToNativeWasmType>::from_native(move _65) -> [return: bb38, unwind: bb60];
    }

    bb38: {
        _67 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_21) -> [return: bb39, unwind: bb59];
    }

    bb39: {
        _66 = <A20 as FromToNativeWasmType>::from_native(move _67) -> [return: bb40, unwind: bb59];
    }

    bb40: {
        _69 = <<A21 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_22) -> [return: bb41, unwind: bb58];
    }

    bb41: {
        _68 = <A21 as FromToNativeWasmType>::from_native(move _69) -> [return: bb42, unwind: bb58];
    }

    bb42: {
        _71 = <<A22 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_23) -> [return: bb43, unwind: bb57];
    }

    bb43: {
        _70 = <A22 as FromToNativeWasmType>::from_native(move _71) -> [return: bb44, unwind: bb57];
    }

    bb44: {
        _73 = <<A23 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_24) -> [return: bb45, unwind: bb56];
    }

    bb45: {
        _72 = <A23 as FromToNativeWasmType>::from_native(move _73) -> [return: bb46, unwind: bb56];
    }

    bb46: {
        _75 = <<A24 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_25) -> [return: bb47, unwind: bb55];
    }

    bb47: {
        _74 = <A24 as FromToNativeWasmType>::from_native(move _75) -> [return: bb48, unwind: bb55];
    }

    bb48: {
        _77 = <<A25 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_26) -> [return: bb49, unwind: bb54];
    }

    bb49: {
        _76 = <A25 as FromToNativeWasmType>::from_native(move _77) -> [return: bb50, unwind: bb54];
    }

    bb50: {
        _79 = <<A26 as FromToNativeWasmType>::Native as NativeWasmType>::from_binary(_27) -> [return: bb51, unwind: bb53];
    }

    bb51: {
        _78 = <A26 as FromToNativeWasmType>::from_native(move _79) -> [return: bb52, unwind: bb53];
    }

    bb52: {
        _0 = (move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56, move _58, move _60, move _62, move _64, move _66, move _68, move _70, move _72, move _74, move _76, move _78);
        return;
    }

    bb53 (cleanup): {
        drop(_76) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_74) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_72) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_70) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        drop(_68) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_66) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_64) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_62) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_60) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_58) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_56) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_54) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_52) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_50) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        drop(_48) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_46) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_44) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_42) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_40) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_38) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_36) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_34) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_32) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_30) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_28) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        resume;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_slice(_1: &[i128]) -> Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26), TryFromSliceError> {
    debug slice => _1;
    let mut _0: std::result::Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26), std::array::TryFromSliceError>;
    let mut _2: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26);
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>, [i128; 26]>;
    let mut _4: std::result::Result<[i128; 26], std::array::TryFromSliceError>;
    let mut _5: isize;
    let _6: [i128; 26];
    scope 1 {
        debug residual => const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()));
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _4 = <&[i128] as TryInto<[i128; 26]>>::try_into(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<[i128; 26], TryFromSliceError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_3 as Continue).0: [i128; 26]);
        _2 = <(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26) as WasmTypeList>::from_array(_6) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = <Result<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26), TryFromSliceError> as FromResidual<Result<Infallible, TryFromSliceError>>>::from_residual(const Result::<Infallible, TryFromSliceError>::Err(TryFromSliceError(()))) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26), TryFromSliceError>::Ok(move _2);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_array(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26)) -> [i128; 26] {
    debug self => _1;
    let mut _0: [i128; 26];
    let mut _28: i128;
    let mut _29: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: i128;
    let mut _31: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A2;
    let mut _33: i128;
    let mut _34: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A3;
    let mut _36: i128;
    let mut _37: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A4;
    let mut _39: i128;
    let mut _40: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A5;
    let mut _42: i128;
    let mut _43: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A6;
    let mut _45: i128;
    let mut _46: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A7;
    let mut _48: i128;
    let mut _49: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A8;
    let mut _51: i128;
    let mut _52: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A9;
    let mut _54: i128;
    let mut _55: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A10;
    let mut _57: i128;
    let mut _58: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A11;
    let mut _60: i128;
    let mut _61: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A12;
    let mut _63: i128;
    let mut _64: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A13;
    let mut _66: i128;
    let mut _67: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _68: A14;
    let mut _69: i128;
    let mut _70: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _71: A15;
    let mut _72: i128;
    let mut _73: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _74: A16;
    let mut _75: i128;
    let mut _76: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _77: A17;
    let mut _78: i128;
    let mut _79: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _80: A18;
    let mut _81: i128;
    let mut _82: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _83: A19;
    let mut _84: i128;
    let mut _85: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _86: A20;
    let mut _87: i128;
    let mut _88: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _89: A21;
    let mut _90: i128;
    let mut _91: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _92: A22;
    let mut _93: i128;
    let mut _94: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _95: A23;
    let mut _96: i128;
    let mut _97: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _98: A24;
    let mut _99: i128;
    let mut _100: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _101: A25;
    let mut _102: i128;
    let mut _103: <A26 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _104: A26;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: bool;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: bool;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: bool;
    let mut _129: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
        debug A24 => _25;
        debug A25 => _26;
        debug A26 => _27;
    }
    scope 2 {
        let _2: A1;
        let _3: A2;
        let _4: A3;
        let _5: A4;
        let _6: A5;
        let _7: A6;
        let _8: A7;
        let _9: A8;
        let _10: A9;
        let _11: A10;
        let _12: A11;
        let _13: A12;
        let _14: A13;
        let _15: A14;
        let _16: A15;
        let _17: A16;
        let _18: A17;
        let _19: A18;
        let _20: A19;
        let _21: A20;
        let _22: A21;
        let _23: A22;
        let _24: A23;
        let _25: A24;
        let _26: A25;
        let _27: A26;
    }

    bb0: {
        _129 = const false;
        _128 = const false;
        _127 = const false;
        _126 = const false;
        _125 = const false;
        _124 = const false;
        _123 = const false;
        _122 = const false;
        _121 = const false;
        _120 = const false;
        _119 = const false;
        _118 = const false;
        _117 = const false;
        _116 = const false;
        _115 = const false;
        _114 = const false;
        _113 = const false;
        _112 = const false;
        _111 = const false;
        _110 = const false;
        _109 = const false;
        _108 = const false;
        _107 = const false;
        _106 = const false;
        _105 = const false;
        _2 = move (_1.0: A1);
        _129 = const true;
        _3 = move (_1.1: A2);
        _128 = const true;
        _4 = move (_1.2: A3);
        _127 = const true;
        _5 = move (_1.3: A4);
        _126 = const true;
        _6 = move (_1.4: A5);
        _125 = const true;
        _7 = move (_1.5: A6);
        _124 = const true;
        _8 = move (_1.6: A7);
        _123 = const true;
        _9 = move (_1.7: A8);
        _122 = const true;
        _10 = move (_1.8: A9);
        _121 = const true;
        _11 = move (_1.9: A10);
        _120 = const true;
        _12 = move (_1.10: A11);
        _119 = const true;
        _13 = move (_1.11: A12);
        _118 = const true;
        _14 = move (_1.12: A13);
        _117 = const true;
        _15 = move (_1.13: A14);
        _116 = const true;
        _16 = move (_1.14: A15);
        _115 = const true;
        _17 = move (_1.15: A16);
        _114 = const true;
        _18 = move (_1.16: A17);
        _113 = const true;
        _19 = move (_1.17: A18);
        _112 = const true;
        _20 = move (_1.18: A19);
        _111 = const true;
        _21 = move (_1.19: A20);
        _110 = const true;
        _22 = move (_1.20: A21);
        _109 = const true;
        _23 = move (_1.21: A22);
        _108 = const true;
        _24 = move (_1.22: A23);
        _107 = const true;
        _25 = move (_1.23: A24);
        _106 = const true;
        _26 = move (_1.24: A25);
        _105 = const true;
        _27 = move (_1.25: A26);
        _29 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb79];
    }

    bb1: {
        _28 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _29) -> [return: bb2, unwind: bb79];
    }

    bb2: {
        _129 = const false;
        _32 = move _3;
        _31 = <A2 as FromToNativeWasmType>::to_native(move _32) -> [return: bb3, unwind: bb79];
    }

    bb3: {
        _30 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _31) -> [return: bb4, unwind: bb79];
    }

    bb4: {
        _128 = const false;
        _35 = move _4;
        _34 = <A3 as FromToNativeWasmType>::to_native(move _35) -> [return: bb5, unwind: bb79];
    }

    bb5: {
        _33 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _34) -> [return: bb6, unwind: bb79];
    }

    bb6: {
        _127 = const false;
        _38 = move _5;
        _37 = <A4 as FromToNativeWasmType>::to_native(move _38) -> [return: bb7, unwind: bb79];
    }

    bb7: {
        _36 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _37) -> [return: bb8, unwind: bb79];
    }

    bb8: {
        _126 = const false;
        _41 = move _6;
        _40 = <A5 as FromToNativeWasmType>::to_native(move _41) -> [return: bb9, unwind: bb79];
    }

    bb9: {
        _39 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _40) -> [return: bb10, unwind: bb79];
    }

    bb10: {
        _125 = const false;
        _44 = move _7;
        _43 = <A6 as FromToNativeWasmType>::to_native(move _44) -> [return: bb11, unwind: bb79];
    }

    bb11: {
        _42 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _43) -> [return: bb12, unwind: bb79];
    }

    bb12: {
        _124 = const false;
        _47 = move _8;
        _46 = <A7 as FromToNativeWasmType>::to_native(move _47) -> [return: bb13, unwind: bb79];
    }

    bb13: {
        _45 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _46) -> [return: bb14, unwind: bb79];
    }

    bb14: {
        _123 = const false;
        _50 = move _9;
        _49 = <A8 as FromToNativeWasmType>::to_native(move _50) -> [return: bb15, unwind: bb79];
    }

    bb15: {
        _48 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _49) -> [return: bb16, unwind: bb79];
    }

    bb16: {
        _122 = const false;
        _53 = move _10;
        _52 = <A9 as FromToNativeWasmType>::to_native(move _53) -> [return: bb17, unwind: bb79];
    }

    bb17: {
        _51 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _52) -> [return: bb18, unwind: bb79];
    }

    bb18: {
        _121 = const false;
        _56 = move _11;
        _55 = <A10 as FromToNativeWasmType>::to_native(move _56) -> [return: bb19, unwind: bb79];
    }

    bb19: {
        _54 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _55) -> [return: bb20, unwind: bb79];
    }

    bb20: {
        _120 = const false;
        _59 = move _12;
        _58 = <A11 as FromToNativeWasmType>::to_native(move _59) -> [return: bb21, unwind: bb79];
    }

    bb21: {
        _57 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _58) -> [return: bb22, unwind: bb79];
    }

    bb22: {
        _119 = const false;
        _62 = move _13;
        _61 = <A12 as FromToNativeWasmType>::to_native(move _62) -> [return: bb23, unwind: bb79];
    }

    bb23: {
        _60 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _61) -> [return: bb24, unwind: bb79];
    }

    bb24: {
        _118 = const false;
        _65 = move _14;
        _64 = <A13 as FromToNativeWasmType>::to_native(move _65) -> [return: bb25, unwind: bb79];
    }

    bb25: {
        _63 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _64) -> [return: bb26, unwind: bb79];
    }

    bb26: {
        _117 = const false;
        _68 = move _15;
        _67 = <A14 as FromToNativeWasmType>::to_native(move _68) -> [return: bb27, unwind: bb79];
    }

    bb27: {
        _66 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _67) -> [return: bb28, unwind: bb79];
    }

    bb28: {
        _116 = const false;
        _71 = move _16;
        _70 = <A15 as FromToNativeWasmType>::to_native(move _71) -> [return: bb29, unwind: bb79];
    }

    bb29: {
        _69 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _70) -> [return: bb30, unwind: bb79];
    }

    bb30: {
        _115 = const false;
        _74 = move _17;
        _73 = <A16 as FromToNativeWasmType>::to_native(move _74) -> [return: bb31, unwind: bb79];
    }

    bb31: {
        _72 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _73) -> [return: bb32, unwind: bb79];
    }

    bb32: {
        _114 = const false;
        _77 = move _18;
        _76 = <A17 as FromToNativeWasmType>::to_native(move _77) -> [return: bb33, unwind: bb79];
    }

    bb33: {
        _75 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _76) -> [return: bb34, unwind: bb79];
    }

    bb34: {
        _113 = const false;
        _80 = move _19;
        _79 = <A18 as FromToNativeWasmType>::to_native(move _80) -> [return: bb35, unwind: bb79];
    }

    bb35: {
        _78 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _79) -> [return: bb36, unwind: bb79];
    }

    bb36: {
        _112 = const false;
        _83 = move _20;
        _82 = <A19 as FromToNativeWasmType>::to_native(move _83) -> [return: bb37, unwind: bb79];
    }

    bb37: {
        _81 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _82) -> [return: bb38, unwind: bb79];
    }

    bb38: {
        _111 = const false;
        _86 = move _21;
        _85 = <A20 as FromToNativeWasmType>::to_native(move _86) -> [return: bb39, unwind: bb79];
    }

    bb39: {
        _84 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _85) -> [return: bb40, unwind: bb79];
    }

    bb40: {
        _110 = const false;
        _89 = move _22;
        _88 = <A21 as FromToNativeWasmType>::to_native(move _89) -> [return: bb41, unwind: bb79];
    }

    bb41: {
        _87 = <<A21 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _88) -> [return: bb42, unwind: bb79];
    }

    bb42: {
        _109 = const false;
        _92 = move _23;
        _91 = <A22 as FromToNativeWasmType>::to_native(move _92) -> [return: bb43, unwind: bb79];
    }

    bb43: {
        _90 = <<A22 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _91) -> [return: bb44, unwind: bb79];
    }

    bb44: {
        _108 = const false;
        _95 = move _24;
        _94 = <A23 as FromToNativeWasmType>::to_native(move _95) -> [return: bb45, unwind: bb79];
    }

    bb45: {
        _93 = <<A23 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _94) -> [return: bb46, unwind: bb79];
    }

    bb46: {
        _107 = const false;
        _98 = move _25;
        _97 = <A24 as FromToNativeWasmType>::to_native(move _98) -> [return: bb47, unwind: bb79];
    }

    bb47: {
        _96 = <<A24 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _97) -> [return: bb48, unwind: bb79];
    }

    bb48: {
        _106 = const false;
        _101 = move _26;
        _100 = <A25 as FromToNativeWasmType>::to_native(move _101) -> [return: bb49, unwind: bb79];
    }

    bb49: {
        _99 = <<A25 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _100) -> [return: bb50, unwind: bb79];
    }

    bb50: {
        _105 = const false;
        _104 = move _27;
        _103 = <A26 as FromToNativeWasmType>::to_native(move _104) -> [return: bb51, unwind: bb79];
    }

    bb51: {
        _102 = <<A26 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _103) -> [return: bb52, unwind: bb79];
    }

    bb52: {
        _0 = [move _28, move _30, move _33, move _36, move _39, move _42, move _45, move _48, move _51, move _54, move _57, move _60, move _63, move _66, move _69, move _72, move _75, move _78, move _81, move _84, move _87, move _90, move _93, move _96, move _99, move _102];
        _105 = const false;
        _106 = const false;
        _107 = const false;
        _108 = const false;
        _109 = const false;
        _110 = const false;
        _111 = const false;
        _112 = const false;
        _113 = const false;
        _114 = const false;
        _115 = const false;
        _116 = const false;
        _117 = const false;
        _118 = const false;
        _119 = const false;
        _120 = const false;
        _121 = const false;
        _122 = const false;
        _123 = const false;
        _124 = const false;
        _125 = const false;
        _126 = const false;
        _127 = const false;
        _128 = const false;
        _129 = const false;
        return;
    }

    bb53 (cleanup): {
        switchInt(_106) -> [0: bb54, otherwise: bb80];
    }

    bb54 (cleanup): {
        switchInt(_107) -> [0: bb55, otherwise: bb81];
    }

    bb55 (cleanup): {
        switchInt(_108) -> [0: bb56, otherwise: bb82];
    }

    bb56 (cleanup): {
        switchInt(_109) -> [0: bb57, otherwise: bb83];
    }

    bb57 (cleanup): {
        switchInt(_110) -> [0: bb58, otherwise: bb84];
    }

    bb58 (cleanup): {
        switchInt(_111) -> [0: bb59, otherwise: bb85];
    }

    bb59 (cleanup): {
        switchInt(_112) -> [0: bb60, otherwise: bb86];
    }

    bb60 (cleanup): {
        switchInt(_113) -> [0: bb61, otherwise: bb87];
    }

    bb61 (cleanup): {
        switchInt(_114) -> [0: bb62, otherwise: bb88];
    }

    bb62 (cleanup): {
        switchInt(_115) -> [0: bb63, otherwise: bb89];
    }

    bb63 (cleanup): {
        switchInt(_116) -> [0: bb64, otherwise: bb90];
    }

    bb64 (cleanup): {
        switchInt(_117) -> [0: bb65, otherwise: bb91];
    }

    bb65 (cleanup): {
        switchInt(_118) -> [0: bb66, otherwise: bb92];
    }

    bb66 (cleanup): {
        switchInt(_119) -> [0: bb67, otherwise: bb93];
    }

    bb67 (cleanup): {
        switchInt(_120) -> [0: bb68, otherwise: bb94];
    }

    bb68 (cleanup): {
        switchInt(_121) -> [0: bb69, otherwise: bb95];
    }

    bb69 (cleanup): {
        switchInt(_122) -> [0: bb70, otherwise: bb96];
    }

    bb70 (cleanup): {
        switchInt(_123) -> [0: bb71, otherwise: bb97];
    }

    bb71 (cleanup): {
        switchInt(_124) -> [0: bb72, otherwise: bb98];
    }

    bb72 (cleanup): {
        switchInt(_125) -> [0: bb73, otherwise: bb99];
    }

    bb73 (cleanup): {
        switchInt(_126) -> [0: bb74, otherwise: bb100];
    }

    bb74 (cleanup): {
        switchInt(_127) -> [0: bb75, otherwise: bb101];
    }

    bb75 (cleanup): {
        switchInt(_128) -> [0: bb76, otherwise: bb102];
    }

    bb76 (cleanup): {
        switchInt(_129) -> [0: bb77, otherwise: bb103];
    }

    bb77 (cleanup): {
        resume;
    }

    bb78 (cleanup): {
        drop(_27) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_105) -> [0: bb53, otherwise: bb78];
    }

    bb80 (cleanup): {
        drop(_26) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_25) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_24) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_23) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_22) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_21) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_20) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_19) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_18) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_17) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_16) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_15) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_14) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_13) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_12) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_11) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_10) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_9) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_8) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_7) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_6) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_5) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_4) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_3) -> [return: bb77, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array() -> [i128; 26] {
    let mut _0: [i128; 26];

    bb0: {
        _0 = [const 0_i128; 26];
        return;
    }
}

inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

const inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::empty_array::{constant#0}::COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 26_isize as usize (IntToInt);
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::from_c_struct(_1: S26<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26>) -> (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26) {
    debug c_struct => _1;
    let mut _0: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26);
    let mut _28: A1;
    let mut _29: A2;
    let mut _30: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A3;
    let mut _32: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A4;
    let mut _34: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A5;
    let mut _36: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A6;
    let mut _38: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A7;
    let mut _40: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A8;
    let mut _42: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A9;
    let mut _44: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A10;
    let mut _46: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A11;
    let mut _48: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A12;
    let mut _50: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A13;
    let mut _52: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A14;
    let mut _54: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A15;
    let mut _56: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A16;
    let mut _58: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A17;
    let mut _60: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A18;
    let mut _62: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A19;
    let mut _64: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A20;
    let mut _66: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _67: A21;
    let mut _68: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _69: A22;
    let mut _70: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _71: A23;
    let mut _72: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _73: A24;
    let mut _74: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _75: A25;
    let mut _76: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _77: A26;
    let mut _78: <A26 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
        debug A24 => _25;
        debug A25 => _26;
        debug A26 => _27;
    }
    scope 2 {
        let _2: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
        let _3: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
        let _4: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
        let _5: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
        let _6: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
        let _7: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
        let _8: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
        let _9: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
        let _10: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
        let _11: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
        let _12: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
        let _13: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
        let _14: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
        let _15: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
        let _16: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
        let _17: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
        let _18: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
        let _19: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
        let _20: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
        let _21: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
        let _22: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
        let _23: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
        let _24: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
        let _25: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
        let _26: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
        let _27: <A26 as externals::function::inner::FromToNativeWasmType>::Native;
    }

    bb0: {
        _103 = const false;
        _102 = const false;
        _101 = const false;
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _2 = move (_1.0: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _103 = const true;
        _3 = move (_1.1: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _102 = const true;
        _4 = move (_1.2: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _101 = const true;
        _5 = move (_1.3: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _100 = const true;
        _6 = move (_1.4: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _99 = const true;
        _7 = move (_1.5: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _98 = const true;
        _8 = move (_1.6: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _97 = const true;
        _9 = move (_1.7: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _96 = const true;
        _10 = move (_1.8: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _95 = const true;
        _11 = move (_1.9: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _94 = const true;
        _12 = move (_1.10: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _93 = const true;
        _13 = move (_1.11: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _92 = const true;
        _14 = move (_1.12: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _91 = const true;
        _15 = move (_1.13: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _90 = const true;
        _16 = move (_1.14: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _89 = const true;
        _17 = move (_1.15: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _88 = const true;
        _18 = move (_1.16: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _87 = const true;
        _19 = move (_1.17: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _86 = const true;
        _20 = move (_1.18: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _85 = const true;
        _21 = move (_1.19: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _84 = const true;
        _22 = move (_1.20: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _83 = const true;
        _23 = move (_1.21: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _82 = const true;
        _24 = move (_1.22: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
        _81 = const true;
        _25 = move (_1.23: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
        _80 = const true;
        _26 = move (_1.24: <A25 as externals::function::inner::FromToNativeWasmType>::Native);
        _79 = const true;
        _27 = move (_1.25: <A26 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A1 as FromToNativeWasmType>::from_native(move _2) -> [return: bb1, unwind: bb78];
    }

    bb1: {
        _103 = const false;
        _30 = move _3;
        _29 = <A2 as FromToNativeWasmType>::from_native(move _30) -> [return: bb2, unwind: bb51];
    }

    bb2: {
        _102 = const false;
        _32 = move _4;
        _31 = <A3 as FromToNativeWasmType>::from_native(move _32) -> [return: bb3, unwind: bb50];
    }

    bb3: {
        _101 = const false;
        _34 = move _5;
        _33 = <A4 as FromToNativeWasmType>::from_native(move _34) -> [return: bb4, unwind: bb49];
    }

    bb4: {
        _100 = const false;
        _36 = move _6;
        _35 = <A5 as FromToNativeWasmType>::from_native(move _36) -> [return: bb5, unwind: bb48];
    }

    bb5: {
        _99 = const false;
        _38 = move _7;
        _37 = <A6 as FromToNativeWasmType>::from_native(move _38) -> [return: bb6, unwind: bb47];
    }

    bb6: {
        _98 = const false;
        _40 = move _8;
        _39 = <A7 as FromToNativeWasmType>::from_native(move _40) -> [return: bb7, unwind: bb46];
    }

    bb7: {
        _97 = const false;
        _42 = move _9;
        _41 = <A8 as FromToNativeWasmType>::from_native(move _42) -> [return: bb8, unwind: bb45];
    }

    bb8: {
        _96 = const false;
        _44 = move _10;
        _43 = <A9 as FromToNativeWasmType>::from_native(move _44) -> [return: bb9, unwind: bb44];
    }

    bb9: {
        _95 = const false;
        _46 = move _11;
        _45 = <A10 as FromToNativeWasmType>::from_native(move _46) -> [return: bb10, unwind: bb43];
    }

    bb10: {
        _94 = const false;
        _48 = move _12;
        _47 = <A11 as FromToNativeWasmType>::from_native(move _48) -> [return: bb11, unwind: bb42];
    }

    bb11: {
        _93 = const false;
        _50 = move _13;
        _49 = <A12 as FromToNativeWasmType>::from_native(move _50) -> [return: bb12, unwind: bb41];
    }

    bb12: {
        _92 = const false;
        _52 = move _14;
        _51 = <A13 as FromToNativeWasmType>::from_native(move _52) -> [return: bb13, unwind: bb40];
    }

    bb13: {
        _91 = const false;
        _54 = move _15;
        _53 = <A14 as FromToNativeWasmType>::from_native(move _54) -> [return: bb14, unwind: bb39];
    }

    bb14: {
        _90 = const false;
        _56 = move _16;
        _55 = <A15 as FromToNativeWasmType>::from_native(move _56) -> [return: bb15, unwind: bb38];
    }

    bb15: {
        _89 = const false;
        _58 = move _17;
        _57 = <A16 as FromToNativeWasmType>::from_native(move _58) -> [return: bb16, unwind: bb37];
    }

    bb16: {
        _88 = const false;
        _60 = move _18;
        _59 = <A17 as FromToNativeWasmType>::from_native(move _60) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        _87 = const false;
        _62 = move _19;
        _61 = <A18 as FromToNativeWasmType>::from_native(move _62) -> [return: bb18, unwind: bb35];
    }

    bb18: {
        _86 = const false;
        _64 = move _20;
        _63 = <A19 as FromToNativeWasmType>::from_native(move _64) -> [return: bb19, unwind: bb34];
    }

    bb19: {
        _85 = const false;
        _66 = move _21;
        _65 = <A20 as FromToNativeWasmType>::from_native(move _66) -> [return: bb20, unwind: bb33];
    }

    bb20: {
        _84 = const false;
        _68 = move _22;
        _67 = <A21 as FromToNativeWasmType>::from_native(move _68) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _83 = const false;
        _70 = move _23;
        _69 = <A22 as FromToNativeWasmType>::from_native(move _70) -> [return: bb22, unwind: bb31];
    }

    bb22: {
        _82 = const false;
        _72 = move _24;
        _71 = <A23 as FromToNativeWasmType>::from_native(move _72) -> [return: bb23, unwind: bb30];
    }

    bb23: {
        _81 = const false;
        _74 = move _25;
        _73 = <A24 as FromToNativeWasmType>::from_native(move _74) -> [return: bb24, unwind: bb29];
    }

    bb24: {
        _80 = const false;
        _76 = move _26;
        _75 = <A25 as FromToNativeWasmType>::from_native(move _76) -> [return: bb25, unwind: bb28];
    }

    bb25: {
        _79 = const false;
        _78 = move _27;
        _77 = <A26 as FromToNativeWasmType>::from_native(move _78) -> [return: bb26, unwind: bb27];
    }

    bb26: {
        _0 = (move _28, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57, move _59, move _61, move _63, move _65, move _67, move _69, move _71, move _73, move _75, move _77);
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        _88 = const false;
        _89 = const false;
        _90 = const false;
        _91 = const false;
        _92 = const false;
        _93 = const false;
        _94 = const false;
        _95 = const false;
        _96 = const false;
        _97 = const false;
        _98 = const false;
        _99 = const false;
        _100 = const false;
        _101 = const false;
        _102 = const false;
        _103 = const false;
        return;
    }

    bb27 (cleanup): {
        drop(_75) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_73) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_71) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_69) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_67) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_65) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_63) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_61) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_59) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_57) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_55) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_53) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_51) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_49) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_47) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_45) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_43) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_41) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_39) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_37) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_35) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_33) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_31) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_29) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_28) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_80) -> [0: bb53, otherwise: bb79];
    }

    bb53 (cleanup): {
        switchInt(_81) -> [0: bb54, otherwise: bb80];
    }

    bb54 (cleanup): {
        switchInt(_82) -> [0: bb55, otherwise: bb81];
    }

    bb55 (cleanup): {
        switchInt(_83) -> [0: bb56, otherwise: bb82];
    }

    bb56 (cleanup): {
        switchInt(_84) -> [0: bb57, otherwise: bb83];
    }

    bb57 (cleanup): {
        switchInt(_85) -> [0: bb58, otherwise: bb84];
    }

    bb58 (cleanup): {
        switchInt(_86) -> [0: bb59, otherwise: bb85];
    }

    bb59 (cleanup): {
        switchInt(_87) -> [0: bb60, otherwise: bb86];
    }

    bb60 (cleanup): {
        switchInt(_88) -> [0: bb61, otherwise: bb87];
    }

    bb61 (cleanup): {
        switchInt(_89) -> [0: bb62, otherwise: bb88];
    }

    bb62 (cleanup): {
        switchInt(_90) -> [0: bb63, otherwise: bb89];
    }

    bb63 (cleanup): {
        switchInt(_91) -> [0: bb64, otherwise: bb90];
    }

    bb64 (cleanup): {
        switchInt(_92) -> [0: bb65, otherwise: bb91];
    }

    bb65 (cleanup): {
        switchInt(_93) -> [0: bb66, otherwise: bb92];
    }

    bb66 (cleanup): {
        switchInt(_94) -> [0: bb67, otherwise: bb93];
    }

    bb67 (cleanup): {
        switchInt(_95) -> [0: bb68, otherwise: bb94];
    }

    bb68 (cleanup): {
        switchInt(_96) -> [0: bb69, otherwise: bb95];
    }

    bb69 (cleanup): {
        switchInt(_97) -> [0: bb70, otherwise: bb96];
    }

    bb70 (cleanup): {
        switchInt(_98) -> [0: bb71, otherwise: bb97];
    }

    bb71 (cleanup): {
        switchInt(_99) -> [0: bb72, otherwise: bb98];
    }

    bb72 (cleanup): {
        switchInt(_100) -> [0: bb73, otherwise: bb99];
    }

    bb73 (cleanup): {
        switchInt(_101) -> [0: bb74, otherwise: bb100];
    }

    bb74 (cleanup): {
        switchInt(_102) -> [0: bb75, otherwise: bb101];
    }

    bb75 (cleanup): {
        switchInt(_103) -> [0: bb76, otherwise: bb102];
    }

    bb76 (cleanup): {
        resume;
    }

    bb77 (cleanup): {
        drop(_27) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_79) -> [0: bb52, otherwise: bb77];
    }

    bb79 (cleanup): {
        drop(_26) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_25) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_24) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_23) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_22) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_21) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_20) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_19) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_18) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_17) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_16) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_15) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_14) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_13) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_12) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_11) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_10) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_9) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_8) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_7) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_6) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_5) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_4) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_3) -> [return: bb76, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::into_c_struct(_1: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26)) -> S26<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26> {
    debug self => _1;
    let mut _0: externals::function::inner::S26<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26>;
    let _2: A1;
    let _3: A2;
    let _4: A3;
    let _5: A4;
    let _6: A5;
    let _7: A6;
    let _8: A7;
    let _9: A8;
    let _10: A9;
    let _11: A10;
    let _12: A11;
    let _13: A12;
    let _14: A13;
    let _15: A14;
    let _16: A15;
    let _17: A16;
    let _18: A17;
    let _19: A18;
    let _20: A19;
    let _21: A20;
    let _22: A21;
    let _23: A22;
    let _24: A23;
    let _25: A24;
    let _26: A25;
    let _27: A26;
    let mut _28: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A2;
    let mut _31: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A3;
    let mut _33: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A4;
    let mut _35: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A5;
    let mut _37: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A6;
    let mut _39: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A7;
    let mut _41: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A8;
    let mut _43: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A9;
    let mut _45: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A10;
    let mut _47: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A11;
    let mut _49: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A12;
    let mut _51: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A13;
    let mut _53: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A14;
    let mut _55: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A15;
    let mut _57: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A16;
    let mut _59: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A17;
    let mut _61: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A18;
    let mut _63: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A19;
    let mut _65: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A20;
    let mut _67: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _68: A21;
    let mut _69: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _70: A22;
    let mut _71: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _72: A23;
    let mut _73: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _74: A24;
    let mut _75: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _76: A25;
    let mut _77: <A26 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _78: A26;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;
    scope 1 {
        debug A1 => _2;
        debug A2 => _3;
        debug A3 => _4;
        debug A4 => _5;
        debug A5 => _6;
        debug A6 => _7;
        debug A7 => _8;
        debug A8 => _9;
        debug A9 => _10;
        debug A10 => _11;
        debug A11 => _12;
        debug A12 => _13;
        debug A13 => _14;
        debug A14 => _15;
        debug A15 => _16;
        debug A16 => _17;
        debug A17 => _18;
        debug A18 => _19;
        debug A19 => _20;
        debug A20 => _21;
        debug A21 => _22;
        debug A22 => _23;
        debug A23 => _24;
        debug A24 => _25;
        debug A25 => _26;
        debug A26 => _27;
    }

    bb0: {
        _103 = const false;
        _102 = const false;
        _101 = const false;
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _2 = move (_1.0: A1);
        _103 = const true;
        _3 = move (_1.1: A2);
        _102 = const true;
        _4 = move (_1.2: A3);
        _101 = const true;
        _5 = move (_1.3: A4);
        _100 = const true;
        _6 = move (_1.4: A5);
        _99 = const true;
        _7 = move (_1.5: A6);
        _98 = const true;
        _8 = move (_1.6: A7);
        _97 = const true;
        _9 = move (_1.7: A8);
        _96 = const true;
        _10 = move (_1.8: A9);
        _95 = const true;
        _11 = move (_1.9: A10);
        _94 = const true;
        _12 = move (_1.10: A11);
        _93 = const true;
        _13 = move (_1.11: A12);
        _92 = const true;
        _14 = move (_1.12: A13);
        _91 = const true;
        _15 = move (_1.13: A14);
        _90 = const true;
        _16 = move (_1.14: A15);
        _89 = const true;
        _17 = move (_1.15: A16);
        _88 = const true;
        _18 = move (_1.16: A17);
        _87 = const true;
        _19 = move (_1.17: A18);
        _86 = const true;
        _20 = move (_1.18: A19);
        _85 = const true;
        _21 = move (_1.19: A20);
        _84 = const true;
        _22 = move (_1.20: A21);
        _83 = const true;
        _23 = move (_1.21: A22);
        _82 = const true;
        _24 = move (_1.22: A23);
        _81 = const true;
        _25 = move (_1.23: A24);
        _80 = const true;
        _26 = move (_1.24: A25);
        _79 = const true;
        _27 = move (_1.25: A26);
        _28 = <A1 as FromToNativeWasmType>::to_native(move _2) -> [return: bb1, unwind: bb78];
    }

    bb1: {
        _103 = const false;
        _30 = move _3;
        _29 = <A2 as FromToNativeWasmType>::to_native(move _30) -> [return: bb2, unwind: bb51];
    }

    bb2: {
        _102 = const false;
        _32 = move _4;
        _31 = <A3 as FromToNativeWasmType>::to_native(move _32) -> [return: bb3, unwind: bb50];
    }

    bb3: {
        _101 = const false;
        _34 = move _5;
        _33 = <A4 as FromToNativeWasmType>::to_native(move _34) -> [return: bb4, unwind: bb49];
    }

    bb4: {
        _100 = const false;
        _36 = move _6;
        _35 = <A5 as FromToNativeWasmType>::to_native(move _36) -> [return: bb5, unwind: bb48];
    }

    bb5: {
        _99 = const false;
        _38 = move _7;
        _37 = <A6 as FromToNativeWasmType>::to_native(move _38) -> [return: bb6, unwind: bb47];
    }

    bb6: {
        _98 = const false;
        _40 = move _8;
        _39 = <A7 as FromToNativeWasmType>::to_native(move _40) -> [return: bb7, unwind: bb46];
    }

    bb7: {
        _97 = const false;
        _42 = move _9;
        _41 = <A8 as FromToNativeWasmType>::to_native(move _42) -> [return: bb8, unwind: bb45];
    }

    bb8: {
        _96 = const false;
        _44 = move _10;
        _43 = <A9 as FromToNativeWasmType>::to_native(move _44) -> [return: bb9, unwind: bb44];
    }

    bb9: {
        _95 = const false;
        _46 = move _11;
        _45 = <A10 as FromToNativeWasmType>::to_native(move _46) -> [return: bb10, unwind: bb43];
    }

    bb10: {
        _94 = const false;
        _48 = move _12;
        _47 = <A11 as FromToNativeWasmType>::to_native(move _48) -> [return: bb11, unwind: bb42];
    }

    bb11: {
        _93 = const false;
        _50 = move _13;
        _49 = <A12 as FromToNativeWasmType>::to_native(move _50) -> [return: bb12, unwind: bb41];
    }

    bb12: {
        _92 = const false;
        _52 = move _14;
        _51 = <A13 as FromToNativeWasmType>::to_native(move _52) -> [return: bb13, unwind: bb40];
    }

    bb13: {
        _91 = const false;
        _54 = move _15;
        _53 = <A14 as FromToNativeWasmType>::to_native(move _54) -> [return: bb14, unwind: bb39];
    }

    bb14: {
        _90 = const false;
        _56 = move _16;
        _55 = <A15 as FromToNativeWasmType>::to_native(move _56) -> [return: bb15, unwind: bb38];
    }

    bb15: {
        _89 = const false;
        _58 = move _17;
        _57 = <A16 as FromToNativeWasmType>::to_native(move _58) -> [return: bb16, unwind: bb37];
    }

    bb16: {
        _88 = const false;
        _60 = move _18;
        _59 = <A17 as FromToNativeWasmType>::to_native(move _60) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        _87 = const false;
        _62 = move _19;
        _61 = <A18 as FromToNativeWasmType>::to_native(move _62) -> [return: bb18, unwind: bb35];
    }

    bb18: {
        _86 = const false;
        _64 = move _20;
        _63 = <A19 as FromToNativeWasmType>::to_native(move _64) -> [return: bb19, unwind: bb34];
    }

    bb19: {
        _85 = const false;
        _66 = move _21;
        _65 = <A20 as FromToNativeWasmType>::to_native(move _66) -> [return: bb20, unwind: bb33];
    }

    bb20: {
        _84 = const false;
        _68 = move _22;
        _67 = <A21 as FromToNativeWasmType>::to_native(move _68) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _83 = const false;
        _70 = move _23;
        _69 = <A22 as FromToNativeWasmType>::to_native(move _70) -> [return: bb22, unwind: bb31];
    }

    bb22: {
        _82 = const false;
        _72 = move _24;
        _71 = <A23 as FromToNativeWasmType>::to_native(move _72) -> [return: bb23, unwind: bb30];
    }

    bb23: {
        _81 = const false;
        _74 = move _25;
        _73 = <A24 as FromToNativeWasmType>::to_native(move _74) -> [return: bb24, unwind: bb29];
    }

    bb24: {
        _80 = const false;
        _76 = move _26;
        _75 = <A25 as FromToNativeWasmType>::to_native(move _76) -> [return: bb25, unwind: bb28];
    }

    bb25: {
        _79 = const false;
        _78 = move _27;
        _77 = <A26 as FromToNativeWasmType>::to_native(move _78) -> [return: bb26, unwind: bb27];
    }

    bb26: {
        _0 = S26::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26>(move _28, move _29, move _31, move _33, move _35, move _37, move _39, move _41, move _43, move _45, move _47, move _49, move _51, move _53, move _55, move _57, move _59, move _61, move _63, move _65, move _67, move _69, move _71, move _73, move _75, move _77);
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _85 = const false;
        _86 = const false;
        _87 = const false;
        _88 = const false;
        _89 = const false;
        _90 = const false;
        _91 = const false;
        _92 = const false;
        _93 = const false;
        _94 = const false;
        _95 = const false;
        _96 = const false;
        _97 = const false;
        _98 = const false;
        _99 = const false;
        _100 = const false;
        _101 = const false;
        _102 = const false;
        _103 = const false;
        return;
    }

    bb27 (cleanup): {
        drop(_75) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_73) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_71) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_69) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_67) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_65) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_63) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_61) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_59) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_57) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_55) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_53) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop(_51) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        drop(_49) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_47) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_45) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_43) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_41) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_39) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_37) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_35) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_33) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_31) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_29) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_28) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_80) -> [0: bb53, otherwise: bb79];
    }

    bb53 (cleanup): {
        switchInt(_81) -> [0: bb54, otherwise: bb80];
    }

    bb54 (cleanup): {
        switchInt(_82) -> [0: bb55, otherwise: bb81];
    }

    bb55 (cleanup): {
        switchInt(_83) -> [0: bb56, otherwise: bb82];
    }

    bb56 (cleanup): {
        switchInt(_84) -> [0: bb57, otherwise: bb83];
    }

    bb57 (cleanup): {
        switchInt(_85) -> [0: bb58, otherwise: bb84];
    }

    bb58 (cleanup): {
        switchInt(_86) -> [0: bb59, otherwise: bb85];
    }

    bb59 (cleanup): {
        switchInt(_87) -> [0: bb60, otherwise: bb86];
    }

    bb60 (cleanup): {
        switchInt(_88) -> [0: bb61, otherwise: bb87];
    }

    bb61 (cleanup): {
        switchInt(_89) -> [0: bb62, otherwise: bb88];
    }

    bb62 (cleanup): {
        switchInt(_90) -> [0: bb63, otherwise: bb89];
    }

    bb63 (cleanup): {
        switchInt(_91) -> [0: bb64, otherwise: bb90];
    }

    bb64 (cleanup): {
        switchInt(_92) -> [0: bb65, otherwise: bb91];
    }

    bb65 (cleanup): {
        switchInt(_93) -> [0: bb66, otherwise: bb92];
    }

    bb66 (cleanup): {
        switchInt(_94) -> [0: bb67, otherwise: bb93];
    }

    bb67 (cleanup): {
        switchInt(_95) -> [0: bb68, otherwise: bb94];
    }

    bb68 (cleanup): {
        switchInt(_96) -> [0: bb69, otherwise: bb95];
    }

    bb69 (cleanup): {
        switchInt(_97) -> [0: bb70, otherwise: bb96];
    }

    bb70 (cleanup): {
        switchInt(_98) -> [0: bb71, otherwise: bb97];
    }

    bb71 (cleanup): {
        switchInt(_99) -> [0: bb72, otherwise: bb98];
    }

    bb72 (cleanup): {
        switchInt(_100) -> [0: bb73, otherwise: bb99];
    }

    bb73 (cleanup): {
        switchInt(_101) -> [0: bb74, otherwise: bb100];
    }

    bb74 (cleanup): {
        switchInt(_102) -> [0: bb75, otherwise: bb101];
    }

    bb75 (cleanup): {
        switchInt(_103) -> [0: bb76, otherwise: bb102];
    }

    bb76 (cleanup): {
        resume;
    }

    bb77 (cleanup): {
        drop(_27) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_79) -> [0: bb52, otherwise: bb77];
    }

    bb79 (cleanup): {
        drop(_26) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_25) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_24) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_23) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_22) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_21) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_20) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_19) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_18) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_17) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_16) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_15) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_14) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_13) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_12) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_11) -> [return: bb68, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_10) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_9) -> [return: bb70, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_8) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_7) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_6) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_5) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_4) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_3) -> [return: bb76, unwind terminate(cleanup)];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 26];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1193:13: 1198:44>::wasm_types: &[wasmer_types::Type; 26] = {
    let mut _0: &[wasmer_types::Type; 26];
    let mut _1: [wasmer_types::Type; 26];

    bb0: {
        _1 = [const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _, const _];
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native, <A24 as externals::function::inner::FromToNativeWasmType>::Native, <A25 as externals::function::inner::FromToNativeWasmType>::Native, <A26 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26), Rets, externals::function::inner::WithoutEnv, ()>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26, Rets, RetsAsResult, Func> as extern "C" fn(usize, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native, <A24 as externals::function::inner::FromToNativeWasmType>::Native, <A25 as externals::function::inner::FromToNativeWasmType>::Native, <A26 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper(_1: usize, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native, _22: <A21 as FromToNativeWasmType>::Native, _23: <A22 as FromToNativeWasmType>::Native, _24: <A23 as FromToNativeWasmType>::Native, _25: <A24 as FromToNativeWasmType>::Native, _26: <A25 as FromToNativeWasmType>::Native, _27: <A26 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    debug A21 => _22;
    debug A22 => _23;
    debug A23 => _24;
    debug A24 => _25;
    debug A25 => _26;
    debug A26 => _27;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _28: &Func;
    let _29: &Func;
    let _30: *const Func;
    let mut _31: *const ();
    let mut _33: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>;
    let mut _34: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77};
    let mut _35: &&Func;
    let mut _36: isize;
    let mut _37: isize;
    let mut _40: !;
    let mut _41: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _42: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _44: !;
    let mut _46: isize;
    scope 1 {
        debug func => _28;
        let _32: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _32;
            let _38: Rets;
            let _39: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _43: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _38;
            }
            scope 5 {
                debug trap => _39;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _43;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _45: &();
    }

    bb0: {
        _45 = const _;
        _31 = &raw const (*_45);
        _30 = move _31 as *const Func (PtrToPtr);
        _29 = &(*_30);
        _28 = _29;
        _35 = &_28;
        _34 = {closure@lib/api/src/externals/function.rs:1299:75: 1299:77} { func: move _35, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21, A21: move _22, A22: move _23, A23: move _24, A24: move _25, A25: move _26, A26: move _27 };
        _33 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>(move _34);
        _32 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1299:75: 1299:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _33) -> [return: bb1, unwind continue];
    }

    bb1: {
        _37 = discriminant(_32);
        switchInt(move _37) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _36 = discriminant(((_32 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _36) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _43 = move ((_32 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _44 = resume_panic(move _43) -> unwind continue;
    }

    bb5: {
        _38 = move ((((_32 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _38) -> [return: bb6, unwind continue];
    }

    bb6: {
        _46 = discriminant(_32);
        switchInt(move _46) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _39 = move ((((_32 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _42 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _39) -> [return: bb8, unwind continue];
    }

    bb8: {
        _41 = move _42 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _40 = raise_user_trap(move _41) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1276:13: 1284:71>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1299:75: 1299:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug A1 => (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A21 => (_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A22 => (_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A23 => (_1.23: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A24 => (_1.24: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A25 => (_1.25: <A25 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A26 => (_1.26: <A26 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A21;
    let mut _45: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A22;
    let mut _47: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A23;
    let mut _49: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A24;
    let mut _51: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A25;
    let mut _53: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A26;
    let mut _55: <A26 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: &&Func;
    let mut _57: &Func;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;

    bb0: {
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _107 = const false;
        _106 = const false;
        _105 = const false;
        _104 = const false;
        _103 = const false;
        _102 = const false;
        _101 = const false;
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        _83 = const false;
        _83 = const true;
        _84 = const true;
        _85 = const true;
        _86 = const true;
        _87 = const true;
        _88 = const true;
        _89 = const true;
        _90 = const true;
        _91 = const true;
        _92 = const true;
        _93 = const true;
        _94 = const true;
        _95 = const true;
        _96 = const true;
        _97 = const true;
        _98 = const true;
        _99 = const true;
        _100 = const true;
        _101 = const true;
        _102 = const true;
        _103 = const true;
        _104 = const true;
        _105 = const true;
        _106 = const true;
        _107 = const true;
        _56 = deref_copy (_1.0: &&Func);
        _57 = deref_copy (*_56);
        _5 = move (_1.1: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb129];
    }

    bb1: {
        _82 = const true;
        _107 = const false;
        _7 = move (_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb79];
    }

    bb2: {
        _81 = const true;
        _106 = const false;
        _9 = move (_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb77];
    }

    bb3: {
        _80 = const true;
        _105 = const false;
        _11 = move (_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb75];
    }

    bb4: {
        _79 = const true;
        _104 = const false;
        _13 = move (_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb73];
    }

    bb5: {
        _78 = const true;
        _103 = const false;
        _15 = move (_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb71];
    }

    bb6: {
        _77 = const true;
        _102 = const false;
        _17 = move (_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb69];
    }

    bb7: {
        _76 = const true;
        _101 = const false;
        _19 = move (_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb67];
    }

    bb8: {
        _75 = const true;
        _100 = const false;
        _21 = move (_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb65];
    }

    bb9: {
        _74 = const true;
        _99 = const false;
        _23 = move (_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb63];
    }

    bb10: {
        _73 = const true;
        _98 = const false;
        _25 = move (_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb61];
    }

    bb11: {
        _72 = const true;
        _97 = const false;
        _27 = move (_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb59];
    }

    bb12: {
        _71 = const true;
        _96 = const false;
        _29 = move (_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb57];
    }

    bb13: {
        _70 = const true;
        _95 = const false;
        _31 = move (_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb55];
    }

    bb14: {
        _69 = const true;
        _94 = const false;
        _33 = move (_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb53];
    }

    bb15: {
        _68 = const true;
        _93 = const false;
        _35 = move (_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb51];
    }

    bb16: {
        _67 = const true;
        _92 = const false;
        _37 = move (_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb49];
    }

    bb17: {
        _66 = const true;
        _91 = const false;
        _39 = move (_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb47];
    }

    bb18: {
        _65 = const true;
        _90 = const false;
        _41 = move (_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb45];
    }

    bb19: {
        _64 = const true;
        _89 = const false;
        _43 = move (_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb43];
    }

    bb20: {
        _63 = const true;
        _88 = const false;
        _45 = move (_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = <A21 as FromToNativeWasmType>::from_native(move _45) -> [return: bb21, unwind: bb41];
    }

    bb21: {
        _62 = const true;
        _87 = const false;
        _47 = move (_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = <A22 as FromToNativeWasmType>::from_native(move _47) -> [return: bb22, unwind: bb39];
    }

    bb22: {
        _61 = const true;
        _86 = const false;
        _49 = move (_1.23: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
        _48 = <A23 as FromToNativeWasmType>::from_native(move _49) -> [return: bb23, unwind: bb37];
    }

    bb23: {
        _60 = const true;
        _85 = const false;
        _51 = move (_1.24: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
        _50 = <A24 as FromToNativeWasmType>::from_native(move _51) -> [return: bb24, unwind: bb35];
    }

    bb24: {
        _59 = const true;
        _84 = const false;
        _53 = move (_1.25: <A25 as externals::function::inner::FromToNativeWasmType>::Native);
        _52 = <A25 as FromToNativeWasmType>::from_native(move _53) -> [return: bb25, unwind: bb33];
    }

    bb25: {
        _58 = const true;
        _83 = const false;
        _55 = move (_1.26: <A26 as externals::function::inner::FromToNativeWasmType>::Native);
        _54 = <A26 as FromToNativeWasmType>::from_native(move _55) -> [return: bb26, unwind: bb31];
    }

    bb26: {
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _3 = (move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54);
        _2 = <Func as Fn<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26)>>::call(_57, move _3) -> [return: bb27, unwind: bb31];
    }

    bb27: {
        _58 = const false;
        _59 = const false;
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb28, unwind: bb129];
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        resume;
    }

    bb30 (cleanup): {
        drop(_52) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_58) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_50) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_59) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_48) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_60) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_46) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_61) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_44) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_62) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_42) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_63) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_40) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_64) -> [0: bb45, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_38) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_65) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_36) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_66) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_34) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_67) -> [0: bb51, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_32) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_68) -> [0: bb53, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_30) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_69) -> [0: bb55, otherwise: bb52];
    }

    bb54 (cleanup): {
        drop(_28) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_70) -> [0: bb57, otherwise: bb54];
    }

    bb56 (cleanup): {
        drop(_26) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_71) -> [0: bb59, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_24) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_72) -> [0: bb61, otherwise: bb58];
    }

    bb60 (cleanup): {
        drop(_22) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_73) -> [0: bb63, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_20) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_74) -> [0: bb65, otherwise: bb62];
    }

    bb64 (cleanup): {
        drop(_18) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_75) -> [0: bb67, otherwise: bb64];
    }

    bb66 (cleanup): {
        drop(_16) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_76) -> [0: bb69, otherwise: bb66];
    }

    bb68 (cleanup): {
        drop(_14) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_77) -> [0: bb71, otherwise: bb68];
    }

    bb70 (cleanup): {
        drop(_12) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_78) -> [0: bb73, otherwise: bb70];
    }

    bb72 (cleanup): {
        drop(_10) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_79) -> [0: bb75, otherwise: bb72];
    }

    bb74 (cleanup): {
        drop(_8) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_80) -> [0: bb77, otherwise: bb74];
    }

    bb76 (cleanup): {
        drop(_6) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_81) -> [0: bb79, otherwise: bb76];
    }

    bb78 (cleanup): {
        drop(_4) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_82) -> [0: bb129, otherwise: bb78];
    }

    bb80 (cleanup): {
        switchInt(_83) -> [0: bb29, otherwise: bb81];
    }

    bb81 (cleanup): {
        drop((_1.26: <A26 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_84) -> [0: bb80, otherwise: bb83];
    }

    bb83 (cleanup): {
        drop((_1.25: <A25 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_85) -> [0: bb82, otherwise: bb85];
    }

    bb85 (cleanup): {
        drop((_1.24: <A24 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_86) -> [0: bb84, otherwise: bb87];
    }

    bb87 (cleanup): {
        drop((_1.23: <A23 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        switchInt(_87) -> [0: bb86, otherwise: bb89];
    }

    bb89 (cleanup): {
        drop((_1.22: <A22 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        switchInt(_88) -> [0: bb88, otherwise: bb91];
    }

    bb91 (cleanup): {
        drop((_1.21: <A21 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        switchInt(_89) -> [0: bb90, otherwise: bb93];
    }

    bb93 (cleanup): {
        drop((_1.20: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_90) -> [0: bb92, otherwise: bb95];
    }

    bb95 (cleanup): {
        drop((_1.19: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        switchInt(_91) -> [0: bb94, otherwise: bb97];
    }

    bb97 (cleanup): {
        drop((_1.18: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        switchInt(_92) -> [0: bb96, otherwise: bb99];
    }

    bb99 (cleanup): {
        drop((_1.17: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        switchInt(_93) -> [0: bb98, otherwise: bb101];
    }

    bb101 (cleanup): {
        drop((_1.16: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_94) -> [0: bb100, otherwise: bb103];
    }

    bb103 (cleanup): {
        drop((_1.15: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        switchInt(_95) -> [0: bb102, otherwise: bb105];
    }

    bb105 (cleanup): {
        drop((_1.14: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        switchInt(_96) -> [0: bb104, otherwise: bb107];
    }

    bb107 (cleanup): {
        drop((_1.13: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        switchInt(_97) -> [0: bb106, otherwise: bb109];
    }

    bb109 (cleanup): {
        drop((_1.12: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        switchInt(_98) -> [0: bb108, otherwise: bb111];
    }

    bb111 (cleanup): {
        drop((_1.11: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        switchInt(_99) -> [0: bb110, otherwise: bb113];
    }

    bb113 (cleanup): {
        drop((_1.10: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        switchInt(_100) -> [0: bb112, otherwise: bb115];
    }

    bb115 (cleanup): {
        drop((_1.9: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        switchInt(_101) -> [0: bb114, otherwise: bb117];
    }

    bb117 (cleanup): {
        drop((_1.8: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        switchInt(_102) -> [0: bb116, otherwise: bb119];
    }

    bb119 (cleanup): {
        drop((_1.7: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        switchInt(_103) -> [0: bb118, otherwise: bb121];
    }

    bb121 (cleanup): {
        drop((_1.6: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        switchInt(_104) -> [0: bb120, otherwise: bb123];
    }

    bb123 (cleanup): {
        drop((_1.5: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        switchInt(_105) -> [0: bb122, otherwise: bb125];
    }

    bb125 (cleanup): {
        drop((_1.4: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        switchInt(_106) -> [0: bb124, otherwise: bb127];
    }

    bb127 (cleanup): {
        drop((_1.3: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        drop((_1.2: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        switchInt(_107) -> [0: bb126, otherwise: bb128];
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr(_1: Func) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;
    let mut _2: for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native, <A24 as externals::function::inner::FromToNativeWasmType>::Native, <A25 as externals::function::inner::FromToNativeWasmType>::Native, <A26 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;

    bb0: {
        _2 = <Func as externals::function::inner::HostFunction<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26), Rets, externals::function::inner::WithEnv, Env>>::function_body_ptr::func_wrapper::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26, Rets, RetsAsResult, Env, Func> as for<'a> extern "C" fn(&'a Env, <A1 as externals::function::inner::FromToNativeWasmType>::Native, <A2 as externals::function::inner::FromToNativeWasmType>::Native, <A3 as externals::function::inner::FromToNativeWasmType>::Native, <A4 as externals::function::inner::FromToNativeWasmType>::Native, <A5 as externals::function::inner::FromToNativeWasmType>::Native, <A6 as externals::function::inner::FromToNativeWasmType>::Native, <A7 as externals::function::inner::FromToNativeWasmType>::Native, <A8 as externals::function::inner::FromToNativeWasmType>::Native, <A9 as externals::function::inner::FromToNativeWasmType>::Native, <A10 as externals::function::inner::FromToNativeWasmType>::Native, <A11 as externals::function::inner::FromToNativeWasmType>::Native, <A12 as externals::function::inner::FromToNativeWasmType>::Native, <A13 as externals::function::inner::FromToNativeWasmType>::Native, <A14 as externals::function::inner::FromToNativeWasmType>::Native, <A15 as externals::function::inner::FromToNativeWasmType>::Native, <A16 as externals::function::inner::FromToNativeWasmType>::Native, <A17 as externals::function::inner::FromToNativeWasmType>::Native, <A18 as externals::function::inner::FromToNativeWasmType>::Native, <A19 as externals::function::inner::FromToNativeWasmType>::Native, <A20 as externals::function::inner::FromToNativeWasmType>::Native, <A21 as externals::function::inner::FromToNativeWasmType>::Native, <A22 as externals::function::inner::FromToNativeWasmType>::Native, <A23 as externals::function::inner::FromToNativeWasmType>::Native, <A24 as externals::function::inner::FromToNativeWasmType>::Native, <A25 as externals::function::inner::FromToNativeWasmType>::Native, <A26 as externals::function::inner::FromToNativeWasmType>::Native) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (PointerCoercion(ReifyFnPointer));
        _0 = move _2 as *const wasmer_vm::VMFunctionBody (FnPtrToPtr);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper(_1: &Env, _2: <A1 as FromToNativeWasmType>::Native, _3: <A2 as FromToNativeWasmType>::Native, _4: <A3 as FromToNativeWasmType>::Native, _5: <A4 as FromToNativeWasmType>::Native, _6: <A5 as FromToNativeWasmType>::Native, _7: <A6 as FromToNativeWasmType>::Native, _8: <A7 as FromToNativeWasmType>::Native, _9: <A8 as FromToNativeWasmType>::Native, _10: <A9 as FromToNativeWasmType>::Native, _11: <A10 as FromToNativeWasmType>::Native, _12: <A11 as FromToNativeWasmType>::Native, _13: <A12 as FromToNativeWasmType>::Native, _14: <A13 as FromToNativeWasmType>::Native, _15: <A14 as FromToNativeWasmType>::Native, _16: <A15 as FromToNativeWasmType>::Native, _17: <A16 as FromToNativeWasmType>::Native, _18: <A17 as FromToNativeWasmType>::Native, _19: <A18 as FromToNativeWasmType>::Native, _20: <A19 as FromToNativeWasmType>::Native, _21: <A20 as FromToNativeWasmType>::Native, _22: <A21 as FromToNativeWasmType>::Native, _23: <A22 as FromToNativeWasmType>::Native, _24: <A23 as FromToNativeWasmType>::Native, _25: <A24 as FromToNativeWasmType>::Native, _26: <A25 as FromToNativeWasmType>::Native, _27: <A26 as FromToNativeWasmType>::Native) -> <Rets as WasmTypeList>::CStruct {
    debug env => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    debug A21 => _22;
    debug A22 => _23;
    debug A23 => _24;
    debug A24 => _25;
    debug A25 => _26;
    debug A26 => _27;
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _28: &Func;
    let _29: &Func;
    let _30: *const Func;
    let mut _31: *const ();
    let mut _33: std::panic::AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>;
    let mut _34: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77};
    let mut _35: &&Func;
    let mut _36: &&Env;
    let mut _37: isize;
    let mut _38: isize;
    let mut _41: !;
    let mut _42: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _43: std::boxed::Box<<RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _45: !;
    let mut _47: isize;
    scope 1 {
        debug func => _28;
        let _32: std::result::Result<std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
        scope 3 {
            debug result => _32;
            let _39: Rets;
            let _40: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error;
            let _44: std::boxed::Box<dyn std::any::Any + std::marker::Send>;
            scope 4 {
                debug result => _39;
            }
            scope 5 {
                debug trap => _40;
                scope 6 {
                }
            }
            scope 7 {
                debug panic => _44;
                scope 8 {
                }
            }
        }
    }
    scope 2 {
        let mut _46: &();
    }

    bb0: {
        _46 = const _;
        _31 = &raw const (*_46);
        _30 = move _31 as *const Func (PtrToPtr);
        _29 = &(*_30);
        _28 = _29;
        _35 = &_28;
        _36 = &_1;
        _34 = {closure@lib/api/src/externals/function.rs:1343:75: 1343:77} { func: move _35, env: move _36, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21, A21: move _22, A22: move _23, A23: move _24, A24: move _25, A25: move _26, A26: move _27 };
        _33 = AssertUnwindSafe::<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>(move _34);
        _32 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/externals/function.rs:1343:75: 1343:77}>, Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error>>(move _33) -> [return: bb1, unwind continue];
    }

    bb1: {
        _38 = discriminant(_32);
        switchInt(move _38) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _37 = discriminant(((_32 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>));
        switchInt(move _37) -> [0: bb5, 1: bb7, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _44 = move ((_32 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>);
        _45 = resume_panic(move _44) -> unwind continue;
    }

    bb5: {
        _39 = move ((((_32 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Ok).0: Rets);
        _0 = <Rets as WasmTypeList>::into_c_struct(move _39) -> [return: bb6, unwind continue];
    }

    bb6: {
        _47 = discriminant(_32);
        switchInt(move _47) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _40 = move ((((_32 as Ok).0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>) as Err).0: <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error);
        _43 = Box::<<RetsAsResult as IntoResult<Rets>>::Error>::new(move _40) -> [return: bb8, unwind continue];
    }

    bb8: {
        _42 = move _43 as std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _41 = raise_user_trap(move _42) -> unwind continue;
    }

    bb9: {
        return;
    }

    bb10: {
        goto -> bb9;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1317:13: 1326:77>::function_body_ptr::func_wrapper::{closure#0}(_1: {closure@lib/api/src/externals/function.rs:1343:75: 1343:77}) -> Result<Rets, <RetsAsResult as IntoResult<Rets>>::Error> {
    debug func => (*(_1.0: &&Func));
    debug env => (*(_1.1: &&Env));
    debug A1 => (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A2 => (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A3 => (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A4 => (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A5 => (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A6 => (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A7 => (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A8 => (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A9 => (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A10 => (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A11 => (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A12 => (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A13 => (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A14 => (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A15 => (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A16 => (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A17 => (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A18 => (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A19 => (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A20 => (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A21 => (_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A22 => (_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A23 => (_1.24: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A24 => (_1.25: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A25 => (_1.26: <A25 as externals::function::inner::FromToNativeWasmType>::Native);
    debug A26 => (_1.27: <A26 as externals::function::inner::FromToNativeWasmType>::Native);
    let mut _0: std::result::Result<Rets, <RetsAsResult as externals::function::inner::IntoResult<Rets>>::Error>;
    let mut _2: RetsAsResult;
    let mut _3: (&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26);
    let mut _4: A1;
    let mut _5: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _6: A2;
    let mut _7: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _8: A3;
    let mut _9: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _10: A4;
    let mut _11: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A5;
    let mut _13: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A6;
    let mut _15: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A7;
    let mut _17: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A8;
    let mut _19: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A9;
    let mut _21: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A10;
    let mut _23: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A11;
    let mut _25: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A12;
    let mut _27: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A13;
    let mut _29: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A14;
    let mut _31: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A15;
    let mut _33: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A16;
    let mut _35: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A17;
    let mut _37: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A18;
    let mut _39: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A19;
    let mut _41: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A20;
    let mut _43: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A21;
    let mut _45: <A21 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A22;
    let mut _47: <A22 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A23;
    let mut _49: <A23 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A24;
    let mut _51: <A24 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A25;
    let mut _53: <A25 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A26;
    let mut _55: <A26 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: &&Func;
    let mut _57: &Func;
    let mut _58: &&Env;
    let mut _59: &Env;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: bool;
    let mut _107: bool;
    let mut _108: bool;
    let mut _109: bool;

    bb0: {
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _109 = const false;
        _108 = const false;
        _107 = const false;
        _106 = const false;
        _105 = const false;
        _104 = const false;
        _103 = const false;
        _102 = const false;
        _101 = const false;
        _100 = const false;
        _99 = const false;
        _98 = const false;
        _97 = const false;
        _96 = const false;
        _95 = const false;
        _94 = const false;
        _93 = const false;
        _92 = const false;
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _85 = const true;
        _86 = const true;
        _87 = const true;
        _88 = const true;
        _89 = const true;
        _90 = const true;
        _91 = const true;
        _92 = const true;
        _93 = const true;
        _94 = const true;
        _95 = const true;
        _96 = const true;
        _97 = const true;
        _98 = const true;
        _99 = const true;
        _100 = const true;
        _101 = const true;
        _102 = const true;
        _103 = const true;
        _104 = const true;
        _105 = const true;
        _106 = const true;
        _107 = const true;
        _108 = const true;
        _109 = const true;
        _56 = deref_copy (_1.0: &&Func);
        _57 = deref_copy (*_56);
        _58 = deref_copy (_1.1: &&Env);
        _59 = deref_copy (*_58);
        _5 = move (_1.2: <A1 as externals::function::inner::FromToNativeWasmType>::Native);
        _4 = <A1 as FromToNativeWasmType>::from_native(move _5) -> [return: bb1, unwind: bb129];
    }

    bb1: {
        _84 = const true;
        _109 = const false;
        _7 = move (_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native);
        _6 = <A2 as FromToNativeWasmType>::from_native(move _7) -> [return: bb2, unwind: bb79];
    }

    bb2: {
        _83 = const true;
        _108 = const false;
        _9 = move (_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native);
        _8 = <A3 as FromToNativeWasmType>::from_native(move _9) -> [return: bb3, unwind: bb77];
    }

    bb3: {
        _82 = const true;
        _107 = const false;
        _11 = move (_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native);
        _10 = <A4 as FromToNativeWasmType>::from_native(move _11) -> [return: bb4, unwind: bb75];
    }

    bb4: {
        _81 = const true;
        _106 = const false;
        _13 = move (_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native);
        _12 = <A5 as FromToNativeWasmType>::from_native(move _13) -> [return: bb5, unwind: bb73];
    }

    bb5: {
        _80 = const true;
        _105 = const false;
        _15 = move (_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native);
        _14 = <A6 as FromToNativeWasmType>::from_native(move _15) -> [return: bb6, unwind: bb71];
    }

    bb6: {
        _79 = const true;
        _104 = const false;
        _17 = move (_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native);
        _16 = <A7 as FromToNativeWasmType>::from_native(move _17) -> [return: bb7, unwind: bb69];
    }

    bb7: {
        _78 = const true;
        _103 = const false;
        _19 = move (_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native);
        _18 = <A8 as FromToNativeWasmType>::from_native(move _19) -> [return: bb8, unwind: bb67];
    }

    bb8: {
        _77 = const true;
        _102 = const false;
        _21 = move (_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native);
        _20 = <A9 as FromToNativeWasmType>::from_native(move _21) -> [return: bb9, unwind: bb65];
    }

    bb9: {
        _76 = const true;
        _101 = const false;
        _23 = move (_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native);
        _22 = <A10 as FromToNativeWasmType>::from_native(move _23) -> [return: bb10, unwind: bb63];
    }

    bb10: {
        _75 = const true;
        _100 = const false;
        _25 = move (_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native);
        _24 = <A11 as FromToNativeWasmType>::from_native(move _25) -> [return: bb11, unwind: bb61];
    }

    bb11: {
        _74 = const true;
        _99 = const false;
        _27 = move (_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native);
        _26 = <A12 as FromToNativeWasmType>::from_native(move _27) -> [return: bb12, unwind: bb59];
    }

    bb12: {
        _73 = const true;
        _98 = const false;
        _29 = move (_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native);
        _28 = <A13 as FromToNativeWasmType>::from_native(move _29) -> [return: bb13, unwind: bb57];
    }

    bb13: {
        _72 = const true;
        _97 = const false;
        _31 = move (_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native);
        _30 = <A14 as FromToNativeWasmType>::from_native(move _31) -> [return: bb14, unwind: bb55];
    }

    bb14: {
        _71 = const true;
        _96 = const false;
        _33 = move (_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native);
        _32 = <A15 as FromToNativeWasmType>::from_native(move _33) -> [return: bb15, unwind: bb53];
    }

    bb15: {
        _70 = const true;
        _95 = const false;
        _35 = move (_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native);
        _34 = <A16 as FromToNativeWasmType>::from_native(move _35) -> [return: bb16, unwind: bb51];
    }

    bb16: {
        _69 = const true;
        _94 = const false;
        _37 = move (_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native);
        _36 = <A17 as FromToNativeWasmType>::from_native(move _37) -> [return: bb17, unwind: bb49];
    }

    bb17: {
        _68 = const true;
        _93 = const false;
        _39 = move (_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native);
        _38 = <A18 as FromToNativeWasmType>::from_native(move _39) -> [return: bb18, unwind: bb47];
    }

    bb18: {
        _67 = const true;
        _92 = const false;
        _41 = move (_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native);
        _40 = <A19 as FromToNativeWasmType>::from_native(move _41) -> [return: bb19, unwind: bb45];
    }

    bb19: {
        _66 = const true;
        _91 = const false;
        _43 = move (_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native);
        _42 = <A20 as FromToNativeWasmType>::from_native(move _43) -> [return: bb20, unwind: bb43];
    }

    bb20: {
        _65 = const true;
        _90 = const false;
        _45 = move (_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native);
        _44 = <A21 as FromToNativeWasmType>::from_native(move _45) -> [return: bb21, unwind: bb41];
    }

    bb21: {
        _64 = const true;
        _89 = const false;
        _47 = move (_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native);
        _46 = <A22 as FromToNativeWasmType>::from_native(move _47) -> [return: bb22, unwind: bb39];
    }

    bb22: {
        _63 = const true;
        _88 = const false;
        _49 = move (_1.24: <A23 as externals::function::inner::FromToNativeWasmType>::Native);
        _48 = <A23 as FromToNativeWasmType>::from_native(move _49) -> [return: bb23, unwind: bb37];
    }

    bb23: {
        _62 = const true;
        _87 = const false;
        _51 = move (_1.25: <A24 as externals::function::inner::FromToNativeWasmType>::Native);
        _50 = <A24 as FromToNativeWasmType>::from_native(move _51) -> [return: bb24, unwind: bb35];
    }

    bb24: {
        _61 = const true;
        _86 = const false;
        _53 = move (_1.26: <A25 as externals::function::inner::FromToNativeWasmType>::Native);
        _52 = <A25 as FromToNativeWasmType>::from_native(move _53) -> [return: bb25, unwind: bb33];
    }

    bb25: {
        _60 = const true;
        _85 = const false;
        _55 = move (_1.27: <A26 as externals::function::inner::FromToNativeWasmType>::Native);
        _54 = <A26 as FromToNativeWasmType>::from_native(move _55) -> [return: bb26, unwind: bb31];
    }

    bb26: {
        _84 = const false;
        _83 = const false;
        _82 = const false;
        _81 = const false;
        _80 = const false;
        _79 = const false;
        _78 = const false;
        _77 = const false;
        _76 = const false;
        _75 = const false;
        _74 = const false;
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _69 = const false;
        _68 = const false;
        _67 = const false;
        _66 = const false;
        _65 = const false;
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _3 = (_59, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54);
        _2 = <Func as Fn<(&Env, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26)>>::call(_57, move _3) -> [return: bb27, unwind: bb31];
    }

    bb27: {
        _60 = const false;
        _61 = const false;
        _62 = const false;
        _63 = const false;
        _64 = const false;
        _65 = const false;
        _66 = const false;
        _67 = const false;
        _68 = const false;
        _69 = const false;
        _70 = const false;
        _71 = const false;
        _72 = const false;
        _73 = const false;
        _74 = const false;
        _75 = const false;
        _76 = const false;
        _77 = const false;
        _78 = const false;
        _79 = const false;
        _80 = const false;
        _81 = const false;
        _82 = const false;
        _83 = const false;
        _84 = const false;
        _0 = <RetsAsResult as IntoResult<Rets>>::into_result(move _2) -> [return: bb28, unwind: bb129];
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        resume;
    }

    bb30 (cleanup): {
        drop(_52) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_60) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_50) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_61) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_48) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_62) -> [0: bb37, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_46) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_63) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_44) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_64) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_42) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_65) -> [0: bb43, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_40) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_66) -> [0: bb45, otherwise: bb42];
    }

    bb44 (cleanup): {
        drop(_38) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_67) -> [0: bb47, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_36) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_68) -> [0: bb49, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_34) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_69) -> [0: bb51, otherwise: bb48];
    }

    bb50 (cleanup): {
        drop(_32) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        switchInt(_70) -> [0: bb53, otherwise: bb50];
    }

    bb52 (cleanup): {
        drop(_30) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        switchInt(_71) -> [0: bb55, otherwise: bb52];
    }

    bb54 (cleanup): {
        drop(_28) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_72) -> [0: bb57, otherwise: bb54];
    }

    bb56 (cleanup): {
        drop(_26) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        switchInt(_73) -> [0: bb59, otherwise: bb56];
    }

    bb58 (cleanup): {
        drop(_24) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        switchInt(_74) -> [0: bb61, otherwise: bb58];
    }

    bb60 (cleanup): {
        drop(_22) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        switchInt(_75) -> [0: bb63, otherwise: bb60];
    }

    bb62 (cleanup): {
        drop(_20) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        switchInt(_76) -> [0: bb65, otherwise: bb62];
    }

    bb64 (cleanup): {
        drop(_18) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_77) -> [0: bb67, otherwise: bb64];
    }

    bb66 (cleanup): {
        drop(_16) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_78) -> [0: bb69, otherwise: bb66];
    }

    bb68 (cleanup): {
        drop(_14) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_79) -> [0: bb71, otherwise: bb68];
    }

    bb70 (cleanup): {
        drop(_12) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_80) -> [0: bb73, otherwise: bb70];
    }

    bb72 (cleanup): {
        drop(_10) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        switchInt(_81) -> [0: bb75, otherwise: bb72];
    }

    bb74 (cleanup): {
        drop(_8) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_82) -> [0: bb77, otherwise: bb74];
    }

    bb76 (cleanup): {
        drop(_6) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_83) -> [0: bb79, otherwise: bb76];
    }

    bb78 (cleanup): {
        drop(_4) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_84) -> [0: bb129, otherwise: bb78];
    }

    bb80 (cleanup): {
        switchInt(_85) -> [0: bb29, otherwise: bb81];
    }

    bb81 (cleanup): {
        drop((_1.27: <A26 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        switchInt(_86) -> [0: bb80, otherwise: bb83];
    }

    bb83 (cleanup): {
        drop((_1.26: <A25 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_87) -> [0: bb82, otherwise: bb85];
    }

    bb85 (cleanup): {
        drop((_1.25: <A24 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        switchInt(_88) -> [0: bb84, otherwise: bb87];
    }

    bb87 (cleanup): {
        drop((_1.24: <A23 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        switchInt(_89) -> [0: bb86, otherwise: bb89];
    }

    bb89 (cleanup): {
        drop((_1.23: <A22 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        switchInt(_90) -> [0: bb88, otherwise: bb91];
    }

    bb91 (cleanup): {
        drop((_1.22: <A21 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        switchInt(_91) -> [0: bb90, otherwise: bb93];
    }

    bb93 (cleanup): {
        drop((_1.21: <A20 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        switchInt(_92) -> [0: bb92, otherwise: bb95];
    }

    bb95 (cleanup): {
        drop((_1.20: <A19 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        switchInt(_93) -> [0: bb94, otherwise: bb97];
    }

    bb97 (cleanup): {
        drop((_1.19: <A18 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        switchInt(_94) -> [0: bb96, otherwise: bb99];
    }

    bb99 (cleanup): {
        drop((_1.18: <A17 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        switchInt(_95) -> [0: bb98, otherwise: bb101];
    }

    bb101 (cleanup): {
        drop((_1.17: <A16 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_96) -> [0: bb100, otherwise: bb103];
    }

    bb103 (cleanup): {
        drop((_1.16: <A15 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        switchInt(_97) -> [0: bb102, otherwise: bb105];
    }

    bb105 (cleanup): {
        drop((_1.15: <A14 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        switchInt(_98) -> [0: bb104, otherwise: bb107];
    }

    bb107 (cleanup): {
        drop((_1.14: <A13 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        switchInt(_99) -> [0: bb106, otherwise: bb109];
    }

    bb109 (cleanup): {
        drop((_1.13: <A12 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        switchInt(_100) -> [0: bb108, otherwise: bb111];
    }

    bb111 (cleanup): {
        drop((_1.12: <A11 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        switchInt(_101) -> [0: bb110, otherwise: bb113];
    }

    bb113 (cleanup): {
        drop((_1.11: <A10 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        switchInt(_102) -> [0: bb112, otherwise: bb115];
    }

    bb115 (cleanup): {
        drop((_1.10: <A9 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        switchInt(_103) -> [0: bb114, otherwise: bb117];
    }

    bb117 (cleanup): {
        drop((_1.9: <A8 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        switchInt(_104) -> [0: bb116, otherwise: bb119];
    }

    bb119 (cleanup): {
        drop((_1.8: <A7 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        switchInt(_105) -> [0: bb118, otherwise: bb121];
    }

    bb121 (cleanup): {
        drop((_1.7: <A6 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        switchInt(_106) -> [0: bb120, otherwise: bb123];
    }

    bb123 (cleanup): {
        drop((_1.6: <A5 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        switchInt(_107) -> [0: bb122, otherwise: bb125];
    }

    bb125 (cleanup): {
        drop((_1.5: <A4 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        switchInt(_108) -> [0: bb124, otherwise: bb127];
    }

    bb127 (cleanup): {
        drop((_1.4: <A3 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        drop((_1.3: <A2 as externals::function::inner::FromToNativeWasmType>::Native)) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        switchInt(_109) -> [0: bb126, otherwise: bb128];
    }
}

inner::<impl at lib/api/src/externals/function.rs:1406:5: 1406:37>::Array::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1406:5: 1406:37>::from_array(_1: [i128; 0]) -> Infallible {
    let mut _0: std::convert::Infallible;
    let mut _2: !;

    bb0: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1406:5: 1406:37>::from_slice(_1: &[i128]) -> Result<Infallible, TryFromSliceError> {
    let mut _0: std::result::Result<std::convert::Infallible, std::array::TryFromSliceError>;
    let mut _2: !;

    bb0: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1406:5: 1406:37>::into_array(_1: Infallible) -> [i128; 0] {
    debug self => const ZeroSized: Infallible;
    let mut _0: [i128; 0];

    bb0: {
        return;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1406:5: 1406:37>::empty_array() -> [i128; 0] {
    let mut _0: [i128; 0];
    let mut _1: !;

    bb0: {
        _1 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1406:5: 1406:37>::from_c_struct(_1: Infallible) -> Infallible {
    let mut _0: std::convert::Infallible;
    let mut _2: !;

    bb0: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1406:5: 1406:37>::into_c_struct(_1: Infallible) -> Infallible {
    debug self => const ZeroSized: Infallible;
    let mut _0: std::convert::Infallible;
    let mut _2: !;

    bb0: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }
}

fn inner::<impl at lib/api/src/externals/function.rs:1406:5: 1406:37>::wasm_types() -> &[wasmer_types::Type] {
    let mut _0: &[wasmer_types::Type];
    let mut _1: &[wasmer_types::Type; 0];

    bb0: {
        _1 = const _;
        _0 = _1 as &[wasmer_types::Type] (PointerCoercion(Unsize));
        return;
    }
}

promoted[0] in inner::<impl at lib/api/src/externals/function.rs:1406:5: 1406:37>::wasm_types: &[wasmer_types::Type; 0] = {
    let mut _0: &[wasmer_types::Type; 0];
    let mut _1: [wasmer_types::Type; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:20:10: 20:21>::size_of_val(_1: &global::Global, _2: &mut dyn MemoryUsageTracker) -> usize {
    debug self => _1;
    debug visited => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let _8: &store::Store;
    let mut _9: (usize, bool);
    let mut _10: usize;
    let _11: &store::Store;
    let mut _12: (usize, bool);
    let mut _13: usize;
    let _14: &wasmer_vm::VMGlobal;
    let mut _15: (usize, bool);
    let mut _16: usize;
    let _17: &wasmer_vm::VMGlobal;
    let mut _18: (usize, bool);

    bb0: {
        _6 = std::mem::size_of_val::<global::Global>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &((*_1).0: store::Store);
        _7 = <Store as MemoryUsage>::size_of_val(_8, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = CheckedAdd(_6, _7);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _7) -> [success: bb3, unwind continue];
    }

    bb3: {
        _5 = move (_9.0: usize);
        _11 = &((*_1).0: store::Store);
        _10 = std::mem::size_of_val::<Store>(_11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = CheckedSub(_5, _10);
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", move _5, move _10) -> [success: bb5, unwind continue];
    }

    bb5: {
        _4 = move (_12.0: usize);
        _14 = &((*_1).1: wasmer_vm::VMGlobal);
        _13 = <VMGlobal as MemoryUsage>::size_of_val(_14, _2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = CheckedAdd(_4, _13);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _13) -> [success: bb7, unwind continue];
    }

    bb7: {
        _3 = move (_15.0: usize);
        _17 = &((*_1).1: wasmer_vm::VMGlobal);
        _16 = std::mem::size_of_val::<VMGlobal>(_17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = CheckedSub(_3, _16);
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _16) -> [success: bb9, unwind continue];
    }

    bb9: {
        _0 = move (_18.0: usize);
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::new(_1: &Store, _2: Value<function::Function>) -> global::Global {
    debug store => _1;
    debug val => _2;
    let mut _0: externals::global::Global;
    let mut _3: std::result::Result<externals::global::Global, wasmer_engine::RuntimeError>;
    let mut _4: wasmer_types::Mutability;

    bb0: {
        _4 = Const;
        _3 = global::Global::from_value(_1, move _2, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<global::Global, RuntimeError>::unwrap(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::new_mut(_1: &Store, _2: Value<function::Function>) -> global::Global {
    debug store => _1;
    debug val => _2;
    let mut _0: externals::global::Global;
    let mut _3: std::result::Result<externals::global::Global, wasmer_engine::RuntimeError>;
    let mut _4: wasmer_types::Mutability;

    bb0: {
        _4 = Var;
        _3 = global::Global::from_value(_1, move _2, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<global::Global, RuntimeError>::unwrap(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::from_value(_1: &Store, _2: Value<function::Function>, _3: Mutability) -> Result<global::Global, RuntimeError> {
    debug store => _1;
    debug val => _2;
    debug mutability => _3;
    let mut _0: std::result::Result<externals::global::Global, wasmer_engine::RuntimeError>;
    let mut _4: bool;
    let mut _5: &wasmer_types::Value<externals::function::Function>;
    let mut _6: wasmer_engine::RuntimeError;
    let _7: wasmer_vm::Global;
    let mut _8: wasmer_types::GlobalType;
    let mut _9: wasmer_types::Type;
    let mut _10: &wasmer_types::Value<externals::function::Function>;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>>;
    let mut _12: std::result::Result<(), wasmer_engine::RuntimeError>;
    let mut _13: std::result::Result<(), wasmer_vm::GlobalError>;
    let mut _14: &wasmer_vm::Global;
    let mut _15: wasmer_types::Value<externals::function::Function>;
    let mut _16: &wasmer_types::Value<externals::function::Function>;
    let mut _17: {closure@lib/api/src/externals/global.rs:73:26: 73:29};
    let mut _18: &wasmer_types::Value<externals::function::Function>;
    let mut _19: isize;
    let mut _21: externals::global::Global;
    let mut _22: store::Store;
    let mut _23: wasmer_vm::VMGlobal;
    let mut _24: std::sync::Arc<wasmer_vm::Global>;
    let mut _25: wasmer_vm::Global;
    let mut _26: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _27: bool;
    scope 1 {
        debug global => _7;
        scope 2 {
            let _20: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
            scope 3 {
                debug residual => _20;
                scope 4 {
                }
            }
            scope 5 {
                debug val => const ();
                scope 6 {
                }
            }
        }
    }

    bb0: {
        _27 = const false;
        _5 = &_2;
        _4 = <Value<function::Function> as StoreObject>::comes_from_same_store(move _5, _1) -> [return: bb1, unwind: bb21];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = &_2;
        _9 = Value::<function::Function>::ty(move _10) -> [return: bb5, unwind: bb21];
    }

    bb3: {
        _6 = RuntimeError::new::<&str>(const "cross-`Store` globals are not supported") -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _0 = Result::<global::Global, RuntimeError>::Err(move _6);
        goto -> bb18;
    }

    bb5: {
        _8 = wasmer_types::GlobalType { ty: move _9, mutability: _3 };
        _7 = wasmer_vm::Global::new(move _8) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _27 = const true;
        _14 = &_7;
        _16 = &_2;
        _15 = <Value<function::Function> as Clone>::clone(move _16) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _13 = wasmer_vm::Global::set_unchecked::<function::Function>(move _14, move _15) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _18 = &_2;
        _17 = {closure@lib/api/src/externals/global.rs:73:26: 73:29} { val: move _18 };
        _12 = Result::<(), GlobalError>::map_err::<RuntimeError, {closure@lib/api/src/externals/global.rs:73:26: 73:29}>(move _13, move _17) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _11 = <Result<(), RuntimeError> as std::ops::Try>::branch(move _12) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        _19 = discriminant(_11);
        switchInt(move _19) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        _22 = <Store as Clone>::clone(_1) -> [return: bb15, unwind: bb24];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _20 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<global::Global, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _20) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        drop(_7) -> [return: bb17, unwind: bb21];
    }

    bb15: {
        _27 = const false;
        _25 = move _7;
        _24 = Arc::<wasmer_vm::Global>::new(move _25) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        _26 = Option::<WeakOrStrongInstanceRef>::None;
        _23 = VMGlobal { from: move _24, instance_ref: move _26 };
        _21 = global::Global { store: move _22, vm_global: move _23 };
        _0 = Result::<global::Global, RuntimeError>::Ok(move _21);
        _27 = const false;
        drop(_2) -> [return: bb19, unwind continue];
    }

    bb17: {
        _27 = const false;
        goto -> bb18;
    }

    bb18: {
        drop(_2) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_22) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_2) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23 (cleanup): {
        drop(_7) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_27) -> [0: bb21, otherwise: bb23];
    }
}

fn global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::from_value::{closure#0}(_1: {closure@lib/api/src/externals/global.rs:73:26: 73:29}, _2: GlobalError) -> RuntimeError {
    debug e => _2;
    debug val => (*(_1.0: &wasmer_types::Value<externals::function::Function>));
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 2];
    let _8: [core::fmt::rt::Argument<'_>; 2];
    let mut _9: core::fmt::rt::Argument<'_>;
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &wasmer_vm::GlobalError;
    let mut _12: &[&str; 2];
    let mut _13: &wasmer_types::Value<externals::function::Function>;
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _12 = const _;
        _5 = _12 as &[&str] (PointerCoercion(Unsize));
        _13 = deref_copy (_1.0: &wasmer_types::Value<externals::function::Function>);
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Value<function::Function>>(_13) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = &_2;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<GlobalError>(_11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = [move _9, move _10];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = format(move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

promoted[0] in global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::from_value::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "create global for ", const ": "];
        _0 = &_1;
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::ty(_1: &global::Global) -> &wasmer_types::GlobalType {
    debug self => _1;
    let mut _0: &wasmer_types::GlobalType;
    let _2: &wasmer_vm::Global;
    let mut _3: &std::sync::Arc<wasmer_vm::Global>;

    bb0: {
        _3 = &(((*_1).1: wasmer_vm::VMGlobal).0: std::sync::Arc<wasmer_vm::Global>);
        _2 = <Arc<wasmer_vm::Global> as Deref>::deref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = wasmer_vm::Global::ty(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::store(_1: &global::Global) -> &Store {
    debug self => _1;
    let mut _0: &store::Store;

    bb0: {
        _0 = &((*_1).0: store::Store);
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::get(_1: &global::Global) -> Value<function::Function> {
    debug self => _1;
    let mut _0: wasmer_types::Value<externals::function::Function>;
    let _2: &wasmer_vm::Global;
    let mut _3: &std::sync::Arc<wasmer_vm::Global>;
    let mut _4: &dyn std::any::Any;
    let _5: &store::Store;

    bb0: {
        _3 = &(((*_1).1: wasmer_vm::VMGlobal).0: std::sync::Arc<wasmer_vm::Global>);
        _2 = <Arc<wasmer_vm::Global> as Deref>::deref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).0: store::Store);
        _4 = _5 as &dyn std::any::Any (PointerCoercion(Unsize));
        _0 = wasmer_vm::Global::get::<function::Function>(_2, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::set(_1: &global::Global, _2: Value<function::Function>) -> Result<(), RuntimeError> {
    debug self => _1;
    debug val => _2;
    let mut _0: std::result::Result<(), wasmer_engine::RuntimeError>;
    let mut _3: bool;
    let mut _4: &wasmer_types::Value<externals::function::Function>;
    let _5: &store::Store;
    let mut _6: wasmer_engine::RuntimeError;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>>;
    let mut _8: std::result::Result<(), wasmer_engine::RuntimeError>;
    let mut _9: std::result::Result<(), wasmer_vm::GlobalError>;
    let _10: &wasmer_vm::Global;
    let mut _11: &std::sync::Arc<wasmer_vm::Global>;
    let mut _12: wasmer_types::Value<externals::function::Function>;
    let mut _13: isize;
    let mut _15: bool;
    scope 1 {
        let _14: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
        scope 2 {
            debug residual => _14;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
    }

    bb0: {
        _15 = const false;
        _15 = const true;
        _4 = &_2;
        _5 = &((*_1).0: store::Store);
        _3 = <Value<function::Function> as StoreObject>::comes_from_same_store(move _4, _5) -> [return: bb1, unwind: bb17];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = &(((*_1).1: wasmer_vm::VMGlobal).0: std::sync::Arc<wasmer_vm::Global>);
        _10 = <Arc<wasmer_vm::Global> as Deref>::deref(move _11) -> [return: bb5, unwind: bb17];
    }

    bb3: {
        _6 = RuntimeError::new::<&str>(const "cross-`Store` values are not supported") -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _0 = Result::<(), RuntimeError>::Err(move _6);
        goto -> bb15;
    }

    bb5: {
        _15 = const false;
        _12 = move _2;
        _9 = wasmer_vm::Global::set::<function::Function>(_10, move _12) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _8 = Result::<(), GlobalError>::map_err::<RuntimeError, {closure@lib/api/src/externals/global.rs:184:26: 184:29}>(move _9, const ZeroSized: {closure@lib/api/src/externals/global.rs:184:26: 184:29}) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _7 = <Result<(), RuntimeError> as std::ops::Try>::branch(move _8) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        _13 = discriminant(_7);
        switchInt(move _13) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        _0 = Result::<(), RuntimeError>::Ok(const ());
        goto -> bb12;
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _14 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<(), RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _14) -> [return: bb18, unwind: bb17];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        resume;
    }

    bb14: {
        drop(_2) -> [return: bb12, unwind continue];
    }

    bb15: {
        switchInt(_15) -> [0: bb12, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_15) -> [0: bb13, otherwise: bb16];
    }

    bb18: {
        goto -> bb15;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::set::{closure#0}(_1: {closure@lib/api/src/externals/global.rs:184:26: 184:29}, _2: GlobalError) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &wasmer_vm::GlobalError;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<GlobalError>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::set::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::from_vm_export(_1: &Store, _2: VMGlobal) -> global::Global {
    debug store => _1;
    debug vm_global => _2;
    let mut _0: externals::global::Global;
    let mut _3: store::Store;
    let mut _4: wasmer_vm::VMGlobal;

    bb0: {
        _3 = <Store as Clone>::clone(_1) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _4 = move _2;
        _0 = global::Global { store: move _3, vm_global: move _4 };
        return;
    }

    bb2 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::same(_1: &global::Global, _2: &global::Global) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: &std::sync::Arc<wasmer_vm::Global>;
    let _4: &std::sync::Arc<wasmer_vm::Global>;

    bb0: {
        _3 = &(((*_1).1: wasmer_vm::VMGlobal).0: std::sync::Arc<wasmer_vm::Global>);
        _4 = &(((*_2).1: wasmer_vm::VMGlobal).0: std::sync::Arc<wasmer_vm::Global>);
        _0 = Arc::<wasmer_vm::Global>::ptr_eq(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:26:1: 26:12>::get_vm_global(_1: &global::Global) -> &VMGlobal {
    debug self => _1;
    let mut _0: &wasmer_vm::VMGlobal;

    bb0: {
        _0 = &((*_1).1: wasmer_vm::VMGlobal);
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:225:1: 225:22>::clone(_1: &global::Global) -> global::Global {
    debug self => _1;
    let mut _0: externals::global::Global;
    let mut _2: wasmer_vm::VMGlobal;
    let mut _3: &wasmer_vm::VMGlobal;
    let _4: ();
    let mut _5: std::option::Option<()>;
    let mut _6: &mut wasmer_vm::VMGlobal;
    let mut _7: store::Store;
    let mut _8: &store::Store;
    let mut _9: wasmer_vm::VMGlobal;
    scope 1 {
        debug vm_global => _2;
    }

    bb0: {
        _3 = &((*_1).1: wasmer_vm::VMGlobal);
        _2 = <VMGlobal as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &mut _2;
        _5 = VMGlobal::upgrade_instance_ref(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _4 = Option::<()>::unwrap(move _5) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _8 = &((*_1).0: store::Store);
        _7 = <Store as Clone>::clone(move _8) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _9 = move _2;
        _0 = global::Global { store: move _7, vm_global: move _9 };
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:237:1: 237:27>::fmt(_1: &global::Global, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _4: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _5: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _6: std::fmt::DebugStruct<'_, '_>;
    let _7: &str;
    let _8: &str;
    let mut _9: &dyn std::fmt::Debug;
    let _10: &&wasmer_types::GlobalType;
    let _11: &wasmer_types::GlobalType;
    let _12: &str;
    let mut _13: &dyn std::fmt::Debug;
    let _14: &wasmer_types::Value<externals::function::Function>;
    let _15: wasmer_types::Value<externals::function::Function>;

    bb0: {
        _7 = const "Global";
        _6 = Formatter::<'_>::debug_struct(_2, _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &mut _6;
        _8 = const "ty";
        _11 = global::Global::ty(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = &_11;
        _9 = _10 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _4 = DebugStruct::<'_, '_>::field(move _5, _8, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = const "value";
        _15 = global::Global::get(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _13 = _14 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _3 = DebugStruct::<'_, '_>::field(_4, _12, move _13) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _0 = DebugStruct::<'_, '_>::finish(_3) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_15) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_15) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:247:1: 247:35>::to_export(_1: &global::Global) -> wasmer_engine::Export {
    debug self => _1;
    let mut _0: wasmer_engine::Export;
    let mut _2: wasmer_vm::VMGlobal;
    let mut _3: &wasmer_vm::VMGlobal;

    bb0: {
        _3 = &((*_1).1: wasmer_vm::VMGlobal);
        _2 = <VMGlobal as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <VMGlobal as Into<wasmer_engine::Export>>::into(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:247:1: 247:35>::get_self_from_extern(_1: &Extern) -> Result<&global::Global, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<&externals::global::Global, exports::ExportError>;
    let mut _2: isize;
    let _3: &externals::global::Global;
    let mut _4: exports::ExportError;
    scope 1 {
        debug global => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = ExportError::IncompatibleType;
        _0 = Result::<&global::Global, ExportError>::Err(move _4);
        goto -> bb3;
    }

    bb2: {
        _3 = &(((*_1) as Global).0: externals::global::Global);
        _0 = Result::<&global::Global, ExportError>::Ok(_3);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:247:1: 247:35>::into_weak_instance_ref(_1: &mut global::Global) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut (((*_1).1: wasmer_vm::VMGlobal).1: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/externals/global.rs:263:18: 263:21}>(move _3, const ZeroSized: {closure@lib/api/src/externals/global.rs:263:18: 263:21}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn global::<impl at lib/api/src/externals/global.rs:247:1: 247:35>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/externals/global.rs:263:18: 263:21}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:27:10: 27:15>::fmt(_1: &memory::Memory, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &store::Store;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&wasmer_vm::VMMemory;
    let _10: &wasmer_vm::VMMemory;

    bb0: {
        _3 = const "Memory";
        _4 = const "store";
        _6 = &((*_1).0: store::Store);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "vm_memory";
        _10 = &((*_1).1: wasmer_vm::VMMemory);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:27:17: 27:28>::size_of_val(_1: &memory::Memory, _2: &mut dyn MemoryUsageTracker) -> usize {
    debug self => _1;
    debug visited => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let _8: &store::Store;
    let mut _9: (usize, bool);
    let mut _10: usize;
    let _11: &store::Store;
    let mut _12: (usize, bool);
    let mut _13: usize;
    let _14: &wasmer_vm::VMMemory;
    let mut _15: (usize, bool);
    let mut _16: usize;
    let _17: &wasmer_vm::VMMemory;
    let mut _18: (usize, bool);

    bb0: {
        _6 = std::mem::size_of_val::<memory::Memory>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &((*_1).0: store::Store);
        _7 = <Store as MemoryUsage>::size_of_val(_8, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = CheckedAdd(_6, _7);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _7) -> [success: bb3, unwind continue];
    }

    bb3: {
        _5 = move (_9.0: usize);
        _11 = &((*_1).0: store::Store);
        _10 = std::mem::size_of_val::<Store>(_11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = CheckedSub(_5, _10);
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", move _5, move _10) -> [success: bb5, unwind continue];
    }

    bb5: {
        _4 = move (_12.0: usize);
        _14 = &((*_1).1: wasmer_vm::VMMemory);
        _13 = <VMMemory as MemoryUsage>::size_of_val(_14, _2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = CheckedAdd(_4, _13);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _13) -> [success: bb7, unwind continue];
    }

    bb7: {
        _3 = move (_15.0: usize);
        _17 = &((*_1).1: wasmer_vm::VMMemory);
        _16 = std::mem::size_of_val::<VMMemory>(_17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = CheckedSub(_3, _16);
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _16) -> [success: bb9, unwind continue];
    }

    bb9: {
        _0 = move (_18.0: usize);
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::new(_1: &Store, _2: wasmer_types::MemoryType) -> Result<memory::Memory, MemoryError> {
    debug store => _1;
    debug ty => _2;
    let mut _0: std::result::Result<externals::memory::Memory, wasmer_vm::MemoryError>;
    let _3: &dyn wasmer_engine::Tunables;
    let _5: &wasmer_types::MemoryType;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::MemoryError>, std::sync::Arc<dyn wasmer_vm::Memory>>;
    let mut _8: std::result::Result<std::sync::Arc<dyn wasmer_vm::Memory>, wasmer_vm::MemoryError>;
    let _9: &wasmer_types::MemoryType;
    let _10: &wasmer_vm::MemoryStyle;
    let mut _11: isize;
    let mut _14: externals::memory::Memory;
    let mut _15: store::Store;
    let mut _16: wasmer_vm::VMMemory;
    let mut _17: std::sync::Arc<dyn wasmer_vm::Memory>;
    let mut _18: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;
    scope 1 {
        debug tunables => _3;
        let _4: wasmer_vm::MemoryStyle;
        scope 2 {
            debug style => _4;
            let _6: std::sync::Arc<dyn wasmer_vm::Memory>;
            let _12: std::result::Result<std::convert::Infallible, wasmer_vm::MemoryError>;
            let _13: std::sync::Arc<dyn wasmer_vm::Memory>;
            scope 3 {
                debug memory => _6;
            }
            scope 4 {
                debug residual => _12;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _13;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _3 = Store::tunables(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_2;
        _4 = <dyn Tunables as Tunables>::memory_style(_3, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = &_2;
        _10 = &_4;
        _8 = <dyn Tunables as Tunables>::create_host_memory(_3, _9, _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = <Result<Arc<dyn wasmer_vm::Memory>, MemoryError> as std::ops::Try>::branch(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _13 = move ((_7 as Continue).0: std::sync::Arc<dyn wasmer_vm::Memory>);
        _6 = move _13;
        _15 = <Store as Clone>::clone(_1) -> [return: bb8, unwind: bb10];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _12 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::MemoryError>);
        _0 = <Result<memory::Memory, MemoryError> as FromResidual<Result<Infallible, MemoryError>>>::from_residual(move _12) -> [return: bb9, unwind continue];
    }

    bb8: {
        _17 = move _6;
        _18 = Option::<WeakOrStrongInstanceRef>::None;
        _16 = VMMemory { from: move _17, instance_ref: move _18 };
        _14 = memory::Memory { store: move _15, vm_memory: move _16 };
        _0 = Result::<memory::Memory, MemoryError>::Ok(move _14);
        goto -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_6) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::ty(_1: &memory::Memory) -> wasmer_types::MemoryType {
    debug self => _1;
    let mut _0: wasmer_types::MemoryType;
    let _2: &dyn wasmer_vm::Memory;
    let mut _3: &std::sync::Arc<dyn wasmer_vm::Memory>;

    bb0: {
        _3 = &(((*_1).1: wasmer_vm::VMMemory).0: std::sync::Arc<dyn wasmer_vm::Memory>);
        _2 = <Arc<dyn wasmer_vm::Memory> as Deref>::deref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <dyn wasmer_vm::Memory as wasmer_vm::Memory>::ty(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::store(_1: &memory::Memory) -> &Store {
    debug self => _1;
    let mut _0: &store::Store;

    bb0: {
        _0 = &((*_1).0: store::Store);
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::data_unchecked(_1: &memory::Memory) -> &[u8] {
    debug self => _1;
    let mut _0: &[u8];
    let _2: &mut [u8];

    bb0: {
        _2 = memory::Memory::data_unchecked_mut(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &(*_2);
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::data_unchecked_mut(_1: &memory::Memory) -> &mut [u8] {
    debug self => _1;
    let mut _0: &mut [u8];
    let _2: std::ptr::NonNull<wasmer_vm::VMMemoryDefinition>;
    let _3: &dyn wasmer_vm::Memory;
    let mut _4: &std::sync::Arc<dyn wasmer_vm::Memory>;
    let mut _6: &std::ptr::NonNull<wasmer_vm::VMMemoryDefinition>;
    let mut _7: *mut u8;
    let mut _8: usize;
    let mut _9: std::result::Result<usize, std::num::TryFromIntError>;
    let mut _10: u32;
    scope 1 {
        debug definition => _2;
        let _5: &wasmer_vm::VMMemoryDefinition;
        scope 2 {
            debug def => _5;
        }
    }

    bb0: {
        _4 = &(((*_1).1: wasmer_vm::VMMemory).0: std::sync::Arc<dyn wasmer_vm::Memory>);
        _3 = <Arc<dyn wasmer_vm::Memory> as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <dyn wasmer_vm::Memory as wasmer_vm::Memory>::vmmemory(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_2;
        _5 = NonNull::<VMMemoryDefinition>::as_ref::<'_>(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = ((*_5).0: *mut u8);
        _10 = ((*_5).1: u32);
        _9 = <u32 as TryInto<usize>>::try_into(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = Result::<usize, TryFromIntError>::unwrap(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = std::slice::from_raw_parts_mut::<'_, u8>(move _7, move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::data_ptr(_1: &memory::Memory) -> *mut u8 {
    debug self => _1;
    let mut _0: *mut u8;
    let _2: std::ptr::NonNull<wasmer_vm::VMMemoryDefinition>;
    let _3: &dyn wasmer_vm::Memory;
    let mut _4: &std::sync::Arc<dyn wasmer_vm::Memory>;
    let mut _6: &std::ptr::NonNull<wasmer_vm::VMMemoryDefinition>;
    scope 1 {
        debug definition => _2;
        let _5: &wasmer_vm::VMMemoryDefinition;
        scope 2 {
            debug def => _5;
        }
        scope 3 {
        }
    }

    bb0: {
        _4 = &(((*_1).1: wasmer_vm::VMMemory).0: std::sync::Arc<dyn wasmer_vm::Memory>);
        _3 = <Arc<dyn wasmer_vm::Memory> as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <dyn wasmer_vm::Memory as wasmer_vm::Memory>::vmmemory(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_2;
        _5 = NonNull::<VMMemoryDefinition>::as_ref::<'_>(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = ((*_5).0: *mut u8);
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::data_size(_1: &memory::Memory) -> u64 {
    debug self => _1;
    let mut _0: u64;
    let _2: std::ptr::NonNull<wasmer_vm::VMMemoryDefinition>;
    let _3: &dyn wasmer_vm::Memory;
    let mut _4: &std::sync::Arc<dyn wasmer_vm::Memory>;
    let mut _6: &std::ptr::NonNull<wasmer_vm::VMMemoryDefinition>;
    let mut _7: u32;
    scope 1 {
        debug definition => _2;
        let _5: &wasmer_vm::VMMemoryDefinition;
        scope 2 {
            debug def => _5;
        }
        scope 3 {
        }
    }

    bb0: {
        _4 = &(((*_1).1: wasmer_vm::VMMemory).0: std::sync::Arc<dyn wasmer_vm::Memory>);
        _3 = <Arc<dyn wasmer_vm::Memory> as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <dyn wasmer_vm::Memory as wasmer_vm::Memory>::vmmemory(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_2;
        _5 = NonNull::<VMMemoryDefinition>::as_ref::<'_>(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = ((*_5).1: u32);
        _0 = <u32 as Into<u64>>::into(move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::size(_1: &memory::Memory) -> Pages {
    debug self => _1;
    let mut _0: wasmer_types::Pages;
    let _2: &dyn wasmer_vm::Memory;
    let mut _3: &std::sync::Arc<dyn wasmer_vm::Memory>;

    bb0: {
        _3 = &(((*_1).1: wasmer_vm::VMMemory).0: std::sync::Arc<dyn wasmer_vm::Memory>);
        _2 = <Arc<dyn wasmer_vm::Memory> as Deref>::deref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <dyn wasmer_vm::Memory as wasmer_vm::Memory>::size(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::grow(_1: &memory::Memory, _2: IntoPages) -> Result<Pages, MemoryError> {
    debug self => _1;
    debug delta => _2;
    let mut _0: std::result::Result<wasmer_types::Pages, wasmer_vm::MemoryError>;
    let _3: &dyn wasmer_vm::Memory;
    let mut _4: &std::sync::Arc<dyn wasmer_vm::Memory>;
    let mut _5: wasmer_types::Pages;
    let mut _6: IntoPages;
    let mut _7: bool;

    bb0: {
        _7 = const false;
        _7 = const true;
        _4 = &(((*_1).1: wasmer_vm::VMMemory).0: std::sync::Arc<dyn wasmer_vm::Memory>);
        _3 = <Arc<dyn wasmer_vm::Memory> as Deref>::deref(move _4) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _7 = const false;
        _6 = move _2;
        _5 = <IntoPages as Into<Pages>>::into(move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _0 = <dyn wasmer_vm::Memory as wasmer_vm::Memory>::grow(_3, move _5) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        switchInt(_7) -> [0: bb4, otherwise: bb5];
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::view(_1: &memory::Memory) -> MemoryView<'_, T> {
    debug self => _1;
    let mut _0: wasmer_types::MemoryView<'_, T>;
    let _2: *mut u8;
    let mut _4: usize;
    let mut _5: wasmer_types::Bytes;
    let mut _6: wasmer_types::Pages;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: *mut T;
    let mut _10: u32;
    scope 1 {
        debug base => _2;
        let _3: usize;
        scope 2 {
            debug length => _3;
            scope 3 {
            }
        }
    }

    bb0: {
        _2 = memory::Memory::data_ptr(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = memory::Memory::size(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = Pages::bytes(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = (_5.0: usize);
        _7 = std::mem::size_of::<T>() -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = Eq(_7, const 0_usize);
        assert(!move _8, "attempt to divide `{}` by zero", _4) -> [success: bb5, unwind continue];
    }

    bb5: {
        _3 = Div(move _4, move _7);
        _9 = _2 as *mut T (PtrToPtr);
        _10 = _3 as u32 (IntToInt);
        _0 = MemoryView::<'_, T>::new(_9, move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::from_vm_export(_1: &Store, _2: VMMemory) -> memory::Memory {
    debug store => _1;
    debug vm_memory => _2;
    let mut _0: externals::memory::Memory;
    let mut _3: store::Store;
    let mut _4: wasmer_vm::VMMemory;

    bb0: {
        _3 = <Store as Clone>::clone(_1) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _4 = move _2;
        _0 = memory::Memory { store: move _3, vm_memory: move _4 };
        return;
    }

    bb2 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::same(_1: &memory::Memory, _2: &memory::Memory) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: &std::sync::Arc<dyn wasmer_vm::Memory>;
    let _4: &std::sync::Arc<dyn wasmer_vm::Memory>;

    bb0: {
        _3 = &(((*_1).1: wasmer_vm::VMMemory).0: std::sync::Arc<dyn wasmer_vm::Memory>);
        _4 = &(((*_2).1: wasmer_vm::VMMemory).0: std::sync::Arc<dyn wasmer_vm::Memory>);
        _0 = Arc::<dyn wasmer_vm::Memory>::ptr_eq(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:33:1: 33:12>::get_vm_memory(_1: &memory::Memory) -> &VMMemory {
    debug self => _1;
    let mut _0: &wasmer_vm::VMMemory;

    bb0: {
        _0 = &((*_1).1: wasmer_vm::VMMemory);
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:265:1: 265:22>::clone(_1: &memory::Memory) -> memory::Memory {
    debug self => _1;
    let mut _0: externals::memory::Memory;
    let mut _2: wasmer_vm::VMMemory;
    let mut _3: &wasmer_vm::VMMemory;
    let _4: ();
    let mut _5: std::option::Option<()>;
    let mut _6: &mut wasmer_vm::VMMemory;
    let mut _7: store::Store;
    let mut _8: &store::Store;
    let mut _9: wasmer_vm::VMMemory;
    scope 1 {
        debug vm_memory => _2;
    }

    bb0: {
        _3 = &((*_1).1: wasmer_vm::VMMemory);
        _2 = <VMMemory as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &mut _2;
        _5 = VMMemory::upgrade_instance_ref(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _4 = Option::<()>::unwrap(move _5) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _8 = &((*_1).0: store::Store);
        _7 = <Store as Clone>::clone(move _8) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _9 = move _2;
        _0 = memory::Memory { store: move _7, vm_memory: move _9 };
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:277:1: 277:35>::to_export(_1: &memory::Memory) -> wasmer_engine::Export {
    debug self => _1;
    let mut _0: wasmer_engine::Export;
    let mut _2: wasmer_vm::VMMemory;
    let mut _3: &wasmer_vm::VMMemory;

    bb0: {
        _3 = &((*_1).1: wasmer_vm::VMMemory);
        _2 = <VMMemory as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <VMMemory as Into<wasmer_engine::Export>>::into(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:277:1: 277:35>::get_self_from_extern(_1: &Extern) -> Result<&memory::Memory, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<&externals::memory::Memory, exports::ExportError>;
    let mut _2: isize;
    let _3: &externals::memory::Memory;
    let mut _4: exports::ExportError;
    scope 1 {
        debug memory => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [3: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = ExportError::IncompatibleType;
        _0 = Result::<&memory::Memory, ExportError>::Err(move _4);
        goto -> bb3;
    }

    bb2: {
        _3 = &(((*_1) as Memory).0: externals::memory::Memory);
        _0 = Result::<&memory::Memory, ExportError>::Ok(_3);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:277:1: 277:35>::into_weak_instance_ref(_1: &mut memory::Memory) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut (((*_1).1: wasmer_vm::VMMemory).1: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/externals/memory.rs:293:18: 293:21}>(move _3, const ZeroSized: {closure@lib/api/src/externals/memory.rs:293:18: 293:21}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn memory::<impl at lib/api/src/externals/memory.rs:277:1: 277:35>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/externals/memory.rs:293:18: 293:21}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:21:10: 21:21>::size_of_val(_1: &table::Table, _2: &mut dyn MemoryUsageTracker) -> usize {
    debug self => _1;
    debug visited => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let _8: &store::Store;
    let mut _9: (usize, bool);
    let mut _10: usize;
    let _11: &store::Store;
    let mut _12: (usize, bool);
    let mut _13: usize;
    let _14: &wasmer_vm::VMTable;
    let mut _15: (usize, bool);
    let mut _16: usize;
    let _17: &wasmer_vm::VMTable;
    let mut _18: (usize, bool);

    bb0: {
        _6 = std::mem::size_of_val::<table::Table>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &((*_1).0: store::Store);
        _7 = <Store as MemoryUsage>::size_of_val(_8, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = CheckedAdd(_6, _7);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _7) -> [success: bb3, unwind continue];
    }

    bb3: {
        _5 = move (_9.0: usize);
        _11 = &((*_1).0: store::Store);
        _10 = std::mem::size_of_val::<Store>(_11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = CheckedSub(_5, _10);
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", move _5, move _10) -> [success: bb5, unwind continue];
    }

    bb5: {
        _4 = move (_12.0: usize);
        _14 = &((*_1).1: wasmer_vm::VMTable);
        _13 = <VMTable as MemoryUsage>::size_of_val(_14, _2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = CheckedAdd(_4, _13);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _13) -> [success: bb7, unwind continue];
    }

    bb7: {
        _3 = move (_15.0: usize);
        _17 = &((*_1).1: wasmer_vm::VMTable);
        _16 = std::mem::size_of_val::<VMTable>(_17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = CheckedSub(_3, _16);
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _16) -> [success: bb9, unwind continue];
    }

    bb9: {
        _0 = move (_18.0: usize);
        return;
    }
}

fn set_table_item(_1: &dyn wasmer_vm::Table, _2: u32, _3: TableElement) -> Result<(), RuntimeError> {
    debug table => _1;
    debug item_index => _2;
    debug item => _3;
    let mut _0: std::result::Result<(), wasmer_engine::RuntimeError>;
    let mut _4: std::result::Result<(), wasmer_vm::Trap>;

    bb0: {
        _4 = <dyn wasmer_vm::Table as wasmer_vm::Table>::set(_1, _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<(), wasmer_vm::Trap>::map_err::<RuntimeError, {closure@lib/api/src/externals/table.rs:32:41: 32:44}>(move _4, const ZeroSized: {closure@lib/api/src/externals/table.rs:32:41: 32:44}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn set_table_item::{closure#0}(_1: {closure@lib/api/src/externals/table.rs:32:41: 32:44}, _2: wasmer_vm::Trap) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;

    bb0: {
        _0 = <wasmer_vm::Trap as Into<RuntimeError>>::into(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::new(_1: &Store, _2: wasmer_types::TableType, _3: Value<function::Function>) -> Result<table::Table, RuntimeError> {
    debug store => _1;
    debug ty => _2;
    debug init => _3;
    let mut _0: std::result::Result<externals::table::Table, wasmer_engine::RuntimeError>;
    let _4: wasmer_vm::TableElement;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, wasmer_vm::TableElement>;
    let mut _6: std::result::Result<wasmer_vm::TableElement, wasmer_engine::RuntimeError>;
    let mut _7: &wasmer_types::Value<externals::function::Function>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _10: wasmer_vm::TableElement;
    let _13: &wasmer_types::TableType;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::sync::Arc<dyn wasmer_vm::Table>>;
    let mut _16: std::result::Result<std::sync::Arc<dyn wasmer_vm::Table>, wasmer_engine::RuntimeError>;
    let mut _17: std::result::Result<std::sync::Arc<dyn wasmer_vm::Table>, std::string::String>;
    let _18: &wasmer_types::TableType;
    let _19: &wasmer_vm::TableStyle;
    let mut _20: isize;
    let _24: &dyn wasmer_vm::Table;
    let mut _25: &std::sync::Arc<dyn wasmer_vm::Table>;
    let mut _26: std::ops::Range<u32>;
    let mut _27: std::ops::Range<u32>;
    let mut _29: std::option::Option<u32>;
    let mut _30: &mut std::ops::Range<u32>;
    let mut _31: isize;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>>;
    let mut _34: std::result::Result<(), wasmer_engine::RuntimeError>;
    let _35: &dyn wasmer_vm::Table;
    let mut _36: &std::sync::Arc<dyn wasmer_vm::Table>;
    let mut _37: wasmer_vm::TableElement;
    let mut _38: &wasmer_vm::TableElement;
    let mut _39: isize;
    let mut _41: externals::table::Table;
    let mut _42: store::Store;
    let mut _43: wasmer_vm::VMTable;
    let mut _44: std::sync::Arc<dyn wasmer_vm::Table>;
    let mut _45: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;
    scope 1 {
        debug item => _4;
        let _11: &dyn wasmer_engine::Tunables;
        scope 6 {
            debug tunables => _11;
            let _12: wasmer_vm::TableStyle;
            scope 7 {
                debug style => const CallerChecksSignature;
                let _14: std::sync::Arc<dyn wasmer_vm::Table>;
                let _21: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _22: std::sync::Arc<dyn wasmer_vm::Table>;
                scope 8 {
                    debug table => _14;
                    let _23: u32;
                    scope 13 {
                        debug num_elements => _23;
                        let mut _28: std::ops::Range<u32>;
                        scope 14 {
                            debug iter => _28;
                            let _32: u32;
                            scope 15 {
                                debug i => _32;
                                let _40: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                                scope 16 {
                                    debug residual => _40;
                                    scope 17 {
                                    }
                                }
                                scope 18 {
                                    debug val => const ();
                                    scope 19 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 9 {
                    debug residual => _21;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _22;
                    scope 12 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _7 = &_3;
        _6 = <Value<function::Function> as ValFuncRef>::into_table_reference(move _7, _1) -> [return: bb1, unwind: bb33];
    }

    bb1: {
        _5 = <Result<TableElement, RuntimeError> as std::ops::Try>::branch(move _6) -> [return: bb2, unwind: bb33];
    }

    bb2: {
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _10 = move ((_5 as Continue).0: wasmer_vm::TableElement);
        _4 = move _10;
        _11 = Store::tunables(_1) -> [return: bb6, unwind: bb32];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<table::Table, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _9) -> [return: bb35, unwind: bb33];
    }

    bb6: {
        _13 = &_2;
        _12 = <dyn Tunables as Tunables>::table_style(_11, _13) -> [return: bb7, unwind: bb32];
    }

    bb7: {
        _18 = &_2;
        _19 = &_12;
        _17 = <dyn Tunables as Tunables>::create_host_table(_11, _18, _19) -> [return: bb8, unwind: bb32];
    }

    bb8: {
        _16 = Result::<Arc<dyn wasmer_vm::Table>, String>::map_err::<RuntimeError, fn(String) -> RuntimeError {RuntimeError::new::<String>}>(move _17, RuntimeError::new::<String>) -> [return: bb9, unwind: bb32];
    }

    bb9: {
        _15 = <Result<Arc<dyn wasmer_vm::Table>, RuntimeError> as std::ops::Try>::branch(move _16) -> [return: bb10, unwind: bb32];
    }

    bb10: {
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        _22 = move ((_15 as Continue).0: std::sync::Arc<dyn wasmer_vm::Table>);
        _14 = move _22;
        _25 = &_14;
        _24 = <Arc<dyn wasmer_vm::Table> as Deref>::deref(move _25) -> [return: bb13, unwind: bb31];
    }

    bb12: {
        _21 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<table::Table, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _21) -> [return: bb36, unwind: bb32];
    }

    bb13: {
        _23 = <dyn wasmer_vm::Table as wasmer_vm::Table>::size(_24) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        _27 = std::ops::Range::<u32> { start: const 0_u32, end: _23 };
        _26 = <std::ops::Range<u32> as IntoIterator>::into_iter(move _27) -> [return: bb15, unwind: bb31];
    }

    bb15: {
        _28 = move _26;
        goto -> bb16;
    }

    bb16: {
        _30 = &mut _28;
        _29 = <std::ops::Range<u32> as Iterator>::next(_30) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        _31 = discriminant(_29);
        switchInt(move _31) -> [0: bb19, 1: bb18, otherwise: bb4];
    }

    bb18: {
        _32 = ((_29 as Some).0: u32);
        _36 = &_14;
        _35 = <Arc<dyn wasmer_vm::Table> as AsRef<dyn wasmer_vm::Table>>::as_ref(move _36) -> [return: bb20, unwind: bb31];
    }

    bb19: {
        _42 = <Store as Clone>::clone(_1) -> [return: bb26, unwind: bb31];
    }

    bb20: {
        _38 = &_4;
        _37 = <TableElement as Clone>::clone(move _38) -> [return: bb21, unwind: bb31];
    }

    bb21: {
        _34 = set_table_item(_35, _32, move _37) -> [return: bb22, unwind: bb31];
    }

    bb22: {
        _33 = <Result<(), RuntimeError> as std::ops::Try>::branch(move _34) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _39 = discriminant(_33);
        switchInt(move _39) -> [0: bb16, 1: bb24, otherwise: bb4];
    }

    bb24: {
        _40 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<table::Table, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _40) -> [return: bb25, unwind: bb31];
    }

    bb25: {
        drop(_14) -> [return: bb28, unwind: bb32];
    }

    bb26: {
        _44 = move _14;
        _45 = Option::<WeakOrStrongInstanceRef>::None;
        _43 = VMTable { from: move _44, instance_ref: move _45 };
        _41 = table::Table { store: move _42, vm_table: move _43 };
        _0 = Result::<table::Table, RuntimeError>::Ok(move _41);
        drop(_4) -> [return: bb27, unwind: bb33];
    }

    bb27: {
        drop(_3) -> [return: bb30, unwind continue];
    }

    bb28: {
        drop(_4) -> [return: bb29, unwind: bb33];
    }

    bb29: {
        drop(_3) -> [return: bb30, unwind continue];
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_14) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_4) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_3) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35: {
        goto -> bb29;
    }

    bb36: {
        goto -> bb28;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::ty(_1: &table::Table) -> &wasmer_types::TableType {
    debug self => _1;
    let mut _0: &wasmer_types::TableType;
    let _2: &dyn wasmer_vm::Table;
    let mut _3: &std::sync::Arc<dyn wasmer_vm::Table>;

    bb0: {
        _3 = &(((*_1).1: wasmer_vm::VMTable).0: std::sync::Arc<dyn wasmer_vm::Table>);
        _2 = <Arc<dyn wasmer_vm::Table> as Deref>::deref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <dyn wasmer_vm::Table as wasmer_vm::Table>::ty(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::store(_1: &table::Table) -> &Store {
    debug self => _1;
    let mut _0: &store::Store;

    bb0: {
        _0 = &((*_1).0: store::Store);
        return;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::get(_1: &table::Table, _2: u32) -> Option<Value<function::Function>> {
    debug self => _1;
    debug index => _2;
    let mut _0: std::option::Option<wasmer_types::Value<externals::function::Function>>;
    let _3: wasmer_vm::TableElement;
    let mut _4: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, wasmer_vm::TableElement>;
    let mut _5: std::option::Option<wasmer_vm::TableElement>;
    let _6: &dyn wasmer_vm::Table;
    let mut _7: &std::sync::Arc<dyn wasmer_vm::Table>;
    let mut _8: isize;
    let _9: wasmer_vm::TableElement;
    let mut _10: wasmer_types::Value<externals::function::Function>;
    let mut _11: wasmer_vm::TableElement;
    let _12: &store::Store;
    let mut _13: bool;
    scope 1 {
        debug item => _3;
    }
    scope 2 {
        debug residual => const Option::<Infallible>::None;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _13 = const false;
        _7 = &(((*_1).1: wasmer_vm::VMTable).0: std::sync::Arc<dyn wasmer_vm::Table>);
        _6 = <Arc<dyn wasmer_vm::Table> as Deref>::deref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <dyn wasmer_vm::Table as wasmer_vm::Table>::get(_6, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = <Option<TableElement> as std::ops::Try>::branch(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_4 as Continue).0: wasmer_vm::TableElement);
        _13 = const true;
        _3 = move _9;
        _13 = const false;
        _11 = move _3;
        _12 = &((*_1).0: store::Store);
        _10 = <Value<function::Function> as ValFuncRef>::from_table_reference(move _11, _12) -> [return: bb8, unwind: bb12];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _0 = <Option<Value<function::Function>> as FromResidual<Option<Infallible>>>::from_residual(const Option::<Infallible>::None) -> [return: bb7, unwind continue];
    }

    bb7: {
        _13 = const false;
        goto -> bb9;
    }

    bb8: {
        _0 = Option::<Value<function::Function>>::Some(move _10);
        _13 = const false;
        goto -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_13) -> [0: bb10, otherwise: bb11];
    }
}

fn table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::set(_1: &table::Table, _2: u32, _3: Value<function::Function>) -> Result<(), RuntimeError> {
    debug self => _1;
    debug index => _2;
    debug val => _3;
    let mut _0: std::result::Result<(), wasmer_engine::RuntimeError>;
    let _4: wasmer_vm::TableElement;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, wasmer_vm::TableElement>;
    let mut _6: std::result::Result<wasmer_vm::TableElement, wasmer_engine::RuntimeError>;
    let mut _7: &wasmer_types::Value<externals::function::Function>;
    let _8: &store::Store;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _11: wasmer_vm::TableElement;
    let _12: &dyn wasmer_vm::Table;
    let mut _13: &std::sync::Arc<dyn wasmer_vm::Table>;
    let mut _14: wasmer_vm::TableElement;
    let mut _15: bool;
    scope 1 {
        debug item => _4;
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        _15 = const false;
        _7 = &_3;
        _8 = &((*_1).0: store::Store);
        _6 = <Value<function::Function> as ValFuncRef>::into_table_reference(move _7, _8) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _5 = <Result<TableElement, RuntimeError> as std::ops::Try>::branch(move _6) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_5 as Continue).0: wasmer_vm::TableElement);
        _15 = const true;
        _4 = move _11;
        _13 = &(((*_1).1: wasmer_vm::VMTable).0: std::sync::Arc<dyn wasmer_vm::Table>);
        _12 = <Arc<dyn wasmer_vm::Table> as AsRef<dyn wasmer_vm::Table>>::as_ref(move _13) -> [return: bb7, unwind: bb13];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<(), RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _10) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _15 = const false;
        drop(_3) -> [return: bb9, unwind continue];
    }

    bb7: {
        _15 = const false;
        _14 = move _4;
        _0 = set_table_item(_12, _2, move _14) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _15 = const false;
        drop(_3) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_15) -> [0: bb10, otherwise: bb12];
    }
}

fn table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::size(_1: &table::Table) -> u32 {
    debug self => _1;
    let mut _0: u32;
    let _2: &dyn wasmer_vm::Table;
    let mut _3: &std::sync::Arc<dyn wasmer_vm::Table>;

    bb0: {
        _3 = &(((*_1).1: wasmer_vm::VMTable).0: std::sync::Arc<dyn wasmer_vm::Table>);
        _2 = <Arc<dyn wasmer_vm::Table> as Deref>::deref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <dyn wasmer_vm::Table as wasmer_vm::Table>::size(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::grow(_1: &table::Table, _2: u32, _3: Value<function::Function>) -> Result<u32, RuntimeError> {
    debug self => _1;
    debug delta => _2;
    debug init => _3;
    let mut _0: std::result::Result<u32, wasmer_engine::RuntimeError>;
    let _4: wasmer_vm::TableElement;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, wasmer_vm::TableElement>;
    let mut _6: std::result::Result<wasmer_vm::TableElement, wasmer_engine::RuntimeError>;
    let mut _7: &wasmer_types::Value<externals::function::Function>;
    let _8: &store::Store;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _11: wasmer_vm::TableElement;
    let mut _12: std::option::Option<u32>;
    let _13: &dyn wasmer_vm::Table;
    let mut _14: &std::sync::Arc<dyn wasmer_vm::Table>;
    let mut _15: u32;
    let mut _16: wasmer_vm::TableElement;
    let mut _17: {closure@lib/api/src/externals/table.rs:105:25: 105:27};
    let mut _18: &u32;
    let mut _19: bool;
    scope 1 {
        debug item => _4;
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        _19 = const false;
        _7 = &_3;
        _8 = &((*_1).0: store::Store);
        _6 = <Value<function::Function> as ValFuncRef>::into_table_reference(move _7, _8) -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _5 = <Result<TableElement, RuntimeError> as std::ops::Try>::branch(move _6) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_5 as Continue).0: wasmer_vm::TableElement);
        _19 = const true;
        _4 = move _11;
        _14 = &(((*_1).1: wasmer_vm::VMTable).0: std::sync::Arc<dyn wasmer_vm::Table>);
        _13 = <Arc<dyn wasmer_vm::Table> as Deref>::deref(move _14) -> [return: bb7, unwind: bb14];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<u32, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _10) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _19 = const false;
        drop(_3) -> [return: bb10, unwind continue];
    }

    bb7: {
        _15 = _2;
        _19 = const false;
        _16 = move _4;
        _12 = <dyn wasmer_vm::Table as wasmer_vm::Table>::grow(_13, move _15, move _16) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _18 = &_2;
        _17 = {closure@lib/api/src/externals/table.rs:105:25: 105:27} { delta: move _18 };
        _0 = Option::<u32>::ok_or_else::<RuntimeError, {closure@lib/api/src/externals/table.rs:105:25: 105:27}>(move _12, move _17) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _19 = const false;
        drop(_3) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_4) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_19) -> [0: bb11, otherwise: bb13];
    }
}

fn table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::grow::{closure#0}(_1: {closure@lib/api/src/externals/table.rs:105:25: 105:27}) -> RuntimeError {
    debug delta => (*(_1.0: &u32));
    let mut _0: wasmer_engine::RuntimeError;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &[&str; 2];
    let mut _10: &u32;
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _9 = const _;
        _4 = _9 as &[&str] (PointerCoercion(Unsize));
        _10 = deref_copy (_1.0: &u32);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::grow::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "failed to grow table by `", const "`"];
        _0 = &_1;
        return;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::copy(_1: &table::Table, _2: u32, _3: &table::Table, _4: u32, _5: u32) -> Result<(), RuntimeError> {
    debug dst_table => _1;
    debug dst_index => _2;
    debug src_table => _3;
    debug src_index => _4;
    debug len => _5;
    let mut _0: std::result::Result<(), wasmer_engine::RuntimeError>;
    let mut _6: bool;
    let _7: &store::Store;
    let _8: &store::Store;
    let mut _9: wasmer_engine::RuntimeError;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>>;
    let mut _11: std::result::Result<(), wasmer_engine::RuntimeError>;
    let mut _12: std::result::Result<(), wasmer_vm::Trap>;
    let _13: &dyn wasmer_vm::Table;
    let mut _14: &std::sync::Arc<dyn wasmer_vm::Table>;
    let _15: &dyn wasmer_vm::Table;
    let mut _16: &std::sync::Arc<dyn wasmer_vm::Table>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    scope 1 {
        debug residual => _18;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }

    bb0: {
        _7 = &((*_1).0: store::Store);
        _8 = &((*_3).0: store::Store);
        _6 = Store::same(_7, _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = &(((*_1).1: wasmer_vm::VMTable).0: std::sync::Arc<dyn wasmer_vm::Table>);
        _13 = <Arc<dyn wasmer_vm::Table> as AsRef<dyn wasmer_vm::Table>>::as_ref(move _14) -> [return: bb5, unwind continue];
    }

    bb3: {
        _9 = RuntimeError::new::<&str>(const "cross-`Store` table copies are not supported") -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Result::<(), RuntimeError>::Err(move _9);
        goto -> bb13;
    }

    bb5: {
        _16 = &(((*_3).1: wasmer_vm::VMTable).0: std::sync::Arc<dyn wasmer_vm::Table>);
        _15 = <Arc<dyn wasmer_vm::Table> as AsRef<dyn wasmer_vm::Table>>::as_ref(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        _12 = <dyn wasmer_vm::Table as wasmer_vm::Table>::copy(_13, _15, _2, _4, _5) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = Result::<(), wasmer_vm::Trap>::map_err::<RuntimeError, fn(wasmer_vm::Trap) -> RuntimeError {RuntimeError::from_trap}>(move _12, RuntimeError::from_trap) -> [return: bb8, unwind continue];
    }

    bb8: {
        _10 = <Result<(), RuntimeError> as std::ops::Try>::branch(move _11) -> [return: bb9, unwind continue];
    }

    bb9: {
        _17 = discriminant(_10);
        switchInt(move _17) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        _0 = Result::<(), RuntimeError>::Ok(const ());
        goto -> bb13;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _18 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<(), RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _18) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::from_vm_export(_1: &Store, _2: VMTable) -> table::Table {
    debug store => _1;
    debug vm_table => _2;
    let mut _0: externals::table::Table;
    let mut _3: store::Store;
    let mut _4: wasmer_vm::VMTable;

    bb0: {
        _3 = <Store as Clone>::clone(_1) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _4 = move _2;
        _0 = table::Table { store: move _3, vm_table: move _4 };
        return;
    }

    bb2 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::same(_1: &table::Table, _2: &table::Table) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: &std::sync::Arc<dyn wasmer_vm::Table>;
    let _4: &std::sync::Arc<dyn wasmer_vm::Table>;

    bb0: {
        _3 = &(((*_1).1: wasmer_vm::VMTable).0: std::sync::Arc<dyn wasmer_vm::Table>);
        _4 = &(((*_2).1: wasmer_vm::VMTable).0: std::sync::Arc<dyn wasmer_vm::Table>);
        _0 = Arc::<dyn wasmer_vm::Table>::ptr_eq(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:35:1: 35:11>::get_vm_table(_1: &table::Table) -> &VMTable {
    debug self => _1;
    let mut _0: &wasmer_vm::VMTable;

    bb0: {
        _0 = &((*_1).1: wasmer_vm::VMTable);
        return;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:163:1: 163:21>::clone(_1: &table::Table) -> table::Table {
    debug self => _1;
    let mut _0: externals::table::Table;
    let mut _2: wasmer_vm::VMTable;
    let mut _3: &wasmer_vm::VMTable;
    let _4: ();
    let mut _5: std::option::Option<()>;
    let mut _6: &mut wasmer_vm::VMTable;
    let mut _7: store::Store;
    let mut _8: &store::Store;
    let mut _9: wasmer_vm::VMTable;
    scope 1 {
        debug vm_table => _2;
    }

    bb0: {
        _3 = &((*_1).1: wasmer_vm::VMTable);
        _2 = <VMTable as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &mut _2;
        _5 = VMTable::upgrade_instance_ref(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _4 = Option::<()>::unwrap(move _5) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _8 = &((*_1).0: store::Store);
        _7 = <Store as Clone>::clone(move _8) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _9 = move _2;
        _0 = table::Table { store: move _7, vm_table: move _9 };
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:175:1: 175:34>::to_export(_1: &table::Table) -> wasmer_engine::Export {
    debug self => _1;
    let mut _0: wasmer_engine::Export;
    let mut _2: wasmer_vm::VMTable;
    let mut _3: &wasmer_vm::VMTable;

    bb0: {
        _3 = &((*_1).1: wasmer_vm::VMTable);
        _2 = <VMTable as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <VMTable as Into<wasmer_engine::Export>>::into(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:175:1: 175:34>::get_self_from_extern(_1: &Extern) -> Result<&table::Table, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<&externals::table::Table, exports::ExportError>;
    let mut _2: isize;
    let _3: &externals::table::Table;
    let mut _4: exports::ExportError;
    scope 1 {
        debug table => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [2: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = ExportError::IncompatibleType;
        _0 = Result::<&table::Table, ExportError>::Err(move _4);
        goto -> bb3;
    }

    bb2: {
        _3 = &(((*_1) as Table).0: externals::table::Table);
        _0 = Result::<&table::Table, ExportError>::Ok(_3);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:175:1: 175:34>::into_weak_instance_ref(_1: &mut table::Table) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut (((*_1).1: wasmer_vm::VMTable).1: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/externals/table.rs:191:18: 191:21}>(move _3, const ZeroSized: {closure@lib/api/src/externals/table.rs:191:18: 191:21}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn table::<impl at lib/api/src/externals/table.rs:175:1: 175:34>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/externals/table.rs:191:18: 191:21}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:25:10: 25:15>::clone(_1: &Extern) -> Extern {
    debug self => _1;
    let mut _0: externals::Extern;
    let mut _2: isize;
    let _3: &externals::function::Function;
    let mut _4: externals::function::Function;
    let _5: &externals::global::Global;
    let mut _6: externals::global::Global;
    let _7: &externals::table::Table;
    let mut _8: externals::table::Table;
    let _9: &externals::memory::Memory;
    let mut _10: externals::memory::Memory;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _5;
    }
    scope 3 {
        debug __self_0 => _7;
    }
    scope 4 {
        debug __self_0 => _9;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb7, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _9 = &(((*_1) as Memory).0: externals::memory::Memory);
        _10 = <memory::Memory as Clone>::clone(_9) -> [return: bb9, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Function).0: externals::function::Function);
        _4 = <function::Function as Clone>::clone(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Extern::Function(move _4);
        goto -> bb10;
    }

    bb5: {
        _5 = &(((*_1) as Global).0: externals::global::Global);
        _6 = <global::Global as Clone>::clone(_5) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = Extern::Global(move _6);
        goto -> bb10;
    }

    bb7: {
        _7 = &(((*_1) as Table).0: externals::table::Table);
        _8 = <table::Table as Clone>::clone(_7) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = Extern::Table(move _8);
        goto -> bb10;
    }

    bb9: {
        _0 = Extern::Memory(move _10);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:25:17: 25:28>::size_of_val(_1: &Extern, _2: &mut dyn MemoryUsageTracker) -> usize {
    debug self => _1;
    debug visited => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: isize;
    let _6: &externals::function::Function;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: (usize, bool);
    let _10: &externals::global::Global;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: (usize, bool);
    let _14: &externals::table::Table;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: (usize, bool);
    let _18: &externals::memory::Memory;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: (usize, bool);
    let mut _22: (usize, bool);
    scope 1 {
        debug x0 => _6;
    }
    scope 2 {
        debug x0 => _10;
    }
    scope 3 {
        debug x0 => _14;
    }
    scope 4 {
        debug x0 => _18;
    }

    bb0: {
        _3 = std::mem::size_of_val::<Extern>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant((*_1));
        switchInt(move _5) -> [0: bb4, 1: bb8, 2: bb12, 3: bb2, otherwise: bb3];
    }

    bb2: {
        _18 = &(((*_1) as Memory).0: externals::memory::Memory);
        _19 = <memory::Memory as MemoryUsage>::size_of_val(_18, _2) -> [return: bb16, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = &(((*_1) as Function).0: externals::function::Function);
        _7 = <function::Function as MemoryUsage>::size_of_val(_6, _2) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = std::mem::size_of_val::<function::Function>(_6) -> [return: bb6, unwind continue];
    }

    bb6: {
        _9 = CheckedSub(_7, _8);
        assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", move _7, move _8) -> [success: bb7, unwind continue];
    }

    bb7: {
        _4 = move (_9.0: usize);
        goto -> bb19;
    }

    bb8: {
        _10 = &(((*_1) as Global).0: externals::global::Global);
        _11 = <global::Global as MemoryUsage>::size_of_val(_10, _2) -> [return: bb9, unwind continue];
    }

    bb9: {
        _12 = std::mem::size_of_val::<global::Global>(_10) -> [return: bb10, unwind continue];
    }

    bb10: {
        _13 = CheckedSub(_11, _12);
        assert(!move (_13.1: bool), "attempt to compute `{} - {}`, which would overflow", move _11, move _12) -> [success: bb11, unwind continue];
    }

    bb11: {
        _4 = move (_13.0: usize);
        goto -> bb19;
    }

    bb12: {
        _14 = &(((*_1) as Table).0: externals::table::Table);
        _15 = <table::Table as MemoryUsage>::size_of_val(_14, _2) -> [return: bb13, unwind continue];
    }

    bb13: {
        _16 = std::mem::size_of_val::<table::Table>(_14) -> [return: bb14, unwind continue];
    }

    bb14: {
        _17 = CheckedSub(_15, _16);
        assert(!move (_17.1: bool), "attempt to compute `{} - {}`, which would overflow", move _15, move _16) -> [success: bb15, unwind continue];
    }

    bb15: {
        _4 = move (_17.0: usize);
        goto -> bb19;
    }

    bb16: {
        _20 = std::mem::size_of_val::<memory::Memory>(_18) -> [return: bb17, unwind continue];
    }

    bb17: {
        _21 = CheckedSub(_19, _20);
        assert(!move (_21.1: bool), "attempt to compute `{} - {}`, which would overflow", move _19, move _20) -> [success: bb18, unwind continue];
    }

    bb18: {
        _4 = move (_21.0: usize);
        goto -> bb19;
    }

    bb19: {
        _22 = CheckedAdd(_3, _4);
        assert(!move (_22.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _4) -> [success: bb20, unwind continue];
    }

    bb20: {
        _0 = move (_22.0: usize);
        return;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:37:1: 37:12>::ty(_1: &Extern) -> ExternType {
    debug self => _1;
    let mut _0: wasmer_types::ExternType;
    let mut _2: isize;
    let _3: &externals::function::Function;
    let mut _4: wasmer_types::FunctionType;
    let _5: &wasmer_types::FunctionType;
    let _6: &externals::memory::Memory;
    let mut _7: wasmer_types::MemoryType;
    let _8: &externals::table::Table;
    let mut _9: wasmer_types::TableType;
    let mut _10: &wasmer_types::TableType;
    let _11: &externals::global::Global;
    let mut _12: wasmer_types::GlobalType;
    let mut _13: &wasmer_types::GlobalType;
    scope 1 {
        debug ft => _3;
    }
    scope 2 {
        debug ft => _6;
    }
    scope 3 {
        debug tt => _8;
    }
    scope 4 {
        debug gt => _11;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, 2: bb8, 3: bb6, otherwise: bb2];
    }

    bb1: {
        _11 = &(((*_1) as Global).0: externals::global::Global);
        _13 = global::Global::ty(_11) -> [return: bb10, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Function).0: externals::function::Function);
        _5 = function::Function::ty(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = <FunctionType as Clone>::clone(_5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = wasmer_types::ExternType::Function(move _4);
        goto -> bb11;
    }

    bb6: {
        _6 = &(((*_1) as Memory).0: externals::memory::Memory);
        _7 = memory::Memory::ty(_6) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = wasmer_types::ExternType::Memory(move _7);
        goto -> bb11;
    }

    bb8: {
        _8 = &(((*_1) as Table).0: externals::table::Table);
        _10 = table::Table::ty(_8) -> [return: bb9, unwind continue];
    }

    bb9: {
        _9 = (*_10);
        _0 = wasmer_types::ExternType::Table(move _9);
        goto -> bb11;
    }

    bb10: {
        _12 = (*_13);
        _0 = wasmer_types::ExternType::Global(move _12);
        goto -> bb11;
    }

    bb11: {
        return;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:37:1: 37:12>::from_vm_export(_1: &Store, _2: wasmer_engine::Export) -> Extern {
    debug store => _1;
    debug export => _2;
    let mut _0: externals::Extern;
    let mut _3: isize;
    let _4: wasmer_engine::ExportFunction;
    let mut _5: externals::function::Function;
    let _6: wasmer_vm::VMMemory;
    let mut _7: externals::memory::Memory;
    let _8: wasmer_vm::VMGlobal;
    let mut _9: externals::global::Global;
    let _10: wasmer_vm::VMTable;
    let mut _11: externals::table::Table;
    scope 1 {
        debug f => _4;
    }
    scope 2 {
        debug m => _6;
    }
    scope 3 {
        debug g => _8;
    }
    scope 4 {
        debug t => _10;
    }

    bb0: {
        _3 = discriminant(_2);
        switchInt(move _3) -> [0: bb3, 1: bb1, 2: bb5, 3: bb7, otherwise: bb2];
    }

    bb1: {
        _10 = move ((_2 as Table).0: wasmer_vm::VMTable);
        _11 = table::Table::from_vm_export(_1, move _10) -> [return: bb9, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = move ((_2 as Function).0: wasmer_engine::ExportFunction);
        _5 = function::Function::from_vm_export(_1, move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Extern::Function(move _5);
        goto -> bb10;
    }

    bb5: {
        _6 = move ((_2 as Memory).0: wasmer_vm::VMMemory);
        _7 = memory::Memory::from_vm_export(_1, move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = Extern::Memory(move _7);
        goto -> bb10;
    }

    bb7: {
        _8 = move ((_2 as Global).0: wasmer_vm::VMGlobal);
        _9 = global::Global::from_vm_export(_1, move _8) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = Extern::Global(move _9);
        goto -> bb10;
    }

    bb9: {
        _0 = Extern::Table(move _11);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:59:1: 59:35>::to_export(_1: &Extern) -> wasmer_engine::Export {
    debug self => _1;
    let mut _0: wasmer_engine::Export;
    let mut _2: isize;
    let _3: &externals::function::Function;
    let _4: &externals::global::Global;
    let _5: &externals::memory::Memory;
    let _6: &externals::table::Table;
    scope 1 {
        debug f => _3;
    }
    scope 2 {
        debug g => _4;
    }
    scope 3 {
        debug m => _5;
    }
    scope 4 {
        debug t => _6;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb1, 3: bb5, otherwise: bb2];
    }

    bb1: {
        _6 = &(((*_1) as Table).0: externals::table::Table);
        _0 = <table::Table as Exportable<'_>>::to_export(_6) -> [return: bb6, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Function).0: externals::function::Function);
        _0 = <function::Function as Exportable<'_>>::to_export(_3) -> [return: bb6, unwind continue];
    }

    bb4: {
        _4 = &(((*_1) as Global).0: externals::global::Global);
        _0 = <global::Global as Exportable<'_>>::to_export(_4) -> [return: bb6, unwind continue];
    }

    bb5: {
        _5 = &(((*_1) as Memory).0: externals::memory::Memory);
        _0 = <memory::Memory as Exportable<'_>>::to_export(_5) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:59:1: 59:35>::get_self_from_extern(_1: &Extern) -> Result<&Extern, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<&externals::Extern, exports::ExportError>;

    bb0: {
        _0 = Result::<&Extern, ExportError>::Ok(_1);
        return;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:59:1: 59:35>::into_weak_instance_ref(_1: &mut Extern) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: isize;
    let _3: &mut externals::function::Function;
    let _4: &mut externals::global::Global;
    let _5: &mut externals::memory::Memory;
    let _6: &mut externals::table::Table;
    scope 1 {
        debug f => _3;
    }
    scope 2 {
        debug g => _4;
    }
    scope 3 {
        debug m => _5;
    }
    scope 4 {
        debug t => _6;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb1, 3: bb5, otherwise: bb2];
    }

    bb1: {
        _6 = &mut (((*_1) as Table).0: externals::table::Table);
        _0 = <table::Table as Exportable<'_>>::into_weak_instance_ref(_6) -> [return: bb6, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &mut (((*_1) as Function).0: externals::function::Function);
        _0 = <function::Function as Exportable<'_>>::into_weak_instance_ref(_3) -> [return: bb6, unwind continue];
    }

    bb4: {
        _4 = &mut (((*_1) as Global).0: externals::global::Global);
        _0 = <global::Global as Exportable<'_>>::into_weak_instance_ref(_4) -> [return: bb6, unwind continue];
    }

    bb5: {
        _5 = &mut (((*_1) as Memory).0: externals::memory::Memory);
        _0 = <memory::Memory as Exportable<'_>>::into_weak_instance_ref(_5) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:84:1: 84:28>::comes_from_same_store(_1: &Extern, _2: &Store) -> bool {
    debug self => _1;
    debug store => _2;
    let mut _0: bool;
    let _3: &store::Store;
    let mut _4: isize;
    let _5: &externals::function::Function;
    let _6: &externals::global::Global;
    let _7: &store::Store;
    let _8: &externals::memory::Memory;
    let _9: &store::Store;
    let _10: &externals::table::Table;
    let _11: &store::Store;
    let mut _12: &store::Store;
    scope 1 {
        debug my_store => _3;
    }
    scope 2 {
        debug f => _5;
    }
    scope 3 {
        debug g => _6;
    }
    scope 4 {
        debug m => _8;
    }
    scope 5 {
        debug t => _10;
    }

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, 3: bb6, otherwise: bb2];
    }

    bb1: {
        _10 = &(((*_1) as Table).0: externals::table::Table);
        _11 = table::Table::store(_10) -> [return: bb8, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = &(((*_1) as Function).0: externals::function::Function);
        _3 = function::Function::store(_5) -> [return: bb9, unwind continue];
    }

    bb4: {
        _6 = &(((*_1) as Global).0: externals::global::Global);
        _7 = global::Global::store(_6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _3 = _7;
        goto -> bb9;
    }

    bb6: {
        _8 = &(((*_1) as Memory).0: externals::memory::Memory);
        _9 = memory::Memory::store(_8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _3 = _9;
        goto -> bb9;
    }

    bb8: {
        _3 = _11;
        goto -> bb9;
    }

    bb9: {
        _12 = _3;
        _0 = Store::same(move _12, _2) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:96:1: 96:27>::fmt(_1: &Extern, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&str;
    let _10: &str;
    let mut _11: isize;
    let _12: &str;
    let _13: &str;
    let _14: &str;
    let mut _15: &[&str; 1];

    bb0: {
        _15 = const _;
        _4 = _15 as &[&str] (PointerCoercion(Unsize));
        _11 = discriminant((*_1));
        switchInt(move _11) -> [0: bb3, 1: bb4, 2: bb1, 3: bb5, otherwise: bb2];
    }

    bb1: {
        _14 = const "Table(...)";
        _10 = _14;
        goto -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _10 = const "Function(...)";
        goto -> bb6;
    }

    bb4: {
        _12 = const "Global(...)";
        _10 = _12;
        goto -> bb6;
    }

    bb5: {
        _13 = const "Memory(...)";
        _10 = _13;
        goto -> bb6;
    }

    bb6: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

promoted[0] in externals::<impl at lib/api/src/externals/mod.rs:96:1: 96:27>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:111:1: 111:31>::from(_1: function::Function) -> Extern {
    debug r => _1;
    let mut _0: externals::Extern;

    bb0: {
        _0 = Extern::Function(move _1);
        return;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:117:1: 117:29>::from(_1: global::Global) -> Extern {
    debug r => _1;
    let mut _0: externals::Extern;

    bb0: {
        _0 = Extern::Global(move _1);
        return;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:123:1: 123:29>::from(_1: memory::Memory) -> Extern {
    debug r => _1;
    let mut _0: externals::Extern;

    bb0: {
        _0 = Extern::Memory(move _1);
        return;
    }
}

fn externals::<impl at lib/api/src/externals/mod.rs:129:1: 129:28>::from(_1: table::Table) -> Extern {
    debug r => _1;
    let mut _0: externals::Extern;

    bb0: {
        _0 = Extern::Table(move _1);
        return;
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:42:10: 42:15>::clone(_1: &ImportObject) -> ImportObject {
    debug self => _1;
    let mut _0: import_object::ImportObject;
    let mut _2: std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>;
    let _3: &std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>;

    bb0: {
        _3 = &((*_1).0: std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>);
        _2 = <Arc<Mutex<HashMap<String, Box<dyn LikeNamespace>>>> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = ImportObject { map: move _2 };
        return;
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:42:17: 42:24>::default() -> ImportObject {
    let mut _0: import_object::ImportObject;
    let mut _1: std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>;

    bb0: {
        _1 = <Arc<Mutex<HashMap<String, Box<dyn LikeNamespace>>>> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = ImportObject { map: move _1 };
        return;
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:47:1: 47:18>::new() -> ImportObject {
    let mut _0: import_object::ImportObject;

    bb0: {
        _0 = <ImportObject as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:47:1: 47:18>::get_export(_1: &ImportObject, _2: &str, _3: &str) -> Option<wasmer_engine::Export> {
    debug self => _1;
    debug module => _2;
    debug name => _3;
    let mut _0: std::option::Option<wasmer_engine::Export>;
    let _4: std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _5: std::result::Result<std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>, std::sync::PoisonError<std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>>;
    let _6: &std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _7: &std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>;
    let mut _9: &std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _10: bool;
    let _11: &std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
    let _13: &std::boxed::Box<dyn import_object::LikeNamespace>;
    let _14: &std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
    scope 1 {
        debug guard => _4;
        let _8: &std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
        scope 2 {
            debug map_ref => _8;
            let _12: &dyn import_object::LikeNamespace;
            scope 3 {
                debug namespace => _12;
            }
        }
    }

    bb0: {
        _7 = &((*_1).0: std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>);
        _6 = <Arc<Mutex<HashMap<String, Box<dyn LikeNamespace>>>> as Deref>::deref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = Mutex::<HashMap<String, Box<dyn LikeNamespace>>>::lock(_6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = Result::<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>, PoisonError<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>>>::unwrap(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = &_4;
        _8 = <MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>> as Borrow<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>>>::borrow(move _9) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _11 = <MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>> as Deref>::deref(_8) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _10 = HashMap::<String, Box<dyn LikeNamespace>>::contains_key::<str>(_11, _2) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        switchInt(move _10) -> [0: bb12, otherwise: bb7];
    }

    bb7: {
        _14 = <MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>> as Deref>::deref(_8) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _13 = <HashMap<String, Box<dyn LikeNamespace>> as Index<&str>>::index(_14, _2) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _12 = <Box<dyn LikeNamespace> as AsRef<dyn LikeNamespace>>::as_ref(_13) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _0 = <dyn LikeNamespace as LikeNamespace>::get_namespace_export(_12, _3) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        drop(_4) -> [return: bb13, unwind continue];
    }

    bb12: {
        _0 = Option::<wasmer_engine::Export>::None;
        drop(_4) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_4) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:47:1: 47:18>::contains_namespace(_1: &ImportObject, _2: &str) -> bool {
    debug self => _1;
    debug name => _2;
    let mut _0: bool;
    let _3: &std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
    let _4: &std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _5: &std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let _6: std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _7: std::result::Result<std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>, std::sync::PoisonError<std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>>;
    let _8: &std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _9: &std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>;

    bb0: {
        _9 = &((*_1).0: std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>);
        _8 = <Arc<Mutex<HashMap<String, Box<dyn LikeNamespace>>>> as Deref>::deref(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = Mutex::<HashMap<String, Box<dyn LikeNamespace>>>::lock(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Result::<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>, PoisonError<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>>>::unwrap(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = &_6;
        _4 = <MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>> as Borrow<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>>>::borrow(move _5) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _3 = <MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>> as Deref>::deref(_4) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _0 = HashMap::<String, Box<dyn LikeNamespace>>::contains_key::<str>(_3, _2) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_6) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_6) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:47:1: 47:18>::register(_1: &mut ImportObject, _2: S, _3: N) -> Option<Box<dyn LikeNamespace>> {
    debug self => _1;
    debug name => _2;
    debug namespace => _3;
    let mut _0: std::option::Option<std::boxed::Box<dyn import_object::LikeNamespace>>;
    let mut _4: std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _5: std::result::Result<std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>, std::sync::PoisonError<std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>>;
    let _6: &std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _7: &std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>;
    let mut _9: &mut std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _10: std::collections::hash_map::Entry<'_, std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
    let mut _11: &mut std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
    let mut _12: std::string::String;
    let mut _13: S;
    let mut _14: isize;
    let _16: &mut std::boxed::Box<dyn import_object::LikeNamespace>;
    let mut _17: std::collections::hash_map::VacantEntry<'_, std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
    let mut _18: std::boxed::Box<dyn import_object::LikeNamespace>;
    let mut _19: std::boxed::Box<N>;
    let mut _20: N;
    let mut _22: std::boxed::Box<dyn import_object::LikeNamespace>;
    let mut _23: &mut std::collections::hash_map::OccupiedEntry<'_, std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
    let mut _24: std::boxed::Box<dyn import_object::LikeNamespace>;
    let mut _25: std::boxed::Box<N>;
    let mut _26: N;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    scope 1 {
        debug guard => _4;
        let _8: &mut std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
        scope 2 {
            debug map => _8;
            let _15: std::collections::hash_map::VacantEntry<'_, std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
            let mut _21: std::collections::hash_map::OccupiedEntry<'_, std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
            scope 3 {
                debug empty => _15;
            }
            scope 4 {
                debug occupied => _21;
            }
        }
    }

    bb0: {
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _29 = const true;
        _28 = const true;
        _7 = &((*_1).0: std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>);
        _6 = <Arc<Mutex<HashMap<String, Box<dyn LikeNamespace>>>> as Deref>::deref(move _7) -> [return: bb1, unwind: bb25];
    }

    bb1: {
        _5 = Mutex::<HashMap<String, Box<dyn LikeNamespace>>>::lock(_6) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        _4 = Result::<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>, PoisonError<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>>>::unwrap(move _5) -> [return: bb3, unwind: bb25];
    }

    bb3: {
        _9 = &mut _4;
        _8 = <MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>> as BorrowMut<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>>>::borrow_mut(move _9) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _11 = <MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>> as DerefMut>::deref_mut(_8) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _29 = const false;
        _13 = move _2;
        _12 = <S as Into<String>>::into(move _13) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _10 = HashMap::<String, Box<dyn LikeNamespace>>::entry(_11, move _12) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _21 = move ((_10 as Occupied).0: std::collections::hash_map::OccupiedEntry<'_, std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>);
        _23 = &mut _21;
        _28 = const false;
        _26 = move _3;
        _25 = Box::<N>::new(move _26) -> [return: bb13, unwind: bb17];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = move ((_10 as Vacant).0: std::collections::hash_map::VacantEntry<'_, std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>);
        _27 = const true;
        _17 = move _15;
        _28 = const false;
        _20 = move _3;
        _19 = Box::<N>::new(move _20) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _18 = move _19 as std::boxed::Box<dyn import_object::LikeNamespace> (PointerCoercion(Unsize));
        _27 = const false;
        _16 = std::collections::hash_map::VacantEntry::<'_, String, Box<dyn LikeNamespace>>::insert(move _17, move _18) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        _27 = const false;
        _0 = Option::<Box<dyn LikeNamespace>>::None;
        goto -> bb15;
    }

    bb13: {
        _24 = move _25 as std::boxed::Box<dyn import_object::LikeNamespace> (PointerCoercion(Unsize));
        _22 = std::collections::hash_map::OccupiedEntry::<'_, String, Box<dyn LikeNamespace>>::insert(move _23, move _24) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        _0 = Option::<Box<dyn LikeNamespace>>::Some(move _22);
        drop(_21) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_4) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_21) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_4) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_4) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_29) -> [0: bb21, otherwise: bb26];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_17) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_27) -> [0: bb18, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_28) -> [0: bb20, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate(cleanup)];
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:47:1: 47:18>::get_objects(_1: &ImportObject) -> VecDeque<((String, String), wasmer_engine::Export)> {
    debug self => _1;
    let mut _0: std::collections::VecDeque<((std::string::String, std::string::String), wasmer_engine::Export)>;
    let mut _2: std::collections::VecDeque<((std::string::String, std::string::String), wasmer_engine::Export)>;
    let mut _4: std::result::Result<std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>, std::sync::PoisonError<std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>>;
    let _5: &std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _6: &std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>;
    let mut _8: &std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _9: std::collections::hash_map::Iter<'_, std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
    let mut _10: std::collections::hash_map::Iter<'_, std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
    let _11: &std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
    let mut _13: std::option::Option<(&std::string::String, &std::boxed::Box<dyn import_object::LikeNamespace>)>;
    let mut _14: &mut std::collections::hash_map::Iter<'_, std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
    let mut _15: isize;
    let mut _18: std::vec::IntoIter<(std::string::String, wasmer_engine::Export)>;
    let mut _19: std::vec::Vec<(std::string::String, wasmer_engine::Export)>;
    let mut _20: &dyn import_object::LikeNamespace;
    let mut _22: std::option::Option<(std::string::String, wasmer_engine::Export)>;
    let mut _23: &mut std::vec::IntoIter<(std::string::String, wasmer_engine::Export)>;
    let mut _24: isize;
    let _27: ();
    let mut _28: &mut std::collections::VecDeque<((std::string::String, std::string::String), wasmer_engine::Export)>;
    let mut _29: ((std::string::String, std::string::String), wasmer_engine::Export);
    let mut _30: (std::string::String, std::string::String);
    let mut _31: std::string::String;
    let mut _32: std::string::String;
    let mut _33: wasmer_engine::Export;
    let mut _34: std::boxed::Box<dyn import_object::LikeNamespace>;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: *const dyn import_object::LikeNamespace;
    scope 1 {
        debug out => _2;
        let _3: std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
        scope 2 {
            debug guard => _3;
            let _7: &std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
            scope 3 {
                debug map => _7;
                let mut _12: std::collections::hash_map::Iter<'_, std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
                scope 4 {
                    debug iter => _12;
                    let _16: &std::string::String;
                    let _17: &std::boxed::Box<dyn import_object::LikeNamespace>;
                    scope 5 {
                        debug name => _16;
                        debug ns => _17;
                        let mut _21: std::vec::IntoIter<(std::string::String, wasmer_engine::Export)>;
                        scope 6 {
                            debug iter => _21;
                            let _25: std::string::String;
                            let _26: wasmer_engine::Export;
                            scope 7 {
                                debug id => _25;
                                debug exp => _26;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _37 = const true;
        _2 = VecDeque::<((String, String), wasmer_engine::Export)>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &((*_1).0: std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>);
        _5 = <Arc<Mutex<HashMap<String, Box<dyn LikeNamespace>>>> as Deref>::deref(move _6) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _4 = Mutex::<HashMap<String, Box<dyn LikeNamespace>>>::lock(_5) -> [return: bb3, unwind: bb31];
    }

    bb3: {
        _3 = Result::<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>, PoisonError<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>>>::unwrap(move _4) -> [return: bb4, unwind: bb31];
    }

    bb4: {
        _8 = &_3;
        _7 = <MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>> as Borrow<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>>>::borrow(move _8) -> [return: bb5, unwind: bb25];
    }

    bb5: {
        _11 = <MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>> as Deref>::deref(_7) -> [return: bb6, unwind: bb25];
    }

    bb6: {
        _10 = HashMap::<String, Box<dyn LikeNamespace>>::iter(_11) -> [return: bb7, unwind: bb25];
    }

    bb7: {
        _9 = <std::collections::hash_map::Iter<'_, String, Box<dyn LikeNamespace>> as IntoIterator>::into_iter(move _10) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _12 = move _9;
        goto -> bb9;
    }

    bb9: {
        _14 = &mut _12;
        _13 = <std::collections::hash_map::Iter<'_, String, Box<dyn LikeNamespace>> as Iterator>::next(_14) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb13, 1: bb11, otherwise: bb12];
    }

    bb11: {
        _16 = (((_13 as Some).0: (&std::string::String, &std::boxed::Box<dyn import_object::LikeNamespace>)).0: &std::string::String);
        _17 = (((_13 as Some).0: (&std::string::String, &std::boxed::Box<dyn import_object::LikeNamespace>)).1: &std::boxed::Box<dyn import_object::LikeNamespace>);
        _34 = deref_copy (*_17);
        _38 = (((_34.0: std::ptr::Unique<dyn import_object::LikeNamespace>).0: std::ptr::NonNull<dyn import_object::LikeNamespace>).0: *const dyn import_object::LikeNamespace);
        _20 = &(*_38);
        _19 = <dyn LikeNamespace as LikeNamespace>::get_namespace_exports(move _20) -> [return: bb14, unwind: bb25];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _37 = const false;
        _0 = move _2;
        drop(_3) -> [return: bb22, unwind: bb31];
    }

    bb14: {
        _18 = <Vec<(String, wasmer_engine::Export)> as IntoIterator>::into_iter(move _19) -> [return: bb15, unwind: bb25];
    }

    bb15: {
        _21 = move _18;
        goto -> bb16;
    }

    bb16: {
        _23 = &mut _21;
        _22 = <std::vec::IntoIter<(String, wasmer_engine::Export)> as Iterator>::next(_23) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb19, 1: bb18, otherwise: bb12];
    }

    bb18: {
        _36 = const true;
        _25 = move (((_22 as Some).0: (std::string::String, wasmer_engine::Export)).0: std::string::String);
        _35 = const true;
        _26 = move (((_22 as Some).0: (std::string::String, wasmer_engine::Export)).1: wasmer_engine::Export);
        _28 = &mut _2;
        _31 = <String as Clone>::clone(_16) -> [return: bb20, unwind: bb28];
    }

    bb19: {
        drop(_21) -> [return: bb9, unwind: bb25];
    }

    bb20: {
        _36 = const false;
        _32 = move _25;
        _30 = (move _31, move _32);
        _35 = const false;
        _33 = move _26;
        _29 = (move _30, move _33);
        _27 = VecDeque::<((String, String), wasmer_engine::Export)>::push_back(move _28, move _29) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        _35 = const false;
        _36 = const false;
        goto -> bb16;
    }

    bb22: {
        _37 = const false;
        return;
    }

    bb23 (cleanup): {
        switchInt(_36) -> [0: bb24, otherwise: bb29];
    }

    bb24 (cleanup): {
        drop(_21) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_3) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        drop(_26) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_35) -> [0: bb23, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_25) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_2) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_37) -> [0: bb26, otherwise: bb30];
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:117:1: 117:36>::resolve_by_name(_1: &ImportObject, _2: &str, _3: &str) -> Option<wasmer_engine::Export> {
    debug self => _1;
    debug module => _2;
    debug name => _3;
    let mut _0: std::option::Option<wasmer_engine::Export>;

    bb0: {
        _0 = ImportObject::get_export(_1, _2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:128:1: 128:39>::next(_1: &mut ImportObjectIterator) -> Option<((String, String), wasmer_engine::Export)> {
    debug self => _1;
    let mut _0: std::option::Option<((std::string::String, std::string::String), wasmer_engine::Export)>;
    let mut _2: &mut std::collections::VecDeque<((std::string::String, std::string::String), wasmer_engine::Export)>;

    bb0: {
        _2 = &mut ((*_1).0: std::collections::VecDeque<((std::string::String, std::string::String), wasmer_engine::Export)>);
        _0 = VecDeque::<((String, String), wasmer_engine::Export)>::pop_front(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:135:1: 135:35>::into_iter(_1: ImportObject) -> ImportObjectIterator {
    debug self => _1;
    let mut _0: import_object::ImportObjectIterator;
    let mut _2: std::collections::VecDeque<((std::string::String, std::string::String), wasmer_engine::Export)>;
    let mut _3: &import_object::ImportObject;

    bb0: {
        _3 = &_1;
        _2 = ImportObject::get_objects(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        _0 = ImportObjectIterator { elements: move _2 };
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:146:1: 146:33>::fmt(_1: &ImportObject, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _4: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _5: std::fmt::DebugStruct<'_, '_>;
    let _6: &str;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &<import_object::ImportObject as std::fmt::Debug>::fmt::SecretMap;
    let _10: <import_object::ImportObject as std::fmt::Debug>::fmt::SecretMap;
    let mut _11: usize;
    let _12: &std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>;
    let _13: &std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _14: &std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let _15: std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _16: std::result::Result<std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>, std::sync::PoisonError<std::sync::MutexGuard<'_, std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>>;
    let _17: &std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>;
    let mut _18: &std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>;

    bb0: {
        _6 = const "ImportObject";
        _5 = Formatter::<'_>::debug_struct(_2, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = const "map";
        _18 = &((*_1).0: std::sync::Arc<std::sync::Mutex<std::collections::HashMap<std::string::String, std::boxed::Box<dyn import_object::LikeNamespace>>>>);
        _17 = <Arc<Mutex<HashMap<String, Box<dyn LikeNamespace>>>> as Deref>::deref(move _18) -> [return: bb2, unwind continue];
    }

    bb2: {
        _16 = Mutex::<HashMap<String, Box<dyn LikeNamespace>>>::lock(_17) -> [return: bb3, unwind continue];
    }

    bb3: {
        _15 = Result::<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>, PoisonError<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>>>::unwrap(move _16) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _13 = <MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>> as Borrow<MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>>>>::borrow(move _14) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _12 = <MutexGuard<'_, HashMap<String, Box<dyn LikeNamespace>>> as Deref>::deref(_13) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _11 = HashMap::<String, Box<dyn LikeNamespace>>::len(_12) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _10 = SecretMap::new(move _11) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _3 = DebugStruct::<'_, '_>::field(move _4, _7, move _8) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        _0 = DebugStruct::<'_, '_>::finish(_3) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        drop(_15) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_15) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:146:1: 146:33>::fmt::<impl at lib/api/src/import_object.rs:153:9: 153:23>::new(_1: usize) -> SecretMap {
    debug len => _1;
    let mut _0: <import_object::ImportObject as std::fmt::Debug>::fmt::SecretMap;

    bb0: {
        switchInt(move _1) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = SecretMap::Empty;
        goto -> bb3;
    }

    bb2: {
        _0 = SecretMap::Some(_1);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn import_object::<impl at lib/api/src/import_object.rs:146:1: 146:33>::fmt::<impl at lib/api/src/import_object.rs:163:9: 163:38>::fmt(_1: &SecretMap, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &usize;
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &&usize;
    let mut _15: &[&str; 1];
    scope 1 {
        debug len => _6;
        let mut _14: &[&str; 2];
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = &(((*_1) as Some).0: usize);
        _14 = const _;
        _8 = _14 as &[&str] (PointerCoercion(Unsize));
        _13 = &_6;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<&usize>(_13) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _15 = const _;
        _5 = _15 as &[&str] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Formatter::<'_>::write_fmt(_2, move _4) -> [return: bb7, unwind continue];
    }

    bb5: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = Formatter::<'_>::write_fmt(_2, move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

promoted[0] in import_object::<impl at lib/api/src/import_object.rs:146:1: 146:33>::fmt::<impl at lib/api/src/import_object.rs:163:9: 163:38>::fmt: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "(... ", const " item(s) ...)"];
        _0 = &_1;
        return;
    }
}

promoted[1] in import_object::<impl at lib/api/src/import_object.rs:146:1: 146:33>::fmt::<impl at lib/api/src/import_object.rs:163:9: 163:38>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "(empty)"];
        _0 = &_1;
        return;
    }
}

fn instance::<impl at lib/api/src/instance.rs:21:10: 21:15>::clone(_1: &instance::Instance) -> instance::Instance {
    debug self => _1;
    let mut _0: instance::Instance;
    let mut _2: std::sync::Arc<std::sync::Mutex<wasmer_vm::InstanceHandle>>;
    let _3: &std::sync::Arc<std::sync::Mutex<wasmer_vm::InstanceHandle>>;
    let mut _4: module::Module;
    let _5: &module::Module;
    let mut _6: exports::Exports;
    let _7: &exports::Exports;

    bb0: {
        _3 = &((*_1).0: std::sync::Arc<std::sync::Mutex<wasmer_vm::InstanceHandle>>);
        _2 = <Arc<Mutex<InstanceHandle>> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: module::Module);
        _4 = <module::Module as Clone>::clone(_5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _7 = &((*_1).2: exports::Exports);
        _6 = <Exports as Clone>::clone(_7) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = instance::Instance { handle: move _2, module: move _4, exports: move _6 };
        return;
    }

    bb4 (cleanup): {
        drop(_4) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn instance::<impl at lib/api/src/instance.rs:21:17: 21:28>::size_of_val(_1: &instance::Instance, _2: &mut dyn MemoryUsageTracker) -> usize {
    debug self => _1;
    debug visited => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let _10: &std::sync::Arc<std::sync::Mutex<wasmer_vm::InstanceHandle>>;
    let mut _11: (usize, bool);
    let mut _12: usize;
    let _13: &std::sync::Arc<std::sync::Mutex<wasmer_vm::InstanceHandle>>;
    let mut _14: (usize, bool);
    let mut _15: usize;
    let _16: &module::Module;
    let mut _17: (usize, bool);
    let mut _18: usize;
    let _19: &module::Module;
    let mut _20: (usize, bool);
    let mut _21: usize;
    let _22: &exports::Exports;
    let mut _23: (usize, bool);
    let mut _24: usize;
    let _25: &exports::Exports;
    let mut _26: (usize, bool);

    bb0: {
        _8 = std::mem::size_of_val::<instance::Instance>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &((*_1).0: std::sync::Arc<std::sync::Mutex<wasmer_vm::InstanceHandle>>);
        _9 = <Arc<Mutex<InstanceHandle>> as MemoryUsage>::size_of_val(_10, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = CheckedAdd(_8, _9);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _9) -> [success: bb3, unwind continue];
    }

    bb3: {
        _7 = move (_11.0: usize);
        _13 = &((*_1).0: std::sync::Arc<std::sync::Mutex<wasmer_vm::InstanceHandle>>);
        _12 = std::mem::size_of_val::<Arc<Mutex<InstanceHandle>>>(_13) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = CheckedSub(_7, _12);
        assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _7, move _12) -> [success: bb5, unwind continue];
    }

    bb5: {
        _6 = move (_14.0: usize);
        _16 = &((*_1).1: module::Module);
        _15 = <module::Module as MemoryUsage>::size_of_val(_16, _2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = CheckedAdd(_6, _15);
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _15) -> [success: bb7, unwind continue];
    }

    bb7: {
        _5 = move (_17.0: usize);
        _19 = &((*_1).1: module::Module);
        _18 = std::mem::size_of_val::<module::Module>(_19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = CheckedSub(_5, _18);
        assert(!move (_20.1: bool), "attempt to compute `{} - {}`, which would overflow", move _5, move _18) -> [success: bb9, unwind continue];
    }

    bb9: {
        _4 = move (_20.0: usize);
        _22 = &((*_1).2: exports::Exports);
        _21 = <Exports as MemoryUsage>::size_of_val(_22, _2) -> [return: bb10, unwind continue];
    }

    bb10: {
        _23 = CheckedAdd(_4, _21);
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _21) -> [success: bb11, unwind continue];
    }

    bb11: {
        _3 = move (_23.0: usize);
        _25 = &((*_1).2: exports::Exports);
        _24 = std::mem::size_of_val::<Exports>(_25) -> [return: bb12, unwind continue];
    }

    bb12: {
        _26 = CheckedSub(_3, _24);
        assert(!move (_26.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _24) -> [success: bb13, unwind continue];
    }

    bb13: {
        _0 = move (_26.0: usize);
        return;
    }
}

fn instance::<impl at lib/api/src/instance.rs:51:10: 51:15>::source(_1: &instance::InstantiationError) -> Option<&dyn std::error::Error> {
    debug self => _1;
    let mut _0: std::option::Option<&dyn std::error::Error>;
    let mut _2: isize;
    let _4: &dyn std::error::Error;
    let _6: &dyn std::error::Error;
    let _8: &dyn std::error::Error;
    scope 1 {
        let _3: &wasmer_engine::LinkError;
        let _5: &wasmer_engine::RuntimeError;
        let _7: &env::HostEnvInitError;
        scope 2 {
            debug transparent => _3;
        }
        scope 3 {
            debug transparent => _5;
        }
        scope 4 {
            debug transparent => _7;
        }
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = &(((*_1) as HostEnvInitialization).0: env::HostEnvInitError);
        _8 = <HostEnvInitError as AsDynError<'_>>::as_dyn_error(_7) -> [return: bb7, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Link).0: wasmer_engine::LinkError);
        _4 = <LinkError as AsDynError<'_>>::as_dyn_error(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = <dyn std::error::Error as std::error::Error>::source(_4) -> [return: bb8, unwind continue];
    }

    bb5: {
        _5 = &(((*_1) as Start).0: wasmer_engine::RuntimeError);
        _6 = <RuntimeError as AsDynError<'_>>::as_dyn_error(_5) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = <dyn std::error::Error as std::error::Error>::source(_6) -> [return: bb8, unwind continue];
    }

    bb7: {
        _0 = <dyn std::error::Error as std::error::Error>::source(_8) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn instance::<impl at lib/api/src/instance.rs:51:10: 51:15>::fmt(_1: &instance::InstantiationError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    scope 1 {
        let _4: &wasmer_engine::LinkError;
        let _5: &wasmer_engine::RuntimeError;
        let _6: &env::HostEnvInitError;
        scope 2 {
            debug _0 => _4;
        }
        scope 3 {
            debug _0 => _5;
        }
        scope 4 {
            debug _0 => _6;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = &(((*_1) as HostEnvInitialization).0: env::HostEnvInitError);
        _0 = <HostEnvInitError as std::fmt::Display>::fmt(_6, _2) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Link).0: wasmer_engine::LinkError);
        _0 = <LinkError as std::fmt::Display>::fmt(_4, _2) -> [return: bb5, unwind continue];
    }

    bb4: {
        _5 = &(((*_1) as Start).0: wasmer_engine::RuntimeError);
        _0 = <RuntimeError as std::fmt::Display>::fmt(_5, _2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn instance::<impl at lib/api/src/instance.rs:51:17: 51:22>::fmt(_1: &instance::InstantiationError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &wasmer_engine::LinkError;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&wasmer_engine::LinkError;
    let _8: &wasmer_engine::RuntimeError;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&wasmer_engine::RuntimeError;
    let _12: &env::HostEnvInitError;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&env::HostEnvInitError;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }
    scope 3 {
        debug __self_0 => _12;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _12 = &(((*_1) as HostEnvInitialization).0: env::HostEnvInitError);
        _13 = const "HostEnvInitialization";
        _15 = &_12;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _13, move _14) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Link).0: wasmer_engine::LinkError);
        _5 = const "Link";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb5, unwind continue];
    }

    bb4: {
        _8 = &(((*_1) as Start).0: wasmer_engine::RuntimeError);
        _9 = const "Start";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn instance::<impl at lib/api/src/instance.rs:66:1: 66:68>::from(_1: wasmer_engine::InstantiationError) -> instance::InstantiationError {
    debug other => _1;
    let mut _0: instance::InstantiationError;
    let mut _2: isize;
    let _3: wasmer_engine::LinkError;
    let _4: wasmer_engine::RuntimeError;
    scope 1 {
        debug e => _3;
    }
    scope 2 {
        debug e => _4;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = move ((_1 as Start).0: wasmer_engine::RuntimeError);
        _0 = instance::InstantiationError::Start(move _4);
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = move ((_1 as Link).0: wasmer_engine::LinkError);
        _0 = instance::InstantiationError::Link(move _3);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn instance::<impl at lib/api/src/instance.rs:75:1: 75:51>::from(_1: HostEnvInitError) -> instance::InstantiationError {
    debug other => _1;
    let mut _0: instance::InstantiationError;

    bb0: {
        _0 = instance::InstantiationError::HostEnvInitialization(move _1);
        return;
    }
}

fn instance::<impl at lib/api/src/instance.rs:81:1: 81:14>::new(_1: &module::Module, _2: &dyn Resolver) -> Result<instance::Instance, instance::InstantiationError> {
    debug module => _1;
    debug resolver => _2;
    let mut _0: std::result::Result<instance::Instance, instance::InstantiationError>;
    let _3: &store::Store;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, instance::InstantiationError>, wasmer_vm::InstanceHandle>;
    let mut _6: std::result::Result<wasmer_vm::InstanceHandle, instance::InstantiationError>;
    let mut _7: isize;
    let mut _11: std::iter::Map<wasmer_vm::ExportsIterator<std::iter::Map<indexmap::map::Iter<'_, std::string::String, wasmer_types::ExportIndex>, {closure@wasmer_vm::ModuleInfo::exports::{closure#0}}>>, {closure@lib/api/src/instance.rs:120:18: 120:26}>;
    let mut _12: wasmer_vm::ExportsIterator<std::iter::Map<indexmap::map::Iter<'_, std::string::String, wasmer_types::ExportIndex>, {closure@wasmer_vm::ModuleInfo::exports::{closure#0}}>>;
    let mut _13: {closure@lib/api/src/instance.rs:120:18: 120:26};
    let mut _14: &wasmer_vm::InstanceHandle;
    let mut _15: &&store::Store;
    let mut _17: std::sync::Arc<std::sync::Mutex<wasmer_vm::InstanceHandle>>;
    let mut _18: std::sync::Mutex<wasmer_vm::InstanceHandle>;
    let mut _19: wasmer_vm::InstanceHandle;
    let mut _20: module::Module;
    let mut _21: exports::Exports;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, env::HostEnvInitError>>;
    let mut _23: std::result::Result<(), env::HostEnvInitError>;
    let mut _24: &mut wasmer_vm::InstanceHandle;
    let mut _25: &mut std::sync::MutexGuard<'_, wasmer_vm::InstanceHandle>;
    let mut _26: std::sync::MutexGuard<'_, wasmer_vm::InstanceHandle>;
    let mut _27: std::result::Result<std::sync::MutexGuard<'_, wasmer_vm::InstanceHandle>, std::sync::PoisonError<std::sync::MutexGuard<'_, wasmer_vm::InstanceHandle>>>;
    let _28: &std::sync::Mutex<wasmer_vm::InstanceHandle>;
    let mut _29: &std::sync::Arc<std::sync::Mutex<wasmer_vm::InstanceHandle>>;
    let mut _30: *const std::ffi::c_void;
    let mut _31: *const instance::Instance;
    let _32: &instance::Instance;
    let mut _33: isize;
    let mut _35: instance::Instance;
    let mut _36: bool;
    let mut _37: bool;
    scope 1 {
        debug store => _3;
        let _4: wasmer_vm::InstanceHandle;
        let _8: std::result::Result<std::convert::Infallible, instance::InstantiationError>;
        let _9: wasmer_vm::InstanceHandle;
        scope 2 {
            debug handle => _4;
            let _10: exports::Exports;
            scope 7 {
                debug exports => _10;
                let _16: instance::Instance;
                scope 8 {
                    debug instance => _16;
                    scope 9 {
                        let _34: std::result::Result<std::convert::Infallible, env::HostEnvInitError>;
                        scope 10 {
                            debug residual => _34;
                            scope 11 {
                            }
                        }
                        scope 12 {
                            debug val => const ();
                            scope 13 {
                            }
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _8;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _9;
            scope 6 {
            }
        }
    }

    bb0: {
        _37 = const false;
        _36 = const false;
        _3 = module::Module::store(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = module::Module::instantiate(_1, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = <Result<InstanceHandle, instance::InstantiationError> as std::ops::Try>::branch(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_5 as Continue).0: wasmer_vm::InstanceHandle);
        _37 = const true;
        _4 = move _9;
        _12 = module::Module::exports(_1) -> [return: bb7, unwind: bb34];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, instance::InstantiationError>);
        _0 = <Result<instance::Instance, instance::InstantiationError> as FromResidual<Result<Infallible, instance::InstantiationError>>>::from_residual(move _8) -> [return: bb25, unwind continue];
    }

    bb7: {
        _14 = &_4;
        _15 = &_3;
        _13 = {closure@lib/api/src/instance.rs:120:18: 120:26} { handle: move _14, store: move _15 };
        _11 = <wasmer_vm::ExportsIterator<Map<indexmap::map::Iter<'_, String, ExportIndex>, {closure@ModuleInfo::exports::{closure#0}}>> as Iterator>::map::<(String, Extern), {closure@lib/api/src/instance.rs:120:18: 120:26}>(move _12, move _13) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        _10 = <Map<wasmer_vm::ExportsIterator<Map<indexmap::map::Iter<'_, String, ExportIndex>, {closure@ModuleInfo::exports::{closure#0}}>>, {closure@lib/api/src/instance.rs:120:18: 120:26}> as Iterator>::collect::<Exports>(move _11) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        _36 = const true;
        _37 = const false;
        _19 = move _4;
        _18 = Mutex::<InstanceHandle>::new(move _19) -> [return: bb10, unwind: bb32];
    }

    bb10: {
        _17 = Arc::<Mutex<InstanceHandle>>::new(move _18) -> [return: bb11, unwind: bb32];
    }

    bb11: {
        _20 = <module::Module as Clone>::clone(_1) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _36 = const false;
        _21 = move _10;
        _16 = instance::Instance { handle: move _17, module: move _20, exports: move _21 };
        _29 = &(_16.0: std::sync::Arc<std::sync::Mutex<wasmer_vm::InstanceHandle>>);
        _28 = <Arc<Mutex<InstanceHandle>> as Deref>::deref(move _29) -> [return: bb13, unwind: bb28];
    }

    bb13: {
        _27 = Mutex::<InstanceHandle>::lock(_28) -> [return: bb14, unwind: bb28];
    }

    bb14: {
        _26 = Result::<MutexGuard<'_, InstanceHandle>, PoisonError<MutexGuard<'_, InstanceHandle>>>::unwrap(move _27) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        _25 = &mut _26;
        _24 = <MutexGuard<'_, InstanceHandle> as DerefMut>::deref_mut(move _25) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        _32 = &_16;
        _31 = &raw const (*_32);
        _30 = _31 as *const std::ffi::c_void (PtrToPtr);
        _23 = InstanceHandle::initialize_host_envs::<HostEnvInitError>(_24, _30) -> [return: bb17, unwind: bb27];
    }

    bb17: {
        _22 = <Result<(), HostEnvInitError> as std::ops::Try>::branch(move _23) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        _33 = discriminant(_22);
        switchInt(move _33) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        drop(_26) -> [return: bb22, unwind: bb28];
    }

    bb20: {
        _34 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, env::HostEnvInitError>);
        _0 = <Result<instance::Instance, instance::InstantiationError> as FromResidual<Result<Infallible, HostEnvInitError>>>::from_residual(move _34) -> [return: bb21, unwind: bb27];
    }

    bb21: {
        drop(_26) -> [return: bb23, unwind: bb28];
    }

    bb22: {
        _35 = move _16;
        _0 = Result::<instance::Instance, instance::InstantiationError>::Ok(move _35);
        _36 = const false;
        _37 = const false;
        goto -> bb26;
    }

    bb23: {
        drop(_16) -> [return: bb24, unwind: bb32];
    }

    bb24: {
        _36 = const false;
        goto -> bb25;
    }

    bb25: {
        _37 = const false;
        goto -> bb26;
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_26) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_16) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_17) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }

    bb31 (cleanup): {
        drop(_10) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_36) -> [0: bb34, otherwise: bb31];
    }

    bb33 (cleanup): {
        drop(_4) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_37) -> [0: bb30, otherwise: bb33];
    }
}

fn instance::<impl at lib/api/src/instance.rs:81:1: 81:14>::new::{closure#0}(_1: &mut {closure@lib/api/src/instance.rs:120:18: 120:26}, _2: wasmer_types::ExportType) -> (String, Extern) {
    debug export => _2;
    debug handle => (*((*_1).0: &wasmer_vm::InstanceHandle));
    debug store => (*((*_1).1: &&store::Store));
    let mut _0: (std::string::String, externals::Extern);
    let _3: std::string::String;
    let _4: &str;
    let mut _5: &wasmer_types::ExportType;
    let mut _7: std::option::Option<wasmer_vm::VMExtern>;
    let _8: &str;
    let _9: &std::string::String;
    let _10: &str;
    let mut _12: wasmer_engine::Export;
    let mut _13: std::string::String;
    let mut _14: &wasmer_vm::InstanceHandle;
    let mut _15: &&store::Store;
    let mut _16: &store::Store;
    scope 1 {
        debug name => _3;
        let _6: wasmer_vm::VMExtern;
        scope 2 {
            debug export => _6;
            let _11: externals::Extern;
            scope 3 {
                debug extern_ => _11;
            }
        }
    }

    bb0: {
        _5 = &_2;
        _4 = wasmer_types::ExportType::name(move _5) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _3 = <str as ToString>::to_string(_4) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _14 = deref_copy ((*_1).0: &wasmer_vm::InstanceHandle);
        _9 = &_3;
        _8 = <String as Deref>::deref(_9) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _7 = InstanceHandle::lookup(_14, _8) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _10 = const "export";
        _6 = Option::<VMExtern>::expect(move _7, _10) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _15 = deref_copy ((*_1).1: &&store::Store);
        _16 = deref_copy (*_15);
        _12 = <VMExtern as Into<wasmer_engine::Export>>::into(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _11 = Extern::from_vm_export(_16, move _12) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _13 = move _3;
        _0 = (move _13, move _11);
        drop(_2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn instance::<impl at lib/api/src/instance.rs:81:1: 81:14>::module(_1: &instance::Instance) -> &module::Module {
    debug self => _1;
    let mut _0: &module::Module;

    bb0: {
        _0 = &((*_1).1: module::Module);
        return;
    }
}

fn instance::<impl at lib/api/src/instance.rs:81:1: 81:14>::store(_1: &instance::Instance) -> &Store {
    debug self => _1;
    let mut _0: &store::Store;
    let mut _2: &module::Module;

    bb0: {
        _2 = &((*_1).1: module::Module);
        _0 = module::Module::store(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn instance::<impl at lib/api/src/instance.rs:81:1: 81:14>::vmctx_ptr(_1: &instance::Instance) -> *mut VMContext {
    debug self => _1;
    let mut _0: *mut wasmer_vm::VMContext;
    let _2: &wasmer_vm::InstanceHandle;
    let mut _3: &std::sync::MutexGuard<'_, wasmer_vm::InstanceHandle>;
    let _4: std::sync::MutexGuard<'_, wasmer_vm::InstanceHandle>;
    let mut _5: std::result::Result<std::sync::MutexGuard<'_, wasmer_vm::InstanceHandle>, std::sync::PoisonError<std::sync::MutexGuard<'_, wasmer_vm::InstanceHandle>>>;
    let _6: &std::sync::Mutex<wasmer_vm::InstanceHandle>;
    let mut _7: &std::sync::Arc<std::sync::Mutex<wasmer_vm::InstanceHandle>>;

    bb0: {
        _7 = &((*_1).0: std::sync::Arc<std::sync::Mutex<wasmer_vm::InstanceHandle>>);
        _6 = <Arc<Mutex<InstanceHandle>> as Deref>::deref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = Mutex::<InstanceHandle>::lock(_6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = Result::<MutexGuard<'_, InstanceHandle>, PoisonError<MutexGuard<'_, InstanceHandle>>>::unwrap(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = &_4;
        _2 = <MutexGuard<'_, InstanceHandle> as Deref>::deref(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _0 = InstanceHandle::vmctx_ptr(_2) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn instance::<impl at lib/api/src/instance.rs:169:1: 169:29>::fmt(_1: &instance::Instance, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _4: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _5: std::fmt::DebugStruct<'_, '_>;
    let _6: &str;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &exports::Exports;

    bb0: {
        _6 = const "Instance";
        _5 = Formatter::<'_>::debug_struct(_2, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = const "exports";
        _9 = &((*_1).2: exports::Exports);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _3 = DebugStruct::<'_, '_>::field(move _4, _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = DebugStruct::<'_, '_>::finish(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:16:10: 16:15>::source(_1: &IoCompileError) -> Option<&dyn std::error::Error> {
    debug self => _1;
    let mut _0: std::option::Option<&dyn std::error::Error>;
    let mut _2: isize;
    let _4: &dyn std::error::Error;
    let _6: &dyn std::error::Error;
    scope 1 {
        let _3: &std::io::Error;
        let _5: &wasmer_compiler::CompileError;
        scope 2 {
            debug transparent => _3;
        }
        scope 3 {
            debug transparent => _5;
        }
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as Compile).0: wasmer_compiler::CompileError);
        _6 = <CompileError as AsDynError<'_>>::as_dyn_error(_5) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Io).0: std::io::Error);
        _4 = <std::io::Error as AsDynError<'_>>::as_dyn_error(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = <dyn std::error::Error as std::error::Error>::source(_4) -> [return: bb6, unwind continue];
    }

    bb5: {
        _0 = <dyn std::error::Error as std::error::Error>::source(_6) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:16:10: 16:15>::fmt(_1: &IoCompileError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    scope 1 {
        let _4: &std::io::Error;
        let _5: &wasmer_compiler::CompileError;
        scope 2 {
            debug _0 => _4;
        }
        scope 3 {
            debug _0 => _5;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as Compile).0: wasmer_compiler::CompileError);
        _0 = <CompileError as std::fmt::Display>::fmt(_5, _2) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Io).0: std::io::Error);
        _0 = <std::io::Error as std::fmt::Display>::fmt(_4, _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:16:10: 16:15>::from(_1: std::io::Error) -> IoCompileError {
    debug source => _1;
    let mut _0: module::IoCompileError;

    bb0: {
        _0 = IoCompileError::Io(move _1);
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:16:10: 16:15>::from(_1: CompileError) -> IoCompileError {
    debug source => _1;
    let mut _0: module::IoCompileError;

    bb0: {
        _0 = IoCompileError::Compile(move _1);
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:16:17: 16:22>::fmt(_1: &IoCompileError, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &std::io::Error;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&std::io::Error;
    let _8: &wasmer_compiler::CompileError;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&wasmer_compiler::CompileError;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as Compile).0: wasmer_compiler::CompileError);
        _9 = const "Compile";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Io).0: std::io::Error);
        _5 = const "Io";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:34:10: 34:15>::clone(_1: &module::Module) -> module::Module {
    debug self => _1;
    let mut _0: module::Module;
    let mut _2: store::Store;
    let _3: &store::Store;
    let mut _4: std::sync::Arc<dyn wasmer_engine::Artifact>;
    let _5: &std::sync::Arc<dyn wasmer_engine::Artifact>;

    bb0: {
        _3 = &((*_1).0: store::Store);
        _2 = <Store as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _4 = <Arc<dyn Artifact> as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = module::Module { store: move _2, artifact: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn module::<impl at lib/api/src/module.rs:34:17: 34:28>::size_of_val(_1: &module::Module, _2: &mut dyn MemoryUsageTracker) -> usize {
    debug self => _1;
    debug visited => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let _8: &store::Store;
    let mut _9: (usize, bool);
    let mut _10: usize;
    let _11: &store::Store;
    let mut _12: (usize, bool);
    let mut _13: usize;
    let _14: &std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _15: (usize, bool);
    let mut _16: usize;
    let _17: &std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _18: (usize, bool);

    bb0: {
        _6 = std::mem::size_of_val::<module::Module>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &((*_1).0: store::Store);
        _7 = <Store as MemoryUsage>::size_of_val(_8, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = CheckedAdd(_6, _7);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _7) -> [success: bb3, unwind continue];
    }

    bb3: {
        _5 = move (_9.0: usize);
        _11 = &((*_1).0: store::Store);
        _10 = std::mem::size_of_val::<Store>(_11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = CheckedSub(_5, _10);
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", move _5, move _10) -> [success: bb5, unwind continue];
    }

    bb5: {
        _4 = move (_12.0: usize);
        _14 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _13 = <Arc<dyn Artifact> as MemoryUsage>::size_of_val(_14, _2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = CheckedAdd(_4, _13);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _13) -> [success: bb7, unwind continue];
    }

    bb7: {
        _3 = move (_15.0: usize);
        _17 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _16 = std::mem::size_of_val::<Arc<dyn Artifact>>(_17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = CheckedSub(_3, _16);
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _16) -> [success: bb9, unwind continue];
    }

    bb9: {
        _0 = move (_18.0: usize);
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::new(_1: &Store, _2: impl AsRef<[u8]>) -> Result<module::Module, CompileError> {
    debug store => _1;
    debug bytes => _2;
    let mut _0: std::result::Result<module::Module, wasmer_compiler::CompileError>;
    let _3: std::borrow::Cow<'_, [u8]>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>, std::borrow::Cow<'_, [u8]>>;
    let mut _5: std::result::Result<std::borrow::Cow<'_, [u8]>, wasmer_compiler::CompileError>;
    let mut _6: std::result::Result<std::borrow::Cow<'_, [u8]>, wat::Error>;
    let _7: &[u8];
    let mut _8: &impl AsRef<[u8]>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>;
    let _11: std::borrow::Cow<'_, [u8]>;
    let _12: &[u8];
    let mut _13: &std::borrow::Cow<'_, [u8]>;
    scope 1 {
        debug bytes => _3;
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        _8 = &_2;
        _7 = <impl AsRef<[u8]> as AsRef<[u8]>>::as_ref(move _8) -> [return: bb1, unwind: bb14];
    }

    bb1: {
        _6 = parse_bytes(_7) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _5 = Result::<Cow<'_, [u8]>, wat::Error>::map_err::<CompileError, {closure@lib/api/src/module.rs:103:62: 103:65}>(move _6, const ZeroSized: {closure@lib/api/src/module.rs:103:62: 103:65}) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _4 = <Result<Cow<'_, [u8]>, CompileError> as std::ops::Try>::branch(move _5) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _11 = move ((_4 as Continue).0: std::borrow::Cow<'_, [u8]>);
        _3 = move _11;
        _13 = &_3;
        _12 = <Cow<'_, [u8]> as AsRef<[u8]>>::as_ref(move _13) -> [return: bb9, unwind: bb13];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _10 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>);
        _0 = <Result<module::Module, CompileError> as FromResidual<Result<Infallible, CompileError>>>::from_residual(move _10) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        drop(_2) -> [return: bb12, unwind continue];
    }

    bb9: {
        _0 = module::Module::from_binary(_1, _12) -> [return: bb10, unwind: bb13];
    }

    bb10: {
        drop(_3) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        drop(_2) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_2) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::new::{closure#0}(_1: {closure@lib/api/src/module.rs:103:62: 103:65}, _2: wat::Error) -> CompileError {
    debug e => _2;
    let mut _0: wasmer_compiler::CompileError;
    let mut _3: wasmer_compiler::WasmError;
    let _4: std::string::String;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &wat::Error;
    let mut _12: &[&str; 1];
    scope 1 {
        debug res => _4;
    }

    bb0: {
        _12 = const _;
        _6 = _12 as &[&str] (PointerCoercion(Unsize));
        _11 = &_2;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<wat::Error>(_11) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _4 = format(move _5) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _3 = wasmer_compiler::WasmError::Generic(move _4);
        _0 = wasmer_compiler::CompileError::Wasm(move _3);
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

promoted[0] in module::<impl at lib/api/src/module.rs:40:1: 40:12>::new::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Error when converting wat: "];
        _0 = &_1;
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::from_file(_1: &Store, _2: impl AsRef<Path>) -> Result<module::Module, IoCompileError> {
    debug store => _1;
    debug file => _2;
    let mut _0: std::result::Result<module::Module, module::IoCompileError>;
    let _3: &std::path::Path;
    let mut _4: &impl AsRef<Path>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::path::PathBuf>;
    let mut _7: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _8: isize;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::vec::Vec<u8>>;
    let mut _13: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _14: isize;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>, module::Module>;
    let mut _19: std::result::Result<module::Module, wasmer_compiler::CompileError>;
    let mut _20: &std::vec::Vec<u8>;
    let mut _21: isize;
    let mut _25: std::option::Option<&str>;
    let _26: &std::path::Path;
    let mut _27: &std::path::PathBuf;
    let _28: bool;
    let mut _29: &mut module::Module;
    let mut _30: module::Module;
    scope 1 {
        debug file_ref => _3;
        let _5: std::path::PathBuf;
        let _9: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _10: std::path::PathBuf;
        scope 2 {
            debug canonical => _5;
            let _11: std::vec::Vec<u8>;
            let _15: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _16: std::vec::Vec<u8>;
            scope 7 {
                debug wasm_bytes => _11;
                let mut _17: module::Module;
                let _22: std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>;
                let _23: module::Module;
                scope 12 {
                    debug module => _17;
                    let _24: &str;
                    scope 17 {
                        debug filename => _24;
                    }
                }
                scope 13 {
                    debug residual => _22;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _23;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _15;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _16;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _4 = &_2;
        _3 = <impl AsRef<Path> as AsRef<Path>>::as_ref(move _4) -> [return: bb1, unwind: bb28];
    }

    bb1: {
        _7 = Path::canonicalize(_3) -> [return: bb2, unwind: bb28];
    }

    bb2: {
        _6 = <Result<PathBuf, std::io::Error> as std::ops::Try>::branch(move _7) -> [return: bb3, unwind: bb28];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _10 = move ((_6 as Continue).0: std::path::PathBuf);
        _5 = move _10;
        _13 = std::fs::read::<&Path>(_3) -> [return: bb7, unwind: bb27];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<module::Module, IoCompileError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _9) -> [return: bb30, unwind: bb28];
    }

    bb7: {
        _12 = <Result<Vec<u8>, std::io::Error> as std::ops::Try>::branch(move _13) -> [return: bb8, unwind: bb27];
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb9, 1: bb10, otherwise: bb5];
    }

    bb9: {
        _16 = move ((_12 as Continue).0: std::vec::Vec<u8>);
        _11 = move _16;
        _20 = &_11;
        _19 = module::Module::new::<&Vec<u8>>(_1, move _20) -> [return: bb11, unwind: bb26];
    }

    bb10: {
        _15 = move ((_12 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<module::Module, IoCompileError> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _15) -> [return: bb31, unwind: bb27];
    }

    bb11: {
        _18 = <Result<module::Module, CompileError> as std::ops::Try>::branch(move _19) -> [return: bb12, unwind: bb26];
    }

    bb12: {
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb13, 1: bb14, otherwise: bb5];
    }

    bb13: {
        _23 = move ((_18 as Continue).0: module::Module);
        _17 = move _23;
        _27 = &_5;
        _26 = PathBuf::as_path(move _27) -> [return: bb16, unwind: bb25];
    }

    bb14: {
        _22 = move ((_18 as Break).0: std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>);
        _0 = <Result<module::Module, IoCompileError> as FromResidual<Result<Infallible, CompileError>>>::from_residual(move _22) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        drop(_11) -> [return: bb22, unwind: bb27];
    }

    bb16: {
        _25 = Path::to_str(_26) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        _24 = Option::<&str>::unwrap(move _25) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        _29 = &mut _17;
        _28 = module::Module::set_name(move _29, _24) -> [return: bb19, unwind: bb25];
    }

    bb19: {
        _30 = move _17;
        _0 = Result::<module::Module, IoCompileError>::Ok(move _30);
        drop(_11) -> [return: bb20, unwind: bb27];
    }

    bb20: {
        drop(_5) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        drop(_2) -> [return: bb24, unwind continue];
    }

    bb22: {
        drop(_5) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        drop(_2) -> [return: bb24, unwind continue];
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_17) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_11) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_5) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30: {
        goto -> bb23;
    }

    bb31: {
        goto -> bb22;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::from_binary(_1: &Store, _2: &[u8]) -> Result<module::Module, CompileError> {
    debug store => _1;
    debug binary => _2;
    let mut _0: std::result::Result<module::Module, wasmer_compiler::CompileError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>>;
    let mut _4: std::result::Result<(), wasmer_compiler::CompileError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();
        scope 4 {
        }
    }
    scope 5 {
    }

    bb0: {
        _4 = module::Module::validate(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<(), CompileError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _0 = module::Module::from_binary_unchecked(_1, _2) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>);
        _0 = <Result<module::Module, CompileError> as FromResidual<Result<Infallible, CompileError>>>::from_residual(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::from_binary_unchecked(_1: &Store, _2: &[u8]) -> Result<module::Module, CompileError> {
    debug store => _1;
    debug binary => _2;
    let mut _0: std::result::Result<module::Module, wasmer_compiler::CompileError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>, module::Module>;
    let mut _4: std::result::Result<module::Module, wasmer_compiler::CompileError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>;
    let _7: module::Module;
    scope 1 {
        debug module => _7;
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = module::Module::compile(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<module::Module, CompileError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Continue).0: module::Module);
        _0 = Result::<module::Module, CompileError>::Ok(move _7);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>);
        _0 = <Result<module::Module, CompileError> as FromResidual<Result<Infallible, CompileError>>>::from_residual(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::validate(_1: &Store, _2: &[u8]) -> Result<(), CompileError> {
    debug store => _1;
    debug binary => _2;
    let mut _0: std::result::Result<(), wasmer_compiler::CompileError>;
    let _3: &dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync;
    let _4: &std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;

    bb0: {
        _4 = Store::engine(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Arc<dyn Engine + Send + Sync> as Deref>::deref(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <dyn Engine + Send + Sync as Engine>::validate(_3, _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::compile(_1: &Store, _2: &[u8]) -> Result<module::Module, CompileError> {
    debug store => _1;
    debug binary => _2;
    let mut _0: std::result::Result<module::Module, wasmer_compiler::CompileError>;
    let _3: std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>, std::sync::Arc<dyn wasmer_engine::Artifact>>;
    let mut _5: std::result::Result<std::sync::Arc<dyn wasmer_engine::Artifact>, wasmer_compiler::CompileError>;
    let _6: &dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync;
    let _7: &std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let _8: &dyn wasmer_engine::Tunables;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>;
    let _11: std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _12: module::Module;
    let mut _13: std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _14: bool;
    scope 1 {
        debug artifact => _3;
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        _14 = const false;
        _7 = Store::engine(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <Arc<dyn Engine + Send + Sync> as Deref>::deref(_7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = Store::tunables(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = <dyn Engine + Send + Sync as Engine>::compile(_6, _2, _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = <Result<Arc<dyn Artifact>, CompileError> as std::ops::Try>::branch(move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        _11 = move ((_4 as Continue).0: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _14 = const true;
        _3 = move _11;
        _14 = const false;
        _13 = move _3;
        _12 = module::Module::from_artifact(_1, move _13) -> [return: bb10, unwind: bb12];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _10 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, wasmer_compiler::CompileError>);
        _0 = <Result<module::Module, CompileError> as FromResidual<Result<Infallible, CompileError>>>::from_residual(move _10) -> [return: bb9, unwind continue];
    }

    bb9: {
        _14 = const false;
        goto -> bb11;
    }

    bb10: {
        _0 = Result::<module::Module, CompileError>::Ok(move _12);
        _14 = const false;
        goto -> bb11;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        switchInt(_14) -> [0: bb13, otherwise: bb14];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate(cleanup)];
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::serialize(_1: &module::Module) -> Result<Vec<u8>, SerializeError> {
    debug self => _1;
    let mut _0: std::result::Result<std::vec::Vec<u8>, wasmer_engine::SerializeError>;
    let _2: &dyn wasmer_engine::Artifact;
    let mut _3: &std::sync::Arc<dyn wasmer_engine::Artifact>;

    bb0: {
        _3 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _2 = <Arc<dyn Artifact> as Deref>::deref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <dyn Artifact as Artifact>::serialize(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::serialize_to_file(_1: &module::Module, _2: impl AsRef<Path>) -> Result<(), SerializeError> {
    debug self => _1;
    debug path => _2;
    let mut _0: std::result::Result<(), wasmer_engine::SerializeError>;
    let _3: &dyn wasmer_engine::Artifact;
    let mut _4: &std::sync::Arc<dyn wasmer_engine::Artifact>;
    let _5: &std::path::Path;
    let mut _6: &impl AsRef<Path>;

    bb0: {
        _4 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _3 = <Arc<dyn Artifact> as Deref>::deref(move _4) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = &_2;
        _5 = <impl AsRef<Path> as AsRef<Path>>::as_ref(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = <dyn Artifact as Artifact>::serialize_to_file(_3, _5) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::deserialize(_1: &Store, _2: &[u8]) -> Result<module::Module, DeserializeError> {
    debug store => _1;
    debug bytes => _2;
    let mut _0: std::result::Result<module::Module, wasmer_engine::DeserializeError>;
    let _3: std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::DeserializeError>, std::sync::Arc<dyn wasmer_engine::Artifact>>;
    let mut _5: std::result::Result<std::sync::Arc<dyn wasmer_engine::Artifact>, wasmer_engine::DeserializeError>;
    let _6: &dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync;
    let _7: &std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, wasmer_engine::DeserializeError>;
    let _10: std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _11: module::Module;
    let mut _12: std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _13: bool;
    scope 1 {
        debug artifact => _3;
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        _13 = const false;
        _7 = Store::engine(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <Arc<dyn Engine + Send + Sync> as Deref>::deref(_7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = <dyn Engine + Send + Sync as Engine>::deserialize(_6, _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = <Result<Arc<dyn Artifact>, DeserializeError> as std::ops::Try>::branch(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _10 = move ((_4 as Continue).0: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _13 = const true;
        _3 = move _10;
        _13 = const false;
        _12 = move _3;
        _11 = module::Module::from_artifact(_1, move _12) -> [return: bb9, unwind: bb11];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::DeserializeError>);
        _0 = <Result<module::Module, DeserializeError> as FromResidual<Result<Infallible, DeserializeError>>>::from_residual(move _9) -> [return: bb8, unwind continue];
    }

    bb8: {
        _13 = const false;
        goto -> bb10;
    }

    bb9: {
        _0 = Result::<module::Module, DeserializeError>::Ok(move _11);
        _13 = const false;
        goto -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        switchInt(_13) -> [0: bb12, otherwise: bb13];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate(cleanup)];
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::deserialize_from_file(_1: &Store, _2: impl AsRef<Path>) -> Result<module::Module, DeserializeError> {
    debug store => _1;
    debug path => _2;
    let mut _0: std::result::Result<module::Module, wasmer_engine::DeserializeError>;
    let _3: std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::DeserializeError>, std::sync::Arc<dyn wasmer_engine::Artifact>>;
    let mut _5: std::result::Result<std::sync::Arc<dyn wasmer_engine::Artifact>, wasmer_engine::DeserializeError>;
    let _6: &dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync;
    let _7: &std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let _8: &std::path::Path;
    let mut _9: &impl AsRef<Path>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, wasmer_engine::DeserializeError>;
    let _12: std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _13: module::Module;
    let mut _14: std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _15: bool;
    scope 1 {
        debug artifact => _3;
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        _15 = const false;
        _7 = Store::engine(_1) -> [return: bb1, unwind: bb13];
    }

    bb1: {
        _6 = <Arc<dyn Engine + Send + Sync> as Deref>::deref(_7) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _9 = &_2;
        _8 = <impl AsRef<Path> as AsRef<Path>>::as_ref(move _9) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _5 = <dyn Engine + Send + Sync as Engine>::deserialize_from_file(_6, _8) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _4 = <Result<Arc<dyn Artifact>, DeserializeError> as std::ops::Try>::branch(move _5) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        _12 = move ((_4 as Continue).0: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _15 = const true;
        _3 = move _12;
        _15 = const false;
        _14 = move _3;
        _13 = module::Module::from_artifact(_1, move _14) -> [return: bb10, unwind: bb12];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _11 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::DeserializeError>);
        _0 = <Result<module::Module, DeserializeError> as FromResidual<Result<Infallible, DeserializeError>>>::from_residual(move _11) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _15 = const false;
        drop(_2) -> [return: bb11, unwind continue];
    }

    bb10: {
        _0 = Result::<module::Module, DeserializeError>::Ok(move _13);
        _15 = const false;
        drop(_2) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        switchInt(_15) -> [0: bb13, otherwise: bb15];
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate(cleanup)];
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::from_artifact(_1: &Store, _2: Arc<dyn Artifact>) -> module::Module {
    debug store => _1;
    debug artifact => _2;
    let mut _0: module::Module;
    let mut _3: store::Store;
    let mut _4: std::sync::Arc<dyn wasmer_engine::Artifact>;

    bb0: {
        _3 = <Store as Clone>::clone(_1) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _4 = move _2;
        _0 = module::Module { store: move _3, artifact: move _4 };
        return;
    }

    bb2 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::instantiate(_1: &module::Module, _2: &dyn Resolver) -> Result<InstanceHandle, instance::InstantiationError> {
    debug self => _1;
    debug resolver => _2;
    let mut _0: std::result::Result<wasmer_vm::InstanceHandle, instance::InstantiationError>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::InstantiationError>, wasmer_vm::InstanceHandle>;
    let mut _5: std::result::Result<wasmer_vm::InstanceHandle, wasmer_engine::InstantiationError>;
    let _6: &dyn wasmer_engine::Artifact;
    let mut _7: &std::sync::Arc<dyn wasmer_engine::Artifact>;
    let _8: &dyn wasmer_engine::Tunables;
    let mut _9: &store::Store;
    let mut _10: std::boxed::Box<dyn std::any::Any>;
    let mut _11: std::boxed::Box<(store::Store, std::sync::Arc<dyn wasmer_engine::Artifact>)>;
    let mut _12: (store::Store, std::sync::Arc<dyn wasmer_engine::Artifact>);
    let mut _13: store::Store;
    let mut _14: &store::Store;
    let mut _15: std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _16: &std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _17: isize;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::InstantiationError>>;
    let mut _21: std::result::Result<(), wasmer_engine::InstantiationError>;
    let _22: &dyn wasmer_engine::Artifact;
    let mut _23: &std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _24: &dyn wasmer_vm::TrapHandler;
    let _25: &store::Store;
    let _26: &wasmer_vm::InstanceHandle;
    let mut _27: isize;
    let mut _29: wasmer_vm::InstanceHandle;
    scope 1 {
        let _3: wasmer_vm::InstanceHandle;
        let _18: std::result::Result<std::convert::Infallible, wasmer_engine::InstantiationError>;
        let _19: wasmer_vm::InstanceHandle;
        scope 2 {
            debug instance_handle => _3;
            let _28: std::result::Result<std::convert::Infallible, wasmer_engine::InstantiationError>;
            scope 7 {
                debug residual => _28;
                scope 8 {
                }
            }
            scope 9 {
                debug val => const ();
                scope 10 {
                }
            }
        }
        scope 3 {
            debug residual => _18;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _7 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _6 = <Arc<dyn Artifact> as Deref>::deref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &((*_1).0: store::Store);
        _8 = Store::tunables(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _14 = &((*_1).0: store::Store);
        _13 = <Store as Clone>::clone(move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        _16 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _15 = <Arc<dyn Artifact> as Clone>::clone(move _16) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _12 = (move _13, move _15);
        _11 = Box::<(Store, Arc<dyn Artifact>)>::new(move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = move _11 as std::boxed::Box<dyn std::any::Any> (PointerCoercion(Unsize));
        _5 = <dyn Artifact as Artifact>::instantiate(_6, _8, _2, move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _4 = <Result<InstanceHandle, wasmer_engine::InstantiationError> as std::ops::Try>::branch(move _5) -> [return: bb7, unwind continue];
    }

    bb7: {
        _17 = discriminant(_4);
        switchInt(move _17) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _19 = move ((_4 as Continue).0: wasmer_vm::InstanceHandle);
        _3 = move _19;
        _23 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _22 = <Arc<dyn Artifact> as Deref>::deref(move _23) -> [return: bb11, unwind: bb18];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _18 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::InstantiationError>);
        _0 = <Result<InstanceHandle, instance::InstantiationError> as FromResidual<Result<Infallible, wasmer_engine::InstantiationError>>>::from_residual(move _18) -> [return: bb17, unwind continue];
    }

    bb11: {
        _25 = &((*_1).0: store::Store);
        _24 = _25 as &dyn wasmer_vm::TrapHandler (PointerCoercion(Unsize));
        _26 = &_3;
        _21 = <dyn Artifact as Artifact>::finish_instantiation(_22, move _24, _26) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        _20 = <Result<(), wasmer_engine::InstantiationError> as std::ops::Try>::branch(move _21) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _27 = discriminant(_20);
        switchInt(move _27) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        _29 = move _3;
        _0 = Result::<InstanceHandle, instance::InstantiationError>::Ok(move _29);
        goto -> bb17;
    }

    bb15: {
        _28 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::InstantiationError>);
        _0 = <Result<InstanceHandle, instance::InstantiationError> as FromResidual<Result<Infallible, wasmer_engine::InstantiationError>>>::from_residual(move _28) -> [return: bb16, unwind: bb18];
    }

    bb16: {
        drop(_3) -> [return: bb17, unwind continue];
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop(_13) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::name(_1: &module::Module) -> Option<&str> {
    debug self => _1;
    let mut _0: std::option::Option<&str>;
    let mut _2: &std::option::Option<std::string::String>;
    let _3: &wasmer_vm::ModuleInfo;
    let _4: &dyn wasmer_engine::Artifact;
    let mut _5: &std::sync::Arc<dyn wasmer_engine::Artifact>;

    bb0: {
        _5 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _4 = <Arc<dyn Artifact> as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <dyn Artifact as Artifact>::module_ref(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &((*_3).1: std::option::Option<std::string::String>);
        _0 = Option::<String>::as_deref(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::set_name(_1: &mut module::Module, _2: &str) -> bool {
    debug self => _1;
    debug name => _2;
    let mut _0: bool;
    let mut _3: std::option::Option<bool>;
    let mut _4: std::option::Option<&mut wasmer_vm::ModuleInfo>;
    let mut _5: std::option::Option<&mut dyn wasmer_engine::Artifact>;
    let mut _6: &mut std::sync::Arc<dyn wasmer_engine::Artifact>;
    let mut _7: {closure@lib/api/src/module.rs:330:18: 330:35};
    let mut _8: &&str;

    bb0: {
        _6 = &mut ((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _5 = Arc::<dyn Artifact>::get_mut(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Option::<&mut dyn Artifact>::and_then::<&mut ModuleInfo, {closure@lib/api/src/module.rs:329:23: 329:33}>(move _5, const ZeroSized: {closure@lib/api/src/module.rs:329:23: 329:33}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = &_2;
        _7 = {closure@lib/api/src/module.rs:330:18: 330:35} { name: move _8 };
        _3 = Option::<&mut ModuleInfo>::map::<bool, {closure@lib/api/src/module.rs:330:18: 330:35}>(move _4, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = Option::<bool>::unwrap_or(move _3, const false) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::set_name::{closure#0}(_1: {closure@lib/api/src/module.rs:329:23: 329:33}, _2: &mut dyn Artifact) -> Option<&mut ModuleInfo> {
    debug artifact => _2;
    let mut _0: std::option::Option<&mut wasmer_vm::ModuleInfo>;

    bb0: {
        _0 = <dyn Artifact as Artifact>::module_mut(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::set_name::{closure#1}(_1: {closure@lib/api/src/module.rs:330:18: 330:35}, _2: &mut ModuleInfo) -> bool {
    debug module_info => _2;
    debug name => (*(_1.0: &&str));
    let mut _0: bool;
    let mut _3: std::option::Option<std::string::String>;
    let mut _4: std::string::String;
    let mut _5: &&str;
    let mut _6: &str;

    bb0: {
        _5 = deref_copy (_1.0: &&str);
        _6 = deref_copy (*_5);
        _4 = <str as ToString>::to_string(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Option::<String>::Some(move _4);
        drop(((*_2).1: std::option::Option<std::string::String>)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        ((*_2).1: std::option::Option<std::string::String>) = move _3;
        _0 = const true;
        return;
    }

    bb3 (cleanup): {
        ((*_2).1: std::option::Option<std::string::String>) = move _3;
        resume;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::imports(_1: &module::Module) -> ImportsIterator<Map<indexmap::map::Iter<'_, (String, String, u32), ImportIndex>, {closure@ModuleInfo::imports::{closure#0}}>> {
    debug self => _1;
    let mut _0: wasmer_vm::ImportsIterator<std::iter::Map<indexmap::map::Iter<'_, (std::string::String, std::string::String, u32), wasmer_types::ImportIndex>, {closure@wasmer_vm::ModuleInfo::imports::{closure#0}}>>;
    let _2: &wasmer_vm::ModuleInfo;
    let _3: &dyn wasmer_engine::Artifact;
    let mut _4: &std::sync::Arc<dyn wasmer_engine::Artifact>;

    bb0: {
        _4 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _3 = <Arc<dyn Artifact> as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <dyn Artifact as Artifact>::module_ref(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = ModuleInfo::imports(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::exports(_1: &module::Module) -> wasmer_vm::ExportsIterator<Map<indexmap::map::Iter<'_, String, ExportIndex>, {closure@ModuleInfo::exports::{closure#0}}>> {
    debug self => _1;
    let mut _0: wasmer_vm::ExportsIterator<std::iter::Map<indexmap::map::Iter<'_, std::string::String, wasmer_types::ExportIndex>, {closure@wasmer_vm::ModuleInfo::exports::{closure#0}}>>;
    let _2: &wasmer_vm::ModuleInfo;
    let _3: &dyn wasmer_engine::Artifact;
    let mut _4: &std::sync::Arc<dyn wasmer_engine::Artifact>;

    bb0: {
        _4 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _3 = <Arc<dyn Artifact> as Deref>::deref(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <dyn Artifact as Artifact>::module_ref(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = ModuleInfo::exports(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::custom_sections(_1: &module::Module, _2: &str) -> FilterMap<indexmap::map::Iter<'_, String, CustomSectionIndex>, {closure@ModuleInfo::custom_sections::{closure#0}}> {
    debug self => _1;
    debug name => _2;
    let mut _0: std::iter::FilterMap<indexmap::map::Iter<'_, std::string::String, wasmer_types::CustomSectionIndex>, {closure@wasmer_vm::ModuleInfo::custom_sections::{closure#0}}>;
    let _3: &wasmer_vm::ModuleInfo;
    let _4: &dyn wasmer_engine::Artifact;
    let mut _5: &std::sync::Arc<dyn wasmer_engine::Artifact>;

    bb0: {
        _5 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _4 = <Arc<dyn Artifact> as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <dyn Artifact as Artifact>::module_ref(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = ModuleInfo::custom_sections(_3, _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::store(_1: &module::Module) -> &Store {
    debug self => _1;
    let mut _0: &store::Store;

    bb0: {
        _0 = &((*_1).0: store::Store);
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::info(_1: &module::Module) -> &ModuleInfo {
    debug self => _1;
    let mut _0: &wasmer_vm::ModuleInfo;
    let _2: &&wasmer_vm::ModuleInfo;
    let _3: &wasmer_vm::ModuleInfo;
    let _4: &dyn wasmer_engine::Artifact;
    let mut _5: &std::sync::Arc<dyn wasmer_engine::Artifact>;

    bb0: {
        _5 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        _4 = <Arc<dyn Artifact> as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <dyn Artifact as Artifact>::module_ref(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _0 = deref_copy (*_2);
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:40:1: 40:12>::artifact(_1: &module::Module) -> &Arc<dyn Artifact> {
    debug self => _1;
    let mut _0: &std::sync::Arc<dyn wasmer_engine::Artifact>;

    bb0: {
        _0 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Artifact>);
        return;
    }
}

fn module::<impl at lib/api/src/module.rs:429:1: 429:27>::fmt(_1: &module::Module, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _4: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _5: std::fmt::DebugStruct<'_, '_>;
    let _6: &str;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::option::Option<&str>;
    let _10: std::option::Option<&str>;

    bb0: {
        _6 = const "Module";
        _5 = Formatter::<'_>::debug_struct(_2, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = const "name";
        _10 = module::Module::name(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _3 = DebugStruct::<'_, '_>::field(move _4, _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = DebugStruct::<'_, '_>::finish(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:29:1: 32:24>::new(_1: Store, _2: ExportFunction) -> NativeFunc<Args, Rets> {
    debug store => _1;
    debug exported => _2;
    let mut _0: native::NativeFunc<Args, Rets>;

    bb0: {
        _0 = NativeFunc::<Args, Rets> { store: move _1, exported: move _2, _phantom: const ZeroSized: PhantomData<(Args, Rets)> };
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:29:1: 32:24>::is_host(_1: &NativeFunc<Args, Rets>) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: &std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _2 = &((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _0 = Option::<WeakOrStrongInstanceRef>::is_none(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:29:1: 32:24>::vmctx(_1: &NativeFunc<Args, Rets>) -> VMFunctionEnvironment {
    debug self => _1;
    let mut _0: wasmer_vm::VMFunctionEnvironment;

    bb0: {
        _0 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).1: wasmer_vm::VMFunctionEnvironment);
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:29:1: 32:24>::address(_1: &NativeFunc<Args, Rets>) -> *const VMFunctionBody {
    debug self => _1;
    let mut _0: *const wasmer_vm::VMFunctionBody;

    bb0: {
        _0 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).0: *const wasmer_vm::VMFunctionBody);
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:29:1: 32:24>::arg_kind(_1: &NativeFunc<Args, Rets>) -> VMFunctionKind {
    debug self => _1;
    let mut _0: wasmer_vm::VMFunctionKind;

    bb0: {
        _0 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).3: wasmer_vm::VMFunctionKind);
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:29:1: 32:24>::get_vm_function(_1: &NativeFunc<Args, Rets>) -> &VMFunction {
    debug self => _1;
    let mut _0: &wasmer_vm::VMFunction;

    bb0: {
        _0 = &(((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction);
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:90:1: 90:78>::clone(_1: &NativeFunc<Args, Rets>) -> NativeFunc<Args, Rets> {
    debug self => _1;
    let mut _0: native::NativeFunc<Args, Rets>;
    let mut _2: wasmer_engine::ExportFunction;
    let mut _3: &wasmer_engine::ExportFunction;
    let _4: ();
    let mut _5: std::option::Option<()>;
    let mut _6: &mut wasmer_vm::VMFunction;
    let mut _7: store::Store;
    let mut _8: &store::Store;
    let mut _9: wasmer_engine::ExportFunction;
    scope 1 {
        debug exported => _2;
    }

    bb0: {
        _3 = &((*_1).1: wasmer_engine::ExportFunction);
        _2 = <ExportFunction as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &mut (_2.0: wasmer_vm::VMFunction);
        _5 = VMFunction::upgrade_instance_ref(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _4 = Option::<()>::unwrap(move _5) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _8 = &((*_1).0: store::Store);
        _7 = <Store as Clone>::clone(move _8) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _9 = move _2;
        _0 = NativeFunc::<Args, Rets> { store: move _7, exported: move _9, _phantom: const ZeroSized: PhantomData<(Args, Rets)> };
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:103:1: 106:24>::from(_1: &NativeFunc<Args, Rets>) -> ExportFunction {
    debug other => _1;
    let mut _0: wasmer_engine::ExportFunction;
    let mut _2: &wasmer_engine::ExportFunction;

    bb0: {
        _2 = &((*_1).1: wasmer_engine::ExportFunction);
        _0 = <ExportFunction as Clone>::clone(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:113:1: 116:24>::from(_1: NativeFunc<Args, Rets>) -> function::Function {
    debug other => _1;
    let mut _0: externals::function::Function;
    let mut _2: store::Store;
    let mut _3: wasmer_engine::ExportFunction;

    bb0: {
        _2 = move (_1.0: store::Store);
        _3 = move (_1.1: wasmer_engine::ExportFunction);
        _0 = function::Function { store: move _2, exported: move _3 };
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(), Rets>) -> Result<Rets, RuntimeError> {
    debug self => _1;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _2: bool;
    let mut _3: &native::NativeFunc<(), Rets>;
    let _4: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _5: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _6: &str;
    let mut _10: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _13: &mut [i128];
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: &[i128];
    let mut _17: &[i128; 0];
    let mut _18: usize;
    let mut _19: &[i128];
    let mut _20: &mut [i128];
    let mut _21: &mut [i128; 0];
    let mut _22: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _23: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _24: std::slice::Iter<'_, i128>;
    let mut _25: &[i128];
    let mut _26: &[i128; 0];
    let mut _28: std::option::Option<(usize, &i128)>;
    let mut _29: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _30: isize;
    let mut _33: usize;
    let mut _34: bool;
    let mut _35: &mut [i128];
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _37: std::result::Result<(), wasmer_vm::Trap>;
    let _38: &store::Store;
    let mut _39: wasmer_vm::VMFunctionEnvironment;
    let mut _40: &native::NativeFunc<(), Rets>;
    let mut _41: *const wasmer_vm::VMFunctionBody;
    let mut _42: &native::NativeFunc<(), Rets>;
    let mut _43: *mut u8;
    let mut _44: *mut i128;
    let mut _45: isize;
    let mut _48: &[i128];
    let mut _49: bool;
    let mut _50: bool;
    let mut _52: &[i128];
    let mut _53: &[i128; 0];
    let mut _55: &mut i128;
    let mut _56: &mut [i128];
    let mut _57: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _58: usize;
    let mut _59: usize;
    let mut _60: bool;
    let _61: ();
    let mut _62: Rets;
    let mut _63: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _64: wasmer_vm::VMFunctionKind;
    let mut _65: &native::NativeFunc<(), Rets>;
    let mut _66: isize;
    let _67: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _69: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _70: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _71: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _72: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _73: &&native::NativeFunc<(), Rets>;
    let mut _74: isize;
    let _75: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _76: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _77: Rets;
    let mut _78: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _79: [wasmer_types::Value<externals::function::Function>; 0];
    let mut _82: *mut std::ffi::c_void;
    let mut _83: wasmer_vm::VMFunctionEnvironment;
    let mut _84: &native::NativeFunc<(), Rets>;
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _86: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _87: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _88: &[wasmer_types::Value<externals::function::Function>];
    let _89: &[wasmer_types::Value<externals::function::Function>; 0];
    let mut _90: isize;
    let mut _95: *mut [i128];
    let mut _96: &mut [i128];
    let mut _97: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _98: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _99: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _100: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _101: &[wasmer_types::Value<externals::function::Function>];
    let mut _102: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _104: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _105: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _106: isize;
    let _109: ();
    let mut _110: *mut i128;
    let mut _111: Rets;
    let mut _112: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _113: &i128;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: bool;
    scope 1 {
        debug trampoline => _4;
        let mut _7: [i128; 0];
        scope 2 {
            debug params_list => const [];
            let mut _8: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _8;
                let _9: &mut [i128];
                scope 4 {
                    debug rets_list => _9;
                    let _11: bool;
                    scope 5 {
                        debug using_rets_array => _11;
                        let _12: &mut [i128];
                        let mut _27: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _12;
                            let _46: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _47: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _46;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _47;
                                let _51: *const i128;
                                scope 15 {
                                    debug src_pointer => _51;
                                    let _54: *mut i128;
                                    scope 16 {
                                        debug rets_list => _54;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _27;
                            let _31: usize;
                            let _32: i128;
                            scope 8 {
                                debug i => _31;
                                debug arg => _32;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _67;
    }
    scope 19 {
        debug residual => _75;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _76;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => const [];
        let _80: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _80;
            let mut _93: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _93;
                let _94: *mut i128;
                scope 32 {
                    debug mut_rets => _94;
                    let mut _103: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _103;
                        let _107: usize;
                        let _108: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _107;
                            debug ret => _108;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _81: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _81;
                let _91: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _92: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _91;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _92;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _116 = const false;
        _115 = const false;
        _114 = const false;
        _3 = _1;
        _2 = NativeFunc::<(), Rets>::is_host(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _65 = _1;
        _64 = NativeFunc::<(), Rets>::arg_kind(move _65) -> [return: bb36, unwind continue];
    }

    bb3: {
        _5 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _6 = const "Call trampoline not found in wasm function";
        _4 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _5, _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _116 = const true;
        _8 = <Rets as WasmTypeList>::empty_array() -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = &mut _8;
        _9 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _10) -> [return: bb6, unwind: bb72];
    }

    bb6: {
        _17 = &_7;
        _16 = move _17 as &[i128] (PointerCoercion(Unsize));
        _15 = Len((*_16));
        _19 = &(*_9);
        _18 = Len((*_19));
        _14 = Gt(move _15, move _18);
        switchInt(move _14) -> [0: bb9, otherwise: bb7];
    }

    bb7: {
        _11 = const false;
        _21 = &mut _7;
        _20 = <[i128; 0] as AsMut<[i128]>>::as_mut(move _21) -> [return: bb8, unwind: bb72];
    }

    bb8: {
        _13 = _20;
        goto -> bb20;
    }

    bb9: {
        _11 = const true;
        _26 = &_7;
        _25 = move _26 as &[i128] (PointerCoercion(Unsize));
        _24 = core::slice::<impl [i128]>::iter(move _25) -> [return: bb10, unwind: bb72];
    }

    bb10: {
        _23 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _24) -> [return: bb11, unwind: bb72];
    }

    bb11: {
        _22 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _23) -> [return: bb12, unwind: bb72];
    }

    bb12: {
        _27 = move _22;
        goto -> bb13;
    }

    bb13: {
        _29 = &mut _27;
        _28 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_29) -> [return: bb14, unwind: bb72];
    }

    bb14: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb17, 1: bb15, otherwise: bb16];
    }

    bb15: {
        _113 = deref_copy (((_28 as Some).0: (usize, &i128)).1: &i128);
        _32 = (*_113);
        _31 = (((_28 as Some).0: (usize, &i128)).0: usize);
        _33 = Len((*_9));
        _34 = Lt(_31, _33);
        assert(move _34, "index out of bounds: the length is {} but the index is {}", move _33, _31) -> [success: bb18, unwind: bb72];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        _35 = <[i128] as AsMut<[i128]>>::as_mut(_9) -> [return: bb19, unwind: bb72];
    }

    bb18: {
        (*_9)[_31] = _32;
        goto -> bb13;
    }

    bb19: {
        _13 = _35;
        goto -> bb20;
    }

    bb20: {
        _12 = _13;
        _38 = &((*_1).0: store::Store);
        _40 = _1;
        _39 = NativeFunc::<(), Rets>::vmctx(move _40) -> [return: bb21, unwind: bb72];
    }

    bb21: {
        _42 = _1;
        _41 = NativeFunc::<(), Rets>::address(move _42) -> [return: bb22, unwind: bb72];
    }

    bb22: {
        _44 = core::slice::<impl [i128]>::as_mut_ptr(_12) -> [return: bb23, unwind: bb72];
    }

    bb23: {
        _43 = move _44 as *mut u8 (PtrToPtr);
        _37 = wasmer_call_trampoline::<Store>(_38, move _39, _4, move _41, move _43) -> [return: bb24, unwind: bb72];
    }

    bb24: {
        _36 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _37) -> [return: bb25, unwind: bb72];
    }

    bb25: {
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb26, 1: bb27, otherwise: bb16];
    }

    bb26: {
        _48 = &(*_9);
        _47 = Len((*_48));
        _49 = _11;
        switchInt(move _49) -> [0: bb29, otherwise: bb34];
    }

    bb27: {
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _46) -> [return: bb28, unwind: bb72];
    }

    bb28: {
        drop(_8) -> [return: bb63, unwind continue];
    }

    bb29: {
        _50 = Gt(_47, const 0_usize);
        switchInt(move _50) -> [0: bb34, otherwise: bb30];
    }

    bb30: {
        _53 = &_7;
        _52 = move _53 as &[i128] (PointerCoercion(Unsize));
        _51 = core::slice::<impl [i128]>::as_ptr(move _52) -> [return: bb31, unwind: bb72];
    }

    bb31: {
        _57 = &mut _8;
        _56 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _57) -> [return: bb32, unwind: bb72];
    }

    bb32: {
        _58 = const 0_usize;
        _59 = Len((*_56));
        _60 = Lt(_58, _59);
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> [success: bb33, unwind: bb72];
    }

    bb33: {
        _55 = &mut (*_56)[_58];
        _54 = &raw mut (*_55);
        _61 = copy_nonoverlapping::<i128>(_51, _54, _47) -> [return: bb73, unwind: bb72];
    }

    bb34: {
        _116 = const false;
        _63 = move _8;
        _62 = <Rets as WasmTypeList>::from_array(move _63) -> [return: bb35, unwind: bb72];
    }

    bb35: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _62);
        _116 = const false;
        goto -> bb64;
    }

    bb36: {
        _66 = discriminant(_64);
        switchInt(move _66) -> [0: bb38, 1: bb37, otherwise: bb16];
    }

    bb37: {
        _84 = _1;
        _83 = NativeFunc::<(), Rets>::vmctx(move _84) -> [return: bb46, unwind continue];
    }

    bb38: {
        _73 = &_1;
        _72 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _73 };
        _71 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _72);
        _70 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _71) -> [return: bb39, unwind continue];
    }

    bb39: {
        _69 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _70, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb40, unwind continue];
    }

    bb40: {
        _68 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _69) -> [return: bb41, unwind continue];
    }

    bb41: {
        _74 = discriminant(_68);
        switchInt(move _74) -> [0: bb42, 1: bb43, otherwise: bb16];
    }

    bb42: {
        _76 = move ((_68 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _115 = const true;
        _67 = move _76;
        _115 = const false;
        _78 = move _67;
        _77 = <Rets as WasmTypeList>::from_c_struct(move _78) -> [return: bb45, unwind: bb70];
    }

    bb43: {
        _75 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _75) -> [return: bb44, unwind continue];
    }

    bb44: {
        _115 = const false;
        goto -> bb64;
    }

    bb45: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _77);
        _115 = const false;
        goto -> bb64;
    }

    bb46: {
        _82 = (_83.1: *mut std::ffi::c_void);
        _81 = move _82 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _87 = &((*_81).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _89 = &_79;
        _88 = _89 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _86 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _87, move _88) -> [return: bb47, unwind continue];
    }

    bb47: {
        _85 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _86) -> [return: bb48, unwind continue];
    }

    bb48: {
        _90 = discriminant(_85);
        switchInt(move _90) -> [0: bb49, 1: bb50, otherwise: bb16];
    }

    bb49: {
        _92 = move ((_85 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _80 = move _92;
        _93 = <Rets as WasmTypeList>::empty_array() -> [return: bb51, unwind: bb65];
    }

    bb50: {
        _91 = move ((_85 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _91) -> [return: bb64, unwind continue];
    }

    bb51: {
        _114 = const true;
        _97 = &mut _93;
        _96 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _97) -> [return: bb52, unwind: bb68];
    }

    bb52: {
        _95 = &raw mut (*_96);
        _94 = move _95 as *mut i128 (PtrToPtr);
        _102 = &_80;
        _101 = <Vec<Value<function::Function>> as Deref>::deref(move _102) -> [return: bb53, unwind: bb68];
    }

    bb53: {
        _100 = core::slice::<impl [Value<function::Function>]>::iter(_101) -> [return: bb54, unwind: bb68];
    }

    bb54: {
        _99 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _100) -> [return: bb55, unwind: bb68];
    }

    bb55: {
        _98 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _99) -> [return: bb56, unwind: bb68];
    }

    bb56: {
        _103 = move _98;
        goto -> bb57;
    }

    bb57: {
        _105 = &mut _103;
        _104 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_105) -> [return: bb58, unwind: bb68];
    }

    bb58: {
        _106 = discriminant(_104);
        switchInt(move _106) -> [0: bb60, 1: bb59, otherwise: bb16];
    }

    bb59: {
        _107 = (((_104 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _108 = (((_104 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _110 = std::ptr::mut_ptr::<impl *mut i128>::add(_94, _107) -> [return: bb61, unwind: bb68];
    }

    bb60: {
        _114 = const false;
        _112 = move _93;
        _111 = <Rets as WasmTypeList>::from_array(move _112) -> [return: bb62, unwind: bb68];
    }

    bb61: {
        _109 = Value::<function::Function>::write_value_to(_108, move _110) -> [return: bb74, unwind: bb68];
    }

    bb62: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _111);
        _114 = const false;
        drop(_80) -> [return: bb64, unwind continue];
    }

    bb63: {
        _116 = const false;
        goto -> bb64;
    }

    bb64: {
        return;
    }

    bb65 (cleanup): {
        drop(_80) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        resume;
    }

    bb67 (cleanup): {
        drop(_93) -> [return: bb65, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        switchInt(_114) -> [0: bb65, otherwise: bb67];
    }

    bb69 (cleanup): {
        drop(_67) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        switchInt(_115) -> [0: bb66, otherwise: bb69];
    }

    bb71 (cleanup): {
        drop(_8) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        switchInt(_116) -> [0: bb66, otherwise: bb71];
    }

    bb73: {
        goto -> bb34;
    }

    bb74: {
        goto -> bb57;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: &{closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*((*_1).0: &&native::NativeFunc<(), Rets>));
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: &&native::NativeFunc<(), Rets>;
    let mut _6: &native::NativeFunc<(), Rets>;
    let mut _7: &&native::NativeFunc<(), Rets>;
    let mut _8: &native::NativeFunc<(), Rets>;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _5 = deref_copy ((*_1).0: &&native::NativeFunc<(), Rets>);
        _6 = deref_copy (*_5);
        _3 = NativeFunc::<(), Rets>::address(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _7 = deref_copy ((*_1).0: &&native::NativeFunc<(), Rets>);
        _8 = deref_copy (*_7);
        _4 = NativeFunc::<(), Rets>::vmctx(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = _2(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<A1, Rets>, _2: A1) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _3: bool;
    let mut _4: &native::NativeFunc<A1, Rets>;
    let _5: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _6: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _7: &str;
    let mut _9: i128;
    let mut _10: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _11: A1;
    let mut _14: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _17: &mut [i128];
    let mut _18: bool;
    let mut _19: usize;
    let mut _20: &[i128];
    let mut _21: &[i128; 1];
    let mut _22: usize;
    let mut _23: &[i128];
    let mut _24: &mut [i128];
    let mut _25: &mut [i128; 1];
    let mut _26: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _27: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _28: std::slice::Iter<'_, i128>;
    let mut _29: &[i128];
    let mut _30: &[i128; 1];
    let mut _32: std::option::Option<(usize, &i128)>;
    let mut _33: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _34: isize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _39: &mut [i128];
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _41: std::result::Result<(), wasmer_vm::Trap>;
    let _42: &store::Store;
    let mut _43: wasmer_vm::VMFunctionEnvironment;
    let mut _44: &native::NativeFunc<A1, Rets>;
    let mut _45: *const wasmer_vm::VMFunctionBody;
    let mut _46: &native::NativeFunc<A1, Rets>;
    let mut _47: *mut u8;
    let mut _48: *mut i128;
    let mut _49: isize;
    let mut _52: &[i128];
    let mut _53: bool;
    let mut _54: bool;
    let mut _56: &[i128];
    let mut _57: &[i128; 1];
    let mut _59: &mut i128;
    let mut _60: &mut [i128];
    let mut _61: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _62: usize;
    let mut _63: usize;
    let mut _64: bool;
    let _65: ();
    let mut _66: Rets;
    let mut _67: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _68: wasmer_vm::VMFunctionKind;
    let mut _69: &native::NativeFunc<A1, Rets>;
    let mut _70: isize;
    let _71: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _73: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _74: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _75: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _76: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _77: &&native::NativeFunc<A1, Rets>;
    let mut _78: isize;
    let _79: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _80: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _81: Rets;
    let mut _82: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _83: [wasmer_types::Value<externals::function::Function>; 1];
    let mut _84: wasmer_types::Value<externals::function::Function>;
    let mut _85: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _86: A1;
    let mut _89: *mut std::ffi::c_void;
    let mut _90: wasmer_vm::VMFunctionEnvironment;
    let mut _91: &native::NativeFunc<A1, Rets>;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _93: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _94: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _95: &[wasmer_types::Value<externals::function::Function>];
    let _96: &[wasmer_types::Value<externals::function::Function>; 1];
    let mut _97: isize;
    let mut _102: *mut [i128];
    let mut _103: &mut [i128];
    let mut _104: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _105: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _106: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _107: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _108: &[wasmer_types::Value<externals::function::Function>];
    let mut _109: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _111: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _112: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _113: isize;
    let _116: ();
    let mut _117: *mut i128;
    let mut _118: Rets;
    let mut _119: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _120: &i128;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: bool;
    let mut _124: bool;
    scope 1 {
        debug trampoline => _5;
        let mut _8: [i128; 1];
        scope 2 {
            debug params_list => _8;
            let mut _12: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _12;
                let _13: &mut [i128];
                scope 4 {
                    debug rets_list => _13;
                    let _15: bool;
                    scope 5 {
                        debug using_rets_array => _15;
                        let _16: &mut [i128];
                        let mut _31: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _16;
                            let _50: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _51: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _50;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _51;
                                let _55: *const i128;
                                scope 15 {
                                    debug src_pointer => _55;
                                    let _58: *mut i128;
                                    scope 16 {
                                        debug rets_list => _58;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _31;
                            let _35: usize;
                            let _36: i128;
                            scope 8 {
                                debug i => _35;
                                debug arg => _36;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _71;
    }
    scope 19 {
        debug residual => _79;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _80;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _83;
        let _87: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _87;
            let mut _100: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _100;
                let _101: *mut i128;
                scope 32 {
                    debug mut_rets => _101;
                    let mut _110: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _110;
                        let _114: usize;
                        let _115: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _114;
                            debug ret => _115;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _88: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _88;
                let _98: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _99: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _98;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _99;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _124 = const false;
        _123 = const false;
        _122 = const false;
        _121 = const false;
        _124 = const true;
        _4 = _1;
        _3 = NativeFunc::<A1, Rets>::is_host(move _4) -> [return: bb1, unwind: bb81];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _69 = _1;
        _68 = NativeFunc::<A1, Rets>::arg_kind(move _69) -> [return: bb38, unwind: bb81];
    }

    bb3: {
        _6 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _7 = const "Call trampoline not found in wasm function";
        _5 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _6, _7) -> [return: bb4, unwind: bb81];
    }

    bb4: {
        _124 = const false;
        _11 = move _2;
        _10 = <A1 as FromToNativeWasmType>::to_native(move _11) -> [return: bb5, unwind: bb81];
    }

    bb5: {
        _9 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _10) -> [return: bb6, unwind: bb81];
    }

    bb6: {
        _8 = [move _9];
        _12 = <Rets as WasmTypeList>::empty_array() -> [return: bb7, unwind: bb81];
    }

    bb7: {
        _123 = const true;
        _14 = &mut _12;
        _13 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _14) -> [return: bb8, unwind: bb79];
    }

    bb8: {
        _21 = &_8;
        _20 = move _21 as &[i128] (PointerCoercion(Unsize));
        _19 = Len((*_20));
        _23 = &(*_13);
        _22 = Len((*_23));
        _18 = Gt(move _19, move _22);
        switchInt(move _18) -> [0: bb11, otherwise: bb9];
    }

    bb9: {
        _15 = const false;
        _25 = &mut _8;
        _24 = <[i128; 1] as AsMut<[i128]>>::as_mut(move _25) -> [return: bb10, unwind: bb79];
    }

    bb10: {
        _17 = _24;
        goto -> bb22;
    }

    bb11: {
        _15 = const true;
        _30 = &_8;
        _29 = move _30 as &[i128] (PointerCoercion(Unsize));
        _28 = core::slice::<impl [i128]>::iter(move _29) -> [return: bb12, unwind: bb79];
    }

    bb12: {
        _27 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _28) -> [return: bb13, unwind: bb79];
    }

    bb13: {
        _26 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _27) -> [return: bb14, unwind: bb79];
    }

    bb14: {
        _31 = move _26;
        goto -> bb15;
    }

    bb15: {
        _33 = &mut _31;
        _32 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_33) -> [return: bb16, unwind: bb79];
    }

    bb16: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb19, 1: bb17, otherwise: bb18];
    }

    bb17: {
        _120 = deref_copy (((_32 as Some).0: (usize, &i128)).1: &i128);
        _36 = (*_120);
        _35 = (((_32 as Some).0: (usize, &i128)).0: usize);
        _37 = Len((*_13));
        _38 = Lt(_35, _37);
        assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _35) -> [success: bb20, unwind: bb79];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        _39 = <[i128] as AsMut<[i128]>>::as_mut(_13) -> [return: bb21, unwind: bb79];
    }

    bb20: {
        (*_13)[_35] = _36;
        goto -> bb15;
    }

    bb21: {
        _17 = _39;
        goto -> bb22;
    }

    bb22: {
        _16 = _17;
        _42 = &((*_1).0: store::Store);
        _44 = _1;
        _43 = NativeFunc::<A1, Rets>::vmctx(move _44) -> [return: bb23, unwind: bb79];
    }

    bb23: {
        _46 = _1;
        _45 = NativeFunc::<A1, Rets>::address(move _46) -> [return: bb24, unwind: bb79];
    }

    bb24: {
        _48 = core::slice::<impl [i128]>::as_mut_ptr(_16) -> [return: bb25, unwind: bb79];
    }

    bb25: {
        _47 = move _48 as *mut u8 (PtrToPtr);
        _41 = wasmer_call_trampoline::<Store>(_42, move _43, _5, move _45, move _47) -> [return: bb26, unwind: bb79];
    }

    bb26: {
        _40 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _41) -> [return: bb27, unwind: bb79];
    }

    bb27: {
        _49 = discriminant(_40);
        switchInt(move _49) -> [0: bb28, 1: bb29, otherwise: bb18];
    }

    bb28: {
        _52 = &(*_13);
        _51 = Len((*_52));
        _53 = _15;
        switchInt(move _53) -> [0: bb31, otherwise: bb36];
    }

    bb29: {
        _50 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _50) -> [return: bb30, unwind: bb79];
    }

    bb30: {
        drop(_12) -> [return: bb69, unwind: bb81];
    }

    bb31: {
        _54 = Gt(_51, const 0_usize);
        switchInt(move _54) -> [0: bb36, otherwise: bb32];
    }

    bb32: {
        _57 = &_8;
        _56 = move _57 as &[i128] (PointerCoercion(Unsize));
        _55 = core::slice::<impl [i128]>::as_ptr(move _56) -> [return: bb33, unwind: bb79];
    }

    bb33: {
        _61 = &mut _12;
        _60 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _61) -> [return: bb34, unwind: bb79];
    }

    bb34: {
        _62 = const 0_usize;
        _63 = Len((*_60));
        _64 = Lt(_62, _63);
        assert(move _64, "index out of bounds: the length is {} but the index is {}", move _63, _62) -> [success: bb35, unwind: bb79];
    }

    bb35: {
        _59 = &mut (*_60)[_62];
        _58 = &raw mut (*_59);
        _65 = copy_nonoverlapping::<i128>(_55, _58, _51) -> [return: bb82, unwind: bb79];
    }

    bb36: {
        _123 = const false;
        _67 = move _12;
        _66 = <Rets as WasmTypeList>::from_array(move _67) -> [return: bb37, unwind: bb79];
    }

    bb37: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _66);
        _123 = const false;
        goto -> bb70;
    }

    bb38: {
        _70 = discriminant(_68);
        switchInt(move _70) -> [0: bb40, 1: bb39, otherwise: bb18];
    }

    bb39: {
        _124 = const false;
        _86 = move _2;
        _85 = <A1 as FromToNativeWasmType>::to_native(move _86) -> [return: bb48, unwind: bb81];
    }

    bb40: {
        _77 = &_1;
        _124 = const false;
        _76 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _77, A1: move _2 };
        _75 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _76);
        _74 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _75) -> [return: bb41, unwind: bb81];
    }

    bb41: {
        _73 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _74, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb42, unwind: bb81];
    }

    bb42: {
        _72 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _73) -> [return: bb43, unwind: bb81];
    }

    bb43: {
        _78 = discriminant(_72);
        switchInt(move _78) -> [0: bb44, 1: bb45, otherwise: bb18];
    }

    bb44: {
        _80 = move ((_72 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _122 = const true;
        _71 = move _80;
        _122 = const false;
        _82 = move _71;
        _81 = <Rets as WasmTypeList>::from_c_struct(move _82) -> [return: bb47, unwind: bb77];
    }

    bb45: {
        _79 = move ((_72 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _79) -> [return: bb46, unwind: bb81];
    }

    bb46: {
        _122 = const false;
        goto -> bb70;
    }

    bb47: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _81);
        _122 = const false;
        goto -> bb70;
    }

    bb48: {
        _84 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _85) -> [return: bb49, unwind: bb81];
    }

    bb49: {
        _83 = [move _84];
        _91 = _1;
        _90 = NativeFunc::<A1, Rets>::vmctx(move _91) -> [return: bb50, unwind: bb72];
    }

    bb50: {
        _89 = (_90.1: *mut std::ffi::c_void);
        _88 = move _89 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _94 = &((*_88).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _96 = &_83;
        _95 = _96 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _93 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _94, move _95) -> [return: bb51, unwind: bb72];
    }

    bb51: {
        _92 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _93) -> [return: bb52, unwind: bb72];
    }

    bb52: {
        _97 = discriminant(_92);
        switchInt(move _97) -> [0: bb53, 1: bb54, otherwise: bb18];
    }

    bb53: {
        _99 = move ((_92 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _87 = move _99;
        _100 = <Rets as WasmTypeList>::empty_array() -> [return: bb56, unwind: bb71];
    }

    bb54: {
        _98 = move ((_92 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _98) -> [return: bb55, unwind: bb72];
    }

    bb55: {
        drop(_83) -> [return: bb70, unwind: bb81];
    }

    bb56: {
        _121 = const true;
        _104 = &mut _100;
        _103 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _104) -> [return: bb57, unwind: bb75];
    }

    bb57: {
        _102 = &raw mut (*_103);
        _101 = move _102 as *mut i128 (PtrToPtr);
        _109 = &_87;
        _108 = <Vec<Value<function::Function>> as Deref>::deref(move _109) -> [return: bb58, unwind: bb75];
    }

    bb58: {
        _107 = core::slice::<impl [Value<function::Function>]>::iter(_108) -> [return: bb59, unwind: bb75];
    }

    bb59: {
        _106 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _107) -> [return: bb60, unwind: bb75];
    }

    bb60: {
        _105 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _106) -> [return: bb61, unwind: bb75];
    }

    bb61: {
        _110 = move _105;
        goto -> bb62;
    }

    bb62: {
        _112 = &mut _110;
        _111 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_112) -> [return: bb63, unwind: bb75];
    }

    bb63: {
        _113 = discriminant(_111);
        switchInt(move _113) -> [0: bb65, 1: bb64, otherwise: bb18];
    }

    bb64: {
        _114 = (((_111 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _115 = (((_111 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _117 = std::ptr::mut_ptr::<impl *mut i128>::add(_101, _114) -> [return: bb66, unwind: bb75];
    }

    bb65: {
        _121 = const false;
        _119 = move _100;
        _118 = <Rets as WasmTypeList>::from_array(move _119) -> [return: bb67, unwind: bb75];
    }

    bb66: {
        _116 = Value::<function::Function>::write_value_to(_115, move _117) -> [return: bb83, unwind: bb75];
    }

    bb67: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _118);
        _121 = const false;
        drop(_87) -> [return: bb68, unwind: bb72];
    }

    bb68: {
        drop(_83) -> [return: bb70, unwind: bb81];
    }

    bb69: {
        _123 = const false;
        goto -> bb70;
    }

    bb70: {
        return;
    }

    bb71 (cleanup): {
        drop(_87) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_83) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        resume;
    }

    bb74 (cleanup): {
        drop(_100) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        switchInt(_121) -> [0: bb71, otherwise: bb74];
    }

    bb76 (cleanup): {
        drop(_71) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        switchInt(_122) -> [0: bb81, otherwise: bb76];
    }

    bb78 (cleanup): {
        drop(_12) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        switchInt(_123) -> [0: bb81, otherwise: bb78];
    }

    bb80 (cleanup): {
        drop(_2) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_124) -> [0: bb73, otherwise: bb80];
    }

    bb82: {
        goto -> bb36;
    }

    bb83: {
        goto -> bb62;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<A1, Rets>));
    debug A1 => (_1.1: A1);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: &&native::NativeFunc<A1, Rets>;
    let mut _7: &native::NativeFunc<A1, Rets>;
    let mut _8: &&native::NativeFunc<A1, Rets>;
    let mut _9: &native::NativeFunc<A1, Rets>;
    let mut _10: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _10 = const false;
        _10 = const true;
        _6 = deref_copy (_1.0: &&native::NativeFunc<A1, Rets>);
        _7 = deref_copy (*_6);
        _3 = NativeFunc::<A1, Rets>::address(_7) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _8 = deref_copy (_1.0: &&native::NativeFunc<A1, Rets>);
        _9 = deref_copy (*_8);
        _4 = NativeFunc::<A1, Rets>::vmctx(_9) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _10 = const false;
        _5 = move (_1.1: A1);
        _0 = _2(move _4, move _5) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop((_1.1: A1)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        switchInt(_10) -> [0: bb4, otherwise: bb5];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<A1, Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<A1, Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<A1, Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<A1, Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<A1, Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<A1, Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<A1, Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2), Rets>, _2: A1, _3: A2) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _4: bool;
    let mut _5: &native::NativeFunc<(A1, A2), Rets>;
    let _6: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _7: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _8: &str;
    let mut _10: i128;
    let mut _11: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _12: A1;
    let mut _13: i128;
    let mut _14: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A2;
    let mut _18: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _21: &mut [i128];
    let mut _22: bool;
    let mut _23: usize;
    let mut _24: &[i128];
    let mut _25: &[i128; 2];
    let mut _26: usize;
    let mut _27: &[i128];
    let mut _28: &mut [i128];
    let mut _29: &mut [i128; 2];
    let mut _30: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _31: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _32: std::slice::Iter<'_, i128>;
    let mut _33: &[i128];
    let mut _34: &[i128; 2];
    let mut _36: std::option::Option<(usize, &i128)>;
    let mut _37: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _38: isize;
    let mut _41: usize;
    let mut _42: bool;
    let mut _43: &mut [i128];
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _45: std::result::Result<(), wasmer_vm::Trap>;
    let _46: &store::Store;
    let mut _47: wasmer_vm::VMFunctionEnvironment;
    let mut _48: &native::NativeFunc<(A1, A2), Rets>;
    let mut _49: *const wasmer_vm::VMFunctionBody;
    let mut _50: &native::NativeFunc<(A1, A2), Rets>;
    let mut _51: *mut u8;
    let mut _52: *mut i128;
    let mut _53: isize;
    let mut _56: &[i128];
    let mut _57: bool;
    let mut _58: bool;
    let mut _60: &[i128];
    let mut _61: &[i128; 2];
    let mut _63: &mut i128;
    let mut _64: &mut [i128];
    let mut _65: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _66: usize;
    let mut _67: usize;
    let mut _68: bool;
    let _69: ();
    let mut _70: Rets;
    let mut _71: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _72: wasmer_vm::VMFunctionKind;
    let mut _73: &native::NativeFunc<(A1, A2), Rets>;
    let mut _74: isize;
    let _75: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _77: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _78: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _79: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _80: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _81: &&native::NativeFunc<(A1, A2), Rets>;
    let mut _82: isize;
    let _83: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _84: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _85: Rets;
    let mut _86: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _87: [wasmer_types::Value<externals::function::Function>; 2];
    let mut _88: wasmer_types::Value<externals::function::Function>;
    let mut _89: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _90: A1;
    let mut _91: wasmer_types::Value<externals::function::Function>;
    let mut _92: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _93: A2;
    let mut _96: *mut std::ffi::c_void;
    let mut _97: wasmer_vm::VMFunctionEnvironment;
    let mut _98: &native::NativeFunc<(A1, A2), Rets>;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _100: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _101: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _102: &[wasmer_types::Value<externals::function::Function>];
    let _103: &[wasmer_types::Value<externals::function::Function>; 2];
    let mut _104: isize;
    let mut _109: *mut [i128];
    let mut _110: &mut [i128];
    let mut _111: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _112: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _113: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _114: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _115: &[wasmer_types::Value<externals::function::Function>];
    let mut _116: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _118: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _119: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _120: isize;
    let _123: ();
    let mut _124: *mut i128;
    let mut _125: Rets;
    let mut _126: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _127: &i128;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: bool;
    scope 1 {
        debug trampoline => _6;
        let mut _9: [i128; 2];
        scope 2 {
            debug params_list => _9;
            let mut _16: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _16;
                let _17: &mut [i128];
                scope 4 {
                    debug rets_list => _17;
                    let _19: bool;
                    scope 5 {
                        debug using_rets_array => _19;
                        let _20: &mut [i128];
                        let mut _35: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _20;
                            let _54: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _55: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _54;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _55;
                                let _59: *const i128;
                                scope 15 {
                                    debug src_pointer => _59;
                                    let _62: *mut i128;
                                    scope 16 {
                                        debug rets_list => _62;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _35;
                            let _39: usize;
                            let _40: i128;
                            scope 8 {
                                debug i => _39;
                                debug arg => _40;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _75;
    }
    scope 19 {
        debug residual => _83;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _84;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _87;
        let _94: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _94;
            let mut _107: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _107;
                let _108: *mut i128;
                scope 32 {
                    debug mut_rets => _108;
                    let mut _117: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _117;
                        let _121: usize;
                        let _122: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _121;
                            debug ret => _122;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _95: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _95;
                let _105: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _106: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _105;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _106;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _132 = const false;
        _131 = const false;
        _130 = const false;
        _129 = const false;
        _128 = const false;
        _132 = const true;
        _131 = const true;
        _5 = _1;
        _4 = NativeFunc::<(A1, A2), Rets>::is_host(move _5) -> [return: bb1, unwind: bb87];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _73 = _1;
        _72 = NativeFunc::<(A1, A2), Rets>::arg_kind(move _73) -> [return: bb40, unwind: bb87];
    }

    bb3: {
        _7 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _8 = const "Call trampoline not found in wasm function";
        _6 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _7, _8) -> [return: bb4, unwind: bb87];
    }

    bb4: {
        _132 = const false;
        _12 = move _2;
        _11 = <A1 as FromToNativeWasmType>::to_native(move _12) -> [return: bb5, unwind: bb87];
    }

    bb5: {
        _10 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _11) -> [return: bb6, unwind: bb87];
    }

    bb6: {
        _131 = const false;
        _15 = move _3;
        _14 = <A2 as FromToNativeWasmType>::to_native(move _15) -> [return: bb7, unwind: bb87];
    }

    bb7: {
        _13 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _14) -> [return: bb8, unwind: bb87];
    }

    bb8: {
        _9 = [move _10, move _13];
        _16 = <Rets as WasmTypeList>::empty_array() -> [return: bb9, unwind: bb87];
    }

    bb9: {
        _130 = const true;
        _18 = &mut _16;
        _17 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _18) -> [return: bb10, unwind: bb85];
    }

    bb10: {
        _25 = &_9;
        _24 = move _25 as &[i128] (PointerCoercion(Unsize));
        _23 = Len((*_24));
        _27 = &(*_17);
        _26 = Len((*_27));
        _22 = Gt(move _23, move _26);
        switchInt(move _22) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _19 = const false;
        _29 = &mut _9;
        _28 = <[i128; 2] as AsMut<[i128]>>::as_mut(move _29) -> [return: bb12, unwind: bb85];
    }

    bb12: {
        _21 = _28;
        goto -> bb24;
    }

    bb13: {
        _19 = const true;
        _34 = &_9;
        _33 = move _34 as &[i128] (PointerCoercion(Unsize));
        _32 = core::slice::<impl [i128]>::iter(move _33) -> [return: bb14, unwind: bb85];
    }

    bb14: {
        _31 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _32) -> [return: bb15, unwind: bb85];
    }

    bb15: {
        _30 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _31) -> [return: bb16, unwind: bb85];
    }

    bb16: {
        _35 = move _30;
        goto -> bb17;
    }

    bb17: {
        _37 = &mut _35;
        _36 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_37) -> [return: bb18, unwind: bb85];
    }

    bb18: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb21, 1: bb19, otherwise: bb20];
    }

    bb19: {
        _127 = deref_copy (((_36 as Some).0: (usize, &i128)).1: &i128);
        _40 = (*_127);
        _39 = (((_36 as Some).0: (usize, &i128)).0: usize);
        _41 = Len((*_17));
        _42 = Lt(_39, _41);
        assert(move _42, "index out of bounds: the length is {} but the index is {}", move _41, _39) -> [success: bb22, unwind: bb85];
    }

    bb20: {
        unreachable;
    }

    bb21: {
        _43 = <[i128] as AsMut<[i128]>>::as_mut(_17) -> [return: bb23, unwind: bb85];
    }

    bb22: {
        (*_17)[_39] = _40;
        goto -> bb17;
    }

    bb23: {
        _21 = _43;
        goto -> bb24;
    }

    bb24: {
        _20 = _21;
        _46 = &((*_1).0: store::Store);
        _48 = _1;
        _47 = NativeFunc::<(A1, A2), Rets>::vmctx(move _48) -> [return: bb25, unwind: bb85];
    }

    bb25: {
        _50 = _1;
        _49 = NativeFunc::<(A1, A2), Rets>::address(move _50) -> [return: bb26, unwind: bb85];
    }

    bb26: {
        _52 = core::slice::<impl [i128]>::as_mut_ptr(_20) -> [return: bb27, unwind: bb85];
    }

    bb27: {
        _51 = move _52 as *mut u8 (PtrToPtr);
        _45 = wasmer_call_trampoline::<Store>(_46, move _47, _6, move _49, move _51) -> [return: bb28, unwind: bb85];
    }

    bb28: {
        _44 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _45) -> [return: bb29, unwind: bb85];
    }

    bb29: {
        _53 = discriminant(_44);
        switchInt(move _53) -> [0: bb30, 1: bb31, otherwise: bb20];
    }

    bb30: {
        _56 = &(*_17);
        _55 = Len((*_56));
        _57 = _19;
        switchInt(move _57) -> [0: bb33, otherwise: bb38];
    }

    bb31: {
        _54 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _54) -> [return: bb32, unwind: bb85];
    }

    bb32: {
        drop(_16) -> [return: bb73, unwind: bb87];
    }

    bb33: {
        _58 = Gt(_55, const 0_usize);
        switchInt(move _58) -> [0: bb38, otherwise: bb34];
    }

    bb34: {
        _61 = &_9;
        _60 = move _61 as &[i128] (PointerCoercion(Unsize));
        _59 = core::slice::<impl [i128]>::as_ptr(move _60) -> [return: bb35, unwind: bb85];
    }

    bb35: {
        _65 = &mut _16;
        _64 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _65) -> [return: bb36, unwind: bb85];
    }

    bb36: {
        _66 = const 0_usize;
        _67 = Len((*_64));
        _68 = Lt(_66, _67);
        assert(move _68, "index out of bounds: the length is {} but the index is {}", move _67, _66) -> [success: bb37, unwind: bb85];
    }

    bb37: {
        _63 = &mut (*_64)[_66];
        _62 = &raw mut (*_63);
        _69 = copy_nonoverlapping::<i128>(_59, _62, _55) -> [return: bb89, unwind: bb85];
    }

    bb38: {
        _130 = const false;
        _71 = move _16;
        _70 = <Rets as WasmTypeList>::from_array(move _71) -> [return: bb39, unwind: bb85];
    }

    bb39: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _70);
        _130 = const false;
        goto -> bb74;
    }

    bb40: {
        _74 = discriminant(_72);
        switchInt(move _74) -> [0: bb42, 1: bb41, otherwise: bb20];
    }

    bb41: {
        _132 = const false;
        _90 = move _2;
        _89 = <A1 as FromToNativeWasmType>::to_native(move _90) -> [return: bb50, unwind: bb87];
    }

    bb42: {
        _81 = &_1;
        _132 = const false;
        _131 = const false;
        _80 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _81, A1: move _2, A2: move _3 };
        _79 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _80);
        _78 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _79) -> [return: bb43, unwind: bb87];
    }

    bb43: {
        _77 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _78, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb44, unwind: bb87];
    }

    bb44: {
        _76 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _77) -> [return: bb45, unwind: bb87];
    }

    bb45: {
        _82 = discriminant(_76);
        switchInt(move _82) -> [0: bb46, 1: bb47, otherwise: bb20];
    }

    bb46: {
        _84 = move ((_76 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _129 = const true;
        _75 = move _84;
        _129 = const false;
        _86 = move _75;
        _85 = <Rets as WasmTypeList>::from_c_struct(move _86) -> [return: bb49, unwind: bb83];
    }

    bb47: {
        _83 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _83) -> [return: bb48, unwind: bb87];
    }

    bb48: {
        _129 = const false;
        goto -> bb74;
    }

    bb49: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _85);
        _129 = const false;
        goto -> bb74;
    }

    bb50: {
        _88 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _89) -> [return: bb51, unwind: bb87];
    }

    bb51: {
        _131 = const false;
        _93 = move _3;
        _92 = <A2 as FromToNativeWasmType>::to_native(move _93) -> [return: bb52, unwind: bb77];
    }

    bb52: {
        _91 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _92) -> [return: bb53, unwind: bb77];
    }

    bb53: {
        _87 = [move _88, move _91];
        _98 = _1;
        _97 = NativeFunc::<(A1, A2), Rets>::vmctx(move _98) -> [return: bb54, unwind: bb76];
    }

    bb54: {
        _96 = (_97.1: *mut std::ffi::c_void);
        _95 = move _96 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _101 = &((*_95).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _103 = &_87;
        _102 = _103 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _100 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _101, move _102) -> [return: bb55, unwind: bb76];
    }

    bb55: {
        _99 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _100) -> [return: bb56, unwind: bb76];
    }

    bb56: {
        _104 = discriminant(_99);
        switchInt(move _104) -> [0: bb57, 1: bb58, otherwise: bb20];
    }

    bb57: {
        _106 = move ((_99 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _94 = move _106;
        _107 = <Rets as WasmTypeList>::empty_array() -> [return: bb60, unwind: bb75];
    }

    bb58: {
        _105 = move ((_99 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _105) -> [return: bb59, unwind: bb76];
    }

    bb59: {
        drop(_87) -> [return: bb74, unwind: bb87];
    }

    bb60: {
        _128 = const true;
        _111 = &mut _107;
        _110 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _111) -> [return: bb61, unwind: bb81];
    }

    bb61: {
        _109 = &raw mut (*_110);
        _108 = move _109 as *mut i128 (PtrToPtr);
        _116 = &_94;
        _115 = <Vec<Value<function::Function>> as Deref>::deref(move _116) -> [return: bb62, unwind: bb81];
    }

    bb62: {
        _114 = core::slice::<impl [Value<function::Function>]>::iter(_115) -> [return: bb63, unwind: bb81];
    }

    bb63: {
        _113 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _114) -> [return: bb64, unwind: bb81];
    }

    bb64: {
        _112 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _113) -> [return: bb65, unwind: bb81];
    }

    bb65: {
        _117 = move _112;
        goto -> bb66;
    }

    bb66: {
        _119 = &mut _117;
        _118 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_119) -> [return: bb67, unwind: bb81];
    }

    bb67: {
        _120 = discriminant(_118);
        switchInt(move _120) -> [0: bb69, 1: bb68, otherwise: bb20];
    }

    bb68: {
        _121 = (((_118 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _122 = (((_118 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _124 = std::ptr::mut_ptr::<impl *mut i128>::add(_108, _121) -> [return: bb70, unwind: bb81];
    }

    bb69: {
        _128 = const false;
        _126 = move _107;
        _125 = <Rets as WasmTypeList>::from_array(move _126) -> [return: bb71, unwind: bb81];
    }

    bb70: {
        _123 = Value::<function::Function>::write_value_to(_122, move _124) -> [return: bb90, unwind: bb81];
    }

    bb71: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _125);
        _128 = const false;
        drop(_94) -> [return: bb72, unwind: bb76];
    }

    bb72: {
        drop(_87) -> [return: bb74, unwind: bb87];
    }

    bb73: {
        _130 = const false;
        goto -> bb74;
    }

    bb74: {
        return;
    }

    bb75 (cleanup): {
        drop(_94) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_87) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_88) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        switchInt(_132) -> [0: bb79, otherwise: bb88];
    }

    bb79 (cleanup): {
        resume;
    }

    bb80 (cleanup): {
        drop(_107) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        switchInt(_128) -> [0: bb75, otherwise: bb80];
    }

    bb82 (cleanup): {
        drop(_75) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_129) -> [0: bb87, otherwise: bb82];
    }

    bb84 (cleanup): {
        drop(_16) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        switchInt(_130) -> [0: bb87, otherwise: bb84];
    }

    bb86 (cleanup): {
        drop(_3) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_131) -> [0: bb78, otherwise: bb86];
    }

    bb88 (cleanup): {
        drop(_2) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb89: {
        goto -> bb38;
    }

    bb90: {
        goto -> bb66;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: &&native::NativeFunc<(A1, A2), Rets>;
    let mut _8: &native::NativeFunc<(A1, A2), Rets>;
    let mut _9: &&native::NativeFunc<(A1, A2), Rets>;
    let mut _10: &native::NativeFunc<(A1, A2), Rets>;
    let mut _11: bool;
    let mut _12: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _12 = const false;
        _11 = const false;
        _11 = const true;
        _12 = const true;
        _7 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2), Rets>);
        _8 = deref_copy (*_7);
        _3 = NativeFunc::<(A1, A2), Rets>::address(_8) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _9 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2), Rets>);
        _10 = deref_copy (*_9);
        _4 = NativeFunc::<(A1, A2), Rets>::vmctx(_10) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _12 = const false;
        _5 = move (_1.1: A1);
        _11 = const false;
        _6 = move (_1.2: A2);
        _0 = _2(move _4, move _5, move _6) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_11) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.2: A2)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop((_1.1: A1)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_12) -> [0: bb5, otherwise: bb7];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3), Rets>, _2: A1, _3: A2, _4: A3) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _5: bool;
    let mut _6: &native::NativeFunc<(A1, A2, A3), Rets>;
    let _7: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _8: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _9: &str;
    let mut _11: i128;
    let mut _12: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _13: A1;
    let mut _14: i128;
    let mut _15: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A2;
    let mut _17: i128;
    let mut _18: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A3;
    let mut _22: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _25: &mut [i128];
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: &[i128];
    let mut _29: &[i128; 3];
    let mut _30: usize;
    let mut _31: &[i128];
    let mut _32: &mut [i128];
    let mut _33: &mut [i128; 3];
    let mut _34: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _35: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _36: std::slice::Iter<'_, i128>;
    let mut _37: &[i128];
    let mut _38: &[i128; 3];
    let mut _40: std::option::Option<(usize, &i128)>;
    let mut _41: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _42: isize;
    let mut _45: usize;
    let mut _46: bool;
    let mut _47: &mut [i128];
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _49: std::result::Result<(), wasmer_vm::Trap>;
    let _50: &store::Store;
    let mut _51: wasmer_vm::VMFunctionEnvironment;
    let mut _52: &native::NativeFunc<(A1, A2, A3), Rets>;
    let mut _53: *const wasmer_vm::VMFunctionBody;
    let mut _54: &native::NativeFunc<(A1, A2, A3), Rets>;
    let mut _55: *mut u8;
    let mut _56: *mut i128;
    let mut _57: isize;
    let mut _60: &[i128];
    let mut _61: bool;
    let mut _62: bool;
    let mut _64: &[i128];
    let mut _65: &[i128; 3];
    let mut _67: &mut i128;
    let mut _68: &mut [i128];
    let mut _69: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _70: usize;
    let mut _71: usize;
    let mut _72: bool;
    let _73: ();
    let mut _74: Rets;
    let mut _75: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _76: wasmer_vm::VMFunctionKind;
    let mut _77: &native::NativeFunc<(A1, A2, A3), Rets>;
    let mut _78: isize;
    let _79: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _81: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _82: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _83: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _84: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _85: &&native::NativeFunc<(A1, A2, A3), Rets>;
    let mut _86: isize;
    let _87: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _88: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _89: Rets;
    let mut _90: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _91: [wasmer_types::Value<externals::function::Function>; 3];
    let mut _92: wasmer_types::Value<externals::function::Function>;
    let mut _93: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _94: A1;
    let mut _95: wasmer_types::Value<externals::function::Function>;
    let mut _96: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _97: A2;
    let mut _98: wasmer_types::Value<externals::function::Function>;
    let mut _99: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _100: A3;
    let mut _103: *mut std::ffi::c_void;
    let mut _104: wasmer_vm::VMFunctionEnvironment;
    let mut _105: &native::NativeFunc<(A1, A2, A3), Rets>;
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _107: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _108: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _109: &[wasmer_types::Value<externals::function::Function>];
    let _110: &[wasmer_types::Value<externals::function::Function>; 3];
    let mut _111: isize;
    let mut _116: *mut [i128];
    let mut _117: &mut [i128];
    let mut _118: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _119: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _120: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _121: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _122: &[wasmer_types::Value<externals::function::Function>];
    let mut _123: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _125: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _126: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _127: isize;
    let _130: ();
    let mut _131: *mut i128;
    let mut _132: Rets;
    let mut _133: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _134: &i128;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: bool;
    scope 1 {
        debug trampoline => _7;
        let mut _10: [i128; 3];
        scope 2 {
            debug params_list => _10;
            let mut _20: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _20;
                let _21: &mut [i128];
                scope 4 {
                    debug rets_list => _21;
                    let _23: bool;
                    scope 5 {
                        debug using_rets_array => _23;
                        let _24: &mut [i128];
                        let mut _39: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _24;
                            let _58: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _59: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _58;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _59;
                                let _63: *const i128;
                                scope 15 {
                                    debug src_pointer => _63;
                                    let _66: *mut i128;
                                    scope 16 {
                                        debug rets_list => _66;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _39;
                            let _43: usize;
                            let _44: i128;
                            scope 8 {
                                debug i => _43;
                                debug arg => _44;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _79;
    }
    scope 19 {
        debug residual => _87;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _88;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _91;
        let _101: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _101;
            let mut _114: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _114;
                let _115: *mut i128;
                scope 32 {
                    debug mut_rets => _115;
                    let mut _124: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _124;
                        let _128: usize;
                        let _129: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _128;
                            debug ret => _129;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _102: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _102;
                let _112: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _113: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _112;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _113;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _140 = const false;
        _139 = const false;
        _138 = const false;
        _137 = const false;
        _136 = const false;
        _135 = const false;
        _140 = const true;
        _139 = const true;
        _138 = const true;
        _6 = _1;
        _5 = NativeFunc::<(A1, A2, A3), Rets>::is_host(move _6) -> [return: bb1, unwind: bb93];
    }

    bb1: {
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _77 = _1;
        _76 = NativeFunc::<(A1, A2, A3), Rets>::arg_kind(move _77) -> [return: bb42, unwind: bb93];
    }

    bb3: {
        _8 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _9 = const "Call trampoline not found in wasm function";
        _7 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _8, _9) -> [return: bb4, unwind: bb93];
    }

    bb4: {
        _140 = const false;
        _13 = move _2;
        _12 = <A1 as FromToNativeWasmType>::to_native(move _13) -> [return: bb5, unwind: bb93];
    }

    bb5: {
        _11 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _12) -> [return: bb6, unwind: bb93];
    }

    bb6: {
        _139 = const false;
        _16 = move _3;
        _15 = <A2 as FromToNativeWasmType>::to_native(move _16) -> [return: bb7, unwind: bb93];
    }

    bb7: {
        _14 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _15) -> [return: bb8, unwind: bb93];
    }

    bb8: {
        _138 = const false;
        _19 = move _4;
        _18 = <A3 as FromToNativeWasmType>::to_native(move _19) -> [return: bb9, unwind: bb93];
    }

    bb9: {
        _17 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _18) -> [return: bb10, unwind: bb93];
    }

    bb10: {
        _10 = [move _11, move _14, move _17];
        _20 = <Rets as WasmTypeList>::empty_array() -> [return: bb11, unwind: bb93];
    }

    bb11: {
        _137 = const true;
        _22 = &mut _20;
        _21 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _22) -> [return: bb12, unwind: bb91];
    }

    bb12: {
        _29 = &_10;
        _28 = move _29 as &[i128] (PointerCoercion(Unsize));
        _27 = Len((*_28));
        _31 = &(*_21);
        _30 = Len((*_31));
        _26 = Gt(move _27, move _30);
        switchInt(move _26) -> [0: bb15, otherwise: bb13];
    }

    bb13: {
        _23 = const false;
        _33 = &mut _10;
        _32 = <[i128; 3] as AsMut<[i128]>>::as_mut(move _33) -> [return: bb14, unwind: bb91];
    }

    bb14: {
        _25 = _32;
        goto -> bb26;
    }

    bb15: {
        _23 = const true;
        _38 = &_10;
        _37 = move _38 as &[i128] (PointerCoercion(Unsize));
        _36 = core::slice::<impl [i128]>::iter(move _37) -> [return: bb16, unwind: bb91];
    }

    bb16: {
        _35 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _36) -> [return: bb17, unwind: bb91];
    }

    bb17: {
        _34 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _35) -> [return: bb18, unwind: bb91];
    }

    bb18: {
        _39 = move _34;
        goto -> bb19;
    }

    bb19: {
        _41 = &mut _39;
        _40 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_41) -> [return: bb20, unwind: bb91];
    }

    bb20: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb23, 1: bb21, otherwise: bb22];
    }

    bb21: {
        _134 = deref_copy (((_40 as Some).0: (usize, &i128)).1: &i128);
        _44 = (*_134);
        _43 = (((_40 as Some).0: (usize, &i128)).0: usize);
        _45 = Len((*_21));
        _46 = Lt(_43, _45);
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _43) -> [success: bb24, unwind: bb91];
    }

    bb22: {
        unreachable;
    }

    bb23: {
        _47 = <[i128] as AsMut<[i128]>>::as_mut(_21) -> [return: bb25, unwind: bb91];
    }

    bb24: {
        (*_21)[_43] = _44;
        goto -> bb19;
    }

    bb25: {
        _25 = _47;
        goto -> bb26;
    }

    bb26: {
        _24 = _25;
        _50 = &((*_1).0: store::Store);
        _52 = _1;
        _51 = NativeFunc::<(A1, A2, A3), Rets>::vmctx(move _52) -> [return: bb27, unwind: bb91];
    }

    bb27: {
        _54 = _1;
        _53 = NativeFunc::<(A1, A2, A3), Rets>::address(move _54) -> [return: bb28, unwind: bb91];
    }

    bb28: {
        _56 = core::slice::<impl [i128]>::as_mut_ptr(_24) -> [return: bb29, unwind: bb91];
    }

    bb29: {
        _55 = move _56 as *mut u8 (PtrToPtr);
        _49 = wasmer_call_trampoline::<Store>(_50, move _51, _7, move _53, move _55) -> [return: bb30, unwind: bb91];
    }

    bb30: {
        _48 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _49) -> [return: bb31, unwind: bb91];
    }

    bb31: {
        _57 = discriminant(_48);
        switchInt(move _57) -> [0: bb32, 1: bb33, otherwise: bb22];
    }

    bb32: {
        _60 = &(*_21);
        _59 = Len((*_60));
        _61 = _23;
        switchInt(move _61) -> [0: bb35, otherwise: bb40];
    }

    bb33: {
        _58 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _58) -> [return: bb34, unwind: bb91];
    }

    bb34: {
        drop(_20) -> [return: bb77, unwind: bb93];
    }

    bb35: {
        _62 = Gt(_59, const 0_usize);
        switchInt(move _62) -> [0: bb40, otherwise: bb36];
    }

    bb36: {
        _65 = &_10;
        _64 = move _65 as &[i128] (PointerCoercion(Unsize));
        _63 = core::slice::<impl [i128]>::as_ptr(move _64) -> [return: bb37, unwind: bb91];
    }

    bb37: {
        _69 = &mut _20;
        _68 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _69) -> [return: bb38, unwind: bb91];
    }

    bb38: {
        _70 = const 0_usize;
        _71 = Len((*_68));
        _72 = Lt(_70, _71);
        assert(move _72, "index out of bounds: the length is {} but the index is {}", move _71, _70) -> [success: bb39, unwind: bb91];
    }

    bb39: {
        _67 = &mut (*_68)[_70];
        _66 = &raw mut (*_67);
        _73 = copy_nonoverlapping::<i128>(_63, _66, _59) -> [return: bb96, unwind: bb91];
    }

    bb40: {
        _137 = const false;
        _75 = move _20;
        _74 = <Rets as WasmTypeList>::from_array(move _75) -> [return: bb41, unwind: bb91];
    }

    bb41: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _74);
        _137 = const false;
        goto -> bb78;
    }

    bb42: {
        _78 = discriminant(_76);
        switchInt(move _78) -> [0: bb44, 1: bb43, otherwise: bb22];
    }

    bb43: {
        _140 = const false;
        _94 = move _2;
        _93 = <A1 as FromToNativeWasmType>::to_native(move _94) -> [return: bb52, unwind: bb93];
    }

    bb44: {
        _85 = &_1;
        _140 = const false;
        _139 = const false;
        _138 = const false;
        _84 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _85, A1: move _2, A2: move _3, A3: move _4 };
        _83 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _84);
        _82 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _83) -> [return: bb45, unwind: bb93];
    }

    bb45: {
        _81 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _82, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb46, unwind: bb93];
    }

    bb46: {
        _80 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _81) -> [return: bb47, unwind: bb93];
    }

    bb47: {
        _86 = discriminant(_80);
        switchInt(move _86) -> [0: bb48, 1: bb49, otherwise: bb22];
    }

    bb48: {
        _88 = move ((_80 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _136 = const true;
        _79 = move _88;
        _136 = const false;
        _90 = move _79;
        _89 = <Rets as WasmTypeList>::from_c_struct(move _90) -> [return: bb51, unwind: bb89];
    }

    bb49: {
        _87 = move ((_80 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _87) -> [return: bb50, unwind: bb93];
    }

    bb50: {
        _136 = const false;
        goto -> bb78;
    }

    bb51: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _89);
        _136 = const false;
        goto -> bb78;
    }

    bb52: {
        _92 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _93) -> [return: bb53, unwind: bb93];
    }

    bb53: {
        _139 = const false;
        _97 = move _3;
        _96 = <A2 as FromToNativeWasmType>::to_native(move _97) -> [return: bb54, unwind: bb82];
    }

    bb54: {
        _95 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _96) -> [return: bb55, unwind: bb82];
    }

    bb55: {
        _138 = const false;
        _100 = move _4;
        _99 = <A3 as FromToNativeWasmType>::to_native(move _100) -> [return: bb56, unwind: bb81];
    }

    bb56: {
        _98 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _99) -> [return: bb57, unwind: bb81];
    }

    bb57: {
        _91 = [move _92, move _95, move _98];
        _105 = _1;
        _104 = NativeFunc::<(A1, A2, A3), Rets>::vmctx(move _105) -> [return: bb58, unwind: bb80];
    }

    bb58: {
        _103 = (_104.1: *mut std::ffi::c_void);
        _102 = move _103 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _108 = &((*_102).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _110 = &_91;
        _109 = _110 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _107 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _108, move _109) -> [return: bb59, unwind: bb80];
    }

    bb59: {
        _106 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _107) -> [return: bb60, unwind: bb80];
    }

    bb60: {
        _111 = discriminant(_106);
        switchInt(move _111) -> [0: bb61, 1: bb62, otherwise: bb22];
    }

    bb61: {
        _113 = move ((_106 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _101 = move _113;
        _114 = <Rets as WasmTypeList>::empty_array() -> [return: bb64, unwind: bb79];
    }

    bb62: {
        _112 = move ((_106 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _112) -> [return: bb63, unwind: bb80];
    }

    bb63: {
        drop(_91) -> [return: bb78, unwind: bb93];
    }

    bb64: {
        _135 = const true;
        _118 = &mut _114;
        _117 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _118) -> [return: bb65, unwind: bb87];
    }

    bb65: {
        _116 = &raw mut (*_117);
        _115 = move _116 as *mut i128 (PtrToPtr);
        _123 = &_101;
        _122 = <Vec<Value<function::Function>> as Deref>::deref(move _123) -> [return: bb66, unwind: bb87];
    }

    bb66: {
        _121 = core::slice::<impl [Value<function::Function>]>::iter(_122) -> [return: bb67, unwind: bb87];
    }

    bb67: {
        _120 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _121) -> [return: bb68, unwind: bb87];
    }

    bb68: {
        _119 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _120) -> [return: bb69, unwind: bb87];
    }

    bb69: {
        _124 = move _119;
        goto -> bb70;
    }

    bb70: {
        _126 = &mut _124;
        _125 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_126) -> [return: bb71, unwind: bb87];
    }

    bb71: {
        _127 = discriminant(_125);
        switchInt(move _127) -> [0: bb73, 1: bb72, otherwise: bb22];
    }

    bb72: {
        _128 = (((_125 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _129 = (((_125 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _131 = std::ptr::mut_ptr::<impl *mut i128>::add(_115, _128) -> [return: bb74, unwind: bb87];
    }

    bb73: {
        _135 = const false;
        _133 = move _114;
        _132 = <Rets as WasmTypeList>::from_array(move _133) -> [return: bb75, unwind: bb87];
    }

    bb74: {
        _130 = Value::<function::Function>::write_value_to(_129, move _131) -> [return: bb97, unwind: bb87];
    }

    bb75: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _132);
        _135 = const false;
        drop(_101) -> [return: bb76, unwind: bb80];
    }

    bb76: {
        drop(_91) -> [return: bb78, unwind: bb93];
    }

    bb77: {
        _137 = const false;
        goto -> bb78;
    }

    bb78: {
        return;
    }

    bb79 (cleanup): {
        drop(_101) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_91) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_95) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_92) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        switchInt(_139) -> [0: bb84, otherwise: bb94];
    }

    bb84 (cleanup): {
        switchInt(_140) -> [0: bb85, otherwise: bb95];
    }

    bb85 (cleanup): {
        resume;
    }

    bb86 (cleanup): {
        drop(_114) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        switchInt(_135) -> [0: bb79, otherwise: bb86];
    }

    bb88 (cleanup): {
        drop(_79) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        switchInt(_136) -> [0: bb93, otherwise: bb88];
    }

    bb90 (cleanup): {
        drop(_20) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_137) -> [0: bb93, otherwise: bb90];
    }

    bb92 (cleanup): {
        drop(_4) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_138) -> [0: bb83, otherwise: bb92];
    }

    bb94 (cleanup): {
        drop(_3) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_2) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb96: {
        goto -> bb40;
    }

    bb97: {
        goto -> bb70;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: &&native::NativeFunc<(A1, A2, A3), Rets>;
    let mut _9: &native::NativeFunc<(A1, A2, A3), Rets>;
    let mut _10: &&native::NativeFunc<(A1, A2, A3), Rets>;
    let mut _11: &native::NativeFunc<(A1, A2, A3), Rets>;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _14 = const false;
        _13 = const false;
        _12 = const false;
        _12 = const true;
        _13 = const true;
        _14 = const true;
        _8 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3), Rets>);
        _9 = deref_copy (*_8);
        _3 = NativeFunc::<(A1, A2, A3), Rets>::address(_9) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _10 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3), Rets>);
        _11 = deref_copy (*_10);
        _4 = NativeFunc::<(A1, A2, A3), Rets>::vmctx(_11) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _14 = const false;
        _5 = move (_1.1: A1);
        _13 = const false;
        _6 = move (_1.2: A2);
        _12 = const false;
        _7 = move (_1.3: A3);
        _0 = _2(move _4, move _5, move _6, move _7) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_12) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.3: A3)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_13) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.2: A2)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop((_1.1: A1)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_14) -> [0: bb7, otherwise: bb9];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4), Rets>, _2: A1, _3: A2, _4: A3, _5: A4) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _6: bool;
    let mut _7: &native::NativeFunc<(A1, A2, A3, A4), Rets>;
    let _8: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _9: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _10: &str;
    let mut _12: i128;
    let mut _13: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _14: A1;
    let mut _15: i128;
    let mut _16: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A2;
    let mut _18: i128;
    let mut _19: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A3;
    let mut _21: i128;
    let mut _22: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A4;
    let mut _26: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _29: &mut [i128];
    let mut _30: bool;
    let mut _31: usize;
    let mut _32: &[i128];
    let mut _33: &[i128; 4];
    let mut _34: usize;
    let mut _35: &[i128];
    let mut _36: &mut [i128];
    let mut _37: &mut [i128; 4];
    let mut _38: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _39: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _40: std::slice::Iter<'_, i128>;
    let mut _41: &[i128];
    let mut _42: &[i128; 4];
    let mut _44: std::option::Option<(usize, &i128)>;
    let mut _45: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _46: isize;
    let mut _49: usize;
    let mut _50: bool;
    let mut _51: &mut [i128];
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _53: std::result::Result<(), wasmer_vm::Trap>;
    let _54: &store::Store;
    let mut _55: wasmer_vm::VMFunctionEnvironment;
    let mut _56: &native::NativeFunc<(A1, A2, A3, A4), Rets>;
    let mut _57: *const wasmer_vm::VMFunctionBody;
    let mut _58: &native::NativeFunc<(A1, A2, A3, A4), Rets>;
    let mut _59: *mut u8;
    let mut _60: *mut i128;
    let mut _61: isize;
    let mut _64: &[i128];
    let mut _65: bool;
    let mut _66: bool;
    let mut _68: &[i128];
    let mut _69: &[i128; 4];
    let mut _71: &mut i128;
    let mut _72: &mut [i128];
    let mut _73: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _74: usize;
    let mut _75: usize;
    let mut _76: bool;
    let _77: ();
    let mut _78: Rets;
    let mut _79: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _80: wasmer_vm::VMFunctionKind;
    let mut _81: &native::NativeFunc<(A1, A2, A3, A4), Rets>;
    let mut _82: isize;
    let _83: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _85: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _86: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _87: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _88: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _89: &&native::NativeFunc<(A1, A2, A3, A4), Rets>;
    let mut _90: isize;
    let _91: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _92: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _93: Rets;
    let mut _94: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _95: [wasmer_types::Value<externals::function::Function>; 4];
    let mut _96: wasmer_types::Value<externals::function::Function>;
    let mut _97: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _98: A1;
    let mut _99: wasmer_types::Value<externals::function::Function>;
    let mut _100: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _101: A2;
    let mut _102: wasmer_types::Value<externals::function::Function>;
    let mut _103: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _104: A3;
    let mut _105: wasmer_types::Value<externals::function::Function>;
    let mut _106: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _107: A4;
    let mut _110: *mut std::ffi::c_void;
    let mut _111: wasmer_vm::VMFunctionEnvironment;
    let mut _112: &native::NativeFunc<(A1, A2, A3, A4), Rets>;
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _114: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _115: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _116: &[wasmer_types::Value<externals::function::Function>];
    let _117: &[wasmer_types::Value<externals::function::Function>; 4];
    let mut _118: isize;
    let mut _123: *mut [i128];
    let mut _124: &mut [i128];
    let mut _125: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _126: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _127: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _128: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _129: &[wasmer_types::Value<externals::function::Function>];
    let mut _130: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _132: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _133: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _134: isize;
    let _137: ();
    let mut _138: *mut i128;
    let mut _139: Rets;
    let mut _140: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _141: &i128;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: bool;
    let mut _147: bool;
    let mut _148: bool;
    scope 1 {
        debug trampoline => _8;
        let mut _11: [i128; 4];
        scope 2 {
            debug params_list => _11;
            let mut _24: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _24;
                let _25: &mut [i128];
                scope 4 {
                    debug rets_list => _25;
                    let _27: bool;
                    scope 5 {
                        debug using_rets_array => _27;
                        let _28: &mut [i128];
                        let mut _43: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _28;
                            let _62: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _63: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _62;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _63;
                                let _67: *const i128;
                                scope 15 {
                                    debug src_pointer => _67;
                                    let _70: *mut i128;
                                    scope 16 {
                                        debug rets_list => _70;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _43;
                            let _47: usize;
                            let _48: i128;
                            scope 8 {
                                debug i => _47;
                                debug arg => _48;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _83;
    }
    scope 19 {
        debug residual => _91;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _92;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _95;
        let _108: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _108;
            let mut _121: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _121;
                let _122: *mut i128;
                scope 32 {
                    debug mut_rets => _122;
                    let mut _131: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _131;
                        let _135: usize;
                        let _136: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _135;
                            debug ret => _136;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _109: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _109;
                let _119: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _120: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _119;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _120;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _148 = const false;
        _147 = const false;
        _146 = const false;
        _145 = const false;
        _144 = const false;
        _143 = const false;
        _142 = const false;
        _148 = const true;
        _147 = const true;
        _146 = const true;
        _145 = const true;
        _7 = _1;
        _6 = NativeFunc::<(A1, A2, A3, A4), Rets>::is_host(move _7) -> [return: bb1, unwind: bb99];
    }

    bb1: {
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _81 = _1;
        _80 = NativeFunc::<(A1, A2, A3, A4), Rets>::arg_kind(move _81) -> [return: bb44, unwind: bb99];
    }

    bb3: {
        _9 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _10 = const "Call trampoline not found in wasm function";
        _8 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _9, _10) -> [return: bb4, unwind: bb99];
    }

    bb4: {
        _148 = const false;
        _14 = move _2;
        _13 = <A1 as FromToNativeWasmType>::to_native(move _14) -> [return: bb5, unwind: bb99];
    }

    bb5: {
        _12 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _13) -> [return: bb6, unwind: bb99];
    }

    bb6: {
        _147 = const false;
        _17 = move _3;
        _16 = <A2 as FromToNativeWasmType>::to_native(move _17) -> [return: bb7, unwind: bb99];
    }

    bb7: {
        _15 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _16) -> [return: bb8, unwind: bb99];
    }

    bb8: {
        _146 = const false;
        _20 = move _4;
        _19 = <A3 as FromToNativeWasmType>::to_native(move _20) -> [return: bb9, unwind: bb99];
    }

    bb9: {
        _18 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _19) -> [return: bb10, unwind: bb99];
    }

    bb10: {
        _145 = const false;
        _23 = move _5;
        _22 = <A4 as FromToNativeWasmType>::to_native(move _23) -> [return: bb11, unwind: bb99];
    }

    bb11: {
        _21 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _22) -> [return: bb12, unwind: bb99];
    }

    bb12: {
        _11 = [move _12, move _15, move _18, move _21];
        _24 = <Rets as WasmTypeList>::empty_array() -> [return: bb13, unwind: bb99];
    }

    bb13: {
        _144 = const true;
        _26 = &mut _24;
        _25 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _26) -> [return: bb14, unwind: bb97];
    }

    bb14: {
        _33 = &_11;
        _32 = move _33 as &[i128] (PointerCoercion(Unsize));
        _31 = Len((*_32));
        _35 = &(*_25);
        _34 = Len((*_35));
        _30 = Gt(move _31, move _34);
        switchInt(move _30) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        _27 = const false;
        _37 = &mut _11;
        _36 = <[i128; 4] as AsMut<[i128]>>::as_mut(move _37) -> [return: bb16, unwind: bb97];
    }

    bb16: {
        _29 = _36;
        goto -> bb28;
    }

    bb17: {
        _27 = const true;
        _42 = &_11;
        _41 = move _42 as &[i128] (PointerCoercion(Unsize));
        _40 = core::slice::<impl [i128]>::iter(move _41) -> [return: bb18, unwind: bb97];
    }

    bb18: {
        _39 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _40) -> [return: bb19, unwind: bb97];
    }

    bb19: {
        _38 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _39) -> [return: bb20, unwind: bb97];
    }

    bb20: {
        _43 = move _38;
        goto -> bb21;
    }

    bb21: {
        _45 = &mut _43;
        _44 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_45) -> [return: bb22, unwind: bb97];
    }

    bb22: {
        _46 = discriminant(_44);
        switchInt(move _46) -> [0: bb25, 1: bb23, otherwise: bb24];
    }

    bb23: {
        _141 = deref_copy (((_44 as Some).0: (usize, &i128)).1: &i128);
        _48 = (*_141);
        _47 = (((_44 as Some).0: (usize, &i128)).0: usize);
        _49 = Len((*_25));
        _50 = Lt(_47, _49);
        assert(move _50, "index out of bounds: the length is {} but the index is {}", move _49, _47) -> [success: bb26, unwind: bb97];
    }

    bb24: {
        unreachable;
    }

    bb25: {
        _51 = <[i128] as AsMut<[i128]>>::as_mut(_25) -> [return: bb27, unwind: bb97];
    }

    bb26: {
        (*_25)[_47] = _48;
        goto -> bb21;
    }

    bb27: {
        _29 = _51;
        goto -> bb28;
    }

    bb28: {
        _28 = _29;
        _54 = &((*_1).0: store::Store);
        _56 = _1;
        _55 = NativeFunc::<(A1, A2, A3, A4), Rets>::vmctx(move _56) -> [return: bb29, unwind: bb97];
    }

    bb29: {
        _58 = _1;
        _57 = NativeFunc::<(A1, A2, A3, A4), Rets>::address(move _58) -> [return: bb30, unwind: bb97];
    }

    bb30: {
        _60 = core::slice::<impl [i128]>::as_mut_ptr(_28) -> [return: bb31, unwind: bb97];
    }

    bb31: {
        _59 = move _60 as *mut u8 (PtrToPtr);
        _53 = wasmer_call_trampoline::<Store>(_54, move _55, _8, move _57, move _59) -> [return: bb32, unwind: bb97];
    }

    bb32: {
        _52 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _53) -> [return: bb33, unwind: bb97];
    }

    bb33: {
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb34, 1: bb35, otherwise: bb24];
    }

    bb34: {
        _64 = &(*_25);
        _63 = Len((*_64));
        _65 = _27;
        switchInt(move _65) -> [0: bb37, otherwise: bb42];
    }

    bb35: {
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _62) -> [return: bb36, unwind: bb97];
    }

    bb36: {
        drop(_24) -> [return: bb81, unwind: bb99];
    }

    bb37: {
        _66 = Gt(_63, const 0_usize);
        switchInt(move _66) -> [0: bb42, otherwise: bb38];
    }

    bb38: {
        _69 = &_11;
        _68 = move _69 as &[i128] (PointerCoercion(Unsize));
        _67 = core::slice::<impl [i128]>::as_ptr(move _68) -> [return: bb39, unwind: bb97];
    }

    bb39: {
        _73 = &mut _24;
        _72 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _73) -> [return: bb40, unwind: bb97];
    }

    bb40: {
        _74 = const 0_usize;
        _75 = Len((*_72));
        _76 = Lt(_74, _75);
        assert(move _76, "index out of bounds: the length is {} but the index is {}", move _75, _74) -> [success: bb41, unwind: bb97];
    }

    bb41: {
        _71 = &mut (*_72)[_74];
        _70 = &raw mut (*_71);
        _77 = copy_nonoverlapping::<i128>(_67, _70, _63) -> [return: bb103, unwind: bb97];
    }

    bb42: {
        _144 = const false;
        _79 = move _24;
        _78 = <Rets as WasmTypeList>::from_array(move _79) -> [return: bb43, unwind: bb97];
    }

    bb43: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _78);
        _144 = const false;
        goto -> bb82;
    }

    bb44: {
        _82 = discriminant(_80);
        switchInt(move _82) -> [0: bb46, 1: bb45, otherwise: bb24];
    }

    bb45: {
        _148 = const false;
        _98 = move _2;
        _97 = <A1 as FromToNativeWasmType>::to_native(move _98) -> [return: bb54, unwind: bb99];
    }

    bb46: {
        _89 = &_1;
        _148 = const false;
        _147 = const false;
        _146 = const false;
        _145 = const false;
        _88 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _89, A1: move _2, A2: move _3, A3: move _4, A4: move _5 };
        _87 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _88);
        _86 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _87) -> [return: bb47, unwind: bb99];
    }

    bb47: {
        _85 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _86, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb48, unwind: bb99];
    }

    bb48: {
        _84 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _85) -> [return: bb49, unwind: bb99];
    }

    bb49: {
        _90 = discriminant(_84);
        switchInt(move _90) -> [0: bb50, 1: bb51, otherwise: bb24];
    }

    bb50: {
        _92 = move ((_84 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _143 = const true;
        _83 = move _92;
        _143 = const false;
        _94 = move _83;
        _93 = <Rets as WasmTypeList>::from_c_struct(move _94) -> [return: bb53, unwind: bb95];
    }

    bb51: {
        _91 = move ((_84 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _91) -> [return: bb52, unwind: bb99];
    }

    bb52: {
        _143 = const false;
        goto -> bb82;
    }

    bb53: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _93);
        _143 = const false;
        goto -> bb82;
    }

    bb54: {
        _96 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _97) -> [return: bb55, unwind: bb99];
    }

    bb55: {
        _147 = const false;
        _101 = move _3;
        _100 = <A2 as FromToNativeWasmType>::to_native(move _101) -> [return: bb56, unwind: bb87];
    }

    bb56: {
        _99 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _100) -> [return: bb57, unwind: bb87];
    }

    bb57: {
        _146 = const false;
        _104 = move _4;
        _103 = <A3 as FromToNativeWasmType>::to_native(move _104) -> [return: bb58, unwind: bb86];
    }

    bb58: {
        _102 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _103) -> [return: bb59, unwind: bb86];
    }

    bb59: {
        _145 = const false;
        _107 = move _5;
        _106 = <A4 as FromToNativeWasmType>::to_native(move _107) -> [return: bb60, unwind: bb85];
    }

    bb60: {
        _105 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _106) -> [return: bb61, unwind: bb85];
    }

    bb61: {
        _95 = [move _96, move _99, move _102, move _105];
        _112 = _1;
        _111 = NativeFunc::<(A1, A2, A3, A4), Rets>::vmctx(move _112) -> [return: bb62, unwind: bb84];
    }

    bb62: {
        _110 = (_111.1: *mut std::ffi::c_void);
        _109 = move _110 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _115 = &((*_109).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _117 = &_95;
        _116 = _117 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _114 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _115, move _116) -> [return: bb63, unwind: bb84];
    }

    bb63: {
        _113 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _114) -> [return: bb64, unwind: bb84];
    }

    bb64: {
        _118 = discriminant(_113);
        switchInt(move _118) -> [0: bb65, 1: bb66, otherwise: bb24];
    }

    bb65: {
        _120 = move ((_113 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _108 = move _120;
        _121 = <Rets as WasmTypeList>::empty_array() -> [return: bb68, unwind: bb83];
    }

    bb66: {
        _119 = move ((_113 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _119) -> [return: bb67, unwind: bb84];
    }

    bb67: {
        drop(_95) -> [return: bb82, unwind: bb99];
    }

    bb68: {
        _142 = const true;
        _125 = &mut _121;
        _124 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _125) -> [return: bb69, unwind: bb93];
    }

    bb69: {
        _123 = &raw mut (*_124);
        _122 = move _123 as *mut i128 (PtrToPtr);
        _130 = &_108;
        _129 = <Vec<Value<function::Function>> as Deref>::deref(move _130) -> [return: bb70, unwind: bb93];
    }

    bb70: {
        _128 = core::slice::<impl [Value<function::Function>]>::iter(_129) -> [return: bb71, unwind: bb93];
    }

    bb71: {
        _127 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _128) -> [return: bb72, unwind: bb93];
    }

    bb72: {
        _126 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _127) -> [return: bb73, unwind: bb93];
    }

    bb73: {
        _131 = move _126;
        goto -> bb74;
    }

    bb74: {
        _133 = &mut _131;
        _132 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_133) -> [return: bb75, unwind: bb93];
    }

    bb75: {
        _134 = discriminant(_132);
        switchInt(move _134) -> [0: bb77, 1: bb76, otherwise: bb24];
    }

    bb76: {
        _135 = (((_132 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _136 = (((_132 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _138 = std::ptr::mut_ptr::<impl *mut i128>::add(_122, _135) -> [return: bb78, unwind: bb93];
    }

    bb77: {
        _142 = const false;
        _140 = move _121;
        _139 = <Rets as WasmTypeList>::from_array(move _140) -> [return: bb79, unwind: bb93];
    }

    bb78: {
        _137 = Value::<function::Function>::write_value_to(_136, move _138) -> [return: bb104, unwind: bb93];
    }

    bb79: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _139);
        _142 = const false;
        drop(_108) -> [return: bb80, unwind: bb84];
    }

    bb80: {
        drop(_95) -> [return: bb82, unwind: bb99];
    }

    bb81: {
        _144 = const false;
        goto -> bb82;
    }

    bb82: {
        return;
    }

    bb83 (cleanup): {
        drop(_108) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_95) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_102) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_99) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_96) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        switchInt(_146) -> [0: bb89, otherwise: bb100];
    }

    bb89 (cleanup): {
        switchInt(_147) -> [0: bb90, otherwise: bb101];
    }

    bb90 (cleanup): {
        switchInt(_148) -> [0: bb91, otherwise: bb102];
    }

    bb91 (cleanup): {
        resume;
    }

    bb92 (cleanup): {
        drop(_121) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_142) -> [0: bb83, otherwise: bb92];
    }

    bb94 (cleanup): {
        drop(_83) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        switchInt(_143) -> [0: bb99, otherwise: bb94];
    }

    bb96 (cleanup): {
        drop(_24) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        switchInt(_144) -> [0: bb99, otherwise: bb96];
    }

    bb98 (cleanup): {
        drop(_5) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        switchInt(_145) -> [0: bb88, otherwise: bb98];
    }

    bb100 (cleanup): {
        drop(_4) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_3) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_2) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb103: {
        goto -> bb42;
    }

    bb104: {
        goto -> bb74;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: &&native::NativeFunc<(A1, A2, A3, A4), Rets>;
    let mut _10: &native::NativeFunc<(A1, A2, A3, A4), Rets>;
    let mut _11: &&native::NativeFunc<(A1, A2, A3, A4), Rets>;
    let mut _12: &native::NativeFunc<(A1, A2, A3, A4), Rets>;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _16 = const false;
        _15 = const false;
        _14 = const false;
        _13 = const false;
        _13 = const true;
        _14 = const true;
        _15 = const true;
        _16 = const true;
        _9 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4), Rets>);
        _10 = deref_copy (*_9);
        _3 = NativeFunc::<(A1, A2, A3, A4), Rets>::address(_10) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _11 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4), Rets>);
        _12 = deref_copy (*_11);
        _4 = NativeFunc::<(A1, A2, A3, A4), Rets>::vmctx(_12) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _16 = const false;
        _5 = move (_1.1: A1);
        _15 = const false;
        _6 = move (_1.2: A2);
        _14 = const false;
        _7 = move (_1.3: A3);
        _13 = const false;
        _8 = move (_1.4: A4);
        _0 = _2(move _4, move _5, move _6, move _7, move _8) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_13) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.4: A4)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_14) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.3: A3)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_15) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.2: A2)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop((_1.1: A1)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_16) -> [0: bb9, otherwise: bb11];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _7: bool;
    let mut _8: &native::NativeFunc<(A1, A2, A3, A4, A5), Rets>;
    let _9: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _10: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _11: &str;
    let mut _13: i128;
    let mut _14: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _15: A1;
    let mut _16: i128;
    let mut _17: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A2;
    let mut _19: i128;
    let mut _20: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A3;
    let mut _22: i128;
    let mut _23: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A4;
    let mut _25: i128;
    let mut _26: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A5;
    let mut _30: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _33: &mut [i128];
    let mut _34: bool;
    let mut _35: usize;
    let mut _36: &[i128];
    let mut _37: &[i128; 5];
    let mut _38: usize;
    let mut _39: &[i128];
    let mut _40: &mut [i128];
    let mut _41: &mut [i128; 5];
    let mut _42: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _43: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _44: std::slice::Iter<'_, i128>;
    let mut _45: &[i128];
    let mut _46: &[i128; 5];
    let mut _48: std::option::Option<(usize, &i128)>;
    let mut _49: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _50: isize;
    let mut _53: usize;
    let mut _54: bool;
    let mut _55: &mut [i128];
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _57: std::result::Result<(), wasmer_vm::Trap>;
    let _58: &store::Store;
    let mut _59: wasmer_vm::VMFunctionEnvironment;
    let mut _60: &native::NativeFunc<(A1, A2, A3, A4, A5), Rets>;
    let mut _61: *const wasmer_vm::VMFunctionBody;
    let mut _62: &native::NativeFunc<(A1, A2, A3, A4, A5), Rets>;
    let mut _63: *mut u8;
    let mut _64: *mut i128;
    let mut _65: isize;
    let mut _68: &[i128];
    let mut _69: bool;
    let mut _70: bool;
    let mut _72: &[i128];
    let mut _73: &[i128; 5];
    let mut _75: &mut i128;
    let mut _76: &mut [i128];
    let mut _77: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _78: usize;
    let mut _79: usize;
    let mut _80: bool;
    let _81: ();
    let mut _82: Rets;
    let mut _83: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _84: wasmer_vm::VMFunctionKind;
    let mut _85: &native::NativeFunc<(A1, A2, A3, A4, A5), Rets>;
    let mut _86: isize;
    let _87: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _89: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _90: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _91: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _92: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _93: &&native::NativeFunc<(A1, A2, A3, A4, A5), Rets>;
    let mut _94: isize;
    let _95: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _96: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _97: Rets;
    let mut _98: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _99: [wasmer_types::Value<externals::function::Function>; 5];
    let mut _100: wasmer_types::Value<externals::function::Function>;
    let mut _101: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _102: A1;
    let mut _103: wasmer_types::Value<externals::function::Function>;
    let mut _104: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _105: A2;
    let mut _106: wasmer_types::Value<externals::function::Function>;
    let mut _107: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _108: A3;
    let mut _109: wasmer_types::Value<externals::function::Function>;
    let mut _110: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _111: A4;
    let mut _112: wasmer_types::Value<externals::function::Function>;
    let mut _113: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _114: A5;
    let mut _117: *mut std::ffi::c_void;
    let mut _118: wasmer_vm::VMFunctionEnvironment;
    let mut _119: &native::NativeFunc<(A1, A2, A3, A4, A5), Rets>;
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _121: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _122: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _123: &[wasmer_types::Value<externals::function::Function>];
    let _124: &[wasmer_types::Value<externals::function::Function>; 5];
    let mut _125: isize;
    let mut _130: *mut [i128];
    let mut _131: &mut [i128];
    let mut _132: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _133: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _134: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _135: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _136: &[wasmer_types::Value<externals::function::Function>];
    let mut _137: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _139: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _140: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _141: isize;
    let _144: ();
    let mut _145: *mut i128;
    let mut _146: Rets;
    let mut _147: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _148: &i128;
    let mut _149: bool;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: bool;
    let mut _153: bool;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: bool;
    scope 1 {
        debug trampoline => _9;
        let mut _12: [i128; 5];
        scope 2 {
            debug params_list => _12;
            let mut _28: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _28;
                let _29: &mut [i128];
                scope 4 {
                    debug rets_list => _29;
                    let _31: bool;
                    scope 5 {
                        debug using_rets_array => _31;
                        let _32: &mut [i128];
                        let mut _47: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _32;
                            let _66: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _67: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _66;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _67;
                                let _71: *const i128;
                                scope 15 {
                                    debug src_pointer => _71;
                                    let _74: *mut i128;
                                    scope 16 {
                                        debug rets_list => _74;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _47;
                            let _51: usize;
                            let _52: i128;
                            scope 8 {
                                debug i => _51;
                                debug arg => _52;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _87;
    }
    scope 19 {
        debug residual => _95;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _96;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _99;
        let _115: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _115;
            let mut _128: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _128;
                let _129: *mut i128;
                scope 32 {
                    debug mut_rets => _129;
                    let mut _138: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _138;
                        let _142: usize;
                        let _143: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _142;
                            debug ret => _143;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _116: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _116;
                let _126: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _127: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _126;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _127;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _156 = const false;
        _155 = const false;
        _154 = const false;
        _153 = const false;
        _152 = const false;
        _151 = const false;
        _150 = const false;
        _149 = const false;
        _156 = const true;
        _155 = const true;
        _154 = const true;
        _153 = const true;
        _152 = const true;
        _8 = _1;
        _7 = NativeFunc::<(A1, A2, A3, A4, A5), Rets>::is_host(move _8) -> [return: bb1, unwind: bb105];
    }

    bb1: {
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _85 = _1;
        _84 = NativeFunc::<(A1, A2, A3, A4, A5), Rets>::arg_kind(move _85) -> [return: bb46, unwind: bb105];
    }

    bb3: {
        _10 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _11 = const "Call trampoline not found in wasm function";
        _9 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _10, _11) -> [return: bb4, unwind: bb105];
    }

    bb4: {
        _156 = const false;
        _15 = move _2;
        _14 = <A1 as FromToNativeWasmType>::to_native(move _15) -> [return: bb5, unwind: bb105];
    }

    bb5: {
        _13 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _14) -> [return: bb6, unwind: bb105];
    }

    bb6: {
        _155 = const false;
        _18 = move _3;
        _17 = <A2 as FromToNativeWasmType>::to_native(move _18) -> [return: bb7, unwind: bb105];
    }

    bb7: {
        _16 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _17) -> [return: bb8, unwind: bb105];
    }

    bb8: {
        _154 = const false;
        _21 = move _4;
        _20 = <A3 as FromToNativeWasmType>::to_native(move _21) -> [return: bb9, unwind: bb105];
    }

    bb9: {
        _19 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _20) -> [return: bb10, unwind: bb105];
    }

    bb10: {
        _153 = const false;
        _24 = move _5;
        _23 = <A4 as FromToNativeWasmType>::to_native(move _24) -> [return: bb11, unwind: bb105];
    }

    bb11: {
        _22 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _23) -> [return: bb12, unwind: bb105];
    }

    bb12: {
        _152 = const false;
        _27 = move _6;
        _26 = <A5 as FromToNativeWasmType>::to_native(move _27) -> [return: bb13, unwind: bb105];
    }

    bb13: {
        _25 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _26) -> [return: bb14, unwind: bb105];
    }

    bb14: {
        _12 = [move _13, move _16, move _19, move _22, move _25];
        _28 = <Rets as WasmTypeList>::empty_array() -> [return: bb15, unwind: bb105];
    }

    bb15: {
        _151 = const true;
        _30 = &mut _28;
        _29 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _30) -> [return: bb16, unwind: bb103];
    }

    bb16: {
        _37 = &_12;
        _36 = move _37 as &[i128] (PointerCoercion(Unsize));
        _35 = Len((*_36));
        _39 = &(*_29);
        _38 = Len((*_39));
        _34 = Gt(move _35, move _38);
        switchInt(move _34) -> [0: bb19, otherwise: bb17];
    }

    bb17: {
        _31 = const false;
        _41 = &mut _12;
        _40 = <[i128; 5] as AsMut<[i128]>>::as_mut(move _41) -> [return: bb18, unwind: bb103];
    }

    bb18: {
        _33 = _40;
        goto -> bb30;
    }

    bb19: {
        _31 = const true;
        _46 = &_12;
        _45 = move _46 as &[i128] (PointerCoercion(Unsize));
        _44 = core::slice::<impl [i128]>::iter(move _45) -> [return: bb20, unwind: bb103];
    }

    bb20: {
        _43 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _44) -> [return: bb21, unwind: bb103];
    }

    bb21: {
        _42 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _43) -> [return: bb22, unwind: bb103];
    }

    bb22: {
        _47 = move _42;
        goto -> bb23;
    }

    bb23: {
        _49 = &mut _47;
        _48 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_49) -> [return: bb24, unwind: bb103];
    }

    bb24: {
        _50 = discriminant(_48);
        switchInt(move _50) -> [0: bb27, 1: bb25, otherwise: bb26];
    }

    bb25: {
        _148 = deref_copy (((_48 as Some).0: (usize, &i128)).1: &i128);
        _52 = (*_148);
        _51 = (((_48 as Some).0: (usize, &i128)).0: usize);
        _53 = Len((*_29));
        _54 = Lt(_51, _53);
        assert(move _54, "index out of bounds: the length is {} but the index is {}", move _53, _51) -> [success: bb28, unwind: bb103];
    }

    bb26: {
        unreachable;
    }

    bb27: {
        _55 = <[i128] as AsMut<[i128]>>::as_mut(_29) -> [return: bb29, unwind: bb103];
    }

    bb28: {
        (*_29)[_51] = _52;
        goto -> bb23;
    }

    bb29: {
        _33 = _55;
        goto -> bb30;
    }

    bb30: {
        _32 = _33;
        _58 = &((*_1).0: store::Store);
        _60 = _1;
        _59 = NativeFunc::<(A1, A2, A3, A4, A5), Rets>::vmctx(move _60) -> [return: bb31, unwind: bb103];
    }

    bb31: {
        _62 = _1;
        _61 = NativeFunc::<(A1, A2, A3, A4, A5), Rets>::address(move _62) -> [return: bb32, unwind: bb103];
    }

    bb32: {
        _64 = core::slice::<impl [i128]>::as_mut_ptr(_32) -> [return: bb33, unwind: bb103];
    }

    bb33: {
        _63 = move _64 as *mut u8 (PtrToPtr);
        _57 = wasmer_call_trampoline::<Store>(_58, move _59, _9, move _61, move _63) -> [return: bb34, unwind: bb103];
    }

    bb34: {
        _56 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _57) -> [return: bb35, unwind: bb103];
    }

    bb35: {
        _65 = discriminant(_56);
        switchInt(move _65) -> [0: bb36, 1: bb37, otherwise: bb26];
    }

    bb36: {
        _68 = &(*_29);
        _67 = Len((*_68));
        _69 = _31;
        switchInt(move _69) -> [0: bb39, otherwise: bb44];
    }

    bb37: {
        _66 = move ((_56 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _66) -> [return: bb38, unwind: bb103];
    }

    bb38: {
        drop(_28) -> [return: bb85, unwind: bb105];
    }

    bb39: {
        _70 = Gt(_67, const 0_usize);
        switchInt(move _70) -> [0: bb44, otherwise: bb40];
    }

    bb40: {
        _73 = &_12;
        _72 = move _73 as &[i128] (PointerCoercion(Unsize));
        _71 = core::slice::<impl [i128]>::as_ptr(move _72) -> [return: bb41, unwind: bb103];
    }

    bb41: {
        _77 = &mut _28;
        _76 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _77) -> [return: bb42, unwind: bb103];
    }

    bb42: {
        _78 = const 0_usize;
        _79 = Len((*_76));
        _80 = Lt(_78, _79);
        assert(move _80, "index out of bounds: the length is {} but the index is {}", move _79, _78) -> [success: bb43, unwind: bb103];
    }

    bb43: {
        _75 = &mut (*_76)[_78];
        _74 = &raw mut (*_75);
        _81 = copy_nonoverlapping::<i128>(_71, _74, _67) -> [return: bb110, unwind: bb103];
    }

    bb44: {
        _151 = const false;
        _83 = move _28;
        _82 = <Rets as WasmTypeList>::from_array(move _83) -> [return: bb45, unwind: bb103];
    }

    bb45: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _82);
        _151 = const false;
        goto -> bb86;
    }

    bb46: {
        _86 = discriminant(_84);
        switchInt(move _86) -> [0: bb48, 1: bb47, otherwise: bb26];
    }

    bb47: {
        _156 = const false;
        _102 = move _2;
        _101 = <A1 as FromToNativeWasmType>::to_native(move _102) -> [return: bb56, unwind: bb105];
    }

    bb48: {
        _93 = &_1;
        _156 = const false;
        _155 = const false;
        _154 = const false;
        _153 = const false;
        _152 = const false;
        _92 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _93, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6 };
        _91 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _92);
        _90 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _91) -> [return: bb49, unwind: bb105];
    }

    bb49: {
        _89 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _90, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb50, unwind: bb105];
    }

    bb50: {
        _88 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _89) -> [return: bb51, unwind: bb105];
    }

    bb51: {
        _94 = discriminant(_88);
        switchInt(move _94) -> [0: bb52, 1: bb53, otherwise: bb26];
    }

    bb52: {
        _96 = move ((_88 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _150 = const true;
        _87 = move _96;
        _150 = const false;
        _98 = move _87;
        _97 = <Rets as WasmTypeList>::from_c_struct(move _98) -> [return: bb55, unwind: bb101];
    }

    bb53: {
        _95 = move ((_88 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _95) -> [return: bb54, unwind: bb105];
    }

    bb54: {
        _150 = const false;
        goto -> bb86;
    }

    bb55: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _97);
        _150 = const false;
        goto -> bb86;
    }

    bb56: {
        _100 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _101) -> [return: bb57, unwind: bb105];
    }

    bb57: {
        _155 = const false;
        _105 = move _3;
        _104 = <A2 as FromToNativeWasmType>::to_native(move _105) -> [return: bb58, unwind: bb92];
    }

    bb58: {
        _103 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _104) -> [return: bb59, unwind: bb92];
    }

    bb59: {
        _154 = const false;
        _108 = move _4;
        _107 = <A3 as FromToNativeWasmType>::to_native(move _108) -> [return: bb60, unwind: bb91];
    }

    bb60: {
        _106 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _107) -> [return: bb61, unwind: bb91];
    }

    bb61: {
        _153 = const false;
        _111 = move _5;
        _110 = <A4 as FromToNativeWasmType>::to_native(move _111) -> [return: bb62, unwind: bb90];
    }

    bb62: {
        _109 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _110) -> [return: bb63, unwind: bb90];
    }

    bb63: {
        _152 = const false;
        _114 = move _6;
        _113 = <A5 as FromToNativeWasmType>::to_native(move _114) -> [return: bb64, unwind: bb89];
    }

    bb64: {
        _112 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _113) -> [return: bb65, unwind: bb89];
    }

    bb65: {
        _99 = [move _100, move _103, move _106, move _109, move _112];
        _119 = _1;
        _118 = NativeFunc::<(A1, A2, A3, A4, A5), Rets>::vmctx(move _119) -> [return: bb66, unwind: bb88];
    }

    bb66: {
        _117 = (_118.1: *mut std::ffi::c_void);
        _116 = move _117 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _122 = &((*_116).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _124 = &_99;
        _123 = _124 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _121 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _122, move _123) -> [return: bb67, unwind: bb88];
    }

    bb67: {
        _120 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _121) -> [return: bb68, unwind: bb88];
    }

    bb68: {
        _125 = discriminant(_120);
        switchInt(move _125) -> [0: bb69, 1: bb70, otherwise: bb26];
    }

    bb69: {
        _127 = move ((_120 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _115 = move _127;
        _128 = <Rets as WasmTypeList>::empty_array() -> [return: bb72, unwind: bb87];
    }

    bb70: {
        _126 = move ((_120 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _126) -> [return: bb71, unwind: bb88];
    }

    bb71: {
        drop(_99) -> [return: bb86, unwind: bb105];
    }

    bb72: {
        _149 = const true;
        _132 = &mut _128;
        _131 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _132) -> [return: bb73, unwind: bb99];
    }

    bb73: {
        _130 = &raw mut (*_131);
        _129 = move _130 as *mut i128 (PtrToPtr);
        _137 = &_115;
        _136 = <Vec<Value<function::Function>> as Deref>::deref(move _137) -> [return: bb74, unwind: bb99];
    }

    bb74: {
        _135 = core::slice::<impl [Value<function::Function>]>::iter(_136) -> [return: bb75, unwind: bb99];
    }

    bb75: {
        _134 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _135) -> [return: bb76, unwind: bb99];
    }

    bb76: {
        _133 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _134) -> [return: bb77, unwind: bb99];
    }

    bb77: {
        _138 = move _133;
        goto -> bb78;
    }

    bb78: {
        _140 = &mut _138;
        _139 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_140) -> [return: bb79, unwind: bb99];
    }

    bb79: {
        _141 = discriminant(_139);
        switchInt(move _141) -> [0: bb81, 1: bb80, otherwise: bb26];
    }

    bb80: {
        _142 = (((_139 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _143 = (((_139 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _145 = std::ptr::mut_ptr::<impl *mut i128>::add(_129, _142) -> [return: bb82, unwind: bb99];
    }

    bb81: {
        _149 = const false;
        _147 = move _128;
        _146 = <Rets as WasmTypeList>::from_array(move _147) -> [return: bb83, unwind: bb99];
    }

    bb82: {
        _144 = Value::<function::Function>::write_value_to(_143, move _145) -> [return: bb111, unwind: bb99];
    }

    bb83: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _146);
        _149 = const false;
        drop(_115) -> [return: bb84, unwind: bb88];
    }

    bb84: {
        drop(_99) -> [return: bb86, unwind: bb105];
    }

    bb85: {
        _151 = const false;
        goto -> bb86;
    }

    bb86: {
        return;
    }

    bb87 (cleanup): {
        drop(_115) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_99) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_109) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_106) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_103) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_100) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_153) -> [0: bb94, otherwise: bb106];
    }

    bb94 (cleanup): {
        switchInt(_154) -> [0: bb95, otherwise: bb107];
    }

    bb95 (cleanup): {
        switchInt(_155) -> [0: bb96, otherwise: bb108];
    }

    bb96 (cleanup): {
        switchInt(_156) -> [0: bb97, otherwise: bb109];
    }

    bb97 (cleanup): {
        resume;
    }

    bb98 (cleanup): {
        drop(_128) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        switchInt(_149) -> [0: bb87, otherwise: bb98];
    }

    bb100 (cleanup): {
        drop(_87) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        switchInt(_150) -> [0: bb105, otherwise: bb100];
    }

    bb102 (cleanup): {
        drop(_28) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        switchInt(_151) -> [0: bb105, otherwise: bb102];
    }

    bb104 (cleanup): {
        drop(_6) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        switchInt(_152) -> [0: bb93, otherwise: bb104];
    }

    bb106 (cleanup): {
        drop(_5) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_4) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_3) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop(_2) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb110: {
        goto -> bb44;
    }

    bb111: {
        goto -> bb78;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: &&native::NativeFunc<(A1, A2, A3, A4, A5), Rets>;
    let mut _11: &native::NativeFunc<(A1, A2, A3, A4, A5), Rets>;
    let mut _12: &&native::NativeFunc<(A1, A2, A3, A4, A5), Rets>;
    let mut _13: &native::NativeFunc<(A1, A2, A3, A4, A5), Rets>;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _18 = const false;
        _17 = const false;
        _16 = const false;
        _15 = const false;
        _14 = const false;
        _14 = const true;
        _15 = const true;
        _16 = const true;
        _17 = const true;
        _18 = const true;
        _10 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5), Rets>);
        _11 = deref_copy (*_10);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5), Rets>::address(_11) -> [return: bb1, unwind: bb14];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _12 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5), Rets>);
        _13 = deref_copy (*_12);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5), Rets>::vmctx(_13) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _18 = const false;
        _5 = move (_1.1: A1);
        _17 = const false;
        _6 = move (_1.2: A2);
        _16 = const false;
        _7 = move (_1.3: A3);
        _15 = const false;
        _8 = move (_1.4: A4);
        _14 = const false;
        _9 = move (_1.5: A5);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_14) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.5: A5)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_15) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.4: A4)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_16) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.3: A3)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_17) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.2: A2)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop((_1.1: A1)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_18) -> [0: bb11, otherwise: bb13];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _8: bool;
    let mut _9: &native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>;
    let _10: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _11: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _12: &str;
    let mut _14: i128;
    let mut _15: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _16: A1;
    let mut _17: i128;
    let mut _18: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A2;
    let mut _20: i128;
    let mut _21: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A3;
    let mut _23: i128;
    let mut _24: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A4;
    let mut _26: i128;
    let mut _27: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A5;
    let mut _29: i128;
    let mut _30: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A6;
    let mut _34: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _37: &mut [i128];
    let mut _38: bool;
    let mut _39: usize;
    let mut _40: &[i128];
    let mut _41: &[i128; 6];
    let mut _42: usize;
    let mut _43: &[i128];
    let mut _44: &mut [i128];
    let mut _45: &mut [i128; 6];
    let mut _46: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _47: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _48: std::slice::Iter<'_, i128>;
    let mut _49: &[i128];
    let mut _50: &[i128; 6];
    let mut _52: std::option::Option<(usize, &i128)>;
    let mut _53: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _54: isize;
    let mut _57: usize;
    let mut _58: bool;
    let mut _59: &mut [i128];
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _61: std::result::Result<(), wasmer_vm::Trap>;
    let _62: &store::Store;
    let mut _63: wasmer_vm::VMFunctionEnvironment;
    let mut _64: &native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>;
    let mut _65: *const wasmer_vm::VMFunctionBody;
    let mut _66: &native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>;
    let mut _67: *mut u8;
    let mut _68: *mut i128;
    let mut _69: isize;
    let mut _72: &[i128];
    let mut _73: bool;
    let mut _74: bool;
    let mut _76: &[i128];
    let mut _77: &[i128; 6];
    let mut _79: &mut i128;
    let mut _80: &mut [i128];
    let mut _81: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _82: usize;
    let mut _83: usize;
    let mut _84: bool;
    let _85: ();
    let mut _86: Rets;
    let mut _87: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _88: wasmer_vm::VMFunctionKind;
    let mut _89: &native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>;
    let mut _90: isize;
    let _91: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _93: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _94: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _95: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _96: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _97: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>;
    let mut _98: isize;
    let _99: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _100: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _101: Rets;
    let mut _102: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _103: [wasmer_types::Value<externals::function::Function>; 6];
    let mut _104: wasmer_types::Value<externals::function::Function>;
    let mut _105: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _106: A1;
    let mut _107: wasmer_types::Value<externals::function::Function>;
    let mut _108: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _109: A2;
    let mut _110: wasmer_types::Value<externals::function::Function>;
    let mut _111: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _112: A3;
    let mut _113: wasmer_types::Value<externals::function::Function>;
    let mut _114: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _115: A4;
    let mut _116: wasmer_types::Value<externals::function::Function>;
    let mut _117: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _118: A5;
    let mut _119: wasmer_types::Value<externals::function::Function>;
    let mut _120: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _121: A6;
    let mut _124: *mut std::ffi::c_void;
    let mut _125: wasmer_vm::VMFunctionEnvironment;
    let mut _126: &native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _128: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _129: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _130: &[wasmer_types::Value<externals::function::Function>];
    let _131: &[wasmer_types::Value<externals::function::Function>; 6];
    let mut _132: isize;
    let mut _137: *mut [i128];
    let mut _138: &mut [i128];
    let mut _139: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _140: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _141: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _142: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _143: &[wasmer_types::Value<externals::function::Function>];
    let mut _144: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _146: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _147: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _148: isize;
    let _151: ();
    let mut _152: *mut i128;
    let mut _153: Rets;
    let mut _154: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _155: &i128;
    let mut _156: bool;
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: bool;
    let mut _161: bool;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: bool;
    scope 1 {
        debug trampoline => _10;
        let mut _13: [i128; 6];
        scope 2 {
            debug params_list => _13;
            let mut _32: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _32;
                let _33: &mut [i128];
                scope 4 {
                    debug rets_list => _33;
                    let _35: bool;
                    scope 5 {
                        debug using_rets_array => _35;
                        let _36: &mut [i128];
                        let mut _51: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _36;
                            let _70: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _71: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _70;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _71;
                                let _75: *const i128;
                                scope 15 {
                                    debug src_pointer => _75;
                                    let _78: *mut i128;
                                    scope 16 {
                                        debug rets_list => _78;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _51;
                            let _55: usize;
                            let _56: i128;
                            scope 8 {
                                debug i => _55;
                                debug arg => _56;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _91;
    }
    scope 19 {
        debug residual => _99;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _100;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _103;
        let _122: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _122;
            let mut _135: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _135;
                let _136: *mut i128;
                scope 32 {
                    debug mut_rets => _136;
                    let mut _145: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _145;
                        let _149: usize;
                        let _150: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _149;
                            debug ret => _150;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _123: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _123;
                let _133: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _134: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _133;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _134;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _164 = const false;
        _163 = const false;
        _162 = const false;
        _161 = const false;
        _160 = const false;
        _159 = const false;
        _158 = const false;
        _157 = const false;
        _156 = const false;
        _164 = const true;
        _163 = const true;
        _162 = const true;
        _161 = const true;
        _160 = const true;
        _159 = const true;
        _9 = _1;
        _8 = NativeFunc::<(A1, A2, A3, A4, A5, A6), Rets>::is_host(move _9) -> [return: bb1, unwind: bb111];
    }

    bb1: {
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _89 = _1;
        _88 = NativeFunc::<(A1, A2, A3, A4, A5, A6), Rets>::arg_kind(move _89) -> [return: bb48, unwind: bb111];
    }

    bb3: {
        _11 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _12 = const "Call trampoline not found in wasm function";
        _10 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _11, _12) -> [return: bb4, unwind: bb111];
    }

    bb4: {
        _164 = const false;
        _16 = move _2;
        _15 = <A1 as FromToNativeWasmType>::to_native(move _16) -> [return: bb5, unwind: bb111];
    }

    bb5: {
        _14 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _15) -> [return: bb6, unwind: bb111];
    }

    bb6: {
        _163 = const false;
        _19 = move _3;
        _18 = <A2 as FromToNativeWasmType>::to_native(move _19) -> [return: bb7, unwind: bb111];
    }

    bb7: {
        _17 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _18) -> [return: bb8, unwind: bb111];
    }

    bb8: {
        _162 = const false;
        _22 = move _4;
        _21 = <A3 as FromToNativeWasmType>::to_native(move _22) -> [return: bb9, unwind: bb111];
    }

    bb9: {
        _20 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _21) -> [return: bb10, unwind: bb111];
    }

    bb10: {
        _161 = const false;
        _25 = move _5;
        _24 = <A4 as FromToNativeWasmType>::to_native(move _25) -> [return: bb11, unwind: bb111];
    }

    bb11: {
        _23 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _24) -> [return: bb12, unwind: bb111];
    }

    bb12: {
        _160 = const false;
        _28 = move _6;
        _27 = <A5 as FromToNativeWasmType>::to_native(move _28) -> [return: bb13, unwind: bb111];
    }

    bb13: {
        _26 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _27) -> [return: bb14, unwind: bb111];
    }

    bb14: {
        _159 = const false;
        _31 = move _7;
        _30 = <A6 as FromToNativeWasmType>::to_native(move _31) -> [return: bb15, unwind: bb111];
    }

    bb15: {
        _29 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _30) -> [return: bb16, unwind: bb111];
    }

    bb16: {
        _13 = [move _14, move _17, move _20, move _23, move _26, move _29];
        _32 = <Rets as WasmTypeList>::empty_array() -> [return: bb17, unwind: bb111];
    }

    bb17: {
        _158 = const true;
        _34 = &mut _32;
        _33 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _34) -> [return: bb18, unwind: bb109];
    }

    bb18: {
        _41 = &_13;
        _40 = move _41 as &[i128] (PointerCoercion(Unsize));
        _39 = Len((*_40));
        _43 = &(*_33);
        _42 = Len((*_43));
        _38 = Gt(move _39, move _42);
        switchInt(move _38) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _35 = const false;
        _45 = &mut _13;
        _44 = <[i128; 6] as AsMut<[i128]>>::as_mut(move _45) -> [return: bb20, unwind: bb109];
    }

    bb20: {
        _37 = _44;
        goto -> bb32;
    }

    bb21: {
        _35 = const true;
        _50 = &_13;
        _49 = move _50 as &[i128] (PointerCoercion(Unsize));
        _48 = core::slice::<impl [i128]>::iter(move _49) -> [return: bb22, unwind: bb109];
    }

    bb22: {
        _47 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _48) -> [return: bb23, unwind: bb109];
    }

    bb23: {
        _46 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _47) -> [return: bb24, unwind: bb109];
    }

    bb24: {
        _51 = move _46;
        goto -> bb25;
    }

    bb25: {
        _53 = &mut _51;
        _52 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_53) -> [return: bb26, unwind: bb109];
    }

    bb26: {
        _54 = discriminant(_52);
        switchInt(move _54) -> [0: bb29, 1: bb27, otherwise: bb28];
    }

    bb27: {
        _155 = deref_copy (((_52 as Some).0: (usize, &i128)).1: &i128);
        _56 = (*_155);
        _55 = (((_52 as Some).0: (usize, &i128)).0: usize);
        _57 = Len((*_33));
        _58 = Lt(_55, _57);
        assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _55) -> [success: bb30, unwind: bb109];
    }

    bb28: {
        unreachable;
    }

    bb29: {
        _59 = <[i128] as AsMut<[i128]>>::as_mut(_33) -> [return: bb31, unwind: bb109];
    }

    bb30: {
        (*_33)[_55] = _56;
        goto -> bb25;
    }

    bb31: {
        _37 = _59;
        goto -> bb32;
    }

    bb32: {
        _36 = _37;
        _62 = &((*_1).0: store::Store);
        _64 = _1;
        _63 = NativeFunc::<(A1, A2, A3, A4, A5, A6), Rets>::vmctx(move _64) -> [return: bb33, unwind: bb109];
    }

    bb33: {
        _66 = _1;
        _65 = NativeFunc::<(A1, A2, A3, A4, A5, A6), Rets>::address(move _66) -> [return: bb34, unwind: bb109];
    }

    bb34: {
        _68 = core::slice::<impl [i128]>::as_mut_ptr(_36) -> [return: bb35, unwind: bb109];
    }

    bb35: {
        _67 = move _68 as *mut u8 (PtrToPtr);
        _61 = wasmer_call_trampoline::<Store>(_62, move _63, _10, move _65, move _67) -> [return: bb36, unwind: bb109];
    }

    bb36: {
        _60 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _61) -> [return: bb37, unwind: bb109];
    }

    bb37: {
        _69 = discriminant(_60);
        switchInt(move _69) -> [0: bb38, 1: bb39, otherwise: bb28];
    }

    bb38: {
        _72 = &(*_33);
        _71 = Len((*_72));
        _73 = _35;
        switchInt(move _73) -> [0: bb41, otherwise: bb46];
    }

    bb39: {
        _70 = move ((_60 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _70) -> [return: bb40, unwind: bb109];
    }

    bb40: {
        drop(_32) -> [return: bb89, unwind: bb111];
    }

    bb41: {
        _74 = Gt(_71, const 0_usize);
        switchInt(move _74) -> [0: bb46, otherwise: bb42];
    }

    bb42: {
        _77 = &_13;
        _76 = move _77 as &[i128] (PointerCoercion(Unsize));
        _75 = core::slice::<impl [i128]>::as_ptr(move _76) -> [return: bb43, unwind: bb109];
    }

    bb43: {
        _81 = &mut _32;
        _80 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _81) -> [return: bb44, unwind: bb109];
    }

    bb44: {
        _82 = const 0_usize;
        _83 = Len((*_80));
        _84 = Lt(_82, _83);
        assert(move _84, "index out of bounds: the length is {} but the index is {}", move _83, _82) -> [success: bb45, unwind: bb109];
    }

    bb45: {
        _79 = &mut (*_80)[_82];
        _78 = &raw mut (*_79);
        _85 = copy_nonoverlapping::<i128>(_75, _78, _71) -> [return: bb117, unwind: bb109];
    }

    bb46: {
        _158 = const false;
        _87 = move _32;
        _86 = <Rets as WasmTypeList>::from_array(move _87) -> [return: bb47, unwind: bb109];
    }

    bb47: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _86);
        _158 = const false;
        goto -> bb90;
    }

    bb48: {
        _90 = discriminant(_88);
        switchInt(move _90) -> [0: bb50, 1: bb49, otherwise: bb28];
    }

    bb49: {
        _164 = const false;
        _106 = move _2;
        _105 = <A1 as FromToNativeWasmType>::to_native(move _106) -> [return: bb58, unwind: bb111];
    }

    bb50: {
        _97 = &_1;
        _164 = const false;
        _163 = const false;
        _162 = const false;
        _161 = const false;
        _160 = const false;
        _159 = const false;
        _96 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _97, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7 };
        _95 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _96);
        _94 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _95) -> [return: bb51, unwind: bb111];
    }

    bb51: {
        _93 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _94, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb52, unwind: bb111];
    }

    bb52: {
        _92 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _93) -> [return: bb53, unwind: bb111];
    }

    bb53: {
        _98 = discriminant(_92);
        switchInt(move _98) -> [0: bb54, 1: bb55, otherwise: bb28];
    }

    bb54: {
        _100 = move ((_92 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _157 = const true;
        _91 = move _100;
        _157 = const false;
        _102 = move _91;
        _101 = <Rets as WasmTypeList>::from_c_struct(move _102) -> [return: bb57, unwind: bb107];
    }

    bb55: {
        _99 = move ((_92 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _99) -> [return: bb56, unwind: bb111];
    }

    bb56: {
        _157 = const false;
        goto -> bb90;
    }

    bb57: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _101);
        _157 = const false;
        goto -> bb90;
    }

    bb58: {
        _104 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _105) -> [return: bb59, unwind: bb111];
    }

    bb59: {
        _163 = const false;
        _109 = move _3;
        _108 = <A2 as FromToNativeWasmType>::to_native(move _109) -> [return: bb60, unwind: bb97];
    }

    bb60: {
        _107 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _108) -> [return: bb61, unwind: bb97];
    }

    bb61: {
        _162 = const false;
        _112 = move _4;
        _111 = <A3 as FromToNativeWasmType>::to_native(move _112) -> [return: bb62, unwind: bb96];
    }

    bb62: {
        _110 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _111) -> [return: bb63, unwind: bb96];
    }

    bb63: {
        _161 = const false;
        _115 = move _5;
        _114 = <A4 as FromToNativeWasmType>::to_native(move _115) -> [return: bb64, unwind: bb95];
    }

    bb64: {
        _113 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _114) -> [return: bb65, unwind: bb95];
    }

    bb65: {
        _160 = const false;
        _118 = move _6;
        _117 = <A5 as FromToNativeWasmType>::to_native(move _118) -> [return: bb66, unwind: bb94];
    }

    bb66: {
        _116 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _117) -> [return: bb67, unwind: bb94];
    }

    bb67: {
        _159 = const false;
        _121 = move _7;
        _120 = <A6 as FromToNativeWasmType>::to_native(move _121) -> [return: bb68, unwind: bb93];
    }

    bb68: {
        _119 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _120) -> [return: bb69, unwind: bb93];
    }

    bb69: {
        _103 = [move _104, move _107, move _110, move _113, move _116, move _119];
        _126 = _1;
        _125 = NativeFunc::<(A1, A2, A3, A4, A5, A6), Rets>::vmctx(move _126) -> [return: bb70, unwind: bb92];
    }

    bb70: {
        _124 = (_125.1: *mut std::ffi::c_void);
        _123 = move _124 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _129 = &((*_123).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _131 = &_103;
        _130 = _131 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _128 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _129, move _130) -> [return: bb71, unwind: bb92];
    }

    bb71: {
        _127 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _128) -> [return: bb72, unwind: bb92];
    }

    bb72: {
        _132 = discriminant(_127);
        switchInt(move _132) -> [0: bb73, 1: bb74, otherwise: bb28];
    }

    bb73: {
        _134 = move ((_127 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _122 = move _134;
        _135 = <Rets as WasmTypeList>::empty_array() -> [return: bb76, unwind: bb91];
    }

    bb74: {
        _133 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _133) -> [return: bb75, unwind: bb92];
    }

    bb75: {
        drop(_103) -> [return: bb90, unwind: bb111];
    }

    bb76: {
        _156 = const true;
        _139 = &mut _135;
        _138 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _139) -> [return: bb77, unwind: bb105];
    }

    bb77: {
        _137 = &raw mut (*_138);
        _136 = move _137 as *mut i128 (PtrToPtr);
        _144 = &_122;
        _143 = <Vec<Value<function::Function>> as Deref>::deref(move _144) -> [return: bb78, unwind: bb105];
    }

    bb78: {
        _142 = core::slice::<impl [Value<function::Function>]>::iter(_143) -> [return: bb79, unwind: bb105];
    }

    bb79: {
        _141 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _142) -> [return: bb80, unwind: bb105];
    }

    bb80: {
        _140 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _141) -> [return: bb81, unwind: bb105];
    }

    bb81: {
        _145 = move _140;
        goto -> bb82;
    }

    bb82: {
        _147 = &mut _145;
        _146 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_147) -> [return: bb83, unwind: bb105];
    }

    bb83: {
        _148 = discriminant(_146);
        switchInt(move _148) -> [0: bb85, 1: bb84, otherwise: bb28];
    }

    bb84: {
        _149 = (((_146 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _150 = (((_146 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _152 = std::ptr::mut_ptr::<impl *mut i128>::add(_136, _149) -> [return: bb86, unwind: bb105];
    }

    bb85: {
        _156 = const false;
        _154 = move _135;
        _153 = <Rets as WasmTypeList>::from_array(move _154) -> [return: bb87, unwind: bb105];
    }

    bb86: {
        _151 = Value::<function::Function>::write_value_to(_150, move _152) -> [return: bb118, unwind: bb105];
    }

    bb87: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _153);
        _156 = const false;
        drop(_122) -> [return: bb88, unwind: bb92];
    }

    bb88: {
        drop(_103) -> [return: bb90, unwind: bb111];
    }

    bb89: {
        _158 = const false;
        goto -> bb90;
    }

    bb90: {
        return;
    }

    bb91 (cleanup): {
        drop(_122) -> [return: bb92, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_103) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_116) -> [return: bb94, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_113) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        drop(_110) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_107) -> [return: bb97, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_104) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        switchInt(_160) -> [0: bb99, otherwise: bb112];
    }

    bb99 (cleanup): {
        switchInt(_161) -> [0: bb100, otherwise: bb113];
    }

    bb100 (cleanup): {
        switchInt(_162) -> [0: bb101, otherwise: bb114];
    }

    bb101 (cleanup): {
        switchInt(_163) -> [0: bb102, otherwise: bb115];
    }

    bb102 (cleanup): {
        switchInt(_164) -> [0: bb103, otherwise: bb116];
    }

    bb103 (cleanup): {
        resume;
    }

    bb104 (cleanup): {
        drop(_135) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        switchInt(_156) -> [0: bb91, otherwise: bb104];
    }

    bb106 (cleanup): {
        drop(_91) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        switchInt(_157) -> [0: bb111, otherwise: bb106];
    }

    bb108 (cleanup): {
        drop(_32) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        switchInt(_158) -> [0: bb111, otherwise: bb108];
    }

    bb110 (cleanup): {
        drop(_7) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        switchInt(_159) -> [0: bb98, otherwise: bb110];
    }

    bb112 (cleanup): {
        drop(_6) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_5) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_4) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_3) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop(_2) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb117: {
        goto -> bb46;
    }

    bb118: {
        goto -> bb82;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>;
    let mut _12: &native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>;
    let mut _13: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>;
    let mut _14: &native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _20 = const false;
        _19 = const false;
        _18 = const false;
        _17 = const false;
        _16 = const false;
        _15 = const false;
        _15 = const true;
        _16 = const true;
        _17 = const true;
        _18 = const true;
        _19 = const true;
        _20 = const true;
        _11 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>);
        _12 = deref_copy (*_11);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6), Rets>::address(_12) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _13 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>);
        _14 = deref_copy (*_13);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6), Rets>::vmctx(_14) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _20 = const false;
        _5 = move (_1.1: A1);
        _19 = const false;
        _6 = move (_1.2: A2);
        _18 = const false;
        _7 = move (_1.3: A3);
        _17 = const false;
        _8 = move (_1.4: A4);
        _16 = const false;
        _9 = move (_1.5: A5);
        _15 = const false;
        _10 = move (_1.6: A6);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_15) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.6: A6)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_16) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.5: A5)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_17) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.4: A4)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_18) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.3: A3)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_19) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.2: A2)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop((_1.1: A1)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_20) -> [0: bb13, otherwise: bb15];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _9: bool;
    let mut _10: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>;
    let _11: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _12: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _13: &str;
    let mut _15: i128;
    let mut _16: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _17: A1;
    let mut _18: i128;
    let mut _19: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A2;
    let mut _21: i128;
    let mut _22: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A3;
    let mut _24: i128;
    let mut _25: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A4;
    let mut _27: i128;
    let mut _28: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A5;
    let mut _30: i128;
    let mut _31: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A6;
    let mut _33: i128;
    let mut _34: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A7;
    let mut _38: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _41: &mut [i128];
    let mut _42: bool;
    let mut _43: usize;
    let mut _44: &[i128];
    let mut _45: &[i128; 7];
    let mut _46: usize;
    let mut _47: &[i128];
    let mut _48: &mut [i128];
    let mut _49: &mut [i128; 7];
    let mut _50: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _51: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _52: std::slice::Iter<'_, i128>;
    let mut _53: &[i128];
    let mut _54: &[i128; 7];
    let mut _56: std::option::Option<(usize, &i128)>;
    let mut _57: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _58: isize;
    let mut _61: usize;
    let mut _62: bool;
    let mut _63: &mut [i128];
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _65: std::result::Result<(), wasmer_vm::Trap>;
    let _66: &store::Store;
    let mut _67: wasmer_vm::VMFunctionEnvironment;
    let mut _68: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>;
    let mut _69: *const wasmer_vm::VMFunctionBody;
    let mut _70: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>;
    let mut _71: *mut u8;
    let mut _72: *mut i128;
    let mut _73: isize;
    let mut _76: &[i128];
    let mut _77: bool;
    let mut _78: bool;
    let mut _80: &[i128];
    let mut _81: &[i128; 7];
    let mut _83: &mut i128;
    let mut _84: &mut [i128];
    let mut _85: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _86: usize;
    let mut _87: usize;
    let mut _88: bool;
    let _89: ();
    let mut _90: Rets;
    let mut _91: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _92: wasmer_vm::VMFunctionKind;
    let mut _93: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>;
    let mut _94: isize;
    let _95: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _97: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _98: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _99: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _100: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _101: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>;
    let mut _102: isize;
    let _103: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _104: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _105: Rets;
    let mut _106: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _107: [wasmer_types::Value<externals::function::Function>; 7];
    let mut _108: wasmer_types::Value<externals::function::Function>;
    let mut _109: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _110: A1;
    let mut _111: wasmer_types::Value<externals::function::Function>;
    let mut _112: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _113: A2;
    let mut _114: wasmer_types::Value<externals::function::Function>;
    let mut _115: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _116: A3;
    let mut _117: wasmer_types::Value<externals::function::Function>;
    let mut _118: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _119: A4;
    let mut _120: wasmer_types::Value<externals::function::Function>;
    let mut _121: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _122: A5;
    let mut _123: wasmer_types::Value<externals::function::Function>;
    let mut _124: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _125: A6;
    let mut _126: wasmer_types::Value<externals::function::Function>;
    let mut _127: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _128: A7;
    let mut _131: *mut std::ffi::c_void;
    let mut _132: wasmer_vm::VMFunctionEnvironment;
    let mut _133: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>;
    let mut _134: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _135: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _136: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _137: &[wasmer_types::Value<externals::function::Function>];
    let _138: &[wasmer_types::Value<externals::function::Function>; 7];
    let mut _139: isize;
    let mut _144: *mut [i128];
    let mut _145: &mut [i128];
    let mut _146: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _147: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _148: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _149: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _150: &[wasmer_types::Value<externals::function::Function>];
    let mut _151: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _153: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _154: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _155: isize;
    let _158: ();
    let mut _159: *mut i128;
    let mut _160: Rets;
    let mut _161: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _162: &i128;
    let mut _163: bool;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: bool;
    let mut _168: bool;
    let mut _169: bool;
    let mut _170: bool;
    let mut _171: bool;
    let mut _172: bool;
    scope 1 {
        debug trampoline => _11;
        let mut _14: [i128; 7];
        scope 2 {
            debug params_list => _14;
            let mut _36: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _36;
                let _37: &mut [i128];
                scope 4 {
                    debug rets_list => _37;
                    let _39: bool;
                    scope 5 {
                        debug using_rets_array => _39;
                        let _40: &mut [i128];
                        let mut _55: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _40;
                            let _74: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _75: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _74;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _75;
                                let _79: *const i128;
                                scope 15 {
                                    debug src_pointer => _79;
                                    let _82: *mut i128;
                                    scope 16 {
                                        debug rets_list => _82;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _55;
                            let _59: usize;
                            let _60: i128;
                            scope 8 {
                                debug i => _59;
                                debug arg => _60;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _95;
    }
    scope 19 {
        debug residual => _103;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _104;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _107;
        let _129: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _129;
            let mut _142: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _142;
                let _143: *mut i128;
                scope 32 {
                    debug mut_rets => _143;
                    let mut _152: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _152;
                        let _156: usize;
                        let _157: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _156;
                            debug ret => _157;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _130: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _130;
                let _140: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _141: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _140;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _141;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _172 = const false;
        _171 = const false;
        _170 = const false;
        _169 = const false;
        _168 = const false;
        _167 = const false;
        _166 = const false;
        _165 = const false;
        _164 = const false;
        _163 = const false;
        _172 = const true;
        _171 = const true;
        _170 = const true;
        _169 = const true;
        _168 = const true;
        _167 = const true;
        _166 = const true;
        _10 = _1;
        _9 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7), Rets>::is_host(move _10) -> [return: bb1, unwind: bb117];
    }

    bb1: {
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _93 = _1;
        _92 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7), Rets>::arg_kind(move _93) -> [return: bb50, unwind: bb117];
    }

    bb3: {
        _12 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _13 = const "Call trampoline not found in wasm function";
        _11 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _12, _13) -> [return: bb4, unwind: bb117];
    }

    bb4: {
        _172 = const false;
        _17 = move _2;
        _16 = <A1 as FromToNativeWasmType>::to_native(move _17) -> [return: bb5, unwind: bb117];
    }

    bb5: {
        _15 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _16) -> [return: bb6, unwind: bb117];
    }

    bb6: {
        _171 = const false;
        _20 = move _3;
        _19 = <A2 as FromToNativeWasmType>::to_native(move _20) -> [return: bb7, unwind: bb117];
    }

    bb7: {
        _18 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _19) -> [return: bb8, unwind: bb117];
    }

    bb8: {
        _170 = const false;
        _23 = move _4;
        _22 = <A3 as FromToNativeWasmType>::to_native(move _23) -> [return: bb9, unwind: bb117];
    }

    bb9: {
        _21 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _22) -> [return: bb10, unwind: bb117];
    }

    bb10: {
        _169 = const false;
        _26 = move _5;
        _25 = <A4 as FromToNativeWasmType>::to_native(move _26) -> [return: bb11, unwind: bb117];
    }

    bb11: {
        _24 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _25) -> [return: bb12, unwind: bb117];
    }

    bb12: {
        _168 = const false;
        _29 = move _6;
        _28 = <A5 as FromToNativeWasmType>::to_native(move _29) -> [return: bb13, unwind: bb117];
    }

    bb13: {
        _27 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _28) -> [return: bb14, unwind: bb117];
    }

    bb14: {
        _167 = const false;
        _32 = move _7;
        _31 = <A6 as FromToNativeWasmType>::to_native(move _32) -> [return: bb15, unwind: bb117];
    }

    bb15: {
        _30 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _31) -> [return: bb16, unwind: bb117];
    }

    bb16: {
        _166 = const false;
        _35 = move _8;
        _34 = <A7 as FromToNativeWasmType>::to_native(move _35) -> [return: bb17, unwind: bb117];
    }

    bb17: {
        _33 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _34) -> [return: bb18, unwind: bb117];
    }

    bb18: {
        _14 = [move _15, move _18, move _21, move _24, move _27, move _30, move _33];
        _36 = <Rets as WasmTypeList>::empty_array() -> [return: bb19, unwind: bb117];
    }

    bb19: {
        _165 = const true;
        _38 = &mut _36;
        _37 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _38) -> [return: bb20, unwind: bb115];
    }

    bb20: {
        _45 = &_14;
        _44 = move _45 as &[i128] (PointerCoercion(Unsize));
        _43 = Len((*_44));
        _47 = &(*_37);
        _46 = Len((*_47));
        _42 = Gt(move _43, move _46);
        switchInt(move _42) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _39 = const false;
        _49 = &mut _14;
        _48 = <[i128; 7] as AsMut<[i128]>>::as_mut(move _49) -> [return: bb22, unwind: bb115];
    }

    bb22: {
        _41 = _48;
        goto -> bb34;
    }

    bb23: {
        _39 = const true;
        _54 = &_14;
        _53 = move _54 as &[i128] (PointerCoercion(Unsize));
        _52 = core::slice::<impl [i128]>::iter(move _53) -> [return: bb24, unwind: bb115];
    }

    bb24: {
        _51 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _52) -> [return: bb25, unwind: bb115];
    }

    bb25: {
        _50 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _51) -> [return: bb26, unwind: bb115];
    }

    bb26: {
        _55 = move _50;
        goto -> bb27;
    }

    bb27: {
        _57 = &mut _55;
        _56 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_57) -> [return: bb28, unwind: bb115];
    }

    bb28: {
        _58 = discriminant(_56);
        switchInt(move _58) -> [0: bb31, 1: bb29, otherwise: bb30];
    }

    bb29: {
        _162 = deref_copy (((_56 as Some).0: (usize, &i128)).1: &i128);
        _60 = (*_162);
        _59 = (((_56 as Some).0: (usize, &i128)).0: usize);
        _61 = Len((*_37));
        _62 = Lt(_59, _61);
        assert(move _62, "index out of bounds: the length is {} but the index is {}", move _61, _59) -> [success: bb32, unwind: bb115];
    }

    bb30: {
        unreachable;
    }

    bb31: {
        _63 = <[i128] as AsMut<[i128]>>::as_mut(_37) -> [return: bb33, unwind: bb115];
    }

    bb32: {
        (*_37)[_59] = _60;
        goto -> bb27;
    }

    bb33: {
        _41 = _63;
        goto -> bb34;
    }

    bb34: {
        _40 = _41;
        _66 = &((*_1).0: store::Store);
        _68 = _1;
        _67 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7), Rets>::vmctx(move _68) -> [return: bb35, unwind: bb115];
    }

    bb35: {
        _70 = _1;
        _69 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7), Rets>::address(move _70) -> [return: bb36, unwind: bb115];
    }

    bb36: {
        _72 = core::slice::<impl [i128]>::as_mut_ptr(_40) -> [return: bb37, unwind: bb115];
    }

    bb37: {
        _71 = move _72 as *mut u8 (PtrToPtr);
        _65 = wasmer_call_trampoline::<Store>(_66, move _67, _11, move _69, move _71) -> [return: bb38, unwind: bb115];
    }

    bb38: {
        _64 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _65) -> [return: bb39, unwind: bb115];
    }

    bb39: {
        _73 = discriminant(_64);
        switchInt(move _73) -> [0: bb40, 1: bb41, otherwise: bb30];
    }

    bb40: {
        _76 = &(*_37);
        _75 = Len((*_76));
        _77 = _39;
        switchInt(move _77) -> [0: bb43, otherwise: bb48];
    }

    bb41: {
        _74 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _74) -> [return: bb42, unwind: bb115];
    }

    bb42: {
        drop(_36) -> [return: bb93, unwind: bb117];
    }

    bb43: {
        _78 = Gt(_75, const 0_usize);
        switchInt(move _78) -> [0: bb48, otherwise: bb44];
    }

    bb44: {
        _81 = &_14;
        _80 = move _81 as &[i128] (PointerCoercion(Unsize));
        _79 = core::slice::<impl [i128]>::as_ptr(move _80) -> [return: bb45, unwind: bb115];
    }

    bb45: {
        _85 = &mut _36;
        _84 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _85) -> [return: bb46, unwind: bb115];
    }

    bb46: {
        _86 = const 0_usize;
        _87 = Len((*_84));
        _88 = Lt(_86, _87);
        assert(move _88, "index out of bounds: the length is {} but the index is {}", move _87, _86) -> [success: bb47, unwind: bb115];
    }

    bb47: {
        _83 = &mut (*_84)[_86];
        _82 = &raw mut (*_83);
        _89 = copy_nonoverlapping::<i128>(_79, _82, _75) -> [return: bb124, unwind: bb115];
    }

    bb48: {
        _165 = const false;
        _91 = move _36;
        _90 = <Rets as WasmTypeList>::from_array(move _91) -> [return: bb49, unwind: bb115];
    }

    bb49: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _90);
        _165 = const false;
        goto -> bb94;
    }

    bb50: {
        _94 = discriminant(_92);
        switchInt(move _94) -> [0: bb52, 1: bb51, otherwise: bb30];
    }

    bb51: {
        _172 = const false;
        _110 = move _2;
        _109 = <A1 as FromToNativeWasmType>::to_native(move _110) -> [return: bb60, unwind: bb117];
    }

    bb52: {
        _101 = &_1;
        _172 = const false;
        _171 = const false;
        _170 = const false;
        _169 = const false;
        _168 = const false;
        _167 = const false;
        _166 = const false;
        _100 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _101, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8 };
        _99 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _100);
        _98 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _99) -> [return: bb53, unwind: bb117];
    }

    bb53: {
        _97 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _98, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb54, unwind: bb117];
    }

    bb54: {
        _96 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _97) -> [return: bb55, unwind: bb117];
    }

    bb55: {
        _102 = discriminant(_96);
        switchInt(move _102) -> [0: bb56, 1: bb57, otherwise: bb30];
    }

    bb56: {
        _104 = move ((_96 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _164 = const true;
        _95 = move _104;
        _164 = const false;
        _106 = move _95;
        _105 = <Rets as WasmTypeList>::from_c_struct(move _106) -> [return: bb59, unwind: bb113];
    }

    bb57: {
        _103 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _103) -> [return: bb58, unwind: bb117];
    }

    bb58: {
        _164 = const false;
        goto -> bb94;
    }

    bb59: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _105);
        _164 = const false;
        goto -> bb94;
    }

    bb60: {
        _108 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _109) -> [return: bb61, unwind: bb117];
    }

    bb61: {
        _171 = const false;
        _113 = move _3;
        _112 = <A2 as FromToNativeWasmType>::to_native(move _113) -> [return: bb62, unwind: bb102];
    }

    bb62: {
        _111 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _112) -> [return: bb63, unwind: bb102];
    }

    bb63: {
        _170 = const false;
        _116 = move _4;
        _115 = <A3 as FromToNativeWasmType>::to_native(move _116) -> [return: bb64, unwind: bb101];
    }

    bb64: {
        _114 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _115) -> [return: bb65, unwind: bb101];
    }

    bb65: {
        _169 = const false;
        _119 = move _5;
        _118 = <A4 as FromToNativeWasmType>::to_native(move _119) -> [return: bb66, unwind: bb100];
    }

    bb66: {
        _117 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _118) -> [return: bb67, unwind: bb100];
    }

    bb67: {
        _168 = const false;
        _122 = move _6;
        _121 = <A5 as FromToNativeWasmType>::to_native(move _122) -> [return: bb68, unwind: bb99];
    }

    bb68: {
        _120 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _121) -> [return: bb69, unwind: bb99];
    }

    bb69: {
        _167 = const false;
        _125 = move _7;
        _124 = <A6 as FromToNativeWasmType>::to_native(move _125) -> [return: bb70, unwind: bb98];
    }

    bb70: {
        _123 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _124) -> [return: bb71, unwind: bb98];
    }

    bb71: {
        _166 = const false;
        _128 = move _8;
        _127 = <A7 as FromToNativeWasmType>::to_native(move _128) -> [return: bb72, unwind: bb97];
    }

    bb72: {
        _126 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _127) -> [return: bb73, unwind: bb97];
    }

    bb73: {
        _107 = [move _108, move _111, move _114, move _117, move _120, move _123, move _126];
        _133 = _1;
        _132 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7), Rets>::vmctx(move _133) -> [return: bb74, unwind: bb96];
    }

    bb74: {
        _131 = (_132.1: *mut std::ffi::c_void);
        _130 = move _131 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _136 = &((*_130).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _138 = &_107;
        _137 = _138 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _135 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _136, move _137) -> [return: bb75, unwind: bb96];
    }

    bb75: {
        _134 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _135) -> [return: bb76, unwind: bb96];
    }

    bb76: {
        _139 = discriminant(_134);
        switchInt(move _139) -> [0: bb77, 1: bb78, otherwise: bb30];
    }

    bb77: {
        _141 = move ((_134 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _129 = move _141;
        _142 = <Rets as WasmTypeList>::empty_array() -> [return: bb80, unwind: bb95];
    }

    bb78: {
        _140 = move ((_134 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _140) -> [return: bb79, unwind: bb96];
    }

    bb79: {
        drop(_107) -> [return: bb94, unwind: bb117];
    }

    bb80: {
        _163 = const true;
        _146 = &mut _142;
        _145 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _146) -> [return: bb81, unwind: bb111];
    }

    bb81: {
        _144 = &raw mut (*_145);
        _143 = move _144 as *mut i128 (PtrToPtr);
        _151 = &_129;
        _150 = <Vec<Value<function::Function>> as Deref>::deref(move _151) -> [return: bb82, unwind: bb111];
    }

    bb82: {
        _149 = core::slice::<impl [Value<function::Function>]>::iter(_150) -> [return: bb83, unwind: bb111];
    }

    bb83: {
        _148 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _149) -> [return: bb84, unwind: bb111];
    }

    bb84: {
        _147 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _148) -> [return: bb85, unwind: bb111];
    }

    bb85: {
        _152 = move _147;
        goto -> bb86;
    }

    bb86: {
        _154 = &mut _152;
        _153 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_154) -> [return: bb87, unwind: bb111];
    }

    bb87: {
        _155 = discriminant(_153);
        switchInt(move _155) -> [0: bb89, 1: bb88, otherwise: bb30];
    }

    bb88: {
        _156 = (((_153 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _157 = (((_153 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _159 = std::ptr::mut_ptr::<impl *mut i128>::add(_143, _156) -> [return: bb90, unwind: bb111];
    }

    bb89: {
        _163 = const false;
        _161 = move _142;
        _160 = <Rets as WasmTypeList>::from_array(move _161) -> [return: bb91, unwind: bb111];
    }

    bb90: {
        _158 = Value::<function::Function>::write_value_to(_157, move _159) -> [return: bb125, unwind: bb111];
    }

    bb91: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _160);
        _163 = const false;
        drop(_129) -> [return: bb92, unwind: bb96];
    }

    bb92: {
        drop(_107) -> [return: bb94, unwind: bb117];
    }

    bb93: {
        _165 = const false;
        goto -> bb94;
    }

    bb94: {
        return;
    }

    bb95 (cleanup): {
        drop(_129) -> [return: bb96, unwind terminate(cleanup)];
    }

    bb96 (cleanup): {
        drop(_107) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb97 (cleanup): {
        drop(_123) -> [return: bb98, unwind terminate(cleanup)];
    }

    bb98 (cleanup): {
        drop(_120) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_117) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_114) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_111) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_108) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        switchInt(_167) -> [0: bb104, otherwise: bb118];
    }

    bb104 (cleanup): {
        switchInt(_168) -> [0: bb105, otherwise: bb119];
    }

    bb105 (cleanup): {
        switchInt(_169) -> [0: bb106, otherwise: bb120];
    }

    bb106 (cleanup): {
        switchInt(_170) -> [0: bb107, otherwise: bb121];
    }

    bb107 (cleanup): {
        switchInt(_171) -> [0: bb108, otherwise: bb122];
    }

    bb108 (cleanup): {
        switchInt(_172) -> [0: bb109, otherwise: bb123];
    }

    bb109 (cleanup): {
        resume;
    }

    bb110 (cleanup): {
        drop(_142) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        switchInt(_163) -> [0: bb95, otherwise: bb110];
    }

    bb112 (cleanup): {
        drop(_95) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        switchInt(_164) -> [0: bb117, otherwise: bb112];
    }

    bb114 (cleanup): {
        drop(_36) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        switchInt(_165) -> [0: bb117, otherwise: bb114];
    }

    bb116 (cleanup): {
        drop(_8) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        switchInt(_166) -> [0: bb103, otherwise: bb116];
    }

    bb118 (cleanup): {
        drop(_7) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        drop(_6) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_5) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_4) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        drop(_3) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop(_2) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb124: {
        goto -> bb48;
    }

    bb125: {
        goto -> bb86;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>;
    let mut _13: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>;
    let mut _14: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>;
    let mut _15: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _19 = const false;
        _18 = const false;
        _17 = const false;
        _16 = const false;
        _16 = const true;
        _17 = const true;
        _18 = const true;
        _19 = const true;
        _20 = const true;
        _21 = const true;
        _22 = const true;
        _12 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>);
        _13 = deref_copy (*_12);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7), Rets>::address(_13) -> [return: bb1, unwind: bb18];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _14 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>);
        _15 = deref_copy (*_14);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7), Rets>::vmctx(_15) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        _22 = const false;
        _5 = move (_1.1: A1);
        _21 = const false;
        _6 = move (_1.2: A2);
        _20 = const false;
        _7 = move (_1.3: A3);
        _19 = const false;
        _8 = move (_1.4: A4);
        _18 = const false;
        _9 = move (_1.5: A5);
        _17 = const false;
        _10 = move (_1.6: A6);
        _16 = const false;
        _11 = move (_1.7: A7);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11) -> [return: bb3, unwind: bb18];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_16) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.7: A7)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_17) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.6: A6)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_18) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.5: A5)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_19) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.4: A4)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_20) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.3: A3)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_21) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.2: A2)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop((_1.1: A1)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_22) -> [0: bb15, otherwise: bb17];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _10: bool;
    let mut _11: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>;
    let _12: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _13: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _14: &str;
    let mut _16: i128;
    let mut _17: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _18: A1;
    let mut _19: i128;
    let mut _20: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A2;
    let mut _22: i128;
    let mut _23: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A3;
    let mut _25: i128;
    let mut _26: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A4;
    let mut _28: i128;
    let mut _29: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A5;
    let mut _31: i128;
    let mut _32: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A6;
    let mut _34: i128;
    let mut _35: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A7;
    let mut _37: i128;
    let mut _38: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A8;
    let mut _42: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _45: &mut [i128];
    let mut _46: bool;
    let mut _47: usize;
    let mut _48: &[i128];
    let mut _49: &[i128; 8];
    let mut _50: usize;
    let mut _51: &[i128];
    let mut _52: &mut [i128];
    let mut _53: &mut [i128; 8];
    let mut _54: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _55: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _56: std::slice::Iter<'_, i128>;
    let mut _57: &[i128];
    let mut _58: &[i128; 8];
    let mut _60: std::option::Option<(usize, &i128)>;
    let mut _61: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _62: isize;
    let mut _65: usize;
    let mut _66: bool;
    let mut _67: &mut [i128];
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _69: std::result::Result<(), wasmer_vm::Trap>;
    let _70: &store::Store;
    let mut _71: wasmer_vm::VMFunctionEnvironment;
    let mut _72: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>;
    let mut _73: *const wasmer_vm::VMFunctionBody;
    let mut _74: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>;
    let mut _75: *mut u8;
    let mut _76: *mut i128;
    let mut _77: isize;
    let mut _80: &[i128];
    let mut _81: bool;
    let mut _82: bool;
    let mut _84: &[i128];
    let mut _85: &[i128; 8];
    let mut _87: &mut i128;
    let mut _88: &mut [i128];
    let mut _89: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _90: usize;
    let mut _91: usize;
    let mut _92: bool;
    let _93: ();
    let mut _94: Rets;
    let mut _95: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _96: wasmer_vm::VMFunctionKind;
    let mut _97: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>;
    let mut _98: isize;
    let _99: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _101: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _102: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _103: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _104: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _105: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>;
    let mut _106: isize;
    let _107: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _108: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _109: Rets;
    let mut _110: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _111: [wasmer_types::Value<externals::function::Function>; 8];
    let mut _112: wasmer_types::Value<externals::function::Function>;
    let mut _113: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _114: A1;
    let mut _115: wasmer_types::Value<externals::function::Function>;
    let mut _116: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _117: A2;
    let mut _118: wasmer_types::Value<externals::function::Function>;
    let mut _119: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _120: A3;
    let mut _121: wasmer_types::Value<externals::function::Function>;
    let mut _122: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _123: A4;
    let mut _124: wasmer_types::Value<externals::function::Function>;
    let mut _125: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _126: A5;
    let mut _127: wasmer_types::Value<externals::function::Function>;
    let mut _128: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _129: A6;
    let mut _130: wasmer_types::Value<externals::function::Function>;
    let mut _131: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _132: A7;
    let mut _133: wasmer_types::Value<externals::function::Function>;
    let mut _134: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _135: A8;
    let mut _138: *mut std::ffi::c_void;
    let mut _139: wasmer_vm::VMFunctionEnvironment;
    let mut _140: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>;
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _142: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _143: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _144: &[wasmer_types::Value<externals::function::Function>];
    let _145: &[wasmer_types::Value<externals::function::Function>; 8];
    let mut _146: isize;
    let mut _151: *mut [i128];
    let mut _152: &mut [i128];
    let mut _153: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _154: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _155: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _156: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _157: &[wasmer_types::Value<externals::function::Function>];
    let mut _158: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _160: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _161: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _162: isize;
    let _165: ();
    let mut _166: *mut i128;
    let mut _167: Rets;
    let mut _168: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _169: &i128;
    let mut _170: bool;
    let mut _171: bool;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: bool;
    scope 1 {
        debug trampoline => _12;
        let mut _15: [i128; 8];
        scope 2 {
            debug params_list => _15;
            let mut _40: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _40;
                let _41: &mut [i128];
                scope 4 {
                    debug rets_list => _41;
                    let _43: bool;
                    scope 5 {
                        debug using_rets_array => _43;
                        let _44: &mut [i128];
                        let mut _59: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _44;
                            let _78: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _79: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _78;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _79;
                                let _83: *const i128;
                                scope 15 {
                                    debug src_pointer => _83;
                                    let _86: *mut i128;
                                    scope 16 {
                                        debug rets_list => _86;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _59;
                            let _63: usize;
                            let _64: i128;
                            scope 8 {
                                debug i => _63;
                                debug arg => _64;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _99;
    }
    scope 19 {
        debug residual => _107;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _108;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _111;
        let _136: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _136;
            let mut _149: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _149;
                let _150: *mut i128;
                scope 32 {
                    debug mut_rets => _150;
                    let mut _159: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _159;
                        let _163: usize;
                        let _164: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _163;
                            debug ret => _164;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _137: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _137;
                let _147: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _148: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _147;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _148;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _180 = const false;
        _179 = const false;
        _178 = const false;
        _177 = const false;
        _176 = const false;
        _175 = const false;
        _174 = const false;
        _173 = const false;
        _172 = const false;
        _171 = const false;
        _170 = const false;
        _180 = const true;
        _179 = const true;
        _178 = const true;
        _177 = const true;
        _176 = const true;
        _175 = const true;
        _174 = const true;
        _173 = const true;
        _11 = _1;
        _10 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>::is_host(move _11) -> [return: bb1, unwind: bb123];
    }

    bb1: {
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _97 = _1;
        _96 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>::arg_kind(move _97) -> [return: bb52, unwind: bb123];
    }

    bb3: {
        _13 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _14 = const "Call trampoline not found in wasm function";
        _12 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _13, _14) -> [return: bb4, unwind: bb123];
    }

    bb4: {
        _180 = const false;
        _18 = move _2;
        _17 = <A1 as FromToNativeWasmType>::to_native(move _18) -> [return: bb5, unwind: bb123];
    }

    bb5: {
        _16 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _17) -> [return: bb6, unwind: bb123];
    }

    bb6: {
        _179 = const false;
        _21 = move _3;
        _20 = <A2 as FromToNativeWasmType>::to_native(move _21) -> [return: bb7, unwind: bb123];
    }

    bb7: {
        _19 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _20) -> [return: bb8, unwind: bb123];
    }

    bb8: {
        _178 = const false;
        _24 = move _4;
        _23 = <A3 as FromToNativeWasmType>::to_native(move _24) -> [return: bb9, unwind: bb123];
    }

    bb9: {
        _22 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _23) -> [return: bb10, unwind: bb123];
    }

    bb10: {
        _177 = const false;
        _27 = move _5;
        _26 = <A4 as FromToNativeWasmType>::to_native(move _27) -> [return: bb11, unwind: bb123];
    }

    bb11: {
        _25 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _26) -> [return: bb12, unwind: bb123];
    }

    bb12: {
        _176 = const false;
        _30 = move _6;
        _29 = <A5 as FromToNativeWasmType>::to_native(move _30) -> [return: bb13, unwind: bb123];
    }

    bb13: {
        _28 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _29) -> [return: bb14, unwind: bb123];
    }

    bb14: {
        _175 = const false;
        _33 = move _7;
        _32 = <A6 as FromToNativeWasmType>::to_native(move _33) -> [return: bb15, unwind: bb123];
    }

    bb15: {
        _31 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _32) -> [return: bb16, unwind: bb123];
    }

    bb16: {
        _174 = const false;
        _36 = move _8;
        _35 = <A7 as FromToNativeWasmType>::to_native(move _36) -> [return: bb17, unwind: bb123];
    }

    bb17: {
        _34 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _35) -> [return: bb18, unwind: bb123];
    }

    bb18: {
        _173 = const false;
        _39 = move _9;
        _38 = <A8 as FromToNativeWasmType>::to_native(move _39) -> [return: bb19, unwind: bb123];
    }

    bb19: {
        _37 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _38) -> [return: bb20, unwind: bb123];
    }

    bb20: {
        _15 = [move _16, move _19, move _22, move _25, move _28, move _31, move _34, move _37];
        _40 = <Rets as WasmTypeList>::empty_array() -> [return: bb21, unwind: bb123];
    }

    bb21: {
        _172 = const true;
        _42 = &mut _40;
        _41 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _42) -> [return: bb22, unwind: bb121];
    }

    bb22: {
        _49 = &_15;
        _48 = move _49 as &[i128] (PointerCoercion(Unsize));
        _47 = Len((*_48));
        _51 = &(*_41);
        _50 = Len((*_51));
        _46 = Gt(move _47, move _50);
        switchInt(move _46) -> [0: bb25, otherwise: bb23];
    }

    bb23: {
        _43 = const false;
        _53 = &mut _15;
        _52 = <[i128; 8] as AsMut<[i128]>>::as_mut(move _53) -> [return: bb24, unwind: bb121];
    }

    bb24: {
        _45 = _52;
        goto -> bb36;
    }

    bb25: {
        _43 = const true;
        _58 = &_15;
        _57 = move _58 as &[i128] (PointerCoercion(Unsize));
        _56 = core::slice::<impl [i128]>::iter(move _57) -> [return: bb26, unwind: bb121];
    }

    bb26: {
        _55 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _56) -> [return: bb27, unwind: bb121];
    }

    bb27: {
        _54 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _55) -> [return: bb28, unwind: bb121];
    }

    bb28: {
        _59 = move _54;
        goto -> bb29;
    }

    bb29: {
        _61 = &mut _59;
        _60 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_61) -> [return: bb30, unwind: bb121];
    }

    bb30: {
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb33, 1: bb31, otherwise: bb32];
    }

    bb31: {
        _169 = deref_copy (((_60 as Some).0: (usize, &i128)).1: &i128);
        _64 = (*_169);
        _63 = (((_60 as Some).0: (usize, &i128)).0: usize);
        _65 = Len((*_41));
        _66 = Lt(_63, _65);
        assert(move _66, "index out of bounds: the length is {} but the index is {}", move _65, _63) -> [success: bb34, unwind: bb121];
    }

    bb32: {
        unreachable;
    }

    bb33: {
        _67 = <[i128] as AsMut<[i128]>>::as_mut(_41) -> [return: bb35, unwind: bb121];
    }

    bb34: {
        (*_41)[_63] = _64;
        goto -> bb29;
    }

    bb35: {
        _45 = _67;
        goto -> bb36;
    }

    bb36: {
        _44 = _45;
        _70 = &((*_1).0: store::Store);
        _72 = _1;
        _71 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>::vmctx(move _72) -> [return: bb37, unwind: bb121];
    }

    bb37: {
        _74 = _1;
        _73 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>::address(move _74) -> [return: bb38, unwind: bb121];
    }

    bb38: {
        _76 = core::slice::<impl [i128]>::as_mut_ptr(_44) -> [return: bb39, unwind: bb121];
    }

    bb39: {
        _75 = move _76 as *mut u8 (PtrToPtr);
        _69 = wasmer_call_trampoline::<Store>(_70, move _71, _12, move _73, move _75) -> [return: bb40, unwind: bb121];
    }

    bb40: {
        _68 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _69) -> [return: bb41, unwind: bb121];
    }

    bb41: {
        _77 = discriminant(_68);
        switchInt(move _77) -> [0: bb42, 1: bb43, otherwise: bb32];
    }

    bb42: {
        _80 = &(*_41);
        _79 = Len((*_80));
        _81 = _43;
        switchInt(move _81) -> [0: bb45, otherwise: bb50];
    }

    bb43: {
        _78 = move ((_68 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _78) -> [return: bb44, unwind: bb121];
    }

    bb44: {
        drop(_40) -> [return: bb97, unwind: bb123];
    }

    bb45: {
        _82 = Gt(_79, const 0_usize);
        switchInt(move _82) -> [0: bb50, otherwise: bb46];
    }

    bb46: {
        _85 = &_15;
        _84 = move _85 as &[i128] (PointerCoercion(Unsize));
        _83 = core::slice::<impl [i128]>::as_ptr(move _84) -> [return: bb47, unwind: bb121];
    }

    bb47: {
        _89 = &mut _40;
        _88 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _89) -> [return: bb48, unwind: bb121];
    }

    bb48: {
        _90 = const 0_usize;
        _91 = Len((*_88));
        _92 = Lt(_90, _91);
        assert(move _92, "index out of bounds: the length is {} but the index is {}", move _91, _90) -> [success: bb49, unwind: bb121];
    }

    bb49: {
        _87 = &mut (*_88)[_90];
        _86 = &raw mut (*_87);
        _93 = copy_nonoverlapping::<i128>(_83, _86, _79) -> [return: bb131, unwind: bb121];
    }

    bb50: {
        _172 = const false;
        _95 = move _40;
        _94 = <Rets as WasmTypeList>::from_array(move _95) -> [return: bb51, unwind: bb121];
    }

    bb51: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _94);
        _172 = const false;
        goto -> bb98;
    }

    bb52: {
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb54, 1: bb53, otherwise: bb32];
    }

    bb53: {
        _180 = const false;
        _114 = move _2;
        _113 = <A1 as FromToNativeWasmType>::to_native(move _114) -> [return: bb62, unwind: bb123];
    }

    bb54: {
        _105 = &_1;
        _180 = const false;
        _179 = const false;
        _178 = const false;
        _177 = const false;
        _176 = const false;
        _175 = const false;
        _174 = const false;
        _173 = const false;
        _104 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _105, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9 };
        _103 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _104);
        _102 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _103) -> [return: bb55, unwind: bb123];
    }

    bb55: {
        _101 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _102, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb56, unwind: bb123];
    }

    bb56: {
        _100 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _101) -> [return: bb57, unwind: bb123];
    }

    bb57: {
        _106 = discriminant(_100);
        switchInt(move _106) -> [0: bb58, 1: bb59, otherwise: bb32];
    }

    bb58: {
        _108 = move ((_100 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _171 = const true;
        _99 = move _108;
        _171 = const false;
        _110 = move _99;
        _109 = <Rets as WasmTypeList>::from_c_struct(move _110) -> [return: bb61, unwind: bb119];
    }

    bb59: {
        _107 = move ((_100 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _107) -> [return: bb60, unwind: bb123];
    }

    bb60: {
        _171 = const false;
        goto -> bb98;
    }

    bb61: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _109);
        _171 = const false;
        goto -> bb98;
    }

    bb62: {
        _112 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _113) -> [return: bb63, unwind: bb123];
    }

    bb63: {
        _179 = const false;
        _117 = move _3;
        _116 = <A2 as FromToNativeWasmType>::to_native(move _117) -> [return: bb64, unwind: bb107];
    }

    bb64: {
        _115 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _116) -> [return: bb65, unwind: bb107];
    }

    bb65: {
        _178 = const false;
        _120 = move _4;
        _119 = <A3 as FromToNativeWasmType>::to_native(move _120) -> [return: bb66, unwind: bb106];
    }

    bb66: {
        _118 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _119) -> [return: bb67, unwind: bb106];
    }

    bb67: {
        _177 = const false;
        _123 = move _5;
        _122 = <A4 as FromToNativeWasmType>::to_native(move _123) -> [return: bb68, unwind: bb105];
    }

    bb68: {
        _121 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _122) -> [return: bb69, unwind: bb105];
    }

    bb69: {
        _176 = const false;
        _126 = move _6;
        _125 = <A5 as FromToNativeWasmType>::to_native(move _126) -> [return: bb70, unwind: bb104];
    }

    bb70: {
        _124 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _125) -> [return: bb71, unwind: bb104];
    }

    bb71: {
        _175 = const false;
        _129 = move _7;
        _128 = <A6 as FromToNativeWasmType>::to_native(move _129) -> [return: bb72, unwind: bb103];
    }

    bb72: {
        _127 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _128) -> [return: bb73, unwind: bb103];
    }

    bb73: {
        _174 = const false;
        _132 = move _8;
        _131 = <A7 as FromToNativeWasmType>::to_native(move _132) -> [return: bb74, unwind: bb102];
    }

    bb74: {
        _130 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _131) -> [return: bb75, unwind: bb102];
    }

    bb75: {
        _173 = const false;
        _135 = move _9;
        _134 = <A8 as FromToNativeWasmType>::to_native(move _135) -> [return: bb76, unwind: bb101];
    }

    bb76: {
        _133 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _134) -> [return: bb77, unwind: bb101];
    }

    bb77: {
        _111 = [move _112, move _115, move _118, move _121, move _124, move _127, move _130, move _133];
        _140 = _1;
        _139 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>::vmctx(move _140) -> [return: bb78, unwind: bb100];
    }

    bb78: {
        _138 = (_139.1: *mut std::ffi::c_void);
        _137 = move _138 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _143 = &((*_137).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _145 = &_111;
        _144 = _145 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _142 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _143, move _144) -> [return: bb79, unwind: bb100];
    }

    bb79: {
        _141 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _142) -> [return: bb80, unwind: bb100];
    }

    bb80: {
        _146 = discriminant(_141);
        switchInt(move _146) -> [0: bb81, 1: bb82, otherwise: bb32];
    }

    bb81: {
        _148 = move ((_141 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _136 = move _148;
        _149 = <Rets as WasmTypeList>::empty_array() -> [return: bb84, unwind: bb99];
    }

    bb82: {
        _147 = move ((_141 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _147) -> [return: bb83, unwind: bb100];
    }

    bb83: {
        drop(_111) -> [return: bb98, unwind: bb123];
    }

    bb84: {
        _170 = const true;
        _153 = &mut _149;
        _152 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _153) -> [return: bb85, unwind: bb117];
    }

    bb85: {
        _151 = &raw mut (*_152);
        _150 = move _151 as *mut i128 (PtrToPtr);
        _158 = &_136;
        _157 = <Vec<Value<function::Function>> as Deref>::deref(move _158) -> [return: bb86, unwind: bb117];
    }

    bb86: {
        _156 = core::slice::<impl [Value<function::Function>]>::iter(_157) -> [return: bb87, unwind: bb117];
    }

    bb87: {
        _155 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _156) -> [return: bb88, unwind: bb117];
    }

    bb88: {
        _154 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _155) -> [return: bb89, unwind: bb117];
    }

    bb89: {
        _159 = move _154;
        goto -> bb90;
    }

    bb90: {
        _161 = &mut _159;
        _160 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_161) -> [return: bb91, unwind: bb117];
    }

    bb91: {
        _162 = discriminant(_160);
        switchInt(move _162) -> [0: bb93, 1: bb92, otherwise: bb32];
    }

    bb92: {
        _163 = (((_160 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _164 = (((_160 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _166 = std::ptr::mut_ptr::<impl *mut i128>::add(_150, _163) -> [return: bb94, unwind: bb117];
    }

    bb93: {
        _170 = const false;
        _168 = move _149;
        _167 = <Rets as WasmTypeList>::from_array(move _168) -> [return: bb95, unwind: bb117];
    }

    bb94: {
        _165 = Value::<function::Function>::write_value_to(_164, move _166) -> [return: bb132, unwind: bb117];
    }

    bb95: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _167);
        _170 = const false;
        drop(_136) -> [return: bb96, unwind: bb100];
    }

    bb96: {
        drop(_111) -> [return: bb98, unwind: bb123];
    }

    bb97: {
        _172 = const false;
        goto -> bb98;
    }

    bb98: {
        return;
    }

    bb99 (cleanup): {
        drop(_136) -> [return: bb100, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_111) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_130) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_127) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_124) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_121) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_118) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_115) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_112) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        switchInt(_174) -> [0: bb109, otherwise: bb124];
    }

    bb109 (cleanup): {
        switchInt(_175) -> [0: bb110, otherwise: bb125];
    }

    bb110 (cleanup): {
        switchInt(_176) -> [0: bb111, otherwise: bb126];
    }

    bb111 (cleanup): {
        switchInt(_177) -> [0: bb112, otherwise: bb127];
    }

    bb112 (cleanup): {
        switchInt(_178) -> [0: bb113, otherwise: bb128];
    }

    bb113 (cleanup): {
        switchInt(_179) -> [0: bb114, otherwise: bb129];
    }

    bb114 (cleanup): {
        switchInt(_180) -> [0: bb115, otherwise: bb130];
    }

    bb115 (cleanup): {
        resume;
    }

    bb116 (cleanup): {
        drop(_149) -> [return: bb99, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        switchInt(_170) -> [0: bb99, otherwise: bb116];
    }

    bb118 (cleanup): {
        drop(_99) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        switchInt(_171) -> [0: bb123, otherwise: bb118];
    }

    bb120 (cleanup): {
        drop(_40) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        switchInt(_172) -> [0: bb123, otherwise: bb120];
    }

    bb122 (cleanup): {
        drop(_9) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        switchInt(_173) -> [0: bb108, otherwise: bb122];
    }

    bb124 (cleanup): {
        drop(_8) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_7) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_6) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        drop(_5) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        drop(_4) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        drop(_3) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        drop(_2) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb131: {
        goto -> bb50;
    }

    bb132: {
        goto -> bb90;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>;
    let mut _14: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>;
    let mut _15: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>;
    let mut _16: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _19 = const false;
        _18 = const false;
        _17 = const false;
        _17 = const true;
        _18 = const true;
        _19 = const true;
        _20 = const true;
        _21 = const true;
        _22 = const true;
        _23 = const true;
        _24 = const true;
        _13 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>);
        _14 = deref_copy (*_13);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>::address(_14) -> [return: bb1, unwind: bb20];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _15 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>);
        _16 = deref_copy (*_15);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>::vmctx(_16) -> [return: bb2, unwind: bb20];
    }

    bb2: {
        _24 = const false;
        _5 = move (_1.1: A1);
        _23 = const false;
        _6 = move (_1.2: A2);
        _22 = const false;
        _7 = move (_1.3: A3);
        _21 = const false;
        _8 = move (_1.4: A4);
        _20 = const false;
        _9 = move (_1.5: A5);
        _19 = const false;
        _10 = move (_1.6: A6);
        _18 = const false;
        _11 = move (_1.7: A7);
        _17 = const false;
        _12 = move (_1.8: A8);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_17) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.8: A8)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_18) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.7: A7)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_19) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.6: A6)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_20) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.5: A5)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_21) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.4: A4)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_22) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.3: A3)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_23) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.2: A2)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        drop((_1.1: A1)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_24) -> [0: bb17, otherwise: bb19];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8, _10: A9) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _11: bool;
    let mut _12: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>;
    let _13: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _14: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _15: &str;
    let mut _17: i128;
    let mut _18: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _19: A1;
    let mut _20: i128;
    let mut _21: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A2;
    let mut _23: i128;
    let mut _24: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A3;
    let mut _26: i128;
    let mut _27: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A4;
    let mut _29: i128;
    let mut _30: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A5;
    let mut _32: i128;
    let mut _33: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A6;
    let mut _35: i128;
    let mut _36: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A7;
    let mut _38: i128;
    let mut _39: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A8;
    let mut _41: i128;
    let mut _42: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A9;
    let mut _46: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _49: &mut [i128];
    let mut _50: bool;
    let mut _51: usize;
    let mut _52: &[i128];
    let mut _53: &[i128; 9];
    let mut _54: usize;
    let mut _55: &[i128];
    let mut _56: &mut [i128];
    let mut _57: &mut [i128; 9];
    let mut _58: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _59: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _60: std::slice::Iter<'_, i128>;
    let mut _61: &[i128];
    let mut _62: &[i128; 9];
    let mut _64: std::option::Option<(usize, &i128)>;
    let mut _65: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _66: isize;
    let mut _69: usize;
    let mut _70: bool;
    let mut _71: &mut [i128];
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _73: std::result::Result<(), wasmer_vm::Trap>;
    let _74: &store::Store;
    let mut _75: wasmer_vm::VMFunctionEnvironment;
    let mut _76: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>;
    let mut _77: *const wasmer_vm::VMFunctionBody;
    let mut _78: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>;
    let mut _79: *mut u8;
    let mut _80: *mut i128;
    let mut _81: isize;
    let mut _84: &[i128];
    let mut _85: bool;
    let mut _86: bool;
    let mut _88: &[i128];
    let mut _89: &[i128; 9];
    let mut _91: &mut i128;
    let mut _92: &mut [i128];
    let mut _93: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _94: usize;
    let mut _95: usize;
    let mut _96: bool;
    let _97: ();
    let mut _98: Rets;
    let mut _99: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _100: wasmer_vm::VMFunctionKind;
    let mut _101: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>;
    let mut _102: isize;
    let _103: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _105: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _106: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _107: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _108: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _109: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>;
    let mut _110: isize;
    let _111: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _112: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _113: Rets;
    let mut _114: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _115: [wasmer_types::Value<externals::function::Function>; 9];
    let mut _116: wasmer_types::Value<externals::function::Function>;
    let mut _117: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _118: A1;
    let mut _119: wasmer_types::Value<externals::function::Function>;
    let mut _120: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _121: A2;
    let mut _122: wasmer_types::Value<externals::function::Function>;
    let mut _123: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _124: A3;
    let mut _125: wasmer_types::Value<externals::function::Function>;
    let mut _126: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _127: A4;
    let mut _128: wasmer_types::Value<externals::function::Function>;
    let mut _129: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _130: A5;
    let mut _131: wasmer_types::Value<externals::function::Function>;
    let mut _132: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _133: A6;
    let mut _134: wasmer_types::Value<externals::function::Function>;
    let mut _135: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _136: A7;
    let mut _137: wasmer_types::Value<externals::function::Function>;
    let mut _138: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _139: A8;
    let mut _140: wasmer_types::Value<externals::function::Function>;
    let mut _141: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _142: A9;
    let mut _145: *mut std::ffi::c_void;
    let mut _146: wasmer_vm::VMFunctionEnvironment;
    let mut _147: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>;
    let mut _148: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _149: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _150: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _151: &[wasmer_types::Value<externals::function::Function>];
    let _152: &[wasmer_types::Value<externals::function::Function>; 9];
    let mut _153: isize;
    let mut _158: *mut [i128];
    let mut _159: &mut [i128];
    let mut _160: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _161: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _162: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _163: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _164: &[wasmer_types::Value<externals::function::Function>];
    let mut _165: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _167: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _168: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _169: isize;
    let _172: ();
    let mut _173: *mut i128;
    let mut _174: Rets;
    let mut _175: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _176: &i128;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: bool;
    let mut _181: bool;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: bool;
    scope 1 {
        debug trampoline => _13;
        let mut _16: [i128; 9];
        scope 2 {
            debug params_list => _16;
            let mut _44: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _44;
                let _45: &mut [i128];
                scope 4 {
                    debug rets_list => _45;
                    let _47: bool;
                    scope 5 {
                        debug using_rets_array => _47;
                        let _48: &mut [i128];
                        let mut _63: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _48;
                            let _82: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _83: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _82;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _83;
                                let _87: *const i128;
                                scope 15 {
                                    debug src_pointer => _87;
                                    let _90: *mut i128;
                                    scope 16 {
                                        debug rets_list => _90;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _63;
                            let _67: usize;
                            let _68: i128;
                            scope 8 {
                                debug i => _67;
                                debug arg => _68;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _103;
    }
    scope 19 {
        debug residual => _111;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _112;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _115;
        let _143: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _143;
            let mut _156: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _156;
                let _157: *mut i128;
                scope 32 {
                    debug mut_rets => _157;
                    let mut _166: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _166;
                        let _170: usize;
                        let _171: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _170;
                            debug ret => _171;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _144: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _144;
                let _154: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _155: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _154;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _155;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _188 = const false;
        _187 = const false;
        _186 = const false;
        _185 = const false;
        _184 = const false;
        _183 = const false;
        _182 = const false;
        _181 = const false;
        _180 = const false;
        _179 = const false;
        _178 = const false;
        _177 = const false;
        _188 = const true;
        _187 = const true;
        _186 = const true;
        _185 = const true;
        _184 = const true;
        _183 = const true;
        _182 = const true;
        _181 = const true;
        _180 = const true;
        _12 = _1;
        _11 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>::is_host(move _12) -> [return: bb1, unwind: bb129];
    }

    bb1: {
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _101 = _1;
        _100 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>::arg_kind(move _101) -> [return: bb54, unwind: bb129];
    }

    bb3: {
        _14 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _15 = const "Call trampoline not found in wasm function";
        _13 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _14, _15) -> [return: bb4, unwind: bb129];
    }

    bb4: {
        _188 = const false;
        _19 = move _2;
        _18 = <A1 as FromToNativeWasmType>::to_native(move _19) -> [return: bb5, unwind: bb129];
    }

    bb5: {
        _17 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _18) -> [return: bb6, unwind: bb129];
    }

    bb6: {
        _187 = const false;
        _22 = move _3;
        _21 = <A2 as FromToNativeWasmType>::to_native(move _22) -> [return: bb7, unwind: bb129];
    }

    bb7: {
        _20 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _21) -> [return: bb8, unwind: bb129];
    }

    bb8: {
        _186 = const false;
        _25 = move _4;
        _24 = <A3 as FromToNativeWasmType>::to_native(move _25) -> [return: bb9, unwind: bb129];
    }

    bb9: {
        _23 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _24) -> [return: bb10, unwind: bb129];
    }

    bb10: {
        _185 = const false;
        _28 = move _5;
        _27 = <A4 as FromToNativeWasmType>::to_native(move _28) -> [return: bb11, unwind: bb129];
    }

    bb11: {
        _26 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _27) -> [return: bb12, unwind: bb129];
    }

    bb12: {
        _184 = const false;
        _31 = move _6;
        _30 = <A5 as FromToNativeWasmType>::to_native(move _31) -> [return: bb13, unwind: bb129];
    }

    bb13: {
        _29 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _30) -> [return: bb14, unwind: bb129];
    }

    bb14: {
        _183 = const false;
        _34 = move _7;
        _33 = <A6 as FromToNativeWasmType>::to_native(move _34) -> [return: bb15, unwind: bb129];
    }

    bb15: {
        _32 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _33) -> [return: bb16, unwind: bb129];
    }

    bb16: {
        _182 = const false;
        _37 = move _8;
        _36 = <A7 as FromToNativeWasmType>::to_native(move _37) -> [return: bb17, unwind: bb129];
    }

    bb17: {
        _35 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _36) -> [return: bb18, unwind: bb129];
    }

    bb18: {
        _181 = const false;
        _40 = move _9;
        _39 = <A8 as FromToNativeWasmType>::to_native(move _40) -> [return: bb19, unwind: bb129];
    }

    bb19: {
        _38 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _39) -> [return: bb20, unwind: bb129];
    }

    bb20: {
        _180 = const false;
        _43 = move _10;
        _42 = <A9 as FromToNativeWasmType>::to_native(move _43) -> [return: bb21, unwind: bb129];
    }

    bb21: {
        _41 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _42) -> [return: bb22, unwind: bb129];
    }

    bb22: {
        _16 = [move _17, move _20, move _23, move _26, move _29, move _32, move _35, move _38, move _41];
        _44 = <Rets as WasmTypeList>::empty_array() -> [return: bb23, unwind: bb129];
    }

    bb23: {
        _179 = const true;
        _46 = &mut _44;
        _45 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _46) -> [return: bb24, unwind: bb127];
    }

    bb24: {
        _53 = &_16;
        _52 = move _53 as &[i128] (PointerCoercion(Unsize));
        _51 = Len((*_52));
        _55 = &(*_45);
        _54 = Len((*_55));
        _50 = Gt(move _51, move _54);
        switchInt(move _50) -> [0: bb27, otherwise: bb25];
    }

    bb25: {
        _47 = const false;
        _57 = &mut _16;
        _56 = <[i128; 9] as AsMut<[i128]>>::as_mut(move _57) -> [return: bb26, unwind: bb127];
    }

    bb26: {
        _49 = _56;
        goto -> bb38;
    }

    bb27: {
        _47 = const true;
        _62 = &_16;
        _61 = move _62 as &[i128] (PointerCoercion(Unsize));
        _60 = core::slice::<impl [i128]>::iter(move _61) -> [return: bb28, unwind: bb127];
    }

    bb28: {
        _59 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _60) -> [return: bb29, unwind: bb127];
    }

    bb29: {
        _58 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _59) -> [return: bb30, unwind: bb127];
    }

    bb30: {
        _63 = move _58;
        goto -> bb31;
    }

    bb31: {
        _65 = &mut _63;
        _64 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_65) -> [return: bb32, unwind: bb127];
    }

    bb32: {
        _66 = discriminant(_64);
        switchInt(move _66) -> [0: bb35, 1: bb33, otherwise: bb34];
    }

    bb33: {
        _176 = deref_copy (((_64 as Some).0: (usize, &i128)).1: &i128);
        _68 = (*_176);
        _67 = (((_64 as Some).0: (usize, &i128)).0: usize);
        _69 = Len((*_45));
        _70 = Lt(_67, _69);
        assert(move _70, "index out of bounds: the length is {} but the index is {}", move _69, _67) -> [success: bb36, unwind: bb127];
    }

    bb34: {
        unreachable;
    }

    bb35: {
        _71 = <[i128] as AsMut<[i128]>>::as_mut(_45) -> [return: bb37, unwind: bb127];
    }

    bb36: {
        (*_45)[_67] = _68;
        goto -> bb31;
    }

    bb37: {
        _49 = _71;
        goto -> bb38;
    }

    bb38: {
        _48 = _49;
        _74 = &((*_1).0: store::Store);
        _76 = _1;
        _75 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>::vmctx(move _76) -> [return: bb39, unwind: bb127];
    }

    bb39: {
        _78 = _1;
        _77 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>::address(move _78) -> [return: bb40, unwind: bb127];
    }

    bb40: {
        _80 = core::slice::<impl [i128]>::as_mut_ptr(_48) -> [return: bb41, unwind: bb127];
    }

    bb41: {
        _79 = move _80 as *mut u8 (PtrToPtr);
        _73 = wasmer_call_trampoline::<Store>(_74, move _75, _13, move _77, move _79) -> [return: bb42, unwind: bb127];
    }

    bb42: {
        _72 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _73) -> [return: bb43, unwind: bb127];
    }

    bb43: {
        _81 = discriminant(_72);
        switchInt(move _81) -> [0: bb44, 1: bb45, otherwise: bb34];
    }

    bb44: {
        _84 = &(*_45);
        _83 = Len((*_84));
        _85 = _47;
        switchInt(move _85) -> [0: bb47, otherwise: bb52];
    }

    bb45: {
        _82 = move ((_72 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _82) -> [return: bb46, unwind: bb127];
    }

    bb46: {
        drop(_44) -> [return: bb101, unwind: bb129];
    }

    bb47: {
        _86 = Gt(_83, const 0_usize);
        switchInt(move _86) -> [0: bb52, otherwise: bb48];
    }

    bb48: {
        _89 = &_16;
        _88 = move _89 as &[i128] (PointerCoercion(Unsize));
        _87 = core::slice::<impl [i128]>::as_ptr(move _88) -> [return: bb49, unwind: bb127];
    }

    bb49: {
        _93 = &mut _44;
        _92 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _93) -> [return: bb50, unwind: bb127];
    }

    bb50: {
        _94 = const 0_usize;
        _95 = Len((*_92));
        _96 = Lt(_94, _95);
        assert(move _96, "index out of bounds: the length is {} but the index is {}", move _95, _94) -> [success: bb51, unwind: bb127];
    }

    bb51: {
        _91 = &mut (*_92)[_94];
        _90 = &raw mut (*_91);
        _97 = copy_nonoverlapping::<i128>(_87, _90, _83) -> [return: bb138, unwind: bb127];
    }

    bb52: {
        _179 = const false;
        _99 = move _44;
        _98 = <Rets as WasmTypeList>::from_array(move _99) -> [return: bb53, unwind: bb127];
    }

    bb53: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _98);
        _179 = const false;
        goto -> bb102;
    }

    bb54: {
        _102 = discriminant(_100);
        switchInt(move _102) -> [0: bb56, 1: bb55, otherwise: bb34];
    }

    bb55: {
        _188 = const false;
        _118 = move _2;
        _117 = <A1 as FromToNativeWasmType>::to_native(move _118) -> [return: bb64, unwind: bb129];
    }

    bb56: {
        _109 = &_1;
        _188 = const false;
        _187 = const false;
        _186 = const false;
        _185 = const false;
        _184 = const false;
        _183 = const false;
        _182 = const false;
        _181 = const false;
        _180 = const false;
        _108 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _109, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10 };
        _107 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _108);
        _106 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _107) -> [return: bb57, unwind: bb129];
    }

    bb57: {
        _105 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _106, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb58, unwind: bb129];
    }

    bb58: {
        _104 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _105) -> [return: bb59, unwind: bb129];
    }

    bb59: {
        _110 = discriminant(_104);
        switchInt(move _110) -> [0: bb60, 1: bb61, otherwise: bb34];
    }

    bb60: {
        _112 = move ((_104 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _178 = const true;
        _103 = move _112;
        _178 = const false;
        _114 = move _103;
        _113 = <Rets as WasmTypeList>::from_c_struct(move _114) -> [return: bb63, unwind: bb125];
    }

    bb61: {
        _111 = move ((_104 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _111) -> [return: bb62, unwind: bb129];
    }

    bb62: {
        _178 = const false;
        goto -> bb102;
    }

    bb63: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _113);
        _178 = const false;
        goto -> bb102;
    }

    bb64: {
        _116 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _117) -> [return: bb65, unwind: bb129];
    }

    bb65: {
        _187 = const false;
        _121 = move _3;
        _120 = <A2 as FromToNativeWasmType>::to_native(move _121) -> [return: bb66, unwind: bb112];
    }

    bb66: {
        _119 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _120) -> [return: bb67, unwind: bb112];
    }

    bb67: {
        _186 = const false;
        _124 = move _4;
        _123 = <A3 as FromToNativeWasmType>::to_native(move _124) -> [return: bb68, unwind: bb111];
    }

    bb68: {
        _122 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _123) -> [return: bb69, unwind: bb111];
    }

    bb69: {
        _185 = const false;
        _127 = move _5;
        _126 = <A4 as FromToNativeWasmType>::to_native(move _127) -> [return: bb70, unwind: bb110];
    }

    bb70: {
        _125 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _126) -> [return: bb71, unwind: bb110];
    }

    bb71: {
        _184 = const false;
        _130 = move _6;
        _129 = <A5 as FromToNativeWasmType>::to_native(move _130) -> [return: bb72, unwind: bb109];
    }

    bb72: {
        _128 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _129) -> [return: bb73, unwind: bb109];
    }

    bb73: {
        _183 = const false;
        _133 = move _7;
        _132 = <A6 as FromToNativeWasmType>::to_native(move _133) -> [return: bb74, unwind: bb108];
    }

    bb74: {
        _131 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _132) -> [return: bb75, unwind: bb108];
    }

    bb75: {
        _182 = const false;
        _136 = move _8;
        _135 = <A7 as FromToNativeWasmType>::to_native(move _136) -> [return: bb76, unwind: bb107];
    }

    bb76: {
        _134 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _135) -> [return: bb77, unwind: bb107];
    }

    bb77: {
        _181 = const false;
        _139 = move _9;
        _138 = <A8 as FromToNativeWasmType>::to_native(move _139) -> [return: bb78, unwind: bb106];
    }

    bb78: {
        _137 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _138) -> [return: bb79, unwind: bb106];
    }

    bb79: {
        _180 = const false;
        _142 = move _10;
        _141 = <A9 as FromToNativeWasmType>::to_native(move _142) -> [return: bb80, unwind: bb105];
    }

    bb80: {
        _140 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _141) -> [return: bb81, unwind: bb105];
    }

    bb81: {
        _115 = [move _116, move _119, move _122, move _125, move _128, move _131, move _134, move _137, move _140];
        _147 = _1;
        _146 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>::vmctx(move _147) -> [return: bb82, unwind: bb104];
    }

    bb82: {
        _145 = (_146.1: *mut std::ffi::c_void);
        _144 = move _145 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _150 = &((*_144).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _152 = &_115;
        _151 = _152 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _149 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _150, move _151) -> [return: bb83, unwind: bb104];
    }

    bb83: {
        _148 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _149) -> [return: bb84, unwind: bb104];
    }

    bb84: {
        _153 = discriminant(_148);
        switchInt(move _153) -> [0: bb85, 1: bb86, otherwise: bb34];
    }

    bb85: {
        _155 = move ((_148 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _143 = move _155;
        _156 = <Rets as WasmTypeList>::empty_array() -> [return: bb88, unwind: bb103];
    }

    bb86: {
        _154 = move ((_148 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _154) -> [return: bb87, unwind: bb104];
    }

    bb87: {
        drop(_115) -> [return: bb102, unwind: bb129];
    }

    bb88: {
        _177 = const true;
        _160 = &mut _156;
        _159 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _160) -> [return: bb89, unwind: bb123];
    }

    bb89: {
        _158 = &raw mut (*_159);
        _157 = move _158 as *mut i128 (PtrToPtr);
        _165 = &_143;
        _164 = <Vec<Value<function::Function>> as Deref>::deref(move _165) -> [return: bb90, unwind: bb123];
    }

    bb90: {
        _163 = core::slice::<impl [Value<function::Function>]>::iter(_164) -> [return: bb91, unwind: bb123];
    }

    bb91: {
        _162 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _163) -> [return: bb92, unwind: bb123];
    }

    bb92: {
        _161 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _162) -> [return: bb93, unwind: bb123];
    }

    bb93: {
        _166 = move _161;
        goto -> bb94;
    }

    bb94: {
        _168 = &mut _166;
        _167 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_168) -> [return: bb95, unwind: bb123];
    }

    bb95: {
        _169 = discriminant(_167);
        switchInt(move _169) -> [0: bb97, 1: bb96, otherwise: bb34];
    }

    bb96: {
        _170 = (((_167 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _171 = (((_167 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _173 = std::ptr::mut_ptr::<impl *mut i128>::add(_157, _170) -> [return: bb98, unwind: bb123];
    }

    bb97: {
        _177 = const false;
        _175 = move _156;
        _174 = <Rets as WasmTypeList>::from_array(move _175) -> [return: bb99, unwind: bb123];
    }

    bb98: {
        _172 = Value::<function::Function>::write_value_to(_171, move _173) -> [return: bb139, unwind: bb123];
    }

    bb99: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _174);
        _177 = const false;
        drop(_143) -> [return: bb100, unwind: bb104];
    }

    bb100: {
        drop(_115) -> [return: bb102, unwind: bb129];
    }

    bb101: {
        _179 = const false;
        goto -> bb102;
    }

    bb102: {
        return;
    }

    bb103 (cleanup): {
        drop(_143) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_115) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_137) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_134) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_131) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_128) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop(_125) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        drop(_122) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_119) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_116) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        switchInt(_181) -> [0: bb114, otherwise: bb130];
    }

    bb114 (cleanup): {
        switchInt(_182) -> [0: bb115, otherwise: bb131];
    }

    bb115 (cleanup): {
        switchInt(_183) -> [0: bb116, otherwise: bb132];
    }

    bb116 (cleanup): {
        switchInt(_184) -> [0: bb117, otherwise: bb133];
    }

    bb117 (cleanup): {
        switchInt(_185) -> [0: bb118, otherwise: bb134];
    }

    bb118 (cleanup): {
        switchInt(_186) -> [0: bb119, otherwise: bb135];
    }

    bb119 (cleanup): {
        switchInt(_187) -> [0: bb120, otherwise: bb136];
    }

    bb120 (cleanup): {
        switchInt(_188) -> [0: bb121, otherwise: bb137];
    }

    bb121 (cleanup): {
        resume;
    }

    bb122 (cleanup): {
        drop(_156) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        switchInt(_177) -> [0: bb103, otherwise: bb122];
    }

    bb124 (cleanup): {
        drop(_103) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        switchInt(_178) -> [0: bb129, otherwise: bb124];
    }

    bb126 (cleanup): {
        drop(_44) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        switchInt(_179) -> [0: bb129, otherwise: bb126];
    }

    bb128 (cleanup): {
        drop(_10) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        switchInt(_180) -> [0: bb113, otherwise: bb128];
    }

    bb130 (cleanup): {
        drop(_9) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        drop(_8) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        drop(_7) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        drop(_6) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb134 (cleanup): {
        drop(_5) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        drop(_4) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        drop(_3) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        drop(_2) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb138: {
        goto -> bb52;
    }

    bb139: {
        goto -> bb94;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    debug A9 => (_1.9: A9);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: A9;
    let mut _14: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>;
    let mut _15: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>;
    let mut _16: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>;
    let mut _17: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _19 = const false;
        _18 = const false;
        _18 = const true;
        _19 = const true;
        _20 = const true;
        _21 = const true;
        _22 = const true;
        _23 = const true;
        _24 = const true;
        _25 = const true;
        _26 = const true;
        _14 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>);
        _15 = deref_copy (*_14);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>::address(_15) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _16 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>);
        _17 = deref_copy (*_16);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>::vmctx(_17) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _26 = const false;
        _5 = move (_1.1: A1);
        _25 = const false;
        _6 = move (_1.2: A2);
        _24 = const false;
        _7 = move (_1.3: A3);
        _23 = const false;
        _8 = move (_1.4: A4);
        _22 = const false;
        _9 = move (_1.5: A5);
        _21 = const false;
        _10 = move (_1.6: A6);
        _20 = const false;
        _11 = move (_1.7: A7);
        _19 = const false;
        _12 = move (_1.8: A8);
        _18 = const false;
        _13 = move (_1.9: A9);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_18) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.9: A9)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_19) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.8: A8)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_20) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.7: A7)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_21) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.6: A6)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_22) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.5: A5)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_23) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.4: A4)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_24) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.3: A3)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_25) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.2: A2)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop((_1.1: A1)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_26) -> [0: bb19, otherwise: bb21];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8, _10: A9, _11: A10) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _12: bool;
    let mut _13: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>;
    let _14: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _15: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _16: &str;
    let mut _18: i128;
    let mut _19: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _20: A1;
    let mut _21: i128;
    let mut _22: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A2;
    let mut _24: i128;
    let mut _25: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A3;
    let mut _27: i128;
    let mut _28: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A4;
    let mut _30: i128;
    let mut _31: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A5;
    let mut _33: i128;
    let mut _34: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A6;
    let mut _36: i128;
    let mut _37: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A7;
    let mut _39: i128;
    let mut _40: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A8;
    let mut _42: i128;
    let mut _43: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A9;
    let mut _45: i128;
    let mut _46: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A10;
    let mut _50: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _53: &mut [i128];
    let mut _54: bool;
    let mut _55: usize;
    let mut _56: &[i128];
    let mut _57: &[i128; 10];
    let mut _58: usize;
    let mut _59: &[i128];
    let mut _60: &mut [i128];
    let mut _61: &mut [i128; 10];
    let mut _62: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _63: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _64: std::slice::Iter<'_, i128>;
    let mut _65: &[i128];
    let mut _66: &[i128; 10];
    let mut _68: std::option::Option<(usize, &i128)>;
    let mut _69: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _70: isize;
    let mut _73: usize;
    let mut _74: bool;
    let mut _75: &mut [i128];
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _77: std::result::Result<(), wasmer_vm::Trap>;
    let _78: &store::Store;
    let mut _79: wasmer_vm::VMFunctionEnvironment;
    let mut _80: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>;
    let mut _81: *const wasmer_vm::VMFunctionBody;
    let mut _82: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>;
    let mut _83: *mut u8;
    let mut _84: *mut i128;
    let mut _85: isize;
    let mut _88: &[i128];
    let mut _89: bool;
    let mut _90: bool;
    let mut _92: &[i128];
    let mut _93: &[i128; 10];
    let mut _95: &mut i128;
    let mut _96: &mut [i128];
    let mut _97: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _98: usize;
    let mut _99: usize;
    let mut _100: bool;
    let _101: ();
    let mut _102: Rets;
    let mut _103: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _104: wasmer_vm::VMFunctionKind;
    let mut _105: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>;
    let mut _106: isize;
    let _107: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _109: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _110: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _111: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _112: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _113: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>;
    let mut _114: isize;
    let _115: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _116: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _117: Rets;
    let mut _118: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _119: [wasmer_types::Value<externals::function::Function>; 10];
    let mut _120: wasmer_types::Value<externals::function::Function>;
    let mut _121: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _122: A1;
    let mut _123: wasmer_types::Value<externals::function::Function>;
    let mut _124: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _125: A2;
    let mut _126: wasmer_types::Value<externals::function::Function>;
    let mut _127: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _128: A3;
    let mut _129: wasmer_types::Value<externals::function::Function>;
    let mut _130: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _131: A4;
    let mut _132: wasmer_types::Value<externals::function::Function>;
    let mut _133: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _134: A5;
    let mut _135: wasmer_types::Value<externals::function::Function>;
    let mut _136: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _137: A6;
    let mut _138: wasmer_types::Value<externals::function::Function>;
    let mut _139: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _140: A7;
    let mut _141: wasmer_types::Value<externals::function::Function>;
    let mut _142: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _143: A8;
    let mut _144: wasmer_types::Value<externals::function::Function>;
    let mut _145: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _146: A9;
    let mut _147: wasmer_types::Value<externals::function::Function>;
    let mut _148: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _149: A10;
    let mut _152: *mut std::ffi::c_void;
    let mut _153: wasmer_vm::VMFunctionEnvironment;
    let mut _154: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>;
    let mut _155: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _156: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _157: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _158: &[wasmer_types::Value<externals::function::Function>];
    let _159: &[wasmer_types::Value<externals::function::Function>; 10];
    let mut _160: isize;
    let mut _165: *mut [i128];
    let mut _166: &mut [i128];
    let mut _167: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _168: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _169: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _170: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _171: &[wasmer_types::Value<externals::function::Function>];
    let mut _172: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _174: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _175: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _176: isize;
    let _179: ();
    let mut _180: *mut i128;
    let mut _181: Rets;
    let mut _182: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _183: &i128;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    scope 1 {
        debug trampoline => _14;
        let mut _17: [i128; 10];
        scope 2 {
            debug params_list => _17;
            let mut _48: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _48;
                let _49: &mut [i128];
                scope 4 {
                    debug rets_list => _49;
                    let _51: bool;
                    scope 5 {
                        debug using_rets_array => _51;
                        let _52: &mut [i128];
                        let mut _67: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _52;
                            let _86: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _87: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _86;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _87;
                                let _91: *const i128;
                                scope 15 {
                                    debug src_pointer => _91;
                                    let _94: *mut i128;
                                    scope 16 {
                                        debug rets_list => _94;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _67;
                            let _71: usize;
                            let _72: i128;
                            scope 8 {
                                debug i => _71;
                                debug arg => _72;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _107;
    }
    scope 19 {
        debug residual => _115;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _116;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _119;
        let _150: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _150;
            let mut _163: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _163;
                let _164: *mut i128;
                scope 32 {
                    debug mut_rets => _164;
                    let mut _173: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _173;
                        let _177: usize;
                        let _178: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _177;
                            debug ret => _178;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _151: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _151;
                let _161: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _162: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _161;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _162;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _196 = const false;
        _195 = const false;
        _194 = const false;
        _193 = const false;
        _192 = const false;
        _191 = const false;
        _190 = const false;
        _189 = const false;
        _188 = const false;
        _187 = const false;
        _186 = const false;
        _185 = const false;
        _184 = const false;
        _196 = const true;
        _195 = const true;
        _194 = const true;
        _193 = const true;
        _192 = const true;
        _191 = const true;
        _190 = const true;
        _189 = const true;
        _188 = const true;
        _187 = const true;
        _13 = _1;
        _12 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>::is_host(move _13) -> [return: bb1, unwind: bb135];
    }

    bb1: {
        switchInt(move _12) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _105 = _1;
        _104 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>::arg_kind(move _105) -> [return: bb56, unwind: bb135];
    }

    bb3: {
        _15 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _16 = const "Call trampoline not found in wasm function";
        _14 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _15, _16) -> [return: bb4, unwind: bb135];
    }

    bb4: {
        _196 = const false;
        _20 = move _2;
        _19 = <A1 as FromToNativeWasmType>::to_native(move _20) -> [return: bb5, unwind: bb135];
    }

    bb5: {
        _18 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _19) -> [return: bb6, unwind: bb135];
    }

    bb6: {
        _195 = const false;
        _23 = move _3;
        _22 = <A2 as FromToNativeWasmType>::to_native(move _23) -> [return: bb7, unwind: bb135];
    }

    bb7: {
        _21 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _22) -> [return: bb8, unwind: bb135];
    }

    bb8: {
        _194 = const false;
        _26 = move _4;
        _25 = <A3 as FromToNativeWasmType>::to_native(move _26) -> [return: bb9, unwind: bb135];
    }

    bb9: {
        _24 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _25) -> [return: bb10, unwind: bb135];
    }

    bb10: {
        _193 = const false;
        _29 = move _5;
        _28 = <A4 as FromToNativeWasmType>::to_native(move _29) -> [return: bb11, unwind: bb135];
    }

    bb11: {
        _27 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _28) -> [return: bb12, unwind: bb135];
    }

    bb12: {
        _192 = const false;
        _32 = move _6;
        _31 = <A5 as FromToNativeWasmType>::to_native(move _32) -> [return: bb13, unwind: bb135];
    }

    bb13: {
        _30 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _31) -> [return: bb14, unwind: bb135];
    }

    bb14: {
        _191 = const false;
        _35 = move _7;
        _34 = <A6 as FromToNativeWasmType>::to_native(move _35) -> [return: bb15, unwind: bb135];
    }

    bb15: {
        _33 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _34) -> [return: bb16, unwind: bb135];
    }

    bb16: {
        _190 = const false;
        _38 = move _8;
        _37 = <A7 as FromToNativeWasmType>::to_native(move _38) -> [return: bb17, unwind: bb135];
    }

    bb17: {
        _36 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _37) -> [return: bb18, unwind: bb135];
    }

    bb18: {
        _189 = const false;
        _41 = move _9;
        _40 = <A8 as FromToNativeWasmType>::to_native(move _41) -> [return: bb19, unwind: bb135];
    }

    bb19: {
        _39 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _40) -> [return: bb20, unwind: bb135];
    }

    bb20: {
        _188 = const false;
        _44 = move _10;
        _43 = <A9 as FromToNativeWasmType>::to_native(move _44) -> [return: bb21, unwind: bb135];
    }

    bb21: {
        _42 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _43) -> [return: bb22, unwind: bb135];
    }

    bb22: {
        _187 = const false;
        _47 = move _11;
        _46 = <A10 as FromToNativeWasmType>::to_native(move _47) -> [return: bb23, unwind: bb135];
    }

    bb23: {
        _45 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _46) -> [return: bb24, unwind: bb135];
    }

    bb24: {
        _17 = [move _18, move _21, move _24, move _27, move _30, move _33, move _36, move _39, move _42, move _45];
        _48 = <Rets as WasmTypeList>::empty_array() -> [return: bb25, unwind: bb135];
    }

    bb25: {
        _186 = const true;
        _50 = &mut _48;
        _49 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _50) -> [return: bb26, unwind: bb133];
    }

    bb26: {
        _57 = &_17;
        _56 = move _57 as &[i128] (PointerCoercion(Unsize));
        _55 = Len((*_56));
        _59 = &(*_49);
        _58 = Len((*_59));
        _54 = Gt(move _55, move _58);
        switchInt(move _54) -> [0: bb29, otherwise: bb27];
    }

    bb27: {
        _51 = const false;
        _61 = &mut _17;
        _60 = <[i128; 10] as AsMut<[i128]>>::as_mut(move _61) -> [return: bb28, unwind: bb133];
    }

    bb28: {
        _53 = _60;
        goto -> bb40;
    }

    bb29: {
        _51 = const true;
        _66 = &_17;
        _65 = move _66 as &[i128] (PointerCoercion(Unsize));
        _64 = core::slice::<impl [i128]>::iter(move _65) -> [return: bb30, unwind: bb133];
    }

    bb30: {
        _63 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _64) -> [return: bb31, unwind: bb133];
    }

    bb31: {
        _62 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _63) -> [return: bb32, unwind: bb133];
    }

    bb32: {
        _67 = move _62;
        goto -> bb33;
    }

    bb33: {
        _69 = &mut _67;
        _68 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_69) -> [return: bb34, unwind: bb133];
    }

    bb34: {
        _70 = discriminant(_68);
        switchInt(move _70) -> [0: bb37, 1: bb35, otherwise: bb36];
    }

    bb35: {
        _183 = deref_copy (((_68 as Some).0: (usize, &i128)).1: &i128);
        _72 = (*_183);
        _71 = (((_68 as Some).0: (usize, &i128)).0: usize);
        _73 = Len((*_49));
        _74 = Lt(_71, _73);
        assert(move _74, "index out of bounds: the length is {} but the index is {}", move _73, _71) -> [success: bb38, unwind: bb133];
    }

    bb36: {
        unreachable;
    }

    bb37: {
        _75 = <[i128] as AsMut<[i128]>>::as_mut(_49) -> [return: bb39, unwind: bb133];
    }

    bb38: {
        (*_49)[_71] = _72;
        goto -> bb33;
    }

    bb39: {
        _53 = _75;
        goto -> bb40;
    }

    bb40: {
        _52 = _53;
        _78 = &((*_1).0: store::Store);
        _80 = _1;
        _79 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>::vmctx(move _80) -> [return: bb41, unwind: bb133];
    }

    bb41: {
        _82 = _1;
        _81 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>::address(move _82) -> [return: bb42, unwind: bb133];
    }

    bb42: {
        _84 = core::slice::<impl [i128]>::as_mut_ptr(_52) -> [return: bb43, unwind: bb133];
    }

    bb43: {
        _83 = move _84 as *mut u8 (PtrToPtr);
        _77 = wasmer_call_trampoline::<Store>(_78, move _79, _14, move _81, move _83) -> [return: bb44, unwind: bb133];
    }

    bb44: {
        _76 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _77) -> [return: bb45, unwind: bb133];
    }

    bb45: {
        _85 = discriminant(_76);
        switchInt(move _85) -> [0: bb46, 1: bb47, otherwise: bb36];
    }

    bb46: {
        _88 = &(*_49);
        _87 = Len((*_88));
        _89 = _51;
        switchInt(move _89) -> [0: bb49, otherwise: bb54];
    }

    bb47: {
        _86 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _86) -> [return: bb48, unwind: bb133];
    }

    bb48: {
        drop(_48) -> [return: bb105, unwind: bb135];
    }

    bb49: {
        _90 = Gt(_87, const 0_usize);
        switchInt(move _90) -> [0: bb54, otherwise: bb50];
    }

    bb50: {
        _93 = &_17;
        _92 = move _93 as &[i128] (PointerCoercion(Unsize));
        _91 = core::slice::<impl [i128]>::as_ptr(move _92) -> [return: bb51, unwind: bb133];
    }

    bb51: {
        _97 = &mut _48;
        _96 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _97) -> [return: bb52, unwind: bb133];
    }

    bb52: {
        _98 = const 0_usize;
        _99 = Len((*_96));
        _100 = Lt(_98, _99);
        assert(move _100, "index out of bounds: the length is {} but the index is {}", move _99, _98) -> [success: bb53, unwind: bb133];
    }

    bb53: {
        _95 = &mut (*_96)[_98];
        _94 = &raw mut (*_95);
        _101 = copy_nonoverlapping::<i128>(_91, _94, _87) -> [return: bb145, unwind: bb133];
    }

    bb54: {
        _186 = const false;
        _103 = move _48;
        _102 = <Rets as WasmTypeList>::from_array(move _103) -> [return: bb55, unwind: bb133];
    }

    bb55: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _102);
        _186 = const false;
        goto -> bb106;
    }

    bb56: {
        _106 = discriminant(_104);
        switchInt(move _106) -> [0: bb58, 1: bb57, otherwise: bb36];
    }

    bb57: {
        _196 = const false;
        _122 = move _2;
        _121 = <A1 as FromToNativeWasmType>::to_native(move _122) -> [return: bb66, unwind: bb135];
    }

    bb58: {
        _113 = &_1;
        _196 = const false;
        _195 = const false;
        _194 = const false;
        _193 = const false;
        _192 = const false;
        _191 = const false;
        _190 = const false;
        _189 = const false;
        _188 = const false;
        _187 = const false;
        _112 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _113, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11 };
        _111 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _112);
        _110 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _111) -> [return: bb59, unwind: bb135];
    }

    bb59: {
        _109 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _110, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb60, unwind: bb135];
    }

    bb60: {
        _108 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _109) -> [return: bb61, unwind: bb135];
    }

    bb61: {
        _114 = discriminant(_108);
        switchInt(move _114) -> [0: bb62, 1: bb63, otherwise: bb36];
    }

    bb62: {
        _116 = move ((_108 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _185 = const true;
        _107 = move _116;
        _185 = const false;
        _118 = move _107;
        _117 = <Rets as WasmTypeList>::from_c_struct(move _118) -> [return: bb65, unwind: bb131];
    }

    bb63: {
        _115 = move ((_108 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _115) -> [return: bb64, unwind: bb135];
    }

    bb64: {
        _185 = const false;
        goto -> bb106;
    }

    bb65: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _117);
        _185 = const false;
        goto -> bb106;
    }

    bb66: {
        _120 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _121) -> [return: bb67, unwind: bb135];
    }

    bb67: {
        _195 = const false;
        _125 = move _3;
        _124 = <A2 as FromToNativeWasmType>::to_native(move _125) -> [return: bb68, unwind: bb117];
    }

    bb68: {
        _123 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _124) -> [return: bb69, unwind: bb117];
    }

    bb69: {
        _194 = const false;
        _128 = move _4;
        _127 = <A3 as FromToNativeWasmType>::to_native(move _128) -> [return: bb70, unwind: bb116];
    }

    bb70: {
        _126 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _127) -> [return: bb71, unwind: bb116];
    }

    bb71: {
        _193 = const false;
        _131 = move _5;
        _130 = <A4 as FromToNativeWasmType>::to_native(move _131) -> [return: bb72, unwind: bb115];
    }

    bb72: {
        _129 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _130) -> [return: bb73, unwind: bb115];
    }

    bb73: {
        _192 = const false;
        _134 = move _6;
        _133 = <A5 as FromToNativeWasmType>::to_native(move _134) -> [return: bb74, unwind: bb114];
    }

    bb74: {
        _132 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _133) -> [return: bb75, unwind: bb114];
    }

    bb75: {
        _191 = const false;
        _137 = move _7;
        _136 = <A6 as FromToNativeWasmType>::to_native(move _137) -> [return: bb76, unwind: bb113];
    }

    bb76: {
        _135 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _136) -> [return: bb77, unwind: bb113];
    }

    bb77: {
        _190 = const false;
        _140 = move _8;
        _139 = <A7 as FromToNativeWasmType>::to_native(move _140) -> [return: bb78, unwind: bb112];
    }

    bb78: {
        _138 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _139) -> [return: bb79, unwind: bb112];
    }

    bb79: {
        _189 = const false;
        _143 = move _9;
        _142 = <A8 as FromToNativeWasmType>::to_native(move _143) -> [return: bb80, unwind: bb111];
    }

    bb80: {
        _141 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _142) -> [return: bb81, unwind: bb111];
    }

    bb81: {
        _188 = const false;
        _146 = move _10;
        _145 = <A9 as FromToNativeWasmType>::to_native(move _146) -> [return: bb82, unwind: bb110];
    }

    bb82: {
        _144 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _145) -> [return: bb83, unwind: bb110];
    }

    bb83: {
        _187 = const false;
        _149 = move _11;
        _148 = <A10 as FromToNativeWasmType>::to_native(move _149) -> [return: bb84, unwind: bb109];
    }

    bb84: {
        _147 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _148) -> [return: bb85, unwind: bb109];
    }

    bb85: {
        _119 = [move _120, move _123, move _126, move _129, move _132, move _135, move _138, move _141, move _144, move _147];
        _154 = _1;
        _153 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>::vmctx(move _154) -> [return: bb86, unwind: bb108];
    }

    bb86: {
        _152 = (_153.1: *mut std::ffi::c_void);
        _151 = move _152 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _157 = &((*_151).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _159 = &_119;
        _158 = _159 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _156 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _157, move _158) -> [return: bb87, unwind: bb108];
    }

    bb87: {
        _155 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _156) -> [return: bb88, unwind: bb108];
    }

    bb88: {
        _160 = discriminant(_155);
        switchInt(move _160) -> [0: bb89, 1: bb90, otherwise: bb36];
    }

    bb89: {
        _162 = move ((_155 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _150 = move _162;
        _163 = <Rets as WasmTypeList>::empty_array() -> [return: bb92, unwind: bb107];
    }

    bb90: {
        _161 = move ((_155 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _161) -> [return: bb91, unwind: bb108];
    }

    bb91: {
        drop(_119) -> [return: bb106, unwind: bb135];
    }

    bb92: {
        _184 = const true;
        _167 = &mut _163;
        _166 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _167) -> [return: bb93, unwind: bb129];
    }

    bb93: {
        _165 = &raw mut (*_166);
        _164 = move _165 as *mut i128 (PtrToPtr);
        _172 = &_150;
        _171 = <Vec<Value<function::Function>> as Deref>::deref(move _172) -> [return: bb94, unwind: bb129];
    }

    bb94: {
        _170 = core::slice::<impl [Value<function::Function>]>::iter(_171) -> [return: bb95, unwind: bb129];
    }

    bb95: {
        _169 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _170) -> [return: bb96, unwind: bb129];
    }

    bb96: {
        _168 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _169) -> [return: bb97, unwind: bb129];
    }

    bb97: {
        _173 = move _168;
        goto -> bb98;
    }

    bb98: {
        _175 = &mut _173;
        _174 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_175) -> [return: bb99, unwind: bb129];
    }

    bb99: {
        _176 = discriminant(_174);
        switchInt(move _176) -> [0: bb101, 1: bb100, otherwise: bb36];
    }

    bb100: {
        _177 = (((_174 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _178 = (((_174 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _180 = std::ptr::mut_ptr::<impl *mut i128>::add(_164, _177) -> [return: bb102, unwind: bb129];
    }

    bb101: {
        _184 = const false;
        _182 = move _163;
        _181 = <Rets as WasmTypeList>::from_array(move _182) -> [return: bb103, unwind: bb129];
    }

    bb102: {
        _179 = Value::<function::Function>::write_value_to(_178, move _180) -> [return: bb146, unwind: bb129];
    }

    bb103: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _181);
        _184 = const false;
        drop(_150) -> [return: bb104, unwind: bb108];
    }

    bb104: {
        drop(_119) -> [return: bb106, unwind: bb135];
    }

    bb105: {
        _186 = const false;
        goto -> bb106;
    }

    bb106: {
        return;
    }

    bb107 (cleanup): {
        drop(_150) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_119) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop(_144) -> [return: bb110, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        drop(_141) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_138) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_135) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_132) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_129) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_126) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop(_123) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        drop(_120) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        switchInt(_188) -> [0: bb119, otherwise: bb136];
    }

    bb119 (cleanup): {
        switchInt(_189) -> [0: bb120, otherwise: bb137];
    }

    bb120 (cleanup): {
        switchInt(_190) -> [0: bb121, otherwise: bb138];
    }

    bb121 (cleanup): {
        switchInt(_191) -> [0: bb122, otherwise: bb139];
    }

    bb122 (cleanup): {
        switchInt(_192) -> [0: bb123, otherwise: bb140];
    }

    bb123 (cleanup): {
        switchInt(_193) -> [0: bb124, otherwise: bb141];
    }

    bb124 (cleanup): {
        switchInt(_194) -> [0: bb125, otherwise: bb142];
    }

    bb125 (cleanup): {
        switchInt(_195) -> [0: bb126, otherwise: bb143];
    }

    bb126 (cleanup): {
        switchInt(_196) -> [0: bb127, otherwise: bb144];
    }

    bb127 (cleanup): {
        resume;
    }

    bb128 (cleanup): {
        drop(_163) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        switchInt(_184) -> [0: bb107, otherwise: bb128];
    }

    bb130 (cleanup): {
        drop(_107) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        switchInt(_185) -> [0: bb135, otherwise: bb130];
    }

    bb132 (cleanup): {
        drop(_48) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        switchInt(_186) -> [0: bb135, otherwise: bb132];
    }

    bb134 (cleanup): {
        drop(_11) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        switchInt(_187) -> [0: bb118, otherwise: bb134];
    }

    bb136 (cleanup): {
        drop(_10) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        drop(_9) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        drop(_8) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        drop(_7) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        drop(_6) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        drop(_5) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        drop(_4) -> [return: bb125, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        drop(_3) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_2) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb145: {
        goto -> bb54;
    }

    bb146: {
        goto -> bb98;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    debug A9 => (_1.9: A9);
    debug A10 => (_1.10: A10);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: A9;
    let mut _14: A10;
    let mut _15: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>;
    let mut _16: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>;
    let mut _17: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>;
    let mut _18: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _19 = const false;
        _19 = const true;
        _20 = const true;
        _21 = const true;
        _22 = const true;
        _23 = const true;
        _24 = const true;
        _25 = const true;
        _26 = const true;
        _27 = const true;
        _28 = const true;
        _15 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>);
        _16 = deref_copy (*_15);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>::address(_16) -> [return: bb1, unwind: bb24];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _17 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>);
        _18 = deref_copy (*_17);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>::vmctx(_18) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _28 = const false;
        _5 = move (_1.1: A1);
        _27 = const false;
        _6 = move (_1.2: A2);
        _26 = const false;
        _7 = move (_1.3: A3);
        _25 = const false;
        _8 = move (_1.4: A4);
        _24 = const false;
        _9 = move (_1.5: A5);
        _23 = const false;
        _10 = move (_1.6: A6);
        _22 = const false;
        _11 = move (_1.7: A7);
        _21 = const false;
        _12 = move (_1.8: A8);
        _20 = const false;
        _13 = move (_1.9: A9);
        _19 = const false;
        _14 = move (_1.10: A10);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14) -> [return: bb3, unwind: bb24];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_19) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.10: A10)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_20) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.9: A9)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_21) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.8: A8)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_22) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.7: A7)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_23) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.6: A6)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_24) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.5: A5)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_25) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.4: A4)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_26) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.3: A3)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_27) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.2: A2)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop((_1.1: A1)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_28) -> [0: bb21, otherwise: bb23];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8, _10: A9, _11: A10, _12: A11) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _13: bool;
    let mut _14: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>;
    let _15: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _16: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _17: &str;
    let mut _19: i128;
    let mut _20: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _21: A1;
    let mut _22: i128;
    let mut _23: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A2;
    let mut _25: i128;
    let mut _26: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A3;
    let mut _28: i128;
    let mut _29: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A4;
    let mut _31: i128;
    let mut _32: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A5;
    let mut _34: i128;
    let mut _35: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A6;
    let mut _37: i128;
    let mut _38: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A7;
    let mut _40: i128;
    let mut _41: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A8;
    let mut _43: i128;
    let mut _44: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A9;
    let mut _46: i128;
    let mut _47: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A10;
    let mut _49: i128;
    let mut _50: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A11;
    let mut _54: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _57: &mut [i128];
    let mut _58: bool;
    let mut _59: usize;
    let mut _60: &[i128];
    let mut _61: &[i128; 11];
    let mut _62: usize;
    let mut _63: &[i128];
    let mut _64: &mut [i128];
    let mut _65: &mut [i128; 11];
    let mut _66: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _67: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _68: std::slice::Iter<'_, i128>;
    let mut _69: &[i128];
    let mut _70: &[i128; 11];
    let mut _72: std::option::Option<(usize, &i128)>;
    let mut _73: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _74: isize;
    let mut _77: usize;
    let mut _78: bool;
    let mut _79: &mut [i128];
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _81: std::result::Result<(), wasmer_vm::Trap>;
    let _82: &store::Store;
    let mut _83: wasmer_vm::VMFunctionEnvironment;
    let mut _84: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>;
    let mut _85: *const wasmer_vm::VMFunctionBody;
    let mut _86: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>;
    let mut _87: *mut u8;
    let mut _88: *mut i128;
    let mut _89: isize;
    let mut _92: &[i128];
    let mut _93: bool;
    let mut _94: bool;
    let mut _96: &[i128];
    let mut _97: &[i128; 11];
    let mut _99: &mut i128;
    let mut _100: &mut [i128];
    let mut _101: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _102: usize;
    let mut _103: usize;
    let mut _104: bool;
    let _105: ();
    let mut _106: Rets;
    let mut _107: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _108: wasmer_vm::VMFunctionKind;
    let mut _109: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>;
    let mut _110: isize;
    let _111: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _113: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _114: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _115: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _116: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _117: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>;
    let mut _118: isize;
    let _119: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _120: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _121: Rets;
    let mut _122: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _123: [wasmer_types::Value<externals::function::Function>; 11];
    let mut _124: wasmer_types::Value<externals::function::Function>;
    let mut _125: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _126: A1;
    let mut _127: wasmer_types::Value<externals::function::Function>;
    let mut _128: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _129: A2;
    let mut _130: wasmer_types::Value<externals::function::Function>;
    let mut _131: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _132: A3;
    let mut _133: wasmer_types::Value<externals::function::Function>;
    let mut _134: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _135: A4;
    let mut _136: wasmer_types::Value<externals::function::Function>;
    let mut _137: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _138: A5;
    let mut _139: wasmer_types::Value<externals::function::Function>;
    let mut _140: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _141: A6;
    let mut _142: wasmer_types::Value<externals::function::Function>;
    let mut _143: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _144: A7;
    let mut _145: wasmer_types::Value<externals::function::Function>;
    let mut _146: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _147: A8;
    let mut _148: wasmer_types::Value<externals::function::Function>;
    let mut _149: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _150: A9;
    let mut _151: wasmer_types::Value<externals::function::Function>;
    let mut _152: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _153: A10;
    let mut _154: wasmer_types::Value<externals::function::Function>;
    let mut _155: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _156: A11;
    let mut _159: *mut std::ffi::c_void;
    let mut _160: wasmer_vm::VMFunctionEnvironment;
    let mut _161: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>;
    let mut _162: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _163: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _164: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _165: &[wasmer_types::Value<externals::function::Function>];
    let _166: &[wasmer_types::Value<externals::function::Function>; 11];
    let mut _167: isize;
    let mut _172: *mut [i128];
    let mut _173: &mut [i128];
    let mut _174: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _175: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _176: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _177: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _178: &[wasmer_types::Value<externals::function::Function>];
    let mut _179: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _181: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _182: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _183: isize;
    let _186: ();
    let mut _187: *mut i128;
    let mut _188: Rets;
    let mut _189: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _190: &i128;
    let mut _191: bool;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: bool;
    let mut _195: bool;
    let mut _196: bool;
    let mut _197: bool;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: bool;
    let mut _201: bool;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: bool;
    scope 1 {
        debug trampoline => _15;
        let mut _18: [i128; 11];
        scope 2 {
            debug params_list => _18;
            let mut _52: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _52;
                let _53: &mut [i128];
                scope 4 {
                    debug rets_list => _53;
                    let _55: bool;
                    scope 5 {
                        debug using_rets_array => _55;
                        let _56: &mut [i128];
                        let mut _71: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _56;
                            let _90: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _91: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _90;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _91;
                                let _95: *const i128;
                                scope 15 {
                                    debug src_pointer => _95;
                                    let _98: *mut i128;
                                    scope 16 {
                                        debug rets_list => _98;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _71;
                            let _75: usize;
                            let _76: i128;
                            scope 8 {
                                debug i => _75;
                                debug arg => _76;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _111;
    }
    scope 19 {
        debug residual => _119;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _120;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _123;
        let _157: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _157;
            let mut _170: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _170;
                let _171: *mut i128;
                scope 32 {
                    debug mut_rets => _171;
                    let mut _180: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _180;
                        let _184: usize;
                        let _185: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _184;
                            debug ret => _185;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _158: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _158;
                let _168: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _169: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _168;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _169;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _204 = const false;
        _203 = const false;
        _202 = const false;
        _201 = const false;
        _200 = const false;
        _199 = const false;
        _198 = const false;
        _197 = const false;
        _196 = const false;
        _195 = const false;
        _194 = const false;
        _193 = const false;
        _192 = const false;
        _191 = const false;
        _204 = const true;
        _203 = const true;
        _202 = const true;
        _201 = const true;
        _200 = const true;
        _199 = const true;
        _198 = const true;
        _197 = const true;
        _196 = const true;
        _195 = const true;
        _194 = const true;
        _14 = _1;
        _13 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>::is_host(move _14) -> [return: bb1, unwind: bb141];
    }

    bb1: {
        switchInt(move _13) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _109 = _1;
        _108 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>::arg_kind(move _109) -> [return: bb58, unwind: bb141];
    }

    bb3: {
        _16 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _17 = const "Call trampoline not found in wasm function";
        _15 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _16, _17) -> [return: bb4, unwind: bb141];
    }

    bb4: {
        _204 = const false;
        _21 = move _2;
        _20 = <A1 as FromToNativeWasmType>::to_native(move _21) -> [return: bb5, unwind: bb141];
    }

    bb5: {
        _19 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _20) -> [return: bb6, unwind: bb141];
    }

    bb6: {
        _203 = const false;
        _24 = move _3;
        _23 = <A2 as FromToNativeWasmType>::to_native(move _24) -> [return: bb7, unwind: bb141];
    }

    bb7: {
        _22 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _23) -> [return: bb8, unwind: bb141];
    }

    bb8: {
        _202 = const false;
        _27 = move _4;
        _26 = <A3 as FromToNativeWasmType>::to_native(move _27) -> [return: bb9, unwind: bb141];
    }

    bb9: {
        _25 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _26) -> [return: bb10, unwind: bb141];
    }

    bb10: {
        _201 = const false;
        _30 = move _5;
        _29 = <A4 as FromToNativeWasmType>::to_native(move _30) -> [return: bb11, unwind: bb141];
    }

    bb11: {
        _28 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _29) -> [return: bb12, unwind: bb141];
    }

    bb12: {
        _200 = const false;
        _33 = move _6;
        _32 = <A5 as FromToNativeWasmType>::to_native(move _33) -> [return: bb13, unwind: bb141];
    }

    bb13: {
        _31 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _32) -> [return: bb14, unwind: bb141];
    }

    bb14: {
        _199 = const false;
        _36 = move _7;
        _35 = <A6 as FromToNativeWasmType>::to_native(move _36) -> [return: bb15, unwind: bb141];
    }

    bb15: {
        _34 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _35) -> [return: bb16, unwind: bb141];
    }

    bb16: {
        _198 = const false;
        _39 = move _8;
        _38 = <A7 as FromToNativeWasmType>::to_native(move _39) -> [return: bb17, unwind: bb141];
    }

    bb17: {
        _37 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _38) -> [return: bb18, unwind: bb141];
    }

    bb18: {
        _197 = const false;
        _42 = move _9;
        _41 = <A8 as FromToNativeWasmType>::to_native(move _42) -> [return: bb19, unwind: bb141];
    }

    bb19: {
        _40 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _41) -> [return: bb20, unwind: bb141];
    }

    bb20: {
        _196 = const false;
        _45 = move _10;
        _44 = <A9 as FromToNativeWasmType>::to_native(move _45) -> [return: bb21, unwind: bb141];
    }

    bb21: {
        _43 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _44) -> [return: bb22, unwind: bb141];
    }

    bb22: {
        _195 = const false;
        _48 = move _11;
        _47 = <A10 as FromToNativeWasmType>::to_native(move _48) -> [return: bb23, unwind: bb141];
    }

    bb23: {
        _46 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _47) -> [return: bb24, unwind: bb141];
    }

    bb24: {
        _194 = const false;
        _51 = move _12;
        _50 = <A11 as FromToNativeWasmType>::to_native(move _51) -> [return: bb25, unwind: bb141];
    }

    bb25: {
        _49 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _50) -> [return: bb26, unwind: bb141];
    }

    bb26: {
        _18 = [move _19, move _22, move _25, move _28, move _31, move _34, move _37, move _40, move _43, move _46, move _49];
        _52 = <Rets as WasmTypeList>::empty_array() -> [return: bb27, unwind: bb141];
    }

    bb27: {
        _193 = const true;
        _54 = &mut _52;
        _53 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _54) -> [return: bb28, unwind: bb139];
    }

    bb28: {
        _61 = &_18;
        _60 = move _61 as &[i128] (PointerCoercion(Unsize));
        _59 = Len((*_60));
        _63 = &(*_53);
        _62 = Len((*_63));
        _58 = Gt(move _59, move _62);
        switchInt(move _58) -> [0: bb31, otherwise: bb29];
    }

    bb29: {
        _55 = const false;
        _65 = &mut _18;
        _64 = <[i128; 11] as AsMut<[i128]>>::as_mut(move _65) -> [return: bb30, unwind: bb139];
    }

    bb30: {
        _57 = _64;
        goto -> bb42;
    }

    bb31: {
        _55 = const true;
        _70 = &_18;
        _69 = move _70 as &[i128] (PointerCoercion(Unsize));
        _68 = core::slice::<impl [i128]>::iter(move _69) -> [return: bb32, unwind: bb139];
    }

    bb32: {
        _67 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _68) -> [return: bb33, unwind: bb139];
    }

    bb33: {
        _66 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _67) -> [return: bb34, unwind: bb139];
    }

    bb34: {
        _71 = move _66;
        goto -> bb35;
    }

    bb35: {
        _73 = &mut _71;
        _72 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_73) -> [return: bb36, unwind: bb139];
    }

    bb36: {
        _74 = discriminant(_72);
        switchInt(move _74) -> [0: bb39, 1: bb37, otherwise: bb38];
    }

    bb37: {
        _190 = deref_copy (((_72 as Some).0: (usize, &i128)).1: &i128);
        _76 = (*_190);
        _75 = (((_72 as Some).0: (usize, &i128)).0: usize);
        _77 = Len((*_53));
        _78 = Lt(_75, _77);
        assert(move _78, "index out of bounds: the length is {} but the index is {}", move _77, _75) -> [success: bb40, unwind: bb139];
    }

    bb38: {
        unreachable;
    }

    bb39: {
        _79 = <[i128] as AsMut<[i128]>>::as_mut(_53) -> [return: bb41, unwind: bb139];
    }

    bb40: {
        (*_53)[_75] = _76;
        goto -> bb35;
    }

    bb41: {
        _57 = _79;
        goto -> bb42;
    }

    bb42: {
        _56 = _57;
        _82 = &((*_1).0: store::Store);
        _84 = _1;
        _83 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>::vmctx(move _84) -> [return: bb43, unwind: bb139];
    }

    bb43: {
        _86 = _1;
        _85 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>::address(move _86) -> [return: bb44, unwind: bb139];
    }

    bb44: {
        _88 = core::slice::<impl [i128]>::as_mut_ptr(_56) -> [return: bb45, unwind: bb139];
    }

    bb45: {
        _87 = move _88 as *mut u8 (PtrToPtr);
        _81 = wasmer_call_trampoline::<Store>(_82, move _83, _15, move _85, move _87) -> [return: bb46, unwind: bb139];
    }

    bb46: {
        _80 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _81) -> [return: bb47, unwind: bb139];
    }

    bb47: {
        _89 = discriminant(_80);
        switchInt(move _89) -> [0: bb48, 1: bb49, otherwise: bb38];
    }

    bb48: {
        _92 = &(*_53);
        _91 = Len((*_92));
        _93 = _55;
        switchInt(move _93) -> [0: bb51, otherwise: bb56];
    }

    bb49: {
        _90 = move ((_80 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _90) -> [return: bb50, unwind: bb139];
    }

    bb50: {
        drop(_52) -> [return: bb109, unwind: bb141];
    }

    bb51: {
        _94 = Gt(_91, const 0_usize);
        switchInt(move _94) -> [0: bb56, otherwise: bb52];
    }

    bb52: {
        _97 = &_18;
        _96 = move _97 as &[i128] (PointerCoercion(Unsize));
        _95 = core::slice::<impl [i128]>::as_ptr(move _96) -> [return: bb53, unwind: bb139];
    }

    bb53: {
        _101 = &mut _52;
        _100 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _101) -> [return: bb54, unwind: bb139];
    }

    bb54: {
        _102 = const 0_usize;
        _103 = Len((*_100));
        _104 = Lt(_102, _103);
        assert(move _104, "index out of bounds: the length is {} but the index is {}", move _103, _102) -> [success: bb55, unwind: bb139];
    }

    bb55: {
        _99 = &mut (*_100)[_102];
        _98 = &raw mut (*_99);
        _105 = copy_nonoverlapping::<i128>(_95, _98, _91) -> [return: bb152, unwind: bb139];
    }

    bb56: {
        _193 = const false;
        _107 = move _52;
        _106 = <Rets as WasmTypeList>::from_array(move _107) -> [return: bb57, unwind: bb139];
    }

    bb57: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _106);
        _193 = const false;
        goto -> bb110;
    }

    bb58: {
        _110 = discriminant(_108);
        switchInt(move _110) -> [0: bb60, 1: bb59, otherwise: bb38];
    }

    bb59: {
        _204 = const false;
        _126 = move _2;
        _125 = <A1 as FromToNativeWasmType>::to_native(move _126) -> [return: bb68, unwind: bb141];
    }

    bb60: {
        _117 = &_1;
        _204 = const false;
        _203 = const false;
        _202 = const false;
        _201 = const false;
        _200 = const false;
        _199 = const false;
        _198 = const false;
        _197 = const false;
        _196 = const false;
        _195 = const false;
        _194 = const false;
        _116 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _117, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12 };
        _115 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _116);
        _114 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _115) -> [return: bb61, unwind: bb141];
    }

    bb61: {
        _113 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _114, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb62, unwind: bb141];
    }

    bb62: {
        _112 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _113) -> [return: bb63, unwind: bb141];
    }

    bb63: {
        _118 = discriminant(_112);
        switchInt(move _118) -> [0: bb64, 1: bb65, otherwise: bb38];
    }

    bb64: {
        _120 = move ((_112 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _192 = const true;
        _111 = move _120;
        _192 = const false;
        _122 = move _111;
        _121 = <Rets as WasmTypeList>::from_c_struct(move _122) -> [return: bb67, unwind: bb137];
    }

    bb65: {
        _119 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _119) -> [return: bb66, unwind: bb141];
    }

    bb66: {
        _192 = const false;
        goto -> bb110;
    }

    bb67: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _121);
        _192 = const false;
        goto -> bb110;
    }

    bb68: {
        _124 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _125) -> [return: bb69, unwind: bb141];
    }

    bb69: {
        _203 = const false;
        _129 = move _3;
        _128 = <A2 as FromToNativeWasmType>::to_native(move _129) -> [return: bb70, unwind: bb122];
    }

    bb70: {
        _127 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _128) -> [return: bb71, unwind: bb122];
    }

    bb71: {
        _202 = const false;
        _132 = move _4;
        _131 = <A3 as FromToNativeWasmType>::to_native(move _132) -> [return: bb72, unwind: bb121];
    }

    bb72: {
        _130 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _131) -> [return: bb73, unwind: bb121];
    }

    bb73: {
        _201 = const false;
        _135 = move _5;
        _134 = <A4 as FromToNativeWasmType>::to_native(move _135) -> [return: bb74, unwind: bb120];
    }

    bb74: {
        _133 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _134) -> [return: bb75, unwind: bb120];
    }

    bb75: {
        _200 = const false;
        _138 = move _6;
        _137 = <A5 as FromToNativeWasmType>::to_native(move _138) -> [return: bb76, unwind: bb119];
    }

    bb76: {
        _136 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _137) -> [return: bb77, unwind: bb119];
    }

    bb77: {
        _199 = const false;
        _141 = move _7;
        _140 = <A6 as FromToNativeWasmType>::to_native(move _141) -> [return: bb78, unwind: bb118];
    }

    bb78: {
        _139 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _140) -> [return: bb79, unwind: bb118];
    }

    bb79: {
        _198 = const false;
        _144 = move _8;
        _143 = <A7 as FromToNativeWasmType>::to_native(move _144) -> [return: bb80, unwind: bb117];
    }

    bb80: {
        _142 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _143) -> [return: bb81, unwind: bb117];
    }

    bb81: {
        _197 = const false;
        _147 = move _9;
        _146 = <A8 as FromToNativeWasmType>::to_native(move _147) -> [return: bb82, unwind: bb116];
    }

    bb82: {
        _145 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _146) -> [return: bb83, unwind: bb116];
    }

    bb83: {
        _196 = const false;
        _150 = move _10;
        _149 = <A9 as FromToNativeWasmType>::to_native(move _150) -> [return: bb84, unwind: bb115];
    }

    bb84: {
        _148 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _149) -> [return: bb85, unwind: bb115];
    }

    bb85: {
        _195 = const false;
        _153 = move _11;
        _152 = <A10 as FromToNativeWasmType>::to_native(move _153) -> [return: bb86, unwind: bb114];
    }

    bb86: {
        _151 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _152) -> [return: bb87, unwind: bb114];
    }

    bb87: {
        _194 = const false;
        _156 = move _12;
        _155 = <A11 as FromToNativeWasmType>::to_native(move _156) -> [return: bb88, unwind: bb113];
    }

    bb88: {
        _154 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _155) -> [return: bb89, unwind: bb113];
    }

    bb89: {
        _123 = [move _124, move _127, move _130, move _133, move _136, move _139, move _142, move _145, move _148, move _151, move _154];
        _161 = _1;
        _160 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>::vmctx(move _161) -> [return: bb90, unwind: bb112];
    }

    bb90: {
        _159 = (_160.1: *mut std::ffi::c_void);
        _158 = move _159 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _164 = &((*_158).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _166 = &_123;
        _165 = _166 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _163 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _164, move _165) -> [return: bb91, unwind: bb112];
    }

    bb91: {
        _162 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _163) -> [return: bb92, unwind: bb112];
    }

    bb92: {
        _167 = discriminant(_162);
        switchInt(move _167) -> [0: bb93, 1: bb94, otherwise: bb38];
    }

    bb93: {
        _169 = move ((_162 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _157 = move _169;
        _170 = <Rets as WasmTypeList>::empty_array() -> [return: bb96, unwind: bb111];
    }

    bb94: {
        _168 = move ((_162 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _168) -> [return: bb95, unwind: bb112];
    }

    bb95: {
        drop(_123) -> [return: bb110, unwind: bb141];
    }

    bb96: {
        _191 = const true;
        _174 = &mut _170;
        _173 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _174) -> [return: bb97, unwind: bb135];
    }

    bb97: {
        _172 = &raw mut (*_173);
        _171 = move _172 as *mut i128 (PtrToPtr);
        _179 = &_157;
        _178 = <Vec<Value<function::Function>> as Deref>::deref(move _179) -> [return: bb98, unwind: bb135];
    }

    bb98: {
        _177 = core::slice::<impl [Value<function::Function>]>::iter(_178) -> [return: bb99, unwind: bb135];
    }

    bb99: {
        _176 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _177) -> [return: bb100, unwind: bb135];
    }

    bb100: {
        _175 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _176) -> [return: bb101, unwind: bb135];
    }

    bb101: {
        _180 = move _175;
        goto -> bb102;
    }

    bb102: {
        _182 = &mut _180;
        _181 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_182) -> [return: bb103, unwind: bb135];
    }

    bb103: {
        _183 = discriminant(_181);
        switchInt(move _183) -> [0: bb105, 1: bb104, otherwise: bb38];
    }

    bb104: {
        _184 = (((_181 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _185 = (((_181 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _187 = std::ptr::mut_ptr::<impl *mut i128>::add(_171, _184) -> [return: bb106, unwind: bb135];
    }

    bb105: {
        _191 = const false;
        _189 = move _170;
        _188 = <Rets as WasmTypeList>::from_array(move _189) -> [return: bb107, unwind: bb135];
    }

    bb106: {
        _186 = Value::<function::Function>::write_value_to(_185, move _187) -> [return: bb153, unwind: bb135];
    }

    bb107: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _188);
        _191 = const false;
        drop(_157) -> [return: bb108, unwind: bb112];
    }

    bb108: {
        drop(_123) -> [return: bb110, unwind: bb141];
    }

    bb109: {
        _193 = const false;
        goto -> bb110;
    }

    bb110: {
        return;
    }

    bb111 (cleanup): {
        drop(_157) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_123) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_151) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_148) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_145) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop(_142) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        drop(_139) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop(_136) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        drop(_133) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_130) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_127) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        drop(_124) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        switchInt(_195) -> [0: bb124, otherwise: bb142];
    }

    bb124 (cleanup): {
        switchInt(_196) -> [0: bb125, otherwise: bb143];
    }

    bb125 (cleanup): {
        switchInt(_197) -> [0: bb126, otherwise: bb144];
    }

    bb126 (cleanup): {
        switchInt(_198) -> [0: bb127, otherwise: bb145];
    }

    bb127 (cleanup): {
        switchInt(_199) -> [0: bb128, otherwise: bb146];
    }

    bb128 (cleanup): {
        switchInt(_200) -> [0: bb129, otherwise: bb147];
    }

    bb129 (cleanup): {
        switchInt(_201) -> [0: bb130, otherwise: bb148];
    }

    bb130 (cleanup): {
        switchInt(_202) -> [0: bb131, otherwise: bb149];
    }

    bb131 (cleanup): {
        switchInt(_203) -> [0: bb132, otherwise: bb150];
    }

    bb132 (cleanup): {
        switchInt(_204) -> [0: bb133, otherwise: bb151];
    }

    bb133 (cleanup): {
        resume;
    }

    bb134 (cleanup): {
        drop(_170) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        switchInt(_191) -> [0: bb111, otherwise: bb134];
    }

    bb136 (cleanup): {
        drop(_111) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        switchInt(_192) -> [0: bb141, otherwise: bb136];
    }

    bb138 (cleanup): {
        drop(_52) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        switchInt(_193) -> [0: bb141, otherwise: bb138];
    }

    bb140 (cleanup): {
        drop(_12) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        switchInt(_194) -> [0: bb123, otherwise: bb140];
    }

    bb142 (cleanup): {
        drop(_11) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        drop(_10) -> [return: bb125, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_9) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_8) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_7) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        drop(_6) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        drop(_5) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_4) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_3) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_2) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb152: {
        goto -> bb56;
    }

    bb153: {
        goto -> bb102;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    debug A9 => (_1.9: A9);
    debug A10 => (_1.10: A10);
    debug A11 => (_1.11: A11);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: A9;
    let mut _14: A10;
    let mut _15: A11;
    let mut _16: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>;
    let mut _17: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>;
    let mut _18: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>;
    let mut _19: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _20 = const false;
        _20 = const true;
        _21 = const true;
        _22 = const true;
        _23 = const true;
        _24 = const true;
        _25 = const true;
        _26 = const true;
        _27 = const true;
        _28 = const true;
        _29 = const true;
        _30 = const true;
        _16 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>);
        _17 = deref_copy (*_16);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>::address(_17) -> [return: bb1, unwind: bb26];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _18 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>);
        _19 = deref_copy (*_18);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>::vmctx(_19) -> [return: bb2, unwind: bb26];
    }

    bb2: {
        _30 = const false;
        _5 = move (_1.1: A1);
        _29 = const false;
        _6 = move (_1.2: A2);
        _28 = const false;
        _7 = move (_1.3: A3);
        _27 = const false;
        _8 = move (_1.4: A4);
        _26 = const false;
        _9 = move (_1.5: A5);
        _25 = const false;
        _10 = move (_1.6: A6);
        _24 = const false;
        _11 = move (_1.7: A7);
        _23 = const false;
        _12 = move (_1.8: A8);
        _22 = const false;
        _13 = move (_1.9: A9);
        _21 = const false;
        _14 = move (_1.10: A10);
        _20 = const false;
        _15 = move (_1.11: A11);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_20) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.11: A11)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_21) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.10: A10)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_22) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.9: A9)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_23) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.8: A8)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_24) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.7: A7)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_25) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.6: A6)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_26) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.5: A5)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_27) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.4: A4)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_28) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.3: A3)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_29) -> [0: bb21, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.2: A2)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop((_1.1: A1)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_30) -> [0: bb23, otherwise: bb25];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8, _10: A9, _11: A10, _12: A11, _13: A12) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _14: bool;
    let mut _15: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>;
    let _16: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _17: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _18: &str;
    let mut _20: i128;
    let mut _21: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _22: A1;
    let mut _23: i128;
    let mut _24: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A2;
    let mut _26: i128;
    let mut _27: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A3;
    let mut _29: i128;
    let mut _30: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A4;
    let mut _32: i128;
    let mut _33: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A5;
    let mut _35: i128;
    let mut _36: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A6;
    let mut _38: i128;
    let mut _39: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A7;
    let mut _41: i128;
    let mut _42: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A8;
    let mut _44: i128;
    let mut _45: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A9;
    let mut _47: i128;
    let mut _48: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A10;
    let mut _50: i128;
    let mut _51: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A11;
    let mut _53: i128;
    let mut _54: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A12;
    let mut _58: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _61: &mut [i128];
    let mut _62: bool;
    let mut _63: usize;
    let mut _64: &[i128];
    let mut _65: &[i128; 12];
    let mut _66: usize;
    let mut _67: &[i128];
    let mut _68: &mut [i128];
    let mut _69: &mut [i128; 12];
    let mut _70: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _71: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _72: std::slice::Iter<'_, i128>;
    let mut _73: &[i128];
    let mut _74: &[i128; 12];
    let mut _76: std::option::Option<(usize, &i128)>;
    let mut _77: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _78: isize;
    let mut _81: usize;
    let mut _82: bool;
    let mut _83: &mut [i128];
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _85: std::result::Result<(), wasmer_vm::Trap>;
    let _86: &store::Store;
    let mut _87: wasmer_vm::VMFunctionEnvironment;
    let mut _88: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>;
    let mut _89: *const wasmer_vm::VMFunctionBody;
    let mut _90: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>;
    let mut _91: *mut u8;
    let mut _92: *mut i128;
    let mut _93: isize;
    let mut _96: &[i128];
    let mut _97: bool;
    let mut _98: bool;
    let mut _100: &[i128];
    let mut _101: &[i128; 12];
    let mut _103: &mut i128;
    let mut _104: &mut [i128];
    let mut _105: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _106: usize;
    let mut _107: usize;
    let mut _108: bool;
    let _109: ();
    let mut _110: Rets;
    let mut _111: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _112: wasmer_vm::VMFunctionKind;
    let mut _113: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>;
    let mut _114: isize;
    let _115: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _117: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _118: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _119: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _120: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _121: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>;
    let mut _122: isize;
    let _123: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _124: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _125: Rets;
    let mut _126: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _127: [wasmer_types::Value<externals::function::Function>; 12];
    let mut _128: wasmer_types::Value<externals::function::Function>;
    let mut _129: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _130: A1;
    let mut _131: wasmer_types::Value<externals::function::Function>;
    let mut _132: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _133: A2;
    let mut _134: wasmer_types::Value<externals::function::Function>;
    let mut _135: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _136: A3;
    let mut _137: wasmer_types::Value<externals::function::Function>;
    let mut _138: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _139: A4;
    let mut _140: wasmer_types::Value<externals::function::Function>;
    let mut _141: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _142: A5;
    let mut _143: wasmer_types::Value<externals::function::Function>;
    let mut _144: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _145: A6;
    let mut _146: wasmer_types::Value<externals::function::Function>;
    let mut _147: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _148: A7;
    let mut _149: wasmer_types::Value<externals::function::Function>;
    let mut _150: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _151: A8;
    let mut _152: wasmer_types::Value<externals::function::Function>;
    let mut _153: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _154: A9;
    let mut _155: wasmer_types::Value<externals::function::Function>;
    let mut _156: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _157: A10;
    let mut _158: wasmer_types::Value<externals::function::Function>;
    let mut _159: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _160: A11;
    let mut _161: wasmer_types::Value<externals::function::Function>;
    let mut _162: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _163: A12;
    let mut _166: *mut std::ffi::c_void;
    let mut _167: wasmer_vm::VMFunctionEnvironment;
    let mut _168: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>;
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _170: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _171: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _172: &[wasmer_types::Value<externals::function::Function>];
    let _173: &[wasmer_types::Value<externals::function::Function>; 12];
    let mut _174: isize;
    let mut _179: *mut [i128];
    let mut _180: &mut [i128];
    let mut _181: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _182: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _183: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _184: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _185: &[wasmer_types::Value<externals::function::Function>];
    let mut _186: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _188: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _189: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _190: isize;
    let _193: ();
    let mut _194: *mut i128;
    let mut _195: Rets;
    let mut _196: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _197: &i128;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: bool;
    let mut _201: bool;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: bool;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: bool;
    let mut _208: bool;
    let mut _209: bool;
    let mut _210: bool;
    let mut _211: bool;
    let mut _212: bool;
    scope 1 {
        debug trampoline => _16;
        let mut _19: [i128; 12];
        scope 2 {
            debug params_list => _19;
            let mut _56: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _56;
                let _57: &mut [i128];
                scope 4 {
                    debug rets_list => _57;
                    let _59: bool;
                    scope 5 {
                        debug using_rets_array => _59;
                        let _60: &mut [i128];
                        let mut _75: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _60;
                            let _94: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _95: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _94;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _95;
                                let _99: *const i128;
                                scope 15 {
                                    debug src_pointer => _99;
                                    let _102: *mut i128;
                                    scope 16 {
                                        debug rets_list => _102;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _75;
                            let _79: usize;
                            let _80: i128;
                            scope 8 {
                                debug i => _79;
                                debug arg => _80;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _115;
    }
    scope 19 {
        debug residual => _123;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _124;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _127;
        let _164: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _164;
            let mut _177: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _177;
                let _178: *mut i128;
                scope 32 {
                    debug mut_rets => _178;
                    let mut _187: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _187;
                        let _191: usize;
                        let _192: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _191;
                            debug ret => _192;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _165: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _165;
                let _175: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _176: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _175;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _176;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _212 = const false;
        _211 = const false;
        _210 = const false;
        _209 = const false;
        _208 = const false;
        _207 = const false;
        _206 = const false;
        _205 = const false;
        _204 = const false;
        _203 = const false;
        _202 = const false;
        _201 = const false;
        _200 = const false;
        _199 = const false;
        _198 = const false;
        _212 = const true;
        _211 = const true;
        _210 = const true;
        _209 = const true;
        _208 = const true;
        _207 = const true;
        _206 = const true;
        _205 = const true;
        _204 = const true;
        _203 = const true;
        _202 = const true;
        _201 = const true;
        _15 = _1;
        _14 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>::is_host(move _15) -> [return: bb1, unwind: bb147];
    }

    bb1: {
        switchInt(move _14) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _113 = _1;
        _112 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>::arg_kind(move _113) -> [return: bb60, unwind: bb147];
    }

    bb3: {
        _17 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _18 = const "Call trampoline not found in wasm function";
        _16 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _17, _18) -> [return: bb4, unwind: bb147];
    }

    bb4: {
        _212 = const false;
        _22 = move _2;
        _21 = <A1 as FromToNativeWasmType>::to_native(move _22) -> [return: bb5, unwind: bb147];
    }

    bb5: {
        _20 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _21) -> [return: bb6, unwind: bb147];
    }

    bb6: {
        _211 = const false;
        _25 = move _3;
        _24 = <A2 as FromToNativeWasmType>::to_native(move _25) -> [return: bb7, unwind: bb147];
    }

    bb7: {
        _23 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _24) -> [return: bb8, unwind: bb147];
    }

    bb8: {
        _210 = const false;
        _28 = move _4;
        _27 = <A3 as FromToNativeWasmType>::to_native(move _28) -> [return: bb9, unwind: bb147];
    }

    bb9: {
        _26 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _27) -> [return: bb10, unwind: bb147];
    }

    bb10: {
        _209 = const false;
        _31 = move _5;
        _30 = <A4 as FromToNativeWasmType>::to_native(move _31) -> [return: bb11, unwind: bb147];
    }

    bb11: {
        _29 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _30) -> [return: bb12, unwind: bb147];
    }

    bb12: {
        _208 = const false;
        _34 = move _6;
        _33 = <A5 as FromToNativeWasmType>::to_native(move _34) -> [return: bb13, unwind: bb147];
    }

    bb13: {
        _32 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _33) -> [return: bb14, unwind: bb147];
    }

    bb14: {
        _207 = const false;
        _37 = move _7;
        _36 = <A6 as FromToNativeWasmType>::to_native(move _37) -> [return: bb15, unwind: bb147];
    }

    bb15: {
        _35 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _36) -> [return: bb16, unwind: bb147];
    }

    bb16: {
        _206 = const false;
        _40 = move _8;
        _39 = <A7 as FromToNativeWasmType>::to_native(move _40) -> [return: bb17, unwind: bb147];
    }

    bb17: {
        _38 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _39) -> [return: bb18, unwind: bb147];
    }

    bb18: {
        _205 = const false;
        _43 = move _9;
        _42 = <A8 as FromToNativeWasmType>::to_native(move _43) -> [return: bb19, unwind: bb147];
    }

    bb19: {
        _41 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _42) -> [return: bb20, unwind: bb147];
    }

    bb20: {
        _204 = const false;
        _46 = move _10;
        _45 = <A9 as FromToNativeWasmType>::to_native(move _46) -> [return: bb21, unwind: bb147];
    }

    bb21: {
        _44 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _45) -> [return: bb22, unwind: bb147];
    }

    bb22: {
        _203 = const false;
        _49 = move _11;
        _48 = <A10 as FromToNativeWasmType>::to_native(move _49) -> [return: bb23, unwind: bb147];
    }

    bb23: {
        _47 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _48) -> [return: bb24, unwind: bb147];
    }

    bb24: {
        _202 = const false;
        _52 = move _12;
        _51 = <A11 as FromToNativeWasmType>::to_native(move _52) -> [return: bb25, unwind: bb147];
    }

    bb25: {
        _50 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _51) -> [return: bb26, unwind: bb147];
    }

    bb26: {
        _201 = const false;
        _55 = move _13;
        _54 = <A12 as FromToNativeWasmType>::to_native(move _55) -> [return: bb27, unwind: bb147];
    }

    bb27: {
        _53 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _54) -> [return: bb28, unwind: bb147];
    }

    bb28: {
        _19 = [move _20, move _23, move _26, move _29, move _32, move _35, move _38, move _41, move _44, move _47, move _50, move _53];
        _56 = <Rets as WasmTypeList>::empty_array() -> [return: bb29, unwind: bb147];
    }

    bb29: {
        _200 = const true;
        _58 = &mut _56;
        _57 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _58) -> [return: bb30, unwind: bb145];
    }

    bb30: {
        _65 = &_19;
        _64 = move _65 as &[i128] (PointerCoercion(Unsize));
        _63 = Len((*_64));
        _67 = &(*_57);
        _66 = Len((*_67));
        _62 = Gt(move _63, move _66);
        switchInt(move _62) -> [0: bb33, otherwise: bb31];
    }

    bb31: {
        _59 = const false;
        _69 = &mut _19;
        _68 = <[i128; 12] as AsMut<[i128]>>::as_mut(move _69) -> [return: bb32, unwind: bb145];
    }

    bb32: {
        _61 = _68;
        goto -> bb44;
    }

    bb33: {
        _59 = const true;
        _74 = &_19;
        _73 = move _74 as &[i128] (PointerCoercion(Unsize));
        _72 = core::slice::<impl [i128]>::iter(move _73) -> [return: bb34, unwind: bb145];
    }

    bb34: {
        _71 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _72) -> [return: bb35, unwind: bb145];
    }

    bb35: {
        _70 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _71) -> [return: bb36, unwind: bb145];
    }

    bb36: {
        _75 = move _70;
        goto -> bb37;
    }

    bb37: {
        _77 = &mut _75;
        _76 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_77) -> [return: bb38, unwind: bb145];
    }

    bb38: {
        _78 = discriminant(_76);
        switchInt(move _78) -> [0: bb41, 1: bb39, otherwise: bb40];
    }

    bb39: {
        _197 = deref_copy (((_76 as Some).0: (usize, &i128)).1: &i128);
        _80 = (*_197);
        _79 = (((_76 as Some).0: (usize, &i128)).0: usize);
        _81 = Len((*_57));
        _82 = Lt(_79, _81);
        assert(move _82, "index out of bounds: the length is {} but the index is {}", move _81, _79) -> [success: bb42, unwind: bb145];
    }

    bb40: {
        unreachable;
    }

    bb41: {
        _83 = <[i128] as AsMut<[i128]>>::as_mut(_57) -> [return: bb43, unwind: bb145];
    }

    bb42: {
        (*_57)[_79] = _80;
        goto -> bb37;
    }

    bb43: {
        _61 = _83;
        goto -> bb44;
    }

    bb44: {
        _60 = _61;
        _86 = &((*_1).0: store::Store);
        _88 = _1;
        _87 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>::vmctx(move _88) -> [return: bb45, unwind: bb145];
    }

    bb45: {
        _90 = _1;
        _89 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>::address(move _90) -> [return: bb46, unwind: bb145];
    }

    bb46: {
        _92 = core::slice::<impl [i128]>::as_mut_ptr(_60) -> [return: bb47, unwind: bb145];
    }

    bb47: {
        _91 = move _92 as *mut u8 (PtrToPtr);
        _85 = wasmer_call_trampoline::<Store>(_86, move _87, _16, move _89, move _91) -> [return: bb48, unwind: bb145];
    }

    bb48: {
        _84 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _85) -> [return: bb49, unwind: bb145];
    }

    bb49: {
        _93 = discriminant(_84);
        switchInt(move _93) -> [0: bb50, 1: bb51, otherwise: bb40];
    }

    bb50: {
        _96 = &(*_57);
        _95 = Len((*_96));
        _97 = _59;
        switchInt(move _97) -> [0: bb53, otherwise: bb58];
    }

    bb51: {
        _94 = move ((_84 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _94) -> [return: bb52, unwind: bb145];
    }

    bb52: {
        drop(_56) -> [return: bb113, unwind: bb147];
    }

    bb53: {
        _98 = Gt(_95, const 0_usize);
        switchInt(move _98) -> [0: bb58, otherwise: bb54];
    }

    bb54: {
        _101 = &_19;
        _100 = move _101 as &[i128] (PointerCoercion(Unsize));
        _99 = core::slice::<impl [i128]>::as_ptr(move _100) -> [return: bb55, unwind: bb145];
    }

    bb55: {
        _105 = &mut _56;
        _104 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _105) -> [return: bb56, unwind: bb145];
    }

    bb56: {
        _106 = const 0_usize;
        _107 = Len((*_104));
        _108 = Lt(_106, _107);
        assert(move _108, "index out of bounds: the length is {} but the index is {}", move _107, _106) -> [success: bb57, unwind: bb145];
    }

    bb57: {
        _103 = &mut (*_104)[_106];
        _102 = &raw mut (*_103);
        _109 = copy_nonoverlapping::<i128>(_99, _102, _95) -> [return: bb159, unwind: bb145];
    }

    bb58: {
        _200 = const false;
        _111 = move _56;
        _110 = <Rets as WasmTypeList>::from_array(move _111) -> [return: bb59, unwind: bb145];
    }

    bb59: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _110);
        _200 = const false;
        goto -> bb114;
    }

    bb60: {
        _114 = discriminant(_112);
        switchInt(move _114) -> [0: bb62, 1: bb61, otherwise: bb40];
    }

    bb61: {
        _212 = const false;
        _130 = move _2;
        _129 = <A1 as FromToNativeWasmType>::to_native(move _130) -> [return: bb70, unwind: bb147];
    }

    bb62: {
        _121 = &_1;
        _212 = const false;
        _211 = const false;
        _210 = const false;
        _209 = const false;
        _208 = const false;
        _207 = const false;
        _206 = const false;
        _205 = const false;
        _204 = const false;
        _203 = const false;
        _202 = const false;
        _201 = const false;
        _120 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _121, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13 };
        _119 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _120);
        _118 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _119) -> [return: bb63, unwind: bb147];
    }

    bb63: {
        _117 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _118, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb64, unwind: bb147];
    }

    bb64: {
        _116 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _117) -> [return: bb65, unwind: bb147];
    }

    bb65: {
        _122 = discriminant(_116);
        switchInt(move _122) -> [0: bb66, 1: bb67, otherwise: bb40];
    }

    bb66: {
        _124 = move ((_116 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _199 = const true;
        _115 = move _124;
        _199 = const false;
        _126 = move _115;
        _125 = <Rets as WasmTypeList>::from_c_struct(move _126) -> [return: bb69, unwind: bb143];
    }

    bb67: {
        _123 = move ((_116 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _123) -> [return: bb68, unwind: bb147];
    }

    bb68: {
        _199 = const false;
        goto -> bb114;
    }

    bb69: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _125);
        _199 = const false;
        goto -> bb114;
    }

    bb70: {
        _128 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _129) -> [return: bb71, unwind: bb147];
    }

    bb71: {
        _211 = const false;
        _133 = move _3;
        _132 = <A2 as FromToNativeWasmType>::to_native(move _133) -> [return: bb72, unwind: bb127];
    }

    bb72: {
        _131 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _132) -> [return: bb73, unwind: bb127];
    }

    bb73: {
        _210 = const false;
        _136 = move _4;
        _135 = <A3 as FromToNativeWasmType>::to_native(move _136) -> [return: bb74, unwind: bb126];
    }

    bb74: {
        _134 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _135) -> [return: bb75, unwind: bb126];
    }

    bb75: {
        _209 = const false;
        _139 = move _5;
        _138 = <A4 as FromToNativeWasmType>::to_native(move _139) -> [return: bb76, unwind: bb125];
    }

    bb76: {
        _137 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _138) -> [return: bb77, unwind: bb125];
    }

    bb77: {
        _208 = const false;
        _142 = move _6;
        _141 = <A5 as FromToNativeWasmType>::to_native(move _142) -> [return: bb78, unwind: bb124];
    }

    bb78: {
        _140 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _141) -> [return: bb79, unwind: bb124];
    }

    bb79: {
        _207 = const false;
        _145 = move _7;
        _144 = <A6 as FromToNativeWasmType>::to_native(move _145) -> [return: bb80, unwind: bb123];
    }

    bb80: {
        _143 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _144) -> [return: bb81, unwind: bb123];
    }

    bb81: {
        _206 = const false;
        _148 = move _8;
        _147 = <A7 as FromToNativeWasmType>::to_native(move _148) -> [return: bb82, unwind: bb122];
    }

    bb82: {
        _146 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _147) -> [return: bb83, unwind: bb122];
    }

    bb83: {
        _205 = const false;
        _151 = move _9;
        _150 = <A8 as FromToNativeWasmType>::to_native(move _151) -> [return: bb84, unwind: bb121];
    }

    bb84: {
        _149 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _150) -> [return: bb85, unwind: bb121];
    }

    bb85: {
        _204 = const false;
        _154 = move _10;
        _153 = <A9 as FromToNativeWasmType>::to_native(move _154) -> [return: bb86, unwind: bb120];
    }

    bb86: {
        _152 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _153) -> [return: bb87, unwind: bb120];
    }

    bb87: {
        _203 = const false;
        _157 = move _11;
        _156 = <A10 as FromToNativeWasmType>::to_native(move _157) -> [return: bb88, unwind: bb119];
    }

    bb88: {
        _155 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _156) -> [return: bb89, unwind: bb119];
    }

    bb89: {
        _202 = const false;
        _160 = move _12;
        _159 = <A11 as FromToNativeWasmType>::to_native(move _160) -> [return: bb90, unwind: bb118];
    }

    bb90: {
        _158 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _159) -> [return: bb91, unwind: bb118];
    }

    bb91: {
        _201 = const false;
        _163 = move _13;
        _162 = <A12 as FromToNativeWasmType>::to_native(move _163) -> [return: bb92, unwind: bb117];
    }

    bb92: {
        _161 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _162) -> [return: bb93, unwind: bb117];
    }

    bb93: {
        _127 = [move _128, move _131, move _134, move _137, move _140, move _143, move _146, move _149, move _152, move _155, move _158, move _161];
        _168 = _1;
        _167 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>::vmctx(move _168) -> [return: bb94, unwind: bb116];
    }

    bb94: {
        _166 = (_167.1: *mut std::ffi::c_void);
        _165 = move _166 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _171 = &((*_165).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _173 = &_127;
        _172 = _173 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _170 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _171, move _172) -> [return: bb95, unwind: bb116];
    }

    bb95: {
        _169 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _170) -> [return: bb96, unwind: bb116];
    }

    bb96: {
        _174 = discriminant(_169);
        switchInt(move _174) -> [0: bb97, 1: bb98, otherwise: bb40];
    }

    bb97: {
        _176 = move ((_169 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _164 = move _176;
        _177 = <Rets as WasmTypeList>::empty_array() -> [return: bb100, unwind: bb115];
    }

    bb98: {
        _175 = move ((_169 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _175) -> [return: bb99, unwind: bb116];
    }

    bb99: {
        drop(_127) -> [return: bb114, unwind: bb147];
    }

    bb100: {
        _198 = const true;
        _181 = &mut _177;
        _180 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _181) -> [return: bb101, unwind: bb141];
    }

    bb101: {
        _179 = &raw mut (*_180);
        _178 = move _179 as *mut i128 (PtrToPtr);
        _186 = &_164;
        _185 = <Vec<Value<function::Function>> as Deref>::deref(move _186) -> [return: bb102, unwind: bb141];
    }

    bb102: {
        _184 = core::slice::<impl [Value<function::Function>]>::iter(_185) -> [return: bb103, unwind: bb141];
    }

    bb103: {
        _183 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _184) -> [return: bb104, unwind: bb141];
    }

    bb104: {
        _182 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _183) -> [return: bb105, unwind: bb141];
    }

    bb105: {
        _187 = move _182;
        goto -> bb106;
    }

    bb106: {
        _189 = &mut _187;
        _188 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_189) -> [return: bb107, unwind: bb141];
    }

    bb107: {
        _190 = discriminant(_188);
        switchInt(move _190) -> [0: bb109, 1: bb108, otherwise: bb40];
    }

    bb108: {
        _191 = (((_188 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _192 = (((_188 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _194 = std::ptr::mut_ptr::<impl *mut i128>::add(_178, _191) -> [return: bb110, unwind: bb141];
    }

    bb109: {
        _198 = const false;
        _196 = move _177;
        _195 = <Rets as WasmTypeList>::from_array(move _196) -> [return: bb111, unwind: bb141];
    }

    bb110: {
        _193 = Value::<function::Function>::write_value_to(_192, move _194) -> [return: bb160, unwind: bb141];
    }

    bb111: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _195);
        _198 = const false;
        drop(_164) -> [return: bb112, unwind: bb116];
    }

    bb112: {
        drop(_127) -> [return: bb114, unwind: bb147];
    }

    bb113: {
        _200 = const false;
        goto -> bb114;
    }

    bb114: {
        return;
    }

    bb115 (cleanup): {
        drop(_164) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop(_127) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        drop(_158) -> [return: bb118, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop(_155) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        drop(_152) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_149) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_146) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        drop(_143) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop(_140) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop(_137) -> [return: bb125, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_134) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_131) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        drop(_128) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        switchInt(_202) -> [0: bb129, otherwise: bb148];
    }

    bb129 (cleanup): {
        switchInt(_203) -> [0: bb130, otherwise: bb149];
    }

    bb130 (cleanup): {
        switchInt(_204) -> [0: bb131, otherwise: bb150];
    }

    bb131 (cleanup): {
        switchInt(_205) -> [0: bb132, otherwise: bb151];
    }

    bb132 (cleanup): {
        switchInt(_206) -> [0: bb133, otherwise: bb152];
    }

    bb133 (cleanup): {
        switchInt(_207) -> [0: bb134, otherwise: bb153];
    }

    bb134 (cleanup): {
        switchInt(_208) -> [0: bb135, otherwise: bb154];
    }

    bb135 (cleanup): {
        switchInt(_209) -> [0: bb136, otherwise: bb155];
    }

    bb136 (cleanup): {
        switchInt(_210) -> [0: bb137, otherwise: bb156];
    }

    bb137 (cleanup): {
        switchInt(_211) -> [0: bb138, otherwise: bb157];
    }

    bb138 (cleanup): {
        switchInt(_212) -> [0: bb139, otherwise: bb158];
    }

    bb139 (cleanup): {
        resume;
    }

    bb140 (cleanup): {
        drop(_177) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        switchInt(_198) -> [0: bb115, otherwise: bb140];
    }

    bb142 (cleanup): {
        drop(_115) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        switchInt(_199) -> [0: bb147, otherwise: bb142];
    }

    bb144 (cleanup): {
        drop(_56) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        switchInt(_200) -> [0: bb147, otherwise: bb144];
    }

    bb146 (cleanup): {
        drop(_13) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        switchInt(_201) -> [0: bb128, otherwise: bb146];
    }

    bb148 (cleanup): {
        drop(_12) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_11) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_10) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_9) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_8) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_7) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_6) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_5) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_4) -> [return: bb137, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        drop(_3) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_2) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb159: {
        goto -> bb58;
    }

    bb160: {
        goto -> bb106;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    debug A9 => (_1.9: A9);
    debug A10 => (_1.10: A10);
    debug A11 => (_1.11: A11);
    debug A12 => (_1.12: A12);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: A9;
    let mut _14: A10;
    let mut _15: A11;
    let mut _16: A12;
    let mut _17: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>;
    let mut _18: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>;
    let mut _19: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>;
    let mut _20: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _21 = const false;
        _21 = const true;
        _22 = const true;
        _23 = const true;
        _24 = const true;
        _25 = const true;
        _26 = const true;
        _27 = const true;
        _28 = const true;
        _29 = const true;
        _30 = const true;
        _31 = const true;
        _32 = const true;
        _17 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>);
        _18 = deref_copy (*_17);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>::address(_18) -> [return: bb1, unwind: bb28];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _19 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>);
        _20 = deref_copy (*_19);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>::vmctx(_20) -> [return: bb2, unwind: bb28];
    }

    bb2: {
        _32 = const false;
        _5 = move (_1.1: A1);
        _31 = const false;
        _6 = move (_1.2: A2);
        _30 = const false;
        _7 = move (_1.3: A3);
        _29 = const false;
        _8 = move (_1.4: A4);
        _28 = const false;
        _9 = move (_1.5: A5);
        _27 = const false;
        _10 = move (_1.6: A6);
        _26 = const false;
        _11 = move (_1.7: A7);
        _25 = const false;
        _12 = move (_1.8: A8);
        _24 = const false;
        _13 = move (_1.9: A9);
        _23 = const false;
        _14 = move (_1.10: A10);
        _22 = const false;
        _15 = move (_1.11: A11);
        _21 = const false;
        _16 = move (_1.12: A12);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16) -> [return: bb3, unwind: bb28];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_21) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.12: A12)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_22) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.11: A11)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_23) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.10: A10)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_24) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.9: A9)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_25) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.8: A8)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_26) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.7: A7)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_27) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.6: A6)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_28) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.5: A5)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_29) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.4: A4)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_30) -> [0: bb21, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.3: A3)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_31) -> [0: bb23, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop((_1.2: A2)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop((_1.1: A1)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_32) -> [0: bb25, otherwise: bb27];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8, _10: A9, _11: A10, _12: A11, _13: A12, _14: A13) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _15: bool;
    let mut _16: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>;
    let _17: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _18: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _19: &str;
    let mut _21: i128;
    let mut _22: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _23: A1;
    let mut _24: i128;
    let mut _25: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A2;
    let mut _27: i128;
    let mut _28: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A3;
    let mut _30: i128;
    let mut _31: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A4;
    let mut _33: i128;
    let mut _34: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A5;
    let mut _36: i128;
    let mut _37: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A6;
    let mut _39: i128;
    let mut _40: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A7;
    let mut _42: i128;
    let mut _43: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A8;
    let mut _45: i128;
    let mut _46: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A9;
    let mut _48: i128;
    let mut _49: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A10;
    let mut _51: i128;
    let mut _52: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A11;
    let mut _54: i128;
    let mut _55: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A12;
    let mut _57: i128;
    let mut _58: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A13;
    let mut _62: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _65: &mut [i128];
    let mut _66: bool;
    let mut _67: usize;
    let mut _68: &[i128];
    let mut _69: &[i128; 13];
    let mut _70: usize;
    let mut _71: &[i128];
    let mut _72: &mut [i128];
    let mut _73: &mut [i128; 13];
    let mut _74: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _75: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _76: std::slice::Iter<'_, i128>;
    let mut _77: &[i128];
    let mut _78: &[i128; 13];
    let mut _80: std::option::Option<(usize, &i128)>;
    let mut _81: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _82: isize;
    let mut _85: usize;
    let mut _86: bool;
    let mut _87: &mut [i128];
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _89: std::result::Result<(), wasmer_vm::Trap>;
    let _90: &store::Store;
    let mut _91: wasmer_vm::VMFunctionEnvironment;
    let mut _92: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>;
    let mut _93: *const wasmer_vm::VMFunctionBody;
    let mut _94: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>;
    let mut _95: *mut u8;
    let mut _96: *mut i128;
    let mut _97: isize;
    let mut _100: &[i128];
    let mut _101: bool;
    let mut _102: bool;
    let mut _104: &[i128];
    let mut _105: &[i128; 13];
    let mut _107: &mut i128;
    let mut _108: &mut [i128];
    let mut _109: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _110: usize;
    let mut _111: usize;
    let mut _112: bool;
    let _113: ();
    let mut _114: Rets;
    let mut _115: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _116: wasmer_vm::VMFunctionKind;
    let mut _117: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>;
    let mut _118: isize;
    let _119: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _121: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _122: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _123: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _124: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _125: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>;
    let mut _126: isize;
    let _127: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _128: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _129: Rets;
    let mut _130: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _131: [wasmer_types::Value<externals::function::Function>; 13];
    let mut _132: wasmer_types::Value<externals::function::Function>;
    let mut _133: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _134: A1;
    let mut _135: wasmer_types::Value<externals::function::Function>;
    let mut _136: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _137: A2;
    let mut _138: wasmer_types::Value<externals::function::Function>;
    let mut _139: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _140: A3;
    let mut _141: wasmer_types::Value<externals::function::Function>;
    let mut _142: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _143: A4;
    let mut _144: wasmer_types::Value<externals::function::Function>;
    let mut _145: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _146: A5;
    let mut _147: wasmer_types::Value<externals::function::Function>;
    let mut _148: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _149: A6;
    let mut _150: wasmer_types::Value<externals::function::Function>;
    let mut _151: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _152: A7;
    let mut _153: wasmer_types::Value<externals::function::Function>;
    let mut _154: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _155: A8;
    let mut _156: wasmer_types::Value<externals::function::Function>;
    let mut _157: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _158: A9;
    let mut _159: wasmer_types::Value<externals::function::Function>;
    let mut _160: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _161: A10;
    let mut _162: wasmer_types::Value<externals::function::Function>;
    let mut _163: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _164: A11;
    let mut _165: wasmer_types::Value<externals::function::Function>;
    let mut _166: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _167: A12;
    let mut _168: wasmer_types::Value<externals::function::Function>;
    let mut _169: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _170: A13;
    let mut _173: *mut std::ffi::c_void;
    let mut _174: wasmer_vm::VMFunctionEnvironment;
    let mut _175: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>;
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _177: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _178: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _179: &[wasmer_types::Value<externals::function::Function>];
    let _180: &[wasmer_types::Value<externals::function::Function>; 13];
    let mut _181: isize;
    let mut _186: *mut [i128];
    let mut _187: &mut [i128];
    let mut _188: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _189: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _190: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _191: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _192: &[wasmer_types::Value<externals::function::Function>];
    let mut _193: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _195: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _196: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _197: isize;
    let _200: ();
    let mut _201: *mut i128;
    let mut _202: Rets;
    let mut _203: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _204: &i128;
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: bool;
    let mut _208: bool;
    let mut _209: bool;
    let mut _210: bool;
    let mut _211: bool;
    let mut _212: bool;
    let mut _213: bool;
    let mut _214: bool;
    let mut _215: bool;
    let mut _216: bool;
    let mut _217: bool;
    let mut _218: bool;
    let mut _219: bool;
    let mut _220: bool;
    scope 1 {
        debug trampoline => _17;
        let mut _20: [i128; 13];
        scope 2 {
            debug params_list => _20;
            let mut _60: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _60;
                let _61: &mut [i128];
                scope 4 {
                    debug rets_list => _61;
                    let _63: bool;
                    scope 5 {
                        debug using_rets_array => _63;
                        let _64: &mut [i128];
                        let mut _79: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _64;
                            let _98: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _99: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _98;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _99;
                                let _103: *const i128;
                                scope 15 {
                                    debug src_pointer => _103;
                                    let _106: *mut i128;
                                    scope 16 {
                                        debug rets_list => _106;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _79;
                            let _83: usize;
                            let _84: i128;
                            scope 8 {
                                debug i => _83;
                                debug arg => _84;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _119;
    }
    scope 19 {
        debug residual => _127;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _128;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _131;
        let _171: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _171;
            let mut _184: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _184;
                let _185: *mut i128;
                scope 32 {
                    debug mut_rets => _185;
                    let mut _194: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _194;
                        let _198: usize;
                        let _199: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _198;
                            debug ret => _199;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _172: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _172;
                let _182: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _183: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _182;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _183;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _220 = const false;
        _219 = const false;
        _218 = const false;
        _217 = const false;
        _216 = const false;
        _215 = const false;
        _214 = const false;
        _213 = const false;
        _212 = const false;
        _211 = const false;
        _210 = const false;
        _209 = const false;
        _208 = const false;
        _207 = const false;
        _206 = const false;
        _205 = const false;
        _220 = const true;
        _219 = const true;
        _218 = const true;
        _217 = const true;
        _216 = const true;
        _215 = const true;
        _214 = const true;
        _213 = const true;
        _212 = const true;
        _211 = const true;
        _210 = const true;
        _209 = const true;
        _208 = const true;
        _16 = _1;
        _15 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>::is_host(move _16) -> [return: bb1, unwind: bb153];
    }

    bb1: {
        switchInt(move _15) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _117 = _1;
        _116 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>::arg_kind(move _117) -> [return: bb62, unwind: bb153];
    }

    bb3: {
        _18 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _19 = const "Call trampoline not found in wasm function";
        _17 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _18, _19) -> [return: bb4, unwind: bb153];
    }

    bb4: {
        _220 = const false;
        _23 = move _2;
        _22 = <A1 as FromToNativeWasmType>::to_native(move _23) -> [return: bb5, unwind: bb153];
    }

    bb5: {
        _21 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _22) -> [return: bb6, unwind: bb153];
    }

    bb6: {
        _219 = const false;
        _26 = move _3;
        _25 = <A2 as FromToNativeWasmType>::to_native(move _26) -> [return: bb7, unwind: bb153];
    }

    bb7: {
        _24 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _25) -> [return: bb8, unwind: bb153];
    }

    bb8: {
        _218 = const false;
        _29 = move _4;
        _28 = <A3 as FromToNativeWasmType>::to_native(move _29) -> [return: bb9, unwind: bb153];
    }

    bb9: {
        _27 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _28) -> [return: bb10, unwind: bb153];
    }

    bb10: {
        _217 = const false;
        _32 = move _5;
        _31 = <A4 as FromToNativeWasmType>::to_native(move _32) -> [return: bb11, unwind: bb153];
    }

    bb11: {
        _30 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _31) -> [return: bb12, unwind: bb153];
    }

    bb12: {
        _216 = const false;
        _35 = move _6;
        _34 = <A5 as FromToNativeWasmType>::to_native(move _35) -> [return: bb13, unwind: bb153];
    }

    bb13: {
        _33 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _34) -> [return: bb14, unwind: bb153];
    }

    bb14: {
        _215 = const false;
        _38 = move _7;
        _37 = <A6 as FromToNativeWasmType>::to_native(move _38) -> [return: bb15, unwind: bb153];
    }

    bb15: {
        _36 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _37) -> [return: bb16, unwind: bb153];
    }

    bb16: {
        _214 = const false;
        _41 = move _8;
        _40 = <A7 as FromToNativeWasmType>::to_native(move _41) -> [return: bb17, unwind: bb153];
    }

    bb17: {
        _39 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _40) -> [return: bb18, unwind: bb153];
    }

    bb18: {
        _213 = const false;
        _44 = move _9;
        _43 = <A8 as FromToNativeWasmType>::to_native(move _44) -> [return: bb19, unwind: bb153];
    }

    bb19: {
        _42 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _43) -> [return: bb20, unwind: bb153];
    }

    bb20: {
        _212 = const false;
        _47 = move _10;
        _46 = <A9 as FromToNativeWasmType>::to_native(move _47) -> [return: bb21, unwind: bb153];
    }

    bb21: {
        _45 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _46) -> [return: bb22, unwind: bb153];
    }

    bb22: {
        _211 = const false;
        _50 = move _11;
        _49 = <A10 as FromToNativeWasmType>::to_native(move _50) -> [return: bb23, unwind: bb153];
    }

    bb23: {
        _48 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _49) -> [return: bb24, unwind: bb153];
    }

    bb24: {
        _210 = const false;
        _53 = move _12;
        _52 = <A11 as FromToNativeWasmType>::to_native(move _53) -> [return: bb25, unwind: bb153];
    }

    bb25: {
        _51 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _52) -> [return: bb26, unwind: bb153];
    }

    bb26: {
        _209 = const false;
        _56 = move _13;
        _55 = <A12 as FromToNativeWasmType>::to_native(move _56) -> [return: bb27, unwind: bb153];
    }

    bb27: {
        _54 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _55) -> [return: bb28, unwind: bb153];
    }

    bb28: {
        _208 = const false;
        _59 = move _14;
        _58 = <A13 as FromToNativeWasmType>::to_native(move _59) -> [return: bb29, unwind: bb153];
    }

    bb29: {
        _57 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _58) -> [return: bb30, unwind: bb153];
    }

    bb30: {
        _20 = [move _21, move _24, move _27, move _30, move _33, move _36, move _39, move _42, move _45, move _48, move _51, move _54, move _57];
        _60 = <Rets as WasmTypeList>::empty_array() -> [return: bb31, unwind: bb153];
    }

    bb31: {
        _207 = const true;
        _62 = &mut _60;
        _61 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _62) -> [return: bb32, unwind: bb151];
    }

    bb32: {
        _69 = &_20;
        _68 = move _69 as &[i128] (PointerCoercion(Unsize));
        _67 = Len((*_68));
        _71 = &(*_61);
        _70 = Len((*_71));
        _66 = Gt(move _67, move _70);
        switchInt(move _66) -> [0: bb35, otherwise: bb33];
    }

    bb33: {
        _63 = const false;
        _73 = &mut _20;
        _72 = <[i128; 13] as AsMut<[i128]>>::as_mut(move _73) -> [return: bb34, unwind: bb151];
    }

    bb34: {
        _65 = _72;
        goto -> bb46;
    }

    bb35: {
        _63 = const true;
        _78 = &_20;
        _77 = move _78 as &[i128] (PointerCoercion(Unsize));
        _76 = core::slice::<impl [i128]>::iter(move _77) -> [return: bb36, unwind: bb151];
    }

    bb36: {
        _75 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _76) -> [return: bb37, unwind: bb151];
    }

    bb37: {
        _74 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _75) -> [return: bb38, unwind: bb151];
    }

    bb38: {
        _79 = move _74;
        goto -> bb39;
    }

    bb39: {
        _81 = &mut _79;
        _80 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_81) -> [return: bb40, unwind: bb151];
    }

    bb40: {
        _82 = discriminant(_80);
        switchInt(move _82) -> [0: bb43, 1: bb41, otherwise: bb42];
    }

    bb41: {
        _204 = deref_copy (((_80 as Some).0: (usize, &i128)).1: &i128);
        _84 = (*_204);
        _83 = (((_80 as Some).0: (usize, &i128)).0: usize);
        _85 = Len((*_61));
        _86 = Lt(_83, _85);
        assert(move _86, "index out of bounds: the length is {} but the index is {}", move _85, _83) -> [success: bb44, unwind: bb151];
    }

    bb42: {
        unreachable;
    }

    bb43: {
        _87 = <[i128] as AsMut<[i128]>>::as_mut(_61) -> [return: bb45, unwind: bb151];
    }

    bb44: {
        (*_61)[_83] = _84;
        goto -> bb39;
    }

    bb45: {
        _65 = _87;
        goto -> bb46;
    }

    bb46: {
        _64 = _65;
        _90 = &((*_1).0: store::Store);
        _92 = _1;
        _91 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>::vmctx(move _92) -> [return: bb47, unwind: bb151];
    }

    bb47: {
        _94 = _1;
        _93 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>::address(move _94) -> [return: bb48, unwind: bb151];
    }

    bb48: {
        _96 = core::slice::<impl [i128]>::as_mut_ptr(_64) -> [return: bb49, unwind: bb151];
    }

    bb49: {
        _95 = move _96 as *mut u8 (PtrToPtr);
        _89 = wasmer_call_trampoline::<Store>(_90, move _91, _17, move _93, move _95) -> [return: bb50, unwind: bb151];
    }

    bb50: {
        _88 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _89) -> [return: bb51, unwind: bb151];
    }

    bb51: {
        _97 = discriminant(_88);
        switchInt(move _97) -> [0: bb52, 1: bb53, otherwise: bb42];
    }

    bb52: {
        _100 = &(*_61);
        _99 = Len((*_100));
        _101 = _63;
        switchInt(move _101) -> [0: bb55, otherwise: bb60];
    }

    bb53: {
        _98 = move ((_88 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _98) -> [return: bb54, unwind: bb151];
    }

    bb54: {
        drop(_60) -> [return: bb117, unwind: bb153];
    }

    bb55: {
        _102 = Gt(_99, const 0_usize);
        switchInt(move _102) -> [0: bb60, otherwise: bb56];
    }

    bb56: {
        _105 = &_20;
        _104 = move _105 as &[i128] (PointerCoercion(Unsize));
        _103 = core::slice::<impl [i128]>::as_ptr(move _104) -> [return: bb57, unwind: bb151];
    }

    bb57: {
        _109 = &mut _60;
        _108 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _109) -> [return: bb58, unwind: bb151];
    }

    bb58: {
        _110 = const 0_usize;
        _111 = Len((*_108));
        _112 = Lt(_110, _111);
        assert(move _112, "index out of bounds: the length is {} but the index is {}", move _111, _110) -> [success: bb59, unwind: bb151];
    }

    bb59: {
        _107 = &mut (*_108)[_110];
        _106 = &raw mut (*_107);
        _113 = copy_nonoverlapping::<i128>(_103, _106, _99) -> [return: bb166, unwind: bb151];
    }

    bb60: {
        _207 = const false;
        _115 = move _60;
        _114 = <Rets as WasmTypeList>::from_array(move _115) -> [return: bb61, unwind: bb151];
    }

    bb61: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _114);
        _207 = const false;
        goto -> bb118;
    }

    bb62: {
        _118 = discriminant(_116);
        switchInt(move _118) -> [0: bb64, 1: bb63, otherwise: bb42];
    }

    bb63: {
        _220 = const false;
        _134 = move _2;
        _133 = <A1 as FromToNativeWasmType>::to_native(move _134) -> [return: bb72, unwind: bb153];
    }

    bb64: {
        _125 = &_1;
        _220 = const false;
        _219 = const false;
        _218 = const false;
        _217 = const false;
        _216 = const false;
        _215 = const false;
        _214 = const false;
        _213 = const false;
        _212 = const false;
        _211 = const false;
        _210 = const false;
        _209 = const false;
        _208 = const false;
        _124 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _125, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14 };
        _123 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _124);
        _122 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _123) -> [return: bb65, unwind: bb153];
    }

    bb65: {
        _121 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _122, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb66, unwind: bb153];
    }

    bb66: {
        _120 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _121) -> [return: bb67, unwind: bb153];
    }

    bb67: {
        _126 = discriminant(_120);
        switchInt(move _126) -> [0: bb68, 1: bb69, otherwise: bb42];
    }

    bb68: {
        _128 = move ((_120 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _206 = const true;
        _119 = move _128;
        _206 = const false;
        _130 = move _119;
        _129 = <Rets as WasmTypeList>::from_c_struct(move _130) -> [return: bb71, unwind: bb149];
    }

    bb69: {
        _127 = move ((_120 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _127) -> [return: bb70, unwind: bb153];
    }

    bb70: {
        _206 = const false;
        goto -> bb118;
    }

    bb71: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _129);
        _206 = const false;
        goto -> bb118;
    }

    bb72: {
        _132 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _133) -> [return: bb73, unwind: bb153];
    }

    bb73: {
        _219 = const false;
        _137 = move _3;
        _136 = <A2 as FromToNativeWasmType>::to_native(move _137) -> [return: bb74, unwind: bb132];
    }

    bb74: {
        _135 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _136) -> [return: bb75, unwind: bb132];
    }

    bb75: {
        _218 = const false;
        _140 = move _4;
        _139 = <A3 as FromToNativeWasmType>::to_native(move _140) -> [return: bb76, unwind: bb131];
    }

    bb76: {
        _138 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _139) -> [return: bb77, unwind: bb131];
    }

    bb77: {
        _217 = const false;
        _143 = move _5;
        _142 = <A4 as FromToNativeWasmType>::to_native(move _143) -> [return: bb78, unwind: bb130];
    }

    bb78: {
        _141 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _142) -> [return: bb79, unwind: bb130];
    }

    bb79: {
        _216 = const false;
        _146 = move _6;
        _145 = <A5 as FromToNativeWasmType>::to_native(move _146) -> [return: bb80, unwind: bb129];
    }

    bb80: {
        _144 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _145) -> [return: bb81, unwind: bb129];
    }

    bb81: {
        _215 = const false;
        _149 = move _7;
        _148 = <A6 as FromToNativeWasmType>::to_native(move _149) -> [return: bb82, unwind: bb128];
    }

    bb82: {
        _147 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _148) -> [return: bb83, unwind: bb128];
    }

    bb83: {
        _214 = const false;
        _152 = move _8;
        _151 = <A7 as FromToNativeWasmType>::to_native(move _152) -> [return: bb84, unwind: bb127];
    }

    bb84: {
        _150 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _151) -> [return: bb85, unwind: bb127];
    }

    bb85: {
        _213 = const false;
        _155 = move _9;
        _154 = <A8 as FromToNativeWasmType>::to_native(move _155) -> [return: bb86, unwind: bb126];
    }

    bb86: {
        _153 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _154) -> [return: bb87, unwind: bb126];
    }

    bb87: {
        _212 = const false;
        _158 = move _10;
        _157 = <A9 as FromToNativeWasmType>::to_native(move _158) -> [return: bb88, unwind: bb125];
    }

    bb88: {
        _156 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _157) -> [return: bb89, unwind: bb125];
    }

    bb89: {
        _211 = const false;
        _161 = move _11;
        _160 = <A10 as FromToNativeWasmType>::to_native(move _161) -> [return: bb90, unwind: bb124];
    }

    bb90: {
        _159 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _160) -> [return: bb91, unwind: bb124];
    }

    bb91: {
        _210 = const false;
        _164 = move _12;
        _163 = <A11 as FromToNativeWasmType>::to_native(move _164) -> [return: bb92, unwind: bb123];
    }

    bb92: {
        _162 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _163) -> [return: bb93, unwind: bb123];
    }

    bb93: {
        _209 = const false;
        _167 = move _13;
        _166 = <A12 as FromToNativeWasmType>::to_native(move _167) -> [return: bb94, unwind: bb122];
    }

    bb94: {
        _165 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _166) -> [return: bb95, unwind: bb122];
    }

    bb95: {
        _208 = const false;
        _170 = move _14;
        _169 = <A13 as FromToNativeWasmType>::to_native(move _170) -> [return: bb96, unwind: bb121];
    }

    bb96: {
        _168 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _169) -> [return: bb97, unwind: bb121];
    }

    bb97: {
        _131 = [move _132, move _135, move _138, move _141, move _144, move _147, move _150, move _153, move _156, move _159, move _162, move _165, move _168];
        _175 = _1;
        _174 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>::vmctx(move _175) -> [return: bb98, unwind: bb120];
    }

    bb98: {
        _173 = (_174.1: *mut std::ffi::c_void);
        _172 = move _173 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _178 = &((*_172).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _180 = &_131;
        _179 = _180 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _177 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _178, move _179) -> [return: bb99, unwind: bb120];
    }

    bb99: {
        _176 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _177) -> [return: bb100, unwind: bb120];
    }

    bb100: {
        _181 = discriminant(_176);
        switchInt(move _181) -> [0: bb101, 1: bb102, otherwise: bb42];
    }

    bb101: {
        _183 = move ((_176 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _171 = move _183;
        _184 = <Rets as WasmTypeList>::empty_array() -> [return: bb104, unwind: bb119];
    }

    bb102: {
        _182 = move ((_176 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _182) -> [return: bb103, unwind: bb120];
    }

    bb103: {
        drop(_131) -> [return: bb118, unwind: bb153];
    }

    bb104: {
        _205 = const true;
        _188 = &mut _184;
        _187 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _188) -> [return: bb105, unwind: bb147];
    }

    bb105: {
        _186 = &raw mut (*_187);
        _185 = move _186 as *mut i128 (PtrToPtr);
        _193 = &_171;
        _192 = <Vec<Value<function::Function>> as Deref>::deref(move _193) -> [return: bb106, unwind: bb147];
    }

    bb106: {
        _191 = core::slice::<impl [Value<function::Function>]>::iter(_192) -> [return: bb107, unwind: bb147];
    }

    bb107: {
        _190 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _191) -> [return: bb108, unwind: bb147];
    }

    bb108: {
        _189 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _190) -> [return: bb109, unwind: bb147];
    }

    bb109: {
        _194 = move _189;
        goto -> bb110;
    }

    bb110: {
        _196 = &mut _194;
        _195 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_196) -> [return: bb111, unwind: bb147];
    }

    bb111: {
        _197 = discriminant(_195);
        switchInt(move _197) -> [0: bb113, 1: bb112, otherwise: bb42];
    }

    bb112: {
        _198 = (((_195 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _199 = (((_195 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _201 = std::ptr::mut_ptr::<impl *mut i128>::add(_185, _198) -> [return: bb114, unwind: bb147];
    }

    bb113: {
        _205 = const false;
        _203 = move _184;
        _202 = <Rets as WasmTypeList>::from_array(move _203) -> [return: bb115, unwind: bb147];
    }

    bb114: {
        _200 = Value::<function::Function>::write_value_to(_199, move _201) -> [return: bb167, unwind: bb147];
    }

    bb115: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _202);
        _205 = const false;
        drop(_171) -> [return: bb116, unwind: bb120];
    }

    bb116: {
        drop(_131) -> [return: bb118, unwind: bb153];
    }

    bb117: {
        _207 = const false;
        goto -> bb118;
    }

    bb118: {
        return;
    }

    bb119 (cleanup): {
        drop(_171) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_131) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_165) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        drop(_162) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop(_159) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop(_156) -> [return: bb125, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_153) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_150) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        drop(_147) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        drop(_144) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        drop(_141) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        drop(_138) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        drop(_135) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        drop(_132) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        switchInt(_209) -> [0: bb134, otherwise: bb154];
    }

    bb134 (cleanup): {
        switchInt(_210) -> [0: bb135, otherwise: bb155];
    }

    bb135 (cleanup): {
        switchInt(_211) -> [0: bb136, otherwise: bb156];
    }

    bb136 (cleanup): {
        switchInt(_212) -> [0: bb137, otherwise: bb157];
    }

    bb137 (cleanup): {
        switchInt(_213) -> [0: bb138, otherwise: bb158];
    }

    bb138 (cleanup): {
        switchInt(_214) -> [0: bb139, otherwise: bb159];
    }

    bb139 (cleanup): {
        switchInt(_215) -> [0: bb140, otherwise: bb160];
    }

    bb140 (cleanup): {
        switchInt(_216) -> [0: bb141, otherwise: bb161];
    }

    bb141 (cleanup): {
        switchInt(_217) -> [0: bb142, otherwise: bb162];
    }

    bb142 (cleanup): {
        switchInt(_218) -> [0: bb143, otherwise: bb163];
    }

    bb143 (cleanup): {
        switchInt(_219) -> [0: bb144, otherwise: bb164];
    }

    bb144 (cleanup): {
        switchInt(_220) -> [0: bb145, otherwise: bb165];
    }

    bb145 (cleanup): {
        resume;
    }

    bb146 (cleanup): {
        drop(_184) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        switchInt(_205) -> [0: bb119, otherwise: bb146];
    }

    bb148 (cleanup): {
        drop(_119) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        switchInt(_206) -> [0: bb153, otherwise: bb148];
    }

    bb150 (cleanup): {
        drop(_60) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        switchInt(_207) -> [0: bb153, otherwise: bb150];
    }

    bb152 (cleanup): {
        drop(_14) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        switchInt(_208) -> [0: bb133, otherwise: bb152];
    }

    bb154 (cleanup): {
        drop(_13) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_12) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_11) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        drop(_10) -> [return: bb137, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_9) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        drop(_8) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        drop(_7) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        drop(_6) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        drop(_5) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        drop(_4) -> [return: bb143, unwind terminate(cleanup)];
    }

    bb164 (cleanup): {
        drop(_3) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        drop(_2) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb166: {
        goto -> bb60;
    }

    bb167: {
        goto -> bb110;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    debug A9 => (_1.9: A9);
    debug A10 => (_1.10: A10);
    debug A11 => (_1.11: A11);
    debug A12 => (_1.12: A12);
    debug A13 => (_1.13: A13);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: A9;
    let mut _14: A10;
    let mut _15: A11;
    let mut _16: A12;
    let mut _17: A13;
    let mut _18: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>;
    let mut _19: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>;
    let mut _20: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>;
    let mut _21: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _22 = const false;
        _22 = const true;
        _23 = const true;
        _24 = const true;
        _25 = const true;
        _26 = const true;
        _27 = const true;
        _28 = const true;
        _29 = const true;
        _30 = const true;
        _31 = const true;
        _32 = const true;
        _33 = const true;
        _34 = const true;
        _18 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>);
        _19 = deref_copy (*_18);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>::address(_19) -> [return: bb1, unwind: bb30];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _20 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>);
        _21 = deref_copy (*_20);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>::vmctx(_21) -> [return: bb2, unwind: bb30];
    }

    bb2: {
        _34 = const false;
        _5 = move (_1.1: A1);
        _33 = const false;
        _6 = move (_1.2: A2);
        _32 = const false;
        _7 = move (_1.3: A3);
        _31 = const false;
        _8 = move (_1.4: A4);
        _30 = const false;
        _9 = move (_1.5: A5);
        _29 = const false;
        _10 = move (_1.6: A6);
        _28 = const false;
        _11 = move (_1.7: A7);
        _27 = const false;
        _12 = move (_1.8: A8);
        _26 = const false;
        _13 = move (_1.9: A9);
        _25 = const false;
        _14 = move (_1.10: A10);
        _24 = const false;
        _15 = move (_1.11: A11);
        _23 = const false;
        _16 = move (_1.12: A12);
        _22 = const false;
        _17 = move (_1.13: A13);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17) -> [return: bb3, unwind: bb30];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_22) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.13: A13)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_23) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.12: A12)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_24) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.11: A11)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_25) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.10: A10)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_26) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.9: A9)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_27) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.8: A8)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_28) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.7: A7)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_29) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.6: A6)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_30) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.5: A5)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_31) -> [0: bb21, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.4: A4)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_32) -> [0: bb23, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop((_1.3: A3)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_33) -> [0: bb25, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop((_1.2: A2)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop((_1.1: A1)) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_34) -> [0: bb27, otherwise: bb29];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8, _10: A9, _11: A10, _12: A11, _13: A12, _14: A13, _15: A14) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _16: bool;
    let mut _17: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>;
    let _18: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _19: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _20: &str;
    let mut _22: i128;
    let mut _23: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _24: A1;
    let mut _25: i128;
    let mut _26: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A2;
    let mut _28: i128;
    let mut _29: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A3;
    let mut _31: i128;
    let mut _32: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A4;
    let mut _34: i128;
    let mut _35: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A5;
    let mut _37: i128;
    let mut _38: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A6;
    let mut _40: i128;
    let mut _41: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A7;
    let mut _43: i128;
    let mut _44: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A8;
    let mut _46: i128;
    let mut _47: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A9;
    let mut _49: i128;
    let mut _50: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A10;
    let mut _52: i128;
    let mut _53: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A11;
    let mut _55: i128;
    let mut _56: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A12;
    let mut _58: i128;
    let mut _59: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A13;
    let mut _61: i128;
    let mut _62: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A14;
    let mut _66: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _69: &mut [i128];
    let mut _70: bool;
    let mut _71: usize;
    let mut _72: &[i128];
    let mut _73: &[i128; 14];
    let mut _74: usize;
    let mut _75: &[i128];
    let mut _76: &mut [i128];
    let mut _77: &mut [i128; 14];
    let mut _78: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _79: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _80: std::slice::Iter<'_, i128>;
    let mut _81: &[i128];
    let mut _82: &[i128; 14];
    let mut _84: std::option::Option<(usize, &i128)>;
    let mut _85: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _86: isize;
    let mut _89: usize;
    let mut _90: bool;
    let mut _91: &mut [i128];
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _93: std::result::Result<(), wasmer_vm::Trap>;
    let _94: &store::Store;
    let mut _95: wasmer_vm::VMFunctionEnvironment;
    let mut _96: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>;
    let mut _97: *const wasmer_vm::VMFunctionBody;
    let mut _98: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>;
    let mut _99: *mut u8;
    let mut _100: *mut i128;
    let mut _101: isize;
    let mut _104: &[i128];
    let mut _105: bool;
    let mut _106: bool;
    let mut _108: &[i128];
    let mut _109: &[i128; 14];
    let mut _111: &mut i128;
    let mut _112: &mut [i128];
    let mut _113: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _114: usize;
    let mut _115: usize;
    let mut _116: bool;
    let _117: ();
    let mut _118: Rets;
    let mut _119: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _120: wasmer_vm::VMFunctionKind;
    let mut _121: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>;
    let mut _122: isize;
    let _123: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _125: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _126: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _127: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _128: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _129: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>;
    let mut _130: isize;
    let _131: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _132: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _133: Rets;
    let mut _134: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _135: [wasmer_types::Value<externals::function::Function>; 14];
    let mut _136: wasmer_types::Value<externals::function::Function>;
    let mut _137: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _138: A1;
    let mut _139: wasmer_types::Value<externals::function::Function>;
    let mut _140: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _141: A2;
    let mut _142: wasmer_types::Value<externals::function::Function>;
    let mut _143: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _144: A3;
    let mut _145: wasmer_types::Value<externals::function::Function>;
    let mut _146: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _147: A4;
    let mut _148: wasmer_types::Value<externals::function::Function>;
    let mut _149: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _150: A5;
    let mut _151: wasmer_types::Value<externals::function::Function>;
    let mut _152: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _153: A6;
    let mut _154: wasmer_types::Value<externals::function::Function>;
    let mut _155: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _156: A7;
    let mut _157: wasmer_types::Value<externals::function::Function>;
    let mut _158: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _159: A8;
    let mut _160: wasmer_types::Value<externals::function::Function>;
    let mut _161: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _162: A9;
    let mut _163: wasmer_types::Value<externals::function::Function>;
    let mut _164: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _165: A10;
    let mut _166: wasmer_types::Value<externals::function::Function>;
    let mut _167: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _168: A11;
    let mut _169: wasmer_types::Value<externals::function::Function>;
    let mut _170: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _171: A12;
    let mut _172: wasmer_types::Value<externals::function::Function>;
    let mut _173: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _174: A13;
    let mut _175: wasmer_types::Value<externals::function::Function>;
    let mut _176: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _177: A14;
    let mut _180: *mut std::ffi::c_void;
    let mut _181: wasmer_vm::VMFunctionEnvironment;
    let mut _182: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>;
    let mut _183: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _184: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _185: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _186: &[wasmer_types::Value<externals::function::Function>];
    let _187: &[wasmer_types::Value<externals::function::Function>; 14];
    let mut _188: isize;
    let mut _193: *mut [i128];
    let mut _194: &mut [i128];
    let mut _195: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _196: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _197: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _198: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _199: &[wasmer_types::Value<externals::function::Function>];
    let mut _200: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _202: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _203: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _204: isize;
    let _207: ();
    let mut _208: *mut i128;
    let mut _209: Rets;
    let mut _210: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _211: &i128;
    let mut _212: bool;
    let mut _213: bool;
    let mut _214: bool;
    let mut _215: bool;
    let mut _216: bool;
    let mut _217: bool;
    let mut _218: bool;
    let mut _219: bool;
    let mut _220: bool;
    let mut _221: bool;
    let mut _222: bool;
    let mut _223: bool;
    let mut _224: bool;
    let mut _225: bool;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: bool;
    scope 1 {
        debug trampoline => _18;
        let mut _21: [i128; 14];
        scope 2 {
            debug params_list => _21;
            let mut _64: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _64;
                let _65: &mut [i128];
                scope 4 {
                    debug rets_list => _65;
                    let _67: bool;
                    scope 5 {
                        debug using_rets_array => _67;
                        let _68: &mut [i128];
                        let mut _83: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _68;
                            let _102: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _103: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _102;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _103;
                                let _107: *const i128;
                                scope 15 {
                                    debug src_pointer => _107;
                                    let _110: *mut i128;
                                    scope 16 {
                                        debug rets_list => _110;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _83;
                            let _87: usize;
                            let _88: i128;
                            scope 8 {
                                debug i => _87;
                                debug arg => _88;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _123;
    }
    scope 19 {
        debug residual => _131;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _132;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _135;
        let _178: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _178;
            let mut _191: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _191;
                let _192: *mut i128;
                scope 32 {
                    debug mut_rets => _192;
                    let mut _201: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _201;
                        let _205: usize;
                        let _206: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _205;
                            debug ret => _206;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _179: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _179;
                let _189: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _190: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _189;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _190;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _228 = const false;
        _227 = const false;
        _226 = const false;
        _225 = const false;
        _224 = const false;
        _223 = const false;
        _222 = const false;
        _221 = const false;
        _220 = const false;
        _219 = const false;
        _218 = const false;
        _217 = const false;
        _216 = const false;
        _215 = const false;
        _214 = const false;
        _213 = const false;
        _212 = const false;
        _228 = const true;
        _227 = const true;
        _226 = const true;
        _225 = const true;
        _224 = const true;
        _223 = const true;
        _222 = const true;
        _221 = const true;
        _220 = const true;
        _219 = const true;
        _218 = const true;
        _217 = const true;
        _216 = const true;
        _215 = const true;
        _17 = _1;
        _16 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>::is_host(move _17) -> [return: bb1, unwind: bb159];
    }

    bb1: {
        switchInt(move _16) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _121 = _1;
        _120 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>::arg_kind(move _121) -> [return: bb64, unwind: bb159];
    }

    bb3: {
        _19 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _20 = const "Call trampoline not found in wasm function";
        _18 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _19, _20) -> [return: bb4, unwind: bb159];
    }

    bb4: {
        _228 = const false;
        _24 = move _2;
        _23 = <A1 as FromToNativeWasmType>::to_native(move _24) -> [return: bb5, unwind: bb159];
    }

    bb5: {
        _22 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _23) -> [return: bb6, unwind: bb159];
    }

    bb6: {
        _227 = const false;
        _27 = move _3;
        _26 = <A2 as FromToNativeWasmType>::to_native(move _27) -> [return: bb7, unwind: bb159];
    }

    bb7: {
        _25 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _26) -> [return: bb8, unwind: bb159];
    }

    bb8: {
        _226 = const false;
        _30 = move _4;
        _29 = <A3 as FromToNativeWasmType>::to_native(move _30) -> [return: bb9, unwind: bb159];
    }

    bb9: {
        _28 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _29) -> [return: bb10, unwind: bb159];
    }

    bb10: {
        _225 = const false;
        _33 = move _5;
        _32 = <A4 as FromToNativeWasmType>::to_native(move _33) -> [return: bb11, unwind: bb159];
    }

    bb11: {
        _31 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _32) -> [return: bb12, unwind: bb159];
    }

    bb12: {
        _224 = const false;
        _36 = move _6;
        _35 = <A5 as FromToNativeWasmType>::to_native(move _36) -> [return: bb13, unwind: bb159];
    }

    bb13: {
        _34 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _35) -> [return: bb14, unwind: bb159];
    }

    bb14: {
        _223 = const false;
        _39 = move _7;
        _38 = <A6 as FromToNativeWasmType>::to_native(move _39) -> [return: bb15, unwind: bb159];
    }

    bb15: {
        _37 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _38) -> [return: bb16, unwind: bb159];
    }

    bb16: {
        _222 = const false;
        _42 = move _8;
        _41 = <A7 as FromToNativeWasmType>::to_native(move _42) -> [return: bb17, unwind: bb159];
    }

    bb17: {
        _40 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _41) -> [return: bb18, unwind: bb159];
    }

    bb18: {
        _221 = const false;
        _45 = move _9;
        _44 = <A8 as FromToNativeWasmType>::to_native(move _45) -> [return: bb19, unwind: bb159];
    }

    bb19: {
        _43 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _44) -> [return: bb20, unwind: bb159];
    }

    bb20: {
        _220 = const false;
        _48 = move _10;
        _47 = <A9 as FromToNativeWasmType>::to_native(move _48) -> [return: bb21, unwind: bb159];
    }

    bb21: {
        _46 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _47) -> [return: bb22, unwind: bb159];
    }

    bb22: {
        _219 = const false;
        _51 = move _11;
        _50 = <A10 as FromToNativeWasmType>::to_native(move _51) -> [return: bb23, unwind: bb159];
    }

    bb23: {
        _49 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _50) -> [return: bb24, unwind: bb159];
    }

    bb24: {
        _218 = const false;
        _54 = move _12;
        _53 = <A11 as FromToNativeWasmType>::to_native(move _54) -> [return: bb25, unwind: bb159];
    }

    bb25: {
        _52 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _53) -> [return: bb26, unwind: bb159];
    }

    bb26: {
        _217 = const false;
        _57 = move _13;
        _56 = <A12 as FromToNativeWasmType>::to_native(move _57) -> [return: bb27, unwind: bb159];
    }

    bb27: {
        _55 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _56) -> [return: bb28, unwind: bb159];
    }

    bb28: {
        _216 = const false;
        _60 = move _14;
        _59 = <A13 as FromToNativeWasmType>::to_native(move _60) -> [return: bb29, unwind: bb159];
    }

    bb29: {
        _58 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _59) -> [return: bb30, unwind: bb159];
    }

    bb30: {
        _215 = const false;
        _63 = move _15;
        _62 = <A14 as FromToNativeWasmType>::to_native(move _63) -> [return: bb31, unwind: bb159];
    }

    bb31: {
        _61 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _62) -> [return: bb32, unwind: bb159];
    }

    bb32: {
        _21 = [move _22, move _25, move _28, move _31, move _34, move _37, move _40, move _43, move _46, move _49, move _52, move _55, move _58, move _61];
        _64 = <Rets as WasmTypeList>::empty_array() -> [return: bb33, unwind: bb159];
    }

    bb33: {
        _214 = const true;
        _66 = &mut _64;
        _65 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _66) -> [return: bb34, unwind: bb157];
    }

    bb34: {
        _73 = &_21;
        _72 = move _73 as &[i128] (PointerCoercion(Unsize));
        _71 = Len((*_72));
        _75 = &(*_65);
        _74 = Len((*_75));
        _70 = Gt(move _71, move _74);
        switchInt(move _70) -> [0: bb37, otherwise: bb35];
    }

    bb35: {
        _67 = const false;
        _77 = &mut _21;
        _76 = <[i128; 14] as AsMut<[i128]>>::as_mut(move _77) -> [return: bb36, unwind: bb157];
    }

    bb36: {
        _69 = _76;
        goto -> bb48;
    }

    bb37: {
        _67 = const true;
        _82 = &_21;
        _81 = move _82 as &[i128] (PointerCoercion(Unsize));
        _80 = core::slice::<impl [i128]>::iter(move _81) -> [return: bb38, unwind: bb157];
    }

    bb38: {
        _79 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _80) -> [return: bb39, unwind: bb157];
    }

    bb39: {
        _78 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _79) -> [return: bb40, unwind: bb157];
    }

    bb40: {
        _83 = move _78;
        goto -> bb41;
    }

    bb41: {
        _85 = &mut _83;
        _84 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_85) -> [return: bb42, unwind: bb157];
    }

    bb42: {
        _86 = discriminant(_84);
        switchInt(move _86) -> [0: bb45, 1: bb43, otherwise: bb44];
    }

    bb43: {
        _211 = deref_copy (((_84 as Some).0: (usize, &i128)).1: &i128);
        _88 = (*_211);
        _87 = (((_84 as Some).0: (usize, &i128)).0: usize);
        _89 = Len((*_65));
        _90 = Lt(_87, _89);
        assert(move _90, "index out of bounds: the length is {} but the index is {}", move _89, _87) -> [success: bb46, unwind: bb157];
    }

    bb44: {
        unreachable;
    }

    bb45: {
        _91 = <[i128] as AsMut<[i128]>>::as_mut(_65) -> [return: bb47, unwind: bb157];
    }

    bb46: {
        (*_65)[_87] = _88;
        goto -> bb41;
    }

    bb47: {
        _69 = _91;
        goto -> bb48;
    }

    bb48: {
        _68 = _69;
        _94 = &((*_1).0: store::Store);
        _96 = _1;
        _95 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>::vmctx(move _96) -> [return: bb49, unwind: bb157];
    }

    bb49: {
        _98 = _1;
        _97 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>::address(move _98) -> [return: bb50, unwind: bb157];
    }

    bb50: {
        _100 = core::slice::<impl [i128]>::as_mut_ptr(_68) -> [return: bb51, unwind: bb157];
    }

    bb51: {
        _99 = move _100 as *mut u8 (PtrToPtr);
        _93 = wasmer_call_trampoline::<Store>(_94, move _95, _18, move _97, move _99) -> [return: bb52, unwind: bb157];
    }

    bb52: {
        _92 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _93) -> [return: bb53, unwind: bb157];
    }

    bb53: {
        _101 = discriminant(_92);
        switchInt(move _101) -> [0: bb54, 1: bb55, otherwise: bb44];
    }

    bb54: {
        _104 = &(*_65);
        _103 = Len((*_104));
        _105 = _67;
        switchInt(move _105) -> [0: bb57, otherwise: bb62];
    }

    bb55: {
        _102 = move ((_92 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _102) -> [return: bb56, unwind: bb157];
    }

    bb56: {
        drop(_64) -> [return: bb121, unwind: bb159];
    }

    bb57: {
        _106 = Gt(_103, const 0_usize);
        switchInt(move _106) -> [0: bb62, otherwise: bb58];
    }

    bb58: {
        _109 = &_21;
        _108 = move _109 as &[i128] (PointerCoercion(Unsize));
        _107 = core::slice::<impl [i128]>::as_ptr(move _108) -> [return: bb59, unwind: bb157];
    }

    bb59: {
        _113 = &mut _64;
        _112 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _113) -> [return: bb60, unwind: bb157];
    }

    bb60: {
        _114 = const 0_usize;
        _115 = Len((*_112));
        _116 = Lt(_114, _115);
        assert(move _116, "index out of bounds: the length is {} but the index is {}", move _115, _114) -> [success: bb61, unwind: bb157];
    }

    bb61: {
        _111 = &mut (*_112)[_114];
        _110 = &raw mut (*_111);
        _117 = copy_nonoverlapping::<i128>(_107, _110, _103) -> [return: bb173, unwind: bb157];
    }

    bb62: {
        _214 = const false;
        _119 = move _64;
        _118 = <Rets as WasmTypeList>::from_array(move _119) -> [return: bb63, unwind: bb157];
    }

    bb63: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _118);
        _214 = const false;
        goto -> bb122;
    }

    bb64: {
        _122 = discriminant(_120);
        switchInt(move _122) -> [0: bb66, 1: bb65, otherwise: bb44];
    }

    bb65: {
        _228 = const false;
        _138 = move _2;
        _137 = <A1 as FromToNativeWasmType>::to_native(move _138) -> [return: bb74, unwind: bb159];
    }

    bb66: {
        _129 = &_1;
        _228 = const false;
        _227 = const false;
        _226 = const false;
        _225 = const false;
        _224 = const false;
        _223 = const false;
        _222 = const false;
        _221 = const false;
        _220 = const false;
        _219 = const false;
        _218 = const false;
        _217 = const false;
        _216 = const false;
        _215 = const false;
        _128 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _129, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15 };
        _127 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _128);
        _126 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _127) -> [return: bb67, unwind: bb159];
    }

    bb67: {
        _125 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _126, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb68, unwind: bb159];
    }

    bb68: {
        _124 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _125) -> [return: bb69, unwind: bb159];
    }

    bb69: {
        _130 = discriminant(_124);
        switchInt(move _130) -> [0: bb70, 1: bb71, otherwise: bb44];
    }

    bb70: {
        _132 = move ((_124 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _213 = const true;
        _123 = move _132;
        _213 = const false;
        _134 = move _123;
        _133 = <Rets as WasmTypeList>::from_c_struct(move _134) -> [return: bb73, unwind: bb155];
    }

    bb71: {
        _131 = move ((_124 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _131) -> [return: bb72, unwind: bb159];
    }

    bb72: {
        _213 = const false;
        goto -> bb122;
    }

    bb73: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _133);
        _213 = const false;
        goto -> bb122;
    }

    bb74: {
        _136 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _137) -> [return: bb75, unwind: bb159];
    }

    bb75: {
        _227 = const false;
        _141 = move _3;
        _140 = <A2 as FromToNativeWasmType>::to_native(move _141) -> [return: bb76, unwind: bb137];
    }

    bb76: {
        _139 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _140) -> [return: bb77, unwind: bb137];
    }

    bb77: {
        _226 = const false;
        _144 = move _4;
        _143 = <A3 as FromToNativeWasmType>::to_native(move _144) -> [return: bb78, unwind: bb136];
    }

    bb78: {
        _142 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _143) -> [return: bb79, unwind: bb136];
    }

    bb79: {
        _225 = const false;
        _147 = move _5;
        _146 = <A4 as FromToNativeWasmType>::to_native(move _147) -> [return: bb80, unwind: bb135];
    }

    bb80: {
        _145 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _146) -> [return: bb81, unwind: bb135];
    }

    bb81: {
        _224 = const false;
        _150 = move _6;
        _149 = <A5 as FromToNativeWasmType>::to_native(move _150) -> [return: bb82, unwind: bb134];
    }

    bb82: {
        _148 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _149) -> [return: bb83, unwind: bb134];
    }

    bb83: {
        _223 = const false;
        _153 = move _7;
        _152 = <A6 as FromToNativeWasmType>::to_native(move _153) -> [return: bb84, unwind: bb133];
    }

    bb84: {
        _151 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _152) -> [return: bb85, unwind: bb133];
    }

    bb85: {
        _222 = const false;
        _156 = move _8;
        _155 = <A7 as FromToNativeWasmType>::to_native(move _156) -> [return: bb86, unwind: bb132];
    }

    bb86: {
        _154 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _155) -> [return: bb87, unwind: bb132];
    }

    bb87: {
        _221 = const false;
        _159 = move _9;
        _158 = <A8 as FromToNativeWasmType>::to_native(move _159) -> [return: bb88, unwind: bb131];
    }

    bb88: {
        _157 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _158) -> [return: bb89, unwind: bb131];
    }

    bb89: {
        _220 = const false;
        _162 = move _10;
        _161 = <A9 as FromToNativeWasmType>::to_native(move _162) -> [return: bb90, unwind: bb130];
    }

    bb90: {
        _160 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _161) -> [return: bb91, unwind: bb130];
    }

    bb91: {
        _219 = const false;
        _165 = move _11;
        _164 = <A10 as FromToNativeWasmType>::to_native(move _165) -> [return: bb92, unwind: bb129];
    }

    bb92: {
        _163 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _164) -> [return: bb93, unwind: bb129];
    }

    bb93: {
        _218 = const false;
        _168 = move _12;
        _167 = <A11 as FromToNativeWasmType>::to_native(move _168) -> [return: bb94, unwind: bb128];
    }

    bb94: {
        _166 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _167) -> [return: bb95, unwind: bb128];
    }

    bb95: {
        _217 = const false;
        _171 = move _13;
        _170 = <A12 as FromToNativeWasmType>::to_native(move _171) -> [return: bb96, unwind: bb127];
    }

    bb96: {
        _169 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _170) -> [return: bb97, unwind: bb127];
    }

    bb97: {
        _216 = const false;
        _174 = move _14;
        _173 = <A13 as FromToNativeWasmType>::to_native(move _174) -> [return: bb98, unwind: bb126];
    }

    bb98: {
        _172 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _173) -> [return: bb99, unwind: bb126];
    }

    bb99: {
        _215 = const false;
        _177 = move _15;
        _176 = <A14 as FromToNativeWasmType>::to_native(move _177) -> [return: bb100, unwind: bb125];
    }

    bb100: {
        _175 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _176) -> [return: bb101, unwind: bb125];
    }

    bb101: {
        _135 = [move _136, move _139, move _142, move _145, move _148, move _151, move _154, move _157, move _160, move _163, move _166, move _169, move _172, move _175];
        _182 = _1;
        _181 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>::vmctx(move _182) -> [return: bb102, unwind: bb124];
    }

    bb102: {
        _180 = (_181.1: *mut std::ffi::c_void);
        _179 = move _180 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _185 = &((*_179).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _187 = &_135;
        _186 = _187 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _184 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _185, move _186) -> [return: bb103, unwind: bb124];
    }

    bb103: {
        _183 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _184) -> [return: bb104, unwind: bb124];
    }

    bb104: {
        _188 = discriminant(_183);
        switchInt(move _188) -> [0: bb105, 1: bb106, otherwise: bb44];
    }

    bb105: {
        _190 = move ((_183 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _178 = move _190;
        _191 = <Rets as WasmTypeList>::empty_array() -> [return: bb108, unwind: bb123];
    }

    bb106: {
        _189 = move ((_183 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _189) -> [return: bb107, unwind: bb124];
    }

    bb107: {
        drop(_135) -> [return: bb122, unwind: bb159];
    }

    bb108: {
        _212 = const true;
        _195 = &mut _191;
        _194 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _195) -> [return: bb109, unwind: bb153];
    }

    bb109: {
        _193 = &raw mut (*_194);
        _192 = move _193 as *mut i128 (PtrToPtr);
        _200 = &_178;
        _199 = <Vec<Value<function::Function>> as Deref>::deref(move _200) -> [return: bb110, unwind: bb153];
    }

    bb110: {
        _198 = core::slice::<impl [Value<function::Function>]>::iter(_199) -> [return: bb111, unwind: bb153];
    }

    bb111: {
        _197 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _198) -> [return: bb112, unwind: bb153];
    }

    bb112: {
        _196 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _197) -> [return: bb113, unwind: bb153];
    }

    bb113: {
        _201 = move _196;
        goto -> bb114;
    }

    bb114: {
        _203 = &mut _201;
        _202 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_203) -> [return: bb115, unwind: bb153];
    }

    bb115: {
        _204 = discriminant(_202);
        switchInt(move _204) -> [0: bb117, 1: bb116, otherwise: bb44];
    }

    bb116: {
        _205 = (((_202 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _206 = (((_202 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _208 = std::ptr::mut_ptr::<impl *mut i128>::add(_192, _205) -> [return: bb118, unwind: bb153];
    }

    bb117: {
        _212 = const false;
        _210 = move _191;
        _209 = <Rets as WasmTypeList>::from_array(move _210) -> [return: bb119, unwind: bb153];
    }

    bb118: {
        _207 = Value::<function::Function>::write_value_to(_206, move _208) -> [return: bb174, unwind: bb153];
    }

    bb119: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _209);
        _212 = const false;
        drop(_178) -> [return: bb120, unwind: bb124];
    }

    bb120: {
        drop(_135) -> [return: bb122, unwind: bb159];
    }

    bb121: {
        _214 = const false;
        goto -> bb122;
    }

    bb122: {
        return;
    }

    bb123 (cleanup): {
        drop(_178) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop(_135) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_172) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_169) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        drop(_166) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        drop(_163) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        drop(_160) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        drop(_157) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        drop(_154) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        drop(_151) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        drop(_148) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb134 (cleanup): {
        drop(_145) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        drop(_142) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        drop(_139) -> [return: bb137, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        drop(_136) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        switchInt(_216) -> [0: bb139, otherwise: bb160];
    }

    bb139 (cleanup): {
        switchInt(_217) -> [0: bb140, otherwise: bb161];
    }

    bb140 (cleanup): {
        switchInt(_218) -> [0: bb141, otherwise: bb162];
    }

    bb141 (cleanup): {
        switchInt(_219) -> [0: bb142, otherwise: bb163];
    }

    bb142 (cleanup): {
        switchInt(_220) -> [0: bb143, otherwise: bb164];
    }

    bb143 (cleanup): {
        switchInt(_221) -> [0: bb144, otherwise: bb165];
    }

    bb144 (cleanup): {
        switchInt(_222) -> [0: bb145, otherwise: bb166];
    }

    bb145 (cleanup): {
        switchInt(_223) -> [0: bb146, otherwise: bb167];
    }

    bb146 (cleanup): {
        switchInt(_224) -> [0: bb147, otherwise: bb168];
    }

    bb147 (cleanup): {
        switchInt(_225) -> [0: bb148, otherwise: bb169];
    }

    bb148 (cleanup): {
        switchInt(_226) -> [0: bb149, otherwise: bb170];
    }

    bb149 (cleanup): {
        switchInt(_227) -> [0: bb150, otherwise: bb171];
    }

    bb150 (cleanup): {
        switchInt(_228) -> [0: bb151, otherwise: bb172];
    }

    bb151 (cleanup): {
        resume;
    }

    bb152 (cleanup): {
        drop(_191) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        switchInt(_212) -> [0: bb123, otherwise: bb152];
    }

    bb154 (cleanup): {
        drop(_123) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        switchInt(_213) -> [0: bb159, otherwise: bb154];
    }

    bb156 (cleanup): {
        drop(_64) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        switchInt(_214) -> [0: bb159, otherwise: bb156];
    }

    bb158 (cleanup): {
        drop(_15) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        switchInt(_215) -> [0: bb138, otherwise: bb158];
    }

    bb160 (cleanup): {
        drop(_14) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        drop(_13) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        drop(_12) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        drop(_11) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb164 (cleanup): {
        drop(_10) -> [return: bb143, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        drop(_9) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        drop(_8) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        drop(_7) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        drop(_6) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        drop(_5) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        drop(_4) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        drop(_3) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        drop(_2) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb173: {
        goto -> bb62;
    }

    bb174: {
        goto -> bb114;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    debug A9 => (_1.9: A9);
    debug A10 => (_1.10: A10);
    debug A11 => (_1.11: A11);
    debug A12 => (_1.12: A12);
    debug A13 => (_1.13: A13);
    debug A14 => (_1.14: A14);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: A9;
    let mut _14: A10;
    let mut _15: A11;
    let mut _16: A12;
    let mut _17: A13;
    let mut _18: A14;
    let mut _19: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>;
    let mut _20: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>;
    let mut _21: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>;
    let mut _22: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _23 = const false;
        _23 = const true;
        _24 = const true;
        _25 = const true;
        _26 = const true;
        _27 = const true;
        _28 = const true;
        _29 = const true;
        _30 = const true;
        _31 = const true;
        _32 = const true;
        _33 = const true;
        _34 = const true;
        _35 = const true;
        _36 = const true;
        _19 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>);
        _20 = deref_copy (*_19);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>::address(_20) -> [return: bb1, unwind: bb32];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _21 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>);
        _22 = deref_copy (*_21);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>::vmctx(_22) -> [return: bb2, unwind: bb32];
    }

    bb2: {
        _36 = const false;
        _5 = move (_1.1: A1);
        _35 = const false;
        _6 = move (_1.2: A2);
        _34 = const false;
        _7 = move (_1.3: A3);
        _33 = const false;
        _8 = move (_1.4: A4);
        _32 = const false;
        _9 = move (_1.5: A5);
        _31 = const false;
        _10 = move (_1.6: A6);
        _30 = const false;
        _11 = move (_1.7: A7);
        _29 = const false;
        _12 = move (_1.8: A8);
        _28 = const false;
        _13 = move (_1.9: A9);
        _27 = const false;
        _14 = move (_1.10: A10);
        _26 = const false;
        _15 = move (_1.11: A11);
        _25 = const false;
        _16 = move (_1.12: A12);
        _24 = const false;
        _17 = move (_1.13: A13);
        _23 = const false;
        _18 = move (_1.14: A14);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18) -> [return: bb3, unwind: bb32];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_23) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.14: A14)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_24) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.13: A13)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_25) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.12: A12)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_26) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.11: A11)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_27) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.10: A10)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_28) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.9: A9)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_29) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.8: A8)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_30) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.7: A7)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_31) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.6: A6)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_32) -> [0: bb21, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.5: A5)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_33) -> [0: bb23, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop((_1.4: A4)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_34) -> [0: bb25, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop((_1.3: A3)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_35) -> [0: bb27, otherwise: bb30];
    }

    bb30 (cleanup): {
        drop((_1.2: A2)) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop((_1.1: A1)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_36) -> [0: bb29, otherwise: bb31];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8, _10: A9, _11: A10, _12: A11, _13: A12, _14: A13, _15: A14, _16: A15) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _17: bool;
    let mut _18: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>;
    let _19: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _20: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _21: &str;
    let mut _23: i128;
    let mut _24: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _25: A1;
    let mut _26: i128;
    let mut _27: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A2;
    let mut _29: i128;
    let mut _30: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A3;
    let mut _32: i128;
    let mut _33: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A4;
    let mut _35: i128;
    let mut _36: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A5;
    let mut _38: i128;
    let mut _39: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A6;
    let mut _41: i128;
    let mut _42: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A7;
    let mut _44: i128;
    let mut _45: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A8;
    let mut _47: i128;
    let mut _48: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A9;
    let mut _50: i128;
    let mut _51: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A10;
    let mut _53: i128;
    let mut _54: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A11;
    let mut _56: i128;
    let mut _57: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A12;
    let mut _59: i128;
    let mut _60: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A13;
    let mut _62: i128;
    let mut _63: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A14;
    let mut _65: i128;
    let mut _66: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _67: A15;
    let mut _70: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _73: &mut [i128];
    let mut _74: bool;
    let mut _75: usize;
    let mut _76: &[i128];
    let mut _77: &[i128; 15];
    let mut _78: usize;
    let mut _79: &[i128];
    let mut _80: &mut [i128];
    let mut _81: &mut [i128; 15];
    let mut _82: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _83: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _84: std::slice::Iter<'_, i128>;
    let mut _85: &[i128];
    let mut _86: &[i128; 15];
    let mut _88: std::option::Option<(usize, &i128)>;
    let mut _89: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _90: isize;
    let mut _93: usize;
    let mut _94: bool;
    let mut _95: &mut [i128];
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _97: std::result::Result<(), wasmer_vm::Trap>;
    let _98: &store::Store;
    let mut _99: wasmer_vm::VMFunctionEnvironment;
    let mut _100: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>;
    let mut _101: *const wasmer_vm::VMFunctionBody;
    let mut _102: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>;
    let mut _103: *mut u8;
    let mut _104: *mut i128;
    let mut _105: isize;
    let mut _108: &[i128];
    let mut _109: bool;
    let mut _110: bool;
    let mut _112: &[i128];
    let mut _113: &[i128; 15];
    let mut _115: &mut i128;
    let mut _116: &mut [i128];
    let mut _117: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _118: usize;
    let mut _119: usize;
    let mut _120: bool;
    let _121: ();
    let mut _122: Rets;
    let mut _123: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _124: wasmer_vm::VMFunctionKind;
    let mut _125: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>;
    let mut _126: isize;
    let _127: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _129: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _130: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _131: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _132: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _133: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>;
    let mut _134: isize;
    let _135: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _136: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _137: Rets;
    let mut _138: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _139: [wasmer_types::Value<externals::function::Function>; 15];
    let mut _140: wasmer_types::Value<externals::function::Function>;
    let mut _141: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _142: A1;
    let mut _143: wasmer_types::Value<externals::function::Function>;
    let mut _144: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _145: A2;
    let mut _146: wasmer_types::Value<externals::function::Function>;
    let mut _147: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _148: A3;
    let mut _149: wasmer_types::Value<externals::function::Function>;
    let mut _150: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _151: A4;
    let mut _152: wasmer_types::Value<externals::function::Function>;
    let mut _153: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _154: A5;
    let mut _155: wasmer_types::Value<externals::function::Function>;
    let mut _156: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _157: A6;
    let mut _158: wasmer_types::Value<externals::function::Function>;
    let mut _159: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _160: A7;
    let mut _161: wasmer_types::Value<externals::function::Function>;
    let mut _162: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _163: A8;
    let mut _164: wasmer_types::Value<externals::function::Function>;
    let mut _165: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _166: A9;
    let mut _167: wasmer_types::Value<externals::function::Function>;
    let mut _168: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _169: A10;
    let mut _170: wasmer_types::Value<externals::function::Function>;
    let mut _171: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _172: A11;
    let mut _173: wasmer_types::Value<externals::function::Function>;
    let mut _174: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _175: A12;
    let mut _176: wasmer_types::Value<externals::function::Function>;
    let mut _177: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _178: A13;
    let mut _179: wasmer_types::Value<externals::function::Function>;
    let mut _180: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _181: A14;
    let mut _182: wasmer_types::Value<externals::function::Function>;
    let mut _183: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _184: A15;
    let mut _187: *mut std::ffi::c_void;
    let mut _188: wasmer_vm::VMFunctionEnvironment;
    let mut _189: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>;
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _191: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _192: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _193: &[wasmer_types::Value<externals::function::Function>];
    let _194: &[wasmer_types::Value<externals::function::Function>; 15];
    let mut _195: isize;
    let mut _200: *mut [i128];
    let mut _201: &mut [i128];
    let mut _202: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _203: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _204: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _205: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _206: &[wasmer_types::Value<externals::function::Function>];
    let mut _207: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _209: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _210: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _211: isize;
    let _214: ();
    let mut _215: *mut i128;
    let mut _216: Rets;
    let mut _217: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _218: &i128;
    let mut _219: bool;
    let mut _220: bool;
    let mut _221: bool;
    let mut _222: bool;
    let mut _223: bool;
    let mut _224: bool;
    let mut _225: bool;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: bool;
    let mut _229: bool;
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: bool;
    let mut _233: bool;
    let mut _234: bool;
    let mut _235: bool;
    let mut _236: bool;
    scope 1 {
        debug trampoline => _19;
        let mut _22: [i128; 15];
        scope 2 {
            debug params_list => _22;
            let mut _68: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _68;
                let _69: &mut [i128];
                scope 4 {
                    debug rets_list => _69;
                    let _71: bool;
                    scope 5 {
                        debug using_rets_array => _71;
                        let _72: &mut [i128];
                        let mut _87: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _72;
                            let _106: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _107: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _106;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _107;
                                let _111: *const i128;
                                scope 15 {
                                    debug src_pointer => _111;
                                    let _114: *mut i128;
                                    scope 16 {
                                        debug rets_list => _114;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _87;
                            let _91: usize;
                            let _92: i128;
                            scope 8 {
                                debug i => _91;
                                debug arg => _92;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _127;
    }
    scope 19 {
        debug residual => _135;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _136;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _139;
        let _185: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _185;
            let mut _198: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _198;
                let _199: *mut i128;
                scope 32 {
                    debug mut_rets => _199;
                    let mut _208: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _208;
                        let _212: usize;
                        let _213: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _212;
                            debug ret => _213;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _186: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _186;
                let _196: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _197: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _196;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _197;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _236 = const false;
        _235 = const false;
        _234 = const false;
        _233 = const false;
        _232 = const false;
        _231 = const false;
        _230 = const false;
        _229 = const false;
        _228 = const false;
        _227 = const false;
        _226 = const false;
        _225 = const false;
        _224 = const false;
        _223 = const false;
        _222 = const false;
        _221 = const false;
        _220 = const false;
        _219 = const false;
        _236 = const true;
        _235 = const true;
        _234 = const true;
        _233 = const true;
        _232 = const true;
        _231 = const true;
        _230 = const true;
        _229 = const true;
        _228 = const true;
        _227 = const true;
        _226 = const true;
        _225 = const true;
        _224 = const true;
        _223 = const true;
        _222 = const true;
        _18 = _1;
        _17 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>::is_host(move _18) -> [return: bb1, unwind: bb165];
    }

    bb1: {
        switchInt(move _17) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _125 = _1;
        _124 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>::arg_kind(move _125) -> [return: bb66, unwind: bb165];
    }

    bb3: {
        _20 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _21 = const "Call trampoline not found in wasm function";
        _19 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _20, _21) -> [return: bb4, unwind: bb165];
    }

    bb4: {
        _236 = const false;
        _25 = move _2;
        _24 = <A1 as FromToNativeWasmType>::to_native(move _25) -> [return: bb5, unwind: bb165];
    }

    bb5: {
        _23 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _24) -> [return: bb6, unwind: bb165];
    }

    bb6: {
        _235 = const false;
        _28 = move _3;
        _27 = <A2 as FromToNativeWasmType>::to_native(move _28) -> [return: bb7, unwind: bb165];
    }

    bb7: {
        _26 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _27) -> [return: bb8, unwind: bb165];
    }

    bb8: {
        _234 = const false;
        _31 = move _4;
        _30 = <A3 as FromToNativeWasmType>::to_native(move _31) -> [return: bb9, unwind: bb165];
    }

    bb9: {
        _29 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _30) -> [return: bb10, unwind: bb165];
    }

    bb10: {
        _233 = const false;
        _34 = move _5;
        _33 = <A4 as FromToNativeWasmType>::to_native(move _34) -> [return: bb11, unwind: bb165];
    }

    bb11: {
        _32 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _33) -> [return: bb12, unwind: bb165];
    }

    bb12: {
        _232 = const false;
        _37 = move _6;
        _36 = <A5 as FromToNativeWasmType>::to_native(move _37) -> [return: bb13, unwind: bb165];
    }

    bb13: {
        _35 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _36) -> [return: bb14, unwind: bb165];
    }

    bb14: {
        _231 = const false;
        _40 = move _7;
        _39 = <A6 as FromToNativeWasmType>::to_native(move _40) -> [return: bb15, unwind: bb165];
    }

    bb15: {
        _38 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _39) -> [return: bb16, unwind: bb165];
    }

    bb16: {
        _230 = const false;
        _43 = move _8;
        _42 = <A7 as FromToNativeWasmType>::to_native(move _43) -> [return: bb17, unwind: bb165];
    }

    bb17: {
        _41 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _42) -> [return: bb18, unwind: bb165];
    }

    bb18: {
        _229 = const false;
        _46 = move _9;
        _45 = <A8 as FromToNativeWasmType>::to_native(move _46) -> [return: bb19, unwind: bb165];
    }

    bb19: {
        _44 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _45) -> [return: bb20, unwind: bb165];
    }

    bb20: {
        _228 = const false;
        _49 = move _10;
        _48 = <A9 as FromToNativeWasmType>::to_native(move _49) -> [return: bb21, unwind: bb165];
    }

    bb21: {
        _47 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _48) -> [return: bb22, unwind: bb165];
    }

    bb22: {
        _227 = const false;
        _52 = move _11;
        _51 = <A10 as FromToNativeWasmType>::to_native(move _52) -> [return: bb23, unwind: bb165];
    }

    bb23: {
        _50 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _51) -> [return: bb24, unwind: bb165];
    }

    bb24: {
        _226 = const false;
        _55 = move _12;
        _54 = <A11 as FromToNativeWasmType>::to_native(move _55) -> [return: bb25, unwind: bb165];
    }

    bb25: {
        _53 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _54) -> [return: bb26, unwind: bb165];
    }

    bb26: {
        _225 = const false;
        _58 = move _13;
        _57 = <A12 as FromToNativeWasmType>::to_native(move _58) -> [return: bb27, unwind: bb165];
    }

    bb27: {
        _56 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _57) -> [return: bb28, unwind: bb165];
    }

    bb28: {
        _224 = const false;
        _61 = move _14;
        _60 = <A13 as FromToNativeWasmType>::to_native(move _61) -> [return: bb29, unwind: bb165];
    }

    bb29: {
        _59 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _60) -> [return: bb30, unwind: bb165];
    }

    bb30: {
        _223 = const false;
        _64 = move _15;
        _63 = <A14 as FromToNativeWasmType>::to_native(move _64) -> [return: bb31, unwind: bb165];
    }

    bb31: {
        _62 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _63) -> [return: bb32, unwind: bb165];
    }

    bb32: {
        _222 = const false;
        _67 = move _16;
        _66 = <A15 as FromToNativeWasmType>::to_native(move _67) -> [return: bb33, unwind: bb165];
    }

    bb33: {
        _65 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _66) -> [return: bb34, unwind: bb165];
    }

    bb34: {
        _22 = [move _23, move _26, move _29, move _32, move _35, move _38, move _41, move _44, move _47, move _50, move _53, move _56, move _59, move _62, move _65];
        _68 = <Rets as WasmTypeList>::empty_array() -> [return: bb35, unwind: bb165];
    }

    bb35: {
        _221 = const true;
        _70 = &mut _68;
        _69 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _70) -> [return: bb36, unwind: bb163];
    }

    bb36: {
        _77 = &_22;
        _76 = move _77 as &[i128] (PointerCoercion(Unsize));
        _75 = Len((*_76));
        _79 = &(*_69);
        _78 = Len((*_79));
        _74 = Gt(move _75, move _78);
        switchInt(move _74) -> [0: bb39, otherwise: bb37];
    }

    bb37: {
        _71 = const false;
        _81 = &mut _22;
        _80 = <[i128; 15] as AsMut<[i128]>>::as_mut(move _81) -> [return: bb38, unwind: bb163];
    }

    bb38: {
        _73 = _80;
        goto -> bb50;
    }

    bb39: {
        _71 = const true;
        _86 = &_22;
        _85 = move _86 as &[i128] (PointerCoercion(Unsize));
        _84 = core::slice::<impl [i128]>::iter(move _85) -> [return: bb40, unwind: bb163];
    }

    bb40: {
        _83 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _84) -> [return: bb41, unwind: bb163];
    }

    bb41: {
        _82 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _83) -> [return: bb42, unwind: bb163];
    }

    bb42: {
        _87 = move _82;
        goto -> bb43;
    }

    bb43: {
        _89 = &mut _87;
        _88 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_89) -> [return: bb44, unwind: bb163];
    }

    bb44: {
        _90 = discriminant(_88);
        switchInt(move _90) -> [0: bb47, 1: bb45, otherwise: bb46];
    }

    bb45: {
        _218 = deref_copy (((_88 as Some).0: (usize, &i128)).1: &i128);
        _92 = (*_218);
        _91 = (((_88 as Some).0: (usize, &i128)).0: usize);
        _93 = Len((*_69));
        _94 = Lt(_91, _93);
        assert(move _94, "index out of bounds: the length is {} but the index is {}", move _93, _91) -> [success: bb48, unwind: bb163];
    }

    bb46: {
        unreachable;
    }

    bb47: {
        _95 = <[i128] as AsMut<[i128]>>::as_mut(_69) -> [return: bb49, unwind: bb163];
    }

    bb48: {
        (*_69)[_91] = _92;
        goto -> bb43;
    }

    bb49: {
        _73 = _95;
        goto -> bb50;
    }

    bb50: {
        _72 = _73;
        _98 = &((*_1).0: store::Store);
        _100 = _1;
        _99 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>::vmctx(move _100) -> [return: bb51, unwind: bb163];
    }

    bb51: {
        _102 = _1;
        _101 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>::address(move _102) -> [return: bb52, unwind: bb163];
    }

    bb52: {
        _104 = core::slice::<impl [i128]>::as_mut_ptr(_72) -> [return: bb53, unwind: bb163];
    }

    bb53: {
        _103 = move _104 as *mut u8 (PtrToPtr);
        _97 = wasmer_call_trampoline::<Store>(_98, move _99, _19, move _101, move _103) -> [return: bb54, unwind: bb163];
    }

    bb54: {
        _96 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _97) -> [return: bb55, unwind: bb163];
    }

    bb55: {
        _105 = discriminant(_96);
        switchInt(move _105) -> [0: bb56, 1: bb57, otherwise: bb46];
    }

    bb56: {
        _108 = &(*_69);
        _107 = Len((*_108));
        _109 = _71;
        switchInt(move _109) -> [0: bb59, otherwise: bb64];
    }

    bb57: {
        _106 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _106) -> [return: bb58, unwind: bb163];
    }

    bb58: {
        drop(_68) -> [return: bb125, unwind: bb165];
    }

    bb59: {
        _110 = Gt(_107, const 0_usize);
        switchInt(move _110) -> [0: bb64, otherwise: bb60];
    }

    bb60: {
        _113 = &_22;
        _112 = move _113 as &[i128] (PointerCoercion(Unsize));
        _111 = core::slice::<impl [i128]>::as_ptr(move _112) -> [return: bb61, unwind: bb163];
    }

    bb61: {
        _117 = &mut _68;
        _116 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _117) -> [return: bb62, unwind: bb163];
    }

    bb62: {
        _118 = const 0_usize;
        _119 = Len((*_116));
        _120 = Lt(_118, _119);
        assert(move _120, "index out of bounds: the length is {} but the index is {}", move _119, _118) -> [success: bb63, unwind: bb163];
    }

    bb63: {
        _115 = &mut (*_116)[_118];
        _114 = &raw mut (*_115);
        _121 = copy_nonoverlapping::<i128>(_111, _114, _107) -> [return: bb180, unwind: bb163];
    }

    bb64: {
        _221 = const false;
        _123 = move _68;
        _122 = <Rets as WasmTypeList>::from_array(move _123) -> [return: bb65, unwind: bb163];
    }

    bb65: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _122);
        _221 = const false;
        goto -> bb126;
    }

    bb66: {
        _126 = discriminant(_124);
        switchInt(move _126) -> [0: bb68, 1: bb67, otherwise: bb46];
    }

    bb67: {
        _236 = const false;
        _142 = move _2;
        _141 = <A1 as FromToNativeWasmType>::to_native(move _142) -> [return: bb76, unwind: bb165];
    }

    bb68: {
        _133 = &_1;
        _236 = const false;
        _235 = const false;
        _234 = const false;
        _233 = const false;
        _232 = const false;
        _231 = const false;
        _230 = const false;
        _229 = const false;
        _228 = const false;
        _227 = const false;
        _226 = const false;
        _225 = const false;
        _224 = const false;
        _223 = const false;
        _222 = const false;
        _132 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _133, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16 };
        _131 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _132);
        _130 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _131) -> [return: bb69, unwind: bb165];
    }

    bb69: {
        _129 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _130, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb70, unwind: bb165];
    }

    bb70: {
        _128 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _129) -> [return: bb71, unwind: bb165];
    }

    bb71: {
        _134 = discriminant(_128);
        switchInt(move _134) -> [0: bb72, 1: bb73, otherwise: bb46];
    }

    bb72: {
        _136 = move ((_128 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _220 = const true;
        _127 = move _136;
        _220 = const false;
        _138 = move _127;
        _137 = <Rets as WasmTypeList>::from_c_struct(move _138) -> [return: bb75, unwind: bb161];
    }

    bb73: {
        _135 = move ((_128 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _135) -> [return: bb74, unwind: bb165];
    }

    bb74: {
        _220 = const false;
        goto -> bb126;
    }

    bb75: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _137);
        _220 = const false;
        goto -> bb126;
    }

    bb76: {
        _140 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _141) -> [return: bb77, unwind: bb165];
    }

    bb77: {
        _235 = const false;
        _145 = move _3;
        _144 = <A2 as FromToNativeWasmType>::to_native(move _145) -> [return: bb78, unwind: bb142];
    }

    bb78: {
        _143 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _144) -> [return: bb79, unwind: bb142];
    }

    bb79: {
        _234 = const false;
        _148 = move _4;
        _147 = <A3 as FromToNativeWasmType>::to_native(move _148) -> [return: bb80, unwind: bb141];
    }

    bb80: {
        _146 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _147) -> [return: bb81, unwind: bb141];
    }

    bb81: {
        _233 = const false;
        _151 = move _5;
        _150 = <A4 as FromToNativeWasmType>::to_native(move _151) -> [return: bb82, unwind: bb140];
    }

    bb82: {
        _149 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _150) -> [return: bb83, unwind: bb140];
    }

    bb83: {
        _232 = const false;
        _154 = move _6;
        _153 = <A5 as FromToNativeWasmType>::to_native(move _154) -> [return: bb84, unwind: bb139];
    }

    bb84: {
        _152 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _153) -> [return: bb85, unwind: bb139];
    }

    bb85: {
        _231 = const false;
        _157 = move _7;
        _156 = <A6 as FromToNativeWasmType>::to_native(move _157) -> [return: bb86, unwind: bb138];
    }

    bb86: {
        _155 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _156) -> [return: bb87, unwind: bb138];
    }

    bb87: {
        _230 = const false;
        _160 = move _8;
        _159 = <A7 as FromToNativeWasmType>::to_native(move _160) -> [return: bb88, unwind: bb137];
    }

    bb88: {
        _158 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _159) -> [return: bb89, unwind: bb137];
    }

    bb89: {
        _229 = const false;
        _163 = move _9;
        _162 = <A8 as FromToNativeWasmType>::to_native(move _163) -> [return: bb90, unwind: bb136];
    }

    bb90: {
        _161 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _162) -> [return: bb91, unwind: bb136];
    }

    bb91: {
        _228 = const false;
        _166 = move _10;
        _165 = <A9 as FromToNativeWasmType>::to_native(move _166) -> [return: bb92, unwind: bb135];
    }

    bb92: {
        _164 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _165) -> [return: bb93, unwind: bb135];
    }

    bb93: {
        _227 = const false;
        _169 = move _11;
        _168 = <A10 as FromToNativeWasmType>::to_native(move _169) -> [return: bb94, unwind: bb134];
    }

    bb94: {
        _167 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _168) -> [return: bb95, unwind: bb134];
    }

    bb95: {
        _226 = const false;
        _172 = move _12;
        _171 = <A11 as FromToNativeWasmType>::to_native(move _172) -> [return: bb96, unwind: bb133];
    }

    bb96: {
        _170 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _171) -> [return: bb97, unwind: bb133];
    }

    bb97: {
        _225 = const false;
        _175 = move _13;
        _174 = <A12 as FromToNativeWasmType>::to_native(move _175) -> [return: bb98, unwind: bb132];
    }

    bb98: {
        _173 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _174) -> [return: bb99, unwind: bb132];
    }

    bb99: {
        _224 = const false;
        _178 = move _14;
        _177 = <A13 as FromToNativeWasmType>::to_native(move _178) -> [return: bb100, unwind: bb131];
    }

    bb100: {
        _176 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _177) -> [return: bb101, unwind: bb131];
    }

    bb101: {
        _223 = const false;
        _181 = move _15;
        _180 = <A14 as FromToNativeWasmType>::to_native(move _181) -> [return: bb102, unwind: bb130];
    }

    bb102: {
        _179 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _180) -> [return: bb103, unwind: bb130];
    }

    bb103: {
        _222 = const false;
        _184 = move _16;
        _183 = <A15 as FromToNativeWasmType>::to_native(move _184) -> [return: bb104, unwind: bb129];
    }

    bb104: {
        _182 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _183) -> [return: bb105, unwind: bb129];
    }

    bb105: {
        _139 = [move _140, move _143, move _146, move _149, move _152, move _155, move _158, move _161, move _164, move _167, move _170, move _173, move _176, move _179, move _182];
        _189 = _1;
        _188 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>::vmctx(move _189) -> [return: bb106, unwind: bb128];
    }

    bb106: {
        _187 = (_188.1: *mut std::ffi::c_void);
        _186 = move _187 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _192 = &((*_186).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _194 = &_139;
        _193 = _194 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _191 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _192, move _193) -> [return: bb107, unwind: bb128];
    }

    bb107: {
        _190 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _191) -> [return: bb108, unwind: bb128];
    }

    bb108: {
        _195 = discriminant(_190);
        switchInt(move _195) -> [0: bb109, 1: bb110, otherwise: bb46];
    }

    bb109: {
        _197 = move ((_190 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _185 = move _197;
        _198 = <Rets as WasmTypeList>::empty_array() -> [return: bb112, unwind: bb127];
    }

    bb110: {
        _196 = move ((_190 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _196) -> [return: bb111, unwind: bb128];
    }

    bb111: {
        drop(_139) -> [return: bb126, unwind: bb165];
    }

    bb112: {
        _219 = const true;
        _202 = &mut _198;
        _201 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _202) -> [return: bb113, unwind: bb159];
    }

    bb113: {
        _200 = &raw mut (*_201);
        _199 = move _200 as *mut i128 (PtrToPtr);
        _207 = &_185;
        _206 = <Vec<Value<function::Function>> as Deref>::deref(move _207) -> [return: bb114, unwind: bb159];
    }

    bb114: {
        _205 = core::slice::<impl [Value<function::Function>]>::iter(_206) -> [return: bb115, unwind: bb159];
    }

    bb115: {
        _204 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _205) -> [return: bb116, unwind: bb159];
    }

    bb116: {
        _203 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _204) -> [return: bb117, unwind: bb159];
    }

    bb117: {
        _208 = move _203;
        goto -> bb118;
    }

    bb118: {
        _210 = &mut _208;
        _209 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_210) -> [return: bb119, unwind: bb159];
    }

    bb119: {
        _211 = discriminant(_209);
        switchInt(move _211) -> [0: bb121, 1: bb120, otherwise: bb46];
    }

    bb120: {
        _212 = (((_209 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _213 = (((_209 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _215 = std::ptr::mut_ptr::<impl *mut i128>::add(_199, _212) -> [return: bb122, unwind: bb159];
    }

    bb121: {
        _219 = const false;
        _217 = move _198;
        _216 = <Rets as WasmTypeList>::from_array(move _217) -> [return: bb123, unwind: bb159];
    }

    bb122: {
        _214 = Value::<function::Function>::write_value_to(_213, move _215) -> [return: bb181, unwind: bb159];
    }

    bb123: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _216);
        _219 = const false;
        drop(_185) -> [return: bb124, unwind: bb128];
    }

    bb124: {
        drop(_139) -> [return: bb126, unwind: bb165];
    }

    bb125: {
        _221 = const false;
        goto -> bb126;
    }

    bb126: {
        return;
    }

    bb127 (cleanup): {
        drop(_185) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        drop(_139) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        drop(_179) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        drop(_176) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        drop(_173) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        drop(_170) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        drop(_167) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb134 (cleanup): {
        drop(_164) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        drop(_161) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        drop(_158) -> [return: bb137, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        drop(_155) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        drop(_152) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        drop(_149) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        drop(_146) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        drop(_143) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        drop(_140) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        switchInt(_223) -> [0: bb144, otherwise: bb166];
    }

    bb144 (cleanup): {
        switchInt(_224) -> [0: bb145, otherwise: bb167];
    }

    bb145 (cleanup): {
        switchInt(_225) -> [0: bb146, otherwise: bb168];
    }

    bb146 (cleanup): {
        switchInt(_226) -> [0: bb147, otherwise: bb169];
    }

    bb147 (cleanup): {
        switchInt(_227) -> [0: bb148, otherwise: bb170];
    }

    bb148 (cleanup): {
        switchInt(_228) -> [0: bb149, otherwise: bb171];
    }

    bb149 (cleanup): {
        switchInt(_229) -> [0: bb150, otherwise: bb172];
    }

    bb150 (cleanup): {
        switchInt(_230) -> [0: bb151, otherwise: bb173];
    }

    bb151 (cleanup): {
        switchInt(_231) -> [0: bb152, otherwise: bb174];
    }

    bb152 (cleanup): {
        switchInt(_232) -> [0: bb153, otherwise: bb175];
    }

    bb153 (cleanup): {
        switchInt(_233) -> [0: bb154, otherwise: bb176];
    }

    bb154 (cleanup): {
        switchInt(_234) -> [0: bb155, otherwise: bb177];
    }

    bb155 (cleanup): {
        switchInt(_235) -> [0: bb156, otherwise: bb178];
    }

    bb156 (cleanup): {
        switchInt(_236) -> [0: bb157, otherwise: bb179];
    }

    bb157 (cleanup): {
        resume;
    }

    bb158 (cleanup): {
        drop(_198) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        switchInt(_219) -> [0: bb127, otherwise: bb158];
    }

    bb160 (cleanup): {
        drop(_127) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        switchInt(_220) -> [0: bb165, otherwise: bb160];
    }

    bb162 (cleanup): {
        drop(_68) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        switchInt(_221) -> [0: bb165, otherwise: bb162];
    }

    bb164 (cleanup): {
        drop(_16) -> [return: bb143, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        switchInt(_222) -> [0: bb143, otherwise: bb164];
    }

    bb166 (cleanup): {
        drop(_15) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        drop(_14) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        drop(_13) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        drop(_12) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        drop(_11) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        drop(_10) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        drop(_9) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        drop(_8) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        drop(_7) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        drop(_6) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        drop(_5) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        drop(_4) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_3) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        drop(_2) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb180: {
        goto -> bb64;
    }

    bb181: {
        goto -> bb118;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    debug A9 => (_1.9: A9);
    debug A10 => (_1.10: A10);
    debug A11 => (_1.11: A11);
    debug A12 => (_1.12: A12);
    debug A13 => (_1.13: A13);
    debug A14 => (_1.14: A14);
    debug A15 => (_1.15: A15);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: A9;
    let mut _14: A10;
    let mut _15: A11;
    let mut _16: A12;
    let mut _17: A13;
    let mut _18: A14;
    let mut _19: A15;
    let mut _20: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>;
    let mut _21: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>;
    let mut _22: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>;
    let mut _23: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _24 = const false;
        _24 = const true;
        _25 = const true;
        _26 = const true;
        _27 = const true;
        _28 = const true;
        _29 = const true;
        _30 = const true;
        _31 = const true;
        _32 = const true;
        _33 = const true;
        _34 = const true;
        _35 = const true;
        _36 = const true;
        _37 = const true;
        _38 = const true;
        _20 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>);
        _21 = deref_copy (*_20);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>::address(_21) -> [return: bb1, unwind: bb34];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _22 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>);
        _23 = deref_copy (*_22);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>::vmctx(_23) -> [return: bb2, unwind: bb34];
    }

    bb2: {
        _38 = const false;
        _5 = move (_1.1: A1);
        _37 = const false;
        _6 = move (_1.2: A2);
        _36 = const false;
        _7 = move (_1.3: A3);
        _35 = const false;
        _8 = move (_1.4: A4);
        _34 = const false;
        _9 = move (_1.5: A5);
        _33 = const false;
        _10 = move (_1.6: A6);
        _32 = const false;
        _11 = move (_1.7: A7);
        _31 = const false;
        _12 = move (_1.8: A8);
        _30 = const false;
        _13 = move (_1.9: A9);
        _29 = const false;
        _14 = move (_1.10: A10);
        _28 = const false;
        _15 = move (_1.11: A11);
        _27 = const false;
        _16 = move (_1.12: A12);
        _26 = const false;
        _17 = move (_1.13: A13);
        _25 = const false;
        _18 = move (_1.14: A14);
        _24 = const false;
        _19 = move (_1.15: A15);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19) -> [return: bb3, unwind: bb34];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_24) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.15: A15)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_25) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.14: A14)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_26) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.13: A13)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_27) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.12: A12)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_28) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.11: A11)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_29) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.10: A10)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_30) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.9: A9)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_31) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.8: A8)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_32) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.7: A7)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_33) -> [0: bb21, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.6: A6)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_34) -> [0: bb23, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop((_1.5: A5)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_35) -> [0: bb25, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop((_1.4: A4)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_36) -> [0: bb27, otherwise: bb30];
    }

    bb30 (cleanup): {
        drop((_1.3: A3)) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_37) -> [0: bb29, otherwise: bb32];
    }

    bb32 (cleanup): {
        drop((_1.2: A2)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop((_1.1: A1)) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_38) -> [0: bb31, otherwise: bb33];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8, _10: A9, _11: A10, _12: A11, _13: A12, _14: A13, _15: A14, _16: A15, _17: A16) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _18: bool;
    let mut _19: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>;
    let _20: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _21: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _22: &str;
    let mut _24: i128;
    let mut _25: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _26: A1;
    let mut _27: i128;
    let mut _28: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A2;
    let mut _30: i128;
    let mut _31: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A3;
    let mut _33: i128;
    let mut _34: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A4;
    let mut _36: i128;
    let mut _37: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A5;
    let mut _39: i128;
    let mut _40: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A6;
    let mut _42: i128;
    let mut _43: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A7;
    let mut _45: i128;
    let mut _46: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A8;
    let mut _48: i128;
    let mut _49: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A9;
    let mut _51: i128;
    let mut _52: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A10;
    let mut _54: i128;
    let mut _55: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A11;
    let mut _57: i128;
    let mut _58: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A12;
    let mut _60: i128;
    let mut _61: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A13;
    let mut _63: i128;
    let mut _64: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A14;
    let mut _66: i128;
    let mut _67: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _68: A15;
    let mut _69: i128;
    let mut _70: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _71: A16;
    let mut _74: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _77: &mut [i128];
    let mut _78: bool;
    let mut _79: usize;
    let mut _80: &[i128];
    let mut _81: &[i128; 16];
    let mut _82: usize;
    let mut _83: &[i128];
    let mut _84: &mut [i128];
    let mut _85: &mut [i128; 16];
    let mut _86: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _87: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _88: std::slice::Iter<'_, i128>;
    let mut _89: &[i128];
    let mut _90: &[i128; 16];
    let mut _92: std::option::Option<(usize, &i128)>;
    let mut _93: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _94: isize;
    let mut _97: usize;
    let mut _98: bool;
    let mut _99: &mut [i128];
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _101: std::result::Result<(), wasmer_vm::Trap>;
    let _102: &store::Store;
    let mut _103: wasmer_vm::VMFunctionEnvironment;
    let mut _104: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>;
    let mut _105: *const wasmer_vm::VMFunctionBody;
    let mut _106: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>;
    let mut _107: *mut u8;
    let mut _108: *mut i128;
    let mut _109: isize;
    let mut _112: &[i128];
    let mut _113: bool;
    let mut _114: bool;
    let mut _116: &[i128];
    let mut _117: &[i128; 16];
    let mut _119: &mut i128;
    let mut _120: &mut [i128];
    let mut _121: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _122: usize;
    let mut _123: usize;
    let mut _124: bool;
    let _125: ();
    let mut _126: Rets;
    let mut _127: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _128: wasmer_vm::VMFunctionKind;
    let mut _129: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>;
    let mut _130: isize;
    let _131: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _133: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _134: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _135: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _136: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _137: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>;
    let mut _138: isize;
    let _139: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _140: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _141: Rets;
    let mut _142: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _143: [wasmer_types::Value<externals::function::Function>; 16];
    let mut _144: wasmer_types::Value<externals::function::Function>;
    let mut _145: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _146: A1;
    let mut _147: wasmer_types::Value<externals::function::Function>;
    let mut _148: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _149: A2;
    let mut _150: wasmer_types::Value<externals::function::Function>;
    let mut _151: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _152: A3;
    let mut _153: wasmer_types::Value<externals::function::Function>;
    let mut _154: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _155: A4;
    let mut _156: wasmer_types::Value<externals::function::Function>;
    let mut _157: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _158: A5;
    let mut _159: wasmer_types::Value<externals::function::Function>;
    let mut _160: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _161: A6;
    let mut _162: wasmer_types::Value<externals::function::Function>;
    let mut _163: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _164: A7;
    let mut _165: wasmer_types::Value<externals::function::Function>;
    let mut _166: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _167: A8;
    let mut _168: wasmer_types::Value<externals::function::Function>;
    let mut _169: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _170: A9;
    let mut _171: wasmer_types::Value<externals::function::Function>;
    let mut _172: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _173: A10;
    let mut _174: wasmer_types::Value<externals::function::Function>;
    let mut _175: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _176: A11;
    let mut _177: wasmer_types::Value<externals::function::Function>;
    let mut _178: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _179: A12;
    let mut _180: wasmer_types::Value<externals::function::Function>;
    let mut _181: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _182: A13;
    let mut _183: wasmer_types::Value<externals::function::Function>;
    let mut _184: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _185: A14;
    let mut _186: wasmer_types::Value<externals::function::Function>;
    let mut _187: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _188: A15;
    let mut _189: wasmer_types::Value<externals::function::Function>;
    let mut _190: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _191: A16;
    let mut _194: *mut std::ffi::c_void;
    let mut _195: wasmer_vm::VMFunctionEnvironment;
    let mut _196: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>;
    let mut _197: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _198: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _199: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _200: &[wasmer_types::Value<externals::function::Function>];
    let _201: &[wasmer_types::Value<externals::function::Function>; 16];
    let mut _202: isize;
    let mut _207: *mut [i128];
    let mut _208: &mut [i128];
    let mut _209: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _210: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _211: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _212: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _213: &[wasmer_types::Value<externals::function::Function>];
    let mut _214: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _216: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _217: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _218: isize;
    let _221: ();
    let mut _222: *mut i128;
    let mut _223: Rets;
    let mut _224: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _225: &i128;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: bool;
    let mut _229: bool;
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: bool;
    let mut _233: bool;
    let mut _234: bool;
    let mut _235: bool;
    let mut _236: bool;
    let mut _237: bool;
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: bool;
    let mut _241: bool;
    let mut _242: bool;
    let mut _243: bool;
    let mut _244: bool;
    scope 1 {
        debug trampoline => _20;
        let mut _23: [i128; 16];
        scope 2 {
            debug params_list => _23;
            let mut _72: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _72;
                let _73: &mut [i128];
                scope 4 {
                    debug rets_list => _73;
                    let _75: bool;
                    scope 5 {
                        debug using_rets_array => _75;
                        let _76: &mut [i128];
                        let mut _91: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _76;
                            let _110: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _111: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _110;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _111;
                                let _115: *const i128;
                                scope 15 {
                                    debug src_pointer => _115;
                                    let _118: *mut i128;
                                    scope 16 {
                                        debug rets_list => _118;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _91;
                            let _95: usize;
                            let _96: i128;
                            scope 8 {
                                debug i => _95;
                                debug arg => _96;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _131;
    }
    scope 19 {
        debug residual => _139;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _140;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _143;
        let _192: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _192;
            let mut _205: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _205;
                let _206: *mut i128;
                scope 32 {
                    debug mut_rets => _206;
                    let mut _215: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _215;
                        let _219: usize;
                        let _220: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _219;
                            debug ret => _220;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _193: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _193;
                let _203: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _204: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _203;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _204;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _244 = const false;
        _243 = const false;
        _242 = const false;
        _241 = const false;
        _240 = const false;
        _239 = const false;
        _238 = const false;
        _237 = const false;
        _236 = const false;
        _235 = const false;
        _234 = const false;
        _233 = const false;
        _232 = const false;
        _231 = const false;
        _230 = const false;
        _229 = const false;
        _228 = const false;
        _227 = const false;
        _226 = const false;
        _244 = const true;
        _243 = const true;
        _242 = const true;
        _241 = const true;
        _240 = const true;
        _239 = const true;
        _238 = const true;
        _237 = const true;
        _236 = const true;
        _235 = const true;
        _234 = const true;
        _233 = const true;
        _232 = const true;
        _231 = const true;
        _230 = const true;
        _229 = const true;
        _19 = _1;
        _18 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>::is_host(move _19) -> [return: bb1, unwind: bb171];
    }

    bb1: {
        switchInt(move _18) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _129 = _1;
        _128 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>::arg_kind(move _129) -> [return: bb68, unwind: bb171];
    }

    bb3: {
        _21 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _22 = const "Call trampoline not found in wasm function";
        _20 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _21, _22) -> [return: bb4, unwind: bb171];
    }

    bb4: {
        _244 = const false;
        _26 = move _2;
        _25 = <A1 as FromToNativeWasmType>::to_native(move _26) -> [return: bb5, unwind: bb171];
    }

    bb5: {
        _24 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _25) -> [return: bb6, unwind: bb171];
    }

    bb6: {
        _243 = const false;
        _29 = move _3;
        _28 = <A2 as FromToNativeWasmType>::to_native(move _29) -> [return: bb7, unwind: bb171];
    }

    bb7: {
        _27 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _28) -> [return: bb8, unwind: bb171];
    }

    bb8: {
        _242 = const false;
        _32 = move _4;
        _31 = <A3 as FromToNativeWasmType>::to_native(move _32) -> [return: bb9, unwind: bb171];
    }

    bb9: {
        _30 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _31) -> [return: bb10, unwind: bb171];
    }

    bb10: {
        _241 = const false;
        _35 = move _5;
        _34 = <A4 as FromToNativeWasmType>::to_native(move _35) -> [return: bb11, unwind: bb171];
    }

    bb11: {
        _33 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _34) -> [return: bb12, unwind: bb171];
    }

    bb12: {
        _240 = const false;
        _38 = move _6;
        _37 = <A5 as FromToNativeWasmType>::to_native(move _38) -> [return: bb13, unwind: bb171];
    }

    bb13: {
        _36 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _37) -> [return: bb14, unwind: bb171];
    }

    bb14: {
        _239 = const false;
        _41 = move _7;
        _40 = <A6 as FromToNativeWasmType>::to_native(move _41) -> [return: bb15, unwind: bb171];
    }

    bb15: {
        _39 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _40) -> [return: bb16, unwind: bb171];
    }

    bb16: {
        _238 = const false;
        _44 = move _8;
        _43 = <A7 as FromToNativeWasmType>::to_native(move _44) -> [return: bb17, unwind: bb171];
    }

    bb17: {
        _42 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _43) -> [return: bb18, unwind: bb171];
    }

    bb18: {
        _237 = const false;
        _47 = move _9;
        _46 = <A8 as FromToNativeWasmType>::to_native(move _47) -> [return: bb19, unwind: bb171];
    }

    bb19: {
        _45 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _46) -> [return: bb20, unwind: bb171];
    }

    bb20: {
        _236 = const false;
        _50 = move _10;
        _49 = <A9 as FromToNativeWasmType>::to_native(move _50) -> [return: bb21, unwind: bb171];
    }

    bb21: {
        _48 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _49) -> [return: bb22, unwind: bb171];
    }

    bb22: {
        _235 = const false;
        _53 = move _11;
        _52 = <A10 as FromToNativeWasmType>::to_native(move _53) -> [return: bb23, unwind: bb171];
    }

    bb23: {
        _51 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _52) -> [return: bb24, unwind: bb171];
    }

    bb24: {
        _234 = const false;
        _56 = move _12;
        _55 = <A11 as FromToNativeWasmType>::to_native(move _56) -> [return: bb25, unwind: bb171];
    }

    bb25: {
        _54 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _55) -> [return: bb26, unwind: bb171];
    }

    bb26: {
        _233 = const false;
        _59 = move _13;
        _58 = <A12 as FromToNativeWasmType>::to_native(move _59) -> [return: bb27, unwind: bb171];
    }

    bb27: {
        _57 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _58) -> [return: bb28, unwind: bb171];
    }

    bb28: {
        _232 = const false;
        _62 = move _14;
        _61 = <A13 as FromToNativeWasmType>::to_native(move _62) -> [return: bb29, unwind: bb171];
    }

    bb29: {
        _60 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _61) -> [return: bb30, unwind: bb171];
    }

    bb30: {
        _231 = const false;
        _65 = move _15;
        _64 = <A14 as FromToNativeWasmType>::to_native(move _65) -> [return: bb31, unwind: bb171];
    }

    bb31: {
        _63 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _64) -> [return: bb32, unwind: bb171];
    }

    bb32: {
        _230 = const false;
        _68 = move _16;
        _67 = <A15 as FromToNativeWasmType>::to_native(move _68) -> [return: bb33, unwind: bb171];
    }

    bb33: {
        _66 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _67) -> [return: bb34, unwind: bb171];
    }

    bb34: {
        _229 = const false;
        _71 = move _17;
        _70 = <A16 as FromToNativeWasmType>::to_native(move _71) -> [return: bb35, unwind: bb171];
    }

    bb35: {
        _69 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _70) -> [return: bb36, unwind: bb171];
    }

    bb36: {
        _23 = [move _24, move _27, move _30, move _33, move _36, move _39, move _42, move _45, move _48, move _51, move _54, move _57, move _60, move _63, move _66, move _69];
        _72 = <Rets as WasmTypeList>::empty_array() -> [return: bb37, unwind: bb171];
    }

    bb37: {
        _228 = const true;
        _74 = &mut _72;
        _73 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _74) -> [return: bb38, unwind: bb169];
    }

    bb38: {
        _81 = &_23;
        _80 = move _81 as &[i128] (PointerCoercion(Unsize));
        _79 = Len((*_80));
        _83 = &(*_73);
        _82 = Len((*_83));
        _78 = Gt(move _79, move _82);
        switchInt(move _78) -> [0: bb41, otherwise: bb39];
    }

    bb39: {
        _75 = const false;
        _85 = &mut _23;
        _84 = <[i128; 16] as AsMut<[i128]>>::as_mut(move _85) -> [return: bb40, unwind: bb169];
    }

    bb40: {
        _77 = _84;
        goto -> bb52;
    }

    bb41: {
        _75 = const true;
        _90 = &_23;
        _89 = move _90 as &[i128] (PointerCoercion(Unsize));
        _88 = core::slice::<impl [i128]>::iter(move _89) -> [return: bb42, unwind: bb169];
    }

    bb42: {
        _87 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _88) -> [return: bb43, unwind: bb169];
    }

    bb43: {
        _86 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _87) -> [return: bb44, unwind: bb169];
    }

    bb44: {
        _91 = move _86;
        goto -> bb45;
    }

    bb45: {
        _93 = &mut _91;
        _92 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_93) -> [return: bb46, unwind: bb169];
    }

    bb46: {
        _94 = discriminant(_92);
        switchInt(move _94) -> [0: bb49, 1: bb47, otherwise: bb48];
    }

    bb47: {
        _225 = deref_copy (((_92 as Some).0: (usize, &i128)).1: &i128);
        _96 = (*_225);
        _95 = (((_92 as Some).0: (usize, &i128)).0: usize);
        _97 = Len((*_73));
        _98 = Lt(_95, _97);
        assert(move _98, "index out of bounds: the length is {} but the index is {}", move _97, _95) -> [success: bb50, unwind: bb169];
    }

    bb48: {
        unreachable;
    }

    bb49: {
        _99 = <[i128] as AsMut<[i128]>>::as_mut(_73) -> [return: bb51, unwind: bb169];
    }

    bb50: {
        (*_73)[_95] = _96;
        goto -> bb45;
    }

    bb51: {
        _77 = _99;
        goto -> bb52;
    }

    bb52: {
        _76 = _77;
        _102 = &((*_1).0: store::Store);
        _104 = _1;
        _103 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>::vmctx(move _104) -> [return: bb53, unwind: bb169];
    }

    bb53: {
        _106 = _1;
        _105 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>::address(move _106) -> [return: bb54, unwind: bb169];
    }

    bb54: {
        _108 = core::slice::<impl [i128]>::as_mut_ptr(_76) -> [return: bb55, unwind: bb169];
    }

    bb55: {
        _107 = move _108 as *mut u8 (PtrToPtr);
        _101 = wasmer_call_trampoline::<Store>(_102, move _103, _20, move _105, move _107) -> [return: bb56, unwind: bb169];
    }

    bb56: {
        _100 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _101) -> [return: bb57, unwind: bb169];
    }

    bb57: {
        _109 = discriminant(_100);
        switchInt(move _109) -> [0: bb58, 1: bb59, otherwise: bb48];
    }

    bb58: {
        _112 = &(*_73);
        _111 = Len((*_112));
        _113 = _75;
        switchInt(move _113) -> [0: bb61, otherwise: bb66];
    }

    bb59: {
        _110 = move ((_100 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _110) -> [return: bb60, unwind: bb169];
    }

    bb60: {
        drop(_72) -> [return: bb129, unwind: bb171];
    }

    bb61: {
        _114 = Gt(_111, const 0_usize);
        switchInt(move _114) -> [0: bb66, otherwise: bb62];
    }

    bb62: {
        _117 = &_23;
        _116 = move _117 as &[i128] (PointerCoercion(Unsize));
        _115 = core::slice::<impl [i128]>::as_ptr(move _116) -> [return: bb63, unwind: bb169];
    }

    bb63: {
        _121 = &mut _72;
        _120 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _121) -> [return: bb64, unwind: bb169];
    }

    bb64: {
        _122 = const 0_usize;
        _123 = Len((*_120));
        _124 = Lt(_122, _123);
        assert(move _124, "index out of bounds: the length is {} but the index is {}", move _123, _122) -> [success: bb65, unwind: bb169];
    }

    bb65: {
        _119 = &mut (*_120)[_122];
        _118 = &raw mut (*_119);
        _125 = copy_nonoverlapping::<i128>(_115, _118, _111) -> [return: bb187, unwind: bb169];
    }

    bb66: {
        _228 = const false;
        _127 = move _72;
        _126 = <Rets as WasmTypeList>::from_array(move _127) -> [return: bb67, unwind: bb169];
    }

    bb67: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _126);
        _228 = const false;
        goto -> bb130;
    }

    bb68: {
        _130 = discriminant(_128);
        switchInt(move _130) -> [0: bb70, 1: bb69, otherwise: bb48];
    }

    bb69: {
        _244 = const false;
        _146 = move _2;
        _145 = <A1 as FromToNativeWasmType>::to_native(move _146) -> [return: bb78, unwind: bb171];
    }

    bb70: {
        _137 = &_1;
        _244 = const false;
        _243 = const false;
        _242 = const false;
        _241 = const false;
        _240 = const false;
        _239 = const false;
        _238 = const false;
        _237 = const false;
        _236 = const false;
        _235 = const false;
        _234 = const false;
        _233 = const false;
        _232 = const false;
        _231 = const false;
        _230 = const false;
        _229 = const false;
        _136 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _137, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17 };
        _135 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _136);
        _134 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _135) -> [return: bb71, unwind: bb171];
    }

    bb71: {
        _133 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _134, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb72, unwind: bb171];
    }

    bb72: {
        _132 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _133) -> [return: bb73, unwind: bb171];
    }

    bb73: {
        _138 = discriminant(_132);
        switchInt(move _138) -> [0: bb74, 1: bb75, otherwise: bb48];
    }

    bb74: {
        _140 = move ((_132 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _227 = const true;
        _131 = move _140;
        _227 = const false;
        _142 = move _131;
        _141 = <Rets as WasmTypeList>::from_c_struct(move _142) -> [return: bb77, unwind: bb167];
    }

    bb75: {
        _139 = move ((_132 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _139) -> [return: bb76, unwind: bb171];
    }

    bb76: {
        _227 = const false;
        goto -> bb130;
    }

    bb77: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _141);
        _227 = const false;
        goto -> bb130;
    }

    bb78: {
        _144 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _145) -> [return: bb79, unwind: bb171];
    }

    bb79: {
        _243 = const false;
        _149 = move _3;
        _148 = <A2 as FromToNativeWasmType>::to_native(move _149) -> [return: bb80, unwind: bb147];
    }

    bb80: {
        _147 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _148) -> [return: bb81, unwind: bb147];
    }

    bb81: {
        _242 = const false;
        _152 = move _4;
        _151 = <A3 as FromToNativeWasmType>::to_native(move _152) -> [return: bb82, unwind: bb146];
    }

    bb82: {
        _150 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _151) -> [return: bb83, unwind: bb146];
    }

    bb83: {
        _241 = const false;
        _155 = move _5;
        _154 = <A4 as FromToNativeWasmType>::to_native(move _155) -> [return: bb84, unwind: bb145];
    }

    bb84: {
        _153 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _154) -> [return: bb85, unwind: bb145];
    }

    bb85: {
        _240 = const false;
        _158 = move _6;
        _157 = <A5 as FromToNativeWasmType>::to_native(move _158) -> [return: bb86, unwind: bb144];
    }

    bb86: {
        _156 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _157) -> [return: bb87, unwind: bb144];
    }

    bb87: {
        _239 = const false;
        _161 = move _7;
        _160 = <A6 as FromToNativeWasmType>::to_native(move _161) -> [return: bb88, unwind: bb143];
    }

    bb88: {
        _159 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _160) -> [return: bb89, unwind: bb143];
    }

    bb89: {
        _238 = const false;
        _164 = move _8;
        _163 = <A7 as FromToNativeWasmType>::to_native(move _164) -> [return: bb90, unwind: bb142];
    }

    bb90: {
        _162 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _163) -> [return: bb91, unwind: bb142];
    }

    bb91: {
        _237 = const false;
        _167 = move _9;
        _166 = <A8 as FromToNativeWasmType>::to_native(move _167) -> [return: bb92, unwind: bb141];
    }

    bb92: {
        _165 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _166) -> [return: bb93, unwind: bb141];
    }

    bb93: {
        _236 = const false;
        _170 = move _10;
        _169 = <A9 as FromToNativeWasmType>::to_native(move _170) -> [return: bb94, unwind: bb140];
    }

    bb94: {
        _168 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _169) -> [return: bb95, unwind: bb140];
    }

    bb95: {
        _235 = const false;
        _173 = move _11;
        _172 = <A10 as FromToNativeWasmType>::to_native(move _173) -> [return: bb96, unwind: bb139];
    }

    bb96: {
        _171 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _172) -> [return: bb97, unwind: bb139];
    }

    bb97: {
        _234 = const false;
        _176 = move _12;
        _175 = <A11 as FromToNativeWasmType>::to_native(move _176) -> [return: bb98, unwind: bb138];
    }

    bb98: {
        _174 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _175) -> [return: bb99, unwind: bb138];
    }

    bb99: {
        _233 = const false;
        _179 = move _13;
        _178 = <A12 as FromToNativeWasmType>::to_native(move _179) -> [return: bb100, unwind: bb137];
    }

    bb100: {
        _177 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _178) -> [return: bb101, unwind: bb137];
    }

    bb101: {
        _232 = const false;
        _182 = move _14;
        _181 = <A13 as FromToNativeWasmType>::to_native(move _182) -> [return: bb102, unwind: bb136];
    }

    bb102: {
        _180 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _181) -> [return: bb103, unwind: bb136];
    }

    bb103: {
        _231 = const false;
        _185 = move _15;
        _184 = <A14 as FromToNativeWasmType>::to_native(move _185) -> [return: bb104, unwind: bb135];
    }

    bb104: {
        _183 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _184) -> [return: bb105, unwind: bb135];
    }

    bb105: {
        _230 = const false;
        _188 = move _16;
        _187 = <A15 as FromToNativeWasmType>::to_native(move _188) -> [return: bb106, unwind: bb134];
    }

    bb106: {
        _186 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _187) -> [return: bb107, unwind: bb134];
    }

    bb107: {
        _229 = const false;
        _191 = move _17;
        _190 = <A16 as FromToNativeWasmType>::to_native(move _191) -> [return: bb108, unwind: bb133];
    }

    bb108: {
        _189 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _190) -> [return: bb109, unwind: bb133];
    }

    bb109: {
        _143 = [move _144, move _147, move _150, move _153, move _156, move _159, move _162, move _165, move _168, move _171, move _174, move _177, move _180, move _183, move _186, move _189];
        _196 = _1;
        _195 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>::vmctx(move _196) -> [return: bb110, unwind: bb132];
    }

    bb110: {
        _194 = (_195.1: *mut std::ffi::c_void);
        _193 = move _194 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _199 = &((*_193).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _201 = &_143;
        _200 = _201 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _198 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _199, move _200) -> [return: bb111, unwind: bb132];
    }

    bb111: {
        _197 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _198) -> [return: bb112, unwind: bb132];
    }

    bb112: {
        _202 = discriminant(_197);
        switchInt(move _202) -> [0: bb113, 1: bb114, otherwise: bb48];
    }

    bb113: {
        _204 = move ((_197 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _192 = move _204;
        _205 = <Rets as WasmTypeList>::empty_array() -> [return: bb116, unwind: bb131];
    }

    bb114: {
        _203 = move ((_197 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _203) -> [return: bb115, unwind: bb132];
    }

    bb115: {
        drop(_143) -> [return: bb130, unwind: bb171];
    }

    bb116: {
        _226 = const true;
        _209 = &mut _205;
        _208 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _209) -> [return: bb117, unwind: bb165];
    }

    bb117: {
        _207 = &raw mut (*_208);
        _206 = move _207 as *mut i128 (PtrToPtr);
        _214 = &_192;
        _213 = <Vec<Value<function::Function>> as Deref>::deref(move _214) -> [return: bb118, unwind: bb165];
    }

    bb118: {
        _212 = core::slice::<impl [Value<function::Function>]>::iter(_213) -> [return: bb119, unwind: bb165];
    }

    bb119: {
        _211 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _212) -> [return: bb120, unwind: bb165];
    }

    bb120: {
        _210 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _211) -> [return: bb121, unwind: bb165];
    }

    bb121: {
        _215 = move _210;
        goto -> bb122;
    }

    bb122: {
        _217 = &mut _215;
        _216 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_217) -> [return: bb123, unwind: bb165];
    }

    bb123: {
        _218 = discriminant(_216);
        switchInt(move _218) -> [0: bb125, 1: bb124, otherwise: bb48];
    }

    bb124: {
        _219 = (((_216 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _220 = (((_216 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _222 = std::ptr::mut_ptr::<impl *mut i128>::add(_206, _219) -> [return: bb126, unwind: bb165];
    }

    bb125: {
        _226 = const false;
        _224 = move _205;
        _223 = <Rets as WasmTypeList>::from_array(move _224) -> [return: bb127, unwind: bb165];
    }

    bb126: {
        _221 = Value::<function::Function>::write_value_to(_220, move _222) -> [return: bb188, unwind: bb165];
    }

    bb127: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _223);
        _226 = const false;
        drop(_192) -> [return: bb128, unwind: bb132];
    }

    bb128: {
        drop(_143) -> [return: bb130, unwind: bb171];
    }

    bb129: {
        _228 = const false;
        goto -> bb130;
    }

    bb130: {
        return;
    }

    bb131 (cleanup): {
        drop(_192) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        drop(_143) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        drop(_186) -> [return: bb134, unwind terminate(cleanup)];
    }

    bb134 (cleanup): {
        drop(_183) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        drop(_180) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        drop(_177) -> [return: bb137, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        drop(_174) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        drop(_171) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        drop(_168) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        drop(_165) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        drop(_162) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        drop(_159) -> [return: bb143, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        drop(_156) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_153) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_150) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_147) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        drop(_144) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        switchInt(_230) -> [0: bb149, otherwise: bb172];
    }

    bb149 (cleanup): {
        switchInt(_231) -> [0: bb150, otherwise: bb173];
    }

    bb150 (cleanup): {
        switchInt(_232) -> [0: bb151, otherwise: bb174];
    }

    bb151 (cleanup): {
        switchInt(_233) -> [0: bb152, otherwise: bb175];
    }

    bb152 (cleanup): {
        switchInt(_234) -> [0: bb153, otherwise: bb176];
    }

    bb153 (cleanup): {
        switchInt(_235) -> [0: bb154, otherwise: bb177];
    }

    bb154 (cleanup): {
        switchInt(_236) -> [0: bb155, otherwise: bb178];
    }

    bb155 (cleanup): {
        switchInt(_237) -> [0: bb156, otherwise: bb179];
    }

    bb156 (cleanup): {
        switchInt(_238) -> [0: bb157, otherwise: bb180];
    }

    bb157 (cleanup): {
        switchInt(_239) -> [0: bb158, otherwise: bb181];
    }

    bb158 (cleanup): {
        switchInt(_240) -> [0: bb159, otherwise: bb182];
    }

    bb159 (cleanup): {
        switchInt(_241) -> [0: bb160, otherwise: bb183];
    }

    bb160 (cleanup): {
        switchInt(_242) -> [0: bb161, otherwise: bb184];
    }

    bb161 (cleanup): {
        switchInt(_243) -> [0: bb162, otherwise: bb185];
    }

    bb162 (cleanup): {
        switchInt(_244) -> [0: bb163, otherwise: bb186];
    }

    bb163 (cleanup): {
        resume;
    }

    bb164 (cleanup): {
        drop(_205) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        switchInt(_226) -> [0: bb131, otherwise: bb164];
    }

    bb166 (cleanup): {
        drop(_131) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        switchInt(_227) -> [0: bb171, otherwise: bb166];
    }

    bb168 (cleanup): {
        drop(_72) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        switchInt(_228) -> [0: bb171, otherwise: bb168];
    }

    bb170 (cleanup): {
        drop(_17) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        switchInt(_229) -> [0: bb148, otherwise: bb170];
    }

    bb172 (cleanup): {
        drop(_16) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        drop(_15) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        drop(_14) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        drop(_13) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        drop(_12) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        drop(_11) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_10) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        drop(_9) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb180 (cleanup): {
        drop(_8) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        drop(_7) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        drop(_6) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        drop(_5) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        drop(_4) -> [return: bb161, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_3) -> [return: bb162, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_2) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb187: {
        goto -> bb66;
    }

    bb188: {
        goto -> bb122;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    debug A9 => (_1.9: A9);
    debug A10 => (_1.10: A10);
    debug A11 => (_1.11: A11);
    debug A12 => (_1.12: A12);
    debug A13 => (_1.13: A13);
    debug A14 => (_1.14: A14);
    debug A15 => (_1.15: A15);
    debug A16 => (_1.16: A16);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: A9;
    let mut _14: A10;
    let mut _15: A11;
    let mut _16: A12;
    let mut _17: A13;
    let mut _18: A14;
    let mut _19: A15;
    let mut _20: A16;
    let mut _21: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>;
    let mut _22: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>;
    let mut _23: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>;
    let mut _24: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _25 = const false;
        _25 = const true;
        _26 = const true;
        _27 = const true;
        _28 = const true;
        _29 = const true;
        _30 = const true;
        _31 = const true;
        _32 = const true;
        _33 = const true;
        _34 = const true;
        _35 = const true;
        _36 = const true;
        _37 = const true;
        _38 = const true;
        _39 = const true;
        _40 = const true;
        _21 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>);
        _22 = deref_copy (*_21);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>::address(_22) -> [return: bb1, unwind: bb36];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _23 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>);
        _24 = deref_copy (*_23);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>::vmctx(_24) -> [return: bb2, unwind: bb36];
    }

    bb2: {
        _40 = const false;
        _5 = move (_1.1: A1);
        _39 = const false;
        _6 = move (_1.2: A2);
        _38 = const false;
        _7 = move (_1.3: A3);
        _37 = const false;
        _8 = move (_1.4: A4);
        _36 = const false;
        _9 = move (_1.5: A5);
        _35 = const false;
        _10 = move (_1.6: A6);
        _34 = const false;
        _11 = move (_1.7: A7);
        _33 = const false;
        _12 = move (_1.8: A8);
        _32 = const false;
        _13 = move (_1.9: A9);
        _31 = const false;
        _14 = move (_1.10: A10);
        _30 = const false;
        _15 = move (_1.11: A11);
        _29 = const false;
        _16 = move (_1.12: A12);
        _28 = const false;
        _17 = move (_1.13: A13);
        _27 = const false;
        _18 = move (_1.14: A14);
        _26 = const false;
        _19 = move (_1.15: A15);
        _25 = const false;
        _20 = move (_1.16: A16);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_25) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.16: A16)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_26) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.15: A15)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_27) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.14: A14)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_28) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.13: A13)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_29) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.12: A12)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_30) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.11: A11)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_31) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.10: A10)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_32) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.9: A9)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_33) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.8: A8)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_34) -> [0: bb21, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.7: A7)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_35) -> [0: bb23, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop((_1.6: A6)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_36) -> [0: bb25, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop((_1.5: A5)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_37) -> [0: bb27, otherwise: bb30];
    }

    bb30 (cleanup): {
        drop((_1.4: A4)) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_38) -> [0: bb29, otherwise: bb32];
    }

    bb32 (cleanup): {
        drop((_1.3: A3)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_39) -> [0: bb31, otherwise: bb34];
    }

    bb34 (cleanup): {
        drop((_1.2: A2)) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop((_1.1: A1)) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        switchInt(_40) -> [0: bb33, otherwise: bb35];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8, _10: A9, _11: A10, _12: A11, _13: A12, _14: A13, _15: A14, _16: A15, _17: A16, _18: A17) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _19: bool;
    let mut _20: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>;
    let _21: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _22: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _23: &str;
    let mut _25: i128;
    let mut _26: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _27: A1;
    let mut _28: i128;
    let mut _29: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A2;
    let mut _31: i128;
    let mut _32: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A3;
    let mut _34: i128;
    let mut _35: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A4;
    let mut _37: i128;
    let mut _38: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A5;
    let mut _40: i128;
    let mut _41: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A6;
    let mut _43: i128;
    let mut _44: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A7;
    let mut _46: i128;
    let mut _47: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A8;
    let mut _49: i128;
    let mut _50: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A9;
    let mut _52: i128;
    let mut _53: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A10;
    let mut _55: i128;
    let mut _56: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A11;
    let mut _58: i128;
    let mut _59: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A12;
    let mut _61: i128;
    let mut _62: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A13;
    let mut _64: i128;
    let mut _65: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A14;
    let mut _67: i128;
    let mut _68: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _69: A15;
    let mut _70: i128;
    let mut _71: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _72: A16;
    let mut _73: i128;
    let mut _74: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _75: A17;
    let mut _78: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _81: &mut [i128];
    let mut _82: bool;
    let mut _83: usize;
    let mut _84: &[i128];
    let mut _85: &[i128; 17];
    let mut _86: usize;
    let mut _87: &[i128];
    let mut _88: &mut [i128];
    let mut _89: &mut [i128; 17];
    let mut _90: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _91: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _92: std::slice::Iter<'_, i128>;
    let mut _93: &[i128];
    let mut _94: &[i128; 17];
    let mut _96: std::option::Option<(usize, &i128)>;
    let mut _97: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _98: isize;
    let mut _101: usize;
    let mut _102: bool;
    let mut _103: &mut [i128];
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _105: std::result::Result<(), wasmer_vm::Trap>;
    let _106: &store::Store;
    let mut _107: wasmer_vm::VMFunctionEnvironment;
    let mut _108: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>;
    let mut _109: *const wasmer_vm::VMFunctionBody;
    let mut _110: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>;
    let mut _111: *mut u8;
    let mut _112: *mut i128;
    let mut _113: isize;
    let mut _116: &[i128];
    let mut _117: bool;
    let mut _118: bool;
    let mut _120: &[i128];
    let mut _121: &[i128; 17];
    let mut _123: &mut i128;
    let mut _124: &mut [i128];
    let mut _125: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _126: usize;
    let mut _127: usize;
    let mut _128: bool;
    let _129: ();
    let mut _130: Rets;
    let mut _131: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _132: wasmer_vm::VMFunctionKind;
    let mut _133: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>;
    let mut _134: isize;
    let _135: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _137: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _138: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _139: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _140: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _141: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>;
    let mut _142: isize;
    let _143: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _144: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _145: Rets;
    let mut _146: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _147: [wasmer_types::Value<externals::function::Function>; 17];
    let mut _148: wasmer_types::Value<externals::function::Function>;
    let mut _149: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _150: A1;
    let mut _151: wasmer_types::Value<externals::function::Function>;
    let mut _152: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _153: A2;
    let mut _154: wasmer_types::Value<externals::function::Function>;
    let mut _155: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _156: A3;
    let mut _157: wasmer_types::Value<externals::function::Function>;
    let mut _158: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _159: A4;
    let mut _160: wasmer_types::Value<externals::function::Function>;
    let mut _161: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _162: A5;
    let mut _163: wasmer_types::Value<externals::function::Function>;
    let mut _164: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _165: A6;
    let mut _166: wasmer_types::Value<externals::function::Function>;
    let mut _167: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _168: A7;
    let mut _169: wasmer_types::Value<externals::function::Function>;
    let mut _170: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _171: A8;
    let mut _172: wasmer_types::Value<externals::function::Function>;
    let mut _173: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _174: A9;
    let mut _175: wasmer_types::Value<externals::function::Function>;
    let mut _176: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _177: A10;
    let mut _178: wasmer_types::Value<externals::function::Function>;
    let mut _179: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _180: A11;
    let mut _181: wasmer_types::Value<externals::function::Function>;
    let mut _182: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _183: A12;
    let mut _184: wasmer_types::Value<externals::function::Function>;
    let mut _185: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _186: A13;
    let mut _187: wasmer_types::Value<externals::function::Function>;
    let mut _188: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _189: A14;
    let mut _190: wasmer_types::Value<externals::function::Function>;
    let mut _191: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _192: A15;
    let mut _193: wasmer_types::Value<externals::function::Function>;
    let mut _194: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _195: A16;
    let mut _196: wasmer_types::Value<externals::function::Function>;
    let mut _197: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _198: A17;
    let mut _201: *mut std::ffi::c_void;
    let mut _202: wasmer_vm::VMFunctionEnvironment;
    let mut _203: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>;
    let mut _204: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _205: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _206: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _207: &[wasmer_types::Value<externals::function::Function>];
    let _208: &[wasmer_types::Value<externals::function::Function>; 17];
    let mut _209: isize;
    let mut _214: *mut [i128];
    let mut _215: &mut [i128];
    let mut _216: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _217: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _218: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _219: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _220: &[wasmer_types::Value<externals::function::Function>];
    let mut _221: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _223: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _224: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _225: isize;
    let _228: ();
    let mut _229: *mut i128;
    let mut _230: Rets;
    let mut _231: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _232: &i128;
    let mut _233: bool;
    let mut _234: bool;
    let mut _235: bool;
    let mut _236: bool;
    let mut _237: bool;
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: bool;
    let mut _241: bool;
    let mut _242: bool;
    let mut _243: bool;
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: bool;
    let mut _248: bool;
    let mut _249: bool;
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: bool;
    scope 1 {
        debug trampoline => _21;
        let mut _24: [i128; 17];
        scope 2 {
            debug params_list => _24;
            let mut _76: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _76;
                let _77: &mut [i128];
                scope 4 {
                    debug rets_list => _77;
                    let _79: bool;
                    scope 5 {
                        debug using_rets_array => _79;
                        let _80: &mut [i128];
                        let mut _95: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _80;
                            let _114: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _115: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _114;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _115;
                                let _119: *const i128;
                                scope 15 {
                                    debug src_pointer => _119;
                                    let _122: *mut i128;
                                    scope 16 {
                                        debug rets_list => _122;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _95;
                            let _99: usize;
                            let _100: i128;
                            scope 8 {
                                debug i => _99;
                                debug arg => _100;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _135;
    }
    scope 19 {
        debug residual => _143;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _144;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _147;
        let _199: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _199;
            let mut _212: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _212;
                let _213: *mut i128;
                scope 32 {
                    debug mut_rets => _213;
                    let mut _222: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _222;
                        let _226: usize;
                        let _227: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _226;
                            debug ret => _227;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _200: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _200;
                let _210: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _211: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _210;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _211;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _252 = const false;
        _251 = const false;
        _250 = const false;
        _249 = const false;
        _248 = const false;
        _247 = const false;
        _246 = const false;
        _245 = const false;
        _244 = const false;
        _243 = const false;
        _242 = const false;
        _241 = const false;
        _240 = const false;
        _239 = const false;
        _238 = const false;
        _237 = const false;
        _236 = const false;
        _235 = const false;
        _234 = const false;
        _233 = const false;
        _252 = const true;
        _251 = const true;
        _250 = const true;
        _249 = const true;
        _248 = const true;
        _247 = const true;
        _246 = const true;
        _245 = const true;
        _244 = const true;
        _243 = const true;
        _242 = const true;
        _241 = const true;
        _240 = const true;
        _239 = const true;
        _238 = const true;
        _237 = const true;
        _236 = const true;
        _20 = _1;
        _19 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>::is_host(move _20) -> [return: bb1, unwind: bb177];
    }

    bb1: {
        switchInt(move _19) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _133 = _1;
        _132 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>::arg_kind(move _133) -> [return: bb70, unwind: bb177];
    }

    bb3: {
        _22 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _23 = const "Call trampoline not found in wasm function";
        _21 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _22, _23) -> [return: bb4, unwind: bb177];
    }

    bb4: {
        _252 = const false;
        _27 = move _2;
        _26 = <A1 as FromToNativeWasmType>::to_native(move _27) -> [return: bb5, unwind: bb177];
    }

    bb5: {
        _25 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _26) -> [return: bb6, unwind: bb177];
    }

    bb6: {
        _251 = const false;
        _30 = move _3;
        _29 = <A2 as FromToNativeWasmType>::to_native(move _30) -> [return: bb7, unwind: bb177];
    }

    bb7: {
        _28 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _29) -> [return: bb8, unwind: bb177];
    }

    bb8: {
        _250 = const false;
        _33 = move _4;
        _32 = <A3 as FromToNativeWasmType>::to_native(move _33) -> [return: bb9, unwind: bb177];
    }

    bb9: {
        _31 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _32) -> [return: bb10, unwind: bb177];
    }

    bb10: {
        _249 = const false;
        _36 = move _5;
        _35 = <A4 as FromToNativeWasmType>::to_native(move _36) -> [return: bb11, unwind: bb177];
    }

    bb11: {
        _34 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _35) -> [return: bb12, unwind: bb177];
    }

    bb12: {
        _248 = const false;
        _39 = move _6;
        _38 = <A5 as FromToNativeWasmType>::to_native(move _39) -> [return: bb13, unwind: bb177];
    }

    bb13: {
        _37 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _38) -> [return: bb14, unwind: bb177];
    }

    bb14: {
        _247 = const false;
        _42 = move _7;
        _41 = <A6 as FromToNativeWasmType>::to_native(move _42) -> [return: bb15, unwind: bb177];
    }

    bb15: {
        _40 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _41) -> [return: bb16, unwind: bb177];
    }

    bb16: {
        _246 = const false;
        _45 = move _8;
        _44 = <A7 as FromToNativeWasmType>::to_native(move _45) -> [return: bb17, unwind: bb177];
    }

    bb17: {
        _43 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _44) -> [return: bb18, unwind: bb177];
    }

    bb18: {
        _245 = const false;
        _48 = move _9;
        _47 = <A8 as FromToNativeWasmType>::to_native(move _48) -> [return: bb19, unwind: bb177];
    }

    bb19: {
        _46 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _47) -> [return: bb20, unwind: bb177];
    }

    bb20: {
        _244 = const false;
        _51 = move _10;
        _50 = <A9 as FromToNativeWasmType>::to_native(move _51) -> [return: bb21, unwind: bb177];
    }

    bb21: {
        _49 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _50) -> [return: bb22, unwind: bb177];
    }

    bb22: {
        _243 = const false;
        _54 = move _11;
        _53 = <A10 as FromToNativeWasmType>::to_native(move _54) -> [return: bb23, unwind: bb177];
    }

    bb23: {
        _52 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _53) -> [return: bb24, unwind: bb177];
    }

    bb24: {
        _242 = const false;
        _57 = move _12;
        _56 = <A11 as FromToNativeWasmType>::to_native(move _57) -> [return: bb25, unwind: bb177];
    }

    bb25: {
        _55 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _56) -> [return: bb26, unwind: bb177];
    }

    bb26: {
        _241 = const false;
        _60 = move _13;
        _59 = <A12 as FromToNativeWasmType>::to_native(move _60) -> [return: bb27, unwind: bb177];
    }

    bb27: {
        _58 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _59) -> [return: bb28, unwind: bb177];
    }

    bb28: {
        _240 = const false;
        _63 = move _14;
        _62 = <A13 as FromToNativeWasmType>::to_native(move _63) -> [return: bb29, unwind: bb177];
    }

    bb29: {
        _61 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _62) -> [return: bb30, unwind: bb177];
    }

    bb30: {
        _239 = const false;
        _66 = move _15;
        _65 = <A14 as FromToNativeWasmType>::to_native(move _66) -> [return: bb31, unwind: bb177];
    }

    bb31: {
        _64 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _65) -> [return: bb32, unwind: bb177];
    }

    bb32: {
        _238 = const false;
        _69 = move _16;
        _68 = <A15 as FromToNativeWasmType>::to_native(move _69) -> [return: bb33, unwind: bb177];
    }

    bb33: {
        _67 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _68) -> [return: bb34, unwind: bb177];
    }

    bb34: {
        _237 = const false;
        _72 = move _17;
        _71 = <A16 as FromToNativeWasmType>::to_native(move _72) -> [return: bb35, unwind: bb177];
    }

    bb35: {
        _70 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _71) -> [return: bb36, unwind: bb177];
    }

    bb36: {
        _236 = const false;
        _75 = move _18;
        _74 = <A17 as FromToNativeWasmType>::to_native(move _75) -> [return: bb37, unwind: bb177];
    }

    bb37: {
        _73 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _74) -> [return: bb38, unwind: bb177];
    }

    bb38: {
        _24 = [move _25, move _28, move _31, move _34, move _37, move _40, move _43, move _46, move _49, move _52, move _55, move _58, move _61, move _64, move _67, move _70, move _73];
        _76 = <Rets as WasmTypeList>::empty_array() -> [return: bb39, unwind: bb177];
    }

    bb39: {
        _235 = const true;
        _78 = &mut _76;
        _77 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _78) -> [return: bb40, unwind: bb175];
    }

    bb40: {
        _85 = &_24;
        _84 = move _85 as &[i128] (PointerCoercion(Unsize));
        _83 = Len((*_84));
        _87 = &(*_77);
        _86 = Len((*_87));
        _82 = Gt(move _83, move _86);
        switchInt(move _82) -> [0: bb43, otherwise: bb41];
    }

    bb41: {
        _79 = const false;
        _89 = &mut _24;
        _88 = <[i128; 17] as AsMut<[i128]>>::as_mut(move _89) -> [return: bb42, unwind: bb175];
    }

    bb42: {
        _81 = _88;
        goto -> bb54;
    }

    bb43: {
        _79 = const true;
        _94 = &_24;
        _93 = move _94 as &[i128] (PointerCoercion(Unsize));
        _92 = core::slice::<impl [i128]>::iter(move _93) -> [return: bb44, unwind: bb175];
    }

    bb44: {
        _91 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _92) -> [return: bb45, unwind: bb175];
    }

    bb45: {
        _90 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _91) -> [return: bb46, unwind: bb175];
    }

    bb46: {
        _95 = move _90;
        goto -> bb47;
    }

    bb47: {
        _97 = &mut _95;
        _96 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_97) -> [return: bb48, unwind: bb175];
    }

    bb48: {
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb51, 1: bb49, otherwise: bb50];
    }

    bb49: {
        _232 = deref_copy (((_96 as Some).0: (usize, &i128)).1: &i128);
        _100 = (*_232);
        _99 = (((_96 as Some).0: (usize, &i128)).0: usize);
        _101 = Len((*_77));
        _102 = Lt(_99, _101);
        assert(move _102, "index out of bounds: the length is {} but the index is {}", move _101, _99) -> [success: bb52, unwind: bb175];
    }

    bb50: {
        unreachable;
    }

    bb51: {
        _103 = <[i128] as AsMut<[i128]>>::as_mut(_77) -> [return: bb53, unwind: bb175];
    }

    bb52: {
        (*_77)[_99] = _100;
        goto -> bb47;
    }

    bb53: {
        _81 = _103;
        goto -> bb54;
    }

    bb54: {
        _80 = _81;
        _106 = &((*_1).0: store::Store);
        _108 = _1;
        _107 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>::vmctx(move _108) -> [return: bb55, unwind: bb175];
    }

    bb55: {
        _110 = _1;
        _109 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>::address(move _110) -> [return: bb56, unwind: bb175];
    }

    bb56: {
        _112 = core::slice::<impl [i128]>::as_mut_ptr(_80) -> [return: bb57, unwind: bb175];
    }

    bb57: {
        _111 = move _112 as *mut u8 (PtrToPtr);
        _105 = wasmer_call_trampoline::<Store>(_106, move _107, _21, move _109, move _111) -> [return: bb58, unwind: bb175];
    }

    bb58: {
        _104 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _105) -> [return: bb59, unwind: bb175];
    }

    bb59: {
        _113 = discriminant(_104);
        switchInt(move _113) -> [0: bb60, 1: bb61, otherwise: bb50];
    }

    bb60: {
        _116 = &(*_77);
        _115 = Len((*_116));
        _117 = _79;
        switchInt(move _117) -> [0: bb63, otherwise: bb68];
    }

    bb61: {
        _114 = move ((_104 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _114) -> [return: bb62, unwind: bb175];
    }

    bb62: {
        drop(_76) -> [return: bb133, unwind: bb177];
    }

    bb63: {
        _118 = Gt(_115, const 0_usize);
        switchInt(move _118) -> [0: bb68, otherwise: bb64];
    }

    bb64: {
        _121 = &_24;
        _120 = move _121 as &[i128] (PointerCoercion(Unsize));
        _119 = core::slice::<impl [i128]>::as_ptr(move _120) -> [return: bb65, unwind: bb175];
    }

    bb65: {
        _125 = &mut _76;
        _124 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _125) -> [return: bb66, unwind: bb175];
    }

    bb66: {
        _126 = const 0_usize;
        _127 = Len((*_124));
        _128 = Lt(_126, _127);
        assert(move _128, "index out of bounds: the length is {} but the index is {}", move _127, _126) -> [success: bb67, unwind: bb175];
    }

    bb67: {
        _123 = &mut (*_124)[_126];
        _122 = &raw mut (*_123);
        _129 = copy_nonoverlapping::<i128>(_119, _122, _115) -> [return: bb194, unwind: bb175];
    }

    bb68: {
        _235 = const false;
        _131 = move _76;
        _130 = <Rets as WasmTypeList>::from_array(move _131) -> [return: bb69, unwind: bb175];
    }

    bb69: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _130);
        _235 = const false;
        goto -> bb134;
    }

    bb70: {
        _134 = discriminant(_132);
        switchInt(move _134) -> [0: bb72, 1: bb71, otherwise: bb50];
    }

    bb71: {
        _252 = const false;
        _150 = move _2;
        _149 = <A1 as FromToNativeWasmType>::to_native(move _150) -> [return: bb80, unwind: bb177];
    }

    bb72: {
        _141 = &_1;
        _252 = const false;
        _251 = const false;
        _250 = const false;
        _249 = const false;
        _248 = const false;
        _247 = const false;
        _246 = const false;
        _245 = const false;
        _244 = const false;
        _243 = const false;
        _242 = const false;
        _241 = const false;
        _240 = const false;
        _239 = const false;
        _238 = const false;
        _237 = const false;
        _236 = const false;
        _140 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _141, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18 };
        _139 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _140);
        _138 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _139) -> [return: bb73, unwind: bb177];
    }

    bb73: {
        _137 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _138, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb74, unwind: bb177];
    }

    bb74: {
        _136 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _137) -> [return: bb75, unwind: bb177];
    }

    bb75: {
        _142 = discriminant(_136);
        switchInt(move _142) -> [0: bb76, 1: bb77, otherwise: bb50];
    }

    bb76: {
        _144 = move ((_136 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _234 = const true;
        _135 = move _144;
        _234 = const false;
        _146 = move _135;
        _145 = <Rets as WasmTypeList>::from_c_struct(move _146) -> [return: bb79, unwind: bb173];
    }

    bb77: {
        _143 = move ((_136 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _143) -> [return: bb78, unwind: bb177];
    }

    bb78: {
        _234 = const false;
        goto -> bb134;
    }

    bb79: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _145);
        _234 = const false;
        goto -> bb134;
    }

    bb80: {
        _148 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _149) -> [return: bb81, unwind: bb177];
    }

    bb81: {
        _251 = const false;
        _153 = move _3;
        _152 = <A2 as FromToNativeWasmType>::to_native(move _153) -> [return: bb82, unwind: bb152];
    }

    bb82: {
        _151 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _152) -> [return: bb83, unwind: bb152];
    }

    bb83: {
        _250 = const false;
        _156 = move _4;
        _155 = <A3 as FromToNativeWasmType>::to_native(move _156) -> [return: bb84, unwind: bb151];
    }

    bb84: {
        _154 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _155) -> [return: bb85, unwind: bb151];
    }

    bb85: {
        _249 = const false;
        _159 = move _5;
        _158 = <A4 as FromToNativeWasmType>::to_native(move _159) -> [return: bb86, unwind: bb150];
    }

    bb86: {
        _157 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _158) -> [return: bb87, unwind: bb150];
    }

    bb87: {
        _248 = const false;
        _162 = move _6;
        _161 = <A5 as FromToNativeWasmType>::to_native(move _162) -> [return: bb88, unwind: bb149];
    }

    bb88: {
        _160 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _161) -> [return: bb89, unwind: bb149];
    }

    bb89: {
        _247 = const false;
        _165 = move _7;
        _164 = <A6 as FromToNativeWasmType>::to_native(move _165) -> [return: bb90, unwind: bb148];
    }

    bb90: {
        _163 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _164) -> [return: bb91, unwind: bb148];
    }

    bb91: {
        _246 = const false;
        _168 = move _8;
        _167 = <A7 as FromToNativeWasmType>::to_native(move _168) -> [return: bb92, unwind: bb147];
    }

    bb92: {
        _166 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _167) -> [return: bb93, unwind: bb147];
    }

    bb93: {
        _245 = const false;
        _171 = move _9;
        _170 = <A8 as FromToNativeWasmType>::to_native(move _171) -> [return: bb94, unwind: bb146];
    }

    bb94: {
        _169 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _170) -> [return: bb95, unwind: bb146];
    }

    bb95: {
        _244 = const false;
        _174 = move _10;
        _173 = <A9 as FromToNativeWasmType>::to_native(move _174) -> [return: bb96, unwind: bb145];
    }

    bb96: {
        _172 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _173) -> [return: bb97, unwind: bb145];
    }

    bb97: {
        _243 = const false;
        _177 = move _11;
        _176 = <A10 as FromToNativeWasmType>::to_native(move _177) -> [return: bb98, unwind: bb144];
    }

    bb98: {
        _175 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _176) -> [return: bb99, unwind: bb144];
    }

    bb99: {
        _242 = const false;
        _180 = move _12;
        _179 = <A11 as FromToNativeWasmType>::to_native(move _180) -> [return: bb100, unwind: bb143];
    }

    bb100: {
        _178 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _179) -> [return: bb101, unwind: bb143];
    }

    bb101: {
        _241 = const false;
        _183 = move _13;
        _182 = <A12 as FromToNativeWasmType>::to_native(move _183) -> [return: bb102, unwind: bb142];
    }

    bb102: {
        _181 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _182) -> [return: bb103, unwind: bb142];
    }

    bb103: {
        _240 = const false;
        _186 = move _14;
        _185 = <A13 as FromToNativeWasmType>::to_native(move _186) -> [return: bb104, unwind: bb141];
    }

    bb104: {
        _184 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _185) -> [return: bb105, unwind: bb141];
    }

    bb105: {
        _239 = const false;
        _189 = move _15;
        _188 = <A14 as FromToNativeWasmType>::to_native(move _189) -> [return: bb106, unwind: bb140];
    }

    bb106: {
        _187 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _188) -> [return: bb107, unwind: bb140];
    }

    bb107: {
        _238 = const false;
        _192 = move _16;
        _191 = <A15 as FromToNativeWasmType>::to_native(move _192) -> [return: bb108, unwind: bb139];
    }

    bb108: {
        _190 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _191) -> [return: bb109, unwind: bb139];
    }

    bb109: {
        _237 = const false;
        _195 = move _17;
        _194 = <A16 as FromToNativeWasmType>::to_native(move _195) -> [return: bb110, unwind: bb138];
    }

    bb110: {
        _193 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _194) -> [return: bb111, unwind: bb138];
    }

    bb111: {
        _236 = const false;
        _198 = move _18;
        _197 = <A17 as FromToNativeWasmType>::to_native(move _198) -> [return: bb112, unwind: bb137];
    }

    bb112: {
        _196 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _197) -> [return: bb113, unwind: bb137];
    }

    bb113: {
        _147 = [move _148, move _151, move _154, move _157, move _160, move _163, move _166, move _169, move _172, move _175, move _178, move _181, move _184, move _187, move _190, move _193, move _196];
        _203 = _1;
        _202 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>::vmctx(move _203) -> [return: bb114, unwind: bb136];
    }

    bb114: {
        _201 = (_202.1: *mut std::ffi::c_void);
        _200 = move _201 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _206 = &((*_200).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _208 = &_147;
        _207 = _208 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _205 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _206, move _207) -> [return: bb115, unwind: bb136];
    }

    bb115: {
        _204 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _205) -> [return: bb116, unwind: bb136];
    }

    bb116: {
        _209 = discriminant(_204);
        switchInt(move _209) -> [0: bb117, 1: bb118, otherwise: bb50];
    }

    bb117: {
        _211 = move ((_204 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _199 = move _211;
        _212 = <Rets as WasmTypeList>::empty_array() -> [return: bb120, unwind: bb135];
    }

    bb118: {
        _210 = move ((_204 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _210) -> [return: bb119, unwind: bb136];
    }

    bb119: {
        drop(_147) -> [return: bb134, unwind: bb177];
    }

    bb120: {
        _233 = const true;
        _216 = &mut _212;
        _215 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _216) -> [return: bb121, unwind: bb171];
    }

    bb121: {
        _214 = &raw mut (*_215);
        _213 = move _214 as *mut i128 (PtrToPtr);
        _221 = &_199;
        _220 = <Vec<Value<function::Function>> as Deref>::deref(move _221) -> [return: bb122, unwind: bb171];
    }

    bb122: {
        _219 = core::slice::<impl [Value<function::Function>]>::iter(_220) -> [return: bb123, unwind: bb171];
    }

    bb123: {
        _218 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _219) -> [return: bb124, unwind: bb171];
    }

    bb124: {
        _217 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _218) -> [return: bb125, unwind: bb171];
    }

    bb125: {
        _222 = move _217;
        goto -> bb126;
    }

    bb126: {
        _224 = &mut _222;
        _223 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_224) -> [return: bb127, unwind: bb171];
    }

    bb127: {
        _225 = discriminant(_223);
        switchInt(move _225) -> [0: bb129, 1: bb128, otherwise: bb50];
    }

    bb128: {
        _226 = (((_223 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _227 = (((_223 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _229 = std::ptr::mut_ptr::<impl *mut i128>::add(_213, _226) -> [return: bb130, unwind: bb171];
    }

    bb129: {
        _233 = const false;
        _231 = move _212;
        _230 = <Rets as WasmTypeList>::from_array(move _231) -> [return: bb131, unwind: bb171];
    }

    bb130: {
        _228 = Value::<function::Function>::write_value_to(_227, move _229) -> [return: bb195, unwind: bb171];
    }

    bb131: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _230);
        _233 = const false;
        drop(_199) -> [return: bb132, unwind: bb136];
    }

    bb132: {
        drop(_147) -> [return: bb134, unwind: bb177];
    }

    bb133: {
        _235 = const false;
        goto -> bb134;
    }

    bb134: {
        return;
    }

    bb135 (cleanup): {
        drop(_199) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        drop(_147) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        drop(_193) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        drop(_190) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        drop(_187) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        drop(_184) -> [return: bb141, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        drop(_181) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        drop(_178) -> [return: bb143, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        drop(_175) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_172) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_169) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_166) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        drop(_163) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        drop(_160) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_157) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_154) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_151) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_148) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        switchInt(_237) -> [0: bb154, otherwise: bb178];
    }

    bb154 (cleanup): {
        switchInt(_238) -> [0: bb155, otherwise: bb179];
    }

    bb155 (cleanup): {
        switchInt(_239) -> [0: bb156, otherwise: bb180];
    }

    bb156 (cleanup): {
        switchInt(_240) -> [0: bb157, otherwise: bb181];
    }

    bb157 (cleanup): {
        switchInt(_241) -> [0: bb158, otherwise: bb182];
    }

    bb158 (cleanup): {
        switchInt(_242) -> [0: bb159, otherwise: bb183];
    }

    bb159 (cleanup): {
        switchInt(_243) -> [0: bb160, otherwise: bb184];
    }

    bb160 (cleanup): {
        switchInt(_244) -> [0: bb161, otherwise: bb185];
    }

    bb161 (cleanup): {
        switchInt(_245) -> [0: bb162, otherwise: bb186];
    }

    bb162 (cleanup): {
        switchInt(_246) -> [0: bb163, otherwise: bb187];
    }

    bb163 (cleanup): {
        switchInt(_247) -> [0: bb164, otherwise: bb188];
    }

    bb164 (cleanup): {
        switchInt(_248) -> [0: bb165, otherwise: bb189];
    }

    bb165 (cleanup): {
        switchInt(_249) -> [0: bb166, otherwise: bb190];
    }

    bb166 (cleanup): {
        switchInt(_250) -> [0: bb167, otherwise: bb191];
    }

    bb167 (cleanup): {
        switchInt(_251) -> [0: bb168, otherwise: bb192];
    }

    bb168 (cleanup): {
        switchInt(_252) -> [0: bb169, otherwise: bb193];
    }

    bb169 (cleanup): {
        resume;
    }

    bb170 (cleanup): {
        drop(_212) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        switchInt(_233) -> [0: bb135, otherwise: bb170];
    }

    bb172 (cleanup): {
        drop(_135) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        switchInt(_234) -> [0: bb177, otherwise: bb172];
    }

    bb174 (cleanup): {
        drop(_76) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        switchInt(_235) -> [0: bb177, otherwise: bb174];
    }

    bb176 (cleanup): {
        drop(_18) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        switchInt(_236) -> [0: bb153, otherwise: bb176];
    }

    bb178 (cleanup): {
        drop(_17) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        drop(_16) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb180 (cleanup): {
        drop(_15) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        drop(_14) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb182 (cleanup): {
        drop(_13) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        drop(_12) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        drop(_11) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_10) -> [return: bb161, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_9) -> [return: bb162, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_8) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        drop(_7) -> [return: bb164, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        drop(_6) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb190 (cleanup): {
        drop(_5) -> [return: bb166, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        drop(_4) -> [return: bb167, unwind terminate(cleanup)];
    }

    bb192 (cleanup): {
        drop(_3) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        drop(_2) -> [return: bb169, unwind terminate(cleanup)];
    }

    bb194: {
        goto -> bb68;
    }

    bb195: {
        goto -> bb126;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    debug A9 => (_1.9: A9);
    debug A10 => (_1.10: A10);
    debug A11 => (_1.11: A11);
    debug A12 => (_1.12: A12);
    debug A13 => (_1.13: A13);
    debug A14 => (_1.14: A14);
    debug A15 => (_1.15: A15);
    debug A16 => (_1.16: A16);
    debug A17 => (_1.17: A17);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: A9;
    let mut _14: A10;
    let mut _15: A11;
    let mut _16: A12;
    let mut _17: A13;
    let mut _18: A14;
    let mut _19: A15;
    let mut _20: A16;
    let mut _21: A17;
    let mut _22: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>;
    let mut _23: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>;
    let mut _24: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>;
    let mut _25: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _26 = const false;
        _26 = const true;
        _27 = const true;
        _28 = const true;
        _29 = const true;
        _30 = const true;
        _31 = const true;
        _32 = const true;
        _33 = const true;
        _34 = const true;
        _35 = const true;
        _36 = const true;
        _37 = const true;
        _38 = const true;
        _39 = const true;
        _40 = const true;
        _41 = const true;
        _42 = const true;
        _22 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>);
        _23 = deref_copy (*_22);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>::address(_23) -> [return: bb1, unwind: bb38];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _24 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>);
        _25 = deref_copy (*_24);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>::vmctx(_25) -> [return: bb2, unwind: bb38];
    }

    bb2: {
        _42 = const false;
        _5 = move (_1.1: A1);
        _41 = const false;
        _6 = move (_1.2: A2);
        _40 = const false;
        _7 = move (_1.3: A3);
        _39 = const false;
        _8 = move (_1.4: A4);
        _38 = const false;
        _9 = move (_1.5: A5);
        _37 = const false;
        _10 = move (_1.6: A6);
        _36 = const false;
        _11 = move (_1.7: A7);
        _35 = const false;
        _12 = move (_1.8: A8);
        _34 = const false;
        _13 = move (_1.9: A9);
        _33 = const false;
        _14 = move (_1.10: A10);
        _32 = const false;
        _15 = move (_1.11: A11);
        _31 = const false;
        _16 = move (_1.12: A12);
        _30 = const false;
        _17 = move (_1.13: A13);
        _29 = const false;
        _18 = move (_1.14: A14);
        _28 = const false;
        _19 = move (_1.15: A15);
        _27 = const false;
        _20 = move (_1.16: A16);
        _26 = const false;
        _21 = move (_1.17: A17);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21) -> [return: bb3, unwind: bb38];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_26) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.17: A17)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_27) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.16: A16)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_28) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.15: A15)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_29) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.14: A14)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_30) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.13: A13)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_31) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.12: A12)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_32) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.11: A11)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_33) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.10: A10)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_34) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.9: A9)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_35) -> [0: bb21, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.8: A8)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_36) -> [0: bb23, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop((_1.7: A7)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_37) -> [0: bb25, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop((_1.6: A6)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_38) -> [0: bb27, otherwise: bb30];
    }

    bb30 (cleanup): {
        drop((_1.5: A5)) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_39) -> [0: bb29, otherwise: bb32];
    }

    bb32 (cleanup): {
        drop((_1.4: A4)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_40) -> [0: bb31, otherwise: bb34];
    }

    bb34 (cleanup): {
        drop((_1.3: A3)) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_41) -> [0: bb33, otherwise: bb36];
    }

    bb36 (cleanup): {
        drop((_1.2: A2)) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop((_1.1: A1)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        switchInt(_42) -> [0: bb35, otherwise: bb37];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8, _10: A9, _11: A10, _12: A11, _13: A12, _14: A13, _15: A14, _16: A15, _17: A16, _18: A17, _19: A18) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _20: bool;
    let mut _21: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>;
    let _22: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _23: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _24: &str;
    let mut _26: i128;
    let mut _27: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _28: A1;
    let mut _29: i128;
    let mut _30: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _31: A2;
    let mut _32: i128;
    let mut _33: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _34: A3;
    let mut _35: i128;
    let mut _36: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _37: A4;
    let mut _38: i128;
    let mut _39: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _40: A5;
    let mut _41: i128;
    let mut _42: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _43: A6;
    let mut _44: i128;
    let mut _45: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _46: A7;
    let mut _47: i128;
    let mut _48: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _49: A8;
    let mut _50: i128;
    let mut _51: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _52: A9;
    let mut _53: i128;
    let mut _54: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _55: A10;
    let mut _56: i128;
    let mut _57: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _58: A11;
    let mut _59: i128;
    let mut _60: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _61: A12;
    let mut _62: i128;
    let mut _63: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _64: A13;
    let mut _65: i128;
    let mut _66: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _67: A14;
    let mut _68: i128;
    let mut _69: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _70: A15;
    let mut _71: i128;
    let mut _72: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _73: A16;
    let mut _74: i128;
    let mut _75: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _76: A17;
    let mut _77: i128;
    let mut _78: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _79: A18;
    let mut _82: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _85: &mut [i128];
    let mut _86: bool;
    let mut _87: usize;
    let mut _88: &[i128];
    let mut _89: &[i128; 18];
    let mut _90: usize;
    let mut _91: &[i128];
    let mut _92: &mut [i128];
    let mut _93: &mut [i128; 18];
    let mut _94: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _95: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _96: std::slice::Iter<'_, i128>;
    let mut _97: &[i128];
    let mut _98: &[i128; 18];
    let mut _100: std::option::Option<(usize, &i128)>;
    let mut _101: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _102: isize;
    let mut _105: usize;
    let mut _106: bool;
    let mut _107: &mut [i128];
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _109: std::result::Result<(), wasmer_vm::Trap>;
    let _110: &store::Store;
    let mut _111: wasmer_vm::VMFunctionEnvironment;
    let mut _112: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>;
    let mut _113: *const wasmer_vm::VMFunctionBody;
    let mut _114: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>;
    let mut _115: *mut u8;
    let mut _116: *mut i128;
    let mut _117: isize;
    let mut _120: &[i128];
    let mut _121: bool;
    let mut _122: bool;
    let mut _124: &[i128];
    let mut _125: &[i128; 18];
    let mut _127: &mut i128;
    let mut _128: &mut [i128];
    let mut _129: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _130: usize;
    let mut _131: usize;
    let mut _132: bool;
    let _133: ();
    let mut _134: Rets;
    let mut _135: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _136: wasmer_vm::VMFunctionKind;
    let mut _137: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>;
    let mut _138: isize;
    let _139: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _140: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _141: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _142: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _143: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _144: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _145: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>;
    let mut _146: isize;
    let _147: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _148: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _149: Rets;
    let mut _150: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _151: [wasmer_types::Value<externals::function::Function>; 18];
    let mut _152: wasmer_types::Value<externals::function::Function>;
    let mut _153: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _154: A1;
    let mut _155: wasmer_types::Value<externals::function::Function>;
    let mut _156: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _157: A2;
    let mut _158: wasmer_types::Value<externals::function::Function>;
    let mut _159: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _160: A3;
    let mut _161: wasmer_types::Value<externals::function::Function>;
    let mut _162: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _163: A4;
    let mut _164: wasmer_types::Value<externals::function::Function>;
    let mut _165: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _166: A5;
    let mut _167: wasmer_types::Value<externals::function::Function>;
    let mut _168: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _169: A6;
    let mut _170: wasmer_types::Value<externals::function::Function>;
    let mut _171: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _172: A7;
    let mut _173: wasmer_types::Value<externals::function::Function>;
    let mut _174: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _175: A8;
    let mut _176: wasmer_types::Value<externals::function::Function>;
    let mut _177: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _178: A9;
    let mut _179: wasmer_types::Value<externals::function::Function>;
    let mut _180: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _181: A10;
    let mut _182: wasmer_types::Value<externals::function::Function>;
    let mut _183: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _184: A11;
    let mut _185: wasmer_types::Value<externals::function::Function>;
    let mut _186: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _187: A12;
    let mut _188: wasmer_types::Value<externals::function::Function>;
    let mut _189: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _190: A13;
    let mut _191: wasmer_types::Value<externals::function::Function>;
    let mut _192: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _193: A14;
    let mut _194: wasmer_types::Value<externals::function::Function>;
    let mut _195: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _196: A15;
    let mut _197: wasmer_types::Value<externals::function::Function>;
    let mut _198: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _199: A16;
    let mut _200: wasmer_types::Value<externals::function::Function>;
    let mut _201: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _202: A17;
    let mut _203: wasmer_types::Value<externals::function::Function>;
    let mut _204: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _205: A18;
    let mut _208: *mut std::ffi::c_void;
    let mut _209: wasmer_vm::VMFunctionEnvironment;
    let mut _210: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>;
    let mut _211: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _212: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _213: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _214: &[wasmer_types::Value<externals::function::Function>];
    let _215: &[wasmer_types::Value<externals::function::Function>; 18];
    let mut _216: isize;
    let mut _221: *mut [i128];
    let mut _222: &mut [i128];
    let mut _223: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _224: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _225: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _226: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _227: &[wasmer_types::Value<externals::function::Function>];
    let mut _228: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _230: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _231: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _232: isize;
    let _235: ();
    let mut _236: *mut i128;
    let mut _237: Rets;
    let mut _238: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _239: &i128;
    let mut _240: bool;
    let mut _241: bool;
    let mut _242: bool;
    let mut _243: bool;
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: bool;
    let mut _248: bool;
    let mut _249: bool;
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: bool;
    let mut _253: bool;
    let mut _254: bool;
    let mut _255: bool;
    let mut _256: bool;
    let mut _257: bool;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: bool;
    scope 1 {
        debug trampoline => _22;
        let mut _25: [i128; 18];
        scope 2 {
            debug params_list => _25;
            let mut _80: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _80;
                let _81: &mut [i128];
                scope 4 {
                    debug rets_list => _81;
                    let _83: bool;
                    scope 5 {
                        debug using_rets_array => _83;
                        let _84: &mut [i128];
                        let mut _99: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _84;
                            let _118: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _119: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _118;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _119;
                                let _123: *const i128;
                                scope 15 {
                                    debug src_pointer => _123;
                                    let _126: *mut i128;
                                    scope 16 {
                                        debug rets_list => _126;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _99;
                            let _103: usize;
                            let _104: i128;
                            scope 8 {
                                debug i => _103;
                                debug arg => _104;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _139;
    }
    scope 19 {
        debug residual => _147;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _148;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _151;
        let _206: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _206;
            let mut _219: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _219;
                let _220: *mut i128;
                scope 32 {
                    debug mut_rets => _220;
                    let mut _229: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _229;
                        let _233: usize;
                        let _234: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _233;
                            debug ret => _234;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _207: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _207;
                let _217: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _218: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _217;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _218;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _260 = const false;
        _259 = const false;
        _258 = const false;
        _257 = const false;
        _256 = const false;
        _255 = const false;
        _254 = const false;
        _253 = const false;
        _252 = const false;
        _251 = const false;
        _250 = const false;
        _249 = const false;
        _248 = const false;
        _247 = const false;
        _246 = const false;
        _245 = const false;
        _244 = const false;
        _243 = const false;
        _242 = const false;
        _241 = const false;
        _240 = const false;
        _260 = const true;
        _259 = const true;
        _258 = const true;
        _257 = const true;
        _256 = const true;
        _255 = const true;
        _254 = const true;
        _253 = const true;
        _252 = const true;
        _251 = const true;
        _250 = const true;
        _249 = const true;
        _248 = const true;
        _247 = const true;
        _246 = const true;
        _245 = const true;
        _244 = const true;
        _243 = const true;
        _21 = _1;
        _20 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>::is_host(move _21) -> [return: bb1, unwind: bb183];
    }

    bb1: {
        switchInt(move _20) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _137 = _1;
        _136 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>::arg_kind(move _137) -> [return: bb72, unwind: bb183];
    }

    bb3: {
        _23 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _24 = const "Call trampoline not found in wasm function";
        _22 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _23, _24) -> [return: bb4, unwind: bb183];
    }

    bb4: {
        _260 = const false;
        _28 = move _2;
        _27 = <A1 as FromToNativeWasmType>::to_native(move _28) -> [return: bb5, unwind: bb183];
    }

    bb5: {
        _26 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _27) -> [return: bb6, unwind: bb183];
    }

    bb6: {
        _259 = const false;
        _31 = move _3;
        _30 = <A2 as FromToNativeWasmType>::to_native(move _31) -> [return: bb7, unwind: bb183];
    }

    bb7: {
        _29 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _30) -> [return: bb8, unwind: bb183];
    }

    bb8: {
        _258 = const false;
        _34 = move _4;
        _33 = <A3 as FromToNativeWasmType>::to_native(move _34) -> [return: bb9, unwind: bb183];
    }

    bb9: {
        _32 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _33) -> [return: bb10, unwind: bb183];
    }

    bb10: {
        _257 = const false;
        _37 = move _5;
        _36 = <A4 as FromToNativeWasmType>::to_native(move _37) -> [return: bb11, unwind: bb183];
    }

    bb11: {
        _35 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _36) -> [return: bb12, unwind: bb183];
    }

    bb12: {
        _256 = const false;
        _40 = move _6;
        _39 = <A5 as FromToNativeWasmType>::to_native(move _40) -> [return: bb13, unwind: bb183];
    }

    bb13: {
        _38 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _39) -> [return: bb14, unwind: bb183];
    }

    bb14: {
        _255 = const false;
        _43 = move _7;
        _42 = <A6 as FromToNativeWasmType>::to_native(move _43) -> [return: bb15, unwind: bb183];
    }

    bb15: {
        _41 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _42) -> [return: bb16, unwind: bb183];
    }

    bb16: {
        _254 = const false;
        _46 = move _8;
        _45 = <A7 as FromToNativeWasmType>::to_native(move _46) -> [return: bb17, unwind: bb183];
    }

    bb17: {
        _44 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _45) -> [return: bb18, unwind: bb183];
    }

    bb18: {
        _253 = const false;
        _49 = move _9;
        _48 = <A8 as FromToNativeWasmType>::to_native(move _49) -> [return: bb19, unwind: bb183];
    }

    bb19: {
        _47 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _48) -> [return: bb20, unwind: bb183];
    }

    bb20: {
        _252 = const false;
        _52 = move _10;
        _51 = <A9 as FromToNativeWasmType>::to_native(move _52) -> [return: bb21, unwind: bb183];
    }

    bb21: {
        _50 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _51) -> [return: bb22, unwind: bb183];
    }

    bb22: {
        _251 = const false;
        _55 = move _11;
        _54 = <A10 as FromToNativeWasmType>::to_native(move _55) -> [return: bb23, unwind: bb183];
    }

    bb23: {
        _53 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _54) -> [return: bb24, unwind: bb183];
    }

    bb24: {
        _250 = const false;
        _58 = move _12;
        _57 = <A11 as FromToNativeWasmType>::to_native(move _58) -> [return: bb25, unwind: bb183];
    }

    bb25: {
        _56 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _57) -> [return: bb26, unwind: bb183];
    }

    bb26: {
        _249 = const false;
        _61 = move _13;
        _60 = <A12 as FromToNativeWasmType>::to_native(move _61) -> [return: bb27, unwind: bb183];
    }

    bb27: {
        _59 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _60) -> [return: bb28, unwind: bb183];
    }

    bb28: {
        _248 = const false;
        _64 = move _14;
        _63 = <A13 as FromToNativeWasmType>::to_native(move _64) -> [return: bb29, unwind: bb183];
    }

    bb29: {
        _62 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _63) -> [return: bb30, unwind: bb183];
    }

    bb30: {
        _247 = const false;
        _67 = move _15;
        _66 = <A14 as FromToNativeWasmType>::to_native(move _67) -> [return: bb31, unwind: bb183];
    }

    bb31: {
        _65 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _66) -> [return: bb32, unwind: bb183];
    }

    bb32: {
        _246 = const false;
        _70 = move _16;
        _69 = <A15 as FromToNativeWasmType>::to_native(move _70) -> [return: bb33, unwind: bb183];
    }

    bb33: {
        _68 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _69) -> [return: bb34, unwind: bb183];
    }

    bb34: {
        _245 = const false;
        _73 = move _17;
        _72 = <A16 as FromToNativeWasmType>::to_native(move _73) -> [return: bb35, unwind: bb183];
    }

    bb35: {
        _71 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _72) -> [return: bb36, unwind: bb183];
    }

    bb36: {
        _244 = const false;
        _76 = move _18;
        _75 = <A17 as FromToNativeWasmType>::to_native(move _76) -> [return: bb37, unwind: bb183];
    }

    bb37: {
        _74 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _75) -> [return: bb38, unwind: bb183];
    }

    bb38: {
        _243 = const false;
        _79 = move _19;
        _78 = <A18 as FromToNativeWasmType>::to_native(move _79) -> [return: bb39, unwind: bb183];
    }

    bb39: {
        _77 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _78) -> [return: bb40, unwind: bb183];
    }

    bb40: {
        _25 = [move _26, move _29, move _32, move _35, move _38, move _41, move _44, move _47, move _50, move _53, move _56, move _59, move _62, move _65, move _68, move _71, move _74, move _77];
        _80 = <Rets as WasmTypeList>::empty_array() -> [return: bb41, unwind: bb183];
    }

    bb41: {
        _242 = const true;
        _82 = &mut _80;
        _81 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _82) -> [return: bb42, unwind: bb181];
    }

    bb42: {
        _89 = &_25;
        _88 = move _89 as &[i128] (PointerCoercion(Unsize));
        _87 = Len((*_88));
        _91 = &(*_81);
        _90 = Len((*_91));
        _86 = Gt(move _87, move _90);
        switchInt(move _86) -> [0: bb45, otherwise: bb43];
    }

    bb43: {
        _83 = const false;
        _93 = &mut _25;
        _92 = <[i128; 18] as AsMut<[i128]>>::as_mut(move _93) -> [return: bb44, unwind: bb181];
    }

    bb44: {
        _85 = _92;
        goto -> bb56;
    }

    bb45: {
        _83 = const true;
        _98 = &_25;
        _97 = move _98 as &[i128] (PointerCoercion(Unsize));
        _96 = core::slice::<impl [i128]>::iter(move _97) -> [return: bb46, unwind: bb181];
    }

    bb46: {
        _95 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _96) -> [return: bb47, unwind: bb181];
    }

    bb47: {
        _94 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _95) -> [return: bb48, unwind: bb181];
    }

    bb48: {
        _99 = move _94;
        goto -> bb49;
    }

    bb49: {
        _101 = &mut _99;
        _100 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_101) -> [return: bb50, unwind: bb181];
    }

    bb50: {
        _102 = discriminant(_100);
        switchInt(move _102) -> [0: bb53, 1: bb51, otherwise: bb52];
    }

    bb51: {
        _239 = deref_copy (((_100 as Some).0: (usize, &i128)).1: &i128);
        _104 = (*_239);
        _103 = (((_100 as Some).0: (usize, &i128)).0: usize);
        _105 = Len((*_81));
        _106 = Lt(_103, _105);
        assert(move _106, "index out of bounds: the length is {} but the index is {}", move _105, _103) -> [success: bb54, unwind: bb181];
    }

    bb52: {
        unreachable;
    }

    bb53: {
        _107 = <[i128] as AsMut<[i128]>>::as_mut(_81) -> [return: bb55, unwind: bb181];
    }

    bb54: {
        (*_81)[_103] = _104;
        goto -> bb49;
    }

    bb55: {
        _85 = _107;
        goto -> bb56;
    }

    bb56: {
        _84 = _85;
        _110 = &((*_1).0: store::Store);
        _112 = _1;
        _111 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>::vmctx(move _112) -> [return: bb57, unwind: bb181];
    }

    bb57: {
        _114 = _1;
        _113 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>::address(move _114) -> [return: bb58, unwind: bb181];
    }

    bb58: {
        _116 = core::slice::<impl [i128]>::as_mut_ptr(_84) -> [return: bb59, unwind: bb181];
    }

    bb59: {
        _115 = move _116 as *mut u8 (PtrToPtr);
        _109 = wasmer_call_trampoline::<Store>(_110, move _111, _22, move _113, move _115) -> [return: bb60, unwind: bb181];
    }

    bb60: {
        _108 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _109) -> [return: bb61, unwind: bb181];
    }

    bb61: {
        _117 = discriminant(_108);
        switchInt(move _117) -> [0: bb62, 1: bb63, otherwise: bb52];
    }

    bb62: {
        _120 = &(*_81);
        _119 = Len((*_120));
        _121 = _83;
        switchInt(move _121) -> [0: bb65, otherwise: bb70];
    }

    bb63: {
        _118 = move ((_108 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _118) -> [return: bb64, unwind: bb181];
    }

    bb64: {
        drop(_80) -> [return: bb137, unwind: bb183];
    }

    bb65: {
        _122 = Gt(_119, const 0_usize);
        switchInt(move _122) -> [0: bb70, otherwise: bb66];
    }

    bb66: {
        _125 = &_25;
        _124 = move _125 as &[i128] (PointerCoercion(Unsize));
        _123 = core::slice::<impl [i128]>::as_ptr(move _124) -> [return: bb67, unwind: bb181];
    }

    bb67: {
        _129 = &mut _80;
        _128 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _129) -> [return: bb68, unwind: bb181];
    }

    bb68: {
        _130 = const 0_usize;
        _131 = Len((*_128));
        _132 = Lt(_130, _131);
        assert(move _132, "index out of bounds: the length is {} but the index is {}", move _131, _130) -> [success: bb69, unwind: bb181];
    }

    bb69: {
        _127 = &mut (*_128)[_130];
        _126 = &raw mut (*_127);
        _133 = copy_nonoverlapping::<i128>(_123, _126, _119) -> [return: bb201, unwind: bb181];
    }

    bb70: {
        _242 = const false;
        _135 = move _80;
        _134 = <Rets as WasmTypeList>::from_array(move _135) -> [return: bb71, unwind: bb181];
    }

    bb71: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _134);
        _242 = const false;
        goto -> bb138;
    }

    bb72: {
        _138 = discriminant(_136);
        switchInt(move _138) -> [0: bb74, 1: bb73, otherwise: bb52];
    }

    bb73: {
        _260 = const false;
        _154 = move _2;
        _153 = <A1 as FromToNativeWasmType>::to_native(move _154) -> [return: bb82, unwind: bb183];
    }

    bb74: {
        _145 = &_1;
        _260 = const false;
        _259 = const false;
        _258 = const false;
        _257 = const false;
        _256 = const false;
        _255 = const false;
        _254 = const false;
        _253 = const false;
        _252 = const false;
        _251 = const false;
        _250 = const false;
        _249 = const false;
        _248 = const false;
        _247 = const false;
        _246 = const false;
        _245 = const false;
        _244 = const false;
        _243 = const false;
        _144 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _145, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19 };
        _143 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _144);
        _142 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _143) -> [return: bb75, unwind: bb183];
    }

    bb75: {
        _141 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _142, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb76, unwind: bb183];
    }

    bb76: {
        _140 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _141) -> [return: bb77, unwind: bb183];
    }

    bb77: {
        _146 = discriminant(_140);
        switchInt(move _146) -> [0: bb78, 1: bb79, otherwise: bb52];
    }

    bb78: {
        _148 = move ((_140 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _241 = const true;
        _139 = move _148;
        _241 = const false;
        _150 = move _139;
        _149 = <Rets as WasmTypeList>::from_c_struct(move _150) -> [return: bb81, unwind: bb179];
    }

    bb79: {
        _147 = move ((_140 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _147) -> [return: bb80, unwind: bb183];
    }

    bb80: {
        _241 = const false;
        goto -> bb138;
    }

    bb81: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _149);
        _241 = const false;
        goto -> bb138;
    }

    bb82: {
        _152 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _153) -> [return: bb83, unwind: bb183];
    }

    bb83: {
        _259 = const false;
        _157 = move _3;
        _156 = <A2 as FromToNativeWasmType>::to_native(move _157) -> [return: bb84, unwind: bb157];
    }

    bb84: {
        _155 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _156) -> [return: bb85, unwind: bb157];
    }

    bb85: {
        _258 = const false;
        _160 = move _4;
        _159 = <A3 as FromToNativeWasmType>::to_native(move _160) -> [return: bb86, unwind: bb156];
    }

    bb86: {
        _158 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _159) -> [return: bb87, unwind: bb156];
    }

    bb87: {
        _257 = const false;
        _163 = move _5;
        _162 = <A4 as FromToNativeWasmType>::to_native(move _163) -> [return: bb88, unwind: bb155];
    }

    bb88: {
        _161 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _162) -> [return: bb89, unwind: bb155];
    }

    bb89: {
        _256 = const false;
        _166 = move _6;
        _165 = <A5 as FromToNativeWasmType>::to_native(move _166) -> [return: bb90, unwind: bb154];
    }

    bb90: {
        _164 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _165) -> [return: bb91, unwind: bb154];
    }

    bb91: {
        _255 = const false;
        _169 = move _7;
        _168 = <A6 as FromToNativeWasmType>::to_native(move _169) -> [return: bb92, unwind: bb153];
    }

    bb92: {
        _167 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _168) -> [return: bb93, unwind: bb153];
    }

    bb93: {
        _254 = const false;
        _172 = move _8;
        _171 = <A7 as FromToNativeWasmType>::to_native(move _172) -> [return: bb94, unwind: bb152];
    }

    bb94: {
        _170 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _171) -> [return: bb95, unwind: bb152];
    }

    bb95: {
        _253 = const false;
        _175 = move _9;
        _174 = <A8 as FromToNativeWasmType>::to_native(move _175) -> [return: bb96, unwind: bb151];
    }

    bb96: {
        _173 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _174) -> [return: bb97, unwind: bb151];
    }

    bb97: {
        _252 = const false;
        _178 = move _10;
        _177 = <A9 as FromToNativeWasmType>::to_native(move _178) -> [return: bb98, unwind: bb150];
    }

    bb98: {
        _176 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _177) -> [return: bb99, unwind: bb150];
    }

    bb99: {
        _251 = const false;
        _181 = move _11;
        _180 = <A10 as FromToNativeWasmType>::to_native(move _181) -> [return: bb100, unwind: bb149];
    }

    bb100: {
        _179 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _180) -> [return: bb101, unwind: bb149];
    }

    bb101: {
        _250 = const false;
        _184 = move _12;
        _183 = <A11 as FromToNativeWasmType>::to_native(move _184) -> [return: bb102, unwind: bb148];
    }

    bb102: {
        _182 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _183) -> [return: bb103, unwind: bb148];
    }

    bb103: {
        _249 = const false;
        _187 = move _13;
        _186 = <A12 as FromToNativeWasmType>::to_native(move _187) -> [return: bb104, unwind: bb147];
    }

    bb104: {
        _185 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _186) -> [return: bb105, unwind: bb147];
    }

    bb105: {
        _248 = const false;
        _190 = move _14;
        _189 = <A13 as FromToNativeWasmType>::to_native(move _190) -> [return: bb106, unwind: bb146];
    }

    bb106: {
        _188 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _189) -> [return: bb107, unwind: bb146];
    }

    bb107: {
        _247 = const false;
        _193 = move _15;
        _192 = <A14 as FromToNativeWasmType>::to_native(move _193) -> [return: bb108, unwind: bb145];
    }

    bb108: {
        _191 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _192) -> [return: bb109, unwind: bb145];
    }

    bb109: {
        _246 = const false;
        _196 = move _16;
        _195 = <A15 as FromToNativeWasmType>::to_native(move _196) -> [return: bb110, unwind: bb144];
    }

    bb110: {
        _194 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _195) -> [return: bb111, unwind: bb144];
    }

    bb111: {
        _245 = const false;
        _199 = move _17;
        _198 = <A16 as FromToNativeWasmType>::to_native(move _199) -> [return: bb112, unwind: bb143];
    }

    bb112: {
        _197 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _198) -> [return: bb113, unwind: bb143];
    }

    bb113: {
        _244 = const false;
        _202 = move _18;
        _201 = <A17 as FromToNativeWasmType>::to_native(move _202) -> [return: bb114, unwind: bb142];
    }

    bb114: {
        _200 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _201) -> [return: bb115, unwind: bb142];
    }

    bb115: {
        _243 = const false;
        _205 = move _19;
        _204 = <A18 as FromToNativeWasmType>::to_native(move _205) -> [return: bb116, unwind: bb141];
    }

    bb116: {
        _203 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _204) -> [return: bb117, unwind: bb141];
    }

    bb117: {
        _151 = [move _152, move _155, move _158, move _161, move _164, move _167, move _170, move _173, move _176, move _179, move _182, move _185, move _188, move _191, move _194, move _197, move _200, move _203];
        _210 = _1;
        _209 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>::vmctx(move _210) -> [return: bb118, unwind: bb140];
    }

    bb118: {
        _208 = (_209.1: *mut std::ffi::c_void);
        _207 = move _208 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _213 = &((*_207).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _215 = &_151;
        _214 = _215 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _212 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _213, move _214) -> [return: bb119, unwind: bb140];
    }

    bb119: {
        _211 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _212) -> [return: bb120, unwind: bb140];
    }

    bb120: {
        _216 = discriminant(_211);
        switchInt(move _216) -> [0: bb121, 1: bb122, otherwise: bb52];
    }

    bb121: {
        _218 = move ((_211 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _206 = move _218;
        _219 = <Rets as WasmTypeList>::empty_array() -> [return: bb124, unwind: bb139];
    }

    bb122: {
        _217 = move ((_211 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _217) -> [return: bb123, unwind: bb140];
    }

    bb123: {
        drop(_151) -> [return: bb138, unwind: bb183];
    }

    bb124: {
        _240 = const true;
        _223 = &mut _219;
        _222 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _223) -> [return: bb125, unwind: bb177];
    }

    bb125: {
        _221 = &raw mut (*_222);
        _220 = move _221 as *mut i128 (PtrToPtr);
        _228 = &_206;
        _227 = <Vec<Value<function::Function>> as Deref>::deref(move _228) -> [return: bb126, unwind: bb177];
    }

    bb126: {
        _226 = core::slice::<impl [Value<function::Function>]>::iter(_227) -> [return: bb127, unwind: bb177];
    }

    bb127: {
        _225 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _226) -> [return: bb128, unwind: bb177];
    }

    bb128: {
        _224 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _225) -> [return: bb129, unwind: bb177];
    }

    bb129: {
        _229 = move _224;
        goto -> bb130;
    }

    bb130: {
        _231 = &mut _229;
        _230 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_231) -> [return: bb131, unwind: bb177];
    }

    bb131: {
        _232 = discriminant(_230);
        switchInt(move _232) -> [0: bb133, 1: bb132, otherwise: bb52];
    }

    bb132: {
        _233 = (((_230 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _234 = (((_230 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _236 = std::ptr::mut_ptr::<impl *mut i128>::add(_220, _233) -> [return: bb134, unwind: bb177];
    }

    bb133: {
        _240 = const false;
        _238 = move _219;
        _237 = <Rets as WasmTypeList>::from_array(move _238) -> [return: bb135, unwind: bb177];
    }

    bb134: {
        _235 = Value::<function::Function>::write_value_to(_234, move _236) -> [return: bb202, unwind: bb177];
    }

    bb135: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _237);
        _240 = const false;
        drop(_206) -> [return: bb136, unwind: bb140];
    }

    bb136: {
        drop(_151) -> [return: bb138, unwind: bb183];
    }

    bb137: {
        _242 = const false;
        goto -> bb138;
    }

    bb138: {
        return;
    }

    bb139 (cleanup): {
        drop(_206) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        drop(_151) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb141 (cleanup): {
        drop(_200) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        drop(_197) -> [return: bb143, unwind terminate(cleanup)];
    }

    bb143 (cleanup): {
        drop(_194) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_191) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_188) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_185) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        drop(_182) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        drop(_179) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_176) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_173) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_170) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_167) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_164) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_161) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_158) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_155) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        drop(_152) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        switchInt(_244) -> [0: bb159, otherwise: bb184];
    }

    bb159 (cleanup): {
        switchInt(_245) -> [0: bb160, otherwise: bb185];
    }

    bb160 (cleanup): {
        switchInt(_246) -> [0: bb161, otherwise: bb186];
    }

    bb161 (cleanup): {
        switchInt(_247) -> [0: bb162, otherwise: bb187];
    }

    bb162 (cleanup): {
        switchInt(_248) -> [0: bb163, otherwise: bb188];
    }

    bb163 (cleanup): {
        switchInt(_249) -> [0: bb164, otherwise: bb189];
    }

    bb164 (cleanup): {
        switchInt(_250) -> [0: bb165, otherwise: bb190];
    }

    bb165 (cleanup): {
        switchInt(_251) -> [0: bb166, otherwise: bb191];
    }

    bb166 (cleanup): {
        switchInt(_252) -> [0: bb167, otherwise: bb192];
    }

    bb167 (cleanup): {
        switchInt(_253) -> [0: bb168, otherwise: bb193];
    }

    bb168 (cleanup): {
        switchInt(_254) -> [0: bb169, otherwise: bb194];
    }

    bb169 (cleanup): {
        switchInt(_255) -> [0: bb170, otherwise: bb195];
    }

    bb170 (cleanup): {
        switchInt(_256) -> [0: bb171, otherwise: bb196];
    }

    bb171 (cleanup): {
        switchInt(_257) -> [0: bb172, otherwise: bb197];
    }

    bb172 (cleanup): {
        switchInt(_258) -> [0: bb173, otherwise: bb198];
    }

    bb173 (cleanup): {
        switchInt(_259) -> [0: bb174, otherwise: bb199];
    }

    bb174 (cleanup): {
        switchInt(_260) -> [0: bb175, otherwise: bb200];
    }

    bb175 (cleanup): {
        resume;
    }

    bb176 (cleanup): {
        drop(_219) -> [return: bb139, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        switchInt(_240) -> [0: bb139, otherwise: bb176];
    }

    bb178 (cleanup): {
        drop(_139) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        switchInt(_241) -> [0: bb183, otherwise: bb178];
    }

    bb180 (cleanup): {
        drop(_80) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb181 (cleanup): {
        switchInt(_242) -> [0: bb183, otherwise: bb180];
    }

    bb182 (cleanup): {
        drop(_19) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        switchInt(_243) -> [0: bb158, otherwise: bb182];
    }

    bb184 (cleanup): {
        drop(_18) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_17) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_16) -> [return: bb161, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_15) -> [return: bb162, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        drop(_14) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        drop(_13) -> [return: bb164, unwind terminate(cleanup)];
    }

    bb190 (cleanup): {
        drop(_12) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        drop(_11) -> [return: bb166, unwind terminate(cleanup)];
    }

    bb192 (cleanup): {
        drop(_10) -> [return: bb167, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        drop(_9) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb194 (cleanup): {
        drop(_8) -> [return: bb169, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        drop(_7) -> [return: bb170, unwind terminate(cleanup)];
    }

    bb196 (cleanup): {
        drop(_6) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb197 (cleanup): {
        drop(_5) -> [return: bb172, unwind terminate(cleanup)];
    }

    bb198 (cleanup): {
        drop(_4) -> [return: bb173, unwind terminate(cleanup)];
    }

    bb199 (cleanup): {
        drop(_3) -> [return: bb174, unwind terminate(cleanup)];
    }

    bb200 (cleanup): {
        drop(_2) -> [return: bb175, unwind terminate(cleanup)];
    }

    bb201: {
        goto -> bb70;
    }

    bb202: {
        goto -> bb130;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    debug A9 => (_1.9: A9);
    debug A10 => (_1.10: A10);
    debug A11 => (_1.11: A11);
    debug A12 => (_1.12: A12);
    debug A13 => (_1.13: A13);
    debug A14 => (_1.14: A14);
    debug A15 => (_1.15: A15);
    debug A16 => (_1.16: A16);
    debug A17 => (_1.17: A17);
    debug A18 => (_1.18: A18);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: A9;
    let mut _14: A10;
    let mut _15: A11;
    let mut _16: A12;
    let mut _17: A13;
    let mut _18: A14;
    let mut _19: A15;
    let mut _20: A16;
    let mut _21: A17;
    let mut _22: A18;
    let mut _23: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>;
    let mut _24: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>;
    let mut _25: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>;
    let mut _26: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _27 = const false;
        _27 = const true;
        _28 = const true;
        _29 = const true;
        _30 = const true;
        _31 = const true;
        _32 = const true;
        _33 = const true;
        _34 = const true;
        _35 = const true;
        _36 = const true;
        _37 = const true;
        _38 = const true;
        _39 = const true;
        _40 = const true;
        _41 = const true;
        _42 = const true;
        _43 = const true;
        _44 = const true;
        _23 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>);
        _24 = deref_copy (*_23);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>::address(_24) -> [return: bb1, unwind: bb40];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _25 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>);
        _26 = deref_copy (*_25);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>::vmctx(_26) -> [return: bb2, unwind: bb40];
    }

    bb2: {
        _44 = const false;
        _5 = move (_1.1: A1);
        _43 = const false;
        _6 = move (_1.2: A2);
        _42 = const false;
        _7 = move (_1.3: A3);
        _41 = const false;
        _8 = move (_1.4: A4);
        _40 = const false;
        _9 = move (_1.5: A5);
        _39 = const false;
        _10 = move (_1.6: A6);
        _38 = const false;
        _11 = move (_1.7: A7);
        _37 = const false;
        _12 = move (_1.8: A8);
        _36 = const false;
        _13 = move (_1.9: A9);
        _35 = const false;
        _14 = move (_1.10: A10);
        _34 = const false;
        _15 = move (_1.11: A11);
        _33 = const false;
        _16 = move (_1.12: A12);
        _32 = const false;
        _17 = move (_1.13: A13);
        _31 = const false;
        _18 = move (_1.14: A14);
        _30 = const false;
        _19 = move (_1.15: A15);
        _29 = const false;
        _20 = move (_1.16: A16);
        _28 = const false;
        _21 = move (_1.17: A17);
        _27 = const false;
        _22 = move (_1.18: A18);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22) -> [return: bb3, unwind: bb40];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_27) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.18: A18)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_28) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.17: A17)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_29) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.16: A16)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_30) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.15: A15)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_31) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.14: A14)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_32) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.13: A13)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_33) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.12: A12)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_34) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.11: A11)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_35) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.10: A10)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_36) -> [0: bb21, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.9: A9)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_37) -> [0: bb23, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop((_1.8: A8)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_38) -> [0: bb25, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop((_1.7: A7)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_39) -> [0: bb27, otherwise: bb30];
    }

    bb30 (cleanup): {
        drop((_1.6: A6)) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_40) -> [0: bb29, otherwise: bb32];
    }

    bb32 (cleanup): {
        drop((_1.5: A5)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_41) -> [0: bb31, otherwise: bb34];
    }

    bb34 (cleanup): {
        drop((_1.4: A4)) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_42) -> [0: bb33, otherwise: bb36];
    }

    bb36 (cleanup): {
        drop((_1.3: A3)) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_43) -> [0: bb35, otherwise: bb38];
    }

    bb38 (cleanup): {
        drop((_1.2: A2)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        drop((_1.1: A1)) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        switchInt(_44) -> [0: bb37, otherwise: bb39];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8, _10: A9, _11: A10, _12: A11, _13: A12, _14: A13, _15: A14, _16: A15, _17: A16, _18: A17, _19: A18, _20: A19) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _21: bool;
    let mut _22: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>;
    let _23: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _24: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _25: &str;
    let mut _27: i128;
    let mut _28: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _29: A1;
    let mut _30: i128;
    let mut _31: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _32: A2;
    let mut _33: i128;
    let mut _34: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _35: A3;
    let mut _36: i128;
    let mut _37: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _38: A4;
    let mut _39: i128;
    let mut _40: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _41: A5;
    let mut _42: i128;
    let mut _43: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _44: A6;
    let mut _45: i128;
    let mut _46: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _47: A7;
    let mut _48: i128;
    let mut _49: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _50: A8;
    let mut _51: i128;
    let mut _52: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _53: A9;
    let mut _54: i128;
    let mut _55: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _56: A10;
    let mut _57: i128;
    let mut _58: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _59: A11;
    let mut _60: i128;
    let mut _61: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _62: A12;
    let mut _63: i128;
    let mut _64: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _65: A13;
    let mut _66: i128;
    let mut _67: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _68: A14;
    let mut _69: i128;
    let mut _70: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _71: A15;
    let mut _72: i128;
    let mut _73: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _74: A16;
    let mut _75: i128;
    let mut _76: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _77: A17;
    let mut _78: i128;
    let mut _79: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _80: A18;
    let mut _81: i128;
    let mut _82: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _83: A19;
    let mut _86: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _89: &mut [i128];
    let mut _90: bool;
    let mut _91: usize;
    let mut _92: &[i128];
    let mut _93: &[i128; 19];
    let mut _94: usize;
    let mut _95: &[i128];
    let mut _96: &mut [i128];
    let mut _97: &mut [i128; 19];
    let mut _98: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _99: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _100: std::slice::Iter<'_, i128>;
    let mut _101: &[i128];
    let mut _102: &[i128; 19];
    let mut _104: std::option::Option<(usize, &i128)>;
    let mut _105: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _106: isize;
    let mut _109: usize;
    let mut _110: bool;
    let mut _111: &mut [i128];
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _113: std::result::Result<(), wasmer_vm::Trap>;
    let _114: &store::Store;
    let mut _115: wasmer_vm::VMFunctionEnvironment;
    let mut _116: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>;
    let mut _117: *const wasmer_vm::VMFunctionBody;
    let mut _118: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>;
    let mut _119: *mut u8;
    let mut _120: *mut i128;
    let mut _121: isize;
    let mut _124: &[i128];
    let mut _125: bool;
    let mut _126: bool;
    let mut _128: &[i128];
    let mut _129: &[i128; 19];
    let mut _131: &mut i128;
    let mut _132: &mut [i128];
    let mut _133: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _134: usize;
    let mut _135: usize;
    let mut _136: bool;
    let _137: ();
    let mut _138: Rets;
    let mut _139: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _140: wasmer_vm::VMFunctionKind;
    let mut _141: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>;
    let mut _142: isize;
    let _143: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _145: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _146: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _147: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _148: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _149: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>;
    let mut _150: isize;
    let _151: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _152: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _153: Rets;
    let mut _154: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _155: [wasmer_types::Value<externals::function::Function>; 19];
    let mut _156: wasmer_types::Value<externals::function::Function>;
    let mut _157: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _158: A1;
    let mut _159: wasmer_types::Value<externals::function::Function>;
    let mut _160: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _161: A2;
    let mut _162: wasmer_types::Value<externals::function::Function>;
    let mut _163: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _164: A3;
    let mut _165: wasmer_types::Value<externals::function::Function>;
    let mut _166: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _167: A4;
    let mut _168: wasmer_types::Value<externals::function::Function>;
    let mut _169: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _170: A5;
    let mut _171: wasmer_types::Value<externals::function::Function>;
    let mut _172: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _173: A6;
    let mut _174: wasmer_types::Value<externals::function::Function>;
    let mut _175: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _176: A7;
    let mut _177: wasmer_types::Value<externals::function::Function>;
    let mut _178: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _179: A8;
    let mut _180: wasmer_types::Value<externals::function::Function>;
    let mut _181: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _182: A9;
    let mut _183: wasmer_types::Value<externals::function::Function>;
    let mut _184: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _185: A10;
    let mut _186: wasmer_types::Value<externals::function::Function>;
    let mut _187: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _188: A11;
    let mut _189: wasmer_types::Value<externals::function::Function>;
    let mut _190: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _191: A12;
    let mut _192: wasmer_types::Value<externals::function::Function>;
    let mut _193: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _194: A13;
    let mut _195: wasmer_types::Value<externals::function::Function>;
    let mut _196: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _197: A14;
    let mut _198: wasmer_types::Value<externals::function::Function>;
    let mut _199: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _200: A15;
    let mut _201: wasmer_types::Value<externals::function::Function>;
    let mut _202: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _203: A16;
    let mut _204: wasmer_types::Value<externals::function::Function>;
    let mut _205: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _206: A17;
    let mut _207: wasmer_types::Value<externals::function::Function>;
    let mut _208: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _209: A18;
    let mut _210: wasmer_types::Value<externals::function::Function>;
    let mut _211: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _212: A19;
    let mut _215: *mut std::ffi::c_void;
    let mut _216: wasmer_vm::VMFunctionEnvironment;
    let mut _217: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>;
    let mut _218: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _219: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _220: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _221: &[wasmer_types::Value<externals::function::Function>];
    let _222: &[wasmer_types::Value<externals::function::Function>; 19];
    let mut _223: isize;
    let mut _228: *mut [i128];
    let mut _229: &mut [i128];
    let mut _230: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _231: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _232: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _233: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _234: &[wasmer_types::Value<externals::function::Function>];
    let mut _235: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _237: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _238: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _239: isize;
    let _242: ();
    let mut _243: *mut i128;
    let mut _244: Rets;
    let mut _245: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _246: &i128;
    let mut _247: bool;
    let mut _248: bool;
    let mut _249: bool;
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: bool;
    let mut _253: bool;
    let mut _254: bool;
    let mut _255: bool;
    let mut _256: bool;
    let mut _257: bool;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: bool;
    let mut _261: bool;
    let mut _262: bool;
    let mut _263: bool;
    let mut _264: bool;
    let mut _265: bool;
    let mut _266: bool;
    let mut _267: bool;
    let mut _268: bool;
    scope 1 {
        debug trampoline => _23;
        let mut _26: [i128; 19];
        scope 2 {
            debug params_list => _26;
            let mut _84: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _84;
                let _85: &mut [i128];
                scope 4 {
                    debug rets_list => _85;
                    let _87: bool;
                    scope 5 {
                        debug using_rets_array => _87;
                        let _88: &mut [i128];
                        let mut _103: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _88;
                            let _122: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _123: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _122;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _123;
                                let _127: *const i128;
                                scope 15 {
                                    debug src_pointer => _127;
                                    let _130: *mut i128;
                                    scope 16 {
                                        debug rets_list => _130;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _103;
                            let _107: usize;
                            let _108: i128;
                            scope 8 {
                                debug i => _107;
                                debug arg => _108;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _143;
    }
    scope 19 {
        debug residual => _151;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _152;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _155;
        let _213: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _213;
            let mut _226: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _226;
                let _227: *mut i128;
                scope 32 {
                    debug mut_rets => _227;
                    let mut _236: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _236;
                        let _240: usize;
                        let _241: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _240;
                            debug ret => _241;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _214: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _214;
                let _224: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _225: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _224;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _225;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _268 = const false;
        _267 = const false;
        _266 = const false;
        _265 = const false;
        _264 = const false;
        _263 = const false;
        _262 = const false;
        _261 = const false;
        _260 = const false;
        _259 = const false;
        _258 = const false;
        _257 = const false;
        _256 = const false;
        _255 = const false;
        _254 = const false;
        _253 = const false;
        _252 = const false;
        _251 = const false;
        _250 = const false;
        _249 = const false;
        _248 = const false;
        _247 = const false;
        _268 = const true;
        _267 = const true;
        _266 = const true;
        _265 = const true;
        _264 = const true;
        _263 = const true;
        _262 = const true;
        _261 = const true;
        _260 = const true;
        _259 = const true;
        _258 = const true;
        _257 = const true;
        _256 = const true;
        _255 = const true;
        _254 = const true;
        _253 = const true;
        _252 = const true;
        _251 = const true;
        _250 = const true;
        _22 = _1;
        _21 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>::is_host(move _22) -> [return: bb1, unwind: bb189];
    }

    bb1: {
        switchInt(move _21) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _141 = _1;
        _140 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>::arg_kind(move _141) -> [return: bb74, unwind: bb189];
    }

    bb3: {
        _24 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _25 = const "Call trampoline not found in wasm function";
        _23 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _24, _25) -> [return: bb4, unwind: bb189];
    }

    bb4: {
        _268 = const false;
        _29 = move _2;
        _28 = <A1 as FromToNativeWasmType>::to_native(move _29) -> [return: bb5, unwind: bb189];
    }

    bb5: {
        _27 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _28) -> [return: bb6, unwind: bb189];
    }

    bb6: {
        _267 = const false;
        _32 = move _3;
        _31 = <A2 as FromToNativeWasmType>::to_native(move _32) -> [return: bb7, unwind: bb189];
    }

    bb7: {
        _30 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _31) -> [return: bb8, unwind: bb189];
    }

    bb8: {
        _266 = const false;
        _35 = move _4;
        _34 = <A3 as FromToNativeWasmType>::to_native(move _35) -> [return: bb9, unwind: bb189];
    }

    bb9: {
        _33 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _34) -> [return: bb10, unwind: bb189];
    }

    bb10: {
        _265 = const false;
        _38 = move _5;
        _37 = <A4 as FromToNativeWasmType>::to_native(move _38) -> [return: bb11, unwind: bb189];
    }

    bb11: {
        _36 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _37) -> [return: bb12, unwind: bb189];
    }

    bb12: {
        _264 = const false;
        _41 = move _6;
        _40 = <A5 as FromToNativeWasmType>::to_native(move _41) -> [return: bb13, unwind: bb189];
    }

    bb13: {
        _39 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _40) -> [return: bb14, unwind: bb189];
    }

    bb14: {
        _263 = const false;
        _44 = move _7;
        _43 = <A6 as FromToNativeWasmType>::to_native(move _44) -> [return: bb15, unwind: bb189];
    }

    bb15: {
        _42 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _43) -> [return: bb16, unwind: bb189];
    }

    bb16: {
        _262 = const false;
        _47 = move _8;
        _46 = <A7 as FromToNativeWasmType>::to_native(move _47) -> [return: bb17, unwind: bb189];
    }

    bb17: {
        _45 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _46) -> [return: bb18, unwind: bb189];
    }

    bb18: {
        _261 = const false;
        _50 = move _9;
        _49 = <A8 as FromToNativeWasmType>::to_native(move _50) -> [return: bb19, unwind: bb189];
    }

    bb19: {
        _48 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _49) -> [return: bb20, unwind: bb189];
    }

    bb20: {
        _260 = const false;
        _53 = move _10;
        _52 = <A9 as FromToNativeWasmType>::to_native(move _53) -> [return: bb21, unwind: bb189];
    }

    bb21: {
        _51 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _52) -> [return: bb22, unwind: bb189];
    }

    bb22: {
        _259 = const false;
        _56 = move _11;
        _55 = <A10 as FromToNativeWasmType>::to_native(move _56) -> [return: bb23, unwind: bb189];
    }

    bb23: {
        _54 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _55) -> [return: bb24, unwind: bb189];
    }

    bb24: {
        _258 = const false;
        _59 = move _12;
        _58 = <A11 as FromToNativeWasmType>::to_native(move _59) -> [return: bb25, unwind: bb189];
    }

    bb25: {
        _57 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _58) -> [return: bb26, unwind: bb189];
    }

    bb26: {
        _257 = const false;
        _62 = move _13;
        _61 = <A12 as FromToNativeWasmType>::to_native(move _62) -> [return: bb27, unwind: bb189];
    }

    bb27: {
        _60 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _61) -> [return: bb28, unwind: bb189];
    }

    bb28: {
        _256 = const false;
        _65 = move _14;
        _64 = <A13 as FromToNativeWasmType>::to_native(move _65) -> [return: bb29, unwind: bb189];
    }

    bb29: {
        _63 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _64) -> [return: bb30, unwind: bb189];
    }

    bb30: {
        _255 = const false;
        _68 = move _15;
        _67 = <A14 as FromToNativeWasmType>::to_native(move _68) -> [return: bb31, unwind: bb189];
    }

    bb31: {
        _66 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _67) -> [return: bb32, unwind: bb189];
    }

    bb32: {
        _254 = const false;
        _71 = move _16;
        _70 = <A15 as FromToNativeWasmType>::to_native(move _71) -> [return: bb33, unwind: bb189];
    }

    bb33: {
        _69 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _70) -> [return: bb34, unwind: bb189];
    }

    bb34: {
        _253 = const false;
        _74 = move _17;
        _73 = <A16 as FromToNativeWasmType>::to_native(move _74) -> [return: bb35, unwind: bb189];
    }

    bb35: {
        _72 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _73) -> [return: bb36, unwind: bb189];
    }

    bb36: {
        _252 = const false;
        _77 = move _18;
        _76 = <A17 as FromToNativeWasmType>::to_native(move _77) -> [return: bb37, unwind: bb189];
    }

    bb37: {
        _75 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _76) -> [return: bb38, unwind: bb189];
    }

    bb38: {
        _251 = const false;
        _80 = move _19;
        _79 = <A18 as FromToNativeWasmType>::to_native(move _80) -> [return: bb39, unwind: bb189];
    }

    bb39: {
        _78 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _79) -> [return: bb40, unwind: bb189];
    }

    bb40: {
        _250 = const false;
        _83 = move _20;
        _82 = <A19 as FromToNativeWasmType>::to_native(move _83) -> [return: bb41, unwind: bb189];
    }

    bb41: {
        _81 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _82) -> [return: bb42, unwind: bb189];
    }

    bb42: {
        _26 = [move _27, move _30, move _33, move _36, move _39, move _42, move _45, move _48, move _51, move _54, move _57, move _60, move _63, move _66, move _69, move _72, move _75, move _78, move _81];
        _84 = <Rets as WasmTypeList>::empty_array() -> [return: bb43, unwind: bb189];
    }

    bb43: {
        _249 = const true;
        _86 = &mut _84;
        _85 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _86) -> [return: bb44, unwind: bb187];
    }

    bb44: {
        _93 = &_26;
        _92 = move _93 as &[i128] (PointerCoercion(Unsize));
        _91 = Len((*_92));
        _95 = &(*_85);
        _94 = Len((*_95));
        _90 = Gt(move _91, move _94);
        switchInt(move _90) -> [0: bb47, otherwise: bb45];
    }

    bb45: {
        _87 = const false;
        _97 = &mut _26;
        _96 = <[i128; 19] as AsMut<[i128]>>::as_mut(move _97) -> [return: bb46, unwind: bb187];
    }

    bb46: {
        _89 = _96;
        goto -> bb58;
    }

    bb47: {
        _87 = const true;
        _102 = &_26;
        _101 = move _102 as &[i128] (PointerCoercion(Unsize));
        _100 = core::slice::<impl [i128]>::iter(move _101) -> [return: bb48, unwind: bb187];
    }

    bb48: {
        _99 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _100) -> [return: bb49, unwind: bb187];
    }

    bb49: {
        _98 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _99) -> [return: bb50, unwind: bb187];
    }

    bb50: {
        _103 = move _98;
        goto -> bb51;
    }

    bb51: {
        _105 = &mut _103;
        _104 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_105) -> [return: bb52, unwind: bb187];
    }

    bb52: {
        _106 = discriminant(_104);
        switchInt(move _106) -> [0: bb55, 1: bb53, otherwise: bb54];
    }

    bb53: {
        _246 = deref_copy (((_104 as Some).0: (usize, &i128)).1: &i128);
        _108 = (*_246);
        _107 = (((_104 as Some).0: (usize, &i128)).0: usize);
        _109 = Len((*_85));
        _110 = Lt(_107, _109);
        assert(move _110, "index out of bounds: the length is {} but the index is {}", move _109, _107) -> [success: bb56, unwind: bb187];
    }

    bb54: {
        unreachable;
    }

    bb55: {
        _111 = <[i128] as AsMut<[i128]>>::as_mut(_85) -> [return: bb57, unwind: bb187];
    }

    bb56: {
        (*_85)[_107] = _108;
        goto -> bb51;
    }

    bb57: {
        _89 = _111;
        goto -> bb58;
    }

    bb58: {
        _88 = _89;
        _114 = &((*_1).0: store::Store);
        _116 = _1;
        _115 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>::vmctx(move _116) -> [return: bb59, unwind: bb187];
    }

    bb59: {
        _118 = _1;
        _117 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>::address(move _118) -> [return: bb60, unwind: bb187];
    }

    bb60: {
        _120 = core::slice::<impl [i128]>::as_mut_ptr(_88) -> [return: bb61, unwind: bb187];
    }

    bb61: {
        _119 = move _120 as *mut u8 (PtrToPtr);
        _113 = wasmer_call_trampoline::<Store>(_114, move _115, _23, move _117, move _119) -> [return: bb62, unwind: bb187];
    }

    bb62: {
        _112 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _113) -> [return: bb63, unwind: bb187];
    }

    bb63: {
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb64, 1: bb65, otherwise: bb54];
    }

    bb64: {
        _124 = &(*_85);
        _123 = Len((*_124));
        _125 = _87;
        switchInt(move _125) -> [0: bb67, otherwise: bb72];
    }

    bb65: {
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _122) -> [return: bb66, unwind: bb187];
    }

    bb66: {
        drop(_84) -> [return: bb141, unwind: bb189];
    }

    bb67: {
        _126 = Gt(_123, const 0_usize);
        switchInt(move _126) -> [0: bb72, otherwise: bb68];
    }

    bb68: {
        _129 = &_26;
        _128 = move _129 as &[i128] (PointerCoercion(Unsize));
        _127 = core::slice::<impl [i128]>::as_ptr(move _128) -> [return: bb69, unwind: bb187];
    }

    bb69: {
        _133 = &mut _84;
        _132 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _133) -> [return: bb70, unwind: bb187];
    }

    bb70: {
        _134 = const 0_usize;
        _135 = Len((*_132));
        _136 = Lt(_134, _135);
        assert(move _136, "index out of bounds: the length is {} but the index is {}", move _135, _134) -> [success: bb71, unwind: bb187];
    }

    bb71: {
        _131 = &mut (*_132)[_134];
        _130 = &raw mut (*_131);
        _137 = copy_nonoverlapping::<i128>(_127, _130, _123) -> [return: bb208, unwind: bb187];
    }

    bb72: {
        _249 = const false;
        _139 = move _84;
        _138 = <Rets as WasmTypeList>::from_array(move _139) -> [return: bb73, unwind: bb187];
    }

    bb73: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _138);
        _249 = const false;
        goto -> bb142;
    }

    bb74: {
        _142 = discriminant(_140);
        switchInt(move _142) -> [0: bb76, 1: bb75, otherwise: bb54];
    }

    bb75: {
        _268 = const false;
        _158 = move _2;
        _157 = <A1 as FromToNativeWasmType>::to_native(move _158) -> [return: bb84, unwind: bb189];
    }

    bb76: {
        _149 = &_1;
        _268 = const false;
        _267 = const false;
        _266 = const false;
        _265 = const false;
        _264 = const false;
        _263 = const false;
        _262 = const false;
        _261 = const false;
        _260 = const false;
        _259 = const false;
        _258 = const false;
        _257 = const false;
        _256 = const false;
        _255 = const false;
        _254 = const false;
        _253 = const false;
        _252 = const false;
        _251 = const false;
        _250 = const false;
        _148 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _149, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20 };
        _147 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _148);
        _146 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _147) -> [return: bb77, unwind: bb189];
    }

    bb77: {
        _145 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _146, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb78, unwind: bb189];
    }

    bb78: {
        _144 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _145) -> [return: bb79, unwind: bb189];
    }

    bb79: {
        _150 = discriminant(_144);
        switchInt(move _150) -> [0: bb80, 1: bb81, otherwise: bb54];
    }

    bb80: {
        _152 = move ((_144 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _248 = const true;
        _143 = move _152;
        _248 = const false;
        _154 = move _143;
        _153 = <Rets as WasmTypeList>::from_c_struct(move _154) -> [return: bb83, unwind: bb185];
    }

    bb81: {
        _151 = move ((_144 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _151) -> [return: bb82, unwind: bb189];
    }

    bb82: {
        _248 = const false;
        goto -> bb142;
    }

    bb83: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _153);
        _248 = const false;
        goto -> bb142;
    }

    bb84: {
        _156 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _157) -> [return: bb85, unwind: bb189];
    }

    bb85: {
        _267 = const false;
        _161 = move _3;
        _160 = <A2 as FromToNativeWasmType>::to_native(move _161) -> [return: bb86, unwind: bb162];
    }

    bb86: {
        _159 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _160) -> [return: bb87, unwind: bb162];
    }

    bb87: {
        _266 = const false;
        _164 = move _4;
        _163 = <A3 as FromToNativeWasmType>::to_native(move _164) -> [return: bb88, unwind: bb161];
    }

    bb88: {
        _162 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _163) -> [return: bb89, unwind: bb161];
    }

    bb89: {
        _265 = const false;
        _167 = move _5;
        _166 = <A4 as FromToNativeWasmType>::to_native(move _167) -> [return: bb90, unwind: bb160];
    }

    bb90: {
        _165 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _166) -> [return: bb91, unwind: bb160];
    }

    bb91: {
        _264 = const false;
        _170 = move _6;
        _169 = <A5 as FromToNativeWasmType>::to_native(move _170) -> [return: bb92, unwind: bb159];
    }

    bb92: {
        _168 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _169) -> [return: bb93, unwind: bb159];
    }

    bb93: {
        _263 = const false;
        _173 = move _7;
        _172 = <A6 as FromToNativeWasmType>::to_native(move _173) -> [return: bb94, unwind: bb158];
    }

    bb94: {
        _171 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _172) -> [return: bb95, unwind: bb158];
    }

    bb95: {
        _262 = const false;
        _176 = move _8;
        _175 = <A7 as FromToNativeWasmType>::to_native(move _176) -> [return: bb96, unwind: bb157];
    }

    bb96: {
        _174 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _175) -> [return: bb97, unwind: bb157];
    }

    bb97: {
        _261 = const false;
        _179 = move _9;
        _178 = <A8 as FromToNativeWasmType>::to_native(move _179) -> [return: bb98, unwind: bb156];
    }

    bb98: {
        _177 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _178) -> [return: bb99, unwind: bb156];
    }

    bb99: {
        _260 = const false;
        _182 = move _10;
        _181 = <A9 as FromToNativeWasmType>::to_native(move _182) -> [return: bb100, unwind: bb155];
    }

    bb100: {
        _180 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _181) -> [return: bb101, unwind: bb155];
    }

    bb101: {
        _259 = const false;
        _185 = move _11;
        _184 = <A10 as FromToNativeWasmType>::to_native(move _185) -> [return: bb102, unwind: bb154];
    }

    bb102: {
        _183 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _184) -> [return: bb103, unwind: bb154];
    }

    bb103: {
        _258 = const false;
        _188 = move _12;
        _187 = <A11 as FromToNativeWasmType>::to_native(move _188) -> [return: bb104, unwind: bb153];
    }

    bb104: {
        _186 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _187) -> [return: bb105, unwind: bb153];
    }

    bb105: {
        _257 = const false;
        _191 = move _13;
        _190 = <A12 as FromToNativeWasmType>::to_native(move _191) -> [return: bb106, unwind: bb152];
    }

    bb106: {
        _189 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _190) -> [return: bb107, unwind: bb152];
    }

    bb107: {
        _256 = const false;
        _194 = move _14;
        _193 = <A13 as FromToNativeWasmType>::to_native(move _194) -> [return: bb108, unwind: bb151];
    }

    bb108: {
        _192 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _193) -> [return: bb109, unwind: bb151];
    }

    bb109: {
        _255 = const false;
        _197 = move _15;
        _196 = <A14 as FromToNativeWasmType>::to_native(move _197) -> [return: bb110, unwind: bb150];
    }

    bb110: {
        _195 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _196) -> [return: bb111, unwind: bb150];
    }

    bb111: {
        _254 = const false;
        _200 = move _16;
        _199 = <A15 as FromToNativeWasmType>::to_native(move _200) -> [return: bb112, unwind: bb149];
    }

    bb112: {
        _198 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _199) -> [return: bb113, unwind: bb149];
    }

    bb113: {
        _253 = const false;
        _203 = move _17;
        _202 = <A16 as FromToNativeWasmType>::to_native(move _203) -> [return: bb114, unwind: bb148];
    }

    bb114: {
        _201 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _202) -> [return: bb115, unwind: bb148];
    }

    bb115: {
        _252 = const false;
        _206 = move _18;
        _205 = <A17 as FromToNativeWasmType>::to_native(move _206) -> [return: bb116, unwind: bb147];
    }

    bb116: {
        _204 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _205) -> [return: bb117, unwind: bb147];
    }

    bb117: {
        _251 = const false;
        _209 = move _19;
        _208 = <A18 as FromToNativeWasmType>::to_native(move _209) -> [return: bb118, unwind: bb146];
    }

    bb118: {
        _207 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _208) -> [return: bb119, unwind: bb146];
    }

    bb119: {
        _250 = const false;
        _212 = move _20;
        _211 = <A19 as FromToNativeWasmType>::to_native(move _212) -> [return: bb120, unwind: bb145];
    }

    bb120: {
        _210 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _211) -> [return: bb121, unwind: bb145];
    }

    bb121: {
        _155 = [move _156, move _159, move _162, move _165, move _168, move _171, move _174, move _177, move _180, move _183, move _186, move _189, move _192, move _195, move _198, move _201, move _204, move _207, move _210];
        _217 = _1;
        _216 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>::vmctx(move _217) -> [return: bb122, unwind: bb144];
    }

    bb122: {
        _215 = (_216.1: *mut std::ffi::c_void);
        _214 = move _215 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _220 = &((*_214).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _222 = &_155;
        _221 = _222 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _219 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _220, move _221) -> [return: bb123, unwind: bb144];
    }

    bb123: {
        _218 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _219) -> [return: bb124, unwind: bb144];
    }

    bb124: {
        _223 = discriminant(_218);
        switchInt(move _223) -> [0: bb125, 1: bb126, otherwise: bb54];
    }

    bb125: {
        _225 = move ((_218 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _213 = move _225;
        _226 = <Rets as WasmTypeList>::empty_array() -> [return: bb128, unwind: bb143];
    }

    bb126: {
        _224 = move ((_218 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _224) -> [return: bb127, unwind: bb144];
    }

    bb127: {
        drop(_155) -> [return: bb142, unwind: bb189];
    }

    bb128: {
        _247 = const true;
        _230 = &mut _226;
        _229 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _230) -> [return: bb129, unwind: bb183];
    }

    bb129: {
        _228 = &raw mut (*_229);
        _227 = move _228 as *mut i128 (PtrToPtr);
        _235 = &_213;
        _234 = <Vec<Value<function::Function>> as Deref>::deref(move _235) -> [return: bb130, unwind: bb183];
    }

    bb130: {
        _233 = core::slice::<impl [Value<function::Function>]>::iter(_234) -> [return: bb131, unwind: bb183];
    }

    bb131: {
        _232 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _233) -> [return: bb132, unwind: bb183];
    }

    bb132: {
        _231 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _232) -> [return: bb133, unwind: bb183];
    }

    bb133: {
        _236 = move _231;
        goto -> bb134;
    }

    bb134: {
        _238 = &mut _236;
        _237 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_238) -> [return: bb135, unwind: bb183];
    }

    bb135: {
        _239 = discriminant(_237);
        switchInt(move _239) -> [0: bb137, 1: bb136, otherwise: bb54];
    }

    bb136: {
        _240 = (((_237 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _241 = (((_237 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _243 = std::ptr::mut_ptr::<impl *mut i128>::add(_227, _240) -> [return: bb138, unwind: bb183];
    }

    bb137: {
        _247 = const false;
        _245 = move _226;
        _244 = <Rets as WasmTypeList>::from_array(move _245) -> [return: bb139, unwind: bb183];
    }

    bb138: {
        _242 = Value::<function::Function>::write_value_to(_241, move _243) -> [return: bb209, unwind: bb183];
    }

    bb139: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _244);
        _247 = const false;
        drop(_213) -> [return: bb140, unwind: bb144];
    }

    bb140: {
        drop(_155) -> [return: bb142, unwind: bb189];
    }

    bb141: {
        _249 = const false;
        goto -> bb142;
    }

    bb142: {
        return;
    }

    bb143 (cleanup): {
        drop(_213) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_155) -> [return: bb189, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_207) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        drop(_204) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb147 (cleanup): {
        drop(_201) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        drop(_198) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_195) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_192) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_189) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_186) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_183) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_180) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_177) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_174) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        drop(_171) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_168) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        drop(_165) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        drop(_162) -> [return: bb161, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        drop(_159) -> [return: bb162, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        drop(_156) -> [return: bb189, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        switchInt(_251) -> [0: bb164, otherwise: bb190];
    }

    bb164 (cleanup): {
        switchInt(_252) -> [0: bb165, otherwise: bb191];
    }

    bb165 (cleanup): {
        switchInt(_253) -> [0: bb166, otherwise: bb192];
    }

    bb166 (cleanup): {
        switchInt(_254) -> [0: bb167, otherwise: bb193];
    }

    bb167 (cleanup): {
        switchInt(_255) -> [0: bb168, otherwise: bb194];
    }

    bb168 (cleanup): {
        switchInt(_256) -> [0: bb169, otherwise: bb195];
    }

    bb169 (cleanup): {
        switchInt(_257) -> [0: bb170, otherwise: bb196];
    }

    bb170 (cleanup): {
        switchInt(_258) -> [0: bb171, otherwise: bb197];
    }

    bb171 (cleanup): {
        switchInt(_259) -> [0: bb172, otherwise: bb198];
    }

    bb172 (cleanup): {
        switchInt(_260) -> [0: bb173, otherwise: bb199];
    }

    bb173 (cleanup): {
        switchInt(_261) -> [0: bb174, otherwise: bb200];
    }

    bb174 (cleanup): {
        switchInt(_262) -> [0: bb175, otherwise: bb201];
    }

    bb175 (cleanup): {
        switchInt(_263) -> [0: bb176, otherwise: bb202];
    }

    bb176 (cleanup): {
        switchInt(_264) -> [0: bb177, otherwise: bb203];
    }

    bb177 (cleanup): {
        switchInt(_265) -> [0: bb178, otherwise: bb204];
    }

    bb178 (cleanup): {
        switchInt(_266) -> [0: bb179, otherwise: bb205];
    }

    bb179 (cleanup): {
        switchInt(_267) -> [0: bb180, otherwise: bb206];
    }

    bb180 (cleanup): {
        switchInt(_268) -> [0: bb181, otherwise: bb207];
    }

    bb181 (cleanup): {
        resume;
    }

    bb182 (cleanup): {
        drop(_226) -> [return: bb143, unwind terminate(cleanup)];
    }

    bb183 (cleanup): {
        switchInt(_247) -> [0: bb143, otherwise: bb182];
    }

    bb184 (cleanup): {
        drop(_143) -> [return: bb189, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        switchInt(_248) -> [0: bb189, otherwise: bb184];
    }

    bb186 (cleanup): {
        drop(_84) -> [return: bb189, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        switchInt(_249) -> [0: bb189, otherwise: bb186];
    }

    bb188 (cleanup): {
        drop(_20) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        switchInt(_250) -> [0: bb163, otherwise: bb188];
    }

    bb190 (cleanup): {
        drop(_19) -> [return: bb164, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        drop(_18) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb192 (cleanup): {
        drop(_17) -> [return: bb166, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        drop(_16) -> [return: bb167, unwind terminate(cleanup)];
    }

    bb194 (cleanup): {
        drop(_15) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        drop(_14) -> [return: bb169, unwind terminate(cleanup)];
    }

    bb196 (cleanup): {
        drop(_13) -> [return: bb170, unwind terminate(cleanup)];
    }

    bb197 (cleanup): {
        drop(_12) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb198 (cleanup): {
        drop(_11) -> [return: bb172, unwind terminate(cleanup)];
    }

    bb199 (cleanup): {
        drop(_10) -> [return: bb173, unwind terminate(cleanup)];
    }

    bb200 (cleanup): {
        drop(_9) -> [return: bb174, unwind terminate(cleanup)];
    }

    bb201 (cleanup): {
        drop(_8) -> [return: bb175, unwind terminate(cleanup)];
    }

    bb202 (cleanup): {
        drop(_7) -> [return: bb176, unwind terminate(cleanup)];
    }

    bb203 (cleanup): {
        drop(_6) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb204 (cleanup): {
        drop(_5) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb205 (cleanup): {
        drop(_4) -> [return: bb179, unwind terminate(cleanup)];
    }

    bb206 (cleanup): {
        drop(_3) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb207 (cleanup): {
        drop(_2) -> [return: bb181, unwind terminate(cleanup)];
    }

    bb208: {
        goto -> bb72;
    }

    bb209: {
        goto -> bb134;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    debug A9 => (_1.9: A9);
    debug A10 => (_1.10: A10);
    debug A11 => (_1.11: A11);
    debug A12 => (_1.12: A12);
    debug A13 => (_1.13: A13);
    debug A14 => (_1.14: A14);
    debug A15 => (_1.15: A15);
    debug A16 => (_1.16: A16);
    debug A17 => (_1.17: A17);
    debug A18 => (_1.18: A18);
    debug A19 => (_1.19: A19);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: A9;
    let mut _14: A10;
    let mut _15: A11;
    let mut _16: A12;
    let mut _17: A13;
    let mut _18: A14;
    let mut _19: A15;
    let mut _20: A16;
    let mut _21: A17;
    let mut _22: A18;
    let mut _23: A19;
    let mut _24: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>;
    let mut _25: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>;
    let mut _26: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>;
    let mut _27: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _28 = const false;
        _28 = const true;
        _29 = const true;
        _30 = const true;
        _31 = const true;
        _32 = const true;
        _33 = const true;
        _34 = const true;
        _35 = const true;
        _36 = const true;
        _37 = const true;
        _38 = const true;
        _39 = const true;
        _40 = const true;
        _41 = const true;
        _42 = const true;
        _43 = const true;
        _44 = const true;
        _45 = const true;
        _46 = const true;
        _24 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>);
        _25 = deref_copy (*_24);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>::address(_25) -> [return: bb1, unwind: bb42];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _26 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>);
        _27 = deref_copy (*_26);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>::vmctx(_27) -> [return: bb2, unwind: bb42];
    }

    bb2: {
        _46 = const false;
        _5 = move (_1.1: A1);
        _45 = const false;
        _6 = move (_1.2: A2);
        _44 = const false;
        _7 = move (_1.3: A3);
        _43 = const false;
        _8 = move (_1.4: A4);
        _42 = const false;
        _9 = move (_1.5: A5);
        _41 = const false;
        _10 = move (_1.6: A6);
        _40 = const false;
        _11 = move (_1.7: A7);
        _39 = const false;
        _12 = move (_1.8: A8);
        _38 = const false;
        _13 = move (_1.9: A9);
        _37 = const false;
        _14 = move (_1.10: A10);
        _36 = const false;
        _15 = move (_1.11: A11);
        _35 = const false;
        _16 = move (_1.12: A12);
        _34 = const false;
        _17 = move (_1.13: A13);
        _33 = const false;
        _18 = move (_1.14: A14);
        _32 = const false;
        _19 = move (_1.15: A15);
        _31 = const false;
        _20 = move (_1.16: A16);
        _30 = const false;
        _21 = move (_1.17: A17);
        _29 = const false;
        _22 = move (_1.18: A18);
        _28 = const false;
        _23 = move (_1.19: A19);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23) -> [return: bb3, unwind: bb42];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_28) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.19: A19)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_29) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.18: A18)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_30) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.17: A17)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_31) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.16: A16)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_32) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.15: A15)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_33) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.14: A14)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_34) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.13: A13)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_35) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.12: A12)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_36) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.11: A11)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_37) -> [0: bb21, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.10: A10)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_38) -> [0: bb23, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop((_1.9: A9)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_39) -> [0: bb25, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop((_1.8: A8)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_40) -> [0: bb27, otherwise: bb30];
    }

    bb30 (cleanup): {
        drop((_1.7: A7)) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_41) -> [0: bb29, otherwise: bb32];
    }

    bb32 (cleanup): {
        drop((_1.6: A6)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_42) -> [0: bb31, otherwise: bb34];
    }

    bb34 (cleanup): {
        drop((_1.5: A5)) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_43) -> [0: bb33, otherwise: bb36];
    }

    bb36 (cleanup): {
        drop((_1.4: A4)) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_44) -> [0: bb35, otherwise: bb38];
    }

    bb38 (cleanup): {
        drop((_1.3: A3)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_45) -> [0: bb37, otherwise: bb40];
    }

    bb40 (cleanup): {
        drop((_1.2: A2)) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop((_1.1: A1)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_46) -> [0: bb39, otherwise: bb41];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call(_1: &NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>, _2: A1, _3: A2, _4: A3, _5: A4, _6: A5, _7: A6, _8: A7, _9: A8, _10: A9, _11: A10, _12: A11, _13: A12, _14: A13, _15: A14, _16: A15, _17: A16, _18: A17, _19: A18, _20: A19, _21: A20) -> Result<Rets, RuntimeError> {
    debug self => _1;
    debug A1 => _2;
    debug A2 => _3;
    debug A3 => _4;
    debug A4 => _5;
    debug A5 => _6;
    debug A6 => _7;
    debug A7 => _8;
    debug A8 => _9;
    debug A9 => _10;
    debug A10 => _11;
    debug A11 => _12;
    debug A12 => _13;
    debug A13 => _14;
    debug A14 => _15;
    debug A15 => _16;
    debug A16 => _17;
    debug A17 => _18;
    debug A18 => _19;
    debug A19 => _20;
    debug A20 => _21;
    let mut _0: std::result::Result<Rets, wasmer_engine::RuntimeError>;
    let mut _22: bool;
    let mut _23: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>;
    let _24: unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128);
    let mut _25: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let _26: &str;
    let mut _28: i128;
    let mut _29: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _30: A1;
    let mut _31: i128;
    let mut _32: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _33: A2;
    let mut _34: i128;
    let mut _35: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _36: A3;
    let mut _37: i128;
    let mut _38: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _39: A4;
    let mut _40: i128;
    let mut _41: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _42: A5;
    let mut _43: i128;
    let mut _44: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _45: A6;
    let mut _46: i128;
    let mut _47: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _48: A7;
    let mut _49: i128;
    let mut _50: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _51: A8;
    let mut _52: i128;
    let mut _53: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _54: A9;
    let mut _55: i128;
    let mut _56: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _57: A10;
    let mut _58: i128;
    let mut _59: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _60: A11;
    let mut _61: i128;
    let mut _62: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _63: A12;
    let mut _64: i128;
    let mut _65: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _66: A13;
    let mut _67: i128;
    let mut _68: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _69: A14;
    let mut _70: i128;
    let mut _71: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _72: A15;
    let mut _73: i128;
    let mut _74: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _75: A16;
    let mut _76: i128;
    let mut _77: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _78: A17;
    let mut _79: i128;
    let mut _80: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _81: A18;
    let mut _82: i128;
    let mut _83: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _84: A19;
    let mut _85: i128;
    let mut _86: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _87: A20;
    let mut _90: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _93: &mut [i128];
    let mut _94: bool;
    let mut _95: usize;
    let mut _96: &[i128];
    let mut _97: &[i128; 20];
    let mut _98: usize;
    let mut _99: &[i128];
    let mut _100: &mut [i128];
    let mut _101: &mut [i128; 20];
    let mut _102: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _103: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _104: std::slice::Iter<'_, i128>;
    let mut _105: &[i128];
    let mut _106: &[i128; 20];
    let mut _108: std::option::Option<(usize, &i128)>;
    let mut _109: &mut std::iter::Enumerate<std::slice::Iter<'_, i128>>;
    let mut _110: isize;
    let mut _113: usize;
    let mut _114: bool;
    let mut _115: &mut [i128];
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::Trap>>;
    let mut _117: std::result::Result<(), wasmer_vm::Trap>;
    let _118: &store::Store;
    let mut _119: wasmer_vm::VMFunctionEnvironment;
    let mut _120: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>;
    let mut _121: *const wasmer_vm::VMFunctionBody;
    let mut _122: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>;
    let mut _123: *mut u8;
    let mut _124: *mut i128;
    let mut _125: isize;
    let mut _128: &[i128];
    let mut _129: bool;
    let mut _130: bool;
    let mut _132: &[i128];
    let mut _133: &[i128; 20];
    let mut _135: &mut i128;
    let mut _136: &mut [i128];
    let mut _137: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let _138: usize;
    let mut _139: usize;
    let mut _140: bool;
    let _141: ();
    let mut _142: Rets;
    let mut _143: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _144: wasmer_vm::VMFunctionKind;
    let mut _145: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>;
    let mut _146: isize;
    let _147: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _148: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, <Rets as externals::function::inner::WasmTypeList>::CStruct>;
    let mut _149: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, wasmer_engine::RuntimeError>;
    let mut _150: std::result::Result<<Rets as externals::function::inner::WasmTypeList>::CStruct, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _151: std::panic::AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>;
    let mut _152: {closure@lib/api/src/native.rs:194:73: 194:75};
    let mut _153: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>;
    let mut _154: isize;
    let _155: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
    let _156: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _157: Rets;
    let mut _158: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let _159: [wasmer_types::Value<externals::function::Function>; 20];
    let mut _160: wasmer_types::Value<externals::function::Function>;
    let mut _161: <A1 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _162: A1;
    let mut _163: wasmer_types::Value<externals::function::Function>;
    let mut _164: <A2 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _165: A2;
    let mut _166: wasmer_types::Value<externals::function::Function>;
    let mut _167: <A3 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _168: A3;
    let mut _169: wasmer_types::Value<externals::function::Function>;
    let mut _170: <A4 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _171: A4;
    let mut _172: wasmer_types::Value<externals::function::Function>;
    let mut _173: <A5 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _174: A5;
    let mut _175: wasmer_types::Value<externals::function::Function>;
    let mut _176: <A6 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _177: A6;
    let mut _178: wasmer_types::Value<externals::function::Function>;
    let mut _179: <A7 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _180: A7;
    let mut _181: wasmer_types::Value<externals::function::Function>;
    let mut _182: <A8 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _183: A8;
    let mut _184: wasmer_types::Value<externals::function::Function>;
    let mut _185: <A9 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _186: A9;
    let mut _187: wasmer_types::Value<externals::function::Function>;
    let mut _188: <A10 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _189: A10;
    let mut _190: wasmer_types::Value<externals::function::Function>;
    let mut _191: <A11 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _192: A11;
    let mut _193: wasmer_types::Value<externals::function::Function>;
    let mut _194: <A12 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _195: A12;
    let mut _196: wasmer_types::Value<externals::function::Function>;
    let mut _197: <A13 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _198: A13;
    let mut _199: wasmer_types::Value<externals::function::Function>;
    let mut _200: <A14 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _201: A14;
    let mut _202: wasmer_types::Value<externals::function::Function>;
    let mut _203: <A15 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _204: A15;
    let mut _205: wasmer_types::Value<externals::function::Function>;
    let mut _206: <A16 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _207: A16;
    let mut _208: wasmer_types::Value<externals::function::Function>;
    let mut _209: <A17 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _210: A17;
    let mut _211: wasmer_types::Value<externals::function::Function>;
    let mut _212: <A18 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _213: A18;
    let mut _214: wasmer_types::Value<externals::function::Function>;
    let mut _215: <A19 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _216: A19;
    let mut _217: wasmer_types::Value<externals::function::Function>;
    let mut _218: <A20 as externals::function::inner::FromToNativeWasmType>::Native;
    let mut _219: A20;
    let mut _222: *mut std::ffi::c_void;
    let mut _223: wasmer_vm::VMFunctionEnvironment;
    let mut _224: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>;
    let mut _225: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>, std::vec::Vec<wasmer_types::Value<externals::function::Function>>>;
    let mut _226: std::result::Result<std::vec::Vec<wasmer_types::Value<externals::function::Function>>, wasmer_engine::RuntimeError>;
    let mut _227: &externals::function::DynamicFunction<std::ffi::c_void>;
    let mut _228: &[wasmer_types::Value<externals::function::Function>];
    let _229: &[wasmer_types::Value<externals::function::Function>; 20];
    let mut _230: isize;
    let mut _235: *mut [i128];
    let mut _236: &mut [i128];
    let mut _237: &mut <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _238: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _239: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _240: std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>;
    let _241: &[wasmer_types::Value<externals::function::Function>];
    let mut _242: &std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
    let mut _244: std::option::Option<(usize, &wasmer_types::Value<externals::function::Function>)>;
    let mut _245: &mut std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
    let mut _246: isize;
    let _249: ();
    let mut _250: *mut i128;
    let mut _251: Rets;
    let mut _252: <Rets as externals::function::inner::WasmTypeList>::Array;
    let mut _253: &i128;
    let mut _254: bool;
    let mut _255: bool;
    let mut _256: bool;
    let mut _257: bool;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: bool;
    let mut _261: bool;
    let mut _262: bool;
    let mut _263: bool;
    let mut _264: bool;
    let mut _265: bool;
    let mut _266: bool;
    let mut _267: bool;
    let mut _268: bool;
    let mut _269: bool;
    let mut _270: bool;
    let mut _271: bool;
    let mut _272: bool;
    let mut _273: bool;
    let mut _274: bool;
    let mut _275: bool;
    let mut _276: bool;
    scope 1 {
        debug trampoline => _24;
        let mut _27: [i128; 20];
        scope 2 {
            debug params_list => _27;
            let mut _88: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 3 {
                debug rets_list_array => _88;
                let _89: &mut [i128];
                scope 4 {
                    debug rets_list => _89;
                    let _91: bool;
                    scope 5 {
                        debug using_rets_array => _91;
                        let _92: &mut [i128];
                        let mut _107: std::iter::Enumerate<std::slice::Iter<'_, i128>>;
                        scope 6 {
                            debug args_rets => _92;
                            let _126: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>;
                            let _127: usize;
                            scope 9 {
                            }
                            scope 10 {
                                debug residual => _126;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug val => const ();
                                scope 13 {
                                }
                            }
                            scope 14 {
                                debug num_rets => _127;
                                let _131: *const i128;
                                scope 15 {
                                    debug src_pointer => _131;
                                    let _134: *mut i128;
                                    scope 16 {
                                        debug rets_list => _134;
                                        scope 17 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 7 {
                            debug iter => _107;
                            let _111: usize;
                            let _112: i128;
                            scope 8 {
                                debug i => _111;
                                debug arg => _112;
                            }
                        }
                    }
                }
            }
        }
    }
    scope 18 {
        debug results => _147;
    }
    scope 19 {
        debug residual => _155;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _156;
        scope 22 {
        }
    }
    scope 23 {
        debug params_list => _159;
        let _220: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
        scope 24 {
            debug results => _220;
            let mut _233: <Rets as externals::function::inner::WasmTypeList>::Array;
            scope 31 {
                debug rets_list_array => _233;
                let _234: *mut i128;
                scope 32 {
                    debug mut_rets => _234;
                    let mut _243: std::iter::Enumerate<std::slice::Iter<'_, wasmer_types::Value<externals::function::Function>>>;
                    scope 33 {
                        debug iter => _243;
                        let _247: usize;
                        let _248: &wasmer_types::Value<externals::function::Function>;
                        scope 34 {
                            debug i => _247;
                            debug ret => _248;
                            scope 35 {
                            }
                        }
                    }
                }
            }
        }
        scope 25 {
            let _221: *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>>;
            scope 26 {
                debug ctx => _221;
                let _231: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>;
                let _232: std::vec::Vec<wasmer_types::Value<externals::function::Function>>;
                scope 27 {
                    debug residual => _231;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug val => _232;
                    scope 30 {
                    }
                }
            }
        }
    }

    bb0: {
        _276 = const false;
        _275 = const false;
        _274 = const false;
        _273 = const false;
        _272 = const false;
        _271 = const false;
        _270 = const false;
        _269 = const false;
        _268 = const false;
        _267 = const false;
        _266 = const false;
        _265 = const false;
        _264 = const false;
        _263 = const false;
        _262 = const false;
        _261 = const false;
        _260 = const false;
        _259 = const false;
        _258 = const false;
        _257 = const false;
        _256 = const false;
        _255 = const false;
        _254 = const false;
        _276 = const true;
        _275 = const true;
        _274 = const true;
        _273 = const true;
        _272 = const true;
        _271 = const true;
        _270 = const true;
        _269 = const true;
        _268 = const true;
        _267 = const true;
        _266 = const true;
        _265 = const true;
        _264 = const true;
        _263 = const true;
        _262 = const true;
        _261 = const true;
        _260 = const true;
        _259 = const true;
        _258 = const true;
        _257 = const true;
        _23 = _1;
        _22 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>::is_host(move _23) -> [return: bb1, unwind: bb195];
    }

    bb1: {
        switchInt(move _22) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _145 = _1;
        _144 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>::arg_kind(move _145) -> [return: bb76, unwind: bb195];
    }

    bb3: {
        _25 = ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).4: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>);
        _26 = const "Call trampoline not found in wasm function";
        _24 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::expect(move _25, _26) -> [return: bb4, unwind: bb195];
    }

    bb4: {
        _276 = const false;
        _30 = move _2;
        _29 = <A1 as FromToNativeWasmType>::to_native(move _30) -> [return: bb5, unwind: bb195];
    }

    bb5: {
        _28 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _29) -> [return: bb6, unwind: bb195];
    }

    bb6: {
        _275 = const false;
        _33 = move _3;
        _32 = <A2 as FromToNativeWasmType>::to_native(move _33) -> [return: bb7, unwind: bb195];
    }

    bb7: {
        _31 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _32) -> [return: bb8, unwind: bb195];
    }

    bb8: {
        _274 = const false;
        _36 = move _4;
        _35 = <A3 as FromToNativeWasmType>::to_native(move _36) -> [return: bb9, unwind: bb195];
    }

    bb9: {
        _34 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _35) -> [return: bb10, unwind: bb195];
    }

    bb10: {
        _273 = const false;
        _39 = move _5;
        _38 = <A4 as FromToNativeWasmType>::to_native(move _39) -> [return: bb11, unwind: bb195];
    }

    bb11: {
        _37 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _38) -> [return: bb12, unwind: bb195];
    }

    bb12: {
        _272 = const false;
        _42 = move _6;
        _41 = <A5 as FromToNativeWasmType>::to_native(move _42) -> [return: bb13, unwind: bb195];
    }

    bb13: {
        _40 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _41) -> [return: bb14, unwind: bb195];
    }

    bb14: {
        _271 = const false;
        _45 = move _7;
        _44 = <A6 as FromToNativeWasmType>::to_native(move _45) -> [return: bb15, unwind: bb195];
    }

    bb15: {
        _43 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _44) -> [return: bb16, unwind: bb195];
    }

    bb16: {
        _270 = const false;
        _48 = move _8;
        _47 = <A7 as FromToNativeWasmType>::to_native(move _48) -> [return: bb17, unwind: bb195];
    }

    bb17: {
        _46 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _47) -> [return: bb18, unwind: bb195];
    }

    bb18: {
        _269 = const false;
        _51 = move _9;
        _50 = <A8 as FromToNativeWasmType>::to_native(move _51) -> [return: bb19, unwind: bb195];
    }

    bb19: {
        _49 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _50) -> [return: bb20, unwind: bb195];
    }

    bb20: {
        _268 = const false;
        _54 = move _10;
        _53 = <A9 as FromToNativeWasmType>::to_native(move _54) -> [return: bb21, unwind: bb195];
    }

    bb21: {
        _52 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _53) -> [return: bb22, unwind: bb195];
    }

    bb22: {
        _267 = const false;
        _57 = move _11;
        _56 = <A10 as FromToNativeWasmType>::to_native(move _57) -> [return: bb23, unwind: bb195];
    }

    bb23: {
        _55 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _56) -> [return: bb24, unwind: bb195];
    }

    bb24: {
        _266 = const false;
        _60 = move _12;
        _59 = <A11 as FromToNativeWasmType>::to_native(move _60) -> [return: bb25, unwind: bb195];
    }

    bb25: {
        _58 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _59) -> [return: bb26, unwind: bb195];
    }

    bb26: {
        _265 = const false;
        _63 = move _13;
        _62 = <A12 as FromToNativeWasmType>::to_native(move _63) -> [return: bb27, unwind: bb195];
    }

    bb27: {
        _61 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _62) -> [return: bb28, unwind: bb195];
    }

    bb28: {
        _264 = const false;
        _66 = move _14;
        _65 = <A13 as FromToNativeWasmType>::to_native(move _66) -> [return: bb29, unwind: bb195];
    }

    bb29: {
        _64 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _65) -> [return: bb30, unwind: bb195];
    }

    bb30: {
        _263 = const false;
        _69 = move _15;
        _68 = <A14 as FromToNativeWasmType>::to_native(move _69) -> [return: bb31, unwind: bb195];
    }

    bb31: {
        _67 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _68) -> [return: bb32, unwind: bb195];
    }

    bb32: {
        _262 = const false;
        _72 = move _16;
        _71 = <A15 as FromToNativeWasmType>::to_native(move _72) -> [return: bb33, unwind: bb195];
    }

    bb33: {
        _70 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _71) -> [return: bb34, unwind: bb195];
    }

    bb34: {
        _261 = const false;
        _75 = move _17;
        _74 = <A16 as FromToNativeWasmType>::to_native(move _75) -> [return: bb35, unwind: bb195];
    }

    bb35: {
        _73 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _74) -> [return: bb36, unwind: bb195];
    }

    bb36: {
        _260 = const false;
        _78 = move _18;
        _77 = <A17 as FromToNativeWasmType>::to_native(move _78) -> [return: bb37, unwind: bb195];
    }

    bb37: {
        _76 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _77) -> [return: bb38, unwind: bb195];
    }

    bb38: {
        _259 = const false;
        _81 = move _19;
        _80 = <A18 as FromToNativeWasmType>::to_native(move _81) -> [return: bb39, unwind: bb195];
    }

    bb39: {
        _79 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _80) -> [return: bb40, unwind: bb195];
    }

    bb40: {
        _258 = const false;
        _84 = move _20;
        _83 = <A19 as FromToNativeWasmType>::to_native(move _84) -> [return: bb41, unwind: bb195];
    }

    bb41: {
        _82 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _83) -> [return: bb42, unwind: bb195];
    }

    bb42: {
        _257 = const false;
        _87 = move _21;
        _86 = <A20 as FromToNativeWasmType>::to_native(move _87) -> [return: bb43, unwind: bb195];
    }

    bb43: {
        _85 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::to_binary(move _86) -> [return: bb44, unwind: bb195];
    }

    bb44: {
        _27 = [move _28, move _31, move _34, move _37, move _40, move _43, move _46, move _49, move _52, move _55, move _58, move _61, move _64, move _67, move _70, move _73, move _76, move _79, move _82, move _85];
        _88 = <Rets as WasmTypeList>::empty_array() -> [return: bb45, unwind: bb195];
    }

    bb45: {
        _256 = const true;
        _90 = &mut _88;
        _89 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _90) -> [return: bb46, unwind: bb193];
    }

    bb46: {
        _97 = &_27;
        _96 = move _97 as &[i128] (PointerCoercion(Unsize));
        _95 = Len((*_96));
        _99 = &(*_89);
        _98 = Len((*_99));
        _94 = Gt(move _95, move _98);
        switchInt(move _94) -> [0: bb49, otherwise: bb47];
    }

    bb47: {
        _91 = const false;
        _101 = &mut _27;
        _100 = <[i128; 20] as AsMut<[i128]>>::as_mut(move _101) -> [return: bb48, unwind: bb193];
    }

    bb48: {
        _93 = _100;
        goto -> bb60;
    }

    bb49: {
        _91 = const true;
        _106 = &_27;
        _105 = move _106 as &[i128] (PointerCoercion(Unsize));
        _104 = core::slice::<impl [i128]>::iter(move _105) -> [return: bb50, unwind: bb193];
    }

    bb50: {
        _103 = <std::slice::Iter<'_, i128> as Iterator>::enumerate(move _104) -> [return: bb51, unwind: bb193];
    }

    bb51: {
        _102 = <Enumerate<std::slice::Iter<'_, i128>> as IntoIterator>::into_iter(move _103) -> [return: bb52, unwind: bb193];
    }

    bb52: {
        _107 = move _102;
        goto -> bb53;
    }

    bb53: {
        _109 = &mut _107;
        _108 = <Enumerate<std::slice::Iter<'_, i128>> as Iterator>::next(_109) -> [return: bb54, unwind: bb193];
    }

    bb54: {
        _110 = discriminant(_108);
        switchInt(move _110) -> [0: bb57, 1: bb55, otherwise: bb56];
    }

    bb55: {
        _253 = deref_copy (((_108 as Some).0: (usize, &i128)).1: &i128);
        _112 = (*_253);
        _111 = (((_108 as Some).0: (usize, &i128)).0: usize);
        _113 = Len((*_89));
        _114 = Lt(_111, _113);
        assert(move _114, "index out of bounds: the length is {} but the index is {}", move _113, _111) -> [success: bb58, unwind: bb193];
    }

    bb56: {
        unreachable;
    }

    bb57: {
        _115 = <[i128] as AsMut<[i128]>>::as_mut(_89) -> [return: bb59, unwind: bb193];
    }

    bb58: {
        (*_89)[_111] = _112;
        goto -> bb53;
    }

    bb59: {
        _93 = _115;
        goto -> bb60;
    }

    bb60: {
        _92 = _93;
        _118 = &((*_1).0: store::Store);
        _120 = _1;
        _119 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>::vmctx(move _120) -> [return: bb61, unwind: bb193];
    }

    bb61: {
        _122 = _1;
        _121 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>::address(move _122) -> [return: bb62, unwind: bb193];
    }

    bb62: {
        _124 = core::slice::<impl [i128]>::as_mut_ptr(_92) -> [return: bb63, unwind: bb193];
    }

    bb63: {
        _123 = move _124 as *mut u8 (PtrToPtr);
        _117 = wasmer_call_trampoline::<Store>(_118, move _119, _24, move _121, move _123) -> [return: bb64, unwind: bb193];
    }

    bb64: {
        _116 = <Result<(), wasmer_vm::Trap> as std::ops::Try>::branch(move _117) -> [return: bb65, unwind: bb193];
    }

    bb65: {
        _125 = discriminant(_116);
        switchInt(move _125) -> [0: bb66, 1: bb67, otherwise: bb56];
    }

    bb66: {
        _128 = &(*_89);
        _127 = Len((*_128));
        _129 = _91;
        switchInt(move _129) -> [0: bb69, otherwise: bb74];
    }

    bb67: {
        _126 = move ((_116 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::Trap>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, wasmer_vm::Trap>>>::from_residual(move _126) -> [return: bb68, unwind: bb193];
    }

    bb68: {
        drop(_88) -> [return: bb145, unwind: bb195];
    }

    bb69: {
        _130 = Gt(_127, const 0_usize);
        switchInt(move _130) -> [0: bb74, otherwise: bb70];
    }

    bb70: {
        _133 = &_27;
        _132 = move _133 as &[i128] (PointerCoercion(Unsize));
        _131 = core::slice::<impl [i128]>::as_ptr(move _132) -> [return: bb71, unwind: bb193];
    }

    bb71: {
        _137 = &mut _88;
        _136 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _137) -> [return: bb72, unwind: bb193];
    }

    bb72: {
        _138 = const 0_usize;
        _139 = Len((*_136));
        _140 = Lt(_138, _139);
        assert(move _140, "index out of bounds: the length is {} but the index is {}", move _139, _138) -> [success: bb73, unwind: bb193];
    }

    bb73: {
        _135 = &mut (*_136)[_138];
        _134 = &raw mut (*_135);
        _141 = copy_nonoverlapping::<i128>(_131, _134, _127) -> [return: bb215, unwind: bb193];
    }

    bb74: {
        _256 = const false;
        _143 = move _88;
        _142 = <Rets as WasmTypeList>::from_array(move _143) -> [return: bb75, unwind: bb193];
    }

    bb75: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _142);
        _256 = const false;
        goto -> bb146;
    }

    bb76: {
        _146 = discriminant(_144);
        switchInt(move _146) -> [0: bb78, 1: bb77, otherwise: bb56];
    }

    bb77: {
        _276 = const false;
        _162 = move _2;
        _161 = <A1 as FromToNativeWasmType>::to_native(move _162) -> [return: bb86, unwind: bb195];
    }

    bb78: {
        _153 = &_1;
        _276 = const false;
        _275 = const false;
        _274 = const false;
        _273 = const false;
        _272 = const false;
        _271 = const false;
        _270 = const false;
        _269 = const false;
        _268 = const false;
        _267 = const false;
        _266 = const false;
        _265 = const false;
        _264 = const false;
        _263 = const false;
        _262 = const false;
        _261 = const false;
        _260 = const false;
        _259 = const false;
        _258 = const false;
        _257 = const false;
        _152 = {closure@lib/api/src/native.rs:194:73: 194:75} { self: move _153, A1: move _2, A2: move _3, A3: move _4, A4: move _5, A5: move _6, A6: move _7, A7: move _8, A8: move _9, A9: move _10, A10: move _11, A11: move _12, A12: move _13, A13: move _14, A14: move _15, A15: move _16, A16: move _17, A17: move _18, A18: move _19, A19: move _20, A20: move _21 };
        _151 = AssertUnwindSafe::<{closure@lib/api/src/native.rs:194:73: 194:75}>(move _152);
        _150 = catch_unwind::<AssertUnwindSafe<{closure@lib/api/src/native.rs:194:73: 194:75}>, <Rets as WasmTypeList>::CStruct>(move _151) -> [return: bb79, unwind: bb195];
    }

    bb79: {
        _149 = Result::<<Rets as WasmTypeList>::CStruct, Box<dyn Any + Send>>::map_err::<RuntimeError, {closure@lib/api/src/native.rs:198:41: 198:44}>(move _150, const ZeroSized: {closure@lib/api/src/native.rs:198:41: 198:44}) -> [return: bb80, unwind: bb195];
    }

    bb80: {
        _148 = <Result<<Rets as WasmTypeList>::CStruct, RuntimeError> as std::ops::Try>::branch(move _149) -> [return: bb81, unwind: bb195];
    }

    bb81: {
        _154 = discriminant(_148);
        switchInt(move _154) -> [0: bb82, 1: bb83, otherwise: bb56];
    }

    bb82: {
        _156 = move ((_148 as Continue).0: <Rets as externals::function::inner::WasmTypeList>::CStruct);
        _255 = const true;
        _147 = move _156;
        _255 = const false;
        _158 = move _147;
        _157 = <Rets as WasmTypeList>::from_c_struct(move _158) -> [return: bb85, unwind: bb191];
    }

    bb83: {
        _155 = move ((_148 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _155) -> [return: bb84, unwind: bb195];
    }

    bb84: {
        _255 = const false;
        goto -> bb146;
    }

    bb85: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _157);
        _255 = const false;
        goto -> bb146;
    }

    bb86: {
        _160 = <<A1 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _161) -> [return: bb87, unwind: bb195];
    }

    bb87: {
        _275 = const false;
        _165 = move _3;
        _164 = <A2 as FromToNativeWasmType>::to_native(move _165) -> [return: bb88, unwind: bb167];
    }

    bb88: {
        _163 = <<A2 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _164) -> [return: bb89, unwind: bb167];
    }

    bb89: {
        _274 = const false;
        _168 = move _4;
        _167 = <A3 as FromToNativeWasmType>::to_native(move _168) -> [return: bb90, unwind: bb166];
    }

    bb90: {
        _166 = <<A3 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _167) -> [return: bb91, unwind: bb166];
    }

    bb91: {
        _273 = const false;
        _171 = move _5;
        _170 = <A4 as FromToNativeWasmType>::to_native(move _171) -> [return: bb92, unwind: bb165];
    }

    bb92: {
        _169 = <<A4 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _170) -> [return: bb93, unwind: bb165];
    }

    bb93: {
        _272 = const false;
        _174 = move _6;
        _173 = <A5 as FromToNativeWasmType>::to_native(move _174) -> [return: bb94, unwind: bb164];
    }

    bb94: {
        _172 = <<A5 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _173) -> [return: bb95, unwind: bb164];
    }

    bb95: {
        _271 = const false;
        _177 = move _7;
        _176 = <A6 as FromToNativeWasmType>::to_native(move _177) -> [return: bb96, unwind: bb163];
    }

    bb96: {
        _175 = <<A6 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _176) -> [return: bb97, unwind: bb163];
    }

    bb97: {
        _270 = const false;
        _180 = move _8;
        _179 = <A7 as FromToNativeWasmType>::to_native(move _180) -> [return: bb98, unwind: bb162];
    }

    bb98: {
        _178 = <<A7 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _179) -> [return: bb99, unwind: bb162];
    }

    bb99: {
        _269 = const false;
        _183 = move _9;
        _182 = <A8 as FromToNativeWasmType>::to_native(move _183) -> [return: bb100, unwind: bb161];
    }

    bb100: {
        _181 = <<A8 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _182) -> [return: bb101, unwind: bb161];
    }

    bb101: {
        _268 = const false;
        _186 = move _10;
        _185 = <A9 as FromToNativeWasmType>::to_native(move _186) -> [return: bb102, unwind: bb160];
    }

    bb102: {
        _184 = <<A9 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _185) -> [return: bb103, unwind: bb160];
    }

    bb103: {
        _267 = const false;
        _189 = move _11;
        _188 = <A10 as FromToNativeWasmType>::to_native(move _189) -> [return: bb104, unwind: bb159];
    }

    bb104: {
        _187 = <<A10 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _188) -> [return: bb105, unwind: bb159];
    }

    bb105: {
        _266 = const false;
        _192 = move _12;
        _191 = <A11 as FromToNativeWasmType>::to_native(move _192) -> [return: bb106, unwind: bb158];
    }

    bb106: {
        _190 = <<A11 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _191) -> [return: bb107, unwind: bb158];
    }

    bb107: {
        _265 = const false;
        _195 = move _13;
        _194 = <A12 as FromToNativeWasmType>::to_native(move _195) -> [return: bb108, unwind: bb157];
    }

    bb108: {
        _193 = <<A12 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _194) -> [return: bb109, unwind: bb157];
    }

    bb109: {
        _264 = const false;
        _198 = move _14;
        _197 = <A13 as FromToNativeWasmType>::to_native(move _198) -> [return: bb110, unwind: bb156];
    }

    bb110: {
        _196 = <<A13 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _197) -> [return: bb111, unwind: bb156];
    }

    bb111: {
        _263 = const false;
        _201 = move _15;
        _200 = <A14 as FromToNativeWasmType>::to_native(move _201) -> [return: bb112, unwind: bb155];
    }

    bb112: {
        _199 = <<A14 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _200) -> [return: bb113, unwind: bb155];
    }

    bb113: {
        _262 = const false;
        _204 = move _16;
        _203 = <A15 as FromToNativeWasmType>::to_native(move _204) -> [return: bb114, unwind: bb154];
    }

    bb114: {
        _202 = <<A15 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _203) -> [return: bb115, unwind: bb154];
    }

    bb115: {
        _261 = const false;
        _207 = move _17;
        _206 = <A16 as FromToNativeWasmType>::to_native(move _207) -> [return: bb116, unwind: bb153];
    }

    bb116: {
        _205 = <<A16 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _206) -> [return: bb117, unwind: bb153];
    }

    bb117: {
        _260 = const false;
        _210 = move _18;
        _209 = <A17 as FromToNativeWasmType>::to_native(move _210) -> [return: bb118, unwind: bb152];
    }

    bb118: {
        _208 = <<A17 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _209) -> [return: bb119, unwind: bb152];
    }

    bb119: {
        _259 = const false;
        _213 = move _19;
        _212 = <A18 as FromToNativeWasmType>::to_native(move _213) -> [return: bb120, unwind: bb151];
    }

    bb120: {
        _211 = <<A18 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _212) -> [return: bb121, unwind: bb151];
    }

    bb121: {
        _258 = const false;
        _216 = move _20;
        _215 = <A19 as FromToNativeWasmType>::to_native(move _216) -> [return: bb122, unwind: bb150];
    }

    bb122: {
        _214 = <<A19 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _215) -> [return: bb123, unwind: bb150];
    }

    bb123: {
        _257 = const false;
        _219 = move _21;
        _218 = <A20 as FromToNativeWasmType>::to_native(move _219) -> [return: bb124, unwind: bb149];
    }

    bb124: {
        _217 = <<A20 as FromToNativeWasmType>::Native as NativeWasmType>::to_value::<function::Function>(move _218) -> [return: bb125, unwind: bb149];
    }

    bb125: {
        _159 = [move _160, move _163, move _166, move _169, move _172, move _175, move _178, move _181, move _184, move _187, move _190, move _193, move _196, move _199, move _202, move _205, move _208, move _211, move _214, move _217];
        _224 = _1;
        _223 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>::vmctx(move _224) -> [return: bb126, unwind: bb148];
    }

    bb126: {
        _222 = (_223.1: *mut std::ffi::c_void);
        _221 = move _222 as *mut wasmer_vm::VMDynamicFunctionContext<externals::function::DynamicFunction<std::ffi::c_void>> (PtrToPtr);
        _227 = &((*_221).1: externals::function::DynamicFunction<std::ffi::c_void>);
        _229 = &_159;
        _228 = _229 as &[wasmer_types::Value<externals::function::Function>] (PointerCoercion(Unsize));
        _226 = <DynamicFunction<c_void> as VMDynamicFunction>::call(move _227, move _228) -> [return: bb127, unwind: bb148];
    }

    bb127: {
        _225 = <Result<Vec<Value<function::Function>>, RuntimeError> as std::ops::Try>::branch(move _226) -> [return: bb128, unwind: bb148];
    }

    bb128: {
        _230 = discriminant(_225);
        switchInt(move _230) -> [0: bb129, 1: bb130, otherwise: bb56];
    }

    bb129: {
        _232 = move ((_225 as Continue).0: std::vec::Vec<wasmer_types::Value<externals::function::Function>>);
        _220 = move _232;
        _233 = <Rets as WasmTypeList>::empty_array() -> [return: bb132, unwind: bb147];
    }

    bb130: {
        _231 = move ((_225 as Break).0: std::result::Result<std::convert::Infallible, wasmer_engine::RuntimeError>);
        _0 = <Result<Rets, RuntimeError> as FromResidual<Result<Infallible, RuntimeError>>>::from_residual(move _231) -> [return: bb131, unwind: bb148];
    }

    bb131: {
        drop(_159) -> [return: bb146, unwind: bb195];
    }

    bb132: {
        _254 = const true;
        _237 = &mut _233;
        _236 = <<Rets as WasmTypeList>::Array as AsMut<[i128]>>::as_mut(move _237) -> [return: bb133, unwind: bb189];
    }

    bb133: {
        _235 = &raw mut (*_236);
        _234 = move _235 as *mut i128 (PtrToPtr);
        _242 = &_220;
        _241 = <Vec<Value<function::Function>> as Deref>::deref(move _242) -> [return: bb134, unwind: bb189];
    }

    bb134: {
        _240 = core::slice::<impl [Value<function::Function>]>::iter(_241) -> [return: bb135, unwind: bb189];
    }

    bb135: {
        _239 = <std::slice::Iter<'_, Value<function::Function>> as Iterator>::enumerate(move _240) -> [return: bb136, unwind: bb189];
    }

    bb136: {
        _238 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as IntoIterator>::into_iter(move _239) -> [return: bb137, unwind: bb189];
    }

    bb137: {
        _243 = move _238;
        goto -> bb138;
    }

    bb138: {
        _245 = &mut _243;
        _244 = <Enumerate<std::slice::Iter<'_, Value<function::Function>>> as Iterator>::next(_245) -> [return: bb139, unwind: bb189];
    }

    bb139: {
        _246 = discriminant(_244);
        switchInt(move _246) -> [0: bb141, 1: bb140, otherwise: bb56];
    }

    bb140: {
        _247 = (((_244 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).0: usize);
        _248 = (((_244 as Some).0: (usize, &wasmer_types::Value<externals::function::Function>)).1: &wasmer_types::Value<externals::function::Function>);
        _250 = std::ptr::mut_ptr::<impl *mut i128>::add(_234, _247) -> [return: bb142, unwind: bb189];
    }

    bb141: {
        _254 = const false;
        _252 = move _233;
        _251 = <Rets as WasmTypeList>::from_array(move _252) -> [return: bb143, unwind: bb189];
    }

    bb142: {
        _249 = Value::<function::Function>::write_value_to(_248, move _250) -> [return: bb216, unwind: bb189];
    }

    bb143: {
        _0 = Result::<Rets, RuntimeError>::Ok(move _251);
        _254 = const false;
        drop(_220) -> [return: bb144, unwind: bb148];
    }

    bb144: {
        drop(_159) -> [return: bb146, unwind: bb195];
    }

    bb145: {
        _256 = const false;
        goto -> bb146;
    }

    bb146: {
        return;
    }

    bb147 (cleanup): {
        drop(_220) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        drop(_159) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb149 (cleanup): {
        drop(_214) -> [return: bb150, unwind terminate(cleanup)];
    }

    bb150 (cleanup): {
        drop(_211) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        drop(_208) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        drop(_205) -> [return: bb153, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        drop(_202) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_199) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_196) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_193) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        drop(_190) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_187) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        drop(_184) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        drop(_181) -> [return: bb161, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        drop(_178) -> [return: bb162, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        drop(_175) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        drop(_172) -> [return: bb164, unwind terminate(cleanup)];
    }

    bb164 (cleanup): {
        drop(_169) -> [return: bb165, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        drop(_166) -> [return: bb166, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        drop(_163) -> [return: bb167, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        drop(_160) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        switchInt(_258) -> [0: bb169, otherwise: bb196];
    }

    bb169 (cleanup): {
        switchInt(_259) -> [0: bb170, otherwise: bb197];
    }

    bb170 (cleanup): {
        switchInt(_260) -> [0: bb171, otherwise: bb198];
    }

    bb171 (cleanup): {
        switchInt(_261) -> [0: bb172, otherwise: bb199];
    }

    bb172 (cleanup): {
        switchInt(_262) -> [0: bb173, otherwise: bb200];
    }

    bb173 (cleanup): {
        switchInt(_263) -> [0: bb174, otherwise: bb201];
    }

    bb174 (cleanup): {
        switchInt(_264) -> [0: bb175, otherwise: bb202];
    }

    bb175 (cleanup): {
        switchInt(_265) -> [0: bb176, otherwise: bb203];
    }

    bb176 (cleanup): {
        switchInt(_266) -> [0: bb177, otherwise: bb204];
    }

    bb177 (cleanup): {
        switchInt(_267) -> [0: bb178, otherwise: bb205];
    }

    bb178 (cleanup): {
        switchInt(_268) -> [0: bb179, otherwise: bb206];
    }

    bb179 (cleanup): {
        switchInt(_269) -> [0: bb180, otherwise: bb207];
    }

    bb180 (cleanup): {
        switchInt(_270) -> [0: bb181, otherwise: bb208];
    }

    bb181 (cleanup): {
        switchInt(_271) -> [0: bb182, otherwise: bb209];
    }

    bb182 (cleanup): {
        switchInt(_272) -> [0: bb183, otherwise: bb210];
    }

    bb183 (cleanup): {
        switchInt(_273) -> [0: bb184, otherwise: bb211];
    }

    bb184 (cleanup): {
        switchInt(_274) -> [0: bb185, otherwise: bb212];
    }

    bb185 (cleanup): {
        switchInt(_275) -> [0: bb186, otherwise: bb213];
    }

    bb186 (cleanup): {
        switchInt(_276) -> [0: bb187, otherwise: bb214];
    }

    bb187 (cleanup): {
        resume;
    }

    bb188 (cleanup): {
        drop(_233) -> [return: bb147, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        switchInt(_254) -> [0: bb147, otherwise: bb188];
    }

    bb190 (cleanup): {
        drop(_147) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        switchInt(_255) -> [0: bb195, otherwise: bb190];
    }

    bb192 (cleanup): {
        drop(_88) -> [return: bb195, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        switchInt(_256) -> [0: bb195, otherwise: bb192];
    }

    bb194 (cleanup): {
        drop(_21) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        switchInt(_257) -> [0: bb168, otherwise: bb194];
    }

    bb196 (cleanup): {
        drop(_20) -> [return: bb169, unwind terminate(cleanup)];
    }

    bb197 (cleanup): {
        drop(_19) -> [return: bb170, unwind terminate(cleanup)];
    }

    bb198 (cleanup): {
        drop(_18) -> [return: bb171, unwind terminate(cleanup)];
    }

    bb199 (cleanup): {
        drop(_17) -> [return: bb172, unwind terminate(cleanup)];
    }

    bb200 (cleanup): {
        drop(_16) -> [return: bb173, unwind terminate(cleanup)];
    }

    bb201 (cleanup): {
        drop(_15) -> [return: bb174, unwind terminate(cleanup)];
    }

    bb202 (cleanup): {
        drop(_14) -> [return: bb175, unwind terminate(cleanup)];
    }

    bb203 (cleanup): {
        drop(_13) -> [return: bb176, unwind terminate(cleanup)];
    }

    bb204 (cleanup): {
        drop(_12) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb205 (cleanup): {
        drop(_11) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb206 (cleanup): {
        drop(_10) -> [return: bb179, unwind terminate(cleanup)];
    }

    bb207 (cleanup): {
        drop(_9) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb208 (cleanup): {
        drop(_8) -> [return: bb181, unwind terminate(cleanup)];
    }

    bb209 (cleanup): {
        drop(_7) -> [return: bb182, unwind terminate(cleanup)];
    }

    bb210 (cleanup): {
        drop(_6) -> [return: bb183, unwind terminate(cleanup)];
    }

    bb211 (cleanup): {
        drop(_5) -> [return: bb184, unwind terminate(cleanup)];
    }

    bb212 (cleanup): {
        drop(_4) -> [return: bb185, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        drop(_3) -> [return: bb186, unwind terminate(cleanup)];
    }

    bb214 (cleanup): {
        drop(_2) -> [return: bb187, unwind terminate(cleanup)];
    }

    bb215: {
        goto -> bb74;
    }

    bb216: {
        goto -> bb138;
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#0}(_1: {closure@lib/api/src/native.rs:194:73: 194:75}) -> <Rets as WasmTypeList>::CStruct {
    debug self => (*(_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>));
    debug A1 => (_1.1: A1);
    debug A2 => (_1.2: A2);
    debug A3 => (_1.3: A3);
    debug A4 => (_1.4: A4);
    debug A5 => (_1.5: A5);
    debug A6 => (_1.6: A6);
    debug A7 => (_1.7: A7);
    debug A8 => (_1.8: A8);
    debug A9 => (_1.9: A9);
    debug A10 => (_1.10: A10);
    debug A11 => (_1.11: A11);
    debug A12 => (_1.12: A12);
    debug A13 => (_1.13: A13);
    debug A14 => (_1.14: A14);
    debug A15 => (_1.15: A15);
    debug A16 => (_1.16: A16);
    debug A17 => (_1.17: A17);
    debug A18 => (_1.18: A18);
    debug A19 => (_1.19: A19);
    debug A20 => (_1.20: A20);
    let mut _0: <Rets as externals::function::inner::WasmTypeList>::CStruct;
    let mut _3: *const wasmer_vm::VMFunctionBody;
    let mut _4: wasmer_vm::VMFunctionEnvironment;
    let mut _5: A1;
    let mut _6: A2;
    let mut _7: A3;
    let mut _8: A4;
    let mut _9: A5;
    let mut _10: A6;
    let mut _11: A7;
    let mut _12: A8;
    let mut _13: A9;
    let mut _14: A10;
    let mut _15: A11;
    let mut _16: A12;
    let mut _17: A13;
    let mut _18: A14;
    let mut _19: A15;
    let mut _20: A16;
    let mut _21: A17;
    let mut _22: A18;
    let mut _23: A19;
    let mut _24: A20;
    let mut _25: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>;
    let mut _26: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>;
    let mut _27: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>;
    let mut _28: &native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    scope 1 {
        let _2: unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) -> <Rets as externals::function::inner::WasmTypeList>::CStruct;
        scope 2 {
            debug f => _2;
        }
    }

    bb0: {
        _48 = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _44 = const false;
        _43 = const false;
        _42 = const false;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _34 = const false;
        _33 = const false;
        _32 = const false;
        _31 = const false;
        _30 = const false;
        _29 = const false;
        _29 = const true;
        _30 = const true;
        _31 = const true;
        _32 = const true;
        _33 = const true;
        _34 = const true;
        _35 = const true;
        _36 = const true;
        _37 = const true;
        _38 = const true;
        _39 = const true;
        _40 = const true;
        _41 = const true;
        _42 = const true;
        _43 = const true;
        _44 = const true;
        _45 = const true;
        _46 = const true;
        _47 = const true;
        _48 = const true;
        _25 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>);
        _26 = deref_copy (*_25);
        _3 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>::address(_26) -> [return: bb1, unwind: bb44];
    }

    bb1: {
        _2 = move _3 as unsafe extern "C" fn(wasmer_vm::VMFunctionEnvironment, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) -> <Rets as externals::function::inner::WasmTypeList>::CStruct (Transmute);
        _27 = deref_copy (_1.0: &&native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>);
        _28 = deref_copy (*_27);
        _4 = NativeFunc::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>::vmctx(_28) -> [return: bb2, unwind: bb44];
    }

    bb2: {
        _48 = const false;
        _5 = move (_1.1: A1);
        _47 = const false;
        _6 = move (_1.2: A2);
        _46 = const false;
        _7 = move (_1.3: A3);
        _45 = const false;
        _8 = move (_1.4: A4);
        _44 = const false;
        _9 = move (_1.5: A5);
        _43 = const false;
        _10 = move (_1.6: A6);
        _42 = const false;
        _11 = move (_1.7: A7);
        _41 = const false;
        _12 = move (_1.8: A8);
        _40 = const false;
        _13 = move (_1.9: A9);
        _39 = const false;
        _14 = move (_1.10: A10);
        _38 = const false;
        _15 = move (_1.11: A11);
        _37 = const false;
        _16 = move (_1.12: A12);
        _36 = const false;
        _17 = move (_1.13: A13);
        _35 = const false;
        _18 = move (_1.14: A14);
        _34 = const false;
        _19 = move (_1.15: A15);
        _33 = const false;
        _20 = move (_1.16: A16);
        _32 = const false;
        _21 = move (_1.17: A17);
        _31 = const false;
        _22 = move (_1.18: A18);
        _30 = const false;
        _23 = move (_1.19: A19);
        _29 = const false;
        _24 = move (_1.20: A20);
        _0 = _2(move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24) -> [return: bb3, unwind: bb44];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        switchInt(_29) -> [0: bb4, otherwise: bb6];
    }

    bb6 (cleanup): {
        drop((_1.20: A20)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_30) -> [0: bb5, otherwise: bb8];
    }

    bb8 (cleanup): {
        drop((_1.19: A19)) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_31) -> [0: bb7, otherwise: bb10];
    }

    bb10 (cleanup): {
        drop((_1.18: A18)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_32) -> [0: bb9, otherwise: bb12];
    }

    bb12 (cleanup): {
        drop((_1.17: A17)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_33) -> [0: bb11, otherwise: bb14];
    }

    bb14 (cleanup): {
        drop((_1.16: A16)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_34) -> [0: bb13, otherwise: bb16];
    }

    bb16 (cleanup): {
        drop((_1.15: A15)) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        switchInt(_35) -> [0: bb15, otherwise: bb18];
    }

    bb18 (cleanup): {
        drop((_1.14: A14)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_36) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop((_1.13: A13)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_37) -> [0: bb19, otherwise: bb22];
    }

    bb22 (cleanup): {
        drop((_1.12: A12)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_38) -> [0: bb21, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.11: A11)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_39) -> [0: bb23, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop((_1.10: A10)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_40) -> [0: bb25, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop((_1.9: A9)) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_41) -> [0: bb27, otherwise: bb30];
    }

    bb30 (cleanup): {
        drop((_1.8: A8)) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_42) -> [0: bb29, otherwise: bb32];
    }

    bb32 (cleanup): {
        drop((_1.7: A7)) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_43) -> [0: bb31, otherwise: bb34];
    }

    bb34 (cleanup): {
        drop((_1.6: A6)) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_44) -> [0: bb33, otherwise: bb36];
    }

    bb36 (cleanup): {
        drop((_1.5: A5)) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_45) -> [0: bb35, otherwise: bb38];
    }

    bb38 (cleanup): {
        drop((_1.4: A4)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_46) -> [0: bb37, otherwise: bb40];
    }

    bb40 (cleanup): {
        drop((_1.3: A3)) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_47) -> [0: bb39, otherwise: bb42];
    }

    bb42 (cleanup): {
        drop((_1.2: A2)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop((_1.1: A1)) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_48) -> [0: bb41, otherwise: bb43];
    }
}

fn native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}(_1: {closure@lib/api/src/native.rs:198:41: 198:44}, _2: Box<dyn Any + Send>) -> RuntimeError {
    debug e => _2;
    let mut _0: wasmer_engine::RuntimeError;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &std::boxed::Box<dyn std::any::Any + std::marker::Send>;
    let mut _11: &[&str; 1];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (PointerCoercion(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Any + Send>>(_10) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = format(move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = RuntimeError::new::<String>(move _3) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in native::<impl at lib/api/src/native.rs:129:9: 132:32>::call::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics(_1: &Extern) -> Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>, ExportError> {
    debug _extern => _1;
    let mut _0: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>, exports::ExportError>;
    let mut _2: std::result::Result<native::NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>, wasmer_engine::RuntimeError>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, exports::ExportError>, &externals::function::Function>;
    let mut _4: std::result::Result<&externals::function::Function, exports::ExportError>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, exports::ExportError>;
    let _7: &externals::function::Function;
    scope 1 {
        debug residual => _6;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _7;
        scope 4 {
        }
    }

    bb0: {
        _4 = <function::Function as Exportable<'_>>::get_self_from_extern(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<&function::Function, ExportError> as std::ops::Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = ((_3 as Continue).0: &externals::function::Function);
        _2 = function::Function::native::<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>(_7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, exports::ExportError>);
        _0 = <Result<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>, ExportError> as FromResidual<Result<Infallible, ExportError>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _0 = Result::<NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>, RuntimeError>::map_err::<ExportError, {closure@lib/api/src/native.rs:233:82: 233:85}>(move _2, const ZeroSized: {closure@lib/api/src/native.rs:233:82: 233:85}) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::get_self_from_extern_with_generics::{closure#0}(_1: {closure@lib/api/src/native.rs:233:82: 233:85}, _2: RuntimeError) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::IncompatibleType;
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref(_1: &mut NativeFunc<(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20), Rets>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: std::option::Option<()>;
    let mut _3: std::option::Option<&mut wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _4: &mut std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;

    bb0: {
        _4 = &mut ((((*_1).1: wasmer_engine::ExportFunction).0: wasmer_vm::VMFunction).5: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>);
        _3 = Option::<WeakOrStrongInstanceRef>::as_mut(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Option::<&mut WeakOrStrongInstanceRef>::map::<(), {closure@lib/api/src/native.rs:237:69: 237:72}>(move _3, const ZeroSized: {closure@lib/api/src/native.rs:237:69: 237:72}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn native::<impl at lib/api/src/native.rs:226:9: 229:32>::into_weak_instance_ref::{closure#0}(_1: {closure@lib/api/src/native.rs:237:69: 237:72}, _2: &mut WeakOrStrongInstanceRef) -> () {
    debug v => _2;
    let mut _0: ();
    let mut _3: wasmer_vm::WeakOrStrongInstanceRef;
    let mut _4: &wasmer_vm::WeakOrStrongInstanceRef;

    bb0: {
        _4 = &(*_2);
        _3 = WeakOrStrongInstanceRef::downgrade(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop((*_2)) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        (*_2) = move _3;
        return;
    }

    bb3 (cleanup): {
        (*_2) = move _3;
        resume;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:71:1: 71:33>::new(_1: u32) -> WasmPtr<T, Ty> {
    debug offset => _1;
    let mut _0: ptr::WasmPtr<T, Ty>;

    bb0: {
        _0 = WasmPtr::<T, Ty> { offset: _1, _phantom: const ZeroSized: PhantomData<(T, Ty)> };
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:71:1: 71:33>::offset(_1: WasmPtr<T, Ty>) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = (_1.0: u32);
        return;
    }
}

fn align_pointer(_1: usize, _2: usize) -> usize {
    debug ptr => _1;
    debug align => _2;
    let mut _0: usize;
    let mut _3: bool;
    let mut _4: u32;
    let mut _5: !;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: (usize, bool);

    bb0: {
        _3 = const true;
        switchInt(move _3) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        _4 = core::num::<impl usize>::count_ones(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _4) -> [1: bb4, otherwise: bb3];
    }

    bb3: {
        _5 = core::panicking::panic(const "assertion failed: align.count_ones() == 1") -> unwind continue;
    }

    bb4: {
        _8 = CheckedSub(_2, const 1_usize);
        assert(!move (_8.1: bool), "attempt to compute `{} - {}`, which would overflow", _2, const 1_usize) -> [success: bb5, unwind continue];
    }

    bb5: {
        _7 = move (_8.0: usize);
        _6 = Not(move _7);
        _0 = BitAnd(_1, move _6);
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:98:1: 98:43>::deref(_1: WasmPtr<T>, _2: &memory::Memory) -> Option<&Cell<T>> {
    debug self => _1;
    debug memory => _2;
    let mut _0: std::option::Option<&std::cell::Cell<T>>;
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: u32;
    let mut _7: usize;
    let mut _8: (usize, bool);
    let mut _9: usize;
    let mut _10: wasmer_types::Bytes;
    let mut _11: wasmer_types::Pages;
    let mut _12: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: *const std::cell::Cell<u8>;
    let mut _17: *const std::cell::Cell<u8>;
    let _18: &[std::cell::Cell<u8>];
    let mut _19: &wasmer_types::MemoryView<'_, u8>;
    let _20: wasmer_types::MemoryView<'_, u8>;
    let mut _21: usize;
    let mut _22: u32;
    let mut _23: usize;
    let _24: &std::cell::Cell<T>;
    scope 1 {
        let _13: *const std::cell::Cell<T>;
        scope 2 {
            debug cell_ptr => _13;
        }
    }

    bb0: {
        _6 = (_1.0: u32);
        _5 = move _6 as usize (IntToInt);
        _7 = std::mem::size_of::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = CheckedAdd(_5, _7);
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _7) -> [success: bb2, unwind continue];
    }

    bb2: {
        _4 = move (_8.0: usize);
        _11 = memory::Memory::size(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = Pages::bytes(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = (_10.0: usize);
        _3 = Gt(move _4, move _9);
        switchInt(move _3) -> [0: bb5, otherwise: bb7];
    }

    bb5: {
        _12 = std::mem::size_of::<T>() -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _12) -> [0: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Option::<&Cell<T>>::None;
        goto -> bb15;
    }

    bb8: {
        _20 = memory::Memory::view::<u8>(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        _19 = &_20;
        _18 = <MemoryView<'_, u8> as Deref>::deref(move _19) -> [return: bb10, unwind continue];
    }

    bb10: {
        _17 = core::slice::<impl [Cell<u8>]>::as_ptr(_18) -> [return: bb11, unwind continue];
    }

    bb11: {
        _22 = (_1.0: u32);
        _21 = move _22 as usize (IntToInt);
        _16 = std::ptr::const_ptr::<impl *const Cell<u8>>::add(move _17, move _21) -> [return: bb12, unwind continue];
    }

    bb12: {
        _15 = move _16 as usize (PointerExposeAddress);
        _23 = align_of::<T>() -> [return: bb13, unwind continue];
    }

    bb13: {
        _14 = align_pointer(move _15, move _23) -> [return: bb14, unwind continue];
    }

    bb14: {
        _13 = move _14 as *const std::cell::Cell<T> (PointerFromExposedAddress);
        _24 = &(*_13);
        _0 = Option::<&Cell<T>>::Some(_24);
        goto -> bb15;
    }

    bb15: {
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:98:1: 98:43>::deref_mut(_1: WasmPtr<T>, _2: &memory::Memory) -> Option<&mut Cell<T>> {
    debug self => _1;
    debug memory => _2;
    let mut _0: std::option::Option<&mut std::cell::Cell<T>>;
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: u32;
    let mut _7: usize;
    let mut _8: (usize, bool);
    let mut _9: usize;
    let mut _10: wasmer_types::Bytes;
    let mut _11: wasmer_types::Pages;
    let mut _12: usize;
    let _13: *mut std::cell::Cell<T>;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: *const std::cell::Cell<u8>;
    let mut _17: *const std::cell::Cell<u8>;
    let _18: &[std::cell::Cell<u8>];
    let mut _19: &wasmer_types::MemoryView<'_, u8>;
    let _20: wasmer_types::MemoryView<'_, u8>;
    let mut _21: usize;
    let mut _22: u32;
    let mut _23: usize;
    let mut _24: &mut std::cell::Cell<T>;
    scope 1 {
        debug cell_ptr => _13;
    }

    bb0: {
        _6 = (_1.0: u32);
        _5 = move _6 as usize (IntToInt);
        _7 = std::mem::size_of::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = CheckedAdd(_5, _7);
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _7) -> [success: bb2, unwind continue];
    }

    bb2: {
        _4 = move (_8.0: usize);
        _11 = memory::Memory::size(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = Pages::bytes(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = (_10.0: usize);
        _3 = Gt(move _4, move _9);
        switchInt(move _3) -> [0: bb5, otherwise: bb7];
    }

    bb5: {
        _12 = std::mem::size_of::<T>() -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _12) -> [0: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Option::<&mut Cell<T>>::None;
        goto -> bb15;
    }

    bb8: {
        _20 = memory::Memory::view::<u8>(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        _19 = &_20;
        _18 = <MemoryView<'_, u8> as Deref>::deref(move _19) -> [return: bb10, unwind continue];
    }

    bb10: {
        _17 = core::slice::<impl [Cell<u8>]>::as_ptr(_18) -> [return: bb11, unwind continue];
    }

    bb11: {
        _22 = (_1.0: u32);
        _21 = move _22 as usize (IntToInt);
        _16 = std::ptr::const_ptr::<impl *const Cell<u8>>::add(move _17, move _21) -> [return: bb12, unwind continue];
    }

    bb12: {
        _15 = move _16 as usize (PointerExposeAddress);
        _23 = align_of::<T>() -> [return: bb13, unwind continue];
    }

    bb13: {
        _14 = align_pointer(move _15, move _23) -> [return: bb14, unwind continue];
    }

    bb14: {
        _13 = move _14 as *mut std::cell::Cell<T> (PointerFromExposedAddress);
        _24 = &mut (*_13);
        _0 = Option::<&mut Cell<T>>::Some(_24);
        goto -> bb15;
    }

    bb15: {
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:146:1: 146:44>::deref(_1: WasmPtr<T, Array>, _2: &memory::Memory, _3: u32, _4: u32) -> Option<&[Cell<T>]> {
    debug self => _1;
    debug memory => _2;
    debug index => _3;
    debug length => _4;
    let mut _0: std::option::Option<&[std::cell::Cell<T>]>;
    let _5: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: (usize, bool);
    let mut _11: wasmer_types::Bytes;
    let mut _12: wasmer_types::Pages;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: u32;
    let mut _17: usize;
    let mut _18: (usize, bool);
    let mut _19: (usize, bool);
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: u32;
    let mut _23: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: *const std::cell::Cell<u8>;
    let mut _28: *const std::cell::Cell<u8>;
    let _29: &[std::cell::Cell<u8>];
    let mut _30: &wasmer_types::MemoryView<'_, u8>;
    let _31: wasmer_types::MemoryView<'_, u8>;
    let mut _32: usize;
    let mut _33: u32;
    let mut _34: usize;
    let _35: &[std::cell::Cell<T>];
    let _36: &[std::cell::Cell<T>];
    let mut _37: std::ops::Range<usize>;
    let mut _38: usize;
    scope 1 {
        debug item_size => _5;
        let _6: usize;
        scope 2 {
            debug slice_full_len => _6;
            let _10: usize;
            scope 3 {
                debug memory_size => _10;
                scope 4 {
                    let _24: *const std::cell::Cell<T>;
                    scope 5 {
                        debug cell_ptr => _24;
                        scope 6 {
                            debug cell_ptrs => _35;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _5 = std::mem::size_of::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = _3 as usize (IntToInt);
        _8 = _4 as usize (IntToInt);
        _9 = CheckedAdd(_7, _8);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _8) -> [success: bb2, unwind continue];
    }

    bb2: {
        _6 = move (_9.0: usize);
        _12 = memory::Memory::size(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = Pages::bytes(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = (_11.0: usize);
        _16 = (_1.0: u32);
        _15 = move _16 as usize (IntToInt);
        _18 = CheckedMul(_5, _6);
        assert(!move (_18.1: bool), "attempt to compute `{} * {}`, which would overflow", _5, _6) -> [success: bb5, unwind continue];
    }

    bb5: {
        _17 = move (_18.0: usize);
        _19 = CheckedAdd(_15, _17);
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, move _17) -> [success: bb6, unwind continue];
    }

    bb6: {
        _14 = move (_19.0: usize);
        _13 = Gt(move _14, _10);
        switchInt(move _13) -> [0: bb7, otherwise: bb10];
    }

    bb7: {
        _22 = (_1.0: u32);
        _21 = move _22 as usize (IntToInt);
        _20 = Ge(move _21, _10);
        switchInt(move _20) -> [0: bb8, otherwise: bb10];
    }

    bb8: {
        _23 = std::mem::size_of::<T>() -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _23) -> [0: bb10, otherwise: bb11];
    }

    bb10: {
        _0 = Option::<&[Cell<T>]>::None;
        goto -> bb20;
    }

    bb11: {
        _31 = memory::Memory::view::<u8>(_2) -> [return: bb12, unwind continue];
    }

    bb12: {
        _30 = &_31;
        _29 = <MemoryView<'_, u8> as Deref>::deref(move _30) -> [return: bb13, unwind continue];
    }

    bb13: {
        _28 = core::slice::<impl [Cell<u8>]>::as_ptr(_29) -> [return: bb14, unwind continue];
    }

    bb14: {
        _33 = (_1.0: u32);
        _32 = move _33 as usize (IntToInt);
        _27 = std::ptr::const_ptr::<impl *const Cell<u8>>::add(move _28, move _32) -> [return: bb15, unwind continue];
    }

    bb15: {
        _26 = move _27 as usize (PointerExposeAddress);
        _34 = align_of::<T>() -> [return: bb16, unwind continue];
    }

    bb16: {
        _25 = align_pointer(move _26, move _34) -> [return: bb17, unwind continue];
    }

    bb17: {
        _24 = move _25 as *const std::cell::Cell<T> (PointerFromExposedAddress);
        _36 = std::slice::from_raw_parts::<'_, Cell<T>>(_24, _6) -> [return: bb18, unwind continue];
    }

    bb18: {
        _38 = _3 as usize (IntToInt);
        _37 = std::ops::Range::<usize> { start: move _38, end: _6 };
        _35 = <[Cell<T>] as Index<std::ops::Range<usize>>>::index(_36, move _37) -> [return: bb19, unwind continue];
    }

    bb19: {
        _0 = Option::<&[Cell<T>]>::Some(_35);
        goto -> bb20;
    }

    bb20: {
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:146:1: 146:44>::deref_mut(_1: WasmPtr<T, Array>, _2: &memory::Memory, _3: u32, _4: u32) -> Option<&mut [Cell<T>]> {
    debug self => _1;
    debug memory => _2;
    debug index => _3;
    debug length => _4;
    let mut _0: std::option::Option<&mut [std::cell::Cell<T>]>;
    let _5: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: (usize, bool);
    let mut _11: wasmer_types::Bytes;
    let mut _12: wasmer_types::Pages;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: u32;
    let mut _17: usize;
    let mut _18: (usize, bool);
    let mut _19: (usize, bool);
    let mut _20: usize;
    let mut _21: wasmer_types::Bytes;
    let mut _22: wasmer_types::Pages;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: u32;
    let mut _26: usize;
    let mut _28: usize;
    let mut _29: usize;
    let mut _30: *const std::cell::Cell<u8>;
    let mut _31: *const std::cell::Cell<u8>;
    let _32: &[std::cell::Cell<u8>];
    let mut _33: &wasmer_types::MemoryView<'_, u8>;
    let _34: wasmer_types::MemoryView<'_, u8>;
    let mut _35: usize;
    let mut _36: u32;
    let mut _37: usize;
    let mut _38: &mut [std::cell::Cell<T>];
    let mut _39: &mut [std::cell::Cell<T>];
    let mut _40: std::ops::Range<usize>;
    let mut _41: usize;
    scope 1 {
        debug item_size => _5;
        let _6: usize;
        scope 2 {
            debug slice_full_len => _6;
            let _10: usize;
            scope 3 {
                debug memory_size => _10;
                let _27: *mut std::cell::Cell<T>;
                scope 4 {
                    debug cell_ptr => _27;
                    scope 5 {
                        debug cell_ptrs => _38;
                    }
                }
            }
        }
    }

    bb0: {
        _5 = std::mem::size_of::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = _3 as usize (IntToInt);
        _8 = _4 as usize (IntToInt);
        _9 = CheckedAdd(_7, _8);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _8) -> [success: bb2, unwind continue];
    }

    bb2: {
        _6 = move (_9.0: usize);
        _12 = memory::Memory::size(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = Pages::bytes(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = (_11.0: usize);
        _16 = (_1.0: u32);
        _15 = move _16 as usize (IntToInt);
        _18 = CheckedMul(_5, _6);
        assert(!move (_18.1: bool), "attempt to compute `{} * {}`, which would overflow", _5, _6) -> [success: bb5, unwind continue];
    }

    bb5: {
        _17 = move (_18.0: usize);
        _19 = CheckedAdd(_15, _17);
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, move _17) -> [success: bb6, unwind continue];
    }

    bb6: {
        _14 = move (_19.0: usize);
        _22 = memory::Memory::size(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = Pages::bytes(move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = (_21.0: usize);
        _13 = Gt(move _14, move _20);
        switchInt(move _13) -> [0: bb9, otherwise: bb12];
    }

    bb9: {
        _25 = (_1.0: u32);
        _24 = move _25 as usize (IntToInt);
        _23 = Ge(move _24, _10);
        switchInt(move _23) -> [0: bb10, otherwise: bb12];
    }

    bb10: {
        _26 = std::mem::size_of::<T>() -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _26) -> [0: bb12, otherwise: bb13];
    }

    bb12: {
        _0 = Option::<&mut [Cell<T>]>::None;
        goto -> bb22;
    }

    bb13: {
        _34 = memory::Memory::view::<u8>(_2) -> [return: bb14, unwind continue];
    }

    bb14: {
        _33 = &_34;
        _32 = <MemoryView<'_, u8> as Deref>::deref(move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        _31 = core::slice::<impl [Cell<u8>]>::as_ptr(_32) -> [return: bb16, unwind continue];
    }

    bb16: {
        _36 = (_1.0: u32);
        _35 = move _36 as usize (IntToInt);
        _30 = std::ptr::const_ptr::<impl *const Cell<u8>>::add(move _31, move _35) -> [return: bb17, unwind continue];
    }

    bb17: {
        _29 = move _30 as usize (PointerExposeAddress);
        _37 = align_of::<T>() -> [return: bb18, unwind continue];
    }

    bb18: {
        _28 = align_pointer(move _29, move _37) -> [return: bb19, unwind continue];
    }

    bb19: {
        _27 = move _28 as *mut std::cell::Cell<T> (PointerFromExposedAddress);
        _39 = std::slice::from_raw_parts_mut::<'_, Cell<T>>(_27, _6) -> [return: bb20, unwind continue];
    }

    bb20: {
        _41 = _3 as usize (IntToInt);
        _40 = std::ops::Range::<usize> { start: move _41, end: _6 };
        _38 = <[Cell<T>] as IndexMut<std::ops::Range<usize>>>::index_mut(_39, move _40) -> [return: bb21, unwind continue];
    }

    bb21: {
        _0 = Option::<&mut [Cell<T>]>::Some(_38);
        goto -> bb22;
    }

    bb22: {
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:146:1: 146:44>::get_utf8_str(_1: WasmPtr<T, Array>, _2: &memory::Memory, _3: u32) -> Option<&str> {
    debug self => _1;
    debug memory => _2;
    debug str_len => _3;
    let mut _0: std::option::Option<&str>;
    let _4: usize;
    let mut _5: wasmer_types::Bytes;
    let mut _6: wasmer_types::Pages;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: u32;
    let mut _11: usize;
    let mut _12: (usize, bool);
    let mut _13: usize;
    let mut _14: wasmer_types::Bytes;
    let mut _15: wasmer_types::Pages;
    let mut _16: bool;
    let mut _17: usize;
    let mut _18: u32;
    let mut _20: *const std::cell::Cell<u8>;
    let mut _21: *const std::cell::Cell<u8>;
    let _22: &[std::cell::Cell<u8>];
    let mut _23: &wasmer_types::MemoryView<'_, u8>;
    let _24: wasmer_types::MemoryView<'_, u8>;
    let mut _25: usize;
    let mut _26: u32;
    let _27: &[u8];
    let mut _28: usize;
    let mut _29: std::result::Result<&str, std::str::Utf8Error>;
    scope 1 {
        debug memory_size => _4;
        let _19: *const u8;
        scope 2 {
            debug ptr => _19;
            scope 3 {
                debug slice => _27;
            }
        }
    }

    bb0: {
        _6 = memory::Memory::size(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = Pages::bytes(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = (_5.0: usize);
        _10 = (_1.0: u32);
        _9 = move _10 as usize (IntToInt);
        _11 = _3 as usize (IntToInt);
        _12 = CheckedAdd(_9, _11);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, move _11) -> [success: bb3, unwind continue];
    }

    bb3: {
        _8 = move (_12.0: usize);
        _15 = memory::Memory::size(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = Pages::bytes(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = (_14.0: usize);
        _7 = Gt(move _8, move _13);
        switchInt(move _7) -> [0: bb6, otherwise: bb7];
    }

    bb6: {
        _18 = (_1.0: u32);
        _17 = move _18 as usize (IntToInt);
        _16 = Ge(move _17, _4);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _0 = Option::<&str>::None;
        goto -> bb15;
    }

    bb8: {
        _24 = memory::Memory::view::<u8>(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        _23 = &_24;
        _22 = <MemoryView<'_, u8> as Deref>::deref(move _23) -> [return: bb10, unwind continue];
    }

    bb10: {
        _21 = core::slice::<impl [Cell<u8>]>::as_ptr(_22) -> [return: bb11, unwind continue];
    }

    bb11: {
        _26 = (_1.0: u32);
        _25 = move _26 as usize (IntToInt);
        _20 = std::ptr::const_ptr::<impl *const Cell<u8>>::add(move _21, move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        _19 = move _20 as *const u8 (PtrToPtr);
        _28 = _3 as usize (IntToInt);
        _27 = std::slice::from_raw_parts::<'_, u8>(_19, move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        _29 = from_utf8(_27) -> [return: bb14, unwind continue];
    }

    bb14: {
        _0 = Result::<&str, Utf8Error>::ok(move _29) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:146:1: 146:44>::get_utf8_string(_1: WasmPtr<T, Array>, _2: &memory::Memory, _3: u32) -> Option<String> {
    debug self => _1;
    debug memory => _2;
    debug str_len => _3;
    let mut _0: std::option::Option<std::string::String>;
    let _4: usize;
    let mut _5: wasmer_types::Bytes;
    let mut _6: wasmer_types::Pages;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: u32;
    let mut _11: usize;
    let mut _12: (usize, bool);
    let mut _13: usize;
    let mut _14: wasmer_types::Bytes;
    let mut _15: wasmer_types::Pages;
    let mut _16: bool;
    let mut _17: usize;
    let mut _18: u32;
    let mut _21: usize;
    let mut _23: u32;
    let mut _24: std::ops::Range<usize>;
    let mut _25: std::ops::Range<usize>;
    let mut _26: usize;
    let mut _28: std::option::Option<usize>;
    let mut _29: &mut std::ops::Range<usize>;
    let mut _30: isize;
    let mut _33: &std::cell::Cell<u8>;
    let _34: &[std::cell::Cell<u8>];
    let mut _35: &wasmer_types::MemoryView<'_, u8>;
    let _36: usize;
    let mut _37: (usize, bool);
    let mut _38: usize;
    let mut _39: bool;
    let _40: ();
    let mut _41: &mut std::vec::Vec<u8>;
    let mut _42: std::result::Result<std::string::String, std::string::FromUtf8Error>;
    let mut _43: std::vec::Vec<u8>;
    let mut _44: bool;
    scope 1 {
        debug memory_size => _4;
        let _19: wasmer_types::MemoryView<'_, u8>;
        scope 2 {
            debug view => _19;
            let mut _20: std::vec::Vec<u8>;
            scope 3 {
                debug vec => _20;
                let _22: usize;
                scope 4 {
                    debug base => _22;
                    let mut _27: std::ops::Range<usize>;
                    scope 5 {
                        debug iter => _27;
                        let _31: usize;
                        scope 6 {
                            debug i => _31;
                            let _32: u8;
                            scope 7 {
                                debug byte => _32;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _44 = const false;
        _6 = memory::Memory::size(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = Pages::bytes(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = (_5.0: usize);
        _10 = (_1.0: u32);
        _9 = move _10 as usize (IntToInt);
        _11 = _3 as usize (IntToInt);
        _12 = CheckedAdd(_9, _11);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, move _11) -> [success: bb3, unwind continue];
    }

    bb3: {
        _8 = move (_12.0: usize);
        _15 = memory::Memory::size(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = Pages::bytes(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = (_14.0: usize);
        _7 = Gt(move _8, move _13);
        switchInt(move _7) -> [0: bb6, otherwise: bb7];
    }

    bb6: {
        _18 = (_1.0: u32);
        _17 = move _18 as usize (IntToInt);
        _16 = Ge(move _17, _4);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _0 = Option::<String>::None;
        goto -> bb23;
    }

    bb8: {
        _19 = memory::Memory::view::<u8>(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        _21 = _3 as usize (IntToInt);
        _44 = const true;
        _20 = Vec::<u8>::with_capacity(move _21) -> [return: bb10, unwind continue];
    }

    bb10: {
        _23 = (_1.0: u32);
        _22 = move _23 as usize (IntToInt);
        _26 = _3 as usize (IntToInt);
        _25 = std::ops::Range::<usize> { start: const 0_usize, end: move _26 };
        _24 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _25) -> [return: bb11, unwind: bb26];
    }

    bb11: {
        _27 = move _24;
        goto -> bb12;
    }

    bb12: {
        _29 = &mut _27;
        _28 = <std::ops::Range<usize> as Iterator>::next(_29) -> [return: bb13, unwind: bb26];
    }

    bb13: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb16, 1: bb14, otherwise: bb15];
    }

    bb14: {
        _31 = ((_28 as Some).0: usize);
        _35 = &_19;
        _34 = <MemoryView<'_, u8> as Deref>::deref(move _35) -> [return: bb17, unwind: bb26];
    }

    bb15: {
        unreachable;
    }

    bb16: {
        _44 = const false;
        _43 = move _20;
        _42 = String::from_utf8(move _43) -> [return: bb21, unwind: bb26];
    }

    bb17: {
        _37 = CheckedAdd(_22, _31);
        assert(!move (_37.1: bool), "attempt to compute `{} + {}`, which would overflow", _22, _31) -> [success: bb18, unwind: bb26];
    }

    bb18: {
        _36 = move (_37.0: usize);
        _38 = Len((*_34));
        _39 = Lt(_36, _38);
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _36) -> [success: bb19, unwind: bb26];
    }

    bb19: {
        _33 = &(*_34)[_36];
        _32 = Cell::<u8>::get(move _33) -> [return: bb20, unwind: bb26];
    }

    bb20: {
        _41 = &mut _20;
        _40 = Vec::<u8>::push(move _41, _32) -> [return: bb27, unwind: bb26];
    }

    bb21: {
        _0 = Result::<String, FromUtf8Error>::ok(move _42) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        _44 = const false;
        goto -> bb23;
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        resume;
    }

    bb25 (cleanup): {
        drop(_20) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        switchInt(_44) -> [0: bb24, otherwise: bb25];
    }

    bb27: {
        goto -> bb12;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:146:1: 146:44>::get_utf8_str_with_nul(_1: WasmPtr<T, Array>, _2: &memory::Memory) -> Option<&str> {
    debug self => _1;
    debug memory => _2;
    let mut _0: std::option::Option<&str>;
    let mut _3: std::option::Option<usize>;
    let mut _4: &mut std::iter::Map<std::slice::Iter<'_, std::cell::Cell<u8>>, {closure@lib/api/src/ptr.rs:281:18: 281:24}>;
    let mut _5: std::iter::Map<std::slice::Iter<'_, std::cell::Cell<u8>>, {closure@lib/api/src/ptr.rs:281:18: 281:24}>;
    let mut _6: std::slice::Iter<'_, std::cell::Cell<u8>>;
    let _7: &[std::cell::Cell<u8>];
    let _8: &[std::cell::Cell<u8>];
    let mut _9: &wasmer_types::MemoryView<'_, u8>;
    let _10: wasmer_types::MemoryView<'_, u8>;
    let mut _11: &externals::memory::Memory;
    let mut _12: std::ops::RangeFrom<usize>;
    let mut _13: usize;
    let mut _14: u32;
    let mut _15: {closure@lib/api/src/ptr.rs:283:23: 283:31};
    let mut _16: &ptr::WasmPtr<T, ptr::Array>;
    let mut _17: &&externals::memory::Memory;

    bb0: {
        _11 = _2;
        _10 = memory::Memory::view::<u8>(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &_10;
        _8 = <MemoryView<'_, u8> as Deref>::deref(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _14 = (_1.0: u32);
        _13 = move _14 as usize (IntToInt);
        _12 = RangeFrom::<usize> { start: move _13 };
        _7 = <[Cell<u8>] as Index<RangeFrom<usize>>>::index(_8, move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = core::slice::<impl [Cell<u8>]>::iter(_7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = <std::slice::Iter<'_, Cell<u8>> as Iterator>::map::<u8, {closure@lib/api/src/ptr.rs:281:18: 281:24}>(move _6, const ZeroSized: {closure@lib/api/src/ptr.rs:281:18: 281:24}) -> [return: bb5, unwind continue];
    }

    bb5: {
        _4 = &mut _5;
        _3 = <Map<std::slice::Iter<'_, Cell<u8>>, {closure@lib/api/src/ptr.rs:281:18: 281:24}> as Iterator>::position::<{closure@lib/api/src/ptr.rs:282:23: 282:29}>(move _4, const ZeroSized: {closure@lib/api/src/ptr.rs:282:23: 282:29}) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = &_1;
        _17 = &_2;
        _15 = {closure@lib/api/src/ptr.rs:283:23: 283:31} { self: move _16, memory: move _17 };
        _0 = Option::<usize>::and_then::<&str, {closure@lib/api/src/ptr.rs:283:23: 283:31}>(move _3, move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:146:1: 146:44>::get_utf8_str_with_nul::{closure#0}(_1: &mut {closure@lib/api/src/ptr.rs:281:18: 281:24}, _2: &Cell<u8>) -> u8 {
    debug cell => _2;
    let mut _0: u8;

    bb0: {
        _0 = Cell::<u8>::get(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:146:1: 146:44>::get_utf8_str_with_nul::{closure#1}(_1: &mut {closure@lib/api/src/ptr.rs:282:23: 282:29}, _2: u8) -> bool {
    debug byte => _2;
    let mut _0: bool;

    bb0: {
        _0 = Eq(_2, const 0_u8);
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:146:1: 146:44>::get_utf8_str_with_nul::{closure#2}(_1: {closure@lib/api/src/ptr.rs:283:23: 283:31}, _2: usize) -> Option<&str> {
    debug length => _2;
    debug self => (*(_1.0: &ptr::WasmPtr<T, ptr::Array>));
    debug memory => (*(_1.1: &&externals::memory::Memory));
    let mut _0: std::option::Option<&str>;
    let mut _3: ptr::WasmPtr<T, ptr::Array>;
    let mut _4: u32;
    let mut _5: &ptr::WasmPtr<T, ptr::Array>;
    let mut _6: &&externals::memory::Memory;
    let mut _7: &externals::memory::Memory;

    bb0: {
        _5 = deref_copy (_1.0: &ptr::WasmPtr<T, ptr::Array>);
        _3 = (*_5);
        _6 = deref_copy (_1.1: &&externals::memory::Memory);
        _7 = deref_copy (*_6);
        _4 = _2 as u32 (IntToInt);
        _0 = WasmPtr::<T, Array>::get_utf8_str(move _3, _7, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:146:1: 146:44>::get_utf8_string_with_nul(_1: WasmPtr<T, Array>, _2: &memory::Memory) -> Option<String> {
    debug self => _1;
    debug memory => _2;
    let mut _0: std::option::Option<std::string::String>;
    let mut _3: std::option::Option<&str>;
    scope 1 {
    }

    bb0: {
        _3 = WasmPtr::<T, Array>::get_utf8_str_with_nul(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Option::<&str>::map::<String, {closure@lib/api/src/ptr.rs:291:59: 291:62}>(move _3, const ZeroSized: {closure@lib/api/src/ptr.rs:291:59: 291:62}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:146:1: 146:44>::get_utf8_string_with_nul::{closure#0}(_1: {closure@lib/api/src/ptr.rs:291:59: 291:62}, _2: &str) -> String {
    debug s => _2;
    let mut _0: std::string::String;

    bb0: {
        _0 = <str as ToOwned>::to_owned(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:295:1: 295:65>::to_native(_1: WasmPtr<T, Ty>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: u32;

    bb0: {
        _2 = (_1.0: u32);
        _0 = move _2 as i32 (IntToInt);
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:295:1: 295:65>::from_native(_1: i32) -> WasmPtr<T, Ty> {
    debug n => _1;
    let mut _0: ptr::WasmPtr<T, Ty>;
    let mut _2: u32;

    bb0: {
        _2 = _1 as u32 (IntToInt);
        _0 = WasmPtr::<T, Ty> { offset: move _2, _phantom: const ZeroSized: PhantomData<(T, Ty)> };
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:311:1: 311:43>::clone(_1: &WasmPtr<T, Ty>) -> WasmPtr<T, Ty> {
    debug self => _1;
    let mut _0: ptr::WasmPtr<T, Ty>;
    let mut _2: u32;

    bb0: {
        _2 = ((*_1).0: u32);
        _0 = WasmPtr::<T, Ty> { offset: move _2, _phantom: const ZeroSized: PhantomData<(T, Ty)> };
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:322:1: 322:47>::eq(_1: &WasmPtr<T, Ty>, _2: &WasmPtr<T, Ty>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: u32;
    let mut _4: u32;

    bb0: {
        _3 = ((*_1).0: u32);
        _4 = ((*_2).0: u32);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn ptr::<impl at lib/api/src/ptr.rs:330:1: 330:48>::fmt(_1: &WasmPtr<T, Ty>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &u32;
    let mut _10: &[core::fmt::rt::Placeholder];
    let _11: &[core::fmt::rt::Placeholder; 1];
    let _12: [core::fmt::rt::Placeholder; 1];
    let mut _13: core::fmt::rt::Placeholder;
    let mut _14: core::fmt::rt::Alignment;
    let mut _15: core::fmt::rt::Count;
    let mut _16: core::fmt::rt::Count;
    let mut _17: core::fmt::rt::UnsafeArg;
    let mut _18: &[&str; 2];
    scope 1 {
    }

    bb0: {
        _18 = const _;
        _4 = _18 as &[&str] (PointerCoercion(Unsize));
        _9 = &((*_1).0: u32);
        _8 = core::fmt::rt::Argument::<'_>::new_lower_hex::<u32>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _14 = core::fmt::rt::Alignment::Unknown;
        _15 = core::fmt::rt::Count::Implied;
        _16 = core::fmt::rt::Count::Implied;
        _13 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _14, const 4_u32, move _15, move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _17 = core::fmt::rt::UnsafeArg::new() -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = Arguments::<'_>::new_v1_formatted(move _4, move _5, move _10, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

promoted[0] in ptr::<impl at lib/api/src/ptr.rs:330:1: 330:48>::fmt: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "WasmPtr(", const ")"];
        _0 = &_1;
        return;
    }
}

fn store::<impl at lib/api/src/store.rs:21:10: 21:15>::clone(_1: &Store) -> Store {
    debug self => _1;
    let mut _0: store::Store;
    let mut _2: std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let mut _3: std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let _4: &std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let mut _5: std::sync::Arc<dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync>;
    let mut _6: std::sync::Arc<dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync>;
    let _7: &std::sync::Arc<dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync>;
    let mut _8: std::sync::Arc<std::sync::RwLock<std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>>;
    let _9: &std::sync::Arc<std::sync::RwLock<std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>>;

    bb0: {
        _4 = &((*_1).0: std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>);
        _3 = <Arc<dyn Engine + Send + Sync> as Clone>::clone(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = move _3;
        _7 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync>);
        _6 = <Arc<dyn Tunables + Send + Sync> as Clone>::clone(_7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _5 = move _6;
        _9 = &((*_1).2: std::sync::Arc<std::sync::RwLock<std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>>);
        _8 = <Arc<RwLock<Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>>> as Clone>::clone(_9) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = Store { engine: move _2, tunables: move _5, trap_handler: move _8 };
        return;
    }

    bb4 (cleanup): {
        drop(_5) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn store::<impl at lib/api/src/store.rs:21:17: 21:28>::size_of_val(_1: &Store, _2: &mut dyn MemoryUsageTracker) -> usize {
    debug self => _1;
    debug visited => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let _8: &std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let mut _9: (usize, bool);
    let mut _10: usize;
    let _11: &std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let mut _12: (usize, bool);
    let mut _13: usize;
    let _14: &std::sync::Arc<dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync>;
    let mut _15: (usize, bool);
    let mut _16: usize;
    let _17: &std::sync::Arc<dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync>;
    let mut _18: (usize, bool);

    bb0: {
        _6 = std::mem::size_of_val::<Store>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &((*_1).0: std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>);
        _7 = <Arc<dyn Engine + Send + Sync> as MemoryUsage>::size_of_val(_8, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = CheckedAdd(_6, _7);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _7) -> [success: bb3, unwind continue];
    }

    bb3: {
        _5 = move (_9.0: usize);
        _11 = &((*_1).0: std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>);
        _10 = std::mem::size_of_val::<Arc<dyn Engine + Send + Sync>>(_11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = CheckedSub(_5, _10);
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", move _5, move _10) -> [success: bb5, unwind continue];
    }

    bb5: {
        _4 = move (_12.0: usize);
        _14 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync>);
        _13 = <Arc<dyn Tunables + Send + Sync> as MemoryUsage>::size_of_val(_14, _2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = CheckedAdd(_4, _13);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _13) -> [success: bb7, unwind continue];
    }

    bb7: {
        _3 = move (_15.0: usize);
        _17 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync>);
        _16 = std::mem::size_of_val::<Arc<dyn Tunables + Send + Sync>>(_17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = CheckedSub(_3, _16);
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _16) -> [success: bb9, unwind continue];
    }

    bb9: {
        _0 = move (_18.0: usize);
        return;
    }
}

fn store::<impl at lib/api/src/store.rs:29:1: 29:11>::new(_1: &E) -> Store {
    debug engine => _1;
    let mut _0: store::Store;
    let mut _2: tunables::BaseTunables;
    let _3: &wasmer_compiler::Target;

    bb0: {
        _3 = <E as Engine>::target(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = BaseTunables::for_target(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Store::new_with_tunables::<E, BaseTunables>(_1, move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn store::<impl at lib/api/src/store.rs:29:1: 29:11>::set_trap_handler(_1: &Store, _2: Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>) -> () {
    debug self => _1;
    debug handler => _2;
    let mut _0: ();
    let mut _3: std::sync::RwLockWriteGuard<'_, std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>;
    let mut _4: std::result::Result<std::sync::RwLockWriteGuard<'_, std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>, std::sync::PoisonError<std::sync::RwLockWriteGuard<'_, std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>>>;
    let _5: &std::sync::RwLock<std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>;
    let mut _6: &std::sync::Arc<std::sync::RwLock<std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>>;
    let mut _7: std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>;
    let mut _8: &mut std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>;
    let mut _9: &mut std::sync::RwLockWriteGuard<'_, std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>;
    let mut _10: bool;
    let mut _11: bool;
    scope 1 {
        debug m => _3;
    }

    bb0: {
        _11 = const false;
        _10 = const false;
        _11 = const true;
        _6 = &((*_1).2: std::sync::Arc<std::sync::RwLock<std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>>);
        _5 = <Arc<RwLock<Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>>> as Deref>::deref(move _6) -> [return: bb1, unwind: bb13];
    }

    bb1: {
        _4 = RwLock::<Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>>::write(_5) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _3 = Result::<RwLockWriteGuard<'_, Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>>, PoisonError<RwLockWriteGuard<'_, Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>>>>::unwrap(move _4) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _11 = const false;
        _10 = const true;
        _7 = move _2;
        _9 = &mut _3;
        _8 = <RwLockWriteGuard<'_, Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>> as DerefMut>::deref_mut(move _9) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        drop((*_8)) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _10 = const false;
        (*_8) = move _7;
        _10 = const false;
        drop(_3) -> [return: bb7, unwind: bb13];
    }

    bb6 (cleanup): {
        _10 = const false;
        (*_8) = move _7;
        goto -> bb11;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_7) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_10) -> [0: bb8, otherwise: bb10];
    }

    bb12 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_11) -> [0: bb9, otherwise: bb12];
    }
}

fn store::<impl at lib/api/src/store.rs:29:1: 29:11>::new_with_tunables(_1: &E, _2: impl Tunables + Send + Sync + 'static) -> Store {
    debug engine => _1;
    debug tunables => _2;
    let mut _0: store::Store;
    let _3: ();
    let mut _4: fn(usize) -> bool;
    let mut _5: std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let mut _6: std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let mut _7: std::sync::Arc<dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync>;
    let mut _8: std::sync::Arc<impl Tunables + Send + Sync + 'static>;
    let mut _9: impl Tunables + Send + Sync + 'static;
    let mut _10: std::sync::Arc<std::sync::RwLock<std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>>;
    let mut _11: std::sync::RwLock<std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>;
    let mut _12: std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>;
    let mut _13: bool;

    bb0: {
        _13 = const false;
        _13 = const true;
        _4 = wasmer_engine::is_wasm_pc as fn(usize) -> bool (PointerCoercion(ReifyFnPointer));
        _3 = init_traps(move _4) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _6 = <E as Engine>::cloned(_1) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _5 = move _6;
        _13 = const false;
        _9 = move _2;
        _8 = Arc::<impl Tunables + Send + Sync + 'static>::new(move _9) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _7 = move _8 as std::sync::Arc<dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync> (PointerCoercion(Unsize));
        _12 = Option::<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>::None;
        _11 = RwLock::<Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>>::new(move _12) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _10 = Arc::<RwLock<Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>>>::new(move _11) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = Store { engine: move _5, tunables: move _7, trap_handler: move _10 };
        return;
    }

    bb6 (cleanup): {
        drop(_7) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_5) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_13) -> [0: bb8, otherwise: bb9];
    }
}

fn store::<impl at lib/api/src/store.rs:29:1: 29:11>::tunables(_1: &Store) -> &dyn Tunables {
    debug self => _1;
    let mut _0: &dyn wasmer_engine::Tunables;
    let _2: &dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync;
    let mut _3: &std::sync::Arc<dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync>;

    bb0: {
        _3 = &((*_1).1: std::sync::Arc<dyn wasmer_engine::Tunables + std::marker::Send + std::marker::Sync>);
        _2 = <Arc<dyn Tunables + Send + Sync> as AsRef<dyn Tunables + Send + Sync>>::as_ref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _2 as &dyn wasmer_engine::Tunables (PointerCoercion(Unsize));
        return;
    }
}

fn store::<impl at lib/api/src/store.rs:29:1: 29:11>::engine(_1: &Store) -> &Arc<dyn Engine + Send + Sync> {
    debug self => _1;
    let mut _0: &std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;

    bb0: {
        _0 = &((*_1).0: std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>);
        return;
    }
}

fn store::<impl at lib/api/src/store.rs:29:1: 29:11>::same(_1: &Store, _2: &Store) -> bool {
    debug a => _1;
    debug b => _2;
    let mut _0: bool;
    let mut _3: &&wasmer_engine::EngineId;
    let _4: &wasmer_engine::EngineId;
    let _5: &dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync;
    let mut _6: &std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let mut _7: &&wasmer_engine::EngineId;
    let _8: &wasmer_engine::EngineId;
    let _9: &dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync;
    let mut _10: &std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;

    bb0: {
        _6 = &((*_1).0: std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>);
        _5 = <Arc<dyn Engine + Send + Sync> as Deref>::deref(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <dyn Engine + Send + Sync as Engine>::id(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _10 = &((*_2).0: std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>);
        _9 = <Arc<dyn Engine + Send + Sync> as Deref>::deref(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = <dyn Engine + Send + Sync as Engine>::id(_9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = &_8;
        _0 = <&EngineId as PartialEq>::eq(move _3, move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn store::<impl at lib/api/src/store.rs:78:1: 78:25>::eq(_1: &Store, _2: &Store) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = Store::same(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn store::<impl at lib/api/src/store.rs:84:1: 84:34>::as_any(_1: &Store) -> &dyn Any {
    debug self => _1;
    let mut _0: &dyn std::any::Any;

    bb0: {
        _0 = _1 as &dyn std::any::Any (PointerCoercion(Unsize));
        return;
    }
}

fn store::<impl at lib/api/src/store.rs:84:1: 84:34>::custom_trap_handler(_1: &Store, _2: &dyn for<'a> Fn(&'a dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool) -> bool) -> bool {
    debug self => _1;
    debug call => _2;
    let mut _0: bool;
    let mut _3: &std::option::Option<&std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>;
    let _4: std::option::Option<&std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>;
    let _5: &std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>;
    let mut _6: &std::sync::RwLockReadGuard<'_, std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>;
    let _7: std::sync::RwLockReadGuard<'_, std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>;
    let mut _8: std::result::Result<std::sync::RwLockReadGuard<'_, std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>>>;
    let _9: &std::sync::RwLock<std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>;
    let mut _10: &std::sync::Arc<std::sync::RwLock<std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>>;
    let mut _11: isize;
    let mut _13: (&dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool,);
    let mut _14: &dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool;
    scope 1 {
        debug handler => _12;
        let _12: &std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>;
    }

    bb0: {
        _10 = &((*_1).2: std::sync::Arc<std::sync::RwLock<std::option::Option<std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>>>>);
        _9 = <Arc<RwLock<Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>>> as Deref>::deref(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = RwLock::<Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>>::read(_9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = Result::<RwLockReadGuard<'_, Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>>, PoisonError<RwLockReadGuard<'_, Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>>>>::unwrap(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = &_7;
        _5 = <RwLockReadGuard<'_, Option<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>> as Deref>::deref(move _6) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _4 = Option::<Box<dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool>>::as_ref(_5) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _3 = &_4;
        _11 = discriminant((*_3));
        switchInt(move _11) -> [1: bb6, otherwise: bb7];
    }

    bb6: {
        _12 = (((*_3) as Some).0: &std::boxed::Box<dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool>);
        _14 = _12 as &dyn std::ops::Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const std::ffi::c_void) -> bool (PointerCoercion(Unsize));
        _13 = (move _14,);
        _0 = <dyn for<'a> Fn(&'a dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool) -> bool as Fn<(&dyn Fn(i32, *const libc::unix::linux_like::linux::gnu::b64::x86_64::siginfo_t, *const c_void) -> bool,)>>::call(_2, move _13) -> [return: bb12, unwind: bb10];
    }

    bb7: {
        _0 = const false;
        goto -> bb8;
    }

    bb8: {
        drop(_7) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_7) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        goto -> bb8;
    }
}

fn store::<impl at lib/api/src/store.rs:106:1: 106:23>::default() -> Store {
    let mut _0: store::Store;
    let _1: wasmer_compiler_cranelift::Cranelift;
    let _4: &wasmer_compiler::Target;
    let mut _5: &wasmer_engine_universal::UniversalEngine;
    let _6: &wasmer_engine_universal::UniversalEngine;
    scope 1 {
        debug config => _1;
        let _2: wasmer_engine_universal::UniversalEngine;
        scope 2 {
            debug engine => _2;
            let _3: tunables::BaseTunables;
            scope 3 {
                debug tunables => _3;
            }
        }
    }

    bb0: {
        _1 = get_config() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = get_engine::<Cranelift>(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = &_2;
        _4 = <UniversalEngine as Engine>::target(move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _3 = BaseTunables::for_target(_4) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _6 = &_2;
        _0 = Store::new_with_tunables::<UniversalEngine, BaseTunables>(_6, move _3) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn get_config() -> Cranelift {
    let mut _0: wasmer_compiler_cranelift::Cranelift;

    bb0: {
        _0 = <Cranelift as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn get_engine(_1: impl CompilerConfig + 'static) -> UniversalEngine {
    debug config => _1;
    let mut _0: wasmer_engine_universal::UniversalEngine;
    let mut _2: wasmer_engine_universal::Universal;

    bb0: {
        _2 = Universal::new::<impl CompilerConfig + 'static>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Universal::engine(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn store::<impl at lib/api/src/store.rs:148:1: 148:26>::fmt(_1: &Store, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &mut std::fmt::DebugStruct<'_, '_>;
    let mut _4: std::fmt::DebugStruct<'_, '_>;
    let _5: &str;

    bb0: {
        _5 = const "Store";
        _4 = Formatter::<'_>::debug_struct(_2, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _4;
        _0 = DebugStruct::<'_, '_>::finish(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn tunables::<impl at lib/api/src/tunables.rs:23:10: 23:15>::clone(_1: &BaseTunables) -> BaseTunables {
    debug self => _1;
    let mut _0: tunables::BaseTunables;
    let mut _2: wasmer_types::Pages;
    let _3: &wasmer_types::Pages;
    let mut _4: u64;
    let _5: &u64;
    let mut _6: u64;
    let _7: &u64;

    bb0: {
        _3 = &((*_1).0: wasmer_types::Pages);
        _2 = <Pages as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: u64);
        _4 = (*_5);
        _7 = &((*_1).2: u64);
        _6 = (*_7);
        _0 = BaseTunables { static_memory_bound: move _2, static_memory_offset_guard_size: move _4, dynamic_memory_offset_guard_size: move _6 };
        return;
    }
}

fn tunables::<impl at lib/api/src/tunables.rs:23:17: 23:28>::size_of_val(_1: &BaseTunables, _2: &mut dyn MemoryUsageTracker) -> usize {
    debug self => _1;
    debug visited => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let _10: &wasmer_types::Pages;
    let mut _11: (usize, bool);
    let mut _12: usize;
    let _13: &wasmer_types::Pages;
    let mut _14: (usize, bool);
    let mut _15: usize;
    let _16: &u64;
    let mut _17: (usize, bool);
    let mut _18: usize;
    let _19: &u64;
    let mut _20: (usize, bool);
    let mut _21: usize;
    let _22: &u64;
    let mut _23: (usize, bool);
    let mut _24: usize;
    let _25: &u64;
    let mut _26: (usize, bool);

    bb0: {
        _8 = std::mem::size_of_val::<BaseTunables>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &((*_1).0: wasmer_types::Pages);
        _9 = <Pages as MemoryUsage>::size_of_val(_10, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = CheckedAdd(_8, _9);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _9) -> [success: bb3, unwind continue];
    }

    bb3: {
        _7 = move (_11.0: usize);
        _13 = &((*_1).0: wasmer_types::Pages);
        _12 = std::mem::size_of_val::<Pages>(_13) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = CheckedSub(_7, _12);
        assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _7, move _12) -> [success: bb5, unwind continue];
    }

    bb5: {
        _6 = move (_14.0: usize);
        _16 = &((*_1).1: u64);
        _15 = <u64 as MemoryUsage>::size_of_val(_16, _2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = CheckedAdd(_6, _15);
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _15) -> [success: bb7, unwind continue];
    }

    bb7: {
        _5 = move (_17.0: usize);
        _19 = &((*_1).1: u64);
        _18 = std::mem::size_of_val::<u64>(_19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = CheckedSub(_5, _18);
        assert(!move (_20.1: bool), "attempt to compute `{} - {}`, which would overflow", move _5, move _18) -> [success: bb9, unwind continue];
    }

    bb9: {
        _4 = move (_20.0: usize);
        _22 = &((*_1).2: u64);
        _21 = <u64 as MemoryUsage>::size_of_val(_22, _2) -> [return: bb10, unwind continue];
    }

    bb10: {
        _23 = CheckedAdd(_4, _21);
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _21) -> [success: bb11, unwind continue];
    }

    bb11: {
        _3 = move (_23.0: usize);
        _25 = &((*_1).2: u64);
        _24 = std::mem::size_of_val::<u64>(_25) -> [return: bb12, unwind continue];
    }

    bb12: {
        _26 = CheckedSub(_3, _24);
        assert(!move (_26.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _24) -> [success: bb13, unwind continue];
    }

    bb13: {
        _0 = move (_26.0: usize);
        return;
    }
}

fn tunables::<impl at lib/api/src/tunables.rs:35:1: 35:18>::for_target(_1: &Target) -> BaseTunables {
    debug target => _1;
    let mut _0: tunables::BaseTunables;
    let _2: &wasmer_compiler::Triple;
    let mut _4: std::result::Result<wasmer_compiler::PointerWidth, ()>;
    let mut _7: (wasmer_types::Pages, u64);
    let mut _8: isize;
    let mut _9: wasmer_types::Pages;
    let mut _10: wasmer_types::Pages;
    let mut _11: wasmer_types::Pages;
    let mut _13: isize;
    let mut _14: wasmer_types::Pages;
    let mut _15: wasmer_types::Pages;
    let mut _16: wasmer_types::Pages;
    let mut _17: u64;
    let mut _18: u64;
    let mut _19: wasmer_types::Pages;
    let mut _20: u64;
    scope 1 {
        debug triple => _2;
        let _3: wasmer_compiler::PointerWidth;
        scope 2 {
            debug pointer_width => _3;
            let mut _5: wasmer_types::Pages;
            let mut _6: u64;
            scope 3 {
                debug static_memory_bound => _5;
                debug static_memory_offset_guard_size => _6;
                let _12: u64;
                scope 4 {
                    debug dynamic_memory_offset_guard_size => const 65536_u64;
                    scope 5 {
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Target::triple(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Triple::pointer_width(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = Result::<PointerWidth, ()>::unwrap(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = discriminant(_3);
        switchInt(move _8) -> [0: bb6, 1: bb8, 2: bb4, otherwise: bb5];
    }

    bb4: {
        _11 = <u32 as Into<Pages>>::into(const 65536_u32) -> [return: bb10, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = <u32 as Into<Pages>>::into(const 1024_u32) -> [return: bb7, unwind continue];
    }

    bb7: {
        _7 = (move _9, const 4096_u64);
        goto -> bb11;
    }

    bb8: {
        _10 = <u32 as Into<Pages>>::into(const 16384_u32) -> [return: bb9, unwind continue];
    }

    bb9: {
        _7 = (move _10, const 65536_u64);
        goto -> bb11;
    }

    bb10: {
        _7 = (move _11, const 2147483648_u64);
        goto -> bb11;
    }

    bb11: {
        _5 = (_7.0: wasmer_types::Pages);
        _6 = (_7.1: u64);
        _12 = const 65536_u64;
        _13 = discriminant(((*_2).2: wasmer_compiler::OperatingSystem));
        switchInt(move _13) -> [28: bb12, otherwise: bb16];
    }

    bb12: {
        _15 = _5;
        _16 = <u32 as Into<Pages>>::into(const 256_u32) -> [return: bb13, unwind continue];
    }

    bb13: {
        _14 = std::cmp::min::<Pages>(move _15, move _16) -> [return: bb14, unwind continue];
    }

    bb14: {
        _5 = move _14;
        _18 = _6;
        _17 = std::cmp::min::<u64>(move _18, const 65536_u64) -> [return: bb15, unwind continue];
    }

    bb15: {
        _6 = move _17;
        goto -> bb16;
    }

    bb16: {
        _19 = _5;
        _20 = _6;
        _0 = BaseTunables { static_memory_bound: move _19, static_memory_offset_guard_size: move _20, dynamic_memory_offset_guard_size: _12 };
        return;
    }
}

fn tunables::<impl at lib/api/src/tunables.rs:72:1: 72:31>::memory_style(_1: &BaseTunables, _2: &wasmer_types::MemoryType) -> MemoryStyle {
    debug self => _1;
    debug memory => _2;
    let mut _0: wasmer_vm::MemoryStyle;
    let _3: wasmer_types::Pages;
    let mut _4: std::option::Option<wasmer_types::Pages>;
    let mut _5: bool;
    let mut _6: &wasmer_types::Pages;
    let mut _7: &wasmer_types::Pages;
    let mut _8: wasmer_types::Pages;
    let mut _9: u64;
    let mut _10: u64;
    scope 1 {
        debug maximum => _3;
    }

    bb0: {
        _4 = ((*_2).1: std::option::Option<wasmer_types::Pages>);
        _3 = Option::<Pages>::unwrap_or_else::<fn() -> Pages {Pages::max_value}>(move _4, Pages::max_value) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_3;
        _7 = &((*_1).0: wasmer_types::Pages);
        _5 = <Pages as PartialOrd>::le(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = ((*_1).0: wasmer_types::Pages);
        _9 = ((*_1).1: u64);
        _0 = wasmer_vm::MemoryStyle::Static { bound: move _8, offset_guard_size: move _9 };
        goto -> bb5;
    }

    bb4: {
        _10 = ((*_1).2: u64);
        _0 = wasmer_vm::MemoryStyle::Dynamic { offset_guard_size: move _10 };
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn tunables::<impl at lib/api/src/tunables.rs:72:1: 72:31>::table_style(_1: &BaseTunables, _2: &wasmer_types::TableType) -> TableStyle {
    debug self => _1;
    debug _table => _2;
    let mut _0: wasmer_vm::TableStyle;

    bb0: {
        return;
    }
}

fn tunables::<impl at lib/api/src/tunables.rs:72:1: 72:31>::create_host_memory(_1: &BaseTunables, _2: &wasmer_types::MemoryType, _3: &MemoryStyle) -> Result<Arc<dyn wasmer_vm::Memory>, MemoryError> {
    debug self => _1;
    debug ty => _2;
    debug style => _3;
    let mut _0: std::result::Result<std::sync::Arc<dyn wasmer_vm::Memory>, wasmer_vm::MemoryError>;
    let mut _4: std::sync::Arc<dyn wasmer_vm::Memory>;
    let mut _5: std::sync::Arc<wasmer_vm::LinearMemory>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::MemoryError>, wasmer_vm::LinearMemory>;
    let mut _7: std::result::Result<wasmer_vm::LinearMemory, wasmer_vm::MemoryError>;
    let _8: &&wasmer_types::MemoryType;
    let _9: &&wasmer_vm::MemoryStyle;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, wasmer_vm::MemoryError>;
    let _12: wasmer_vm::LinearMemory;
    let mut _13: &wasmer_types::MemoryType;
    let mut _14: &wasmer_vm::MemoryStyle;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }

    bb0: {
        _8 = &_2;
        _13 = deref_copy (*_8);
        _9 = &_3;
        _14 = deref_copy (*_9);
        _7 = LinearMemory::new(_13, _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <Result<LinearMemory, MemoryError> as std::ops::Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _12 = move ((_6 as Continue).0: wasmer_vm::LinearMemory);
        _5 = Arc::<LinearMemory>::new(move _12) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::MemoryError>);
        _0 = <Result<Arc<dyn wasmer_vm::Memory>, MemoryError> as FromResidual<Result<Infallible, MemoryError>>>::from_residual(move _11) -> [return: bb7, unwind continue];
    }

    bb6: {
        _4 = move _5 as std::sync::Arc<dyn wasmer_vm::Memory> (PointerCoercion(Unsize));
        _0 = Result::<Arc<dyn wasmer_vm::Memory>, MemoryError>::Ok(move _4);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn tunables::<impl at lib/api/src/tunables.rs:72:1: 72:31>::create_vm_memory(_1: &BaseTunables, _2: &wasmer_types::MemoryType, _3: &MemoryStyle, _4: NonNull<VMMemoryDefinition>) -> Result<Arc<dyn wasmer_vm::Memory>, MemoryError> {
    debug self => _1;
    debug ty => _2;
    debug style => _3;
    debug vm_definition_location => _4;
    let mut _0: std::result::Result<std::sync::Arc<dyn wasmer_vm::Memory>, wasmer_vm::MemoryError>;
    let mut _5: std::sync::Arc<dyn wasmer_vm::Memory>;
    let mut _6: std::sync::Arc<wasmer_vm::LinearMemory>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, wasmer_vm::MemoryError>, wasmer_vm::LinearMemory>;
    let mut _8: std::result::Result<wasmer_vm::LinearMemory, wasmer_vm::MemoryError>;
    let _9: &&wasmer_types::MemoryType;
    let _10: &&wasmer_vm::MemoryStyle;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, wasmer_vm::MemoryError>;
    let _13: wasmer_vm::LinearMemory;
    let mut _14: &wasmer_types::MemoryType;
    let mut _15: &wasmer_vm::MemoryStyle;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }

    bb0: {
        _9 = &_2;
        _14 = deref_copy (*_9);
        _10 = &_3;
        _15 = deref_copy (*_10);
        _8 = LinearMemory::from_definition(_14, _15, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = <Result<LinearMemory, MemoryError> as std::ops::Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _13 = move ((_7 as Continue).0: wasmer_vm::LinearMemory);
        _6 = Arc::<LinearMemory>::new(move _13) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, wasmer_vm::MemoryError>);
        _0 = <Result<Arc<dyn wasmer_vm::Memory>, MemoryError> as FromResidual<Result<Infallible, MemoryError>>>::from_residual(move _12) -> [return: bb7, unwind continue];
    }

    bb6: {
        _5 = move _6 as std::sync::Arc<dyn wasmer_vm::Memory> (PointerCoercion(Unsize));
        _0 = Result::<Arc<dyn wasmer_vm::Memory>, MemoryError>::Ok(move _5);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn tunables::<impl at lib/api/src/tunables.rs:72:1: 72:31>::create_host_table(_1: &BaseTunables, _2: &wasmer_types::TableType, _3: &TableStyle) -> Result<Arc<dyn wasmer_vm::Table>, String> {
    debug self => _1;
    debug ty => _2;
    debug style => _3;
    let mut _0: std::result::Result<std::sync::Arc<dyn wasmer_vm::Table>, std::string::String>;
    let mut _4: std::sync::Arc<dyn wasmer_vm::Table>;
    let mut _5: std::sync::Arc<wasmer_vm::LinearTable>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, wasmer_vm::LinearTable>;
    let mut _7: std::result::Result<wasmer_vm::LinearTable, std::string::String>;
    let _8: &&wasmer_types::TableType;
    let _9: &&wasmer_vm::TableStyle;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, std::string::String>;
    let _12: wasmer_vm::LinearTable;
    let mut _13: &wasmer_types::TableType;
    let mut _14: &wasmer_vm::TableStyle;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }

    bb0: {
        _8 = &_2;
        _13 = deref_copy (*_8);
        _9 = &_3;
        _14 = deref_copy (*_9);
        _7 = LinearTable::new(_13, _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <Result<LinearTable, String> as std::ops::Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _12 = move ((_6 as Continue).0: wasmer_vm::LinearTable);
        _5 = Arc::<LinearTable>::new(move _12) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Arc<dyn wasmer_vm::Table>, String> as FromResidual<Result<Infallible, String>>>::from_residual(move _11) -> [return: bb7, unwind continue];
    }

    bb6: {
        _4 = move _5 as std::sync::Arc<dyn wasmer_vm::Table> (PointerCoercion(Unsize));
        _0 = Result::<Arc<dyn wasmer_vm::Table>, String>::Ok(move _4);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn tunables::<impl at lib/api/src/tunables.rs:72:1: 72:31>::create_vm_table(_1: &BaseTunables, _2: &wasmer_types::TableType, _3: &TableStyle, _4: NonNull<VMTableDefinition>) -> Result<Arc<dyn wasmer_vm::Table>, String> {
    debug self => _1;
    debug ty => _2;
    debug style => _3;
    debug vm_definition_location => _4;
    let mut _0: std::result::Result<std::sync::Arc<dyn wasmer_vm::Table>, std::string::String>;
    let mut _5: std::sync::Arc<dyn wasmer_vm::Table>;
    let mut _6: std::sync::Arc<wasmer_vm::LinearTable>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::string::String>, wasmer_vm::LinearTable>;
    let mut _8: std::result::Result<wasmer_vm::LinearTable, std::string::String>;
    let _9: &&wasmer_types::TableType;
    let _10: &&wasmer_vm::TableStyle;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::string::String>;
    let _13: wasmer_vm::LinearTable;
    let mut _14: &wasmer_types::TableType;
    let mut _15: &wasmer_vm::TableStyle;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }

    bb0: {
        _9 = &_2;
        _14 = deref_copy (*_9);
        _10 = &_3;
        _15 = deref_copy (*_10);
        _8 = LinearTable::from_definition(_14, _15, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = <Result<LinearTable, String> as std::ops::Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _13 = move ((_7 as Continue).0: wasmer_vm::LinearTable);
        _6 = Arc::<LinearTable>::new(move _13) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, std::string::String>);
        _0 = <Result<Arc<dyn wasmer_vm::Table>, String> as FromResidual<Result<Infallible, String>>>::from_residual(move _12) -> [return: bb7, unwind continue];
    }

    bb6: {
        _5 = move _6 as std::sync::Arc<dyn wasmer_vm::Table> (PointerCoercion(Unsize));
        _0 = Result::<Arc<dyn wasmer_vm::Table>, String>::Ok(move _5);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn types::<impl at lib/api/src/types.rs:19:1: 19:25>::comes_from_same_store(_1: &Value<function::Function>, _2: &Store) -> bool {
    debug self => _1;
    debug store => _2;
    let mut _0: bool;
    let mut _3: isize;
    let mut _4: isize;
    let _5: &externals::function::Function;
    let _6: &store::Store;
    scope 1 {
        debug f => _5;
    }

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb7, 1: bb7, 2: bb7, 3: bb7, 4: bb6, 5: bb1, 6: bb7, otherwise: bb2];
    }

    bb1: {
        _3 = discriminant((((*_1) as FuncRef).0: std::option::Option<externals::function::Function>));
        switchInt(move _3) -> [0: bb3, 1: bb4, otherwise: bb2];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const true;
        goto -> bb8;
    }

    bb4: {
        _5 = &(((((*_1) as FuncRef).0: std::option::Option<externals::function::Function>) as Some).0: externals::function::Function);
        _6 = function::Function::store(_5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = Store::same(_2, _6) -> [return: bb8, unwind continue];
    }

    bb6: {
        _0 = const true;
        goto -> bb8;
    }

    bb7: {
        _0 = const true;
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn types::<impl at lib/api/src/types.rs:31:1: 31:28>::from(_1: function::Function) -> Value<function::Function> {
    debug val => _1;
    let mut _0: wasmer_types::Value<externals::function::Function>;
    let mut _2: std::option::Option<externals::function::Function>;

    bb0: {
        _2 = Option::<function::Function>::Some(move _1);
        _0 = Value::<function::Function>::FuncRef(move _2);
        return;
    }
}

fn types::<impl at lib/api/src/types.rs:49:1: 49:24>::into_vm_funcref(_1: &Value<function::Function>, _2: &Store) -> Result<VMFuncRef, RuntimeError> {
    debug self => _1;
    debug store => _2;
    let mut _0: std::result::Result<wasmer_vm::VMFuncRef, wasmer_engine::RuntimeError>;
    let mut _3: bool;
    let mut _4: wasmer_engine::RuntimeError;
    let mut _5: wasmer_vm::VMFuncRef;
    let mut _6: isize;
    let mut _7: isize;
    let _8: &externals::function::Function;
    let mut _9: wasmer_engine::RuntimeError;
    scope 1 {
        debug f => _8;
    }

    bb0: {
        _3 = <Value<function::Function> as StoreObject>::comes_from_same_store(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _7 = discriminant((*_1));
        switchInt(move _7) -> [5: bb6, otherwise: bb5];
    }

    bb3: {
        _4 = RuntimeError::new::<&str>(const "cross-`Store` values are not supported") -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Result::<VMFuncRef, RuntimeError>::Err(move _4);
        goto -> bb11;
    }

    bb5: {
        _9 = RuntimeError::new::<&str>(const "val is not func ref") -> [return: bb9, unwind continue];
    }

    bb6: {
        _6 = discriminant((((*_1) as FuncRef).0: std::option::Option<externals::function::Function>));
        switchInt(move _6) -> [0: bb7, 1: bb8, otherwise: bb12];
    }

    bb7: {
        _5 = VMFuncRef::null() -> [return: bb10, unwind continue];
    }

    bb8: {
        _8 = &(((((*_1) as FuncRef).0: std::option::Option<externals::function::Function>) as Some).0: externals::function::Function);
        _5 = function::Function::vm_funcref(_8) -> [return: bb10, unwind continue];
    }

    bb9: {
        _0 = Result::<VMFuncRef, RuntimeError>::Err(move _9);
        goto -> bb11;
    }

    bb10: {
        _0 = Result::<VMFuncRef, RuntimeError>::Ok(move _5);
        goto -> bb11;
    }

    bb11: {
        return;
    }

    bb12: {
        unreachable;
    }
}

fn types::<impl at lib/api/src/types.rs:49:1: 49:24>::from_vm_funcref(_1: VMFuncRef, _2: &Store) -> Value<function::Function> {
    debug func_ref => _1;
    debug store => _2;
    let mut _0: wasmer_types::Value<externals::function::Function>;
    let mut _3: bool;
    let mut _4: &wasmer_vm::VMFuncRef;
    let mut _5: std::option::Option<externals::function::Function>;
    let mut _7: &*const wasmer_vm::VMCallerCheckedAnyfunc;
    let mut _8: &wasmer_vm::VMFuncRef;
    let _9: &wasmer_vm::VMCallerCheckedAnyfunc;
    let mut _11: std::option::Option<wasmer_types::FunctionType>;
    let _12: &dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync;
    let _13: &std::sync::Arc<dyn wasmer_engine::Engine + std::marker::Send + std::marker::Sync>;
    let mut _14: wasmer_vm::VMSharedSignatureIndex;
    let _15: &str;
    let mut _17: std::option::Option<std::sync::Arc<wasmer_engine::ExportFunctionMetadata>>;
    let mut _18: wasmer_vm::VMFunction;
    let mut _19: *const wasmer_vm::VMFunctionBody;
    let mut _20: wasmer_vm::VMFunctionKind;
    let mut _21: wasmer_vm::VMFunctionEnvironment;
    let mut _22: std::option::Option<unsafe extern "C" fn(*mut wasmer_vm::VMContext, *const wasmer_vm::VMFunctionBody, *mut u128)>;
    let mut _23: std::option::Option<wasmer_vm::WeakOrStrongInstanceRef>;
    let mut _25: std::option::Option<externals::function::Function>;
    scope 1 {
        debug item => _9;
        let _10: wasmer_types::FunctionType;
        scope 4 {
            debug signature => _10;
            let _16: wasmer_engine::ExportFunction;
            scope 5 {
                debug export => _16;
                let _24: externals::function::Function;
                scope 6 {
                    debug f => _24;
                }
            }
        }
    }
    scope 2 {
        let _6: *const wasmer_vm::VMCallerCheckedAnyfunc;
        scope 3 {
            debug anyfunc => _6;
        }
    }

    bb0: {
        _4 = &_1;
        _3 = VMFuncRef::is_null(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _5 = Option::<function::Function>::None;
        _0 = Value::<function::Function>::FuncRef(move _5);
        goto -> bb10;
    }

    bb3: {
        _8 = &_1;
        _7 = <VMFuncRef as Deref>::deref(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = (*_7);
        _9 = &(*_6);
        _13 = Store::engine(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = <Arc<dyn Engine + Send + Sync> as Deref>::deref(_13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _14 = ((*_9).1: wasmer_vm::VMSharedSignatureIndex);
        _11 = <dyn Engine + Send + Sync as Engine>::lookup_signature(_12, move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = const "Signature not found in store";
        _10 = Option::<FunctionType>::expect(move _11, _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = Option::<Arc<ExportFunctionMetadata>>::None;
        _19 = ((*_9).0: *const wasmer_vm::VMFunctionBody);
        _20 = wasmer_vm::VMFunctionKind::Static;
        _21 = ((*_9).2: wasmer_vm::VMFunctionEnvironment);
        _22 = Option::<unsafe extern "C" fn(*mut VMContext, *const VMFunctionBody, *mut u128)>::None;
        _23 = Option::<WeakOrStrongInstanceRef>::None;
        _18 = VMFunction { address: move _19, vmctx: move _21, signature: move _10, kind: move _20, call_trampoline: move _22, instance_ref: move _23 };
        _16 = ExportFunction { vm_function: move _18, metadata: move _17 };
        _24 = function::Function::from_vm_export(_2, move _16) -> [return: bb9, unwind continue];
    }

    bb9: {
        _25 = Option::<function::Function>::Some(move _24);
        _0 = Value::<function::Function>::FuncRef(move _25);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn types::<impl at lib/api/src/types.rs:49:1: 49:24>::into_table_reference(_1: &Value<function::Function>, _2: &Store) -> Result<TableElement, RuntimeError> {
    debug self => _1;
    debug store => _2;
    let mut _0: std::result::Result<wasmer_vm::TableElement, wasmer_engine::RuntimeError>;
    let mut _3: bool;
    let mut _4: wasmer_engine::RuntimeError;
    let mut _5: wasmer_vm::TableElement;
    let mut _6: isize;
    let mut _7: isize;
    let _8: &wasmer_types::ExternRef;
    let mut _9: wasmer_types::ExternRef;
    let mut _10: wasmer_types::ExternRef;
    let mut _11: wasmer_vm::VMFuncRef;
    let _12: &externals::function::Function;
    let mut _13: wasmer_vm::VMFuncRef;
    let mut _14: wasmer_engine::RuntimeError;
    scope 1 {
        debug extern_ref => _8;
    }
    scope 2 {
        debug f => _12;
    }

    bb0: {
        _3 = <Value<function::Function> as StoreObject>::comes_from_same_store(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _7 = discriminant((*_1));
        switchInt(move _7) -> [4: bb7, 5: bb6, otherwise: bb5];
    }

    bb3: {
        _4 = RuntimeError::new::<&str>(const "cross-`Store` values are not supported") -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Result::<TableElement, RuntimeError>::Err(move _4);
        goto -> bb16;
    }

    bb5: {
        _14 = RuntimeError::new::<&str>(const "val is not reference") -> [return: bb14, unwind continue];
    }

    bb6: {
        _6 = discriminant((((*_1) as FuncRef).0: std::option::Option<externals::function::Function>));
        switchInt(move _6) -> [0: bb10, 1: bb12, otherwise: bb17];
    }

    bb7: {
        _8 = &(((*_1) as ExternRef).0: wasmer_types::ExternRef);
        _10 = <wasmer_types::ExternRef as Clone>::clone(_8) -> [return: bb8, unwind continue];
    }

    bb8: {
        _9 = <wasmer_types::ExternRef as Into<wasmer_types::ExternRef>>::into(move _10) -> [return: bb9, unwind continue];
    }

    bb9: {
        _5 = wasmer_vm::TableElement::ExternRef(move _9);
        goto -> bb15;
    }

    bb10: {
        _11 = VMFuncRef::null() -> [return: bb11, unwind continue];
    }

    bb11: {
        _5 = wasmer_vm::TableElement::FuncRef(move _11);
        goto -> bb15;
    }

    bb12: {
        _12 = &(((((*_1) as FuncRef).0: std::option::Option<externals::function::Function>) as Some).0: externals::function::Function);
        _13 = function::Function::vm_funcref(_12) -> [return: bb13, unwind continue];
    }

    bb13: {
        _5 = wasmer_vm::TableElement::FuncRef(move _13);
        goto -> bb15;
    }

    bb14: {
        _0 = Result::<TableElement, RuntimeError>::Err(move _14);
        goto -> bb16;
    }

    bb15: {
        _0 = Result::<TableElement, RuntimeError>::Ok(move _5);
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17: {
        unreachable;
    }
}

fn types::<impl at lib/api/src/types.rs:49:1: 49:24>::from_table_reference(_1: TableElement, _2: &Store) -> Value<function::Function> {
    debug item => _1;
    debug store => _2;
    let mut _0: wasmer_types::Value<externals::function::Function>;
    let mut _3: isize;
    let _4: wasmer_vm::VMFuncRef;
    let _5: wasmer_types::ExternRef;
    let mut _6: wasmer_types::ExternRef;
    scope 1 {
        debug f => _4;
    }
    scope 2 {
        debug extern_ref => _5;
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _5 = move ((_1 as ExternRef).0: wasmer_types::ExternRef);
        _6 = <wasmer_types::ExternRef as Into<wasmer_types::ExternRef>>::into(move _5) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = ((_1 as FuncRef).0: wasmer_vm::VMFuncRef);
        _0 = <Value<function::Function> as ValFuncRef>::from_vm_funcref(_4, _2) -> [return: bb5, unwind continue];
    }

    bb4: {
        _0 = Value::<function::Function>::ExternRef(move _6);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn is_wasm(_1: impl AsRef<[u8]>) -> bool {
    debug bytes => _1;
    let mut _0: bool;
    let _2: &[u8];
    let mut _3: &impl AsRef<[u8]>;
    let mut _4: &[u8];
    let _5: &[u8; 4];

    bb0: {
        _3 = &_1;
        _2 = <impl AsRef<[u8]> as AsRef<[u8]>>::as_ref(move _3) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _5 = const b"\x00asm";
        _4 = _5 as &[u8] (PointerCoercion(Unsize));
        _0 = core::slice::<impl [u8]>::starts_with(_2, move _4) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

alloc171 (size: 4, align: 1) {
    00 61 73 6d                                     │ .asm
}

const VERSION: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "2.0.0";
        return;
    }
}

fn HostEnvInitError::Export(_1: ExportError) -> HostEnvInitError {
    let mut _0: env::HostEnvInitError;

    bb0: {
        _0 = HostEnvInitError::Export(move _1);
        return;
    }
}

// MIR FOR CTFE
fn HostEnvInitError::Export(_1: ExportError) -> HostEnvInitError {
    let mut _0: env::HostEnvInitError;

    bb0: {
        _0 = HostEnvInitError::Export(move _1);
        return;
    }
}

fn ExportError::Missing(_1: String) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::Missing(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ExportError::Missing(_1: String) -> ExportError {
    let mut _0: exports::ExportError;

    bb0: {
        _0 = ExportError::Missing(move _1);
        return;
    }
}

fn S0() -> S0 {
    let mut _0: externals::function::inner::S0;

    bb0: {
        _0 = S0;
        return;
    }
}

// MIR FOR CTFE
fn S0() -> S0 {
    let mut _0: externals::function::inner::S0;

    bb0: {
        _0 = S0;
        return;
    }
}

fn S1(_1: <A1 as FromToNativeWasmType>::Native) -> S1<A1> {
    let mut _0: externals::function::inner::S1<A1>;

    bb0: {
        _0 = S1::<A1>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn S1(_1: <A1 as FromToNativeWasmType>::Native) -> S1<A1> {
    let mut _0: externals::function::inner::S1<A1>;

    bb0: {
        _0 = S1::<A1>(move _1);
        return;
    }
}

fn S2(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native) -> S2<A1, A2> {
    let mut _0: externals::function::inner::S2<A1, A2>;

    bb0: {
        _0 = S2::<A1, A2>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn S2(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native) -> S2<A1, A2> {
    let mut _0: externals::function::inner::S2<A1, A2>;

    bb0: {
        _0 = S2::<A1, A2>(move _1, move _2);
        return;
    }
}

fn S3(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native) -> S3<A1, A2, A3> {
    let mut _0: externals::function::inner::S3<A1, A2, A3>;

    bb0: {
        _0 = S3::<A1, A2, A3>(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn S3(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native) -> S3<A1, A2, A3> {
    let mut _0: externals::function::inner::S3<A1, A2, A3>;

    bb0: {
        _0 = S3::<A1, A2, A3>(move _1, move _2, move _3);
        return;
    }
}

fn S4(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native) -> S4<A1, A2, A3, A4> {
    let mut _0: externals::function::inner::S4<A1, A2, A3, A4>;

    bb0: {
        _0 = S4::<A1, A2, A3, A4>(move _1, move _2, move _3, move _4);
        return;
    }
}

// MIR FOR CTFE
fn S4(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native) -> S4<A1, A2, A3, A4> {
    let mut _0: externals::function::inner::S4<A1, A2, A3, A4>;

    bb0: {
        _0 = S4::<A1, A2, A3, A4>(move _1, move _2, move _3, move _4);
        return;
    }
}

fn S5(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native) -> S5<A1, A2, A3, A4, A5> {
    let mut _0: externals::function::inner::S5<A1, A2, A3, A4, A5>;

    bb0: {
        _0 = S5::<A1, A2, A3, A4, A5>(move _1, move _2, move _3, move _4, move _5);
        return;
    }
}

// MIR FOR CTFE
fn S5(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native) -> S5<A1, A2, A3, A4, A5> {
    let mut _0: externals::function::inner::S5<A1, A2, A3, A4, A5>;

    bb0: {
        _0 = S5::<A1, A2, A3, A4, A5>(move _1, move _2, move _3, move _4, move _5);
        return;
    }
}

fn S6(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native) -> S6<A1, A2, A3, A4, A5, A6> {
    let mut _0: externals::function::inner::S6<A1, A2, A3, A4, A5, A6>;

    bb0: {
        _0 = S6::<A1, A2, A3, A4, A5, A6>(move _1, move _2, move _3, move _4, move _5, move _6);
        return;
    }
}

// MIR FOR CTFE
fn S6(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native) -> S6<A1, A2, A3, A4, A5, A6> {
    let mut _0: externals::function::inner::S6<A1, A2, A3, A4, A5, A6>;

    bb0: {
        _0 = S6::<A1, A2, A3, A4, A5, A6>(move _1, move _2, move _3, move _4, move _5, move _6);
        return;
    }
}

fn S7(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native) -> S7<A1, A2, A3, A4, A5, A6, A7> {
    let mut _0: externals::function::inner::S7<A1, A2, A3, A4, A5, A6, A7>;

    bb0: {
        _0 = S7::<A1, A2, A3, A4, A5, A6, A7>(move _1, move _2, move _3, move _4, move _5, move _6, move _7);
        return;
    }
}

// MIR FOR CTFE
fn S7(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native) -> S7<A1, A2, A3, A4, A5, A6, A7> {
    let mut _0: externals::function::inner::S7<A1, A2, A3, A4, A5, A6, A7>;

    bb0: {
        _0 = S7::<A1, A2, A3, A4, A5, A6, A7>(move _1, move _2, move _3, move _4, move _5, move _6, move _7);
        return;
    }
}

fn S8(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native) -> S8<A1, A2, A3, A4, A5, A6, A7, A8> {
    let mut _0: externals::function::inner::S8<A1, A2, A3, A4, A5, A6, A7, A8>;

    bb0: {
        _0 = S8::<A1, A2, A3, A4, A5, A6, A7, A8>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8);
        return;
    }
}

// MIR FOR CTFE
fn S8(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native) -> S8<A1, A2, A3, A4, A5, A6, A7, A8> {
    let mut _0: externals::function::inner::S8<A1, A2, A3, A4, A5, A6, A7, A8>;

    bb0: {
        _0 = S8::<A1, A2, A3, A4, A5, A6, A7, A8>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8);
        return;
    }
}

fn S9(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native) -> S9<A1, A2, A3, A4, A5, A6, A7, A8, A9> {
    let mut _0: externals::function::inner::S9<A1, A2, A3, A4, A5, A6, A7, A8, A9>;

    bb0: {
        _0 = S9::<A1, A2, A3, A4, A5, A6, A7, A8, A9>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9);
        return;
    }
}

// MIR FOR CTFE
fn S9(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native) -> S9<A1, A2, A3, A4, A5, A6, A7, A8, A9> {
    let mut _0: externals::function::inner::S9<A1, A2, A3, A4, A5, A6, A7, A8, A9>;

    bb0: {
        _0 = S9::<A1, A2, A3, A4, A5, A6, A7, A8, A9>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9);
        return;
    }
}

fn S10(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native) -> S10<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10> {
    let mut _0: externals::function::inner::S10<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>;

    bb0: {
        _0 = S10::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10);
        return;
    }
}

// MIR FOR CTFE
fn S10(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native) -> S10<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10> {
    let mut _0: externals::function::inner::S10<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>;

    bb0: {
        _0 = S10::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10);
        return;
    }
}

fn S11(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native) -> S11<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11> {
    let mut _0: externals::function::inner::S11<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>;

    bb0: {
        _0 = S11::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11);
        return;
    }
}

// MIR FOR CTFE
fn S11(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native) -> S11<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11> {
    let mut _0: externals::function::inner::S11<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>;

    bb0: {
        _0 = S11::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11);
        return;
    }
}

fn S12(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native) -> S12<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12> {
    let mut _0: externals::function::inner::S12<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>;

    bb0: {
        _0 = S12::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12);
        return;
    }
}

// MIR FOR CTFE
fn S12(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native) -> S12<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12> {
    let mut _0: externals::function::inner::S12<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>;

    bb0: {
        _0 = S12::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12);
        return;
    }
}

fn S13(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native) -> S13<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13> {
    let mut _0: externals::function::inner::S13<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>;

    bb0: {
        _0 = S13::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13);
        return;
    }
}

// MIR FOR CTFE
fn S13(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native) -> S13<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13> {
    let mut _0: externals::function::inner::S13<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>;

    bb0: {
        _0 = S13::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13);
        return;
    }
}

fn S14(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native) -> S14<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14> {
    let mut _0: externals::function::inner::S14<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>;

    bb0: {
        _0 = S14::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14);
        return;
    }
}

// MIR FOR CTFE
fn S14(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native) -> S14<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14> {
    let mut _0: externals::function::inner::S14<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>;

    bb0: {
        _0 = S14::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14);
        return;
    }
}

fn S15(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native) -> S15<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15> {
    let mut _0: externals::function::inner::S15<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>;

    bb0: {
        _0 = S15::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15);
        return;
    }
}

// MIR FOR CTFE
fn S15(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native) -> S15<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15> {
    let mut _0: externals::function::inner::S15<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>;

    bb0: {
        _0 = S15::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15);
        return;
    }
}

fn S16(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native) -> S16<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16> {
    let mut _0: externals::function::inner::S16<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>;

    bb0: {
        _0 = S16::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16);
        return;
    }
}

// MIR FOR CTFE
fn S16(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native) -> S16<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16> {
    let mut _0: externals::function::inner::S16<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>;

    bb0: {
        _0 = S16::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16);
        return;
    }
}

fn S17(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native) -> S17<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17> {
    let mut _0: externals::function::inner::S17<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>;

    bb0: {
        _0 = S17::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17);
        return;
    }
}

// MIR FOR CTFE
fn S17(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native) -> S17<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17> {
    let mut _0: externals::function::inner::S17<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>;

    bb0: {
        _0 = S17::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17);
        return;
    }
}

fn S18(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native) -> S18<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18> {
    let mut _0: externals::function::inner::S18<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>;

    bb0: {
        _0 = S18::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18);
        return;
    }
}

// MIR FOR CTFE
fn S18(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native) -> S18<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18> {
    let mut _0: externals::function::inner::S18<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>;

    bb0: {
        _0 = S18::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18);
        return;
    }
}

fn S19(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native) -> S19<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19> {
    let mut _0: externals::function::inner::S19<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>;

    bb0: {
        _0 = S19::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19);
        return;
    }
}

// MIR FOR CTFE
fn S19(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native) -> S19<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19> {
    let mut _0: externals::function::inner::S19<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>;

    bb0: {
        _0 = S19::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19);
        return;
    }
}

fn S20(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native) -> S20<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20> {
    let mut _0: externals::function::inner::S20<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>;

    bb0: {
        _0 = S20::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20);
        return;
    }
}

// MIR FOR CTFE
fn S20(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native) -> S20<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20> {
    let mut _0: externals::function::inner::S20<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>;

    bb0: {
        _0 = S20::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20);
        return;
    }
}

fn S21(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native, _21: <A21 as FromToNativeWasmType>::Native) -> S21<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21> {
    let mut _0: externals::function::inner::S21<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>;

    bb0: {
        _0 = S21::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21);
        return;
    }
}

// MIR FOR CTFE
fn S21(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native, _21: <A21 as FromToNativeWasmType>::Native) -> S21<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21> {
    let mut _0: externals::function::inner::S21<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>;

    bb0: {
        _0 = S21::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21);
        return;
    }
}

fn S22(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native, _21: <A21 as FromToNativeWasmType>::Native, _22: <A22 as FromToNativeWasmType>::Native) -> S22<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22> {
    let mut _0: externals::function::inner::S22<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22>;

    bb0: {
        _0 = S22::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22);
        return;
    }
}

// MIR FOR CTFE
fn S22(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native, _21: <A21 as FromToNativeWasmType>::Native, _22: <A22 as FromToNativeWasmType>::Native) -> S22<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22> {
    let mut _0: externals::function::inner::S22<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22>;

    bb0: {
        _0 = S22::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22);
        return;
    }
}

fn S23(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native, _21: <A21 as FromToNativeWasmType>::Native, _22: <A22 as FromToNativeWasmType>::Native, _23: <A23 as FromToNativeWasmType>::Native) -> S23<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23> {
    let mut _0: externals::function::inner::S23<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23>;

    bb0: {
        _0 = S23::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23);
        return;
    }
}

// MIR FOR CTFE
fn S23(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native, _21: <A21 as FromToNativeWasmType>::Native, _22: <A22 as FromToNativeWasmType>::Native, _23: <A23 as FromToNativeWasmType>::Native) -> S23<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23> {
    let mut _0: externals::function::inner::S23<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23>;

    bb0: {
        _0 = S23::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23);
        return;
    }
}

fn S24(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native, _21: <A21 as FromToNativeWasmType>::Native, _22: <A22 as FromToNativeWasmType>::Native, _23: <A23 as FromToNativeWasmType>::Native, _24: <A24 as FromToNativeWasmType>::Native) -> S24<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24> {
    let mut _0: externals::function::inner::S24<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24>;

    bb0: {
        _0 = S24::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24);
        return;
    }
}

// MIR FOR CTFE
fn S24(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native, _21: <A21 as FromToNativeWasmType>::Native, _22: <A22 as FromToNativeWasmType>::Native, _23: <A23 as FromToNativeWasmType>::Native, _24: <A24 as FromToNativeWasmType>::Native) -> S24<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24> {
    let mut _0: externals::function::inner::S24<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24>;

    bb0: {
        _0 = S24::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24);
        return;
    }
}

fn S25(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native, _21: <A21 as FromToNativeWasmType>::Native, _22: <A22 as FromToNativeWasmType>::Native, _23: <A23 as FromToNativeWasmType>::Native, _24: <A24 as FromToNativeWasmType>::Native, _25: <A25 as FromToNativeWasmType>::Native) -> S25<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25> {
    let mut _0: externals::function::inner::S25<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25>;

    bb0: {
        _0 = S25::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25);
        return;
    }
}

// MIR FOR CTFE
fn S25(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native, _21: <A21 as FromToNativeWasmType>::Native, _22: <A22 as FromToNativeWasmType>::Native, _23: <A23 as FromToNativeWasmType>::Native, _24: <A24 as FromToNativeWasmType>::Native, _25: <A25 as FromToNativeWasmType>::Native) -> S25<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25> {
    let mut _0: externals::function::inner::S25<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25>;

    bb0: {
        _0 = S25::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25);
        return;
    }
}

fn S26(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native, _21: <A21 as FromToNativeWasmType>::Native, _22: <A22 as FromToNativeWasmType>::Native, _23: <A23 as FromToNativeWasmType>::Native, _24: <A24 as FromToNativeWasmType>::Native, _25: <A25 as FromToNativeWasmType>::Native, _26: <A26 as FromToNativeWasmType>::Native) -> S26<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26> {
    let mut _0: externals::function::inner::S26<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26>;

    bb0: {
        _0 = S26::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26);
        return;
    }
}

// MIR FOR CTFE
fn S26(_1: <A1 as FromToNativeWasmType>::Native, _2: <A2 as FromToNativeWasmType>::Native, _3: <A3 as FromToNativeWasmType>::Native, _4: <A4 as FromToNativeWasmType>::Native, _5: <A5 as FromToNativeWasmType>::Native, _6: <A6 as FromToNativeWasmType>::Native, _7: <A7 as FromToNativeWasmType>::Native, _8: <A8 as FromToNativeWasmType>::Native, _9: <A9 as FromToNativeWasmType>::Native, _10: <A10 as FromToNativeWasmType>::Native, _11: <A11 as FromToNativeWasmType>::Native, _12: <A12 as FromToNativeWasmType>::Native, _13: <A13 as FromToNativeWasmType>::Native, _14: <A14 as FromToNativeWasmType>::Native, _15: <A15 as FromToNativeWasmType>::Native, _16: <A16 as FromToNativeWasmType>::Native, _17: <A17 as FromToNativeWasmType>::Native, _18: <A18 as FromToNativeWasmType>::Native, _19: <A19 as FromToNativeWasmType>::Native, _20: <A20 as FromToNativeWasmType>::Native, _21: <A21 as FromToNativeWasmType>::Native, _22: <A22 as FromToNativeWasmType>::Native, _23: <A23 as FromToNativeWasmType>::Native, _24: <A24 as FromToNativeWasmType>::Native, _25: <A25 as FromToNativeWasmType>::Native, _26: <A26 as FromToNativeWasmType>::Native) -> S26<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26> {
    let mut _0: externals::function::inner::S26<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26>;

    bb0: {
        _0 = S26::<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22, A23, A24, A25, A26>(move _1, move _2, move _3, move _4, move _5, move _6, move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26);
        return;
    }
}

fn Extern::Function(_1: function::Function) -> Extern {
    let mut _0: externals::Extern;

    bb0: {
        _0 = Extern::Function(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Extern::Function(_1: function::Function) -> Extern {
    let mut _0: externals::Extern;

    bb0: {
        _0 = Extern::Function(move _1);
        return;
    }
}

fn Extern::Global(_1: global::Global) -> Extern {
    let mut _0: externals::Extern;

    bb0: {
        _0 = Extern::Global(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Extern::Global(_1: global::Global) -> Extern {
    let mut _0: externals::Extern;

    bb0: {
        _0 = Extern::Global(move _1);
        return;
    }
}

fn Extern::Table(_1: table::Table) -> Extern {
    let mut _0: externals::Extern;

    bb0: {
        _0 = Extern::Table(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Extern::Table(_1: table::Table) -> Extern {
    let mut _0: externals::Extern;

    bb0: {
        _0 = Extern::Table(move _1);
        return;
    }
}

fn Extern::Memory(_1: memory::Memory) -> Extern {
    let mut _0: externals::Extern;

    bb0: {
        _0 = Extern::Memory(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Extern::Memory(_1: memory::Memory) -> Extern {
    let mut _0: externals::Extern;

    bb0: {
        _0 = Extern::Memory(move _1);
        return;
    }
}

fn SecretMap::Some(_1: usize) -> SecretMap {
    let mut _0: <import_object::ImportObject as std::fmt::Debug>::fmt::SecretMap;

    bb0: {
        _0 = SecretMap::Some(move _1);
        return;
    }
}

// MIR FOR CTFE
fn SecretMap::Some(_1: usize) -> SecretMap {
    let mut _0: <import_object::ImportObject as std::fmt::Debug>::fmt::SecretMap;

    bb0: {
        _0 = SecretMap::Some(move _1);
        return;
    }
}

fn instance::InstantiationError::Link(_1: LinkError) -> instance::InstantiationError {
    let mut _0: instance::InstantiationError;

    bb0: {
        _0 = instance::InstantiationError::Link(move _1);
        return;
    }
}

// MIR FOR CTFE
fn instance::InstantiationError::Link(_1: LinkError) -> instance::InstantiationError {
    let mut _0: instance::InstantiationError;

    bb0: {
        _0 = instance::InstantiationError::Link(move _1);
        return;
    }
}

fn instance::InstantiationError::Start(_1: RuntimeError) -> instance::InstantiationError {
    let mut _0: instance::InstantiationError;

    bb0: {
        _0 = instance::InstantiationError::Start(move _1);
        return;
    }
}

// MIR FOR CTFE
fn instance::InstantiationError::Start(_1: RuntimeError) -> instance::InstantiationError {
    let mut _0: instance::InstantiationError;

    bb0: {
        _0 = instance::InstantiationError::Start(move _1);
        return;
    }
}

fn instance::InstantiationError::HostEnvInitialization(_1: HostEnvInitError) -> instance::InstantiationError {
    let mut _0: instance::InstantiationError;

    bb0: {
        _0 = instance::InstantiationError::HostEnvInitialization(move _1);
        return;
    }
}

// MIR FOR CTFE
fn instance::InstantiationError::HostEnvInitialization(_1: HostEnvInitError) -> instance::InstantiationError {
    let mut _0: instance::InstantiationError;

    bb0: {
        _0 = instance::InstantiationError::HostEnvInitialization(move _1);
        return;
    }
}

fn IoCompileError::Io(_1: std::io::Error) -> IoCompileError {
    let mut _0: module::IoCompileError;

    bb0: {
        _0 = IoCompileError::Io(move _1);
        return;
    }
}

// MIR FOR CTFE
fn IoCompileError::Io(_1: std::io::Error) -> IoCompileError {
    let mut _0: module::IoCompileError;

    bb0: {
        _0 = IoCompileError::Io(move _1);
        return;
    }
}

fn IoCompileError::Compile(_1: CompileError) -> IoCompileError {
    let mut _0: module::IoCompileError;

    bb0: {
        _0 = IoCompileError::Compile(move _1);
        return;
    }
}

// MIR FOR CTFE
fn IoCompileError::Compile(_1: CompileError) -> IoCompileError {
    let mut _0: module::IoCompileError;

    bb0: {
        _0 = IoCompileError::Compile(move _1);
        return;
    }
}
