// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const _IMPL_SERIALIZE_FOR_Config: () = {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19

    bb0: {
        _0 = const ();                   // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }
}

fn _IMPL_SERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:10: 18:19>::serialize(_1: &Config, _2: __S) -> Result<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    debug __serializer => _2;            // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _0: std::result::Result<<__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _3: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _4: std::result::Result<<__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _5: __S;                     // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _6: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _7: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let _8: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let _9: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _10: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _11: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let _12: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _13: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _15: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _16: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let _17: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _18: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _20: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _21: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let _22: &config::ProfileConfig;     // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _23: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _25: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _26: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let _27: &config::HttpConfig;        // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _28: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _30: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _31: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let _32: &config::WsConfig;          // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _33: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _35: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _36: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let _37: &config::NewTxFlowConfig;   // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _38: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _40: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    let mut _41: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:18: 18:19
    let mut _42: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:18: 18:19
    scope 1 {
        debug __serde_state => _3;       // in scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        let _14: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        let _19: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        let _24: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        let _29: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        let _34: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        let _39: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        scope 4 {
            debug __val => const ();     // in scope 4 at cita-jsonrpc/src/config.rs:18:10: 18:19
        }
        scope 5 {
            debug __err => _14;          // in scope 5 at cita-jsonrpc/src/config.rs:18:10: 18:19
        }
        scope 6 {
            debug __val => const ();     // in scope 6 at cita-jsonrpc/src/config.rs:18:10: 18:19
        }
        scope 7 {
            debug __err => _19;          // in scope 7 at cita-jsonrpc/src/config.rs:18:10: 18:19
        }
        scope 8 {
            debug __val => const ();     // in scope 8 at cita-jsonrpc/src/config.rs:18:10: 18:19
        }
        scope 9 {
            debug __err => _24;          // in scope 9 at cita-jsonrpc/src/config.rs:18:10: 18:19
        }
        scope 10 {
            debug __val => const ();     // in scope 10 at cita-jsonrpc/src/config.rs:18:10: 18:19
        }
        scope 11 {
            debug __err => _29;          // in scope 11 at cita-jsonrpc/src/config.rs:18:10: 18:19
        }
        scope 12 {
            debug __val => const ();     // in scope 12 at cita-jsonrpc/src/config.rs:18:10: 18:19
        }
        scope 13 {
            debug __err => _34;          // in scope 13 at cita-jsonrpc/src/config.rs:18:10: 18:19
        }
        scope 14 {
            debug __val => const ();     // in scope 14 at cita-jsonrpc/src/config.rs:18:10: 18:19
        }
        scope 15 {
            debug __err => _39;          // in scope 15 at cita-jsonrpc/src/config.rs:18:10: 18:19
        }
    }
    scope 2 {
        debug __val => _8;               // in scope 2 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }
    scope 3 {
        debug __err => _9;               // in scope 3 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb0: {
        _42 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _41 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _42 = const true;                // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _5 = move _2;                    // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _6 = const 6_usize;              // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _42 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _4 = <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::serialize_struct(move _5, const "Config", move _6) -> [return: bb1, unwind: bb37]; // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(__S, &'static str, usize) -> Result<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error> {<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::serialize_struct}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _42 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:18:18: 18:19
        _7 = discriminant(_4);           // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
        switchInt(move _7) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb2: {
        _9 = move ((_4 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _9); // scope 3 at cita-jsonrpc/src/config.rs:18:10: 18:19
        goto -> bb31;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb4: {
        _8 = move ((_4 as Ok).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct); // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _41 = const true;                // scope 2 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _3 = move _8;                    // scope 2 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _11 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _12 = &((*_1).0: usize);         // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _10 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>(_11, const "backlog_capacity", _12) -> [return: bb5, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:20:5: 20:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b usize) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _13 = discriminant(_10);         // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        switchInt(move _13) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb6: {
        _14 = move ((_10 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _14); // scope 5 at cita-jsonrpc/src/config.rs:18:10: 18:19
        goto -> bb30;                    // scope 1 at no-location
    }

    bb7: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb8: {
        _16 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _17 = &((*_1).1: std::option::Option<bool>); // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _15 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::option::Option<bool>>(_16, const "enable_version", _17) -> [return: bb9, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:21:5: 21:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b std::option::Option<bool>) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::option::Option<bool>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _18 = discriminant(_15);         // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        switchInt(move _18) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb10: {
        _19 = move ((_15 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _19); // scope 7 at cita-jsonrpc/src/config.rs:18:10: 18:19
        goto -> bb30;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb12: {
        _21 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _22 = &((*_1).2: config::ProfileConfig); // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _20 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<ProfileConfig>(_21, const "profile_config", _22) -> [return: bb13, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:22:5: 22:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b ProfileConfig) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<ProfileConfig>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _23 = discriminant(_20);         // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        switchInt(move _23) -> [0: bb16, 1: bb14, otherwise: bb15]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb14: {
        _24 = move ((_20 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _24); // scope 9 at cita-jsonrpc/src/config.rs:18:10: 18:19
        goto -> bb30;                    // scope 1 at no-location
    }

    bb15: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb16: {
        _26 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _27 = &((*_1).3: config::HttpConfig); // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _25 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<HttpConfig>(_26, const "http_config", _27) -> [return: bb17, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:23:5: 23:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b HttpConfig) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<HttpConfig>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _28 = discriminant(_25);         // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        switchInt(move _28) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb18: {
        _29 = move ((_25 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _29); // scope 11 at cita-jsonrpc/src/config.rs:18:10: 18:19
        goto -> bb30;                    // scope 1 at no-location
    }

    bb19: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb20: {
        _31 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _32 = &((*_1).4: config::WsConfig); // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _30 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<WsConfig>(_31, const "ws_config", _32) -> [return: bb21, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:24:5: 24:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b WsConfig) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<WsConfig>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _33 = discriminant(_30);         // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        switchInt(move _33) -> [0: bb24, 1: bb22, otherwise: bb23]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb22: {
        _34 = move ((_30 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _34); // scope 13 at cita-jsonrpc/src/config.rs:18:10: 18:19
        goto -> bb30;                    // scope 1 at no-location
    }

    bb23: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb24: {
        _36 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _37 = &((*_1).5: config::NewTxFlowConfig); // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _35 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<NewTxFlowConfig>(_36, const "new_tx_flow_config", _37) -> [return: bb25, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:25:5: 25:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b NewTxFlowConfig) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<NewTxFlowConfig>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _38 = discriminant(_35);         // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        switchInt(move _38) -> [0: bb28, 1: bb26, otherwise: bb27]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb26: {
        _39 = move ((_35 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _39); // scope 15 at cita-jsonrpc/src/config.rs:18:10: 18:19
        goto -> bb30;                    // scope 1 at no-location
    }

    bb27: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb28: {
        _41 = const false;               // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _40 = move _3;                   // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
        _0 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _40) -> [return: bb29, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:10: 18:19
                                         // + literal: Const { ty: fn(<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct) -> Result<<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Ok, <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::end}, val: Value(<ZST>) }
    }

    bb29: {
        _41 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:18:18: 18:19
        goto -> bb32;                    // scope 0 at cita-jsonrpc/src/config.rs:18:18: 18:19
    }

    bb30: {
        drop(_3) -> bb31;                // scope 0 at cita-jsonrpc/src/config.rs:18:18: 18:19
    }

    bb31: {
        _41 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:18:18: 18:19
        goto -> bb32;                    // scope 0 at cita-jsonrpc/src/config.rs:18:18: 18:19
    }

    bb32: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:19: 18:19
    }

    bb33 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:18:10: 18:19
    }

    bb34 (cleanup): {
        drop(_3) -> bb33;                // scope 0 at cita-jsonrpc/src/config.rs:18:18: 18:19
    }

    bb35 (cleanup): {
        switchInt(_41) -> [0: bb33, otherwise: bb34]; // scope 0 at cita-jsonrpc/src/config.rs:18:18: 18:19
    }

    bb36 (cleanup): {
        drop(_5) -> bb33;                // scope 0 at cita-jsonrpc/src/config.rs:18:18: 18:19
    }

    bb37 (cleanup): {
        switchInt(_42) -> [0: bb33, otherwise: bb36]; // scope 0 at cita-jsonrpc/src/config.rs:18:18: 18:19
    }
}

const _IMPL_DESERIALIZE_FOR_Config: () = {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _0 = const ();                   // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize(_1: __D) -> Result<Config, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _0: std::result::Result<config::Config, <__D as config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _0 = <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'_>>(move _1, const "Config", const _, const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Config>, lifetime: PhantomData::<&()> }}) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(__D, &'static str, &'static [&'static str], _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'_>) -> Result<<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'_> as Visitor<'_>>::Value, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {<__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'_>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::FIELDS, [], None) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'_>, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:32: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    debug __formatter => _2;             // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _3 = const "field identifier";   // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:32: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _3: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _4: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _5: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _6: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _7: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _8: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _9: __E;                     // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _10: config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Unexpected<'_>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _11: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _12: &&str;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, otherwise: bb1]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb1: {
        _10 = Unexpected::<'_>::Unsigned(_2); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _12 = const _;                   // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor as Visitor<'de>>::visit_u64, [ReErased, __E], Some(promoted[0])) }
        _11 = _12 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _9 = <__E as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_value(move _10, move _11) -> bb8; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(Unexpected<'a>, &'b (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'b)) -> __E {<__E as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_value}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _3); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb3: {
        _4 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _4); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb4: {
        _5 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field2; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _5); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb5: {
        _6 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field3; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _6); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb6: {
        _7 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field4; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _7); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb7: {
        _8 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field5; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _8); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb8: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Err(move _9); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb9: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:32: 18:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::visit_u64: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _1 = const "field index 0 <= i < 6"; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::visit_str(_1: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _3: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _4: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _6: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _7: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _8: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _9: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _10: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _11: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _12: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _13: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _14: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _15: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "backlog_capacity") -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb13]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "enable_version") -> bb3; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb14]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "profile_config") -> bb5; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _5) -> [0: bb6, otherwise: bb15]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "http_config") -> bb7; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _6) -> [0: bb8, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb8: {
        _7 = <str as PartialEq>::eq(_2, const "ws_config") -> bb9; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        switchInt(move _7) -> [0: bb10, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb10: {
        _8 = <str as PartialEq>::eq(_2, const "new_tx_flow_config") -> bb11; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        switchInt(move _8) -> [0: bb12, otherwise: bb18]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb12: {
        _15 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__ignore; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _15); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb13: {
        _9 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _9); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb14: {
        _10 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _10); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb15: {
        _11 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field2; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _11); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb16: {
        _12 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field3; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _12); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb17: {
        _13 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field4; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _13); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb18: {
        _14 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field5; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _14); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb19: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:32: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _3: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _4: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _6: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _7: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _8: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _9: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _10: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _11: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _12: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _13: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _14: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _15: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _16: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _17: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _18: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _19: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _20: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _21: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _22: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _23: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _24: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _15 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _16 = const 16_usize;            // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _17 = Eq(move _15, move _16);    // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _17) -> [0: bb18, otherwise: bb1]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb1: {
        switchInt((*_2)[0 of 16]) -> [98: bb2, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb2: {
        switchInt((*_2)[1 of 16]) -> [97: bb3, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb3: {
        switchInt((*_2)[2 of 16]) -> [99: bb4, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb4: {
        switchInt((*_2)[3 of 16]) -> [107: bb5, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb5: {
        switchInt((*_2)[4 of 16]) -> [108: bb6, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb6: {
        switchInt((*_2)[5 of 16]) -> [111: bb7, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb7: {
        switchInt((*_2)[6 of 16]) -> [103: bb8, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb8: {
        switchInt((*_2)[7 of 16]) -> [95: bb9, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb9: {
        switchInt((*_2)[8 of 16]) -> [99: bb10, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb10: {
        switchInt((*_2)[9 of 16]) -> [97: bb11, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb11: {
        switchInt((*_2)[10 of 16]) -> [112: bb12, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb12: {
        switchInt((*_2)[11 of 16]) -> [97: bb13, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb13: {
        switchInt((*_2)[12 of 16]) -> [99: bb14, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb14: {
        switchInt((*_2)[13 of 16]) -> [105: bb15, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb15: {
        switchInt((*_2)[14 of 16]) -> [116: bb16, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb16: {
        switchInt((*_2)[15 of 16]) -> [121: bb87, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb17: {
        _24 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__ignore; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _24); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb93;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb18: {
        _12 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _13 = const 14_usize;            // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _14 = Eq(move _12, move _13);    // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _14) -> [0: bb46, otherwise: bb19]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb19: {
        switchInt((*_2)[0 of 14]) -> [101: bb20, 112: bb33, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb20: {
        switchInt((*_2)[1 of 14]) -> [110: bb21, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb21: {
        switchInt((*_2)[2 of 14]) -> [97: bb22, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb22: {
        switchInt((*_2)[3 of 14]) -> [98: bb23, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb23: {
        switchInt((*_2)[4 of 14]) -> [108: bb24, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb24: {
        switchInt((*_2)[5 of 14]) -> [101: bb25, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb25: {
        switchInt((*_2)[6 of 14]) -> [95: bb26, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb26: {
        switchInt((*_2)[7 of 14]) -> [118: bb27, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb27: {
        switchInt((*_2)[8 of 14]) -> [101: bb28, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb28: {
        switchInt((*_2)[9 of 14]) -> [114: bb29, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb29: {
        switchInt((*_2)[10 of 14]) -> [115: bb30, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb30: {
        switchInt((*_2)[11 of 14]) -> [105: bb31, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb31: {
        switchInt((*_2)[12 of 14]) -> [111: bb32, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb32: {
        switchInt((*_2)[13 of 14]) -> [110: bb88, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb33: {
        switchInt((*_2)[1 of 14]) -> [114: bb34, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb34: {
        switchInt((*_2)[2 of 14]) -> [111: bb35, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb35: {
        switchInt((*_2)[3 of 14]) -> [102: bb36, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb36: {
        switchInt((*_2)[4 of 14]) -> [105: bb37, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb37: {
        switchInt((*_2)[5 of 14]) -> [108: bb38, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb38: {
        switchInt((*_2)[6 of 14]) -> [101: bb39, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb39: {
        switchInt((*_2)[7 of 14]) -> [95: bb40, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb40: {
        switchInt((*_2)[8 of 14]) -> [99: bb41, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb41: {
        switchInt((*_2)[9 of 14]) -> [111: bb42, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb42: {
        switchInt((*_2)[10 of 14]) -> [110: bb43, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb43: {
        switchInt((*_2)[11 of 14]) -> [102: bb44, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb44: {
        switchInt((*_2)[12 of 14]) -> [105: bb45, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb45: {
        switchInt((*_2)[13 of 14]) -> [103: bb89, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb46: {
        _9 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _10 = const 11_usize;            // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _11 = Eq(move _9, move _10);     // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _11) -> [0: bb58, otherwise: bb47]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb47: {
        switchInt((*_2)[0 of 11]) -> [104: bb48, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb48: {
        switchInt((*_2)[1 of 11]) -> [116: bb49, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb49: {
        switchInt((*_2)[2 of 11]) -> [116: bb50, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb50: {
        switchInt((*_2)[3 of 11]) -> [112: bb51, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb51: {
        switchInt((*_2)[4 of 11]) -> [95: bb52, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb52: {
        switchInt((*_2)[5 of 11]) -> [99: bb53, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb53: {
        switchInt((*_2)[6 of 11]) -> [111: bb54, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb54: {
        switchInt((*_2)[7 of 11]) -> [110: bb55, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb55: {
        switchInt((*_2)[8 of 11]) -> [102: bb56, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb56: {
        switchInt((*_2)[9 of 11]) -> [105: bb57, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb57: {
        switchInt((*_2)[10 of 11]) -> [103: bb90, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb58: {
        _6 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _7 = const 9_usize;              // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _8 = Eq(move _6, move _7);       // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _8) -> [0: bb68, otherwise: bb59]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb59: {
        switchInt((*_2)[0 of 9]) -> [119: bb60, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb60: {
        switchInt((*_2)[1 of 9]) -> [115: bb61, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb61: {
        switchInt((*_2)[2 of 9]) -> [95: bb62, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb62: {
        switchInt((*_2)[3 of 9]) -> [99: bb63, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb63: {
        switchInt((*_2)[4 of 9]) -> [111: bb64, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb64: {
        switchInt((*_2)[5 of 9]) -> [110: bb65, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb65: {
        switchInt((*_2)[6 of 9]) -> [102: bb66, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb66: {
        switchInt((*_2)[7 of 9]) -> [105: bb67, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb67: {
        switchInt((*_2)[8 of 9]) -> [103: bb91, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb68: {
        _3 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _4 = const 18_usize;             // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _5 = Eq(move _3, move _4);       // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _5) -> [0: bb17, otherwise: bb69]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb69: {
        switchInt((*_2)[0 of 18]) -> [110: bb70, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb70: {
        switchInt((*_2)[1 of 18]) -> [101: bb71, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb71: {
        switchInt((*_2)[2 of 18]) -> [119: bb72, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb72: {
        switchInt((*_2)[3 of 18]) -> [95: bb73, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb73: {
        switchInt((*_2)[4 of 18]) -> [116: bb74, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb74: {
        switchInt((*_2)[5 of 18]) -> [120: bb75, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb75: {
        switchInt((*_2)[6 of 18]) -> [95: bb76, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb76: {
        switchInt((*_2)[7 of 18]) -> [102: bb77, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb77: {
        switchInt((*_2)[8 of 18]) -> [108: bb78, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb78: {
        switchInt((*_2)[9 of 18]) -> [111: bb79, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb79: {
        switchInt((*_2)[10 of 18]) -> [119: bb80, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb80: {
        switchInt((*_2)[11 of 18]) -> [95: bb81, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb81: {
        switchInt((*_2)[12 of 18]) -> [99: bb82, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb82: {
        switchInt((*_2)[13 of 18]) -> [111: bb83, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb83: {
        switchInt((*_2)[14 of 18]) -> [110: bb84, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb84: {
        switchInt((*_2)[15 of 18]) -> [102: bb85, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb85: {
        switchInt((*_2)[16 of 18]) -> [105: bb86, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb86: {
        switchInt((*_2)[17 of 18]) -> [103: bb92, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb87: {
        _18 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _18); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb93;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb88: {
        _19 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _19); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb93;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb89: {
        _20 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field2; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _20); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb93;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb90: {
        _21 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field3; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _21); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb93;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb91: {
        _22 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field4; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _22); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb93;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb92: {
        _23 = const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field::__field5; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, __E>::Ok(move _23); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb93;                    // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb93: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:32: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field, <__D as config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _0 = <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: fn(__D, _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor) -> Result<<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor as Visitor<'_>>::Value, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {<__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__FieldVisitor, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:32: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    debug __formatter => _2;             // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _3 = const "struct Config";      // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:32: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'_>, _2: __A) -> Result<Config, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Config>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    debug __seq => _2;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _0: std::result::Result<config::Config, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _3: std::result::Result<std::option::Option<usize>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _4: &mut __A;                // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _5: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _6: std::option::Option<usize>;  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _7: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _8: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _9: usize;                       // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _10: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _11: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _12: std::result::Result<std::option::Option<std::option::Option<bool>>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _13: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _14: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _17: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _19: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _20: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _21: std::result::Result<std::option::Option<config::ProfileConfig>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _22: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _23: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _26: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _28: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _29: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _31: std::result::Result<std::option::Option<config::HttpConfig>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _32: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _33: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _36: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _38: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _39: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _41: std::result::Result<std::option::Option<config::WsConfig>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _42: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _43: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _46: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _48: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _49: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _50: std::result::Result<std::option::Option<config::NewTxFlowConfig>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _51: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _52: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _55: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _57: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _58: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _59: config::Config;         // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _60: config::HttpConfig;     // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _61: config::WsConfig;       // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _62: &&str;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    scope 1 {
        debug __field0 => _9;            // in scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        let _15: std::option::Option<std::option::Option<bool>>; // in scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        let _16: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        let _18: std::option::Option<bool>; // in scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        let mut _63: &&str;              // in scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        scope 5 {
            debug __field1 => _18;       // in scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
            let _24: std::option::Option<config::ProfileConfig>; // in scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
            let _25: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
            let _27: config::ProfileConfig; // in scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
            let mut _64: &&str;          // in scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
            scope 9 {
                debug __field2 => _27;   // in scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
                let _30: config::HttpConfig; // in scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
                let _34: std::option::Option<config::HttpConfig>; // in scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
                let _35: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
                let _37: config::HttpConfig; // in scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
                let mut _65: &&str;      // in scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
                scope 13 {
                    debug __field3 => _30; // in scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
                    let _40: config::WsConfig; // in scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
                    let _44: std::option::Option<config::WsConfig>; // in scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
                    let _45: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
                    let _47: config::WsConfig; // in scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
                    let mut _66: &&str;  // in scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
                    scope 17 {
                        debug __field4 => _40; // in scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
                        let _53: std::option::Option<config::NewTxFlowConfig>; // in scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
                        let _54: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
                        let _56: config::NewTxFlowConfig; // in scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
                        let mut _67: &&str; // in scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
                        scope 21 {
                            debug __field5 => _56; // in scope 21 at cita-jsonrpc/src/config.rs:18:21: 18:32
                        }
                        scope 22 {
                            debug __val => _53; // in scope 22 at cita-jsonrpc/src/config.rs:18:21: 18:32
                        }
                        scope 23 {
                            debug __err => _54; // in scope 23 at cita-jsonrpc/src/config.rs:18:21: 18:32
                        }
                        scope 24 {
                            debug __value => _56; // in scope 24 at cita-jsonrpc/src/config.rs:18:21: 18:32
                        }
                    }
                    scope 18 {
                        debug __val => _44; // in scope 18 at cita-jsonrpc/src/config.rs:18:21: 18:32
                    }
                    scope 19 {
                        debug __err => _45; // in scope 19 at cita-jsonrpc/src/config.rs:18:21: 18:32
                    }
                    scope 20 {
                        debug __value => _47; // in scope 20 at cita-jsonrpc/src/config.rs:18:21: 18:32
                    }
                }
                scope 14 {
                    debug __val => _34;  // in scope 14 at cita-jsonrpc/src/config.rs:18:21: 18:32
                }
                scope 15 {
                    debug __err => _35;  // in scope 15 at cita-jsonrpc/src/config.rs:18:21: 18:32
                }
                scope 16 {
                    debug __value => _37; // in scope 16 at cita-jsonrpc/src/config.rs:18:21: 18:32
                }
            }
            scope 10 {
                debug __val => _24;      // in scope 10 at cita-jsonrpc/src/config.rs:18:21: 18:32
            }
            scope 11 {
                debug __err => _25;      // in scope 11 at cita-jsonrpc/src/config.rs:18:21: 18:32
            }
            scope 12 {
                debug __value => _27;    // in scope 12 at cita-jsonrpc/src/config.rs:18:21: 18:32
            }
        }
        scope 6 {
            debug __val => _15;          // in scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
        }
        scope 7 {
            debug __err => _16;          // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        }
        scope 8 {
            debug __value => _18;        // in scope 8 at cita-jsonrpc/src/config.rs:18:21: 18:32
        }
    }
    scope 2 {
        debug __val => _6;               // in scope 2 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
    scope 3 {
        debug __err => _7;               // in scope 3 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
    scope 4 {
        debug __value => _9;             // in scope 4 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb0: {
        _4 = &mut _2;                    // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _3 = <__A as SeqAccess<'_>>::next_element::<usize>(_4) -> [return: bb1, unwind: bb55]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:20:5: 20:8
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<usize>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _7); // scope 3 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb51;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<usize>); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _8 = discriminant(_6);           // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb5: {
        _62 = const _;                   // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[0])) }
        _11 = _62 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _10 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb8, unwind: bb55]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb7: {
        _9 = ((_6 as Some).0: usize);    // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _13 = &mut _2;                   // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<bool>>(_13) -> [return: bb9, unwind: bb55]; // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:21:5: 21:8
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<std::option::Option<bool>>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<std::option::Option<bool>>}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _10); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb51;                    // scope 0 at no-location
    }

    bb9: {
        _14 = discriminant(_12);         // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _14) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb10: {
        _16 = move ((_12 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _16); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb51;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb12: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<bool>>); // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _17 = discriminant(_15);         // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _17) -> [0: bb13, 1: bb15, otherwise: bb14]; // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb13: {
        _63 = const _;                   // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[1])) }
        _20 = _63 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _19 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb16, unwind: bb55]; // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb14: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb15: {
        _18 = ((_15 as Some).0: std::option::Option<bool>); // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _22 = &mut _2;                   // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _21 = <__A as SeqAccess<'_>>::next_element::<ProfileConfig>(_22) -> [return: bb17, unwind: bb55]; // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:22:5: 22:8
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<ProfileConfig>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<ProfileConfig>}, val: Value(<ZST>) }
    }

    bb16: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _19); // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb51;                    // scope 1 at no-location
    }

    bb17: {
        _23 = discriminant(_21);         // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _23) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb18: {
        _25 = move ((_21 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _25); // scope 11 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb51;                    // scope 5 at no-location
    }

    bb19: {
        unreachable;                     // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb20: {
        _24 = ((_21 as Ok).0: std::option::Option<config::ProfileConfig>); // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _26 = discriminant(_24);         // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _26) -> [0: bb21, 1: bb23, otherwise: bb22]; // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb21: {
        _64 = const _;                   // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[2])) }
        _29 = _64 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _28 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb24, unwind: bb55]; // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb22: {
        unreachable;                     // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb23: {
        _27 = ((_24 as Some).0: config::ProfileConfig); // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _32 = &mut _2;                   // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _31 = <__A as SeqAccess<'_>>::next_element::<HttpConfig>(_32) -> [return: bb25, unwind: bb55]; // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:23:5: 23:8
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<HttpConfig>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<HttpConfig>}, val: Value(<ZST>) }
    }

    bb24: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _28); // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb51;                    // scope 5 at no-location
    }

    bb25: {
        _33 = discriminant(_31);         // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _33) -> [0: bb28, 1: bb26, otherwise: bb27]; // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb26: {
        _35 = move ((_31 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _35); // scope 15 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb51;                    // scope 9 at no-location
    }

    bb27: {
        unreachable;                     // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb28: {
        _34 = move ((_31 as Ok).0: std::option::Option<config::HttpConfig>); // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _36 = discriminant(_34);         // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _36) -> [0: bb29, 1: bb31, otherwise: bb30]; // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb29: {
        _65 = const _;                   // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[3])) }
        _39 = _65 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _38 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 3_usize, move _39) -> [return: bb32, unwind: bb55]; // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb30: {
        unreachable;                     // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb31: {
        _37 = move ((_34 as Some).0: config::HttpConfig); // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _30 = move _37;                  // scope 16 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _42 = &mut _2;                   // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _41 = <__A as SeqAccess<'_>>::next_element::<WsConfig>(_42) -> [return: bb33, unwind: bb54]; // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:24:5: 24:8
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<WsConfig>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<WsConfig>}, val: Value(<ZST>) }
    }

    bb32: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _38); // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb51;                    // scope 9 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb33: {
        _43 = discriminant(_41);         // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _43) -> [0: bb36, 1: bb34, otherwise: bb35]; // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb34: {
        _45 = move ((_41 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _45); // scope 19 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb50;                    // scope 13 at no-location
    }

    bb35: {
        unreachable;                     // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb36: {
        _44 = move ((_41 as Ok).0: std::option::Option<config::WsConfig>); // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _46 = discriminant(_44);         // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _46) -> [0: bb37, 1: bb39, otherwise: bb38]; // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb37: {
        _66 = const _;                   // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[4])) }
        _49 = _66 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _48 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb40, unwind: bb54]; // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb38: {
        unreachable;                     // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb39: {
        _47 = move ((_44 as Some).0: config::WsConfig); // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _40 = move _47;                  // scope 20 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _51 = &mut _2;                   // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _50 = <__A as SeqAccess<'_>>::next_element::<NewTxFlowConfig>(_51) -> [return: bb41, unwind: bb53]; // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:25:5: 25:8
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<NewTxFlowConfig>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<NewTxFlowConfig>}, val: Value(<ZST>) }
    }

    bb40: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _48); // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb50;                    // scope 13 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb41: {
        _52 = discriminant(_50);         // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _52) -> [0: bb44, 1: bb42, otherwise: bb43]; // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb42: {
        _54 = move ((_50 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _54); // scope 23 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb49;                    // scope 17 at no-location
    }

    bb43: {
        unreachable;                     // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb44: {
        _53 = ((_50 as Ok).0: std::option::Option<config::NewTxFlowConfig>); // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _55 = discriminant(_53);         // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _55) -> [0: bb45, 1: bb47, otherwise: bb46]; // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb45: {
        _67 = const _;                   // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[5])) }
        _58 = _67 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _57 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb48, unwind: bb53]; // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb46: {
        unreachable;                     // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb47: {
        _56 = ((_53 as Some).0: config::NewTxFlowConfig); // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _60 = move _30;                  // scope 21 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _61 = move _40;                  // scope 21 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _59 = Config { backlog_capacity: _9, enable_version: _18, profile_config: _27, http_config: move _60, ws_config: move _61, new_tx_flow_config: _56 }; // scope 21 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Ok(move _59); // scope 21 at cita-jsonrpc/src/config.rs:18:21: 18:32
        drop(_2) -> bb52;                // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb48: {
        _0 = Result::<Config, <__A as SeqAccess<'_>>::Error>::Err(move _57); // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb49;                    // scope 17 at no-location
    }

    bb49: {
        drop(_40) -> [return: bb50, unwind: bb54]; // scope 13 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb50: {
        drop(_30) -> [return: bb51, unwind: bb55]; // scope 9 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb51: {
        drop(_2) -> bb52;                // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb52: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:32: 18:32
    }

    bb53 (cleanup): {
        drop(_40) -> bb54;               // scope 13 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb54 (cleanup): {
        drop(_30) -> bb55;               // scope 9 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb55 (cleanup): {
        drop(_2) -> bb56;                // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb56 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _1 = const "struct Config with 6 elements"; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _1 = const "struct Config with 6 elements"; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
}

promoted[2] in _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _1 = const "struct Config with 6 elements"; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
}

promoted[3] in _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _1 = const "struct Config with 6 elements"; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
}

promoted[4] in _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _1 = const "struct Config with 6 elements"; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
}

promoted[5] in _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _1 = const "struct Config with 6 elements"; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
}

fn _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::visit_map(_1: _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor<'_>, _2: __A) -> Result<Config, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Config>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    debug __map => _2;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _0: std::result::Result<config::Config, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _3: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _9: std::result::Result<std::option::Option<config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _10: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _11: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _14: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _16: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _17: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _18: &std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _19: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _20: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _21: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _22: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _23: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _26: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _27: &std::option::Option<std::option::Option<bool>>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _28: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _29: std::option::Option<std::option::Option<bool>>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _30: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _31: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _32: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _35: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _36: &std::option::Option<config::ProfileConfig>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _37: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _38: std::option::Option<config::ProfileConfig>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _39: std::result::Result<config::ProfileConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _40: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _41: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _44: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _45: &std::option::Option<config::HttpConfig>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _46: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _47: std::option::Option<config::HttpConfig>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _48: std::result::Result<config::HttpConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _49: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _50: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _53: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _54: &std::option::Option<config::WsConfig>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _55: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _56: std::option::Option<config::WsConfig>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _57: std::result::Result<config::WsConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _58: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _59: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _62: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _63: &std::option::Option<config::NewTxFlowConfig>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _64: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _65: std::option::Option<config::NewTxFlowConfig>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _66: std::result::Result<config::NewTxFlowConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _67: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _68: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _71: std::result::Result<config::_IMPL_SERIALIZE_FOR_Config::_serde::de::IgnoredAny, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _72: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _73: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _76: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _78: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _79: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _83: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _85: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _86: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _90: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _92: std::result::Result<config::ProfileConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _93: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _97: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _99: std::result::Result<config::HttpConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _100: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _104: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _106: std::result::Result<config::WsConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _107: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _111: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _113: std::result::Result<config::NewTxFlowConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _114: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _117: config::Config;        // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _118: usize;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _119: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _120: config::ProfileConfig; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _121: config::HttpConfig;    // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _122: config::WsConfig;      // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _123: config::NewTxFlowConfig; // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _124: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    let mut _125: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    let mut _126: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    let mut _127: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    let mut _128: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    let mut _129: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    scope 1 {
        debug __field0 => _3;            // in scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        let mut _4: std::option::Option<std::option::Option<bool>>; // in scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        scope 2 {
            debug __field1 => _4;        // in scope 2 at cita-jsonrpc/src/config.rs:18:21: 18:32
            let mut _5: std::option::Option<config::ProfileConfig>; // in scope 2 at cita-jsonrpc/src/config.rs:18:21: 18:32
            scope 3 {
                debug __field2 => _5;    // in scope 3 at cita-jsonrpc/src/config.rs:18:21: 18:32
                let mut _6: std::option::Option<config::HttpConfig>; // in scope 3 at cita-jsonrpc/src/config.rs:18:21: 18:32
                scope 4 {
                    debug __field3 => _6; // in scope 4 at cita-jsonrpc/src/config.rs:18:21: 18:32
                    let mut _7: std::option::Option<config::WsConfig>; // in scope 4 at cita-jsonrpc/src/config.rs:18:21: 18:32
                    scope 5 {
                        debug __field4 => _7; // in scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
                        let mut _8: std::option::Option<config::NewTxFlowConfig>; // in scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
                        scope 6 {
                            debug __field5 => _8; // in scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
                            let _75: usize; // in scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
                            let _77: usize; // in scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
                            let _80: usize; // in scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
                            let _81: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
                            scope 7 {
                                debug __key => _15; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _12: std::option::Option<config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field>; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _13: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _15: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _24: usize; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _25: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _33: std::option::Option<bool>; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _34: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _42: config::ProfileConfig; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _43: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _51: config::HttpConfig; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _52: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _60: config::WsConfig; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _61: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _69: config::NewTxFlowConfig; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _70: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _74: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                scope 8 {
                                    debug __val => _12; // in scope 8 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 9 {
                                    debug __err => _13; // in scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 10 {
                                    debug __val => _24; // in scope 10 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 11 {
                                    debug __err => _25; // in scope 11 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 12 {
                                    debug __val => _33; // in scope 12 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 13 {
                                    debug __err => _34; // in scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 14 {
                                    debug __val => _42; // in scope 14 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 15 {
                                    debug __err => _43; // in scope 15 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 16 {
                                    debug __val => _51; // in scope 16 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 17 {
                                    debug __err => _52; // in scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 18 {
                                    debug __val => _60; // in scope 18 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 19 {
                                    debug __err => _61; // in scope 19 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 20 {
                                    debug __val => _69; // in scope 20 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 21 {
                                    debug __err => _70; // in scope 21 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 22 {
                                }
                                scope 23 {
                                    debug __val => const IgnoredAny; // in scope 23 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 24 {
                                    debug __err => _74; // in scope 24 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                            }
                            scope 25 {
                                debug __field0 => _75; // in scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _82: std::option::Option<bool>; // in scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _84: std::option::Option<bool>; // in scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _87: std::option::Option<bool>; // in scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                let _88: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                scope 29 {
                                    debug __field1 => _82; // in scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                    let _89: config::ProfileConfig; // in scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                    let _91: config::ProfileConfig; // in scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                    let _94: config::ProfileConfig; // in scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                    let _95: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                    scope 33 {
                                        debug __field2 => _89; // in scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                        let _96: config::HttpConfig; // in scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                        let _98: config::HttpConfig; // in scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                        let _101: config::HttpConfig; // in scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                        let _102: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                        scope 37 {
                                            debug __field3 => _96; // in scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                            let _103: config::WsConfig; // in scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                            let _105: config::WsConfig; // in scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                            let _108: config::WsConfig; // in scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                            let _109: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                            scope 41 {
                                                debug __field4 => _103; // in scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                                let _110: config::NewTxFlowConfig; // in scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                                let _112: config::NewTxFlowConfig; // in scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                                let _115: config::NewTxFlowConfig; // in scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                                let _116: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                                scope 45 {
                                                    debug __field5 => _110; // in scope 45 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                                }
                                                scope 46 {
                                                    debug __field5 => _112; // in scope 46 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                                }
                                                scope 47 {
                                                    debug __val => _115; // in scope 47 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                                }
                                                scope 48 {
                                                    debug __err => _116; // in scope 48 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                                }
                                            }
                                            scope 42 {
                                                debug __field4 => _105; // in scope 42 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                            }
                                            scope 43 {
                                                debug __val => _108; // in scope 43 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                            }
                                            scope 44 {
                                                debug __err => _109; // in scope 44 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                            }
                                        }
                                        scope 38 {
                                            debug __field3 => _98; // in scope 38 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                        }
                                        scope 39 {
                                            debug __val => _101; // in scope 39 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                        }
                                        scope 40 {
                                            debug __err => _102; // in scope 40 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                        }
                                    }
                                    scope 34 {
                                        debug __field2 => _91; // in scope 34 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                    }
                                    scope 35 {
                                        debug __val => _94; // in scope 35 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                    }
                                    scope 36 {
                                        debug __err => _95; // in scope 36 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                    }
                                }
                                scope 30 {
                                    debug __field1 => _84; // in scope 30 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 31 {
                                    debug __val => _87; // in scope 31 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                                scope 32 {
                                    debug __err => _88; // in scope 32 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                }
                            }
                            scope 26 {
                                debug __field0 => _77; // in scope 26 at cita-jsonrpc/src/config.rs:18:21: 18:32
                            }
                            scope 27 {
                                debug __val => _80; // in scope 27 at cita-jsonrpc/src/config.rs:18:21: 18:32
                            }
                            scope 28 {
                                debug __err => _81; // in scope 28 at cita-jsonrpc/src/config.rs:18:21: 18:32
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _124 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _125 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _3 = std::option::Option::<usize>::None; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _4 = std::option::Option::<std::option::Option<bool>>::None; // scope 1 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _5 = std::option::Option::<ProfileConfig>::None; // scope 2 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _125 = const true;               // scope 3 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _6 = std::option::Option::<HttpConfig>::None; // scope 3 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _124 = const true;               // scope 4 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _7 = std::option::Option::<WsConfig>::None; // scope 4 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _8 = std::option::Option::<NewTxFlowConfig>::None; // scope 5 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb1;                     // scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb1: {
        _10 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _9 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field>(_10) -> [return: bb2, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::__Field>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = discriminant(_9);          // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _11) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb3: {
        _13 = move ((_9 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _13); // scope 9 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb4: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb5: {
        _12 = move ((_9 as Ok).0: std::option::Option<config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field>); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _14 = discriminant(_12);         // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _14) -> [1: bb7, otherwise: bb6]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb6: {
        _76 = discriminant(_3);          // scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _76) -> [0: bb70, 1: bb72, otherwise: bb71]; // scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb7: {
        _15 = move ((_12 as Some).0: config::_IMPL_DESERIALIZE_FOR_Config::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::Config>::deserialize::__Field); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _16 = discriminant(_15);         // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _16) -> [0: bb9, 1: bb18, 2: bb27, 3: bb36, 4: bb47, 5: bb58, otherwise: bb8]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb8: {
        _72 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _71 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_72) -> [return: bb67, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(31)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<IgnoredAny, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<IgnoredAny>}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = &_3;                       // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _17 = std::option::Option::<usize>::is_some(_18) -> [return: bb10, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<usize>) -> bool {std::option::Option::<usize>::is_some}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _17) -> [0: bb13, otherwise: bb11]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb11: {
        _19 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "backlog_capacity") -> [return: bb12, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _19); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb13: {
        _22 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _21 = <__A as MapAccess<'_>>::next_value::<usize>(_22) -> [return: bb14, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:20:5: 20:8
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<usize, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<usize>}, val: Value(<ZST>) }
    }

    bb14: {
        _23 = discriminant(_21);         // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _23) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _25); // scope 11 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb16: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb17: {
        _24 = ((_21 as Ok).0: usize);    // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _20 = std::option::Option::<usize>::Some(_24); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _3 = move _20;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb1;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb18: {
        _27 = &_4;                       // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _26 = std::option::Option::<std::option::Option<bool>>::is_some(_27) -> [return: bb19, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::option::Option<bool>>) -> bool {std::option::Option::<std::option::Option<bool>>::is_some}, val: Value(<ZST>) }
    }

    bb19: {
        switchInt(move _26) -> [0: bb22, otherwise: bb20]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb20: {
        _28 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "enable_version") -> [return: bb21, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _28); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb22: {
        _31 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _30 = <__A as MapAccess<'_>>::next_value::<std::option::Option<bool>>(_31) -> [return: bb23, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:21:5: 21:8
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<std::option::Option<bool>>}, val: Value(<ZST>) }
    }

    bb23: {
        _32 = discriminant(_30);         // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _32) -> [0: bb26, 1: bb24, otherwise: bb25]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb24: {
        _34 = move ((_30 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _34); // scope 13 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb25: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb26: {
        _33 = ((_30 as Ok).0: std::option::Option<bool>); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _29 = std::option::Option::<std::option::Option<bool>>::Some(_33); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _4 = move _29;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb1;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb27: {
        _36 = &_5;                       // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _35 = std::option::Option::<ProfileConfig>::is_some(_36) -> [return: bb28, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<ProfileConfig>) -> bool {std::option::Option::<ProfileConfig>::is_some}, val: Value(<ZST>) }
    }

    bb28: {
        switchInt(move _35) -> [0: bb31, otherwise: bb29]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb29: {
        _37 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "profile_config") -> [return: bb30, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _37); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb31: {
        _40 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _39 = <__A as MapAccess<'_>>::next_value::<ProfileConfig>(_40) -> [return: bb32, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:22:5: 22:8
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<ProfileConfig, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<ProfileConfig>}, val: Value(<ZST>) }
    }

    bb32: {
        _41 = discriminant(_39);         // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _41) -> [0: bb35, 1: bb33, otherwise: bb34]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb33: {
        _43 = move ((_39 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _43); // scope 15 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb34: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb35: {
        _42 = ((_39 as Ok).0: config::ProfileConfig); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _38 = std::option::Option::<ProfileConfig>::Some(_42); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _5 = move _38;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb1;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb36: {
        _45 = &_6;                       // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _44 = std::option::Option::<HttpConfig>::is_some(_45) -> [return: bb37, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<HttpConfig>) -> bool {std::option::Option::<HttpConfig>::is_some}, val: Value(<ZST>) }
    }

    bb37: {
        switchInt(move _44) -> [0: bb40, otherwise: bb38]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb38: {
        _46 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "http_config") -> [return: bb39, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb39: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _46); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb40: {
        _49 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _48 = <__A as MapAccess<'_>>::next_value::<HttpConfig>(_49) -> [return: bb41, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:23:5: 23:8
                                         // + user_ty: UserType(24)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<HttpConfig, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<HttpConfig>}, val: Value(<ZST>) }
    }

    bb41: {
        _50 = discriminant(_48);         // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _50) -> [0: bb44, 1: bb42, otherwise: bb43]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb42: {
        _52 = move ((_48 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _52); // scope 17 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb43: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb44: {
        _51 = move ((_48 as Ok).0: config::HttpConfig); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _47 = std::option::Option::<HttpConfig>::Some(move _51); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        drop(_6) -> [return: bb45, unwind: bb46]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb45: {
        _125 = const true;               // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _6 = move _47;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb1;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb46 (cleanup): {
        _125 = const true;               // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _6 = move _47;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb134;                   // scope 7 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb47: {
        _54 = &_7;                       // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _53 = std::option::Option::<WsConfig>::is_some(_54) -> [return: bb48, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(25)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<WsConfig>) -> bool {std::option::Option::<WsConfig>::is_some}, val: Value(<ZST>) }
    }

    bb48: {
        switchInt(move _53) -> [0: bb51, otherwise: bb49]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb49: {
        _55 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "ws_config") -> [return: bb50, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(26)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb50: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _55); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb51: {
        _58 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _57 = <__A as MapAccess<'_>>::next_value::<WsConfig>(_58) -> [return: bb52, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:24:5: 24:8
                                         // + user_ty: UserType(27)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<WsConfig, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<WsConfig>}, val: Value(<ZST>) }
    }

    bb52: {
        _59 = discriminant(_57);         // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _59) -> [0: bb55, 1: bb53, otherwise: bb54]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb53: {
        _61 = move ((_57 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _61); // scope 19 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb54: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb55: {
        _60 = move ((_57 as Ok).0: config::WsConfig); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _56 = std::option::Option::<WsConfig>::Some(move _60); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        drop(_7) -> [return: bb56, unwind: bb57]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb56: {
        _124 = const true;               // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _7 = move _56;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb1;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb57 (cleanup): {
        _124 = const true;               // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _7 = move _56;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb134;                   // scope 7 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb58: {
        _63 = &_8;                       // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _62 = std::option::Option::<NewTxFlowConfig>::is_some(_63) -> [return: bb59, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(28)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<NewTxFlowConfig>) -> bool {std::option::Option::<NewTxFlowConfig>::is_some}, val: Value(<ZST>) }
    }

    bb59: {
        switchInt(move _62) -> [0: bb62, otherwise: bb60]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb60: {
        _64 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "new_tx_flow_config") -> [return: bb61, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + user_ty: UserType(29)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb61: {
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _64); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb62: {
        _67 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _66 = <__A as MapAccess<'_>>::next_value::<NewTxFlowConfig>(_67) -> [return: bb63, unwind: bb134]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:25:5: 25:8
                                         // + user_ty: UserType(30)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<NewTxFlowConfig, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<NewTxFlowConfig>}, val: Value(<ZST>) }
    }

    bb63: {
        _68 = discriminant(_66);         // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _68) -> [0: bb66, 1: bb64, otherwise: bb65]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb64: {
        _70 = move ((_66 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _70); // scope 21 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb65: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb66: {
        _69 = ((_66 as Ok).0: config::NewTxFlowConfig); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _65 = std::option::Option::<NewTxFlowConfig>::Some(_69); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _8 = move _65;                   // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb1;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb67: {
        _73 = discriminant(_71);         // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _73) -> [0: bb1, 1: bb68, otherwise: bb69]; // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb68: {
        _74 = move ((_71 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _74); // scope 24 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 7 at no-location
    }

    bb69: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb70: {
        _78 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "backlog_capacity") -> [return: bb73, unwind: bb134]; // scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:20:5: 20:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<usize, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb71: {
        unreachable;                     // scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb72: {
        _77 = ((_3 as Some).0: usize);   // scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _75 = _77;                       // scope 26 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb77;                    // scope 6 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb73: {
        _79 = discriminant(_78);         // scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _79) -> [0: bb76, 1: bb74, otherwise: bb75]; // scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb74: {
        _81 = move ((_78 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _81); // scope 28 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 6 at no-location
    }

    bb75: {
        unreachable;                     // scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb76: {
        _80 = ((_78 as Ok).0: usize);    // scope 6 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _75 = _80;                       // scope 27 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb77;                    // scope 6 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb77: {
        _83 = discriminant(_4);          // scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _83) -> [0: bb78, 1: bb80, otherwise: bb79]; // scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb78: {
        _85 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::option::Option<bool>, <__A as MapAccess<'_>>::Error>(const "enable_version") -> [return: bb81, unwind: bb134]; // scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:21:5: 21:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<std::option::Option<bool>, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::option::Option<bool>, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb79: {
        unreachable;                     // scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb80: {
        _84 = ((_4 as Some).0: std::option::Option<bool>); // scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _82 = _84;                       // scope 30 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb85;                    // scope 25 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb81: {
        _86 = discriminant(_85);         // scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _86) -> [0: bb84, 1: bb82, otherwise: bb83]; // scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb82: {
        _88 = move ((_85 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _88); // scope 32 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 25 at no-location
    }

    bb83: {
        unreachable;                     // scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb84: {
        _87 = ((_85 as Ok).0: std::option::Option<bool>); // scope 25 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _82 = _87;                       // scope 31 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb85;                    // scope 25 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb85: {
        _90 = discriminant(_5);          // scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _90) -> [0: bb86, 1: bb88, otherwise: bb87]; // scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb86: {
        _92 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, ProfileConfig, <__A as MapAccess<'_>>::Error>(const "profile_config") -> [return: bb89, unwind: bb134]; // scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:22:5: 22:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<ProfileConfig, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, ProfileConfig, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb87: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb88: {
        _91 = ((_5 as Some).0: config::ProfileConfig); // scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _89 = _91;                       // scope 34 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb93;                    // scope 29 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb89: {
        _93 = discriminant(_92);         // scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _93) -> [0: bb92, 1: bb90, otherwise: bb91]; // scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb90: {
        _95 = move ((_92 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _95); // scope 36 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 29 at no-location
    }

    bb91: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb92: {
        _94 = ((_92 as Ok).0: config::ProfileConfig); // scope 29 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _89 = _94;                       // scope 35 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb93;                    // scope 29 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb93: {
        _97 = discriminant(_6);          // scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _97) -> [0: bb94, 1: bb96, otherwise: bb95]; // scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb94: {
        _99 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, HttpConfig, <__A as MapAccess<'_>>::Error>(const "http_config") -> [return: bb97, unwind: bb134]; // scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:23:5: 23:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<HttpConfig, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, HttpConfig, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb95: {
        unreachable;                     // scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb96: {
        _125 = const false;              // scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _98 = move ((_6 as Some).0: config::HttpConfig); // scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _96 = move _98;                  // scope 38 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb101;                   // scope 33 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb97: {
        _100 = discriminant(_99);        // scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _100) -> [0: bb100, 1: bb98, otherwise: bb99]; // scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb98: {
        _102 = move ((_99 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _102); // scope 40 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb119;                   // scope 33 at no-location
    }

    bb99: {
        unreachable;                     // scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb100: {
        _101 = move ((_99 as Ok).0: config::HttpConfig); // scope 33 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _96 = move _101;                 // scope 39 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb101;                   // scope 33 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb101: {
        _104 = discriminant(_7);         // scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _104) -> [0: bb102, 1: bb104, otherwise: bb103]; // scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb102: {
        _106 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, WsConfig, <__A as MapAccess<'_>>::Error>(const "ws_config") -> [return: bb105, unwind: bb122]; // scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:24:5: 24:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<WsConfig, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, WsConfig, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb103: {
        unreachable;                     // scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb104: {
        _124 = const false;              // scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _105 = move ((_7 as Some).0: config::WsConfig); // scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _103 = move _105;                // scope 42 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb109;                   // scope 37 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb105: {
        _107 = discriminant(_106);       // scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _107) -> [0: bb108, 1: bb106, otherwise: bb107]; // scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb106: {
        _109 = move ((_106 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _109); // scope 44 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb118;                   // scope 37 at no-location
    }

    bb107: {
        unreachable;                     // scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb108: {
        _108 = move ((_106 as Ok).0: config::WsConfig); // scope 37 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _103 = move _108;                // scope 43 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb109;                   // scope 37 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb109: {
        _111 = discriminant(_8);         // scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _111) -> [0: bb110, 1: bb112, otherwise: bb111]; // scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb110: {
        _113 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, NewTxFlowConfig, <__A as MapAccess<'_>>::Error>(const "new_tx_flow_config") -> [return: bb113, unwind: bb121]; // scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:25:5: 25:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<NewTxFlowConfig, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, NewTxFlowConfig, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb111: {
        unreachable;                     // scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb112: {
        _112 = ((_8 as Some).0: config::NewTxFlowConfig); // scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _110 = _112;                     // scope 46 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb117;                   // scope 41 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb113: {
        _114 = discriminant(_113);       // scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
        switchInt(move _114) -> [0: bb116, 1: bb114, otherwise: bb115]; // scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb114: {
        _116 = move ((_113 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Err(move _116); // scope 48 at cita-jsonrpc/src/config.rs:18:21: 18:32
        drop(_103) -> [return: bb118, unwind: bb122]; // scope 37 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb115: {
        unreachable;                     // scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb116: {
        _115 = ((_113 as Ok).0: config::NewTxFlowConfig); // scope 41 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _110 = _115;                     // scope 47 at cita-jsonrpc/src/config.rs:18:21: 18:32
        goto -> bb117;                   // scope 41 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb117: {
        _118 = _75;                      // scope 45 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _119 = _82;                      // scope 45 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _120 = _89;                      // scope 45 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _121 = move _96;                 // scope 45 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _122 = move _103;                // scope 45 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _123 = _110;                     // scope 45 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _117 = Config { backlog_capacity: move _118, enable_version: move _119, profile_config: move _120, http_config: move _121, ws_config: move _122, new_tx_flow_config: move _123 }; // scope 45 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = Result::<Config, <__A as MapAccess<'_>>::Error>::Ok(move _117); // scope 45 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _124 = const false;              // scope 4 at cita-jsonrpc/src/config.rs:18:31: 18:32
        _125 = const false;              // scope 3 at cita-jsonrpc/src/config.rs:18:31: 18:32
        drop(_2) -> bb120;               // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb118: {
        drop(_96) -> [return: bb119, unwind: bb134]; // scope 33 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb119: {
        _126 = discriminant(_7);         // scope 4 at cita-jsonrpc/src/config.rs:18:31: 18:32
        switchInt(move _126) -> [1: bb127, otherwise: bb126]; // scope 4 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb120: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:32: 18:32
    }

    bb121 (cleanup): {
        drop(_103) -> bb122;             // scope 37 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb122 (cleanup): {
        drop(_96) -> bb134;              // scope 33 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb123 (cleanup): {
        _129 = discriminant(_6);         // scope 3 at cita-jsonrpc/src/config.rs:18:31: 18:32
        switchInt(move _129) -> [1: bb135, otherwise: bb124]; // scope 3 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb124 (cleanup): {
        drop(_2) -> bb125;               // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb125 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }

    bb126: {
        _124 = const false;              // scope 4 at cita-jsonrpc/src/config.rs:18:31: 18:32
        _127 = discriminant(_6);         // scope 3 at cita-jsonrpc/src/config.rs:18:31: 18:32
        switchInt(move _127) -> [1: bb130, otherwise: bb129]; // scope 3 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb127: {
        switchInt(_124) -> [0: bb126, otherwise: bb128]; // scope 4 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb128: {
        drop(((_7 as Some).0: config::WsConfig)) -> [return: bb126, unwind: bb123]; // scope 4 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb129: {
        _125 = const false;              // scope 3 at cita-jsonrpc/src/config.rs:18:31: 18:32
        drop(_2) -> bb120;               // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb130: {
        switchInt(_125) -> [0: bb129, otherwise: bb131]; // scope 3 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb131: {
        drop(((_6 as Some).0: config::HttpConfig)) -> [return: bb129, unwind: bb124]; // scope 3 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb132 (cleanup): {
        switchInt(_124) -> [0: bb123, otherwise: bb133]; // scope 4 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb133 (cleanup): {
        drop(((_7 as Some).0: config::WsConfig)) -> bb123; // scope 4 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb134 (cleanup): {
        _128 = discriminant(_7);         // scope 4 at cita-jsonrpc/src/config.rs:18:31: 18:32
        switchInt(move _128) -> [1: bb132, otherwise: bb123]; // scope 4 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb135 (cleanup): {
        switchInt(_125) -> [0: bb124, otherwise: bb136]; // scope 3 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }

    bb136 (cleanup): {
        drop(((_6 as Some).0: config::HttpConfig)) -> bb124; // scope 3 at cita-jsonrpc/src/config.rs:18:31: 18:32
    }
}

const _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _1: &[&str; 6];              // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _2: &[&str; 6];                  // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let _3: [&str; 6];                   // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _4: &[&str; 6];              // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        StorageLive(_1);                 // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        StorageLive(_2);                 // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _4 = const _;                    // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &[&str; 6], val: Unevaluated(_IMPL_DESERIALIZE_FOR_Config::<impl Deserialize<'de> for Config>::deserialize::FIELDS, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _1 = &(*_2);                     // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        StorageDead(_2);                 // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
        StorageDead(_1);                 // scope 0 at cita-jsonrpc/src/config.rs:18:31: 18:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_Config::<impl at cita-jsonrpc/src/config.rs:18:21: 18:32>::deserialize::FIELDS: &[&str; 6] = {
    let mut _0: &[&str; 6];              // return place in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    let mut _1: [&str; 6];               // in scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32

    bb0: {
        _1 = [const "backlog_capacity", const "enable_version", const "profile_config", const "http_config", const "ws_config", const "new_tx_flow_config"]; // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:21: 18:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:21: 18:32
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:18:34: 18:39>::fmt(_1: &Config, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
    debug f => _2;                       // in scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
    let _4: &[&dyn std::fmt::Debug; 6];  // in scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
    let _5: [&dyn std::fmt::Debug; 6];   // in scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/config.rs:20:5: 20:32
    let _7: &usize;                      // in scope 0 at cita-jsonrpc/src/config.rs:20:5: 20:32
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/config.rs:21:5: 21:37
    let _9: &std::option::Option<bool>;  // in scope 0 at cita-jsonrpc/src/config.rs:21:5: 21:37
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:22:5: 22:38
    let _11: &config::ProfileConfig;     // in scope 0 at cita-jsonrpc/src/config.rs:22:5: 22:38
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:23:5: 23:32
    let _13: &config::HttpConfig;        // in scope 0 at cita-jsonrpc/src/config.rs:23:5: 23:32
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:24:5: 24:28
    let _15: &config::WsConfig;          // in scope 0 at cita-jsonrpc/src/config.rs:24:5: 24:28
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:25:5: 25:44
    let _17: &&config::NewTxFlowConfig;  // in scope 0 at cita-jsonrpc/src/config.rs:25:5: 25:44
    let _18: &config::NewTxFlowConfig;   // in scope 0 at cita-jsonrpc/src/config.rs:25:5: 25:44
    let _19: &str;                       // in scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
    let mut _20: &[&str];                // in scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
    let mut _21: &[&str; 6];             // in scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
    scope 1 {
        debug names => _21;              // in scope 1 at cita-jsonrpc/src/config.rs:18:34: 18:39
        let _3: &[&dyn std::fmt::Debug]; // in scope 1 at cita-jsonrpc/src/config.rs:18:34: 18:39
        scope 2 {
            debug values => _3;          // in scope 2 at cita-jsonrpc/src/config.rs:18:34: 18:39
        }
    }

    bb0: {
        _21 = const _;                   // scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:34: 18:39
                                         // + literal: Const { ty: &[&str; 6], val: Unevaluated(<Config as Debug>::fmt, [], Some(promoted[0])) }
        _7 = &((*_1).0: usize);          // scope 1 at cita-jsonrpc/src/config.rs:20:5: 20:32
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:20:5: 20:32
        _9 = &((*_1).1: std::option::Option<bool>); // scope 1 at cita-jsonrpc/src/config.rs:21:5: 21:37
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:21:5: 21:37
        _11 = &((*_1).2: config::ProfileConfig); // scope 1 at cita-jsonrpc/src/config.rs:22:5: 22:38
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:22:5: 22:38
        _13 = &((*_1).3: config::HttpConfig); // scope 1 at cita-jsonrpc/src/config.rs:23:5: 23:32
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:23:5: 23:32
        _15 = &((*_1).4: config::WsConfig); // scope 1 at cita-jsonrpc/src/config.rs:24:5: 24:28
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:24:5: 24:28
        _18 = &((*_1).5: config::NewTxFlowConfig); // scope 1 at cita-jsonrpc/src/config.rs:25:5: 25:44
        _17 = &_18;                      // scope 1 at cita-jsonrpc/src/config.rs:25:5: 25:44
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:25:5: 25:44
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16]; // scope 1 at cita-jsonrpc/src/config.rs:18:34: 18:39
        _4 = &_5;                        // scope 1 at cita-jsonrpc/src/config.rs:18:34: 18:39
        _3 = _4 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:18:34: 18:39
        _19 = const "Config";            // scope 2 at cita-jsonrpc/src/config.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:34: 18:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21 as &[&str] (Pointer(Unsize)); // scope 2 at cita-jsonrpc/src/config.rs:18:34: 18:39
        _0 = std::fmt::Formatter::<'_>::debug_struct_fields_finish(_2, _19, move _20, _3) -> bb1; // scope 2 at cita-jsonrpc/src/config.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:18:34: 18:39
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:39: 18:39
    }
}

promoted[0] in config::<impl at cita-jsonrpc/src/config.rs:18:34: 18:39>::fmt: &[&str; 6] = {
    let mut _0: &[&str; 6];              // return place in scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
    let mut _1: [&str; 6];               // in scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
    let mut _2: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:21:5: 21:37
    let mut _3: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:21:5: 21:37
    let mut _4: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:22:5: 22:38
    let mut _5: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:22:5: 22:38
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:23:5: 23:32
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:23:5: 23:32
    let mut _8: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:24:5: 24:28
    let mut _9: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:24:5: 24:28
    let mut _10: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:25:5: 25:44
    let mut _11: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:25:5: 25:44

    bb0: {
        _3 = const "enable_version";     // scope 0 at cita-jsonrpc/src/config.rs:21:5: 21:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:21:5: 21:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-jsonrpc/src/config.rs:21:5: 21:37
        _5 = const "profile_config";     // scope 0 at cita-jsonrpc/src/config.rs:22:5: 22:38
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:22:5: 22:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at cita-jsonrpc/src/config.rs:22:5: 22:38
        _7 = const "http_config";        // scope 0 at cita-jsonrpc/src/config.rs:23:5: 23:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:23:5: 23:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/config.rs:23:5: 23:32
        _9 = const "ws_config";          // scope 0 at cita-jsonrpc/src/config.rs:24:5: 24:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:24:5: 24:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at cita-jsonrpc/src/config.rs:24:5: 24:28
        _11 = const "new_tx_flow_config"; // scope 0 at cita-jsonrpc/src/config.rs:25:5: 25:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:25:5: 25:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at cita-jsonrpc/src/config.rs:25:5: 25:44
        _1 = [const "backlog_capacity", move _2, move _4, move _6, move _8, move _10]; // scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:20:5: 20:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:34: 18:39
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:18:41: 18:46>::clone(_1: &Config) -> Config {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:18:41: 18:46
    let mut _0: config::Config;          // return place in scope 0 at cita-jsonrpc/src/config.rs:18:41: 18:46
    let mut _2: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:20:5: 20:32
    let _3: &usize;                      // in scope 0 at cita-jsonrpc/src/config.rs:20:5: 20:32
    let mut _4: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:21:5: 21:37
    let _5: &std::option::Option<bool>;  // in scope 0 at cita-jsonrpc/src/config.rs:21:5: 21:37
    let mut _6: config::ProfileConfig;   // in scope 0 at cita-jsonrpc/src/config.rs:22:5: 22:38
    let _7: &config::ProfileConfig;      // in scope 0 at cita-jsonrpc/src/config.rs:22:5: 22:38
    let mut _8: config::HttpConfig;      // in scope 0 at cita-jsonrpc/src/config.rs:23:5: 23:32
    let _9: &config::HttpConfig;         // in scope 0 at cita-jsonrpc/src/config.rs:23:5: 23:32
    let mut _10: config::WsConfig;       // in scope 0 at cita-jsonrpc/src/config.rs:24:5: 24:28
    let _11: &config::WsConfig;          // in scope 0 at cita-jsonrpc/src/config.rs:24:5: 24:28
    let mut _12: config::NewTxFlowConfig; // in scope 0 at cita-jsonrpc/src/config.rs:25:5: 25:44
    let _13: &config::NewTxFlowConfig;   // in scope 0 at cita-jsonrpc/src/config.rs:25:5: 25:44

    bb0: {
        _3 = &((*_1).0: usize);          // scope 0 at cita-jsonrpc/src/config.rs:20:5: 20:32
        _2 = (*_3);                      // scope 0 at cita-jsonrpc/src/config.rs:20:5: 20:32
        _5 = &((*_1).1: std::option::Option<bool>); // scope 0 at cita-jsonrpc/src/config.rs:21:5: 21:37
        _4 = <std::option::Option<bool> as Clone>::clone(_5) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:21:5: 21:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:21:5: 21:37
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> std::option::Option<bool> {<std::option::Option<bool> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).2: config::ProfileConfig); // scope 0 at cita-jsonrpc/src/config.rs:22:5: 22:38
        _6 = <ProfileConfig as Clone>::clone(_7) -> bb2; // scope 0 at cita-jsonrpc/src/config.rs:22:5: 22:38
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:22:5: 22:38
                                         // + literal: Const { ty: for<'a> fn(&'a ProfileConfig) -> ProfileConfig {<ProfileConfig as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &((*_1).3: config::HttpConfig); // scope 0 at cita-jsonrpc/src/config.rs:23:5: 23:32
        _8 = <HttpConfig as Clone>::clone(_9) -> bb3; // scope 0 at cita-jsonrpc/src/config.rs:23:5: 23:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:23:5: 23:32
                                         // + literal: Const { ty: for<'a> fn(&'a HttpConfig) -> HttpConfig {<HttpConfig as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = &((*_1).4: config::WsConfig); // scope 0 at cita-jsonrpc/src/config.rs:24:5: 24:28
        _10 = <WsConfig as Clone>::clone(_11) -> [return: bb4, unwind: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:24:5: 24:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:24:5: 24:28
                                         // + literal: Const { ty: for<'a> fn(&'a WsConfig) -> WsConfig {<WsConfig as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = &((*_1).5: config::NewTxFlowConfig); // scope 0 at cita-jsonrpc/src/config.rs:25:5: 25:44
        _12 = <NewTxFlowConfig as Clone>::clone(_13) -> [return: bb5, unwind: bb6]; // scope 0 at cita-jsonrpc/src/config.rs:25:5: 25:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:25:5: 25:44
                                         // + literal: Const { ty: for<'a> fn(&'a NewTxFlowConfig) -> NewTxFlowConfig {<NewTxFlowConfig as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = Config { backlog_capacity: move _2, enable_version: move _4, profile_config: move _6, http_config: move _8, ws_config: move _10, new_tx_flow_config: move _12 }; // scope 0 at cita-jsonrpc/src/config.rs:18:41: 18:46
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:18:46: 18:46
    }

    bb6 (cleanup): {
        drop(_10) -> bb7;                // scope 0 at cita-jsonrpc/src/config.rs:18:45: 18:46
    }

    bb7 (cleanup): {
        drop(_8) -> bb8;                 // scope 0 at cita-jsonrpc/src/config.rs:18:45: 18:46
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:18:41: 18:46
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:28:1: 28:12>::new(_1: &str) -> Config {
    debug path => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:29:16: 29:20
    let mut _0: config::Config;          // return place in scope 0 at cita-jsonrpc/src/config.rs:29:31: 29:35
    let mut _2: std::string::String;     // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:13: 52:23
    let _3: usize;                       // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 55:83
    let mut _4: std::result::Result<usize, std::io::Error>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 54:61
    let mut _5: std::result::Result<std::fs::File, std::io::Error>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 53:26
    let mut _6: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30]; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
    let mut _7: &mut std::string::String; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
    let mut _8: std::result::Result<config::Config, toml::de::Error>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:9: 56:51
    let mut _9: &str;                    // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
    let _10: &str;                       // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
    let _11: &std::string::String;       // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
    scope 1 {
        debug buffer => _2;              // in scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:13: 52:23
    }

    bb0: {
        _2 = std::string::String::new() -> bb1; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:26: 52:39
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:26: 52:37
                                         // + literal: Const { ty: fn() -> std::string::String {std::string::String::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = std::fs::File::open::<&str>(_1) -> [return: bb2, unwind: bb9]; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 53:26
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 53:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> Result<std::fs::File, std::io::Error> {std::fs::File::open::<&str>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut _2;                    // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
        _6 = [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30] { buffer: move _7 }; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
                                         // closure
                                         // + def_id: DefId(0:584 ~ cita_jsonrpc[a6db]::config::{impl#0}::new::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::fs::File,)) -> std::result::Result<usize, std::io::Error>,
                                         //     (&mut std::string::String,),
                                         // ]
        _4 = Result::<std::fs::File, std::io::Error>::and_then::<usize, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30]>(move _5, move _6) -> [return: bb3, unwind: bb9]; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 54:61
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:14: 54:22
                                         // + literal: Const { ty: fn(Result<std::fs::File, std::io::Error>, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30]) -> Result<usize, std::io::Error> {Result::<std::fs::File, std::io::Error>::and_then::<usize, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30]>}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = Result::<usize, std::io::Error>::unwrap_or_else::<[closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34]>(move _4, const ZeroSized: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34]) -> [return: bb4, unwind: bb9]; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:53:9: 55:83
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:14: 55:28
                                         // + literal: Const { ty: fn(Result<usize, std::io::Error>, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34]) -> usize {Result::<usize, std::io::Error>::unwrap_or_else::<[closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34], val: Value(<ZST>) }
    }

    bb4: {
        _11 = &_2;                       // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
        _10 = <std::string::String as Deref>::deref(_11) -> [return: bb5, unwind: bb9]; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = _10;                        // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:43: 56:50
        _8 = parse_config_from_buffer::<'_, Config>(move _9) -> [return: bb6, unwind: bb9]; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:9: 56:51
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:9: 56:42
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> Result<Config, toml::de::Error> {parse_config_from_buffer::<'_, Config>}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = Result::<Config, toml::de::Error>::unwrap_or_else::<[closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34]>(move _8, const ZeroSized: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34]) -> [return: bb7, unwind: bb9]; // scope 1 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:56:9: 57:83
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:14: 57:28
                                         // + literal: Const { ty: fn(Result<Config, toml::de::Error>, [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34]) -> Config {Result::<Config, toml::de::Error>::unwrap_or_else::<[closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34], val: Value(<ZST>) }
    }

    bb7: {
        drop(_2) -> bb8;                 // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:58:5: 58:6
    }

    bb8: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:31:6: 31:6
    }

    bb9 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:58:5: 58:6
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:29:5: 31:6
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:28:1: 28:12>::new::{closure#0}(_1: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:30], _2: std::fs::File) -> Result<usize, std::io::Error> {
    debug f => _2;                       // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:24: 54:29
    debug buffer => (*(_1.0: &mut std::string::String)); // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:52:17: 52:23
    let mut _0: std::result::Result<usize, std::io::Error>; // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:31: 54:31
    let mut _3: &mut std::fs::File;      // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:31: 54:60
    let mut _4: &mut std::string::String; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60

    bb0: {
        _3 = &mut _2;                    // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:31: 54:60
        _4 = deref_copy (_1.0: &mut std::string::String); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:48: 54:59
        _0 = <std::fs::File as std::io::Read>::read_to_string(move _3, _4) -> [return: bb1, unwind: bb3]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:31: 54:60
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:33: 54:47
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fs::File, &'b mut std::string::String) -> Result<usize, std::io::Error> {<std::fs::File as std::io::Read>::read_to_string}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:59: 54:60
    }

    bb2: {
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:60: 54:60
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:59: 54:60
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:54:23: 54:60
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:28:1: 28:12>::new::{closure#1}(_1: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:34], _2: std::io::Error) -> usize {
    debug err => _2;                     // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:30: 55:33
    let mut _0: usize;                   // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:35: 55:35
    let mut _3: !;                       // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _5: &[&str];                 // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _8: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _9: core::fmt::ArgumentV1<'_>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
    let _10: &std::io::Error;            // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
    let mut _11: &[&str; 2];             // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76

    bb0: {
        _11 = const _;                   // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Config::new::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _5 = _11 as &[&str] (Pointer(Unsize)); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
        _10 = &_2;                       // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
        _9 = core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>(_10) -> [return: bb1, unwind: bb3]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:78: 55:81
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b std::io::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = [move _9];                  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _7 = &_8;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _6 = _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb3]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = panic_fmt(move _4) -> bb3;  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:30:5: 30:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:29: 55:82
    }
}

promoted[0] in config::<impl at cita-jsonrpc/src/config.rs:28:1: 28:12>::new::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
    let mut _1: [&str; 2];               // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76

    bb0: {
        _1 = [const "Error while loading config: [", const "]"]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:55:42: 55:76
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:28:1: 28:12>::new::{closure#2}(_1: [closure@/home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:34], _2: toml::de::Error) -> Config {
    debug err => _2;                     // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:30: 57:33
    let mut _0: config::Config;          // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:35: 57:35
    let mut _3: !;                       // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _5: &[&str];                 // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _8: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _9: core::fmt::ArgumentV1<'_>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
    let _10: &toml::de::Error;           // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
    let mut _11: &[&str; 2];             // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76

    bb0: {
        _11 = const _;                   // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Config::new::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _5 = _11 as &[&str] (Pointer(Unsize)); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
        _10 = &_2;                       // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
        _9 = core::fmt::ArgumentV1::<'_>::new_display::<toml::de::Error>(_10) -> [return: bb1, unwind: bb3]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:78: 57:81
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b toml::de::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<toml::de::Error>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = [move _9];                  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _7 = &_8;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _6 = _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb3]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = panic_fmt(move _4) -> bb3;  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:30:5: 30:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:29: 57:82
    }
}

promoted[0] in config::<impl at cita-jsonrpc/src/config.rs:28:1: 28:12>::new::{closure#2}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
    let mut _1: [&str; 2];               // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76

    bb0: {
        _1 = [const "Error while parsing config: [", const "]"]; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:57:42: 57:76
    }
}

const _IMPL_SERIALIZE_FOR_NewTxFlowConfig: () = {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19

    bb0: {
        _0 = const ();                   // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    }
}

fn _IMPL_SERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:10: 34:19>::serialize(_1: &NewTxFlowConfig, _2: __S) -> Result<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    debug __serializer => _2;            // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _0: std::result::Result<<__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _3: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _4: std::result::Result<<__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _5: __S;                     // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _6: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _7: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let _8: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let _9: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _10: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _11: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let _12: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _13: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _15: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _16: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let _17: &u32;                       // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _18: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _20: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    let mut _21: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:18: 34:19
    let mut _22: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:18: 34:19
    scope 1 {
        debug __serde_state => _3;       // in scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        let _14: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        let _19: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        scope 4 {
            debug __val => const ();     // in scope 4 at cita-jsonrpc/src/config.rs:34:10: 34:19
        }
        scope 5 {
            debug __err => _14;          // in scope 5 at cita-jsonrpc/src/config.rs:34:10: 34:19
        }
        scope 6 {
            debug __val => const ();     // in scope 6 at cita-jsonrpc/src/config.rs:34:10: 34:19
        }
        scope 7 {
            debug __err => _19;          // in scope 7 at cita-jsonrpc/src/config.rs:34:10: 34:19
        }
    }
    scope 2 {
        debug __val => _8;               // in scope 2 at cita-jsonrpc/src/config.rs:34:10: 34:19
    }
    scope 3 {
        debug __err => _9;               // in scope 3 at cita-jsonrpc/src/config.rs:34:10: 34:19
    }

    bb0: {
        _22 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _21 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _22 = const true;                // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _5 = move _2;                    // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _6 = const 2_usize;              // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _22 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _4 = <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::serialize_struct(move _5, const "NewTxFlowConfig", move _6) -> [return: bb1, unwind: bb21]; // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:10: 34:19
                                         // + literal: Const { ty: fn(__S, &'static str, usize) -> Result<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error> {<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::serialize_struct}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:10: 34:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _22 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:34:18: 34:19
        _7 = discriminant(_4);           // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
        switchInt(move _7) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    }

    bb2: {
        _9 = move ((_4 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _9); // scope 3 at cita-jsonrpc/src/config.rs:34:10: 34:19
        goto -> bb15;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    }

    bb4: {
        _8 = move ((_4 as Ok).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct); // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _21 = const true;                // scope 2 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _3 = move _8;                    // scope 2 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _11 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _12 = &((*_1).0: usize);         // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _10 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>(_11, const "count_per_batch", _12) -> [return: bb5, unwind: bb19]; // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:36:5: 36:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b usize) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:10: 34:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _13 = discriminant(_10);         // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        switchInt(move _13) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
    }

    bb6: {
        _14 = move ((_10 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _14); // scope 5 at cita-jsonrpc/src/config.rs:34:10: 34:19
        goto -> bb14;                    // scope 1 at no-location
    }

    bb7: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
    }

    bb8: {
        _16 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _17 = &((*_1).1: u32);           // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _15 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<u32>(_16, const "buffer_duration", _17) -> [return: bb9, unwind: bb19]; // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:37:5: 37:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b u32) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<u32>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:10: 34:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _18 = discriminant(_15);         // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        switchInt(move _18) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
    }

    bb10: {
        _19 = move ((_15 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _19); // scope 7 at cita-jsonrpc/src/config.rs:34:10: 34:19
        goto -> bb14;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
    }

    bb12: {
        _21 = const false;               // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _20 = move _3;                   // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
        _0 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _20) -> [return: bb13, unwind: bb19]; // scope 1 at cita-jsonrpc/src/config.rs:34:10: 34:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:10: 34:19
                                         // + literal: Const { ty: fn(<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct) -> Result<<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Ok, <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::end}, val: Value(<ZST>) }
    }

    bb13: {
        _21 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:34:18: 34:19
        goto -> bb16;                    // scope 0 at cita-jsonrpc/src/config.rs:34:18: 34:19
    }

    bb14: {
        drop(_3) -> bb15;                // scope 0 at cita-jsonrpc/src/config.rs:34:18: 34:19
    }

    bb15: {
        _21 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:34:18: 34:19
        goto -> bb16;                    // scope 0 at cita-jsonrpc/src/config.rs:34:18: 34:19
    }

    bb16: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:19: 34:19
    }

    bb17 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:34:10: 34:19
    }

    bb18 (cleanup): {
        drop(_3) -> bb17;                // scope 0 at cita-jsonrpc/src/config.rs:34:18: 34:19
    }

    bb19 (cleanup): {
        switchInt(_21) -> [0: bb17, otherwise: bb18]; // scope 0 at cita-jsonrpc/src/config.rs:34:18: 34:19
    }

    bb20 (cleanup): {
        drop(_5) -> bb17;                // scope 0 at cita-jsonrpc/src/config.rs:34:18: 34:19
    }

    bb21 (cleanup): {
        switchInt(_22) -> [0: bb17, otherwise: bb20]; // scope 0 at cita-jsonrpc/src/config.rs:34:18: 34:19
    }
}

const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig: () = {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        _0 = const ();                   // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }
}

fn _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize(_1: __D) -> Result<NewTxFlowConfig, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _0: std::result::Result<config::NewTxFlowConfig, <__D as config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        _0 = <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor<'_>>(move _1, const "NewTxFlowConfig", const _, const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<NewTxFlowConfig>, lifetime: PhantomData::<&()> }}) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: fn(__D, &'static str, &'static [&'static str], _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor<'_>) -> Result<<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor<'_> as Visitor<'_>>::Value, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {<__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor<'_>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::FIELDS, [], None) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor<'_>, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:32: 34:32
    }
}

fn _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    debug __formatter => _2;             // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        _3 = const "field identifier";   // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:32: 34:32
    }
}

fn _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _3: config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _4: config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _5: __E;                     // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _6: config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Unexpected<'_>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _7: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _8: &&str;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, otherwise: bb1]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb1: {
        _6 = Unexpected::<'_>::Unsigned(_2); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _8 = const _;                    // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor as Visitor<'de>>::visit_u64, [ReErased, __E], Some(promoted[0])) }
        _7 = _8 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _5 = <__E as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_value(move _6, move _7) -> bb4; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: for<'a, 'b> fn(Unexpected<'a>, &'b (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'b)) -> __E {<__E as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_value}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, __E>::Ok(move _3); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb5;                     // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb3: {
        _4 = const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, __E>::Ok(move _4); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb5;                     // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb4: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, __E>::Err(move _5); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb5;                     // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb5: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:32: 34:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::visit_u64: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        _1 = const "field index 0 <= i < 2"; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }
}

fn _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::visit_str(_1: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _3: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _4: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _5: config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _6: config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _7: config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "count_per_batch") -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb5]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "buffer_duration") -> bb3; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb6]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb4: {
        _7 = const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field::__ignore; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, __E>::Ok(move _7); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb7;                     // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb5: {
        _5 = const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, __E>::Ok(move _5); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb7;                     // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb6: {
        _6 = const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, __E>::Ok(move _6); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb7;                     // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb7: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:32: 34:32
    }
}

fn _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _3: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _4: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _6: config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _7: config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _8: config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        _3 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _4 = const 15_usize;             // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _5 = Eq(move _3, move _4);       // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _5) -> [0: bb16, otherwise: bb1]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb1: {
        switchInt((*_2)[0 of 15]) -> [99: bb2, 98: bb17, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb2: {
        switchInt((*_2)[1 of 15]) -> [111: bb3, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb3: {
        switchInt((*_2)[2 of 15]) -> [117: bb4, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb4: {
        switchInt((*_2)[3 of 15]) -> [110: bb5, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb5: {
        switchInt((*_2)[4 of 15]) -> [116: bb6, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb6: {
        switchInt((*_2)[5 of 15]) -> [95: bb7, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb7: {
        switchInt((*_2)[6 of 15]) -> [112: bb8, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb8: {
        switchInt((*_2)[7 of 15]) -> [101: bb9, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb9: {
        switchInt((*_2)[8 of 15]) -> [114: bb10, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb10: {
        switchInt((*_2)[9 of 15]) -> [95: bb11, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb11: {
        switchInt((*_2)[10 of 15]) -> [98: bb12, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb12: {
        switchInt((*_2)[11 of 15]) -> [97: bb13, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb13: {
        switchInt((*_2)[12 of 15]) -> [116: bb14, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb14: {
        switchInt((*_2)[13 of 15]) -> [99: bb15, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb15: {
        switchInt((*_2)[14 of 15]) -> [104: bb31, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb16: {
        _8 = const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field::__ignore; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, __E>::Ok(move _8); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb33;                    // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb17: {
        switchInt((*_2)[1 of 15]) -> [117: bb18, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb18: {
        switchInt((*_2)[2 of 15]) -> [102: bb19, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb19: {
        switchInt((*_2)[3 of 15]) -> [102: bb20, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb20: {
        switchInt((*_2)[4 of 15]) -> [101: bb21, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb21: {
        switchInt((*_2)[5 of 15]) -> [114: bb22, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb22: {
        switchInt((*_2)[6 of 15]) -> [95: bb23, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb23: {
        switchInt((*_2)[7 of 15]) -> [100: bb24, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb24: {
        switchInt((*_2)[8 of 15]) -> [117: bb25, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb25: {
        switchInt((*_2)[9 of 15]) -> [114: bb26, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb26: {
        switchInt((*_2)[10 of 15]) -> [97: bb27, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb27: {
        switchInt((*_2)[11 of 15]) -> [116: bb28, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb28: {
        switchInt((*_2)[12 of 15]) -> [105: bb29, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb29: {
        switchInt((*_2)[13 of 15]) -> [111: bb30, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb30: {
        switchInt((*_2)[14 of 15]) -> [110: bb32, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb31: {
        _6 = const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, __E>::Ok(move _6); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb33;                    // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb32: {
        _7 = const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, __E>::Ok(move _7); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb33;                    // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb33: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:32: 34:32
    }
}

fn _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field, <__D as config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        _0 = <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: fn(__D, _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor) -> Result<<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor as Visitor<'_>>::Value, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {<__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__FieldVisitor, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:32: 34:32
    }
}

fn _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    debug __formatter => _2;             // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        _3 = const "struct NewTxFlowConfig"; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:32: 34:32
    }
}

fn _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor<'_>, _2: __A) -> Result<NewTxFlowConfig, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<NewTxFlowConfig>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    debug __seq => _2;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _0: std::result::Result<config::NewTxFlowConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _3: std::result::Result<std::option::Option<usize>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _4: &mut __A;                // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _5: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let _6: std::option::Option<usize>;  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let _7: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _8: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let _9: usize;                       // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _10: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _11: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _12: std::result::Result<std::option::Option<u32>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _13: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _14: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _17: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _19: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _20: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _21: config::NewTxFlowConfig; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _22: &&str;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    scope 1 {
        debug __field0 => _9;            // in scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        let _15: std::option::Option<u32>; // in scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        let _16: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        let _18: u32;                    // in scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        let mut _23: &&str;              // in scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        scope 5 {
            debug __field1 => _18;       // in scope 5 at cita-jsonrpc/src/config.rs:34:21: 34:32
        }
        scope 6 {
            debug __val => _15;          // in scope 6 at cita-jsonrpc/src/config.rs:34:21: 34:32
        }
        scope 7 {
            debug __err => _16;          // in scope 7 at cita-jsonrpc/src/config.rs:34:21: 34:32
        }
        scope 8 {
            debug __value => _18;        // in scope 8 at cita-jsonrpc/src/config.rs:34:21: 34:32
        }
    }
    scope 2 {
        debug __val => _6;               // in scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }
    scope 3 {
        debug __err => _7;               // in scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }
    scope 4 {
        debug __value => _9;             // in scope 4 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb0: {
        _4 = &mut _2;                    // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _3 = <__A as SeqAccess<'_>>::next_element::<usize>(_4) -> [return: bb1, unwind: bb19]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:36:5: 36:8
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<usize>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _0 = Result::<NewTxFlowConfig, <__A as SeqAccess<'_>>::Error>::Err(move _7); // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb17;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<usize>); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _8 = discriminant(_6);           // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb5: {
        _22 = const _;                   // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[0])) }
        _11 = _22 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _10 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb8, unwind: bb19]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb7: {
        _9 = ((_6 as Some).0: usize);    // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _13 = &mut _2;                   // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _12 = <__A as SeqAccess<'_>>::next_element::<u32>(_13) -> [return: bb9, unwind: bb19]; // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:37:5: 37:8
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<u32>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<u32>}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Result::<NewTxFlowConfig, <__A as SeqAccess<'_>>::Error>::Err(move _10); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb17;                    // scope 0 at no-location
    }

    bb9: {
        _14 = discriminant(_12);         // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _14) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb10: {
        _16 = move ((_12 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _0 = Result::<NewTxFlowConfig, <__A as SeqAccess<'_>>::Error>::Err(move _16); // scope 7 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb17;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb12: {
        _15 = ((_12 as Ok).0: std::option::Option<u32>); // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _17 = discriminant(_15);         // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _17) -> [0: bb13, 1: bb15, otherwise: bb14]; // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb13: {
        _23 = const _;                   // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[1])) }
        _20 = _23 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _19 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb16, unwind: bb19]; // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb14: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb15: {
        _18 = ((_15 as Some).0: u32);    // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _21 = NewTxFlowConfig { count_per_batch: _9, buffer_duration: _18 }; // scope 5 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _0 = Result::<NewTxFlowConfig, <__A as SeqAccess<'_>>::Error>::Ok(move _21); // scope 5 at cita-jsonrpc/src/config.rs:34:21: 34:32
        drop(_2) -> bb18;                // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb16: {
        _0 = Result::<NewTxFlowConfig, <__A as SeqAccess<'_>>::Error>::Err(move _19); // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb17;                    // scope 1 at no-location
    }

    bb17: {
        drop(_2) -> bb18;                // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb18: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:32: 34:32
    }

    bb19 (cleanup): {
        drop(_2) -> bb20;                // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb20 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        _1 = const "struct NewTxFlowConfig with 2 elements"; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        _1 = const "struct NewTxFlowConfig with 2 elements"; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }
}

fn _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::visit_map(_1: _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor<'_>, _2: __A) -> Result<NewTxFlowConfig, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<NewTxFlowConfig>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    debug __map => _2;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _0: std::result::Result<config::NewTxFlowConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _3: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _5: std::result::Result<std::option::Option<config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _6: &mut __A;                // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _7: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _10: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _12: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _13: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let _14: &std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _15: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _16: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _17: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _18: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _19: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _22: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let _23: &std::option::Option<u32>;  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _24: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _25: std::option::Option<u32>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _26: std::result::Result<u32, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _27: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _28: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _31: std::result::Result<config::_IMPL_SERIALIZE_FOR_Config::_serde::de::IgnoredAny, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _32: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _33: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _36: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _38: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _39: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _43: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _45: std::result::Result<u32, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _46: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _49: config::NewTxFlowConfig; // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _50: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _51: u32;                    // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    scope 1 {
        debug __field0 => _3;            // in scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        let mut _4: std::option::Option<u32>; // in scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        scope 2 {
            debug __field1 => _4;        // in scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
            let _35: usize;              // in scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
            let _37: usize;              // in scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
            let _40: usize;              // in scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
            let _41: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
            scope 3 {
                debug __key => _11;      // in scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                let _8: std::option::Option<config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field>; // in scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                let _9: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                let _11: config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field; // in scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                let _20: usize;          // in scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                let _21: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                let _29: u32;            // in scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                let _30: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                let _34: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                scope 4 {
                    debug __val => _8;   // in scope 4 at cita-jsonrpc/src/config.rs:34:21: 34:32
                }
                scope 5 {
                    debug __err => _9;   // in scope 5 at cita-jsonrpc/src/config.rs:34:21: 34:32
                }
                scope 6 {
                    debug __val => _20;  // in scope 6 at cita-jsonrpc/src/config.rs:34:21: 34:32
                }
                scope 7 {
                    debug __err => _21;  // in scope 7 at cita-jsonrpc/src/config.rs:34:21: 34:32
                }
                scope 8 {
                    debug __val => _29;  // in scope 8 at cita-jsonrpc/src/config.rs:34:21: 34:32
                }
                scope 9 {
                    debug __err => _30;  // in scope 9 at cita-jsonrpc/src/config.rs:34:21: 34:32
                }
                scope 10 {
                }
                scope 11 {
                    debug __val => const IgnoredAny; // in scope 11 at cita-jsonrpc/src/config.rs:34:21: 34:32
                }
                scope 12 {
                    debug __err => _34;  // in scope 12 at cita-jsonrpc/src/config.rs:34:21: 34:32
                }
            }
            scope 13 {
                debug __field0 => _35;   // in scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
                let _42: u32;            // in scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
                let _44: u32;            // in scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
                let _47: u32;            // in scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
                let _48: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
                scope 17 {
                    debug __field1 => _42; // in scope 17 at cita-jsonrpc/src/config.rs:34:21: 34:32
                }
                scope 18 {
                    debug __field1 => _44; // in scope 18 at cita-jsonrpc/src/config.rs:34:21: 34:32
                }
                scope 19 {
                    debug __val => _47;  // in scope 19 at cita-jsonrpc/src/config.rs:34:21: 34:32
                }
                scope 20 {
                    debug __err => _48;  // in scope 20 at cita-jsonrpc/src/config.rs:34:21: 34:32
                }
            }
            scope 14 {
                debug __field0 => _37;   // in scope 14 at cita-jsonrpc/src/config.rs:34:21: 34:32
            }
            scope 15 {
                debug __val => _40;      // in scope 15 at cita-jsonrpc/src/config.rs:34:21: 34:32
            }
            scope 16 {
                debug __err => _41;      // in scope 16 at cita-jsonrpc/src/config.rs:34:21: 34:32
            }
        }
    }

    bb0: {
        _3 = std::option::Option::<usize>::None; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _4 = std::option::Option::<u32>::None; // scope 1 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb1;                     // scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb1: {
        _6 = &mut _2;                    // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _5 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field>(_6) -> [return: bb2, unwind: bb48]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::__Field>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = discriminant(_5);           // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _7) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb3: {
        _9 = move ((_5 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _0 = Result::<NewTxFlowConfig, <__A as MapAccess<'_>>::Error>::Err(move _9); // scope 5 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb46;                    // scope 3 at no-location
    }

    bb4: {
        unreachable;                     // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb5: {
        _8 = move ((_5 as Ok).0: std::option::Option<config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field>); // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _10 = discriminant(_8);          // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _10) -> [1: bb7, otherwise: bb6]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb6: {
        _36 = discriminant(_3);          // scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _36) -> [0: bb30, 1: bb32, otherwise: bb31]; // scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb7: {
        _11 = move ((_8 as Some).0: config::_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::NewTxFlowConfig>::deserialize::__Field); // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _12 = discriminant(_11);         // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _12) -> [0: bb9, 1: bb18, otherwise: bb8]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb8: {
        _32 = &mut _2;                   // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _31 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_32) -> [return: bb27, unwind: bb48]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<IgnoredAny, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<IgnoredAny>}, val: Value(<ZST>) }
    }

    bb9: {
        _14 = &_3;                       // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _13 = std::option::Option::<usize>::is_some(_14) -> [return: bb10, unwind: bb48]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<usize>) -> bool {std::option::Option::<usize>::is_some}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _13) -> [0: bb13, otherwise: bb11]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb11: {
        _15 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "count_per_batch") -> [return: bb12, unwind: bb48]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _0 = Result::<NewTxFlowConfig, <__A as MapAccess<'_>>::Error>::Err(move _15); // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb46;                    // scope 3 at no-location
    }

    bb13: {
        _18 = &mut _2;                   // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _17 = <__A as MapAccess<'_>>::next_value::<usize>(_18) -> [return: bb14, unwind: bb48]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:36:5: 36:8
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<usize, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<usize>}, val: Value(<ZST>) }
    }

    bb14: {
        _19 = discriminant(_17);         // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _19) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb15: {
        _21 = move ((_17 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _0 = Result::<NewTxFlowConfig, <__A as MapAccess<'_>>::Error>::Err(move _21); // scope 7 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb46;                    // scope 3 at no-location
    }

    bb16: {
        unreachable;                     // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb17: {
        _20 = ((_17 as Ok).0: usize);    // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _16 = std::option::Option::<usize>::Some(_20); // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _3 = move _16;                   // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb1;                     // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb18: {
        _23 = &_4;                       // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _22 = std::option::Option::<u32>::is_some(_23) -> [return: bb19, unwind: bb48]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<u32>) -> bool {std::option::Option::<u32>::is_some}, val: Value(<ZST>) }
    }

    bb19: {
        switchInt(move _22) -> [0: bb22, otherwise: bb20]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb20: {
        _24 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "buffer_duration") -> [return: bb21, unwind: bb48]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _0 = Result::<NewTxFlowConfig, <__A as MapAccess<'_>>::Error>::Err(move _24); // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb46;                    // scope 3 at no-location
    }

    bb22: {
        _27 = &mut _2;                   // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _26 = <__A as MapAccess<'_>>::next_value::<u32>(_27) -> [return: bb23, unwind: bb48]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:37:5: 37:8
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<u32, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<u32>}, val: Value(<ZST>) }
    }

    bb23: {
        _28 = discriminant(_26);         // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _28) -> [0: bb26, 1: bb24, otherwise: bb25]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb24: {
        _30 = move ((_26 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _0 = Result::<NewTxFlowConfig, <__A as MapAccess<'_>>::Error>::Err(move _30); // scope 9 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb46;                    // scope 3 at no-location
    }

    bb25: {
        unreachable;                     // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb26: {
        _29 = ((_26 as Ok).0: u32);      // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _25 = std::option::Option::<u32>::Some(_29); // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _4 = move _25;                   // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb1;                     // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb27: {
        _33 = discriminant(_31);         // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _33) -> [0: bb1, 1: bb28, otherwise: bb29]; // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb28: {
        _34 = move ((_31 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _0 = Result::<NewTxFlowConfig, <__A as MapAccess<'_>>::Error>::Err(move _34); // scope 12 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb46;                    // scope 3 at no-location
    }

    bb29: {
        unreachable;                     // scope 3 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb30: {
        _38 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "count_per_batch") -> [return: bb33, unwind: bb48]; // scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:36:5: 36:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<usize, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb31: {
        unreachable;                     // scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb32: {
        _37 = ((_3 as Some).0: usize);   // scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _35 = _37;                       // scope 14 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb37;                    // scope 2 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb33: {
        _39 = discriminant(_38);         // scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _39) -> [0: bb36, 1: bb34, otherwise: bb35]; // scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb34: {
        _41 = move ((_38 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _0 = Result::<NewTxFlowConfig, <__A as MapAccess<'_>>::Error>::Err(move _41); // scope 16 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb46;                    // scope 2 at no-location
    }

    bb35: {
        unreachable;                     // scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb36: {
        _40 = ((_38 as Ok).0: usize);    // scope 2 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _35 = _40;                       // scope 15 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb37;                    // scope 2 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb37: {
        _43 = discriminant(_4);          // scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _43) -> [0: bb38, 1: bb40, otherwise: bb39]; // scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb38: {
        _45 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, u32, <__A as MapAccess<'_>>::Error>(const "buffer_duration") -> [return: bb41, unwind: bb48]; // scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:37:5: 37:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<u32, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, u32, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb39: {
        unreachable;                     // scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb40: {
        _44 = ((_4 as Some).0: u32);     // scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _42 = _44;                       // scope 18 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb45;                    // scope 13 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb41: {
        _46 = discriminant(_45);         // scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
        switchInt(move _46) -> [0: bb44, 1: bb42, otherwise: bb43]; // scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb42: {
        _48 = move ((_45 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _0 = Result::<NewTxFlowConfig, <__A as MapAccess<'_>>::Error>::Err(move _48); // scope 20 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb46;                    // scope 13 at no-location
    }

    bb43: {
        unreachable;                     // scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }

    bb44: {
        _47 = ((_45 as Ok).0: u32);      // scope 13 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _42 = _47;                       // scope 19 at cita-jsonrpc/src/config.rs:34:21: 34:32
        goto -> bb45;                    // scope 13 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb45: {
        _50 = _35;                       // scope 17 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _51 = _42;                       // scope 17 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _49 = NewTxFlowConfig { count_per_batch: move _50, buffer_duration: move _51 }; // scope 17 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _0 = Result::<NewTxFlowConfig, <__A as MapAccess<'_>>::Error>::Ok(move _49); // scope 17 at cita-jsonrpc/src/config.rs:34:21: 34:32
        drop(_2) -> bb47;                // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb46: {
        drop(_2) -> bb47;                // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb47: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:32: 34:32
    }

    bb48 (cleanup): {
        drop(_2) -> bb49;                // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
    }

    bb49 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }
}

const _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _1: &[&str; 2];              // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let _2: &[&str; 2];                  // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let _3: [&str; 2];                   // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _4: &[&str; 2];              // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        StorageLive(_1);                 // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        StorageLive(_2);                 // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _4 = const _;                    // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(_IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl Deserialize<'de> for NewTxFlowConfig>::deserialize::FIELDS, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _1 = &(*_2);                     // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        StorageDead(_2);                 // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
        StorageDead(_1);                 // scope 0 at cita-jsonrpc/src/config.rs:34:31: 34:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_NewTxFlowConfig::<impl at cita-jsonrpc/src/config.rs:34:21: 34:32>::deserialize::FIELDS: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    let mut _1: [&str; 2];               // in scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32

    bb0: {
        _1 = [const "count_per_batch", const "buffer_duration"]; // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:21: 34:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:21: 34:32
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:34:34: 34:39>::fmt(_1: &NewTxFlowConfig, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:34:34: 34:39
    debug f => _2;                       // in scope 0 at cita-jsonrpc/src/config.rs:34:34: 34:39
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:34:34: 34:39
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:34:34: 34:39
    let _4: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:36:5: 36:31
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/config.rs:36:5: 36:31
    let _6: &usize;                      // in scope 0 at cita-jsonrpc/src/config.rs:36:5: 36:31
    let _7: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:37:5: 37:29
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/config.rs:37:5: 37:29
    let _9: &&u32;                       // in scope 0 at cita-jsonrpc/src/config.rs:37:5: 37:29
    let _10: &u32;                       // in scope 0 at cita-jsonrpc/src/config.rs:37:5: 37:29

    bb0: {
        _3 = const "NewTxFlowConfig";    // scope 0 at cita-jsonrpc/src/config.rs:34:34: 34:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:34: 34:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "count_per_batch";    // scope 0 at cita-jsonrpc/src/config.rs:36:5: 36:31
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:36:5: 36:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: usize);          // scope 0 at cita-jsonrpc/src/config.rs:36:5: 36:31
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:36:5: 36:31
        _7 = const "buffer_duration";    // scope 0 at cita-jsonrpc/src/config.rs:37:5: 37:29
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:37:5: 37:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &((*_1).1: u32);           // scope 0 at cita-jsonrpc/src/config.rs:37:5: 37:29
        _9 = &_10;                       // scope 0 at cita-jsonrpc/src/config.rs:37:5: 37:29
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:37:5: 37:29
        _0 = std::fmt::Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:34:34: 34:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:34:34: 34:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:39: 34:39
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:34:41: 34:46>::clone(_1: &NewTxFlowConfig) -> NewTxFlowConfig {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:34:41: 34:46
    let mut _0: config::NewTxFlowConfig; // return place in scope 0 at cita-jsonrpc/src/config.rs:34:41: 34:46
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at cita-jsonrpc/src/config.rs:34:41: 34:46
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:34:46: 34:46
    }
}

const _IMPL_SERIALIZE_FOR_ProfileConfig: () = {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19

    bb0: {
        _0 = const ();                   // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    }
}

fn _IMPL_SERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:10: 40:19>::serialize(_1: &ProfileConfig, _2: __S) -> Result<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    debug __serializer => _2;            // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _0: std::result::Result<<__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _3: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _4: std::result::Result<<__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _5: __S;                     // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _6: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _7: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let _8: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let _9: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _10: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _11: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let _12: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _13: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _15: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _16: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let _17: &u64;                       // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _18: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _20: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _21: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let _22: &u64;                       // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _23: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _25: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    let mut _26: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:18: 40:19
    let mut _27: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:18: 40:19
    scope 1 {
        debug __serde_state => _3;       // in scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        let _14: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        let _19: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        let _24: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        scope 4 {
            debug __val => const ();     // in scope 4 at cita-jsonrpc/src/config.rs:40:10: 40:19
        }
        scope 5 {
            debug __err => _14;          // in scope 5 at cita-jsonrpc/src/config.rs:40:10: 40:19
        }
        scope 6 {
            debug __val => const ();     // in scope 6 at cita-jsonrpc/src/config.rs:40:10: 40:19
        }
        scope 7 {
            debug __err => _19;          // in scope 7 at cita-jsonrpc/src/config.rs:40:10: 40:19
        }
        scope 8 {
            debug __val => const ();     // in scope 8 at cita-jsonrpc/src/config.rs:40:10: 40:19
        }
        scope 9 {
            debug __err => _24;          // in scope 9 at cita-jsonrpc/src/config.rs:40:10: 40:19
        }
    }
    scope 2 {
        debug __val => _8;               // in scope 2 at cita-jsonrpc/src/config.rs:40:10: 40:19
    }
    scope 3 {
        debug __err => _9;               // in scope 3 at cita-jsonrpc/src/config.rs:40:10: 40:19
    }

    bb0: {
        _27 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _26 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _27 = const true;                // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _5 = move _2;                    // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _6 = const 3_usize;              // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _27 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _4 = <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::serialize_struct(move _5, const "ProfileConfig", move _6) -> [return: bb1, unwind: bb25]; // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:10: 40:19
                                         // + literal: Const { ty: fn(__S, &'static str, usize) -> Result<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error> {<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::serialize_struct}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:10: 40:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _27 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:40:18: 40:19
        _7 = discriminant(_4);           // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
        switchInt(move _7) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    }

    bb2: {
        _9 = move ((_4 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _9); // scope 3 at cita-jsonrpc/src/config.rs:40:10: 40:19
        goto -> bb19;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    }

    bb4: {
        _8 = move ((_4 as Ok).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct); // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _26 = const true;                // scope 2 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _3 = move _8;                    // scope 2 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _11 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _12 = &((*_1).0: bool);          // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _10 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_11, const "enable", _12) -> [return: bb5, unwind: bb23]; // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:42:5: 42:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:10: 40:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _13 = discriminant(_10);         // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        switchInt(move _13) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
    }

    bb6: {
        _14 = move ((_10 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _14); // scope 5 at cita-jsonrpc/src/config.rs:40:10: 40:19
        goto -> bb18;                    // scope 1 at no-location
    }

    bb7: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
    }

    bb8: {
        _16 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _17 = &((*_1).1: u64);           // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _15 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<u64>(_16, const "flag_prof_start", _17) -> [return: bb9, unwind: bb23]; // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:43:5: 43:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b u64) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<u64>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:10: 40:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _18 = discriminant(_15);         // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        switchInt(move _18) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
    }

    bb10: {
        _19 = move ((_15 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _19); // scope 7 at cita-jsonrpc/src/config.rs:40:10: 40:19
        goto -> bb18;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
    }

    bb12: {
        _21 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _22 = &((*_1).2: u64);           // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _20 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<u64>(_21, const "flag_prof_duration", _22) -> [return: bb13, unwind: bb23]; // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:44:5: 44:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b u64) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<u64>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:10: 40:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _23 = discriminant(_20);         // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        switchInt(move _23) -> [0: bb16, 1: bb14, otherwise: bb15]; // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
    }

    bb14: {
        _24 = move ((_20 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _24); // scope 9 at cita-jsonrpc/src/config.rs:40:10: 40:19
        goto -> bb18;                    // scope 1 at no-location
    }

    bb15: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
    }

    bb16: {
        _26 = const false;               // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _25 = move _3;                   // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
        _0 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _25) -> [return: bb17, unwind: bb23]; // scope 1 at cita-jsonrpc/src/config.rs:40:10: 40:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:10: 40:19
                                         // + literal: Const { ty: fn(<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct) -> Result<<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Ok, <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::end}, val: Value(<ZST>) }
    }

    bb17: {
        _26 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:40:18: 40:19
        goto -> bb20;                    // scope 0 at cita-jsonrpc/src/config.rs:40:18: 40:19
    }

    bb18: {
        drop(_3) -> bb19;                // scope 0 at cita-jsonrpc/src/config.rs:40:18: 40:19
    }

    bb19: {
        _26 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:40:18: 40:19
        goto -> bb20;                    // scope 0 at cita-jsonrpc/src/config.rs:40:18: 40:19
    }

    bb20: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:19: 40:19
    }

    bb21 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:40:10: 40:19
    }

    bb22 (cleanup): {
        drop(_3) -> bb21;                // scope 0 at cita-jsonrpc/src/config.rs:40:18: 40:19
    }

    bb23 (cleanup): {
        switchInt(_26) -> [0: bb21, otherwise: bb22]; // scope 0 at cita-jsonrpc/src/config.rs:40:18: 40:19
    }

    bb24 (cleanup): {
        drop(_5) -> bb21;                // scope 0 at cita-jsonrpc/src/config.rs:40:18: 40:19
    }

    bb25 (cleanup): {
        switchInt(_27) -> [0: bb21, otherwise: bb24]; // scope 0 at cita-jsonrpc/src/config.rs:40:18: 40:19
    }
}

const _IMPL_DESERIALIZE_FOR_ProfileConfig: () = {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        _0 = const ();                   // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize(_1: __D) -> Result<ProfileConfig, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _0: std::result::Result<config::ProfileConfig, <__D as config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        _0 = <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor<'_>>(move _1, const "ProfileConfig", const _, const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<ProfileConfig>, lifetime: PhantomData::<&()> }}) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: fn(__D, &'static str, &'static [&'static str], _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor<'_>) -> Result<<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor<'_> as Visitor<'_>>::Value, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {<__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor<'_>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::FIELDS, [], None) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor<'_>, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:32: 40:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    debug __formatter => _2;             // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        _3 = const "field identifier";   // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:32: 40:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _3: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _4: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _5: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _6: __E;                     // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _7: config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Unexpected<'_>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _8: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _9: &&str;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb1: {
        _7 = Unexpected::<'_>::Unsigned(_2); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _9 = const _;                    // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor as Visitor<'de>>::visit_u64, [ReErased, __E], Some(promoted[0])) }
        _8 = _9 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _6 = <__E as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_value(move _7, move _8) -> bb5; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: for<'a, 'b> fn(Unexpected<'a>, &'b (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'b)) -> __E {<__E as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_value}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E>::Ok(move _3); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb6;                     // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb3: {
        _4 = const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E>::Ok(move _4); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb6;                     // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb4: {
        _5 = const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field::__field2; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E>::Ok(move _5); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb6;                     // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb5: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E>::Err(move _6); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb6;                     // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb6: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:32: 40:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::visit_u64: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        _1 = const "field index 0 <= i < 3"; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::visit_str(_1: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _3: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _4: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _6: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _7: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _8: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _9: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "enable") -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "flag_prof_start") -> bb3; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb8]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "flag_prof_duration") -> bb5; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _5) -> [0: bb6, otherwise: bb9]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb6: {
        _9 = const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field::__ignore; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E>::Ok(move _9); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb10;                    // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb7: {
        _6 = const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E>::Ok(move _6); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb10;                    // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb8: {
        _7 = const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E>::Ok(move _7); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb10;                    // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb9: {
        _8 = const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field::__field2; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E>::Ok(move _8); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb10;                    // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb10: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:32: 40:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _3: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _4: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _6: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _7: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _8: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _9: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _10: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _11: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _12: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _13: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _14: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _15: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        _9 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _10 = const 6_usize;             // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _11 = Eq(move _9, move _10);     // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _11) -> [0: bb8, otherwise: bb1]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb1: {
        switchInt((*_2)[0 of 6]) -> [101: bb2, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb2: {
        switchInt((*_2)[1 of 6]) -> [110: bb3, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb3: {
        switchInt((*_2)[2 of 6]) -> [97: bb4, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb4: {
        switchInt((*_2)[3 of 6]) -> [98: bb5, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb5: {
        switchInt((*_2)[4 of 6]) -> [108: bb6, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb6: {
        switchInt((*_2)[5 of 6]) -> [101: bb43, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb7: {
        _15 = const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field::__ignore; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E>::Ok(move _15); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb46;                    // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb8: {
        _6 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _7 = const 15_usize;             // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _8 = Eq(move _6, move _7);       // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _8) -> [0: bb24, otherwise: bb9]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb9: {
        switchInt((*_2)[0 of 15]) -> [102: bb10, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb10: {
        switchInt((*_2)[1 of 15]) -> [108: bb11, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb11: {
        switchInt((*_2)[2 of 15]) -> [97: bb12, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb12: {
        switchInt((*_2)[3 of 15]) -> [103: bb13, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb13: {
        switchInt((*_2)[4 of 15]) -> [95: bb14, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb14: {
        switchInt((*_2)[5 of 15]) -> [112: bb15, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb15: {
        switchInt((*_2)[6 of 15]) -> [114: bb16, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb16: {
        switchInt((*_2)[7 of 15]) -> [111: bb17, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb17: {
        switchInt((*_2)[8 of 15]) -> [102: bb18, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb18: {
        switchInt((*_2)[9 of 15]) -> [95: bb19, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb19: {
        switchInt((*_2)[10 of 15]) -> [115: bb20, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb20: {
        switchInt((*_2)[11 of 15]) -> [116: bb21, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb21: {
        switchInt((*_2)[12 of 15]) -> [97: bb22, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb22: {
        switchInt((*_2)[13 of 15]) -> [114: bb23, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb23: {
        switchInt((*_2)[14 of 15]) -> [116: bb44, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb24: {
        _3 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _4 = const 18_usize;             // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _5 = Eq(move _3, move _4);       // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _5) -> [0: bb7, otherwise: bb25]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb25: {
        switchInt((*_2)[0 of 18]) -> [102: bb26, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb26: {
        switchInt((*_2)[1 of 18]) -> [108: bb27, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb27: {
        switchInt((*_2)[2 of 18]) -> [97: bb28, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb28: {
        switchInt((*_2)[3 of 18]) -> [103: bb29, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb29: {
        switchInt((*_2)[4 of 18]) -> [95: bb30, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb30: {
        switchInt((*_2)[5 of 18]) -> [112: bb31, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb31: {
        switchInt((*_2)[6 of 18]) -> [114: bb32, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb32: {
        switchInt((*_2)[7 of 18]) -> [111: bb33, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb33: {
        switchInt((*_2)[8 of 18]) -> [102: bb34, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb34: {
        switchInt((*_2)[9 of 18]) -> [95: bb35, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb35: {
        switchInt((*_2)[10 of 18]) -> [100: bb36, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb36: {
        switchInt((*_2)[11 of 18]) -> [117: bb37, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb37: {
        switchInt((*_2)[12 of 18]) -> [114: bb38, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb38: {
        switchInt((*_2)[13 of 18]) -> [97: bb39, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb39: {
        switchInt((*_2)[14 of 18]) -> [116: bb40, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb40: {
        switchInt((*_2)[15 of 18]) -> [105: bb41, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb41: {
        switchInt((*_2)[16 of 18]) -> [111: bb42, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb42: {
        switchInt((*_2)[17 of 18]) -> [110: bb45, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb43: {
        _12 = const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E>::Ok(move _12); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb46;                    // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb44: {
        _13 = const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E>::Ok(move _13); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb46;                    // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb45: {
        _14 = const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field::__field2; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, __E>::Ok(move _14); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb46;                    // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb46: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:32: 40:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field, <__D as config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        _0 = <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: fn(__D, _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor) -> Result<<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor as Visitor<'_>>::Value, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {<__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__FieldVisitor, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:32: 40:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    debug __formatter => _2;             // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        _3 = const "struct ProfileConfig"; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:32: 40:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor<'_>, _2: __A) -> Result<ProfileConfig, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<ProfileConfig>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    debug __seq => _2;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _0: std::result::Result<config::ProfileConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _3: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _4: &mut __A;                // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _5: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let _6: std::option::Option<bool>;   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let _7: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _8: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let _9: bool;                        // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _10: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _11: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _13: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _14: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _17: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _19: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _20: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _21: std::result::Result<std::option::Option<u64>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _22: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _23: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _26: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _28: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _29: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _30: config::ProfileConfig;  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _31: &&str;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    scope 1 {
        debug __field0 => _9;            // in scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        let _15: std::option::Option<u64>; // in scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        let _16: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        let _18: u64;                    // in scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        let mut _32: &&str;              // in scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        scope 5 {
            debug __field1 => _18;       // in scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
            let _24: std::option::Option<u64>; // in scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
            let _25: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
            let _27: u64;                // in scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
            let mut _33: &&str;          // in scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
            scope 9 {
                debug __field2 => _27;   // in scope 9 at cita-jsonrpc/src/config.rs:40:21: 40:32
            }
            scope 10 {
                debug __val => _24;      // in scope 10 at cita-jsonrpc/src/config.rs:40:21: 40:32
            }
            scope 11 {
                debug __err => _25;      // in scope 11 at cita-jsonrpc/src/config.rs:40:21: 40:32
            }
            scope 12 {
                debug __value => _27;    // in scope 12 at cita-jsonrpc/src/config.rs:40:21: 40:32
            }
        }
        scope 6 {
            debug __val => _15;          // in scope 6 at cita-jsonrpc/src/config.rs:40:21: 40:32
        }
        scope 7 {
            debug __err => _16;          // in scope 7 at cita-jsonrpc/src/config.rs:40:21: 40:32
        }
        scope 8 {
            debug __value => _18;        // in scope 8 at cita-jsonrpc/src/config.rs:40:21: 40:32
        }
    }
    scope 2 {
        debug __val => _6;               // in scope 2 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }
    scope 3 {
        debug __err => _7;               // in scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }
    scope 4 {
        debug __value => _9;             // in scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb0: {
        _4 = &mut _2;                    // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _3 = <__A as SeqAccess<'_>>::next_element::<bool>(_4) -> [return: bb1, unwind: bb27]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:42:5: 42:8
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as SeqAccess<'_>>::Error>::Err(move _7); // scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb25;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<bool>); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _8 = discriminant(_6);           // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb5: {
        _31 = const _;                   // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[0])) }
        _11 = _31 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _10 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb8, unwind: bb27]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb7: {
        _9 = ((_6 as Some).0: bool);     // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _13 = &mut _2;                   // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb9, unwind: bb27]; // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:43:5: 43:8
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<u64>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<u64>}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Result::<ProfileConfig, <__A as SeqAccess<'_>>::Error>::Err(move _10); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb25;                    // scope 0 at no-location
    }

    bb9: {
        _14 = discriminant(_12);         // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _14) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb10: {
        _16 = move ((_12 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as SeqAccess<'_>>::Error>::Err(move _16); // scope 7 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb25;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb12: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>); // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _17 = discriminant(_15);         // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _17) -> [0: bb13, 1: bb15, otherwise: bb14]; // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb13: {
        _32 = const _;                   // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[1])) }
        _20 = _32 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _19 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb16, unwind: bb27]; // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb14: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb15: {
        _18 = ((_15 as Some).0: u64);    // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _22 = &mut _2;                   // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _21 = <__A as SeqAccess<'_>>::next_element::<u64>(_22) -> [return: bb17, unwind: bb27]; // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:44:5: 44:8
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<u64>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<u64>}, val: Value(<ZST>) }
    }

    bb16: {
        _0 = Result::<ProfileConfig, <__A as SeqAccess<'_>>::Error>::Err(move _19); // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb25;                    // scope 1 at no-location
    }

    bb17: {
        _23 = discriminant(_21);         // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _23) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb18: {
        _25 = move ((_21 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as SeqAccess<'_>>::Error>::Err(move _25); // scope 11 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb25;                    // scope 5 at no-location
    }

    bb19: {
        unreachable;                     // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb20: {
        _24 = ((_21 as Ok).0: std::option::Option<u64>); // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _26 = discriminant(_24);         // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _26) -> [0: bb21, 1: bb23, otherwise: bb22]; // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb21: {
        _33 = const _;                   // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[2])) }
        _29 = _33 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _28 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb24, unwind: bb27]; // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb22: {
        unreachable;                     // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb23: {
        _27 = ((_24 as Some).0: u64);    // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _30 = ProfileConfig { enable: _9, flag_prof_start: _18, flag_prof_duration: _27 }; // scope 9 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as SeqAccess<'_>>::Error>::Ok(move _30); // scope 9 at cita-jsonrpc/src/config.rs:40:21: 40:32
        drop(_2) -> bb26;                // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb24: {
        _0 = Result::<ProfileConfig, <__A as SeqAccess<'_>>::Error>::Err(move _28); // scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb25;                    // scope 5 at no-location
    }

    bb25: {
        drop(_2) -> bb26;                // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb26: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:32: 40:32
    }

    bb27 (cleanup): {
        drop(_2) -> bb28;                // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb28 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        _1 = const "struct ProfileConfig with 3 elements"; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        _1 = const "struct ProfileConfig with 3 elements"; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }
}

promoted[2] in _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        _1 = const "struct ProfileConfig with 3 elements"; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }
}

fn _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::visit_map(_1: _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor<'_>, _2: __A) -> Result<ProfileConfig, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<ProfileConfig>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    debug __map => _2;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _0: std::result::Result<config::ProfileConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _3: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _6: std::result::Result<std::option::Option<config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _7: &mut __A;                // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _8: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _11: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _13: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _14: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let _15: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _16: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _17: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _18: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _19: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _20: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _23: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let _24: &std::option::Option<u64>;  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _25: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _26: std::option::Option<u64>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _27: std::result::Result<u64, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _28: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _29: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _32: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let _33: &std::option::Option<u64>;  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _34: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _35: std::option::Option<u64>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _36: std::result::Result<u64, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _37: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _38: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _41: std::result::Result<config::_IMPL_SERIALIZE_FOR_Config::_serde::de::IgnoredAny, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _42: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _43: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _46: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _48: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _49: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _53: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _55: std::result::Result<u64, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _56: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _60: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _62: std::result::Result<u64, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _63: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _66: config::ProfileConfig;  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _67: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _68: u64;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _69: u64;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    scope 1 {
        debug __field0 => _3;            // in scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        let mut _4: std::option::Option<u64>; // in scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        scope 2 {
            debug __field1 => _4;        // in scope 2 at cita-jsonrpc/src/config.rs:40:21: 40:32
            let mut _5: std::option::Option<u64>; // in scope 2 at cita-jsonrpc/src/config.rs:40:21: 40:32
            scope 3 {
                debug __field2 => _5;    // in scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
                let _45: bool;           // in scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
                let _47: bool;           // in scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
                let _50: bool;           // in scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
                let _51: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
                scope 4 {
                    debug __key => _12;  // in scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _9: std::option::Option<config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field>; // in scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _10: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _12: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field; // in scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _21: bool;       // in scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _22: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _30: u64;        // in scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _31: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _39: u64;        // in scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _40: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _44: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    scope 5 {
                        debug __val => _9; // in scope 5 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                    scope 6 {
                        debug __err => _10; // in scope 6 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                    scope 7 {
                        debug __val => _21; // in scope 7 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                    scope 8 {
                        debug __err => _22; // in scope 8 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                    scope 9 {
                        debug __val => _30; // in scope 9 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                    scope 10 {
                        debug __err => _31; // in scope 10 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                    scope 11 {
                        debug __val => _39; // in scope 11 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                    scope 12 {
                        debug __err => _40; // in scope 12 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                    scope 13 {
                    }
                    scope 14 {
                        debug __val => const IgnoredAny; // in scope 14 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                    scope 15 {
                        debug __err => _44; // in scope 15 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                }
                scope 16 {
                    debug __field0 => _45; // in scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _52: u64;        // in scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _54: u64;        // in scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _57: u64;        // in scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    let _58: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    scope 20 {
                        debug __field1 => _52; // in scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
                        let _59: u64;    // in scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
                        let _61: u64;    // in scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
                        let _64: u64;    // in scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
                        let _65: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
                        scope 24 {
                            debug __field2 => _59; // in scope 24 at cita-jsonrpc/src/config.rs:40:21: 40:32
                        }
                        scope 25 {
                            debug __field2 => _61; // in scope 25 at cita-jsonrpc/src/config.rs:40:21: 40:32
                        }
                        scope 26 {
                            debug __val => _64; // in scope 26 at cita-jsonrpc/src/config.rs:40:21: 40:32
                        }
                        scope 27 {
                            debug __err => _65; // in scope 27 at cita-jsonrpc/src/config.rs:40:21: 40:32
                        }
                    }
                    scope 21 {
                        debug __field1 => _54; // in scope 21 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                    scope 22 {
                        debug __val => _57; // in scope 22 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                    scope 23 {
                        debug __err => _58; // in scope 23 at cita-jsonrpc/src/config.rs:40:21: 40:32
                    }
                }
                scope 17 {
                    debug __field0 => _47; // in scope 17 at cita-jsonrpc/src/config.rs:40:21: 40:32
                }
                scope 18 {
                    debug __val => _50;  // in scope 18 at cita-jsonrpc/src/config.rs:40:21: 40:32
                }
                scope 19 {
                    debug __err => _51;  // in scope 19 at cita-jsonrpc/src/config.rs:40:21: 40:32
                }
            }
        }
    }

    bb0: {
        _3 = std::option::Option::<bool>::None; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _4 = std::option::Option::<u64>::None; // scope 1 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _5 = std::option::Option::<u64>::None; // scope 2 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb1;                     // scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb1: {
        _7 = &mut _2;                    // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _6 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field>(_7) -> [return: bb2, unwind: bb65]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::__Field>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = discriminant(_6);           // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _8) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb3: {
        _10 = move ((_6 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as MapAccess<'_>>::Error>::Err(move _10); // scope 6 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb63;                    // scope 4 at no-location
    }

    bb4: {
        unreachable;                     // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb5: {
        _9 = move ((_6 as Ok).0: std::option::Option<config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field>); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _11 = discriminant(_9);          // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _11) -> [1: bb7, otherwise: bb6]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb6: {
        _46 = discriminant(_3);          // scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _46) -> [0: bb39, 1: bb41, otherwise: bb40]; // scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb7: {
        _12 = move ((_9 as Some).0: config::_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::ProfileConfig>::deserialize::__Field); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _13 = discriminant(_12);         // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _13) -> [0: bb9, 1: bb18, 2: bb27, otherwise: bb8]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb8: {
        _42 = &mut _2;                   // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _41 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_42) -> [return: bb36, unwind: bb65]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<IgnoredAny, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<IgnoredAny>}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = &_3;                       // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _14 = std::option::Option::<bool>::is_some(_15) -> [return: bb10, unwind: bb65]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _14) -> [0: bb13, otherwise: bb11]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb11: {
        _16 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "enable") -> [return: bb12, unwind: bb65]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _0 = Result::<ProfileConfig, <__A as MapAccess<'_>>::Error>::Err(move _16); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb63;                    // scope 4 at no-location
    }

    bb13: {
        _19 = &mut _2;                   // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _18 = <__A as MapAccess<'_>>::next_value::<bool>(_19) -> [return: bb14, unwind: bb65]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:42:5: 42:8
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb14: {
        _20 = discriminant(_18);         // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _20) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb15: {
        _22 = move ((_18 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as MapAccess<'_>>::Error>::Err(move _22); // scope 8 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb63;                    // scope 4 at no-location
    }

    bb16: {
        unreachable;                     // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb17: {
        _21 = ((_18 as Ok).0: bool);     // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _17 = std::option::Option::<bool>::Some(_21); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _3 = move _17;                   // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb1;                     // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb18: {
        _24 = &_4;                       // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _23 = std::option::Option::<u64>::is_some(_24) -> [return: bb19, unwind: bb65]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<u64>) -> bool {std::option::Option::<u64>::is_some}, val: Value(<ZST>) }
    }

    bb19: {
        switchInt(move _23) -> [0: bb22, otherwise: bb20]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb20: {
        _25 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "flag_prof_start") -> [return: bb21, unwind: bb65]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _0 = Result::<ProfileConfig, <__A as MapAccess<'_>>::Error>::Err(move _25); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb63;                    // scope 4 at no-location
    }

    bb22: {
        _28 = &mut _2;                   // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _27 = <__A as MapAccess<'_>>::next_value::<u64>(_28) -> [return: bb23, unwind: bb65]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:43:5: 43:8
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<u64, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<u64>}, val: Value(<ZST>) }
    }

    bb23: {
        _29 = discriminant(_27);         // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _29) -> [0: bb26, 1: bb24, otherwise: bb25]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb24: {
        _31 = move ((_27 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as MapAccess<'_>>::Error>::Err(move _31); // scope 10 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb63;                    // scope 4 at no-location
    }

    bb25: {
        unreachable;                     // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb26: {
        _30 = ((_27 as Ok).0: u64);      // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _26 = std::option::Option::<u64>::Some(_30); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _4 = move _26;                   // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb1;                     // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb27: {
        _33 = &_5;                       // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _32 = std::option::Option::<u64>::is_some(_33) -> [return: bb28, unwind: bb65]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<u64>) -> bool {std::option::Option::<u64>::is_some}, val: Value(<ZST>) }
    }

    bb28: {
        switchInt(move _32) -> [0: bb31, otherwise: bb29]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb29: {
        _34 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "flag_prof_duration") -> [return: bb30, unwind: bb65]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _0 = Result::<ProfileConfig, <__A as MapAccess<'_>>::Error>::Err(move _34); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb63;                    // scope 4 at no-location
    }

    bb31: {
        _37 = &mut _2;                   // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _36 = <__A as MapAccess<'_>>::next_value::<u64>(_37) -> [return: bb32, unwind: bb65]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:44:5: 44:8
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<u64, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<u64>}, val: Value(<ZST>) }
    }

    bb32: {
        _38 = discriminant(_36);         // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _38) -> [0: bb35, 1: bb33, otherwise: bb34]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb33: {
        _40 = move ((_36 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as MapAccess<'_>>::Error>::Err(move _40); // scope 12 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb63;                    // scope 4 at no-location
    }

    bb34: {
        unreachable;                     // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb35: {
        _39 = ((_36 as Ok).0: u64);      // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _35 = std::option::Option::<u64>::Some(_39); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _5 = move _35;                   // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb1;                     // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb36: {
        _43 = discriminant(_41);         // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _43) -> [0: bb1, 1: bb37, otherwise: bb38]; // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb37: {
        _44 = move ((_41 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as MapAccess<'_>>::Error>::Err(move _44); // scope 15 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb63;                    // scope 4 at no-location
    }

    bb38: {
        unreachable;                     // scope 4 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb39: {
        _48 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "enable") -> [return: bb42, unwind: bb65]; // scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:42:5: 42:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb40: {
        unreachable;                     // scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb41: {
        _47 = ((_3 as Some).0: bool);    // scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _45 = _47;                       // scope 17 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb46;                    // scope 3 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb42: {
        _49 = discriminant(_48);         // scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _49) -> [0: bb45, 1: bb43, otherwise: bb44]; // scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb43: {
        _51 = move ((_48 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as MapAccess<'_>>::Error>::Err(move _51); // scope 19 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb63;                    // scope 3 at no-location
    }

    bb44: {
        unreachable;                     // scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb45: {
        _50 = ((_48 as Ok).0: bool);     // scope 3 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _45 = _50;                       // scope 18 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb46;                    // scope 3 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb46: {
        _53 = discriminant(_4);          // scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _53) -> [0: bb47, 1: bb49, otherwise: bb48]; // scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb47: {
        _55 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, u64, <__A as MapAccess<'_>>::Error>(const "flag_prof_start") -> [return: bb50, unwind: bb65]; // scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:43:5: 43:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<u64, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, u64, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb48: {
        unreachable;                     // scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb49: {
        _54 = ((_4 as Some).0: u64);     // scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _52 = _54;                       // scope 21 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb54;                    // scope 16 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb50: {
        _56 = discriminant(_55);         // scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _56) -> [0: bb53, 1: bb51, otherwise: bb52]; // scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb51: {
        _58 = move ((_55 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as MapAccess<'_>>::Error>::Err(move _58); // scope 23 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb63;                    // scope 16 at no-location
    }

    bb52: {
        unreachable;                     // scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb53: {
        _57 = ((_55 as Ok).0: u64);      // scope 16 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _52 = _57;                       // scope 22 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb54;                    // scope 16 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb54: {
        _60 = discriminant(_5);          // scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _60) -> [0: bb55, 1: bb57, otherwise: bb56]; // scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb55: {
        _62 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, u64, <__A as MapAccess<'_>>::Error>(const "flag_prof_duration") -> [return: bb58, unwind: bb65]; // scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:44:5: 44:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<u64, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, u64, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb56: {
        unreachable;                     // scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb57: {
        _61 = ((_5 as Some).0: u64);     // scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _59 = _61;                       // scope 25 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb62;                    // scope 20 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb58: {
        _63 = discriminant(_62);         // scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
        switchInt(move _63) -> [0: bb61, 1: bb59, otherwise: bb60]; // scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb59: {
        _65 = move ((_62 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as MapAccess<'_>>::Error>::Err(move _65); // scope 27 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb63;                    // scope 20 at no-location
    }

    bb60: {
        unreachable;                     // scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }

    bb61: {
        _64 = ((_62 as Ok).0: u64);      // scope 20 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _59 = _64;                       // scope 26 at cita-jsonrpc/src/config.rs:40:21: 40:32
        goto -> bb62;                    // scope 20 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb62: {
        _67 = _45;                       // scope 24 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _68 = _52;                       // scope 24 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _69 = _59;                       // scope 24 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _66 = ProfileConfig { enable: move _67, flag_prof_start: move _68, flag_prof_duration: move _69 }; // scope 24 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = Result::<ProfileConfig, <__A as MapAccess<'_>>::Error>::Ok(move _66); // scope 24 at cita-jsonrpc/src/config.rs:40:21: 40:32
        drop(_2) -> bb64;                // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb63: {
        drop(_2) -> bb64;                // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb64: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:32: 40:32
    }

    bb65 (cleanup): {
        drop(_2) -> bb66;                // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
    }

    bb66 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }
}

const _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _1: &[&str; 3];              // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let _2: &[&str; 3];                  // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let _3: [&str; 3];                   // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _4: &[&str; 3];              // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        StorageLive(_1);                 // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        StorageLive(_2);                 // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _4 = const _;                    // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(_IMPL_DESERIALIZE_FOR_ProfileConfig::<impl Deserialize<'de> for ProfileConfig>::deserialize::FIELDS, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _1 = &(*_2);                     // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        StorageDead(_2);                 // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
        StorageDead(_1);                 // scope 0 at cita-jsonrpc/src/config.rs:40:31: 40:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_ProfileConfig::<impl at cita-jsonrpc/src/config.rs:40:21: 40:32>::deserialize::FIELDS: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    let mut _1: [&str; 3];               // in scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32

    bb0: {
        _1 = [const "enable", const "flag_prof_start", const "flag_prof_duration"]; // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:21: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:21: 40:32
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:40:34: 40:39>::fmt(_1: &ProfileConfig, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:34: 40:39
    debug f => _2;                       // in scope 0 at cita-jsonrpc/src/config.rs:40:34: 40:39
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:40:34: 40:39
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:40:34: 40:39
    let _4: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:42:5: 42:21
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/config.rs:42:5: 42:21
    let _6: &bool;                       // in scope 0 at cita-jsonrpc/src/config.rs:42:5: 42:21
    let _7: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:43:5: 43:29
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/config.rs:43:5: 43:29
    let _9: &u64;                        // in scope 0 at cita-jsonrpc/src/config.rs:43:5: 43:29
    let _10: &str;                       // in scope 0 at cita-jsonrpc/src/config.rs:44:5: 44:32
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:44:5: 44:32
    let _12: &&u64;                      // in scope 0 at cita-jsonrpc/src/config.rs:44:5: 44:32
    let _13: &u64;                       // in scope 0 at cita-jsonrpc/src/config.rs:44:5: 44:32

    bb0: {
        _3 = const "ProfileConfig";      // scope 0 at cita-jsonrpc/src/config.rs:40:34: 40:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:34: 40:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "enable";             // scope 0 at cita-jsonrpc/src/config.rs:42:5: 42:21
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:42:5: 42:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: bool);           // scope 0 at cita-jsonrpc/src/config.rs:42:5: 42:21
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:42:5: 42:21
        _7 = const "flag_prof_start";    // scope 0 at cita-jsonrpc/src/config.rs:43:5: 43:29
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:43:5: 43:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = &((*_1).1: u64);            // scope 0 at cita-jsonrpc/src/config.rs:43:5: 43:29
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:43:5: 43:29
        _10 = const "flag_prof_duration"; // scope 0 at cita-jsonrpc/src/config.rs:44:5: 44:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:44:5: 44:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = &((*_1).2: u64);           // scope 0 at cita-jsonrpc/src/config.rs:44:5: 44:32
        _12 = &_13;                      // scope 0 at cita-jsonrpc/src/config.rs:44:5: 44:32
        _11 = _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:44:5: 44:32
        _0 = std::fmt::Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:40:34: 40:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:40:34: 40:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:39: 40:39
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:40:41: 40:46>::clone(_1: &ProfileConfig) -> ProfileConfig {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:40:41: 40:46
    let mut _0: config::ProfileConfig;   // return place in scope 0 at cita-jsonrpc/src/config.rs:40:41: 40:46
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at cita-jsonrpc/src/config.rs:40:41: 40:46
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:40:46: 40:46
    }
}

const _IMPL_SERIALIZE_FOR_WsConfig: () = {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19

    bb0: {
        _0 = const ();                   // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }
}

fn _IMPL_SERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:10: 47:19>::serialize(_1: &WsConfig, _2: __S) -> Result<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    debug __serializer => _2;            // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _0: std::result::Result<<__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _3: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _4: std::result::Result<<__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _5: __S;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _6: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _7: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _8: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _9: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _10: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _11: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _12: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _13: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _15: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _16: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _17: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _18: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _20: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _21: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _22: &std::string::String;       // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _23: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _25: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _26: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _27: &std::string::String;       // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _28: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _30: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _31: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _32: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _33: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _35: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _36: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _37: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _38: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _40: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _41: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _42: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _43: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _45: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _46: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _47: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _48: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _50: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _51: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _52: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _53: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _55: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _56: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _57: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _58: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _60: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _61: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _62: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _63: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _65: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _66: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _67: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _68: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _70: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _71: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _72: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _73: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _75: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _76: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _77: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _78: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _80: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _81: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _82: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _83: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _85: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _86: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _87: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _88: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _90: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _91: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _92: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _93: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _95: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _96: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _97: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _98: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _100: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _101: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _102: &bool;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _103: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _105: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _106: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _107: &bool;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _108: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _110: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _111: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _112: &bool;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _113: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _115: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _116: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _117: &bool;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _118: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _120: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _121: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _122: &bool;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _123: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _125: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _126: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _127: &bool;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _128: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _130: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _131: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _132: &bool;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _133: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _135: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _136: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _137: &bool;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _138: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _140: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _141: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _142: &bool;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _143: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _145: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _146: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let _147: &bool;                     // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _148: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _150: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    let mut _151: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:18: 47:19
    let mut _152: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:18: 47:19
    scope 1 {
        debug __serde_state => _3;       // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _14: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _19: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _24: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _29: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _34: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _39: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _44: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _49: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _54: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _59: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _64: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _69: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _74: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _79: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _84: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _89: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _94: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _99: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _104: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _109: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _114: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _119: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _124: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _129: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _134: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _139: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _144: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        let _149: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        scope 4 {
            debug __val => const ();     // in scope 4 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 5 {
            debug __err => _14;          // in scope 5 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 6 {
            debug __val => const ();     // in scope 6 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 7 {
            debug __err => _19;          // in scope 7 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 8 {
            debug __val => const ();     // in scope 8 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 9 {
            debug __err => _24;          // in scope 9 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 10 {
            debug __val => const ();     // in scope 10 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 11 {
            debug __err => _29;          // in scope 11 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 12 {
            debug __val => const ();     // in scope 12 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 13 {
            debug __err => _34;          // in scope 13 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 14 {
            debug __val => const ();     // in scope 14 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 15 {
            debug __err => _39;          // in scope 15 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 16 {
            debug __val => const ();     // in scope 16 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 17 {
            debug __err => _44;          // in scope 17 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 18 {
            debug __val => const ();     // in scope 18 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 19 {
            debug __err => _49;          // in scope 19 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 20 {
            debug __val => const ();     // in scope 20 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 21 {
            debug __err => _54;          // in scope 21 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 22 {
            debug __val => const ();     // in scope 22 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 23 {
            debug __err => _59;          // in scope 23 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 24 {
            debug __val => const ();     // in scope 24 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 25 {
            debug __err => _64;          // in scope 25 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 26 {
            debug __val => const ();     // in scope 26 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 27 {
            debug __err => _69;          // in scope 27 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 28 {
            debug __val => const ();     // in scope 28 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 29 {
            debug __err => _74;          // in scope 29 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 30 {
            debug __val => const ();     // in scope 30 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 31 {
            debug __err => _79;          // in scope 31 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 32 {
            debug __val => const ();     // in scope 32 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 33 {
            debug __err => _84;          // in scope 33 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 34 {
            debug __val => const ();     // in scope 34 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 35 {
            debug __err => _89;          // in scope 35 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 36 {
            debug __val => const ();     // in scope 36 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 37 {
            debug __err => _94;          // in scope 37 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 38 {
            debug __val => const ();     // in scope 38 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 39 {
            debug __err => _99;          // in scope 39 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 40 {
            debug __val => const ();     // in scope 40 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 41 {
            debug __err => _104;         // in scope 41 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 42 {
            debug __val => const ();     // in scope 42 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 43 {
            debug __err => _109;         // in scope 43 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 44 {
            debug __val => const ();     // in scope 44 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 45 {
            debug __err => _114;         // in scope 45 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 46 {
            debug __val => const ();     // in scope 46 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 47 {
            debug __err => _119;         // in scope 47 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 48 {
            debug __val => const ();     // in scope 48 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 49 {
            debug __err => _124;         // in scope 49 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 50 {
            debug __val => const ();     // in scope 50 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 51 {
            debug __err => _129;         // in scope 51 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 52 {
            debug __val => const ();     // in scope 52 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 53 {
            debug __err => _134;         // in scope 53 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 54 {
            debug __val => const ();     // in scope 54 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 55 {
            debug __err => _139;         // in scope 55 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 56 {
            debug __val => const ();     // in scope 56 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 57 {
            debug __err => _144;         // in scope 57 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 58 {
            debug __val => const ();     // in scope 58 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
        scope 59 {
            debug __err => _149;         // in scope 59 at cita-jsonrpc/src/config.rs:47:10: 47:19
        }
    }
    scope 2 {
        debug __val => _8;               // in scope 2 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }
    scope 3 {
        debug __err => _9;               // in scope 3 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb0: {
        _152 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _151 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _152 = const true;               // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _5 = move _2;                    // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _6 = const 28_usize;             // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _152 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _4 = <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::serialize_struct(move _5, const "WsConfig", move _6) -> [return: bb1, unwind: bb125]; // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: fn(__S, &'static str, usize) -> Result<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error> {<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::serialize_struct}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _152 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:47:18: 47:19
        _7 = discriminant(_4);           // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _7) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb2: {
        _9 = move ((_4 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _9); // scope 3 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb119;                   // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb4: {
        _8 = move ((_4 as Ok).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct); // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _151 = const true;               // scope 2 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _3 = move _8;                    // scope 2 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _11 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _12 = &((*_1).0: bool);          // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _10 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_11, const "enable", _12) -> [return: bb5, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:49:5: 49:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _13 = discriminant(_10);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _13) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb6: {
        _14 = move ((_10 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _14); // scope 5 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb7: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb8: {
        _16 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _17 = &((*_1).1: usize);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _15 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>(_16, const "thread_number", _17) -> [return: bb9, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:50:5: 50:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b usize) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _18 = discriminant(_15);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _18) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb10: {
        _19 = move ((_15 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _19); // scope 7 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb12: {
        _21 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _22 = &((*_1).2: std::string::String); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _20 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_21, const "listen_ip", _22) -> [return: bb13, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:51:5: 51:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b std::string::String) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _23 = discriminant(_20);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _23) -> [0: bb16, 1: bb14, otherwise: bb15]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb14: {
        _24 = move ((_20 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _24); // scope 9 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb15: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb16: {
        _26 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _27 = &((*_1).3: std::string::String); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _25 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_26, const "listen_port", _27) -> [return: bb17, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:52:5: 52:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b std::string::String) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _28 = discriminant(_25);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _28) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb18: {
        _29 = move ((_25 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _29); // scope 11 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb19: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb20: {
        _31 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _32 = &((*_1).4: usize);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _30 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>(_31, const "max_connections", _32) -> [return: bb21, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:54:5: 54:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b usize) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _33 = discriminant(_30);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _33) -> [0: bb24, 1: bb22, otherwise: bb23]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb22: {
        _34 = move ((_30 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _34); // scope 13 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb23: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb24: {
        _36 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _37 = &((*_1).5: usize);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _35 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>(_36, const "queue_size", _37) -> [return: bb25, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:55:5: 55:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b usize) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _38 = discriminant(_35);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _38) -> [0: bb28, 1: bb26, otherwise: bb27]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb26: {
        _39 = move ((_35 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _39); // scope 15 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb27: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb28: {
        _41 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _42 = &((*_1).6: bool);          // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _40 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_41, const "panic_on_new_connection", _42) -> [return: bb29, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:56:5: 56:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb29: {
        _43 = discriminant(_40);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _43) -> [0: bb32, 1: bb30, otherwise: bb31]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb30: {
        _44 = move ((_40 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _44); // scope 17 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb31: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb32: {
        _46 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _47 = &((*_1).7: bool);          // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _45 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_46, const "panic_on_shutdown", _47) -> [return: bb33, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:57:5: 57:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb33: {
        _48 = discriminant(_45);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _48) -> [0: bb36, 1: bb34, otherwise: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb34: {
        _49 = move ((_45 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _49); // scope 19 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb35: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb36: {
        _51 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _52 = &((*_1).8: usize);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _50 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>(_51, const "fragments_capacity", _52) -> [return: bb37, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:58:5: 58:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b usize) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb37: {
        _53 = discriminant(_50);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _53) -> [0: bb40, 1: bb38, otherwise: bb39]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb38: {
        _54 = move ((_50 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _54); // scope 21 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb39: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb40: {
        _56 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _57 = &((*_1).9: bool);          // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _55 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_56, const "fragments_grow", _57) -> [return: bb41, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:59:5: 59:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb41: {
        _58 = discriminant(_55);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _58) -> [0: bb44, 1: bb42, otherwise: bb43]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb42: {
        _59 = move ((_55 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _59); // scope 23 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb43: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb44: {
        _61 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _62 = &((*_1).10: usize);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _60 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>(_61, const "fragment_size", _62) -> [return: bb45, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:60:5: 60:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b usize) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb45: {
        _63 = discriminant(_60);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _63) -> [0: bb48, 1: bb46, otherwise: bb47]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb46: {
        _64 = move ((_60 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _64); // scope 25 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb47: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb48: {
        _66 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _67 = &((*_1).11: usize);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _65 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>(_66, const "in_buffer_capacity", _67) -> [return: bb49, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:61:5: 61:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b usize) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb49: {
        _68 = discriminant(_65);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _68) -> [0: bb52, 1: bb50, otherwise: bb51]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb50: {
        _69 = move ((_65 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _69); // scope 27 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb51: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb52: {
        _71 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _72 = &((*_1).12: bool);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _70 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_71, const "in_buffer_grow", _72) -> [return: bb53, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:62:5: 62:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb53: {
        _73 = discriminant(_70);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _73) -> [0: bb56, 1: bb54, otherwise: bb55]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb54: {
        _74 = move ((_70 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _74); // scope 29 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb55: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb56: {
        _76 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _77 = &((*_1).13: usize);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _75 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>(_76, const "out_buffer_capacity", _77) -> [return: bb57, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:63:5: 63:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b usize) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<usize>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb57: {
        _78 = discriminant(_75);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _78) -> [0: bb60, 1: bb58, otherwise: bb59]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb58: {
        _79 = move ((_75 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _79); // scope 31 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb59: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb60: {
        _81 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _82 = &((*_1).14: bool);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _80 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_81, const "out_buffer_grow", _82) -> [return: bb61, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:64:5: 64:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb61: {
        _83 = discriminant(_80);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _83) -> [0: bb64, 1: bb62, otherwise: bb63]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb62: {
        _84 = move ((_80 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _84); // scope 33 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb63: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb64: {
        _86 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _87 = &((*_1).15: bool);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _85 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_86, const "panic_on_internal", _87) -> [return: bb65, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:65:5: 65:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb65: {
        _88 = discriminant(_85);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _88) -> [0: bb68, 1: bb66, otherwise: bb67]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb66: {
        _89 = move ((_85 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _89); // scope 35 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb67: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb68: {
        _91 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _92 = &((*_1).16: bool);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _90 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_91, const "panic_on_capacity", _92) -> [return: bb69, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:66:5: 66:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb69: {
        _93 = discriminant(_90);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _93) -> [0: bb72, 1: bb70, otherwise: bb71]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb70: {
        _94 = move ((_90 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _94); // scope 37 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb71: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb72: {
        _96 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _97 = &((*_1).17: bool);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _95 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_96, const "panic_on_protocol", _97) -> [return: bb73, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:67:5: 67:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb73: {
        _98 = discriminant(_95);         // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _98) -> [0: bb76, 1: bb74, otherwise: bb75]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb74: {
        _99 = move ((_95 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _99); // scope 39 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb75: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb76: {
        _101 = &mut _3;                  // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _102 = &((*_1).18: bool);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _100 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_101, const "panic_on_encoding", _102) -> [return: bb77, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:68:5: 68:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb77: {
        _103 = discriminant(_100);       // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _103) -> [0: bb80, 1: bb78, otherwise: bb79]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb78: {
        _104 = move ((_100 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _104); // scope 41 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb79: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb80: {
        _106 = &mut _3;                  // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _107 = &((*_1).19: bool);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _105 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_106, const "panic_on_queue", _107) -> [return: bb81, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:69:5: 69:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb81: {
        _108 = discriminant(_105);       // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _108) -> [0: bb84, 1: bb82, otherwise: bb83]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb82: {
        _109 = move ((_105 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _109); // scope 43 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb83: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb84: {
        _111 = &mut _3;                  // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _112 = &((*_1).20: bool);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _110 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_111, const "panic_on_io", _112) -> [return: bb85, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:70:5: 70:16
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb85: {
        _113 = discriminant(_110);       // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _113) -> [0: bb88, 1: bb86, otherwise: bb87]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb86: {
        _114 = move ((_110 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _114); // scope 45 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb87: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb88: {
        _116 = &mut _3;                  // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _117 = &((*_1).21: bool);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _115 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_116, const "panic_on_timeout", _117) -> [return: bb89, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:71:5: 71:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb89: {
        _118 = discriminant(_115);       // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _118) -> [0: bb92, 1: bb90, otherwise: bb91]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb90: {
        _119 = move ((_115 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _119); // scope 47 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb91: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb92: {
        _121 = &mut _3;                  // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _122 = &((*_1).22: bool);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _120 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_121, const "shutdown_on_interrupt", _122) -> [return: bb93, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:72:5: 72:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb93: {
        _123 = discriminant(_120);       // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _123) -> [0: bb96, 1: bb94, otherwise: bb95]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb94: {
        _124 = move ((_120 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _124); // scope 49 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb95: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb96: {
        _126 = &mut _3;                  // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _127 = &((*_1).23: bool);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _125 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_126, const "masking_strict", _127) -> [return: bb97, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:73:5: 73:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb97: {
        _128 = discriminant(_125);       // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _128) -> [0: bb100, 1: bb98, otherwise: bb99]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb98: {
        _129 = move ((_125 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _129); // scope 51 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb99: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb100: {
        _131 = &mut _3;                  // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _132 = &((*_1).24: bool);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _130 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_131, const "key_strict", _132) -> [return: bb101, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:74:5: 74:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb101: {
        _133 = discriminant(_130);       // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _133) -> [0: bb104, 1: bb102, otherwise: bb103]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb102: {
        _134 = move ((_130 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _134); // scope 53 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb103: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb104: {
        _136 = &mut _3;                  // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _137 = &((*_1).25: bool);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _135 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_136, const "method_strict", _137) -> [return: bb105, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:75:5: 75:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb105: {
        _138 = discriminant(_135);       // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _138) -> [0: bb108, 1: bb106, otherwise: bb107]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb106: {
        _139 = move ((_135 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _139); // scope 55 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb107: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb108: {
        _141 = &mut _3;                  // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _142 = &((*_1).26: bool);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _140 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_141, const "encrypt_server", _142) -> [return: bb109, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:76:5: 76:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb109: {
        _143 = discriminant(_140);       // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _143) -> [0: bb112, 1: bb110, otherwise: bb111]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb110: {
        _144 = move ((_140 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _144); // scope 57 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb111: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb112: {
        _146 = &mut _3;                  // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _147 = &((*_1).27: bool);        // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _145 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_146, const "tcp_nodelay", _147) -> [return: bb113, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:77:5: 77:16
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb113: {
        _148 = discriminant(_145);       // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        switchInt(move _148) -> [0: bb116, 1: bb114, otherwise: bb115]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb114: {
        _149 = move ((_145 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _149); // scope 59 at cita-jsonrpc/src/config.rs:47:10: 47:19
        goto -> bb118;                   // scope 1 at no-location
    }

    bb115: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb116: {
        _151 = const false;              // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _150 = move _3;                  // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
        _0 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _150) -> [return: bb117, unwind: bb123]; // scope 1 at cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:10: 47:19
                                         // + literal: Const { ty: fn(<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct) -> Result<<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Ok, <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::end}, val: Value(<ZST>) }
    }

    bb117: {
        _151 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:47:18: 47:19
        goto -> bb120;                   // scope 0 at cita-jsonrpc/src/config.rs:47:18: 47:19
    }

    bb118: {
        drop(_3) -> bb119;               // scope 0 at cita-jsonrpc/src/config.rs:47:18: 47:19
    }

    bb119: {
        _151 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:47:18: 47:19
        goto -> bb120;                   // scope 0 at cita-jsonrpc/src/config.rs:47:18: 47:19
    }

    bb120: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:19: 47:19
    }

    bb121 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:47:10: 47:19
    }

    bb122 (cleanup): {
        drop(_3) -> bb121;               // scope 0 at cita-jsonrpc/src/config.rs:47:18: 47:19
    }

    bb123 (cleanup): {
        switchInt(_151) -> [0: bb121, otherwise: bb122]; // scope 0 at cita-jsonrpc/src/config.rs:47:18: 47:19
    }

    bb124 (cleanup): {
        drop(_5) -> bb121;               // scope 0 at cita-jsonrpc/src/config.rs:47:18: 47:19
    }

    bb125 (cleanup): {
        switchInt(_152) -> [0: bb121, otherwise: bb124]; // scope 0 at cita-jsonrpc/src/config.rs:47:18: 47:19
    }
}

const _IMPL_DESERIALIZE_FOR_WsConfig: () = {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _0 = const ();                   // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

fn _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize(_1: __D) -> Result<WsConfig, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _0: std::result::Result<config::WsConfig, <__D as config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _0 = <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'_>>(move _1, const "WsConfig", const _, const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<WsConfig>, lifetime: PhantomData::<&()> }}) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: fn(__D, &'static str, &'static [&'static str], _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'_>) -> Result<<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'_> as Visitor<'_>>::Value, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {<__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'_>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::FIELDS, [], None) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'_>, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:32: 47:32
    }
}

fn _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    debug __formatter => _2;             // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _3 = const "field identifier";   // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:32: 47:32
    }
}

fn _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _3: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _4: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _5: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _6: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _7: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _8: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _9: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _10: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _11: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _12: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _13: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _14: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _15: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _16: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _17: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _18: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _19: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _20: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _21: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _22: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _23: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _24: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _25: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _26: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _27: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _28: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _29: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _30: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _31: __E;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _32: config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Unexpected<'_>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _33: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _34: &&str;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, 9: bb11, 10: bb12, 11: bb13, 12: bb14, 13: bb15, 14: bb16, 15: bb17, 16: bb18, 17: bb19, 18: bb20, 19: bb21, 20: bb22, 21: bb23, 22: bb24, 23: bb25, 24: bb26, 25: bb27, 26: bb28, 27: bb29, otherwise: bb1]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb1: {
        _32 = Unexpected::<'_>::Unsigned(_2); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _34 = const _;                   // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor as Visitor<'de>>::visit_u64, [ReErased, __E], Some(promoted[0])) }
        _33 = _34 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _31 = <__E as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_value(move _32, move _33) -> bb30; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(Unexpected<'a>, &'b (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'b)) -> __E {<__E as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_value}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _3); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb3: {
        _4 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _4); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb4: {
        _5 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field2; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _5); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb5: {
        _6 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field3; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _6); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb6: {
        _7 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field4; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _7); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb7: {
        _8 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field5; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _8); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb8: {
        _9 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field6; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _9); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb9: {
        _10 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field7; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x07)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _10); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb10: {
        _11 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field8; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x08)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _11); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb11: {
        _12 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field9; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x09)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _12); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb12: {
        _13 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field10; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0a)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _13); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb13: {
        _14 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field11; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0b)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _14); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb14: {
        _15 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field12; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0c)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _15); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb15: {
        _16 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field13; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0d)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _16); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb16: {
        _17 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field14; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0e)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _17); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb17: {
        _18 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field15; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0f)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _18); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb18: {
        _19 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field16; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x10)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _19); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb19: {
        _20 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field17; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x11)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _20); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb20: {
        _21 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field18; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x12)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _21); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb21: {
        _22 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field19; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x13)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _22); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb22: {
        _23 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field20; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x14)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _23); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb23: {
        _24 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field21; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x15)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _24); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb24: {
        _25 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field22; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x16)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _25); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb25: {
        _26 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field23; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x17)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _26); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb26: {
        _27 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field24; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x18)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _27); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb27: {
        _28 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field25; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x19)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _28); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb28: {
        _29 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field26; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x1a)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _29); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb29: {
        _30 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field27; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x1b)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _30); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb30: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Err(move _31); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb31: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:32: 47:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_u64: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "field index 0 <= i < 28"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

fn _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_str(_1: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _3: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _4: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _6: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _7: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _8: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _9: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _10: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _11: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _12: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _13: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _14: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _15: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _16: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _17: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _18: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _19: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _20: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _21: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _22: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _23: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _24: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _25: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _26: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _27: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _28: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _29: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _30: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _31: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _32: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _33: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _34: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _35: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _36: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _37: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _38: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _39: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _40: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _41: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _42: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _43: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _44: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _45: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _46: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _47: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _48: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _49: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _50: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _51: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _52: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _53: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _54: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _55: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _56: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _57: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _58: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _59: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "enable") -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb57]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "thread_number") -> bb3; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb58]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "listen_ip") -> bb5; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _5) -> [0: bb6, otherwise: bb59]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "listen_port") -> bb7; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _6) -> [0: bb8, otherwise: bb60]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb8: {
        _7 = <str as PartialEq>::eq(_2, const "max_connections") -> bb9; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        switchInt(move _7) -> [0: bb10, otherwise: bb61]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb10: {
        _8 = <str as PartialEq>::eq(_2, const "queue_size") -> bb11; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        switchInt(move _8) -> [0: bb12, otherwise: bb62]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb12: {
        _9 = <str as PartialEq>::eq(_2, const "panic_on_new_connection") -> bb13; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        switchInt(move _9) -> [0: bb14, otherwise: bb63]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb14: {
        _10 = <str as PartialEq>::eq(_2, const "panic_on_shutdown") -> bb15; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        switchInt(move _10) -> [0: bb16, otherwise: bb64]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb16: {
        _11 = <str as PartialEq>::eq(_2, const "fragments_capacity") -> bb17; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        switchInt(move _11) -> [0: bb18, otherwise: bb65]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb18: {
        _12 = <str as PartialEq>::eq(_2, const "fragments_grow") -> bb19; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        switchInt(move _12) -> [0: bb20, otherwise: bb66]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb20: {
        _13 = <str as PartialEq>::eq(_2, const "fragment_size") -> bb21; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        switchInt(move _13) -> [0: bb22, otherwise: bb67]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb22: {
        _14 = <str as PartialEq>::eq(_2, const "in_buffer_capacity") -> bb23; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        switchInt(move _14) -> [0: bb24, otherwise: bb68]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb24: {
        _15 = <str as PartialEq>::eq(_2, const "in_buffer_grow") -> bb25; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        switchInt(move _15) -> [0: bb26, otherwise: bb69]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb26: {
        _16 = <str as PartialEq>::eq(_2, const "out_buffer_capacity") -> bb27; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        switchInt(move _16) -> [0: bb28, otherwise: bb70]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb28: {
        _17 = <str as PartialEq>::eq(_2, const "out_buffer_grow") -> bb29; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb29: {
        switchInt(move _17) -> [0: bb30, otherwise: bb71]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb30: {
        _18 = <str as PartialEq>::eq(_2, const "panic_on_internal") -> bb31; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb31: {
        switchInt(move _18) -> [0: bb32, otherwise: bb72]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb32: {
        _19 = <str as PartialEq>::eq(_2, const "panic_on_capacity") -> bb33; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb33: {
        switchInt(move _19) -> [0: bb34, otherwise: bb73]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb34: {
        _20 = <str as PartialEq>::eq(_2, const "panic_on_protocol") -> bb35; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb35: {
        switchInt(move _20) -> [0: bb36, otherwise: bb74]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb36: {
        _21 = <str as PartialEq>::eq(_2, const "panic_on_encoding") -> bb37; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb37: {
        switchInt(move _21) -> [0: bb38, otherwise: bb75]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb38: {
        _22 = <str as PartialEq>::eq(_2, const "panic_on_queue") -> bb39; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb39: {
        switchInt(move _22) -> [0: bb40, otherwise: bb76]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb40: {
        _23 = <str as PartialEq>::eq(_2, const "panic_on_io") -> bb41; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb41: {
        switchInt(move _23) -> [0: bb42, otherwise: bb77]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb42: {
        _24 = <str as PartialEq>::eq(_2, const "panic_on_timeout") -> bb43; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb43: {
        switchInt(move _24) -> [0: bb44, otherwise: bb78]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb44: {
        _25 = <str as PartialEq>::eq(_2, const "shutdown_on_interrupt") -> bb45; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb45: {
        switchInt(move _25) -> [0: bb46, otherwise: bb79]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb46: {
        _26 = <str as PartialEq>::eq(_2, const "masking_strict") -> bb47; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb47: {
        switchInt(move _26) -> [0: bb48, otherwise: bb80]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb48: {
        _27 = <str as PartialEq>::eq(_2, const "key_strict") -> bb49; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb49: {
        switchInt(move _27) -> [0: bb50, otherwise: bb81]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb50: {
        _28 = <str as PartialEq>::eq(_2, const "method_strict") -> bb51; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb51: {
        switchInt(move _28) -> [0: bb52, otherwise: bb82]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb52: {
        _29 = <str as PartialEq>::eq(_2, const "encrypt_server") -> bb53; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb53: {
        switchInt(move _29) -> [0: bb54, otherwise: bb83]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb54: {
        _30 = <str as PartialEq>::eq(_2, const "tcp_nodelay") -> bb55; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb55: {
        switchInt(move _30) -> [0: bb56, otherwise: bb84]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb56: {
        _59 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__ignore; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x1c)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _59); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb57: {
        _31 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _31); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb58: {
        _32 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _32); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb59: {
        _33 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field2; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _33); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb60: {
        _34 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field3; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _34); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb61: {
        _35 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field4; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _35); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb62: {
        _36 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field5; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _36); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb63: {
        _37 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field6; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _37); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb64: {
        _38 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field7; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x07)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _38); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb65: {
        _39 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field8; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x08)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _39); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb66: {
        _40 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field9; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x09)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _40); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb67: {
        _41 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field10; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0a)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _41); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb68: {
        _42 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field11; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0b)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _42); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb69: {
        _43 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field12; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0c)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _43); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb70: {
        _44 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field13; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0d)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _44); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb71: {
        _45 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field14; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0e)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _45); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb72: {
        _46 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field15; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0f)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _46); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb73: {
        _47 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field16; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x10)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _47); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb74: {
        _48 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field17; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x11)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _48); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb75: {
        _49 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field18; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x12)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _49); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb76: {
        _50 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field19; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x13)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _50); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb77: {
        _51 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field20; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x14)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _51); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb78: {
        _52 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field21; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x15)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _52); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb79: {
        _53 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field22; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x16)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _53); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb80: {
        _54 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field23; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x17)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _54); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb81: {
        _55 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field24; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x18)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _55); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb82: {
        _56 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field25; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x19)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _56); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb83: {
        _57 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field26; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x1a)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _57); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb84: {
        _58 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field27; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x1b)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _58); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb85;                    // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb85: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:32: 47:32
    }
}

fn _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _3: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _4: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _6: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _7: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _8: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _9: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _10: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _11: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _12: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _13: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _14: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _15: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _16: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _17: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _18: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _19: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _20: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _21: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _22: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _23: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _24: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _25: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _26: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _27: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _28: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _29: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _30: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _31: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _32: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _33: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _34: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _35: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _36: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _37: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _38: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _39: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _40: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _41: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _42: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _43: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _44: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _45: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _46: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _47: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _48: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _49: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _50: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _51: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _52: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _53: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _54: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _55: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _56: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _57: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _58: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _59: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _60: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _61: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _62: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _63: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _64: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _65: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _66: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _67: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _68: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _69: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _70: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _39 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _40 = const 6_usize;             // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _41 = Eq(move _39, move _40);    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _41) -> [0: bb8, otherwise: bb1]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb1: {
        switchInt((*_2)[0 of 6]) -> [101: bb2, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb2: {
        switchInt((*_2)[1 of 6]) -> [110: bb3, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb3: {
        switchInt((*_2)[2 of 6]) -> [97: bb4, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb4: {
        switchInt((*_2)[3 of 6]) -> [98: bb5, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb5: {
        switchInt((*_2)[4 of 6]) -> [108: bb6, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb6: {
        switchInt((*_2)[5 of 6]) -> [101: bb370, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb7: {
        _70 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__ignore; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x1c)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _70); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb8: {
        _36 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _37 = const 13_usize;            // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _38 = Eq(move _36, move _37);    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _38) -> [0: bb46, otherwise: bb9]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb9: {
        switchInt((*_2)[0 of 13]) -> [116: bb10, 102: bb22, 109: bb34, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb10: {
        switchInt((*_2)[1 of 13]) -> [104: bb11, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb11: {
        switchInt((*_2)[2 of 13]) -> [114: bb12, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb12: {
        switchInt((*_2)[3 of 13]) -> [101: bb13, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb13: {
        switchInt((*_2)[4 of 13]) -> [97: bb14, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb14: {
        switchInt((*_2)[5 of 13]) -> [100: bb15, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb15: {
        switchInt((*_2)[6 of 13]) -> [95: bb16, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb16: {
        switchInt((*_2)[7 of 13]) -> [110: bb17, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb17: {
        switchInt((*_2)[8 of 13]) -> [117: bb18, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb18: {
        switchInt((*_2)[9 of 13]) -> [109: bb19, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb19: {
        switchInt((*_2)[10 of 13]) -> [98: bb20, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb20: {
        switchInt((*_2)[11 of 13]) -> [101: bb21, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb21: {
        switchInt((*_2)[12 of 13]) -> [114: bb371, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb22: {
        switchInt((*_2)[1 of 13]) -> [114: bb23, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb23: {
        switchInt((*_2)[2 of 13]) -> [97: bb24, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb24: {
        switchInt((*_2)[3 of 13]) -> [103: bb25, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb25: {
        switchInt((*_2)[4 of 13]) -> [109: bb26, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb26: {
        switchInt((*_2)[5 of 13]) -> [101: bb27, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb27: {
        switchInt((*_2)[6 of 13]) -> [110: bb28, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb28: {
        switchInt((*_2)[7 of 13]) -> [116: bb29, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb29: {
        switchInt((*_2)[8 of 13]) -> [95: bb30, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb30: {
        switchInt((*_2)[9 of 13]) -> [115: bb31, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb31: {
        switchInt((*_2)[10 of 13]) -> [105: bb32, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb32: {
        switchInt((*_2)[11 of 13]) -> [122: bb33, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb33: {
        switchInt((*_2)[12 of 13]) -> [101: bb380, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb34: {
        switchInt((*_2)[1 of 13]) -> [101: bb35, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb35: {
        switchInt((*_2)[2 of 13]) -> [116: bb36, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb36: {
        switchInt((*_2)[3 of 13]) -> [104: bb37, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb37: {
        switchInt((*_2)[4 of 13]) -> [111: bb38, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb38: {
        switchInt((*_2)[5 of 13]) -> [100: bb39, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb39: {
        switchInt((*_2)[6 of 13]) -> [95: bb40, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb40: {
        switchInt((*_2)[7 of 13]) -> [115: bb41, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb41: {
        switchInt((*_2)[8 of 13]) -> [116: bb42, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb42: {
        switchInt((*_2)[9 of 13]) -> [114: bb43, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb43: {
        switchInt((*_2)[10 of 13]) -> [105: bb44, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb44: {
        switchInt((*_2)[11 of 13]) -> [99: bb45, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb45: {
        switchInt((*_2)[12 of 13]) -> [116: bb395, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb46: {
        _33 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _34 = const 9_usize;             // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _35 = Eq(move _33, move _34);    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _35) -> [0: bb56, otherwise: bb47]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb47: {
        switchInt((*_2)[0 of 9]) -> [108: bb48, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb48: {
        switchInt((*_2)[1 of 9]) -> [105: bb49, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb49: {
        switchInt((*_2)[2 of 9]) -> [115: bb50, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb50: {
        switchInt((*_2)[3 of 9]) -> [116: bb51, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb51: {
        switchInt((*_2)[4 of 9]) -> [101: bb52, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb52: {
        switchInt((*_2)[5 of 9]) -> [110: bb53, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb53: {
        switchInt((*_2)[6 of 9]) -> [95: bb54, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb54: {
        switchInt((*_2)[7 of 9]) -> [105: bb55, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb55: {
        switchInt((*_2)[8 of 9]) -> [112: bb372, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb56: {
        _30 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _31 = const 11_usize;            // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _32 = Eq(move _30, move _31);    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _32) -> [0: bb88, otherwise: bb57]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb57: {
        switchInt((*_2)[0 of 11]) -> [108: bb58, 112: bb68, 116: bb78, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb58: {
        switchInt((*_2)[1 of 11]) -> [105: bb59, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb59: {
        switchInt((*_2)[2 of 11]) -> [115: bb60, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb60: {
        switchInt((*_2)[3 of 11]) -> [116: bb61, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb61: {
        switchInt((*_2)[4 of 11]) -> [101: bb62, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb62: {
        switchInt((*_2)[5 of 11]) -> [110: bb63, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb63: {
        switchInt((*_2)[6 of 11]) -> [95: bb64, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb64: {
        switchInt((*_2)[7 of 11]) -> [112: bb65, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb65: {
        switchInt((*_2)[8 of 11]) -> [111: bb66, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb66: {
        switchInt((*_2)[9 of 11]) -> [114: bb67, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb67: {
        switchInt((*_2)[10 of 11]) -> [116: bb373, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb68: {
        switchInt((*_2)[1 of 11]) -> [97: bb69, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb69: {
        switchInt((*_2)[2 of 11]) -> [110: bb70, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb70: {
        switchInt((*_2)[3 of 11]) -> [105: bb71, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb71: {
        switchInt((*_2)[4 of 11]) -> [99: bb72, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb72: {
        switchInt((*_2)[5 of 11]) -> [95: bb73, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb73: {
        switchInt((*_2)[6 of 11]) -> [111: bb74, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb74: {
        switchInt((*_2)[7 of 11]) -> [110: bb75, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb75: {
        switchInt((*_2)[8 of 11]) -> [95: bb76, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb76: {
        switchInt((*_2)[9 of 11]) -> [105: bb77, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb77: {
        switchInt((*_2)[10 of 11]) -> [111: bb390, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb78: {
        switchInt((*_2)[1 of 11]) -> [99: bb79, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb79: {
        switchInt((*_2)[2 of 11]) -> [112: bb80, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb80: {
        switchInt((*_2)[3 of 11]) -> [95: bb81, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb81: {
        switchInt((*_2)[4 of 11]) -> [110: bb82, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb82: {
        switchInt((*_2)[5 of 11]) -> [111: bb83, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb83: {
        switchInt((*_2)[6 of 11]) -> [100: bb84, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb84: {
        switchInt((*_2)[7 of 11]) -> [101: bb85, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb85: {
        switchInt((*_2)[8 of 11]) -> [108: bb86, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb86: {
        switchInt((*_2)[9 of 11]) -> [97: bb87, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb87: {
        switchInt((*_2)[10 of 11]) -> [121: bb397, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb88: {
        _27 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _28 = const 15_usize;            // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _29 = Eq(move _27, move _28);    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _29) -> [0: bb118, otherwise: bb89]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb89: {
        switchInt((*_2)[0 of 15]) -> [109: bb90, 111: bb104, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb90: {
        switchInt((*_2)[1 of 15]) -> [97: bb91, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb91: {
        switchInt((*_2)[2 of 15]) -> [120: bb92, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb92: {
        switchInt((*_2)[3 of 15]) -> [95: bb93, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb93: {
        switchInt((*_2)[4 of 15]) -> [99: bb94, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb94: {
        switchInt((*_2)[5 of 15]) -> [111: bb95, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb95: {
        switchInt((*_2)[6 of 15]) -> [110: bb96, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb96: {
        switchInt((*_2)[7 of 15]) -> [110: bb97, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb97: {
        switchInt((*_2)[8 of 15]) -> [101: bb98, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb98: {
        switchInt((*_2)[9 of 15]) -> [99: bb99, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb99: {
        switchInt((*_2)[10 of 15]) -> [116: bb100, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb100: {
        switchInt((*_2)[11 of 15]) -> [105: bb101, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb101: {
        switchInt((*_2)[12 of 15]) -> [111: bb102, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb102: {
        switchInt((*_2)[13 of 15]) -> [110: bb103, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb103: {
        switchInt((*_2)[14 of 15]) -> [115: bb374, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb104: {
        switchInt((*_2)[1 of 15]) -> [117: bb105, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb105: {
        switchInt((*_2)[2 of 15]) -> [116: bb106, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb106: {
        switchInt((*_2)[3 of 15]) -> [95: bb107, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb107: {
        switchInt((*_2)[4 of 15]) -> [98: bb108, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb108: {
        switchInt((*_2)[5 of 15]) -> [117: bb109, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb109: {
        switchInt((*_2)[6 of 15]) -> [102: bb110, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb110: {
        switchInt((*_2)[7 of 15]) -> [102: bb111, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb111: {
        switchInt((*_2)[8 of 15]) -> [101: bb112, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb112: {
        switchInt((*_2)[9 of 15]) -> [114: bb113, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb113: {
        switchInt((*_2)[10 of 15]) -> [95: bb114, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb114: {
        switchInt((*_2)[11 of 15]) -> [103: bb115, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb115: {
        switchInt((*_2)[12 of 15]) -> [114: bb116, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb116: {
        switchInt((*_2)[13 of 15]) -> [111: bb117, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb117: {
        switchInt((*_2)[14 of 15]) -> [119: bb384, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb118: {
        _24 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _25 = const 10_usize;            // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _26 = Eq(move _24, move _25);    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _26) -> [0: bb138, otherwise: bb119]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb119: {
        switchInt((*_2)[0 of 10]) -> [113: bb120, 107: bb129, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb120: {
        switchInt((*_2)[1 of 10]) -> [117: bb121, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb121: {
        switchInt((*_2)[2 of 10]) -> [101: bb122, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb122: {
        switchInt((*_2)[3 of 10]) -> [117: bb123, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb123: {
        switchInt((*_2)[4 of 10]) -> [101: bb124, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb124: {
        switchInt((*_2)[5 of 10]) -> [95: bb125, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb125: {
        switchInt((*_2)[6 of 10]) -> [115: bb126, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb126: {
        switchInt((*_2)[7 of 10]) -> [105: bb127, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb127: {
        switchInt((*_2)[8 of 10]) -> [122: bb128, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb128: {
        switchInt((*_2)[9 of 10]) -> [101: bb375, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb129: {
        switchInt((*_2)[1 of 10]) -> [101: bb130, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb130: {
        switchInt((*_2)[2 of 10]) -> [121: bb131, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb131: {
        switchInt((*_2)[3 of 10]) -> [95: bb132, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb132: {
        switchInt((*_2)[4 of 10]) -> [115: bb133, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb133: {
        switchInt((*_2)[5 of 10]) -> [116: bb134, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb134: {
        switchInt((*_2)[6 of 10]) -> [114: bb135, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb135: {
        switchInt((*_2)[7 of 10]) -> [105: bb136, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb136: {
        switchInt((*_2)[8 of 10]) -> [99: bb137, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb137: {
        switchInt((*_2)[9 of 10]) -> [116: bb394, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb138: {
        _21 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _22 = const 23_usize;            // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _23 = Eq(move _21, move _22);    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _23) -> [0: bb162, otherwise: bb139]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb139: {
        switchInt((*_2)[0 of 23]) -> [112: bb140, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb140: {
        switchInt((*_2)[1 of 23]) -> [97: bb141, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb141: {
        switchInt((*_2)[2 of 23]) -> [110: bb142, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb142: {
        switchInt((*_2)[3 of 23]) -> [105: bb143, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb143: {
        switchInt((*_2)[4 of 23]) -> [99: bb144, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb144: {
        switchInt((*_2)[5 of 23]) -> [95: bb145, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb145: {
        switchInt((*_2)[6 of 23]) -> [111: bb146, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb146: {
        switchInt((*_2)[7 of 23]) -> [110: bb147, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb147: {
        switchInt((*_2)[8 of 23]) -> [95: bb148, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb148: {
        switchInt((*_2)[9 of 23]) -> [110: bb149, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb149: {
        switchInt((*_2)[10 of 23]) -> [101: bb150, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb150: {
        switchInt((*_2)[11 of 23]) -> [119: bb151, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb151: {
        switchInt((*_2)[12 of 23]) -> [95: bb152, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb152: {
        switchInt((*_2)[13 of 23]) -> [99: bb153, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb153: {
        switchInt((*_2)[14 of 23]) -> [111: bb154, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb154: {
        switchInt((*_2)[15 of 23]) -> [110: bb155, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb155: {
        switchInt((*_2)[16 of 23]) -> [110: bb156, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb156: {
        switchInt((*_2)[17 of 23]) -> [101: bb157, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb157: {
        switchInt((*_2)[18 of 23]) -> [99: bb158, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb158: {
        switchInt((*_2)[19 of 23]) -> [116: bb159, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb159: {
        switchInt((*_2)[20 of 23]) -> [105: bb160, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb160: {
        switchInt((*_2)[21 of 23]) -> [111: bb161, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb161: {
        switchInt((*_2)[22 of 23]) -> [110: bb376, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb162: {
        _18 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _19 = const 17_usize;            // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _20 = Eq(move _18, move _19);    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _20) -> [0: bb208, otherwise: bb163]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb163: {
        switchInt((*_2)[0 of 17]) -> [112: bb164, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb164: {
        switchInt((*_2)[1 of 17]) -> [97: bb165, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb165: {
        switchInt((*_2)[2 of 17]) -> [110: bb166, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb166: {
        switchInt((*_2)[3 of 17]) -> [105: bb167, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb167: {
        switchInt((*_2)[4 of 17]) -> [99: bb168, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb168: {
        switchInt((*_2)[5 of 17]) -> [95: bb169, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb169: {
        switchInt((*_2)[6 of 17]) -> [111: bb170, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb170: {
        switchInt((*_2)[7 of 17]) -> [110: bb171, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb171: {
        switchInt((*_2)[8 of 17]) -> [95: bb172, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb172: {
        switchInt((*_2)[9 of 17]) -> [115: bb173, 105: bb180, 99: bb187, 112: bb194, 101: bb201, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb173: {
        switchInt((*_2)[10 of 17]) -> [104: bb174, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb174: {
        switchInt((*_2)[11 of 17]) -> [117: bb175, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb175: {
        switchInt((*_2)[12 of 17]) -> [116: bb176, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb176: {
        switchInt((*_2)[13 of 17]) -> [100: bb177, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb177: {
        switchInt((*_2)[14 of 17]) -> [111: bb178, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb178: {
        switchInt((*_2)[15 of 17]) -> [119: bb179, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb179: {
        switchInt((*_2)[16 of 17]) -> [110: bb377, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb180: {
        switchInt((*_2)[10 of 17]) -> [110: bb181, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb181: {
        switchInt((*_2)[11 of 17]) -> [116: bb182, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb182: {
        switchInt((*_2)[12 of 17]) -> [101: bb183, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb183: {
        switchInt((*_2)[13 of 17]) -> [114: bb184, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb184: {
        switchInt((*_2)[14 of 17]) -> [110: bb185, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb185: {
        switchInt((*_2)[15 of 17]) -> [97: bb186, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb186: {
        switchInt((*_2)[16 of 17]) -> [108: bb385, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb187: {
        switchInt((*_2)[10 of 17]) -> [97: bb188, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb188: {
        switchInt((*_2)[11 of 17]) -> [112: bb189, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb189: {
        switchInt((*_2)[12 of 17]) -> [97: bb190, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb190: {
        switchInt((*_2)[13 of 17]) -> [99: bb191, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb191: {
        switchInt((*_2)[14 of 17]) -> [105: bb192, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb192: {
        switchInt((*_2)[15 of 17]) -> [116: bb193, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb193: {
        switchInt((*_2)[16 of 17]) -> [121: bb386, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb194: {
        switchInt((*_2)[10 of 17]) -> [114: bb195, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb195: {
        switchInt((*_2)[11 of 17]) -> [111: bb196, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb196: {
        switchInt((*_2)[12 of 17]) -> [116: bb197, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb197: {
        switchInt((*_2)[13 of 17]) -> [111: bb198, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb198: {
        switchInt((*_2)[14 of 17]) -> [99: bb199, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb199: {
        switchInt((*_2)[15 of 17]) -> [111: bb200, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb200: {
        switchInt((*_2)[16 of 17]) -> [108: bb387, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb201: {
        switchInt((*_2)[10 of 17]) -> [110: bb202, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb202: {
        switchInt((*_2)[11 of 17]) -> [99: bb203, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb203: {
        switchInt((*_2)[12 of 17]) -> [111: bb204, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb204: {
        switchInt((*_2)[13 of 17]) -> [100: bb205, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb205: {
        switchInt((*_2)[14 of 17]) -> [105: bb206, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb206: {
        switchInt((*_2)[15 of 17]) -> [110: bb207, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb207: {
        switchInt((*_2)[16 of 17]) -> [103: bb388, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb208: {
        _15 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _16 = const 18_usize;            // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _17 = Eq(move _15, move _16);    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _17) -> [0: bb244, otherwise: bb209]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb209: {
        switchInt((*_2)[0 of 18]) -> [102: bb210, 105: bb227, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb210: {
        switchInt((*_2)[1 of 18]) -> [114: bb211, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb211: {
        switchInt((*_2)[2 of 18]) -> [97: bb212, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb212: {
        switchInt((*_2)[3 of 18]) -> [103: bb213, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb213: {
        switchInt((*_2)[4 of 18]) -> [109: bb214, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb214: {
        switchInt((*_2)[5 of 18]) -> [101: bb215, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb215: {
        switchInt((*_2)[6 of 18]) -> [110: bb216, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb216: {
        switchInt((*_2)[7 of 18]) -> [116: bb217, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb217: {
        switchInt((*_2)[8 of 18]) -> [115: bb218, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb218: {
        switchInt((*_2)[9 of 18]) -> [95: bb219, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb219: {
        switchInt((*_2)[10 of 18]) -> [99: bb220, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb220: {
        switchInt((*_2)[11 of 18]) -> [97: bb221, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb221: {
        switchInt((*_2)[12 of 18]) -> [112: bb222, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb222: {
        switchInt((*_2)[13 of 18]) -> [97: bb223, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb223: {
        switchInt((*_2)[14 of 18]) -> [99: bb224, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb224: {
        switchInt((*_2)[15 of 18]) -> [105: bb225, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb225: {
        switchInt((*_2)[16 of 18]) -> [116: bb226, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb226: {
        switchInt((*_2)[17 of 18]) -> [121: bb378, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb227: {
        switchInt((*_2)[1 of 18]) -> [110: bb228, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb228: {
        switchInt((*_2)[2 of 18]) -> [95: bb229, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb229: {
        switchInt((*_2)[3 of 18]) -> [98: bb230, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb230: {
        switchInt((*_2)[4 of 18]) -> [117: bb231, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb231: {
        switchInt((*_2)[5 of 18]) -> [102: bb232, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb232: {
        switchInt((*_2)[6 of 18]) -> [102: bb233, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb233: {
        switchInt((*_2)[7 of 18]) -> [101: bb234, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb234: {
        switchInt((*_2)[8 of 18]) -> [114: bb235, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb235: {
        switchInt((*_2)[9 of 18]) -> [95: bb236, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb236: {
        switchInt((*_2)[10 of 18]) -> [99: bb237, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb237: {
        switchInt((*_2)[11 of 18]) -> [97: bb238, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb238: {
        switchInt((*_2)[12 of 18]) -> [112: bb239, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb239: {
        switchInt((*_2)[13 of 18]) -> [97: bb240, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb240: {
        switchInt((*_2)[14 of 18]) -> [99: bb241, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb241: {
        switchInt((*_2)[15 of 18]) -> [105: bb242, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb242: {
        switchInt((*_2)[16 of 18]) -> [116: bb243, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb243: {
        switchInt((*_2)[17 of 18]) -> [121: bb381, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb244: {
        _12 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _13 = const 14_usize;            // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _14 = Eq(move _12, move _13);    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _14) -> [0: bb311, otherwise: bb245]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb245: {
        switchInt((*_2)[0 of 14]) -> [102: bb246, 105: bb259, 112: bb272, 109: bb285, 101: bb298, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb246: {
        switchInt((*_2)[1 of 14]) -> [114: bb247, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb247: {
        switchInt((*_2)[2 of 14]) -> [97: bb248, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb248: {
        switchInt((*_2)[3 of 14]) -> [103: bb249, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb249: {
        switchInt((*_2)[4 of 14]) -> [109: bb250, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb250: {
        switchInt((*_2)[5 of 14]) -> [101: bb251, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb251: {
        switchInt((*_2)[6 of 14]) -> [110: bb252, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb252: {
        switchInt((*_2)[7 of 14]) -> [116: bb253, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb253: {
        switchInt((*_2)[8 of 14]) -> [115: bb254, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb254: {
        switchInt((*_2)[9 of 14]) -> [95: bb255, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb255: {
        switchInt((*_2)[10 of 14]) -> [103: bb256, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb256: {
        switchInt((*_2)[11 of 14]) -> [114: bb257, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb257: {
        switchInt((*_2)[12 of 14]) -> [111: bb258, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb258: {
        switchInt((*_2)[13 of 14]) -> [119: bb379, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb259: {
        switchInt((*_2)[1 of 14]) -> [110: bb260, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb260: {
        switchInt((*_2)[2 of 14]) -> [95: bb261, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb261: {
        switchInt((*_2)[3 of 14]) -> [98: bb262, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb262: {
        switchInt((*_2)[4 of 14]) -> [117: bb263, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb263: {
        switchInt((*_2)[5 of 14]) -> [102: bb264, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb264: {
        switchInt((*_2)[6 of 14]) -> [102: bb265, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb265: {
        switchInt((*_2)[7 of 14]) -> [101: bb266, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb266: {
        switchInt((*_2)[8 of 14]) -> [114: bb267, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb267: {
        switchInt((*_2)[9 of 14]) -> [95: bb268, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb268: {
        switchInt((*_2)[10 of 14]) -> [103: bb269, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb269: {
        switchInt((*_2)[11 of 14]) -> [114: bb270, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb270: {
        switchInt((*_2)[12 of 14]) -> [111: bb271, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb271: {
        switchInt((*_2)[13 of 14]) -> [119: bb382, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb272: {
        switchInt((*_2)[1 of 14]) -> [97: bb273, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb273: {
        switchInt((*_2)[2 of 14]) -> [110: bb274, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb274: {
        switchInt((*_2)[3 of 14]) -> [105: bb275, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb275: {
        switchInt((*_2)[4 of 14]) -> [99: bb276, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb276: {
        switchInt((*_2)[5 of 14]) -> [95: bb277, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb277: {
        switchInt((*_2)[6 of 14]) -> [111: bb278, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb278: {
        switchInt((*_2)[7 of 14]) -> [110: bb279, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb279: {
        switchInt((*_2)[8 of 14]) -> [95: bb280, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb280: {
        switchInt((*_2)[9 of 14]) -> [113: bb281, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb281: {
        switchInt((*_2)[10 of 14]) -> [117: bb282, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb282: {
        switchInt((*_2)[11 of 14]) -> [101: bb283, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb283: {
        switchInt((*_2)[12 of 14]) -> [117: bb284, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb284: {
        switchInt((*_2)[13 of 14]) -> [101: bb389, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb285: {
        switchInt((*_2)[1 of 14]) -> [97: bb286, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb286: {
        switchInt((*_2)[2 of 14]) -> [115: bb287, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb287: {
        switchInt((*_2)[3 of 14]) -> [107: bb288, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb288: {
        switchInt((*_2)[4 of 14]) -> [105: bb289, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb289: {
        switchInt((*_2)[5 of 14]) -> [110: bb290, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb290: {
        switchInt((*_2)[6 of 14]) -> [103: bb291, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb291: {
        switchInt((*_2)[7 of 14]) -> [95: bb292, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb292: {
        switchInt((*_2)[8 of 14]) -> [115: bb293, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb293: {
        switchInt((*_2)[9 of 14]) -> [116: bb294, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb294: {
        switchInt((*_2)[10 of 14]) -> [114: bb295, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb295: {
        switchInt((*_2)[11 of 14]) -> [105: bb296, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb296: {
        switchInt((*_2)[12 of 14]) -> [99: bb297, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb297: {
        switchInt((*_2)[13 of 14]) -> [116: bb393, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb298: {
        switchInt((*_2)[1 of 14]) -> [110: bb299, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb299: {
        switchInt((*_2)[2 of 14]) -> [99: bb300, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb300: {
        switchInt((*_2)[3 of 14]) -> [114: bb301, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb301: {
        switchInt((*_2)[4 of 14]) -> [121: bb302, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb302: {
        switchInt((*_2)[5 of 14]) -> [112: bb303, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb303: {
        switchInt((*_2)[6 of 14]) -> [116: bb304, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb304: {
        switchInt((*_2)[7 of 14]) -> [95: bb305, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb305: {
        switchInt((*_2)[8 of 14]) -> [115: bb306, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb306: {
        switchInt((*_2)[9 of 14]) -> [101: bb307, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb307: {
        switchInt((*_2)[10 of 14]) -> [114: bb308, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb308: {
        switchInt((*_2)[11 of 14]) -> [118: bb309, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb309: {
        switchInt((*_2)[12 of 14]) -> [101: bb310, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb310: {
        switchInt((*_2)[13 of 14]) -> [114: bb396, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb311: {
        _9 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _10 = const 19_usize;            // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _11 = Eq(move _9, move _10);     // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _11) -> [0: bb331, otherwise: bb312]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb312: {
        switchInt((*_2)[0 of 19]) -> [111: bb313, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb313: {
        switchInt((*_2)[1 of 19]) -> [117: bb314, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb314: {
        switchInt((*_2)[2 of 19]) -> [116: bb315, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb315: {
        switchInt((*_2)[3 of 19]) -> [95: bb316, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb316: {
        switchInt((*_2)[4 of 19]) -> [98: bb317, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb317: {
        switchInt((*_2)[5 of 19]) -> [117: bb318, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb318: {
        switchInt((*_2)[6 of 19]) -> [102: bb319, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb319: {
        switchInt((*_2)[7 of 19]) -> [102: bb320, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb320: {
        switchInt((*_2)[8 of 19]) -> [101: bb321, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb321: {
        switchInt((*_2)[9 of 19]) -> [114: bb322, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb322: {
        switchInt((*_2)[10 of 19]) -> [95: bb323, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb323: {
        switchInt((*_2)[11 of 19]) -> [99: bb324, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb324: {
        switchInt((*_2)[12 of 19]) -> [97: bb325, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb325: {
        switchInt((*_2)[13 of 19]) -> [112: bb326, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb326: {
        switchInt((*_2)[14 of 19]) -> [97: bb327, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb327: {
        switchInt((*_2)[15 of 19]) -> [99: bb328, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb328: {
        switchInt((*_2)[16 of 19]) -> [105: bb329, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb329: {
        switchInt((*_2)[17 of 19]) -> [116: bb330, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb330: {
        switchInt((*_2)[18 of 19]) -> [121: bb383, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb331: {
        _6 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _7 = const 16_usize;             // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _8 = Eq(move _6, move _7);       // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _8) -> [0: bb348, otherwise: bb332]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb332: {
        switchInt((*_2)[0 of 16]) -> [112: bb333, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb333: {
        switchInt((*_2)[1 of 16]) -> [97: bb334, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb334: {
        switchInt((*_2)[2 of 16]) -> [110: bb335, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb335: {
        switchInt((*_2)[3 of 16]) -> [105: bb336, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb336: {
        switchInt((*_2)[4 of 16]) -> [99: bb337, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb337: {
        switchInt((*_2)[5 of 16]) -> [95: bb338, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb338: {
        switchInt((*_2)[6 of 16]) -> [111: bb339, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb339: {
        switchInt((*_2)[7 of 16]) -> [110: bb340, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb340: {
        switchInt((*_2)[8 of 16]) -> [95: bb341, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb341: {
        switchInt((*_2)[9 of 16]) -> [116: bb342, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb342: {
        switchInt((*_2)[10 of 16]) -> [105: bb343, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb343: {
        switchInt((*_2)[11 of 16]) -> [109: bb344, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb344: {
        switchInt((*_2)[12 of 16]) -> [101: bb345, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb345: {
        switchInt((*_2)[13 of 16]) -> [111: bb346, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb346: {
        switchInt((*_2)[14 of 16]) -> [117: bb347, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb347: {
        switchInt((*_2)[15 of 16]) -> [116: bb391, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb348: {
        _3 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _4 = const 21_usize;             // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _5 = Eq(move _3, move _4);       // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _5) -> [0: bb7, otherwise: bb349]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb349: {
        switchInt((*_2)[0 of 21]) -> [115: bb350, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb350: {
        switchInt((*_2)[1 of 21]) -> [104: bb351, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb351: {
        switchInt((*_2)[2 of 21]) -> [117: bb352, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb352: {
        switchInt((*_2)[3 of 21]) -> [116: bb353, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb353: {
        switchInt((*_2)[4 of 21]) -> [100: bb354, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb354: {
        switchInt((*_2)[5 of 21]) -> [111: bb355, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb355: {
        switchInt((*_2)[6 of 21]) -> [119: bb356, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb356: {
        switchInt((*_2)[7 of 21]) -> [110: bb357, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb357: {
        switchInt((*_2)[8 of 21]) -> [95: bb358, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb358: {
        switchInt((*_2)[9 of 21]) -> [111: bb359, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb359: {
        switchInt((*_2)[10 of 21]) -> [110: bb360, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb360: {
        switchInt((*_2)[11 of 21]) -> [95: bb361, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb361: {
        switchInt((*_2)[12 of 21]) -> [105: bb362, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb362: {
        switchInt((*_2)[13 of 21]) -> [110: bb363, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb363: {
        switchInt((*_2)[14 of 21]) -> [116: bb364, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb364: {
        switchInt((*_2)[15 of 21]) -> [101: bb365, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb365: {
        switchInt((*_2)[16 of 21]) -> [114: bb366, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb366: {
        switchInt((*_2)[17 of 21]) -> [114: bb367, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb367: {
        switchInt((*_2)[18 of 21]) -> [117: bb368, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb368: {
        switchInt((*_2)[19 of 21]) -> [112: bb369, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb369: {
        switchInt((*_2)[20 of 21]) -> [116: bb392, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb370: {
        _42 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _42); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb371: {
        _43 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _43); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb372: {
        _44 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field2; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _44); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb373: {
        _45 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field3; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _45); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb374: {
        _46 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field4; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _46); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb375: {
        _47 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field5; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _47); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb376: {
        _48 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field6; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _48); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb377: {
        _49 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field7; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x07)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _49); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb378: {
        _50 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field8; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x08)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _50); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb379: {
        _51 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field9; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x09)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _51); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb380: {
        _52 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field10; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0a)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _52); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb381: {
        _53 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field11; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0b)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _53); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb382: {
        _54 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field12; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0c)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _54); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb383: {
        _55 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field13; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0d)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _55); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb384: {
        _56 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field14; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0e)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _56); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb385: {
        _57 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field15; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x0f)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _57); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb386: {
        _58 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field16; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x10)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _58); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb387: {
        _59 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field17; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x11)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _59); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb388: {
        _60 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field18; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x12)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _60); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb389: {
        _61 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field19; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x13)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _61); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb390: {
        _62 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field20; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x14)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _62); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb391: {
        _63 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field21; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x15)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _63); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb392: {
        _64 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field22; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x16)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _64); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb393: {
        _65 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field23; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x17)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _65); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb394: {
        _66 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field24; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x18)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _66); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb395: {
        _67 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field25; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x19)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _67); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb396: {
        _68 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field26; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x1a)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _68); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb397: {
        _69 = const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field::__field27; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, val: Value(Scalar(0x1b)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, __E>::Ok(move _69); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb398;                   // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb398: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:32: 47:32
    }
}

fn _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field, <__D as config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _0 = <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: fn(__D, _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor) -> Result<<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor as Visitor<'_>>::Value, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {<__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__FieldVisitor, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:32: 47:32
    }
}

fn _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    debug __formatter => _2;             // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _3 = const "struct WsConfig";    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:32: 47:32
    }
}

fn _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'_>, _2: __A) -> Result<WsConfig, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<WsConfig>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    debug __seq => _2;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _0: std::result::Result<config::WsConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _3: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _4: &mut __A;                // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _5: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _6: std::option::Option<bool>;   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _7: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _8: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _9: bool;                        // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _10: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _11: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _12: std::result::Result<std::option::Option<usize>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _13: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _14: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _17: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _19: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _20: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _22: std::result::Result<std::option::Option<std::string::String>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _23: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _24: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _27: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _29: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _30: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _32: std::result::Result<std::option::Option<std::string::String>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _33: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _34: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _37: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _39: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _40: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _41: std::result::Result<std::option::Option<usize>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _42: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _43: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _46: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _48: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _49: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _50: std::result::Result<std::option::Option<usize>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _51: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _52: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _55: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _57: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _58: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _59: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _60: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _61: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _64: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _66: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _67: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _68: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _69: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _70: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _73: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _75: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _76: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _77: std::result::Result<std::option::Option<usize>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _78: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _79: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _82: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _84: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _85: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _86: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _87: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _88: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _91: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _93: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _94: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _95: std::result::Result<std::option::Option<usize>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _96: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _97: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _100: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _102: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _103: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _104: std::result::Result<std::option::Option<usize>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _105: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _106: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _109: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _111: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _112: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _113: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _114: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _115: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _118: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _120: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _121: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _122: std::result::Result<std::option::Option<usize>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _123: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _124: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _127: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _129: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _130: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _131: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _132: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _133: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _136: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _138: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _139: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _140: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _141: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _142: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _145: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _147: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _148: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _149: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _150: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _151: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _154: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _156: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _157: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _158: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _159: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _160: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _163: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _165: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _166: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _167: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _168: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _169: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _172: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _174: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _175: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _176: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _177: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _178: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _181: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _183: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _184: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _185: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _186: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _187: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _190: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _192: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _193: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _194: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _195: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _196: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _199: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _201: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _202: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _203: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _204: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _205: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _208: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _210: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _211: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _212: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _213: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _214: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _217: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _219: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _220: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _221: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _222: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _223: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _226: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _228: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _229: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _230: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _231: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _232: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _235: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _237: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _238: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _239: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _240: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _241: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _244: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _246: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _247: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _248: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _249: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _250: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _253: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _255: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _256: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _257: config::WsConfig;      // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _258: std::string::String;   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _259: std::string::String;   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _260: &&str;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    scope 1 {
        debug __field0 => _9;            // in scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        let _15: std::option::Option<usize>; // in scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        let _16: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        let _18: usize;                  // in scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        let mut _261: &&str;             // in scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        scope 5 {
            debug __field1 => _18;       // in scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
            let _21: std::string::String; // in scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
            let _25: std::option::Option<std::string::String>; // in scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
            let _26: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
            let _28: std::string::String; // in scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
            let mut _262: &&str;         // in scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
            scope 9 {
                debug __field2 => _21;   // in scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
                let _31: std::string::String; // in scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
                let _35: std::option::Option<std::string::String>; // in scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
                let _36: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
                let _38: std::string::String; // in scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
                let mut _263: &&str;     // in scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
                scope 13 {
                    debug __field3 => _31; // in scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
                    let _44: std::option::Option<usize>; // in scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
                    let _45: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
                    let _47: usize;      // in scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
                    let mut _264: &&str; // in scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
                    scope 17 {
                        debug __field4 => _47; // in scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
                        let _53: std::option::Option<usize>; // in scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
                        let _54: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
                        let _56: usize;  // in scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
                        let mut _265: &&str; // in scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
                        scope 21 {
                            debug __field5 => _56; // in scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
                            let _62: std::option::Option<bool>; // in scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
                            let _63: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
                            let _65: bool; // in scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
                            let mut _266: &&str; // in scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
                            scope 25 {
                                debug __field6 => _65; // in scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                let _71: std::option::Option<bool>; // in scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                let _72: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                let _74: bool; // in scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                let mut _267: &&str; // in scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                scope 29 {
                                    debug __field7 => _74; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                    let _80: std::option::Option<usize>; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                    let _81: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                    let _83: usize; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                    let mut _268: &&str; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                    scope 33 {
                                        debug __field8 => _83; // in scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                        let _89: std::option::Option<bool>; // in scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                        let _90: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                        let _92: bool; // in scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                        let mut _269: &&str; // in scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                        scope 37 {
                                            debug __field9 => _92; // in scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                            let _98: std::option::Option<usize>; // in scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                            let _99: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                            let _101: usize; // in scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                            let mut _270: &&str; // in scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                            scope 41 {
                                                debug __field10 => _101; // in scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                let _107: std::option::Option<usize>; // in scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                let _108: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                let _110: usize; // in scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                let mut _271: &&str; // in scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                scope 45 {
                                                    debug __field11 => _110; // in scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                    let _116: std::option::Option<bool>; // in scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                    let _117: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                    let _119: bool; // in scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                    let mut _272: &&str; // in scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                    scope 49 {
                                                        debug __field12 => _119; // in scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                        let _125: std::option::Option<usize>; // in scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                        let _126: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                        let _128: usize; // in scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                        let mut _273: &&str; // in scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                        scope 53 {
                                                            debug __field13 => _128; // in scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                            let _134: std::option::Option<bool>; // in scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                            let _135: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                            let _137: bool; // in scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                            let mut _274: &&str; // in scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                            scope 57 {
                                                                debug __field14 => _137; // in scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                let _143: std::option::Option<bool>; // in scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                let _144: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                let _146: bool; // in scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                let mut _275: &&str; // in scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                scope 61 {
                                                                    debug __field15 => _146; // in scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                    let _152: std::option::Option<bool>; // in scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                    let _153: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                    let _155: bool; // in scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                    let mut _276: &&str; // in scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                    scope 65 {
                                                                        debug __field16 => _155; // in scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                        let _161: std::option::Option<bool>; // in scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                        let _162: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                        let _164: bool; // in scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                        let mut _277: &&str; // in scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                        scope 69 {
                                                                            debug __field17 => _164; // in scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                            let _170: std::option::Option<bool>; // in scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                            let _171: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                            let _173: bool; // in scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                            let mut _278: &&str; // in scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                            scope 73 {
                                                                                debug __field18 => _173; // in scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                let _179: std::option::Option<bool>; // in scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                let _180: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                let _182: bool; // in scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                let mut _279: &&str; // in scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                scope 77 {
                                                                                    debug __field19 => _182; // in scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                    let _188: std::option::Option<bool>; // in scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                    let _189: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                    let _191: bool; // in scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                    let mut _280: &&str; // in scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                    scope 81 {
                                                                                        debug __field20 => _191; // in scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                        let _197: std::option::Option<bool>; // in scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                        let _198: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                        let _200: bool; // in scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                        let mut _281: &&str; // in scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                        scope 85 {
                                                                                            debug __field21 => _200; // in scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                            let _206: std::option::Option<bool>; // in scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                            let _207: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                            let _209: bool; // in scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                            let mut _282: &&str; // in scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                            scope 89 {
                                                                                                debug __field22 => _209; // in scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                let _215: std::option::Option<bool>; // in scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                let _216: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                let _218: bool; // in scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                let mut _283: &&str; // in scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                scope 93 {
                                                                                                    debug __field23 => _218; // in scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                    let _224: std::option::Option<bool>; // in scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                    let _225: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                    let _227: bool; // in scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                    let mut _284: &&str; // in scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                    scope 97 {
                                                                                                        debug __field24 => _227; // in scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                        let _233: std::option::Option<bool>; // in scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                        let _234: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                        let _236: bool; // in scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                        let mut _285: &&str; // in scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                        scope 101 {
                                                                                                            debug __field25 => _236; // in scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                            let _242: std::option::Option<bool>; // in scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                            let _243: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                            let _245: bool; // in scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                            let mut _286: &&str; // in scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                            scope 105 {
                                                                                                                debug __field26 => _245; // in scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                let _251: std::option::Option<bool>; // in scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                let _252: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                let _254: bool; // in scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                let mut _287: &&str; // in scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                scope 109 {
                                                                                                                    debug __field27 => _254; // in scope 109 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                }
                                                                                                                scope 110 {
                                                                                                                    debug __val => _251; // in scope 110 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                }
                                                                                                                scope 111 {
                                                                                                                    debug __err => _252; // in scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                }
                                                                                                                scope 112 {
                                                                                                                    debug __value => _254; // in scope 112 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                }
                                                                                                            }
                                                                                                            scope 106 {
                                                                                                                debug __val => _242; // in scope 106 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                            }
                                                                                                            scope 107 {
                                                                                                                debug __err => _243; // in scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                            }
                                                                                                            scope 108 {
                                                                                                                debug __value => _245; // in scope 108 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                            }
                                                                                                        }
                                                                                                        scope 102 {
                                                                                                            debug __val => _233; // in scope 102 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                        }
                                                                                                        scope 103 {
                                                                                                            debug __err => _234; // in scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                        }
                                                                                                        scope 104 {
                                                                                                            debug __value => _236; // in scope 104 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                        }
                                                                                                    }
                                                                                                    scope 98 {
                                                                                                        debug __val => _224; // in scope 98 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                    }
                                                                                                    scope 99 {
                                                                                                        debug __err => _225; // in scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                    }
                                                                                                    scope 100 {
                                                                                                        debug __value => _227; // in scope 100 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                    }
                                                                                                }
                                                                                                scope 94 {
                                                                                                    debug __val => _215; // in scope 94 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                }
                                                                                                scope 95 {
                                                                                                    debug __err => _216; // in scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                }
                                                                                                scope 96 {
                                                                                                    debug __value => _218; // in scope 96 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                }
                                                                                            }
                                                                                            scope 90 {
                                                                                                debug __val => _206; // in scope 90 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                            }
                                                                                            scope 91 {
                                                                                                debug __err => _207; // in scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                            }
                                                                                            scope 92 {
                                                                                                debug __value => _209; // in scope 92 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                            }
                                                                                        }
                                                                                        scope 86 {
                                                                                            debug __val => _197; // in scope 86 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                        }
                                                                                        scope 87 {
                                                                                            debug __err => _198; // in scope 87 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                        }
                                                                                        scope 88 {
                                                                                            debug __value => _200; // in scope 88 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                        }
                                                                                    }
                                                                                    scope 82 {
                                                                                        debug __val => _188; // in scope 82 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                    }
                                                                                    scope 83 {
                                                                                        debug __err => _189; // in scope 83 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                    }
                                                                                    scope 84 {
                                                                                        debug __value => _191; // in scope 84 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                    }
                                                                                }
                                                                                scope 78 {
                                                                                    debug __val => _179; // in scope 78 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                }
                                                                                scope 79 {
                                                                                    debug __err => _180; // in scope 79 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                }
                                                                                scope 80 {
                                                                                    debug __value => _182; // in scope 80 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                }
                                                                            }
                                                                            scope 74 {
                                                                                debug __val => _170; // in scope 74 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                            }
                                                                            scope 75 {
                                                                                debug __err => _171; // in scope 75 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                            }
                                                                            scope 76 {
                                                                                debug __value => _173; // in scope 76 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                            }
                                                                        }
                                                                        scope 70 {
                                                                            debug __val => _161; // in scope 70 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                        }
                                                                        scope 71 {
                                                                            debug __err => _162; // in scope 71 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                        }
                                                                        scope 72 {
                                                                            debug __value => _164; // in scope 72 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                        }
                                                                    }
                                                                    scope 66 {
                                                                        debug __val => _152; // in scope 66 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                    }
                                                                    scope 67 {
                                                                        debug __err => _153; // in scope 67 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                    }
                                                                    scope 68 {
                                                                        debug __value => _155; // in scope 68 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                    }
                                                                }
                                                                scope 62 {
                                                                    debug __val => _143; // in scope 62 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                }
                                                                scope 63 {
                                                                    debug __err => _144; // in scope 63 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                }
                                                                scope 64 {
                                                                    debug __value => _146; // in scope 64 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                }
                                                            }
                                                            scope 58 {
                                                                debug __val => _134; // in scope 58 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                            }
                                                            scope 59 {
                                                                debug __err => _135; // in scope 59 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                            }
                                                            scope 60 {
                                                                debug __value => _137; // in scope 60 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                            }
                                                        }
                                                        scope 54 {
                                                            debug __val => _125; // in scope 54 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                        }
                                                        scope 55 {
                                                            debug __err => _126; // in scope 55 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                        }
                                                        scope 56 {
                                                            debug __value => _128; // in scope 56 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                        }
                                                    }
                                                    scope 50 {
                                                        debug __val => _116; // in scope 50 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                    }
                                                    scope 51 {
                                                        debug __err => _117; // in scope 51 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                    }
                                                    scope 52 {
                                                        debug __value => _119; // in scope 52 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                    }
                                                }
                                                scope 46 {
                                                    debug __val => _107; // in scope 46 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                }
                                                scope 47 {
                                                    debug __err => _108; // in scope 47 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                }
                                                scope 48 {
                                                    debug __value => _110; // in scope 48 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                }
                                            }
                                            scope 42 {
                                                debug __val => _98; // in scope 42 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                            }
                                            scope 43 {
                                                debug __err => _99; // in scope 43 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                            }
                                            scope 44 {
                                                debug __value => _101; // in scope 44 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                            }
                                        }
                                        scope 38 {
                                            debug __val => _89; // in scope 38 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                        }
                                        scope 39 {
                                            debug __err => _90; // in scope 39 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                        }
                                        scope 40 {
                                            debug __value => _92; // in scope 40 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                        }
                                    }
                                    scope 34 {
                                        debug __val => _80; // in scope 34 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                    }
                                    scope 35 {
                                        debug __err => _81; // in scope 35 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                    }
                                    scope 36 {
                                        debug __value => _83; // in scope 36 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                    }
                                }
                                scope 30 {
                                    debug __val => _71; // in scope 30 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                }
                                scope 31 {
                                    debug __err => _72; // in scope 31 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                }
                                scope 32 {
                                    debug __value => _74; // in scope 32 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                }
                            }
                            scope 26 {
                                debug __val => _62; // in scope 26 at cita-jsonrpc/src/config.rs:47:21: 47:32
                            }
                            scope 27 {
                                debug __err => _63; // in scope 27 at cita-jsonrpc/src/config.rs:47:21: 47:32
                            }
                            scope 28 {
                                debug __value => _65; // in scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
                            }
                        }
                        scope 22 {
                            debug __val => _53; // in scope 22 at cita-jsonrpc/src/config.rs:47:21: 47:32
                        }
                        scope 23 {
                            debug __err => _54; // in scope 23 at cita-jsonrpc/src/config.rs:47:21: 47:32
                        }
                        scope 24 {
                            debug __value => _56; // in scope 24 at cita-jsonrpc/src/config.rs:47:21: 47:32
                        }
                    }
                    scope 18 {
                        debug __val => _44; // in scope 18 at cita-jsonrpc/src/config.rs:47:21: 47:32
                    }
                    scope 19 {
                        debug __err => _45; // in scope 19 at cita-jsonrpc/src/config.rs:47:21: 47:32
                    }
                    scope 20 {
                        debug __value => _47; // in scope 20 at cita-jsonrpc/src/config.rs:47:21: 47:32
                    }
                }
                scope 14 {
                    debug __val => _35;  // in scope 14 at cita-jsonrpc/src/config.rs:47:21: 47:32
                }
                scope 15 {
                    debug __err => _36;  // in scope 15 at cita-jsonrpc/src/config.rs:47:21: 47:32
                }
                scope 16 {
                    debug __value => _38; // in scope 16 at cita-jsonrpc/src/config.rs:47:21: 47:32
                }
            }
            scope 10 {
                debug __val => _25;      // in scope 10 at cita-jsonrpc/src/config.rs:47:21: 47:32
            }
            scope 11 {
                debug __err => _26;      // in scope 11 at cita-jsonrpc/src/config.rs:47:21: 47:32
            }
            scope 12 {
                debug __value => _28;    // in scope 12 at cita-jsonrpc/src/config.rs:47:21: 47:32
            }
        }
        scope 6 {
            debug __val => _15;          // in scope 6 at cita-jsonrpc/src/config.rs:47:21: 47:32
        }
        scope 7 {
            debug __err => _16;          // in scope 7 at cita-jsonrpc/src/config.rs:47:21: 47:32
        }
        scope 8 {
            debug __value => _18;        // in scope 8 at cita-jsonrpc/src/config.rs:47:21: 47:32
        }
    }
    scope 2 {
        debug __val => _6;               // in scope 2 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
    scope 3 {
        debug __err => _7;               // in scope 3 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
    scope 4 {
        debug __value => _9;             // in scope 4 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb0: {
        _4 = &mut _2;                    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _3 = <__A as SeqAccess<'_>>::next_element::<bool>(_4) -> [return: bb1, unwind: bb231]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:49:5: 49:8
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _7); // scope 3 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb227;                   // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<bool>); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _8 = discriminant(_6);           // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb5: {
        _260 = const _;                  // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[0])) }
        _11 = _260 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _10 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb8, unwind: bb231]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb7: {
        _9 = ((_6 as Some).0: bool);     // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _13 = &mut _2;                   // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _12 = <__A as SeqAccess<'_>>::next_element::<usize>(_13) -> [return: bb9, unwind: bb231]; // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:50:5: 50:8
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<usize>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<usize>}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _10); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb227;                   // scope 0 at no-location
    }

    bb9: {
        _14 = discriminant(_12);         // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _14) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb10: {
        _16 = move ((_12 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _16); // scope 7 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb227;                   // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb12: {
        _15 = ((_12 as Ok).0: std::option::Option<usize>); // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _17 = discriminant(_15);         // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _17) -> [0: bb13, 1: bb15, otherwise: bb14]; // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb13: {
        _261 = const _;                  // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[1])) }
        _20 = _261 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _19 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb16, unwind: bb231]; // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb14: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb15: {
        _18 = ((_15 as Some).0: usize);  // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _23 = &mut _2;                   // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _22 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_23) -> [return: bb17, unwind: bb231]; // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:51:5: 51:8
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<std::string::String>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<std::string::String>}, val: Value(<ZST>) }
    }

    bb16: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _19); // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb227;                   // scope 1 at no-location
    }

    bb17: {
        _24 = discriminant(_22);         // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _24) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb18: {
        _26 = move ((_22 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _26); // scope 11 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb227;                   // scope 5 at no-location
    }

    bb19: {
        unreachable;                     // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb20: {
        _25 = move ((_22 as Ok).0: std::option::Option<std::string::String>); // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _27 = discriminant(_25);         // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _27) -> [0: bb21, 1: bb23, otherwise: bb22]; // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb21: {
        _262 = const _;                  // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[2])) }
        _30 = _262 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _29 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 2_usize, move _30) -> [return: bb24, unwind: bb231]; // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb22: {
        unreachable;                     // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb23: {
        _28 = move ((_25 as Some).0: std::string::String); // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _21 = move _28;                  // scope 12 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _33 = &mut _2;                   // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _32 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_33) -> [return: bb25, unwind: bb230]; // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:52:5: 52:8
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<std::string::String>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<std::string::String>}, val: Value(<ZST>) }
    }

    bb24: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _29); // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb227;                   // scope 5 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb25: {
        _34 = discriminant(_32);         // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _34) -> [0: bb28, 1: bb26, otherwise: bb27]; // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb26: {
        _36 = move ((_32 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _36); // scope 15 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb226;                   // scope 9 at no-location
    }

    bb27: {
        unreachable;                     // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb28: {
        _35 = move ((_32 as Ok).0: std::option::Option<std::string::String>); // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _37 = discriminant(_35);         // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _37) -> [0: bb29, 1: bb31, otherwise: bb30]; // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb29: {
        _263 = const _;                  // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[3])) }
        _40 = _263 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _39 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb32, unwind: bb230]; // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb30: {
        unreachable;                     // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb31: {
        _38 = move ((_35 as Some).0: std::string::String); // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _31 = move _38;                  // scope 16 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _42 = &mut _2;                   // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _41 = <__A as SeqAccess<'_>>::next_element::<usize>(_42) -> [return: bb33, unwind: bb229]; // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:54:5: 54:20
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<usize>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<usize>}, val: Value(<ZST>) }
    }

    bb32: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _39); // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb226;                   // scope 9 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb33: {
        _43 = discriminant(_41);         // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _43) -> [0: bb36, 1: bb34, otherwise: bb35]; // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb34: {
        _45 = move ((_41 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _45); // scope 19 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 13 at no-location
    }

    bb35: {
        unreachable;                     // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb36: {
        _44 = ((_41 as Ok).0: std::option::Option<usize>); // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _46 = discriminant(_44);         // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _46) -> [0: bb37, 1: bb39, otherwise: bb38]; // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb37: {
        _264 = const _;                  // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[4])) }
        _49 = _264 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _48 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb40, unwind: bb229]; // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb38: {
        unreachable;                     // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb39: {
        _47 = ((_44 as Some).0: usize);  // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _51 = &mut _2;                   // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _50 = <__A as SeqAccess<'_>>::next_element::<usize>(_51) -> [return: bb41, unwind: bb229]; // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:55:5: 55:15
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<usize>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<usize>}, val: Value(<ZST>) }
    }

    bb40: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _48); // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 13 at no-location
    }

    bb41: {
        _52 = discriminant(_50);         // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _52) -> [0: bb44, 1: bb42, otherwise: bb43]; // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb42: {
        _54 = move ((_50 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _54); // scope 23 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 17 at no-location
    }

    bb43: {
        unreachable;                     // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb44: {
        _53 = ((_50 as Ok).0: std::option::Option<usize>); // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _55 = discriminant(_53);         // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _55) -> [0: bb45, 1: bb47, otherwise: bb46]; // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb45: {
        _265 = const _;                  // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[5])) }
        _58 = _265 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _57 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb48, unwind: bb229]; // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb46: {
        unreachable;                     // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb47: {
        _56 = ((_53 as Some).0: usize);  // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _60 = &mut _2;                   // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _59 = <__A as SeqAccess<'_>>::next_element::<bool>(_60) -> [return: bb49, unwind: bb229]; // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:56:5: 56:28
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb48: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _57); // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 17 at no-location
    }

    bb49: {
        _61 = discriminant(_59);         // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _61) -> [0: bb52, 1: bb50, otherwise: bb51]; // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb50: {
        _63 = move ((_59 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _63); // scope 27 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 21 at no-location
    }

    bb51: {
        unreachable;                     // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb52: {
        _62 = ((_59 as Ok).0: std::option::Option<bool>); // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _64 = discriminant(_62);         // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _64) -> [0: bb53, 1: bb55, otherwise: bb54]; // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb53: {
        _266 = const _;                  // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[6])) }
        _67 = _266 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _66 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 6_usize, move _67) -> [return: bb56, unwind: bb229]; // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb54: {
        unreachable;                     // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb55: {
        _65 = ((_62 as Some).0: bool);   // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _69 = &mut _2;                   // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _68 = <__A as SeqAccess<'_>>::next_element::<bool>(_69) -> [return: bb57, unwind: bb229]; // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:57:5: 57:22
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb56: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _66); // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 21 at no-location
    }

    bb57: {
        _70 = discriminant(_68);         // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _70) -> [0: bb60, 1: bb58, otherwise: bb59]; // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb58: {
        _72 = move ((_68 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _72); // scope 31 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 25 at no-location
    }

    bb59: {
        unreachable;                     // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb60: {
        _71 = ((_68 as Ok).0: std::option::Option<bool>); // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _73 = discriminant(_71);         // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _73) -> [0: bb61, 1: bb63, otherwise: bb62]; // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb61: {
        _267 = const _;                  // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[7])) }
        _76 = _267 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _75 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 7_usize, move _76) -> [return: bb64, unwind: bb229]; // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb62: {
        unreachable;                     // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb63: {
        _74 = ((_71 as Some).0: bool);   // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _78 = &mut _2;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _77 = <__A as SeqAccess<'_>>::next_element::<usize>(_78) -> [return: bb65, unwind: bb229]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:58:5: 58:23
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<usize>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<usize>}, val: Value(<ZST>) }
    }

    bb64: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _75); // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 25 at no-location
    }

    bb65: {
        _79 = discriminant(_77);         // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _79) -> [0: bb68, 1: bb66, otherwise: bb67]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb66: {
        _81 = move ((_77 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _81); // scope 35 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 29 at no-location
    }

    bb67: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb68: {
        _80 = ((_77 as Ok).0: std::option::Option<usize>); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _82 = discriminant(_80);         // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _82) -> [0: bb69, 1: bb71, otherwise: bb70]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb69: {
        _268 = const _;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[8])) }
        _85 = _268 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _84 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 8_usize, move _85) -> [return: bb72, unwind: bb229]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb70: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb71: {
        _83 = ((_80 as Some).0: usize);  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _87 = &mut _2;                   // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _86 = <__A as SeqAccess<'_>>::next_element::<bool>(_87) -> [return: bb73, unwind: bb229]; // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:59:5: 59:19
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb72: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _84); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 29 at no-location
    }

    bb73: {
        _88 = discriminant(_86);         // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _88) -> [0: bb76, 1: bb74, otherwise: bb75]; // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb74: {
        _90 = move ((_86 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _90); // scope 39 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 33 at no-location
    }

    bb75: {
        unreachable;                     // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb76: {
        _89 = ((_86 as Ok).0: std::option::Option<bool>); // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _91 = discriminant(_89);         // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _91) -> [0: bb77, 1: bb79, otherwise: bb78]; // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb77: {
        _269 = const _;                  // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[9])) }
        _94 = _269 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _93 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 9_usize, move _94) -> [return: bb80, unwind: bb229]; // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb78: {
        unreachable;                     // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb79: {
        _92 = ((_89 as Some).0: bool);   // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _96 = &mut _2;                   // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _95 = <__A as SeqAccess<'_>>::next_element::<usize>(_96) -> [return: bb81, unwind: bb229]; // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:60:5: 60:18
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<usize>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<usize>}, val: Value(<ZST>) }
    }

    bb80: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _93); // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 33 at no-location
    }

    bb81: {
        _97 = discriminant(_95);         // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _97) -> [0: bb84, 1: bb82, otherwise: bb83]; // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb82: {
        _99 = move ((_95 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _99); // scope 43 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 37 at no-location
    }

    bb83: {
        unreachable;                     // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb84: {
        _98 = ((_95 as Ok).0: std::option::Option<usize>); // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _100 = discriminant(_98);        // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _100) -> [0: bb85, 1: bb87, otherwise: bb86]; // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb85: {
        _270 = const _;                  // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[10])) }
        _103 = _270 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _102 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 10_usize, move _103) -> [return: bb88, unwind: bb229]; // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb86: {
        unreachable;                     // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb87: {
        _101 = ((_98 as Some).0: usize); // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _105 = &mut _2;                  // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _104 = <__A as SeqAccess<'_>>::next_element::<usize>(_105) -> [return: bb89, unwind: bb229]; // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:61:5: 61:23
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<usize>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<usize>}, val: Value(<ZST>) }
    }

    bb88: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _102); // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 37 at no-location
    }

    bb89: {
        _106 = discriminant(_104);       // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _106) -> [0: bb92, 1: bb90, otherwise: bb91]; // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb90: {
        _108 = move ((_104 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _108); // scope 47 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 41 at no-location
    }

    bb91: {
        unreachable;                     // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb92: {
        _107 = ((_104 as Ok).0: std::option::Option<usize>); // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _109 = discriminant(_107);       // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _109) -> [0: bb93, 1: bb95, otherwise: bb94]; // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb93: {
        _271 = const _;                  // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[11])) }
        _112 = _271 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _111 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 11_usize, move _112) -> [return: bb96, unwind: bb229]; // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb94: {
        unreachable;                     // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb95: {
        _110 = ((_107 as Some).0: usize); // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _114 = &mut _2;                  // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _113 = <__A as SeqAccess<'_>>::next_element::<bool>(_114) -> [return: bb97, unwind: bb229]; // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:62:5: 62:19
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb96: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _111); // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 41 at no-location
    }

    bb97: {
        _115 = discriminant(_113);       // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _115) -> [0: bb100, 1: bb98, otherwise: bb99]; // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb98: {
        _117 = move ((_113 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _117); // scope 51 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 45 at no-location
    }

    bb99: {
        unreachable;                     // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb100: {
        _116 = ((_113 as Ok).0: std::option::Option<bool>); // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _118 = discriminant(_116);       // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _118) -> [0: bb101, 1: bb103, otherwise: bb102]; // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb101: {
        _272 = const _;                  // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[12])) }
        _121 = _272 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _120 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 12_usize, move _121) -> [return: bb104, unwind: bb229]; // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb102: {
        unreachable;                     // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb103: {
        _119 = ((_116 as Some).0: bool); // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _123 = &mut _2;                  // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _122 = <__A as SeqAccess<'_>>::next_element::<usize>(_123) -> [return: bb105, unwind: bb229]; // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:63:5: 63:24
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<usize>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<usize>}, val: Value(<ZST>) }
    }

    bb104: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _120); // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 45 at no-location
    }

    bb105: {
        _124 = discriminant(_122);       // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _124) -> [0: bb108, 1: bb106, otherwise: bb107]; // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb106: {
        _126 = move ((_122 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _126); // scope 55 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 49 at no-location
    }

    bb107: {
        unreachable;                     // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb108: {
        _125 = ((_122 as Ok).0: std::option::Option<usize>); // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _127 = discriminant(_125);       // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _127) -> [0: bb109, 1: bb111, otherwise: bb110]; // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb109: {
        _273 = const _;                  // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[13])) }
        _130 = _273 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _129 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 13_usize, move _130) -> [return: bb112, unwind: bb229]; // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb110: {
        unreachable;                     // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb111: {
        _128 = ((_125 as Some).0: usize); // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _132 = &mut _2;                  // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _131 = <__A as SeqAccess<'_>>::next_element::<bool>(_132) -> [return: bb113, unwind: bb229]; // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:64:5: 64:20
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb112: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _129); // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 49 at no-location
    }

    bb113: {
        _133 = discriminant(_131);       // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _133) -> [0: bb116, 1: bb114, otherwise: bb115]; // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb114: {
        _135 = move ((_131 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _135); // scope 59 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 53 at no-location
    }

    bb115: {
        unreachable;                     // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb116: {
        _134 = ((_131 as Ok).0: std::option::Option<bool>); // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _136 = discriminant(_134);       // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _136) -> [0: bb117, 1: bb119, otherwise: bb118]; // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb117: {
        _274 = const _;                  // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[14])) }
        _139 = _274 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _138 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 14_usize, move _139) -> [return: bb120, unwind: bb229]; // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb118: {
        unreachable;                     // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb119: {
        _137 = ((_134 as Some).0: bool); // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _141 = &mut _2;                  // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _140 = <__A as SeqAccess<'_>>::next_element::<bool>(_141) -> [return: bb121, unwind: bb229]; // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:65:5: 65:22
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb120: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _138); // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 53 at no-location
    }

    bb121: {
        _142 = discriminant(_140);       // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _142) -> [0: bb124, 1: bb122, otherwise: bb123]; // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb122: {
        _144 = move ((_140 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _144); // scope 63 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 57 at no-location
    }

    bb123: {
        unreachable;                     // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb124: {
        _143 = ((_140 as Ok).0: std::option::Option<bool>); // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _145 = discriminant(_143);       // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _145) -> [0: bb125, 1: bb127, otherwise: bb126]; // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb125: {
        _275 = const _;                  // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[15])) }
        _148 = _275 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _147 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 15_usize, move _148) -> [return: bb128, unwind: bb229]; // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb126: {
        unreachable;                     // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb127: {
        _146 = ((_143 as Some).0: bool); // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _150 = &mut _2;                  // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _149 = <__A as SeqAccess<'_>>::next_element::<bool>(_150) -> [return: bb129, unwind: bb229]; // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:66:5: 66:22
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb128: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _147); // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 57 at no-location
    }

    bb129: {
        _151 = discriminant(_149);       // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _151) -> [0: bb132, 1: bb130, otherwise: bb131]; // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb130: {
        _153 = move ((_149 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _153); // scope 67 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 61 at no-location
    }

    bb131: {
        unreachable;                     // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb132: {
        _152 = ((_149 as Ok).0: std::option::Option<bool>); // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _154 = discriminant(_152);       // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _154) -> [0: bb133, 1: bb135, otherwise: bb134]; // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb133: {
        _276 = const _;                  // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[16])) }
        _157 = _276 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _156 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 16_usize, move _157) -> [return: bb136, unwind: bb229]; // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb134: {
        unreachable;                     // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb135: {
        _155 = ((_152 as Some).0: bool); // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _159 = &mut _2;                  // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _158 = <__A as SeqAccess<'_>>::next_element::<bool>(_159) -> [return: bb137, unwind: bb229]; // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:67:5: 67:22
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb136: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _156); // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 61 at no-location
    }

    bb137: {
        _160 = discriminant(_158);       // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _160) -> [0: bb140, 1: bb138, otherwise: bb139]; // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb138: {
        _162 = move ((_158 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _162); // scope 71 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 65 at no-location
    }

    bb139: {
        unreachable;                     // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb140: {
        _161 = ((_158 as Ok).0: std::option::Option<bool>); // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _163 = discriminant(_161);       // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _163) -> [0: bb141, 1: bb143, otherwise: bb142]; // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb141: {
        _277 = const _;                  // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[17])) }
        _166 = _277 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _165 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 17_usize, move _166) -> [return: bb144, unwind: bb229]; // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb142: {
        unreachable;                     // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb143: {
        _164 = ((_161 as Some).0: bool); // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _168 = &mut _2;                  // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _167 = <__A as SeqAccess<'_>>::next_element::<bool>(_168) -> [return: bb145, unwind: bb229]; // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:68:5: 68:22
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb144: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _165); // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 65 at no-location
    }

    bb145: {
        _169 = discriminant(_167);       // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _169) -> [0: bb148, 1: bb146, otherwise: bb147]; // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb146: {
        _171 = move ((_167 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _171); // scope 75 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 69 at no-location
    }

    bb147: {
        unreachable;                     // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb148: {
        _170 = ((_167 as Ok).0: std::option::Option<bool>); // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _172 = discriminant(_170);       // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _172) -> [0: bb149, 1: bb151, otherwise: bb150]; // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb149: {
        _278 = const _;                  // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[18])) }
        _175 = _278 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _174 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 18_usize, move _175) -> [return: bb152, unwind: bb229]; // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb150: {
        unreachable;                     // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb151: {
        _173 = ((_170 as Some).0: bool); // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _177 = &mut _2;                  // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _176 = <__A as SeqAccess<'_>>::next_element::<bool>(_177) -> [return: bb153, unwind: bb229]; // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:69:5: 69:19
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb152: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _174); // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 69 at no-location
    }

    bb153: {
        _178 = discriminant(_176);       // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _178) -> [0: bb156, 1: bb154, otherwise: bb155]; // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb154: {
        _180 = move ((_176 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _180); // scope 79 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 73 at no-location
    }

    bb155: {
        unreachable;                     // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb156: {
        _179 = ((_176 as Ok).0: std::option::Option<bool>); // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _181 = discriminant(_179);       // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _181) -> [0: bb157, 1: bb159, otherwise: bb158]; // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb157: {
        _279 = const _;                  // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[19])) }
        _184 = _279 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _183 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 19_usize, move _184) -> [return: bb160, unwind: bb229]; // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb158: {
        unreachable;                     // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb159: {
        _182 = ((_179 as Some).0: bool); // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _186 = &mut _2;                  // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _185 = <__A as SeqAccess<'_>>::next_element::<bool>(_186) -> [return: bb161, unwind: bb229]; // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:70:5: 70:16
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb160: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _183); // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 73 at no-location
    }

    bb161: {
        _187 = discriminant(_185);       // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _187) -> [0: bb164, 1: bb162, otherwise: bb163]; // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb162: {
        _189 = move ((_185 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _189); // scope 83 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 77 at no-location
    }

    bb163: {
        unreachable;                     // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb164: {
        _188 = ((_185 as Ok).0: std::option::Option<bool>); // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _190 = discriminant(_188);       // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _190) -> [0: bb165, 1: bb167, otherwise: bb166]; // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb165: {
        _280 = const _;                  // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[20])) }
        _193 = _280 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _192 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 20_usize, move _193) -> [return: bb168, unwind: bb229]; // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb166: {
        unreachable;                     // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb167: {
        _191 = ((_188 as Some).0: bool); // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _195 = &mut _2;                  // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _194 = <__A as SeqAccess<'_>>::next_element::<bool>(_195) -> [return: bb169, unwind: bb229]; // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:71:5: 71:21
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb168: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _192); // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 77 at no-location
    }

    bb169: {
        _196 = discriminant(_194);       // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _196) -> [0: bb172, 1: bb170, otherwise: bb171]; // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb170: {
        _198 = move ((_194 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _198); // scope 87 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 81 at no-location
    }

    bb171: {
        unreachable;                     // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb172: {
        _197 = ((_194 as Ok).0: std::option::Option<bool>); // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _199 = discriminant(_197);       // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _199) -> [0: bb173, 1: bb175, otherwise: bb174]; // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb173: {
        _281 = const _;                  // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[21])) }
        _202 = _281 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _201 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 21_usize, move _202) -> [return: bb176, unwind: bb229]; // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb174: {
        unreachable;                     // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb175: {
        _200 = ((_197 as Some).0: bool); // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _204 = &mut _2;                  // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _203 = <__A as SeqAccess<'_>>::next_element::<bool>(_204) -> [return: bb177, unwind: bb229]; // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:72:5: 72:26
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb176: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _201); // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 81 at no-location
    }

    bb177: {
        _205 = discriminant(_203);       // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _205) -> [0: bb180, 1: bb178, otherwise: bb179]; // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb178: {
        _207 = move ((_203 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _207); // scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 85 at no-location
    }

    bb179: {
        unreachable;                     // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb180: {
        _206 = ((_203 as Ok).0: std::option::Option<bool>); // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _208 = discriminant(_206);       // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _208) -> [0: bb181, 1: bb183, otherwise: bb182]; // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb181: {
        _282 = const _;                  // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[22])) }
        _211 = _282 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _210 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 22_usize, move _211) -> [return: bb184, unwind: bb229]; // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb182: {
        unreachable;                     // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb183: {
        _209 = ((_206 as Some).0: bool); // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _213 = &mut _2;                  // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _212 = <__A as SeqAccess<'_>>::next_element::<bool>(_213) -> [return: bb185, unwind: bb229]; // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:73:5: 73:19
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb184: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _210); // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 85 at no-location
    }

    bb185: {
        _214 = discriminant(_212);       // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _214) -> [0: bb188, 1: bb186, otherwise: bb187]; // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb186: {
        _216 = move ((_212 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _216); // scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 89 at no-location
    }

    bb187: {
        unreachable;                     // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb188: {
        _215 = ((_212 as Ok).0: std::option::Option<bool>); // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _217 = discriminant(_215);       // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _217) -> [0: bb189, 1: bb191, otherwise: bb190]; // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb189: {
        _283 = const _;                  // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[23])) }
        _220 = _283 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _219 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 23_usize, move _220) -> [return: bb192, unwind: bb229]; // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb190: {
        unreachable;                     // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb191: {
        _218 = ((_215 as Some).0: bool); // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _222 = &mut _2;                  // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _221 = <__A as SeqAccess<'_>>::next_element::<bool>(_222) -> [return: bb193, unwind: bb229]; // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:74:5: 74:15
                                         // + user_ty: UserType(24)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb192: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _219); // scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 89 at no-location
    }

    bb193: {
        _223 = discriminant(_221);       // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _223) -> [0: bb196, 1: bb194, otherwise: bb195]; // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb194: {
        _225 = move ((_221 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _225); // scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 93 at no-location
    }

    bb195: {
        unreachable;                     // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb196: {
        _224 = ((_221 as Ok).0: std::option::Option<bool>); // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _226 = discriminant(_224);       // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _226) -> [0: bb197, 1: bb199, otherwise: bb198]; // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb197: {
        _284 = const _;                  // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[24])) }
        _229 = _284 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _228 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 24_usize, move _229) -> [return: bb200, unwind: bb229]; // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb198: {
        unreachable;                     // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb199: {
        _227 = ((_224 as Some).0: bool); // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _231 = &mut _2;                  // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _230 = <__A as SeqAccess<'_>>::next_element::<bool>(_231) -> [return: bb201, unwind: bb229]; // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:75:5: 75:18
                                         // + user_ty: UserType(25)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb200: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _228); // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 93 at no-location
    }

    bb201: {
        _232 = discriminant(_230);       // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _232) -> [0: bb204, 1: bb202, otherwise: bb203]; // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb202: {
        _234 = move ((_230 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _234); // scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 97 at no-location
    }

    bb203: {
        unreachable;                     // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb204: {
        _233 = ((_230 as Ok).0: std::option::Option<bool>); // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _235 = discriminant(_233);       // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _235) -> [0: bb205, 1: bb207, otherwise: bb206]; // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb205: {
        _285 = const _;                  // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[25])) }
        _238 = _285 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _237 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 25_usize, move _238) -> [return: bb208, unwind: bb229]; // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb206: {
        unreachable;                     // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb207: {
        _236 = ((_233 as Some).0: bool); // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _240 = &mut _2;                  // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _239 = <__A as SeqAccess<'_>>::next_element::<bool>(_240) -> [return: bb209, unwind: bb229]; // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:76:5: 76:19
                                         // + user_ty: UserType(26)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb208: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _237); // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 97 at no-location
    }

    bb209: {
        _241 = discriminant(_239);       // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _241) -> [0: bb212, 1: bb210, otherwise: bb211]; // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb210: {
        _243 = move ((_239 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _243); // scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 101 at no-location
    }

    bb211: {
        unreachable;                     // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb212: {
        _242 = ((_239 as Ok).0: std::option::Option<bool>); // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _244 = discriminant(_242);       // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _244) -> [0: bb213, 1: bb215, otherwise: bb214]; // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb213: {
        _286 = const _;                  // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[26])) }
        _247 = _286 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _246 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 26_usize, move _247) -> [return: bb216, unwind: bb229]; // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb214: {
        unreachable;                     // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb215: {
        _245 = ((_242 as Some).0: bool); // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _249 = &mut _2;                  // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _248 = <__A as SeqAccess<'_>>::next_element::<bool>(_249) -> [return: bb217, unwind: bb229]; // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:77:5: 77:16
                                         // + user_ty: UserType(27)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb216: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _246); // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 101 at no-location
    }

    bb217: {
        _250 = discriminant(_248);       // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _250) -> [0: bb220, 1: bb218, otherwise: bb219]; // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb218: {
        _252 = move ((_248 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _252); // scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 105 at no-location
    }

    bb219: {
        unreachable;                     // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb220: {
        _251 = ((_248 as Ok).0: std::option::Option<bool>); // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _253 = discriminant(_251);       // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _253) -> [0: bb221, 1: bb223, otherwise: bb222]; // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb221: {
        _287 = const _;                  // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[27])) }
        _256 = _287 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _255 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 27_usize, move _256) -> [return: bb224, unwind: bb229]; // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb222: {
        unreachable;                     // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb223: {
        _254 = ((_251 as Some).0: bool); // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _258 = move _21;                 // scope 109 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _259 = move _31;                 // scope 109 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _257 = WsConfig { enable: _9, thread_number: _18, listen_ip: move _258, listen_port: move _259, max_connections: _47, queue_size: _56, panic_on_new_connection: _65, panic_on_shutdown: _74, fragments_capacity: _83, fragments_grow: _92, fragment_size: _101, in_buffer_capacity: _110, in_buffer_grow: _119, out_buffer_capacity: _128, out_buffer_grow: _137, panic_on_internal: _146, panic_on_capacity: _155, panic_on_protocol: _164, panic_on_encoding: _173, panic_on_queue: _182, panic_on_io: _191, panic_on_timeout: _200, shutdown_on_interrupt: _209, masking_strict: _218, key_strict: _227, method_strict: _236, encrypt_server: _245, tcp_nodelay: _254 }; // scope 109 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Ok(move _257); // scope 109 at cita-jsonrpc/src/config.rs:47:21: 47:32
        drop(_2) -> bb228;               // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb224: {
        _0 = Result::<WsConfig, <__A as SeqAccess<'_>>::Error>::Err(move _255); // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb225;                   // scope 105 at no-location
    }

    bb225: {
        drop(_31) -> [return: bb226, unwind: bb230]; // scope 9 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb226: {
        drop(_21) -> [return: bb227, unwind: bb231]; // scope 5 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb227: {
        drop(_2) -> bb228;               // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb228: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:32: 47:32
    }

    bb229 (cleanup): {
        drop(_31) -> bb230;              // scope 9 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb230 (cleanup): {
        drop(_21) -> bb231;              // scope 5 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb231 (cleanup): {
        drop(_2) -> bb232;               // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb232 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[2] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[3] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[4] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[5] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[6] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[7] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[8] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[9] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[10] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[11] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[12] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[13] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[14] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[15] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[16] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[17] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[18] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[19] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[20] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[21] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[22] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[23] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[24] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[25] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[26] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[27] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = const "struct WsConfig with 28 elements"; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

fn _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::visit_map(_1: _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor<'_>, _2: __A) -> Result<WsConfig, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<WsConfig>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    debug __map => _2;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _0: std::result::Result<config::WsConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _3: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _31: std::result::Result<std::option::Option<config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _32: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _33: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _36: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _38: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _39: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _40: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _41: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _42: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _43: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _44: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _45: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _48: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _49: &std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _50: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _51: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _52: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _53: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _54: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _57: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _58: &std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _59: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _60: std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _61: std::result::Result<std::string::String, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _62: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _63: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _66: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _67: &std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _68: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _69: std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _70: std::result::Result<std::string::String, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _71: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _72: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _75: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _76: &std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _77: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _78: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _79: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _80: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _81: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _84: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _85: &std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _86: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _87: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _88: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _89: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _90: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _93: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _94: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _95: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _96: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _97: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _98: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _99: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _102: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _103: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _104: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _105: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _106: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _107: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _108: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _111: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _112: &std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _113: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _114: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _115: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _116: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _117: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _120: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _121: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _122: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _123: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _124: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _125: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _126: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _129: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _130: &std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _131: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _132: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _133: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _134: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _135: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _138: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _139: &std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _140: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _141: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _142: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _143: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _144: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _147: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _148: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _149: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _150: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _151: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _152: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _153: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _156: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _157: &std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _158: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _159: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _160: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _161: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _162: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _165: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _166: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _167: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _168: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _169: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _170: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _171: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _174: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _175: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _176: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _177: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _178: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _179: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _180: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _183: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _184: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _185: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _186: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _187: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _188: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _189: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _192: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _193: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _194: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _195: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _196: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _197: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _198: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _201: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _202: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _203: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _204: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _205: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _206: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _207: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _210: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _211: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _212: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _213: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _214: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _215: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _216: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _219: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _220: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _221: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _222: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _223: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _224: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _225: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _228: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _229: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _230: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _231: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _232: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _233: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _234: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _237: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _238: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _239: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _240: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _241: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _242: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _243: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _246: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _247: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _248: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _249: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _250: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _251: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _252: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _255: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _256: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _257: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _258: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _259: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _260: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _261: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _264: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _265: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _266: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _267: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _268: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _269: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _270: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _273: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _274: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _275: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _276: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _277: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _278: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _279: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _282: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _283: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _284: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _285: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _286: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _287: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _288: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _291: std::result::Result<config::_IMPL_SERIALIZE_FOR_Config::_serde::de::IgnoredAny, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _292: &mut __A;              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _293: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _296: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _298: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _299: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _303: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _305: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _306: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _310: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _312: std::result::Result<std::string::String, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _313: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _317: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _319: std::result::Result<std::string::String, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _320: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _324: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _326: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _327: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _331: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _333: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _334: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _338: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _340: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _341: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _345: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _347: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _348: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _352: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _354: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _355: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _359: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _361: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _362: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _366: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _368: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _369: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _373: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _375: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _376: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _380: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _382: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _383: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _387: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _389: std::result::Result<usize, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _390: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _394: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _396: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _397: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _401: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _403: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _404: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _408: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _410: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _411: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _415: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _417: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _418: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _422: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _424: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _425: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _429: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _431: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _432: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _436: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _438: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _439: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _443: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _445: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _446: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _450: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _452: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _453: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _457: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _459: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _460: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _464: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _466: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _467: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _471: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _473: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _474: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _478: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _480: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _481: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _485: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _487: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _488: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _491: config::WsConfig;      // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _492: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _493: usize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _494: std::string::String;   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _495: std::string::String;   // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _496: usize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _497: usize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _498: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _499: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _500: usize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _501: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _502: usize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _503: usize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _504: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _505: usize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _506: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _507: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _508: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _509: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _510: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _511: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _512: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _513: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _514: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _515: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _516: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _517: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _518: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _519: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _520: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    let mut _521: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    let mut _522: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    let mut _523: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    let mut _524: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    let mut _525: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    scope 1 {
        debug __field0 => _3;            // in scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        let mut _4: std::option::Option<usize>; // in scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        scope 2 {
            debug __field1 => _4;        // in scope 2 at cita-jsonrpc/src/config.rs:47:21: 47:32
            let mut _5: std::option::Option<std::string::String>; // in scope 2 at cita-jsonrpc/src/config.rs:47:21: 47:32
            scope 3 {
                debug __field2 => _5;    // in scope 3 at cita-jsonrpc/src/config.rs:47:21: 47:32
                let mut _6: std::option::Option<std::string::String>; // in scope 3 at cita-jsonrpc/src/config.rs:47:21: 47:32
                scope 4 {
                    debug __field3 => _6; // in scope 4 at cita-jsonrpc/src/config.rs:47:21: 47:32
                    let mut _7: std::option::Option<usize>; // in scope 4 at cita-jsonrpc/src/config.rs:47:21: 47:32
                    scope 5 {
                        debug __field4 => _7; // in scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
                        let mut _8: std::option::Option<usize>; // in scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
                        scope 6 {
                            debug __field5 => _8; // in scope 6 at cita-jsonrpc/src/config.rs:47:21: 47:32
                            let mut _9: std::option::Option<bool>; // in scope 6 at cita-jsonrpc/src/config.rs:47:21: 47:32
                            scope 7 {
                                debug __field6 => _9; // in scope 7 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                let mut _10: std::option::Option<bool>; // in scope 7 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                scope 8 {
                                    debug __field7 => _10; // in scope 8 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                    let mut _11: std::option::Option<usize>; // in scope 8 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                    scope 9 {
                                        debug __field8 => _11; // in scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                        let mut _12: std::option::Option<bool>; // in scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                        scope 10 {
                                            debug __field9 => _12; // in scope 10 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                            let mut _13: std::option::Option<usize>; // in scope 10 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                            scope 11 {
                                                debug __field10 => _13; // in scope 11 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                let mut _14: std::option::Option<usize>; // in scope 11 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                scope 12 {
                                                    debug __field11 => _14; // in scope 12 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                    let mut _15: std::option::Option<bool>; // in scope 12 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                    scope 13 {
                                                        debug __field12 => _15; // in scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                        let mut _16: std::option::Option<usize>; // in scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                        scope 14 {
                                                            debug __field13 => _16; // in scope 14 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                            let mut _17: std::option::Option<bool>; // in scope 14 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                            scope 15 {
                                                                debug __field14 => _17; // in scope 15 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                let mut _18: std::option::Option<bool>; // in scope 15 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                scope 16 {
                                                                    debug __field15 => _18; // in scope 16 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                    let mut _19: std::option::Option<bool>; // in scope 16 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                    scope 17 {
                                                                        debug __field16 => _19; // in scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                        let mut _20: std::option::Option<bool>; // in scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                        scope 18 {
                                                                            debug __field17 => _20; // in scope 18 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                            let mut _21: std::option::Option<bool>; // in scope 18 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                            scope 19 {
                                                                                debug __field18 => _21; // in scope 19 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                let mut _22: std::option::Option<bool>; // in scope 19 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                scope 20 {
                                                                                    debug __field19 => _22; // in scope 20 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                    let mut _23: std::option::Option<bool>; // in scope 20 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                    scope 21 {
                                                                                        debug __field20 => _23; // in scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                        let mut _24: std::option::Option<bool>; // in scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                        scope 22 {
                                                                                            debug __field21 => _24; // in scope 22 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                            let mut _25: std::option::Option<bool>; // in scope 22 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                            scope 23 {
                                                                                                debug __field22 => _25; // in scope 23 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                let mut _26: std::option::Option<bool>; // in scope 23 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                scope 24 {
                                                                                                    debug __field23 => _26; // in scope 24 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                    let mut _27: std::option::Option<bool>; // in scope 24 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                    scope 25 {
                                                                                                        debug __field24 => _27; // in scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                        let mut _28: std::option::Option<bool>; // in scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                        scope 26 {
                                                                                                            debug __field25 => _28; // in scope 26 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                            let mut _29: std::option::Option<bool>; // in scope 26 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                            scope 27 {
                                                                                                                debug __field26 => _29; // in scope 27 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                let mut _30: std::option::Option<bool>; // in scope 27 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                scope 28 {
                                                                                                                    debug __field27 => _30; // in scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                    let _295: bool; // in scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                    let _297: bool; // in scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                    let _300: bool; // in scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                    let _301: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                    scope 29 {
                                                                                                                        debug __key => _37; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _34: std::option::Option<config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field>; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _35: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _37: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _46: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _47: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _55: usize; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _56: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _64: std::string::String; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _65: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _73: std::string::String; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _74: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _82: usize; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _83: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _91: usize; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _92: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _100: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _101: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _109: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _110: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _118: usize; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _119: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _127: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _128: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _136: usize; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _137: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _145: usize; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _146: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _154: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _155: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _163: usize; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _164: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _172: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _173: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _181: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _182: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _190: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _191: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _199: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _200: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _208: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _209: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _217: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _218: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _226: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _227: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _235: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _236: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _244: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _245: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _253: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _254: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _262: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _263: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _271: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _272: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _280: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _281: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _289: bool; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _290: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _294: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        scope 30 {
                                                                                                                            debug __val => _34; // in scope 30 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 31 {
                                                                                                                            debug __err => _35; // in scope 31 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 32 {
                                                                                                                            debug __val => _46; // in scope 32 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 33 {
                                                                                                                            debug __err => _47; // in scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 34 {
                                                                                                                            debug __val => _55; // in scope 34 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 35 {
                                                                                                                            debug __err => _56; // in scope 35 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 36 {
                                                                                                                            debug __val => _64; // in scope 36 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 37 {
                                                                                                                            debug __err => _65; // in scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 38 {
                                                                                                                            debug __val => _73; // in scope 38 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 39 {
                                                                                                                            debug __err => _74; // in scope 39 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 40 {
                                                                                                                            debug __val => _82; // in scope 40 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 41 {
                                                                                                                            debug __err => _83; // in scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 42 {
                                                                                                                            debug __val => _91; // in scope 42 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 43 {
                                                                                                                            debug __err => _92; // in scope 43 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 44 {
                                                                                                                            debug __val => _100; // in scope 44 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 45 {
                                                                                                                            debug __err => _101; // in scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 46 {
                                                                                                                            debug __val => _109; // in scope 46 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 47 {
                                                                                                                            debug __err => _110; // in scope 47 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 48 {
                                                                                                                            debug __val => _118; // in scope 48 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 49 {
                                                                                                                            debug __err => _119; // in scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 50 {
                                                                                                                            debug __val => _127; // in scope 50 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 51 {
                                                                                                                            debug __err => _128; // in scope 51 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 52 {
                                                                                                                            debug __val => _136; // in scope 52 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 53 {
                                                                                                                            debug __err => _137; // in scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 54 {
                                                                                                                            debug __val => _145; // in scope 54 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 55 {
                                                                                                                            debug __err => _146; // in scope 55 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 56 {
                                                                                                                            debug __val => _154; // in scope 56 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 57 {
                                                                                                                            debug __err => _155; // in scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 58 {
                                                                                                                            debug __val => _163; // in scope 58 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 59 {
                                                                                                                            debug __err => _164; // in scope 59 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 60 {
                                                                                                                            debug __val => _172; // in scope 60 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 61 {
                                                                                                                            debug __err => _173; // in scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 62 {
                                                                                                                            debug __val => _181; // in scope 62 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 63 {
                                                                                                                            debug __err => _182; // in scope 63 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 64 {
                                                                                                                            debug __val => _190; // in scope 64 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 65 {
                                                                                                                            debug __err => _191; // in scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 66 {
                                                                                                                            debug __val => _199; // in scope 66 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 67 {
                                                                                                                            debug __err => _200; // in scope 67 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 68 {
                                                                                                                            debug __val => _208; // in scope 68 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 69 {
                                                                                                                            debug __err => _209; // in scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 70 {
                                                                                                                            debug __val => _217; // in scope 70 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 71 {
                                                                                                                            debug __err => _218; // in scope 71 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 72 {
                                                                                                                            debug __val => _226; // in scope 72 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 73 {
                                                                                                                            debug __err => _227; // in scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 74 {
                                                                                                                            debug __val => _235; // in scope 74 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 75 {
                                                                                                                            debug __err => _236; // in scope 75 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 76 {
                                                                                                                            debug __val => _244; // in scope 76 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 77 {
                                                                                                                            debug __err => _245; // in scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 78 {
                                                                                                                            debug __val => _253; // in scope 78 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 79 {
                                                                                                                            debug __err => _254; // in scope 79 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 80 {
                                                                                                                            debug __val => _262; // in scope 80 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 81 {
                                                                                                                            debug __err => _263; // in scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 82 {
                                                                                                                            debug __val => _271; // in scope 82 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 83 {
                                                                                                                            debug __err => _272; // in scope 83 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 84 {
                                                                                                                            debug __val => _280; // in scope 84 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 85 {
                                                                                                                            debug __err => _281; // in scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 86 {
                                                                                                                            debug __val => _289; // in scope 86 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 87 {
                                                                                                                            debug __err => _290; // in scope 87 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 88 {
                                                                                                                        }
                                                                                                                        scope 89 {
                                                                                                                            debug __val => const IgnoredAny; // in scope 89 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 90 {
                                                                                                                            debug __err => _294; // in scope 90 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 91 {
                                                                                                                        debug __field0 => _295; // in scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _302: usize; // in scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _304: usize; // in scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _307: usize; // in scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        let _308: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        scope 95 {
                                                                                                                            debug __field1 => _302; // in scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                            let _309: std::string::String; // in scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                            let _311: std::string::String; // in scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                            let _314: std::string::String; // in scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                            let _315: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                            scope 99 {
                                                                                                                                debug __field2 => _309; // in scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                let _316: std::string::String; // in scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                let _318: std::string::String; // in scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                let _321: std::string::String; // in scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                let _322: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                scope 103 {
                                                                                                                                    debug __field3 => _316; // in scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                    let _323: usize; // in scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                    let _325: usize; // in scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                    let _328: usize; // in scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                    let _329: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                    scope 107 {
                                                                                                                                        debug __field4 => _323; // in scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                        let _330: usize; // in scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                        let _332: usize; // in scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                        let _335: usize; // in scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                        let _336: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                        scope 111 {
                                                                                                                                            debug __field5 => _330; // in scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                            let _337: bool; // in scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                            let _339: bool; // in scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                            let _342: bool; // in scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                            let _343: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                            scope 115 {
                                                                                                                                                debug __field6 => _337; // in scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                let _344: bool; // in scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                let _346: bool; // in scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                let _349: bool; // in scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                let _350: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                scope 119 {
                                                                                                                                                    debug __field7 => _344; // in scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                    let _351: usize; // in scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                    let _353: usize; // in scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                    let _356: usize; // in scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                    let _357: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                    scope 123 {
                                                                                                                                                        debug __field8 => _351; // in scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                        let _358: bool; // in scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                        let _360: bool; // in scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                        let _363: bool; // in scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                        let _364: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                        scope 127 {
                                                                                                                                                            debug __field9 => _358; // in scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                            let _365: usize; // in scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                            let _367: usize; // in scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                            let _370: usize; // in scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                            let _371: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                            scope 131 {
                                                                                                                                                                debug __field10 => _365; // in scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                let _372: usize; // in scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                let _374: usize; // in scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                let _377: usize; // in scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                let _378: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                scope 135 {
                                                                                                                                                                    debug __field11 => _372; // in scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                    let _379: bool; // in scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                    let _381: bool; // in scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                    let _384: bool; // in scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                    let _385: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                    scope 139 {
                                                                                                                                                                        debug __field12 => _379; // in scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                        let _386: usize; // in scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                        let _388: usize; // in scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                        let _391: usize; // in scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                        let _392: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                        scope 143 {
                                                                                                                                                                            debug __field13 => _386; // in scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                            let _393: bool; // in scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                            let _395: bool; // in scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                            let _398: bool; // in scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                            let _399: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                            scope 147 {
                                                                                                                                                                                debug __field14 => _393; // in scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                let _400: bool; // in scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                let _402: bool; // in scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                let _405: bool; // in scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                let _406: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                scope 151 {
                                                                                                                                                                                    debug __field15 => _400; // in scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                    let _407: bool; // in scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                    let _409: bool; // in scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                    let _412: bool; // in scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                    let _413: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                    scope 155 {
                                                                                                                                                                                        debug __field16 => _407; // in scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                        let _414: bool; // in scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                        let _416: bool; // in scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                        let _419: bool; // in scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                        let _420: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                        scope 159 {
                                                                                                                                                                                            debug __field17 => _414; // in scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                            let _421: bool; // in scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                            let _423: bool; // in scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                            let _426: bool; // in scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                            let _427: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                            scope 163 {
                                                                                                                                                                                                debug __field18 => _421; // in scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                let _428: bool; // in scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                let _430: bool; // in scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                let _433: bool; // in scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                let _434: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                scope 167 {
                                                                                                                                                                                                    debug __field19 => _428; // in scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                    let _435: bool; // in scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                    let _437: bool; // in scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                    let _440: bool; // in scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                    let _441: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                    scope 171 {
                                                                                                                                                                                                        debug __field20 => _435; // in scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                        let _442: bool; // in scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                        let _444: bool; // in scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                        let _447: bool; // in scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                        let _448: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                        scope 175 {
                                                                                                                                                                                                            debug __field21 => _442; // in scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                            let _449: bool; // in scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                            let _451: bool; // in scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                            let _454: bool; // in scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                            let _455: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                            scope 179 {
                                                                                                                                                                                                                debug __field22 => _449; // in scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                let _456: bool; // in scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                let _458: bool; // in scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                let _461: bool; // in scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                let _462: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                scope 183 {
                                                                                                                                                                                                                    debug __field23 => _456; // in scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                    let _463: bool; // in scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                    let _465: bool; // in scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                    let _468: bool; // in scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                    let _469: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                    scope 187 {
                                                                                                                                                                                                                        debug __field24 => _463; // in scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                        let _470: bool; // in scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                        let _472: bool; // in scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                        let _475: bool; // in scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                        let _476: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                        scope 191 {
                                                                                                                                                                                                                            debug __field25 => _470; // in scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                            let _477: bool; // in scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                            let _479: bool; // in scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                            let _482: bool; // in scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                            let _483: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                            scope 195 {
                                                                                                                                                                                                                                debug __field26 => _477; // in scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                                let _484: bool; // in scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                                let _486: bool; // in scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                                let _489: bool; // in scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                                let _490: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                                scope 199 {
                                                                                                                                                                                                                                    debug __field27 => _484; // in scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                scope 200 {
                                                                                                                                                                                                                                    debug __field27 => _486; // in scope 200 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                scope 201 {
                                                                                                                                                                                                                                    debug __val => _489; // in scope 201 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                scope 202 {
                                                                                                                                                                                                                                    debug __err => _490; // in scope 202 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            scope 196 {
                                                                                                                                                                                                                                debug __field26 => _479; // in scope 196 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            scope 197 {
                                                                                                                                                                                                                                debug __val => _482; // in scope 197 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            scope 198 {
                                                                                                                                                                                                                                debug __err => _483; // in scope 198 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        scope 192 {
                                                                                                                                                                                                                            debug __field25 => _472; // in scope 192 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        scope 193 {
                                                                                                                                                                                                                            debug __val => _475; // in scope 193 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        scope 194 {
                                                                                                                                                                                                                            debug __err => _476; // in scope 194 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    scope 188 {
                                                                                                                                                                                                                        debug __field24 => _465; // in scope 188 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    scope 189 {
                                                                                                                                                                                                                        debug __val => _468; // in scope 189 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    scope 190 {
                                                                                                                                                                                                                        debug __err => _469; // in scope 190 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                                scope 184 {
                                                                                                                                                                                                                    debug __field23 => _458; // in scope 184 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                }
                                                                                                                                                                                                                scope 185 {
                                                                                                                                                                                                                    debug __val => _461; // in scope 185 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                }
                                                                                                                                                                                                                scope 186 {
                                                                                                                                                                                                                    debug __err => _462; // in scope 186 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                            scope 180 {
                                                                                                                                                                                                                debug __field22 => _451; // in scope 180 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                            }
                                                                                                                                                                                                            scope 181 {
                                                                                                                                                                                                                debug __val => _454; // in scope 181 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                            }
                                                                                                                                                                                                            scope 182 {
                                                                                                                                                                                                                debug __err => _455; // in scope 182 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        scope 176 {
                                                                                                                                                                                                            debug __field21 => _444; // in scope 176 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                        }
                                                                                                                                                                                                        scope 177 {
                                                                                                                                                                                                            debug __val => _447; // in scope 177 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                        }
                                                                                                                                                                                                        scope 178 {
                                                                                                                                                                                                            debug __err => _448; // in scope 178 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    scope 172 {
                                                                                                                                                                                                        debug __field20 => _437; // in scope 172 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                    }
                                                                                                                                                                                                    scope 173 {
                                                                                                                                                                                                        debug __val => _440; // in scope 173 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                    }
                                                                                                                                                                                                    scope 174 {
                                                                                                                                                                                                        debug __err => _441; // in scope 174 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                                scope 168 {
                                                                                                                                                                                                    debug __field19 => _430; // in scope 168 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                }
                                                                                                                                                                                                scope 169 {
                                                                                                                                                                                                    debug __val => _433; // in scope 169 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                }
                                                                                                                                                                                                scope 170 {
                                                                                                                                                                                                    debug __err => _434; // in scope 170 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 164 {
                                                                                                                                                                                                debug __field18 => _423; // in scope 164 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 165 {
                                                                                                                                                                                                debug __val => _426; // in scope 165 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                            }
                                                                                                                                                                                            scope 166 {
                                                                                                                                                                                                debug __err => _427; // in scope 166 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 160 {
                                                                                                                                                                                            debug __field17 => _416; // in scope 160 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 161 {
                                                                                                                                                                                            debug __val => _419; // in scope 161 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                        }
                                                                                                                                                                                        scope 162 {
                                                                                                                                                                                            debug __err => _420; // in scope 162 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 156 {
                                                                                                                                                                                        debug __field16 => _409; // in scope 156 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 157 {
                                                                                                                                                                                        debug __val => _412; // in scope 157 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                    }
                                                                                                                                                                                    scope 158 {
                                                                                                                                                                                        debug __err => _413; // in scope 158 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                                scope 152 {
                                                                                                                                                                                    debug __field15 => _402; // in scope 152 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                }
                                                                                                                                                                                scope 153 {
                                                                                                                                                                                    debug __val => _405; // in scope 153 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                }
                                                                                                                                                                                scope 154 {
                                                                                                                                                                                    debug __err => _406; // in scope 154 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            scope 148 {
                                                                                                                                                                                debug __field14 => _395; // in scope 148 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                            }
                                                                                                                                                                            scope 149 {
                                                                                                                                                                                debug __val => _398; // in scope 149 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                            }
                                                                                                                                                                            scope 150 {
                                                                                                                                                                                debug __err => _399; // in scope 150 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        scope 144 {
                                                                                                                                                                            debug __field13 => _388; // in scope 144 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                        }
                                                                                                                                                                        scope 145 {
                                                                                                                                                                            debug __val => _391; // in scope 145 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                        }
                                                                                                                                                                        scope 146 {
                                                                                                                                                                            debug __err => _392; // in scope 146 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    scope 140 {
                                                                                                                                                                        debug __field12 => _381; // in scope 140 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                    }
                                                                                                                                                                    scope 141 {
                                                                                                                                                                        debug __val => _384; // in scope 141 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                    }
                                                                                                                                                                    scope 142 {
                                                                                                                                                                        debug __err => _385; // in scope 142 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                scope 136 {
                                                                                                                                                                    debug __field11 => _374; // in scope 136 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                }
                                                                                                                                                                scope 137 {
                                                                                                                                                                    debug __val => _377; // in scope 137 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                }
                                                                                                                                                                scope 138 {
                                                                                                                                                                    debug __err => _378; // in scope 138 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            scope 132 {
                                                                                                                                                                debug __field10 => _367; // in scope 132 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                            }
                                                                                                                                                            scope 133 {
                                                                                                                                                                debug __val => _370; // in scope 133 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                            }
                                                                                                                                                            scope 134 {
                                                                                                                                                                debug __err => _371; // in scope 134 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        scope 128 {
                                                                                                                                                            debug __field9 => _360; // in scope 128 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                        }
                                                                                                                                                        scope 129 {
                                                                                                                                                            debug __val => _363; // in scope 129 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                        }
                                                                                                                                                        scope 130 {
                                                                                                                                                            debug __err => _364; // in scope 130 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    scope 124 {
                                                                                                                                                        debug __field8 => _353; // in scope 124 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                    }
                                                                                                                                                    scope 125 {
                                                                                                                                                        debug __val => _356; // in scope 125 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                    }
                                                                                                                                                    scope 126 {
                                                                                                                                                        debug __err => _357; // in scope 126 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                scope 120 {
                                                                                                                                                    debug __field7 => _346; // in scope 120 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                }
                                                                                                                                                scope 121 {
                                                                                                                                                    debug __val => _349; // in scope 121 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                }
                                                                                                                                                scope 122 {
                                                                                                                                                    debug __err => _350; // in scope 122 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            scope 116 {
                                                                                                                                                debug __field6 => _339; // in scope 116 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                            }
                                                                                                                                            scope 117 {
                                                                                                                                                debug __val => _342; // in scope 117 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                            }
                                                                                                                                            scope 118 {
                                                                                                                                                debug __err => _343; // in scope 118 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        scope 112 {
                                                                                                                                            debug __field5 => _332; // in scope 112 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                        }
                                                                                                                                        scope 113 {
                                                                                                                                            debug __val => _335; // in scope 113 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                        }
                                                                                                                                        scope 114 {
                                                                                                                                            debug __err => _336; // in scope 114 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    scope 108 {
                                                                                                                                        debug __field4 => _325; // in scope 108 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                    }
                                                                                                                                    scope 109 {
                                                                                                                                        debug __val => _328; // in scope 109 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                    }
                                                                                                                                    scope 110 {
                                                                                                                                        debug __err => _329; // in scope 110 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                scope 104 {
                                                                                                                                    debug __field3 => _318; // in scope 104 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                }
                                                                                                                                scope 105 {
                                                                                                                                    debug __val => _321; // in scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                }
                                                                                                                                scope 106 {
                                                                                                                                    debug __err => _322; // in scope 106 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                                }
                                                                                                                            }
                                                                                                                            scope 100 {
                                                                                                                                debug __field2 => _311; // in scope 100 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                            }
                                                                                                                            scope 101 {
                                                                                                                                debug __val => _314; // in scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                            }
                                                                                                                            scope 102 {
                                                                                                                                debug __err => _315; // in scope 102 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 96 {
                                                                                                                            debug __field1 => _304; // in scope 96 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 97 {
                                                                                                                            debug __val => _307; // in scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                        scope 98 {
                                                                                                                            debug __err => _308; // in scope 98 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                        }
                                                                                                                    }
                                                                                                                    scope 92 {
                                                                                                                        debug __field0 => _297; // in scope 92 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                    }
                                                                                                                    scope 93 {
                                                                                                                        debug __val => _300; // in scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                    }
                                                                                                                    scope 94 {
                                                                                                                        debug __err => _301; // in scope 94 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _520 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _521 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _3 = std::option::Option::<bool>::None; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _4 = std::option::Option::<usize>::None; // scope 1 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _521 = const true;               // scope 2 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _5 = std::option::Option::<std::string::String>::None; // scope 2 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _520 = const true;               // scope 3 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _6 = std::option::Option::<std::string::String>::None; // scope 3 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _7 = std::option::Option::<usize>::None; // scope 4 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _8 = std::option::Option::<usize>::None; // scope 5 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _9 = std::option::Option::<bool>::None; // scope 6 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _10 = std::option::Option::<bool>::None; // scope 7 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _11 = std::option::Option::<usize>::None; // scope 8 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _12 = std::option::Option::<bool>::None; // scope 9 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _13 = std::option::Option::<usize>::None; // scope 10 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _14 = std::option::Option::<usize>::None; // scope 11 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _15 = std::option::Option::<bool>::None; // scope 12 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _16 = std::option::Option::<usize>::None; // scope 13 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _17 = std::option::Option::<bool>::None; // scope 14 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _18 = std::option::Option::<bool>::None; // scope 15 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _19 = std::option::Option::<bool>::None; // scope 16 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _20 = std::option::Option::<bool>::None; // scope 17 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _21 = std::option::Option::<bool>::None; // scope 18 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _22 = std::option::Option::<bool>::None; // scope 19 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _23 = std::option::Option::<bool>::None; // scope 20 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _24 = std::option::Option::<bool>::None; // scope 21 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _25 = std::option::Option::<bool>::None; // scope 22 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _26 = std::option::Option::<bool>::None; // scope 23 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _27 = std::option::Option::<bool>::None; // scope 24 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _28 = std::option::Option::<bool>::None; // scope 25 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _29 = std::option::Option::<bool>::None; // scope 26 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _30 = std::option::Option::<bool>::None; // scope 27 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb1: {
        _32 = &mut _2;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _31 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field>(_32) -> [return: bb2, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(56)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::__Field>}, val: Value(<ZST>) }
    }

    bb2: {
        _33 = discriminant(_31);         // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _33) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb3: {
        _35 = move ((_31 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _35); // scope 31 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb4: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb5: {
        _34 = move ((_31 as Ok).0: std::option::Option<config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field>); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _36 = discriminant(_34);         // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _36) -> [1: bb7, otherwise: bb6]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb6: {
        _296 = discriminant(_3);         // scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _296) -> [0: bb268, 1: bb270, otherwise: bb269]; // scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb7: {
        _37 = move ((_34 as Some).0: config::_IMPL_DESERIALIZE_FOR_WsConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::WsConfig>::deserialize::__Field); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _38 = discriminant(_37);         // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _38) -> [0: bb9, 1: bb18, 2: bb27, 3: bb38, 4: bb49, 5: bb58, 6: bb67, 7: bb76, 8: bb85, 9: bb94, 10: bb103, 11: bb112, 12: bb121, 13: bb130, 14: bb139, 15: bb148, 16: bb157, 17: bb166, 18: bb175, 19: bb184, 20: bb193, 21: bb202, 22: bb211, 23: bb220, 24: bb229, 25: bb238, 26: bb247, 27: bb256, otherwise: bb8]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb8: {
        _292 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _291 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_292) -> [return: bb265, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(141)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<IgnoredAny, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<IgnoredAny>}, val: Value(<ZST>) }
    }

    bb9: {
        _40 = &_3;                       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _39 = std::option::Option::<bool>::is_some(_40) -> [return: bb10, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(57)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _39) -> [0: bb13, otherwise: bb11]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb11: {
        _41 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "enable") -> [return: bb12, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(58)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _41); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb13: {
        _44 = &mut _2;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _43 = <__A as MapAccess<'_>>::next_value::<bool>(_44) -> [return: bb14, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:49:5: 49:8
                                         // + user_ty: UserType(59)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb14: {
        _45 = discriminant(_43);         // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _45) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb15: {
        _47 = move ((_43 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _47); // scope 33 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb16: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb17: {
        _46 = ((_43 as Ok).0: bool);     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _42 = std::option::Option::<bool>::Some(_46); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _3 = move _42;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb18: {
        _49 = &_4;                       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _48 = std::option::Option::<usize>::is_some(_49) -> [return: bb19, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(60)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<usize>) -> bool {std::option::Option::<usize>::is_some}, val: Value(<ZST>) }
    }

    bb19: {
        switchInt(move _48) -> [0: bb22, otherwise: bb20]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb20: {
        _50 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "thread_number") -> [return: bb21, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(61)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _50); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb22: {
        _53 = &mut _2;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _52 = <__A as MapAccess<'_>>::next_value::<usize>(_53) -> [return: bb23, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:50:5: 50:8
                                         // + user_ty: UserType(62)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<usize, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<usize>}, val: Value(<ZST>) }
    }

    bb23: {
        _54 = discriminant(_52);         // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _54) -> [0: bb26, 1: bb24, otherwise: bb25]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb24: {
        _56 = move ((_52 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _56); // scope 35 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb25: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb26: {
        _55 = ((_52 as Ok).0: usize);    // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _51 = std::option::Option::<usize>::Some(_55); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _4 = move _51;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb27: {
        _58 = &_5;                       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _57 = std::option::Option::<std::string::String>::is_some(_58) -> [return: bb28, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(63)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(<ZST>) }
    }

    bb28: {
        switchInt(move _57) -> [0: bb31, otherwise: bb29]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb29: {
        _59 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "listen_ip") -> [return: bb30, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(64)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _59); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb31: {
        _62 = &mut _2;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _61 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_62) -> [return: bb32, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:51:5: 51:8
                                         // + user_ty: UserType(65)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::string::String, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<std::string::String>}, val: Value(<ZST>) }
    }

    bb32: {
        _63 = discriminant(_61);         // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _63) -> [0: bb35, 1: bb33, otherwise: bb34]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb33: {
        _65 = move ((_61 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _65); // scope 37 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb34: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb35: {
        _64 = move ((_61 as Ok).0: std::string::String); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _60 = std::option::Option::<std::string::String>::Some(move _64); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        drop(_5) -> [return: bb36, unwind: bb37]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb36: {
        _521 = const true;               // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _5 = move _60;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb37 (cleanup): {
        _521 = const true;               // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _5 = move _60;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb509;                   // scope 29 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb38: {
        _67 = &_6;                       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _66 = std::option::Option::<std::string::String>::is_some(_67) -> [return: bb39, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(66)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(<ZST>) }
    }

    bb39: {
        switchInt(move _66) -> [0: bb42, otherwise: bb40]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb40: {
        _68 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "listen_port") -> [return: bb41, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(67)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb41: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _68); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb42: {
        _71 = &mut _2;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _70 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_71) -> [return: bb43, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:52:5: 52:8
                                         // + user_ty: UserType(68)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::string::String, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<std::string::String>}, val: Value(<ZST>) }
    }

    bb43: {
        _72 = discriminant(_70);         // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _72) -> [0: bb46, 1: bb44, otherwise: bb45]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb44: {
        _74 = move ((_70 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _74); // scope 39 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb45: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb46: {
        _73 = move ((_70 as Ok).0: std::string::String); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _69 = std::option::Option::<std::string::String>::Some(move _73); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        drop(_6) -> [return: bb47, unwind: bb48]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb47: {
        _520 = const true;               // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _6 = move _69;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb48 (cleanup): {
        _520 = const true;               // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _6 = move _69;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb509;                   // scope 29 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb49: {
        _76 = &_7;                       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _75 = std::option::Option::<usize>::is_some(_76) -> [return: bb50, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(69)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<usize>) -> bool {std::option::Option::<usize>::is_some}, val: Value(<ZST>) }
    }

    bb50: {
        switchInt(move _75) -> [0: bb53, otherwise: bb51]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb51: {
        _77 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "max_connections") -> [return: bb52, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(70)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb52: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _77); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb53: {
        _80 = &mut _2;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _79 = <__A as MapAccess<'_>>::next_value::<usize>(_80) -> [return: bb54, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:54:5: 54:20
                                         // + user_ty: UserType(71)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<usize, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<usize>}, val: Value(<ZST>) }
    }

    bb54: {
        _81 = discriminant(_79);         // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _81) -> [0: bb57, 1: bb55, otherwise: bb56]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb55: {
        _83 = move ((_79 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _83); // scope 41 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb56: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb57: {
        _82 = ((_79 as Ok).0: usize);    // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _78 = std::option::Option::<usize>::Some(_82); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _7 = move _78;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb58: {
        _85 = &_8;                       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _84 = std::option::Option::<usize>::is_some(_85) -> [return: bb59, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(72)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<usize>) -> bool {std::option::Option::<usize>::is_some}, val: Value(<ZST>) }
    }

    bb59: {
        switchInt(move _84) -> [0: bb62, otherwise: bb60]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb60: {
        _86 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "queue_size") -> [return: bb61, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(73)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb61: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _86); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb62: {
        _89 = &mut _2;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _88 = <__A as MapAccess<'_>>::next_value::<usize>(_89) -> [return: bb63, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:55:5: 55:15
                                         // + user_ty: UserType(74)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<usize, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<usize>}, val: Value(<ZST>) }
    }

    bb63: {
        _90 = discriminant(_88);         // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _90) -> [0: bb66, 1: bb64, otherwise: bb65]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb64: {
        _92 = move ((_88 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _92); // scope 43 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb65: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb66: {
        _91 = ((_88 as Ok).0: usize);    // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _87 = std::option::Option::<usize>::Some(_91); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _8 = move _87;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb67: {
        _94 = &_9;                       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _93 = std::option::Option::<bool>::is_some(_94) -> [return: bb68, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(75)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb68: {
        switchInt(move _93) -> [0: bb71, otherwise: bb69]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb69: {
        _95 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "panic_on_new_connection") -> [return: bb70, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(76)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb70: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _95); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb71: {
        _98 = &mut _2;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _97 = <__A as MapAccess<'_>>::next_value::<bool>(_98) -> [return: bb72, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:56:5: 56:28
                                         // + user_ty: UserType(77)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb72: {
        _99 = discriminant(_97);         // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _99) -> [0: bb75, 1: bb73, otherwise: bb74]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb73: {
        _101 = move ((_97 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _101); // scope 45 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb74: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb75: {
        _100 = ((_97 as Ok).0: bool);    // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _96 = std::option::Option::<bool>::Some(_100); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _9 = move _96;                   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb76: {
        _103 = &_10;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _102 = std::option::Option::<bool>::is_some(_103) -> [return: bb77, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(78)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb77: {
        switchInt(move _102) -> [0: bb80, otherwise: bb78]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb78: {
        _104 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "panic_on_shutdown") -> [return: bb79, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(79)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb79: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _104); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb80: {
        _107 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _106 = <__A as MapAccess<'_>>::next_value::<bool>(_107) -> [return: bb81, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:57:5: 57:22
                                         // + user_ty: UserType(80)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb81: {
        _108 = discriminant(_106);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _108) -> [0: bb84, 1: bb82, otherwise: bb83]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb82: {
        _110 = move ((_106 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _110); // scope 47 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb83: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb84: {
        _109 = ((_106 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _105 = std::option::Option::<bool>::Some(_109); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _10 = move _105;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb85: {
        _112 = &_11;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _111 = std::option::Option::<usize>::is_some(_112) -> [return: bb86, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(81)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<usize>) -> bool {std::option::Option::<usize>::is_some}, val: Value(<ZST>) }
    }

    bb86: {
        switchInt(move _111) -> [0: bb89, otherwise: bb87]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb87: {
        _113 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "fragments_capacity") -> [return: bb88, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(82)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb88: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _113); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb89: {
        _116 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _115 = <__A as MapAccess<'_>>::next_value::<usize>(_116) -> [return: bb90, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:58:5: 58:23
                                         // + user_ty: UserType(83)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<usize, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<usize>}, val: Value(<ZST>) }
    }

    bb90: {
        _117 = discriminant(_115);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _117) -> [0: bb93, 1: bb91, otherwise: bb92]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb91: {
        _119 = move ((_115 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _119); // scope 49 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb92: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb93: {
        _118 = ((_115 as Ok).0: usize);  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _114 = std::option::Option::<usize>::Some(_118); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _11 = move _114;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb94: {
        _121 = &_12;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _120 = std::option::Option::<bool>::is_some(_121) -> [return: bb95, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(84)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb95: {
        switchInt(move _120) -> [0: bb98, otherwise: bb96]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb96: {
        _122 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "fragments_grow") -> [return: bb97, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(85)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb97: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _122); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb98: {
        _125 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _124 = <__A as MapAccess<'_>>::next_value::<bool>(_125) -> [return: bb99, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:59:5: 59:19
                                         // + user_ty: UserType(86)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb99: {
        _126 = discriminant(_124);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _126) -> [0: bb102, 1: bb100, otherwise: bb101]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb100: {
        _128 = move ((_124 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _128); // scope 51 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb101: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb102: {
        _127 = ((_124 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _123 = std::option::Option::<bool>::Some(_127); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _12 = move _123;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb103: {
        _130 = &_13;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _129 = std::option::Option::<usize>::is_some(_130) -> [return: bb104, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(87)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<usize>) -> bool {std::option::Option::<usize>::is_some}, val: Value(<ZST>) }
    }

    bb104: {
        switchInt(move _129) -> [0: bb107, otherwise: bb105]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb105: {
        _131 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "fragment_size") -> [return: bb106, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(88)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb106: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _131); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb107: {
        _134 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _133 = <__A as MapAccess<'_>>::next_value::<usize>(_134) -> [return: bb108, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:60:5: 60:18
                                         // + user_ty: UserType(89)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<usize, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<usize>}, val: Value(<ZST>) }
    }

    bb108: {
        _135 = discriminant(_133);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _135) -> [0: bb111, 1: bb109, otherwise: bb110]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb109: {
        _137 = move ((_133 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _137); // scope 53 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb110: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb111: {
        _136 = ((_133 as Ok).0: usize);  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _132 = std::option::Option::<usize>::Some(_136); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _13 = move _132;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb112: {
        _139 = &_14;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _138 = std::option::Option::<usize>::is_some(_139) -> [return: bb113, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(90)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<usize>) -> bool {std::option::Option::<usize>::is_some}, val: Value(<ZST>) }
    }

    bb113: {
        switchInt(move _138) -> [0: bb116, otherwise: bb114]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb114: {
        _140 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "in_buffer_capacity") -> [return: bb115, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(91)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb115: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _140); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb116: {
        _143 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _142 = <__A as MapAccess<'_>>::next_value::<usize>(_143) -> [return: bb117, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:61:5: 61:23
                                         // + user_ty: UserType(92)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<usize, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<usize>}, val: Value(<ZST>) }
    }

    bb117: {
        _144 = discriminant(_142);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _144) -> [0: bb120, 1: bb118, otherwise: bb119]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb118: {
        _146 = move ((_142 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _146); // scope 55 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb119: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb120: {
        _145 = ((_142 as Ok).0: usize);  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _141 = std::option::Option::<usize>::Some(_145); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _14 = move _141;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb121: {
        _148 = &_15;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _147 = std::option::Option::<bool>::is_some(_148) -> [return: bb122, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(93)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb122: {
        switchInt(move _147) -> [0: bb125, otherwise: bb123]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb123: {
        _149 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "in_buffer_grow") -> [return: bb124, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(94)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb124: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _149); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb125: {
        _152 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _151 = <__A as MapAccess<'_>>::next_value::<bool>(_152) -> [return: bb126, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:62:5: 62:19
                                         // + user_ty: UserType(95)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb126: {
        _153 = discriminant(_151);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _153) -> [0: bb129, 1: bb127, otherwise: bb128]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb127: {
        _155 = move ((_151 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _155); // scope 57 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb128: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb129: {
        _154 = ((_151 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _150 = std::option::Option::<bool>::Some(_154); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _15 = move _150;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb130: {
        _157 = &_16;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _156 = std::option::Option::<usize>::is_some(_157) -> [return: bb131, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(96)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<usize>) -> bool {std::option::Option::<usize>::is_some}, val: Value(<ZST>) }
    }

    bb131: {
        switchInt(move _156) -> [0: bb134, otherwise: bb132]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb132: {
        _158 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "out_buffer_capacity") -> [return: bb133, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(97)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb133: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _158); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb134: {
        _161 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _160 = <__A as MapAccess<'_>>::next_value::<usize>(_161) -> [return: bb135, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:63:5: 63:24
                                         // + user_ty: UserType(98)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<usize, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<usize>}, val: Value(<ZST>) }
    }

    bb135: {
        _162 = discriminant(_160);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _162) -> [0: bb138, 1: bb136, otherwise: bb137]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb136: {
        _164 = move ((_160 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _164); // scope 59 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb137: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb138: {
        _163 = ((_160 as Ok).0: usize);  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _159 = std::option::Option::<usize>::Some(_163); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _16 = move _159;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb139: {
        _166 = &_17;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _165 = std::option::Option::<bool>::is_some(_166) -> [return: bb140, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(99)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb140: {
        switchInt(move _165) -> [0: bb143, otherwise: bb141]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb141: {
        _167 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "out_buffer_grow") -> [return: bb142, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(100)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb142: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _167); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb143: {
        _170 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _169 = <__A as MapAccess<'_>>::next_value::<bool>(_170) -> [return: bb144, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:64:5: 64:20
                                         // + user_ty: UserType(101)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb144: {
        _171 = discriminant(_169);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _171) -> [0: bb147, 1: bb145, otherwise: bb146]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb145: {
        _173 = move ((_169 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _173); // scope 61 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb146: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb147: {
        _172 = ((_169 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _168 = std::option::Option::<bool>::Some(_172); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _17 = move _168;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb148: {
        _175 = &_18;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _174 = std::option::Option::<bool>::is_some(_175) -> [return: bb149, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(102)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb149: {
        switchInt(move _174) -> [0: bb152, otherwise: bb150]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb150: {
        _176 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "panic_on_internal") -> [return: bb151, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(103)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb151: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _176); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb152: {
        _179 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _178 = <__A as MapAccess<'_>>::next_value::<bool>(_179) -> [return: bb153, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:65:5: 65:22
                                         // + user_ty: UserType(104)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb153: {
        _180 = discriminant(_178);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _180) -> [0: bb156, 1: bb154, otherwise: bb155]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb154: {
        _182 = move ((_178 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _182); // scope 63 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb155: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb156: {
        _181 = ((_178 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _177 = std::option::Option::<bool>::Some(_181); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _18 = move _177;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb157: {
        _184 = &_19;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _183 = std::option::Option::<bool>::is_some(_184) -> [return: bb158, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(105)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb158: {
        switchInt(move _183) -> [0: bb161, otherwise: bb159]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb159: {
        _185 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "panic_on_capacity") -> [return: bb160, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(106)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb160: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _185); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb161: {
        _188 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _187 = <__A as MapAccess<'_>>::next_value::<bool>(_188) -> [return: bb162, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:66:5: 66:22
                                         // + user_ty: UserType(107)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb162: {
        _189 = discriminant(_187);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _189) -> [0: bb165, 1: bb163, otherwise: bb164]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb163: {
        _191 = move ((_187 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _191); // scope 65 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb164: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb165: {
        _190 = ((_187 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _186 = std::option::Option::<bool>::Some(_190); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _19 = move _186;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb166: {
        _193 = &_20;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _192 = std::option::Option::<bool>::is_some(_193) -> [return: bb167, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(108)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb167: {
        switchInt(move _192) -> [0: bb170, otherwise: bb168]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb168: {
        _194 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "panic_on_protocol") -> [return: bb169, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(109)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb169: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _194); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb170: {
        _197 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _196 = <__A as MapAccess<'_>>::next_value::<bool>(_197) -> [return: bb171, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:67:5: 67:22
                                         // + user_ty: UserType(110)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb171: {
        _198 = discriminant(_196);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _198) -> [0: bb174, 1: bb172, otherwise: bb173]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb172: {
        _200 = move ((_196 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _200); // scope 67 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb173: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb174: {
        _199 = ((_196 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _195 = std::option::Option::<bool>::Some(_199); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _20 = move _195;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb175: {
        _202 = &_21;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _201 = std::option::Option::<bool>::is_some(_202) -> [return: bb176, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(111)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb176: {
        switchInt(move _201) -> [0: bb179, otherwise: bb177]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb177: {
        _203 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "panic_on_encoding") -> [return: bb178, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(112)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb178: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _203); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb179: {
        _206 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _205 = <__A as MapAccess<'_>>::next_value::<bool>(_206) -> [return: bb180, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:68:5: 68:22
                                         // + user_ty: UserType(113)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb180: {
        _207 = discriminant(_205);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _207) -> [0: bb183, 1: bb181, otherwise: bb182]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb181: {
        _209 = move ((_205 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _209); // scope 69 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb182: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb183: {
        _208 = ((_205 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _204 = std::option::Option::<bool>::Some(_208); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _21 = move _204;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb184: {
        _211 = &_22;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _210 = std::option::Option::<bool>::is_some(_211) -> [return: bb185, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(114)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb185: {
        switchInt(move _210) -> [0: bb188, otherwise: bb186]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb186: {
        _212 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "panic_on_queue") -> [return: bb187, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(115)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb187: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _212); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb188: {
        _215 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _214 = <__A as MapAccess<'_>>::next_value::<bool>(_215) -> [return: bb189, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:69:5: 69:19
                                         // + user_ty: UserType(116)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb189: {
        _216 = discriminant(_214);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _216) -> [0: bb192, 1: bb190, otherwise: bb191]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb190: {
        _218 = move ((_214 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _218); // scope 71 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb191: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb192: {
        _217 = ((_214 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _213 = std::option::Option::<bool>::Some(_217); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _22 = move _213;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb193: {
        _220 = &_23;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _219 = std::option::Option::<bool>::is_some(_220) -> [return: bb194, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(117)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb194: {
        switchInt(move _219) -> [0: bb197, otherwise: bb195]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb195: {
        _221 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "panic_on_io") -> [return: bb196, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(118)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb196: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _221); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb197: {
        _224 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _223 = <__A as MapAccess<'_>>::next_value::<bool>(_224) -> [return: bb198, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:70:5: 70:16
                                         // + user_ty: UserType(119)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb198: {
        _225 = discriminant(_223);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _225) -> [0: bb201, 1: bb199, otherwise: bb200]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb199: {
        _227 = move ((_223 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _227); // scope 73 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb200: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb201: {
        _226 = ((_223 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _222 = std::option::Option::<bool>::Some(_226); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _23 = move _222;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb202: {
        _229 = &_24;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _228 = std::option::Option::<bool>::is_some(_229) -> [return: bb203, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(120)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb203: {
        switchInt(move _228) -> [0: bb206, otherwise: bb204]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb204: {
        _230 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "panic_on_timeout") -> [return: bb205, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(121)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb205: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _230); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb206: {
        _233 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _232 = <__A as MapAccess<'_>>::next_value::<bool>(_233) -> [return: bb207, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:71:5: 71:21
                                         // + user_ty: UserType(122)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb207: {
        _234 = discriminant(_232);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _234) -> [0: bb210, 1: bb208, otherwise: bb209]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb208: {
        _236 = move ((_232 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _236); // scope 75 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb209: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb210: {
        _235 = ((_232 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _231 = std::option::Option::<bool>::Some(_235); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _24 = move _231;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb211: {
        _238 = &_25;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _237 = std::option::Option::<bool>::is_some(_238) -> [return: bb212, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(123)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb212: {
        switchInt(move _237) -> [0: bb215, otherwise: bb213]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb213: {
        _239 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "shutdown_on_interrupt") -> [return: bb214, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(124)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb214: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _239); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb215: {
        _242 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _241 = <__A as MapAccess<'_>>::next_value::<bool>(_242) -> [return: bb216, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:72:5: 72:26
                                         // + user_ty: UserType(125)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb216: {
        _243 = discriminant(_241);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _243) -> [0: bb219, 1: bb217, otherwise: bb218]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb217: {
        _245 = move ((_241 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _245); // scope 77 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb218: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb219: {
        _244 = ((_241 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _240 = std::option::Option::<bool>::Some(_244); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _25 = move _240;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb220: {
        _247 = &_26;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _246 = std::option::Option::<bool>::is_some(_247) -> [return: bb221, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(126)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb221: {
        switchInt(move _246) -> [0: bb224, otherwise: bb222]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb222: {
        _248 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "masking_strict") -> [return: bb223, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(127)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb223: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _248); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb224: {
        _251 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _250 = <__A as MapAccess<'_>>::next_value::<bool>(_251) -> [return: bb225, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:73:5: 73:19
                                         // + user_ty: UserType(128)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb225: {
        _252 = discriminant(_250);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _252) -> [0: bb228, 1: bb226, otherwise: bb227]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb226: {
        _254 = move ((_250 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _254); // scope 79 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb227: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb228: {
        _253 = ((_250 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _249 = std::option::Option::<bool>::Some(_253); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _26 = move _249;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb229: {
        _256 = &_27;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _255 = std::option::Option::<bool>::is_some(_256) -> [return: bb230, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(129)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb230: {
        switchInt(move _255) -> [0: bb233, otherwise: bb231]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb231: {
        _257 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "key_strict") -> [return: bb232, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(130)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb232: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _257); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb233: {
        _260 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _259 = <__A as MapAccess<'_>>::next_value::<bool>(_260) -> [return: bb234, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:74:5: 74:15
                                         // + user_ty: UserType(131)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb234: {
        _261 = discriminant(_259);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _261) -> [0: bb237, 1: bb235, otherwise: bb236]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb235: {
        _263 = move ((_259 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _263); // scope 81 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb236: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb237: {
        _262 = ((_259 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _258 = std::option::Option::<bool>::Some(_262); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _27 = move _258;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb238: {
        _265 = &_28;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _264 = std::option::Option::<bool>::is_some(_265) -> [return: bb239, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(132)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb239: {
        switchInt(move _264) -> [0: bb242, otherwise: bb240]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb240: {
        _266 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "method_strict") -> [return: bb241, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(133)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb241: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _266); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb242: {
        _269 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _268 = <__A as MapAccess<'_>>::next_value::<bool>(_269) -> [return: bb243, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:75:5: 75:18
                                         // + user_ty: UserType(134)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb243: {
        _270 = discriminant(_268);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _270) -> [0: bb246, 1: bb244, otherwise: bb245]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb244: {
        _272 = move ((_268 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _272); // scope 83 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb245: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb246: {
        _271 = ((_268 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _267 = std::option::Option::<bool>::Some(_271); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _28 = move _267;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb247: {
        _274 = &_29;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _273 = std::option::Option::<bool>::is_some(_274) -> [return: bb248, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(135)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb248: {
        switchInt(move _273) -> [0: bb251, otherwise: bb249]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb249: {
        _275 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "encrypt_server") -> [return: bb250, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(136)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb250: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _275); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb251: {
        _278 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _277 = <__A as MapAccess<'_>>::next_value::<bool>(_278) -> [return: bb252, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:76:5: 76:19
                                         // + user_ty: UserType(137)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb252: {
        _279 = discriminant(_277);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _279) -> [0: bb255, 1: bb253, otherwise: bb254]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb253: {
        _281 = move ((_277 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _281); // scope 85 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb254: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb255: {
        _280 = ((_277 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _276 = std::option::Option::<bool>::Some(_280); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _29 = move _276;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb256: {
        _283 = &_30;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _282 = std::option::Option::<bool>::is_some(_283) -> [return: bb257, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(138)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb257: {
        switchInt(move _282) -> [0: bb260, otherwise: bb258]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb258: {
        _284 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "tcp_nodelay") -> [return: bb259, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + user_ty: UserType(139)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb259: {
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _284); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb260: {
        _287 = &mut _2;                  // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _286 = <__A as MapAccess<'_>>::next_value::<bool>(_287) -> [return: bb261, unwind: bb509]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:77:5: 77:16
                                         // + user_ty: UserType(140)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb261: {
        _288 = discriminant(_286);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _288) -> [0: bb264, 1: bb262, otherwise: bb263]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb262: {
        _290 = move ((_286 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _290); // scope 87 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb263: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb264: {
        _289 = ((_286 as Ok).0: bool);   // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _285 = std::option::Option::<bool>::Some(_289); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _30 = move _285;                 // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb1;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb265: {
        _293 = discriminant(_291);       // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _293) -> [0: bb1, 1: bb266, otherwise: bb267]; // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb266: {
        _294 = move ((_291 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _294); // scope 90 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 29 at no-location
    }

    bb267: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb268: {
        _298 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "enable") -> [return: bb271, unwind: bb509]; // scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:49:5: 49:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb269: {
        unreachable;                     // scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb270: {
        _297 = ((_3 as Some).0: bool);   // scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _295 = _297;                     // scope 92 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb275;                   // scope 28 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb271: {
        _299 = discriminant(_298);       // scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _299) -> [0: bb274, 1: bb272, otherwise: bb273]; // scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb272: {
        _301 = move ((_298 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _301); // scope 94 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 28 at no-location
    }

    bb273: {
        unreachable;                     // scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb274: {
        _300 = ((_298 as Ok).0: bool);   // scope 28 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _295 = _300;                     // scope 93 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb275;                   // scope 28 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb275: {
        _303 = discriminant(_4);         // scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _303) -> [0: bb276, 1: bb278, otherwise: bb277]; // scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb276: {
        _305 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "thread_number") -> [return: bb279, unwind: bb509]; // scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:50:5: 50:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<usize, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb277: {
        unreachable;                     // scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb278: {
        _304 = ((_4 as Some).0: usize);  // scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _302 = _304;                     // scope 96 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb283;                   // scope 91 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb279: {
        _306 = discriminant(_305);       // scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _306) -> [0: bb282, 1: bb280, otherwise: bb281]; // scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb280: {
        _308 = move ((_305 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _308); // scope 98 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 91 at no-location
    }

    bb281: {
        unreachable;                     // scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb282: {
        _307 = ((_305 as Ok).0: usize);  // scope 91 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _302 = _307;                     // scope 97 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb283;                   // scope 91 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb283: {
        _310 = discriminant(_5);         // scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _310) -> [0: bb284, 1: bb286, otherwise: bb285]; // scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb284: {
        _312 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "listen_ip") -> [return: bb287, unwind: bb509]; // scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:51:5: 51:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<std::string::String, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb285: {
        unreachable;                     // scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb286: {
        _521 = const false;              // scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _311 = move ((_5 as Some).0: std::string::String); // scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _309 = move _311;                // scope 100 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb291;                   // scope 95 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb287: {
        _313 = discriminant(_312);       // scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _313) -> [0: bb290, 1: bb288, otherwise: bb289]; // scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb288: {
        _315 = move ((_312 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _315); // scope 102 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb494;                   // scope 95 at no-location
    }

    bb289: {
        unreachable;                     // scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb290: {
        _314 = move ((_312 as Ok).0: std::string::String); // scope 95 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _309 = move _314;                // scope 101 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb291;                   // scope 95 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb291: {
        _317 = discriminant(_6);         // scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _317) -> [0: bb292, 1: bb294, otherwise: bb293]; // scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb292: {
        _319 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "listen_port") -> [return: bb295, unwind: bb497]; // scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:52:5: 52:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<std::string::String, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb293: {
        unreachable;                     // scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb294: {
        _520 = const false;              // scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _318 = move ((_6 as Some).0: std::string::String); // scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _316 = move _318;                // scope 104 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb299;                   // scope 99 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb295: {
        _320 = discriminant(_319);       // scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _320) -> [0: bb298, 1: bb296, otherwise: bb297]; // scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb296: {
        _322 = move ((_319 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _322); // scope 106 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb493;                   // scope 99 at no-location
    }

    bb297: {
        unreachable;                     // scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb298: {
        _321 = move ((_319 as Ok).0: std::string::String); // scope 99 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _316 = move _321;                // scope 105 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb299;                   // scope 99 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb299: {
        _324 = discriminant(_7);         // scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _324) -> [0: bb300, 1: bb302, otherwise: bb301]; // scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb300: {
        _326 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "max_connections") -> [return: bb303, unwind: bb496]; // scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:54:5: 54:20
                                         // + literal: Const { ty: fn(&'static str) -> Result<usize, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb301: {
        unreachable;                     // scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb302: {
        _325 = ((_7 as Some).0: usize);  // scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _323 = _325;                     // scope 108 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb307;                   // scope 103 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb303: {
        _327 = discriminant(_326);       // scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _327) -> [0: bb306, 1: bb304, otherwise: bb305]; // scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb304: {
        _329 = move ((_326 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _329); // scope 110 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 103 at no-location
    }

    bb305: {
        unreachable;                     // scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb306: {
        _328 = ((_326 as Ok).0: usize);  // scope 103 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _323 = _328;                     // scope 109 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb307;                   // scope 103 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb307: {
        _331 = discriminant(_8);         // scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _331) -> [0: bb308, 1: bb310, otherwise: bb309]; // scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb308: {
        _333 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "queue_size") -> [return: bb311, unwind: bb496]; // scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:55:5: 55:15
                                         // + literal: Const { ty: fn(&'static str) -> Result<usize, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb309: {
        unreachable;                     // scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb310: {
        _332 = ((_8 as Some).0: usize);  // scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _330 = _332;                     // scope 112 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb315;                   // scope 107 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb311: {
        _334 = discriminant(_333);       // scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _334) -> [0: bb314, 1: bb312, otherwise: bb313]; // scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb312: {
        _336 = move ((_333 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _336); // scope 114 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 107 at no-location
    }

    bb313: {
        unreachable;                     // scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb314: {
        _335 = ((_333 as Ok).0: usize);  // scope 107 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _330 = _335;                     // scope 113 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb315;                   // scope 107 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb315: {
        _338 = discriminant(_9);         // scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _338) -> [0: bb316, 1: bb318, otherwise: bb317]; // scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb316: {
        _340 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "panic_on_new_connection") -> [return: bb319, unwind: bb496]; // scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:56:5: 56:28
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb317: {
        unreachable;                     // scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb318: {
        _339 = ((_9 as Some).0: bool);   // scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _337 = _339;                     // scope 116 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb323;                   // scope 111 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb319: {
        _341 = discriminant(_340);       // scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _341) -> [0: bb322, 1: bb320, otherwise: bb321]; // scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb320: {
        _343 = move ((_340 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _343); // scope 118 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 111 at no-location
    }

    bb321: {
        unreachable;                     // scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb322: {
        _342 = ((_340 as Ok).0: bool);   // scope 111 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _337 = _342;                     // scope 117 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb323;                   // scope 111 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb323: {
        _345 = discriminant(_10);        // scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _345) -> [0: bb324, 1: bb326, otherwise: bb325]; // scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb324: {
        _347 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "panic_on_shutdown") -> [return: bb327, unwind: bb496]; // scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:57:5: 57:22
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb325: {
        unreachable;                     // scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb326: {
        _346 = ((_10 as Some).0: bool);  // scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _344 = _346;                     // scope 120 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb331;                   // scope 115 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb327: {
        _348 = discriminant(_347);       // scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _348) -> [0: bb330, 1: bb328, otherwise: bb329]; // scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb328: {
        _350 = move ((_347 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _350); // scope 122 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 115 at no-location
    }

    bb329: {
        unreachable;                     // scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb330: {
        _349 = ((_347 as Ok).0: bool);   // scope 115 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _344 = _349;                     // scope 121 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb331;                   // scope 115 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb331: {
        _352 = discriminant(_11);        // scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _352) -> [0: bb332, 1: bb334, otherwise: bb333]; // scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb332: {
        _354 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "fragments_capacity") -> [return: bb335, unwind: bb496]; // scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:58:5: 58:23
                                         // + literal: Const { ty: fn(&'static str) -> Result<usize, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb333: {
        unreachable;                     // scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb334: {
        _353 = ((_11 as Some).0: usize); // scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _351 = _353;                     // scope 124 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb339;                   // scope 119 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb335: {
        _355 = discriminant(_354);       // scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _355) -> [0: bb338, 1: bb336, otherwise: bb337]; // scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb336: {
        _357 = move ((_354 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _357); // scope 126 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 119 at no-location
    }

    bb337: {
        unreachable;                     // scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb338: {
        _356 = ((_354 as Ok).0: usize);  // scope 119 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _351 = _356;                     // scope 125 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb339;                   // scope 119 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb339: {
        _359 = discriminant(_12);        // scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _359) -> [0: bb340, 1: bb342, otherwise: bb341]; // scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb340: {
        _361 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "fragments_grow") -> [return: bb343, unwind: bb496]; // scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:59:5: 59:19
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb341: {
        unreachable;                     // scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb342: {
        _360 = ((_12 as Some).0: bool);  // scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _358 = _360;                     // scope 128 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb347;                   // scope 123 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb343: {
        _362 = discriminant(_361);       // scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _362) -> [0: bb346, 1: bb344, otherwise: bb345]; // scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb344: {
        _364 = move ((_361 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _364); // scope 130 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 123 at no-location
    }

    bb345: {
        unreachable;                     // scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb346: {
        _363 = ((_361 as Ok).0: bool);   // scope 123 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _358 = _363;                     // scope 129 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb347;                   // scope 123 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb347: {
        _366 = discriminant(_13);        // scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _366) -> [0: bb348, 1: bb350, otherwise: bb349]; // scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb348: {
        _368 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "fragment_size") -> [return: bb351, unwind: bb496]; // scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:60:5: 60:18
                                         // + literal: Const { ty: fn(&'static str) -> Result<usize, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb349: {
        unreachable;                     // scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb350: {
        _367 = ((_13 as Some).0: usize); // scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _365 = _367;                     // scope 132 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb355;                   // scope 127 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb351: {
        _369 = discriminant(_368);       // scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _369) -> [0: bb354, 1: bb352, otherwise: bb353]; // scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb352: {
        _371 = move ((_368 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _371); // scope 134 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 127 at no-location
    }

    bb353: {
        unreachable;                     // scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb354: {
        _370 = ((_368 as Ok).0: usize);  // scope 127 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _365 = _370;                     // scope 133 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb355;                   // scope 127 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb355: {
        _373 = discriminant(_14);        // scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _373) -> [0: bb356, 1: bb358, otherwise: bb357]; // scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb356: {
        _375 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "in_buffer_capacity") -> [return: bb359, unwind: bb496]; // scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:61:5: 61:23
                                         // + literal: Const { ty: fn(&'static str) -> Result<usize, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb357: {
        unreachable;                     // scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb358: {
        _374 = ((_14 as Some).0: usize); // scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _372 = _374;                     // scope 136 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb363;                   // scope 131 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb359: {
        _376 = discriminant(_375);       // scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _376) -> [0: bb362, 1: bb360, otherwise: bb361]; // scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb360: {
        _378 = move ((_375 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _378); // scope 138 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 131 at no-location
    }

    bb361: {
        unreachable;                     // scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb362: {
        _377 = ((_375 as Ok).0: usize);  // scope 131 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _372 = _377;                     // scope 137 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb363;                   // scope 131 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb363: {
        _380 = discriminant(_15);        // scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _380) -> [0: bb364, 1: bb366, otherwise: bb365]; // scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb364: {
        _382 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "in_buffer_grow") -> [return: bb367, unwind: bb496]; // scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:62:5: 62:19
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb365: {
        unreachable;                     // scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb366: {
        _381 = ((_15 as Some).0: bool);  // scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _379 = _381;                     // scope 140 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb371;                   // scope 135 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb367: {
        _383 = discriminant(_382);       // scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _383) -> [0: bb370, 1: bb368, otherwise: bb369]; // scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb368: {
        _385 = move ((_382 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _385); // scope 142 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 135 at no-location
    }

    bb369: {
        unreachable;                     // scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb370: {
        _384 = ((_382 as Ok).0: bool);   // scope 135 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _379 = _384;                     // scope 141 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb371;                   // scope 135 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb371: {
        _387 = discriminant(_16);        // scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _387) -> [0: bb372, 1: bb374, otherwise: bb373]; // scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb372: {
        _389 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>(const "out_buffer_capacity") -> [return: bb375, unwind: bb496]; // scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:63:5: 63:24
                                         // + literal: Const { ty: fn(&'static str) -> Result<usize, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, usize, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb373: {
        unreachable;                     // scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb374: {
        _388 = ((_16 as Some).0: usize); // scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _386 = _388;                     // scope 144 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb379;                   // scope 139 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb375: {
        _390 = discriminant(_389);       // scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _390) -> [0: bb378, 1: bb376, otherwise: bb377]; // scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb376: {
        _392 = move ((_389 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _392); // scope 146 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 139 at no-location
    }

    bb377: {
        unreachable;                     // scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb378: {
        _391 = ((_389 as Ok).0: usize);  // scope 139 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _386 = _391;                     // scope 145 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb379;                   // scope 139 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb379: {
        _394 = discriminant(_17);        // scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _394) -> [0: bb380, 1: bb382, otherwise: bb381]; // scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb380: {
        _396 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "out_buffer_grow") -> [return: bb383, unwind: bb496]; // scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:64:5: 64:20
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb381: {
        unreachable;                     // scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb382: {
        _395 = ((_17 as Some).0: bool);  // scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _393 = _395;                     // scope 148 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb387;                   // scope 143 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb383: {
        _397 = discriminant(_396);       // scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _397) -> [0: bb386, 1: bb384, otherwise: bb385]; // scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb384: {
        _399 = move ((_396 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _399); // scope 150 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 143 at no-location
    }

    bb385: {
        unreachable;                     // scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb386: {
        _398 = ((_396 as Ok).0: bool);   // scope 143 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _393 = _398;                     // scope 149 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb387;                   // scope 143 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb387: {
        _401 = discriminant(_18);        // scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _401) -> [0: bb388, 1: bb390, otherwise: bb389]; // scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb388: {
        _403 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "panic_on_internal") -> [return: bb391, unwind: bb496]; // scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:65:5: 65:22
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb389: {
        unreachable;                     // scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb390: {
        _402 = ((_18 as Some).0: bool);  // scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _400 = _402;                     // scope 152 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb395;                   // scope 147 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb391: {
        _404 = discriminant(_403);       // scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _404) -> [0: bb394, 1: bb392, otherwise: bb393]; // scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb392: {
        _406 = move ((_403 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _406); // scope 154 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 147 at no-location
    }

    bb393: {
        unreachable;                     // scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb394: {
        _405 = ((_403 as Ok).0: bool);   // scope 147 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _400 = _405;                     // scope 153 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb395;                   // scope 147 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb395: {
        _408 = discriminant(_19);        // scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _408) -> [0: bb396, 1: bb398, otherwise: bb397]; // scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb396: {
        _410 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "panic_on_capacity") -> [return: bb399, unwind: bb496]; // scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:66:5: 66:22
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb397: {
        unreachable;                     // scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb398: {
        _409 = ((_19 as Some).0: bool);  // scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _407 = _409;                     // scope 156 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb403;                   // scope 151 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb399: {
        _411 = discriminant(_410);       // scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _411) -> [0: bb402, 1: bb400, otherwise: bb401]; // scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb400: {
        _413 = move ((_410 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _413); // scope 158 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 151 at no-location
    }

    bb401: {
        unreachable;                     // scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb402: {
        _412 = ((_410 as Ok).0: bool);   // scope 151 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _407 = _412;                     // scope 157 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb403;                   // scope 151 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb403: {
        _415 = discriminant(_20);        // scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _415) -> [0: bb404, 1: bb406, otherwise: bb405]; // scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb404: {
        _417 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "panic_on_protocol") -> [return: bb407, unwind: bb496]; // scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:67:5: 67:22
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb405: {
        unreachable;                     // scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb406: {
        _416 = ((_20 as Some).0: bool);  // scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _414 = _416;                     // scope 160 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb411;                   // scope 155 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb407: {
        _418 = discriminant(_417);       // scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _418) -> [0: bb410, 1: bb408, otherwise: bb409]; // scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb408: {
        _420 = move ((_417 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _420); // scope 162 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 155 at no-location
    }

    bb409: {
        unreachable;                     // scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb410: {
        _419 = ((_417 as Ok).0: bool);   // scope 155 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _414 = _419;                     // scope 161 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb411;                   // scope 155 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb411: {
        _422 = discriminant(_21);        // scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _422) -> [0: bb412, 1: bb414, otherwise: bb413]; // scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb412: {
        _424 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "panic_on_encoding") -> [return: bb415, unwind: bb496]; // scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:68:5: 68:22
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb413: {
        unreachable;                     // scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb414: {
        _423 = ((_21 as Some).0: bool);  // scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _421 = _423;                     // scope 164 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb419;                   // scope 159 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb415: {
        _425 = discriminant(_424);       // scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _425) -> [0: bb418, 1: bb416, otherwise: bb417]; // scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb416: {
        _427 = move ((_424 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _427); // scope 166 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 159 at no-location
    }

    bb417: {
        unreachable;                     // scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb418: {
        _426 = ((_424 as Ok).0: bool);   // scope 159 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _421 = _426;                     // scope 165 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb419;                   // scope 159 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb419: {
        _429 = discriminant(_22);        // scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _429) -> [0: bb420, 1: bb422, otherwise: bb421]; // scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb420: {
        _431 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "panic_on_queue") -> [return: bb423, unwind: bb496]; // scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:69:5: 69:19
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb421: {
        unreachable;                     // scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb422: {
        _430 = ((_22 as Some).0: bool);  // scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _428 = _430;                     // scope 168 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb427;                   // scope 163 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb423: {
        _432 = discriminant(_431);       // scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _432) -> [0: bb426, 1: bb424, otherwise: bb425]; // scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb424: {
        _434 = move ((_431 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _434); // scope 170 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 163 at no-location
    }

    bb425: {
        unreachable;                     // scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb426: {
        _433 = ((_431 as Ok).0: bool);   // scope 163 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _428 = _433;                     // scope 169 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb427;                   // scope 163 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb427: {
        _436 = discriminant(_23);        // scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _436) -> [0: bb428, 1: bb430, otherwise: bb429]; // scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb428: {
        _438 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "panic_on_io") -> [return: bb431, unwind: bb496]; // scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:70:5: 70:16
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb429: {
        unreachable;                     // scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb430: {
        _437 = ((_23 as Some).0: bool);  // scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _435 = _437;                     // scope 172 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb435;                   // scope 167 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb431: {
        _439 = discriminant(_438);       // scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _439) -> [0: bb434, 1: bb432, otherwise: bb433]; // scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb432: {
        _441 = move ((_438 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _441); // scope 174 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 167 at no-location
    }

    bb433: {
        unreachable;                     // scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb434: {
        _440 = ((_438 as Ok).0: bool);   // scope 167 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _435 = _440;                     // scope 173 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb435;                   // scope 167 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb435: {
        _443 = discriminant(_24);        // scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _443) -> [0: bb436, 1: bb438, otherwise: bb437]; // scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb436: {
        _445 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "panic_on_timeout") -> [return: bb439, unwind: bb496]; // scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:71:5: 71:21
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb437: {
        unreachable;                     // scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb438: {
        _444 = ((_24 as Some).0: bool);  // scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _442 = _444;                     // scope 176 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb443;                   // scope 171 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb439: {
        _446 = discriminant(_445);       // scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _446) -> [0: bb442, 1: bb440, otherwise: bb441]; // scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb440: {
        _448 = move ((_445 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _448); // scope 178 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 171 at no-location
    }

    bb441: {
        unreachable;                     // scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb442: {
        _447 = ((_445 as Ok).0: bool);   // scope 171 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _442 = _447;                     // scope 177 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb443;                   // scope 171 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb443: {
        _450 = discriminant(_25);        // scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _450) -> [0: bb444, 1: bb446, otherwise: bb445]; // scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb444: {
        _452 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "shutdown_on_interrupt") -> [return: bb447, unwind: bb496]; // scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:72:5: 72:26
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb445: {
        unreachable;                     // scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb446: {
        _451 = ((_25 as Some).0: bool);  // scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _449 = _451;                     // scope 180 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb451;                   // scope 175 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb447: {
        _453 = discriminant(_452);       // scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _453) -> [0: bb450, 1: bb448, otherwise: bb449]; // scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb448: {
        _455 = move ((_452 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _455); // scope 182 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 175 at no-location
    }

    bb449: {
        unreachable;                     // scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb450: {
        _454 = ((_452 as Ok).0: bool);   // scope 175 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _449 = _454;                     // scope 181 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb451;                   // scope 175 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb451: {
        _457 = discriminant(_26);        // scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _457) -> [0: bb452, 1: bb454, otherwise: bb453]; // scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb452: {
        _459 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "masking_strict") -> [return: bb455, unwind: bb496]; // scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:73:5: 73:19
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb453: {
        unreachable;                     // scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb454: {
        _458 = ((_26 as Some).0: bool);  // scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _456 = _458;                     // scope 184 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb459;                   // scope 179 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb455: {
        _460 = discriminant(_459);       // scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _460) -> [0: bb458, 1: bb456, otherwise: bb457]; // scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb456: {
        _462 = move ((_459 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _462); // scope 186 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 179 at no-location
    }

    bb457: {
        unreachable;                     // scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb458: {
        _461 = ((_459 as Ok).0: bool);   // scope 179 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _456 = _461;                     // scope 185 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb459;                   // scope 179 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb459: {
        _464 = discriminant(_27);        // scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _464) -> [0: bb460, 1: bb462, otherwise: bb461]; // scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb460: {
        _466 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "key_strict") -> [return: bb463, unwind: bb496]; // scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:74:5: 74:15
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb461: {
        unreachable;                     // scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb462: {
        _465 = ((_27 as Some).0: bool);  // scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _463 = _465;                     // scope 188 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb467;                   // scope 183 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb463: {
        _467 = discriminant(_466);       // scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _467) -> [0: bb466, 1: bb464, otherwise: bb465]; // scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb464: {
        _469 = move ((_466 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _469); // scope 190 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 183 at no-location
    }

    bb465: {
        unreachable;                     // scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb466: {
        _468 = ((_466 as Ok).0: bool);   // scope 183 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _463 = _468;                     // scope 189 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb467;                   // scope 183 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb467: {
        _471 = discriminant(_28);        // scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _471) -> [0: bb468, 1: bb470, otherwise: bb469]; // scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb468: {
        _473 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "method_strict") -> [return: bb471, unwind: bb496]; // scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:75:5: 75:18
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb469: {
        unreachable;                     // scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb470: {
        _472 = ((_28 as Some).0: bool);  // scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _470 = _472;                     // scope 192 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb475;                   // scope 187 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb471: {
        _474 = discriminant(_473);       // scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _474) -> [0: bb474, 1: bb472, otherwise: bb473]; // scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb472: {
        _476 = move ((_473 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _476); // scope 194 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 187 at no-location
    }

    bb473: {
        unreachable;                     // scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb474: {
        _475 = ((_473 as Ok).0: bool);   // scope 187 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _470 = _475;                     // scope 193 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb475;                   // scope 187 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb475: {
        _478 = discriminant(_29);        // scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _478) -> [0: bb476, 1: bb478, otherwise: bb477]; // scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb476: {
        _480 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "encrypt_server") -> [return: bb479, unwind: bb496]; // scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:76:5: 76:19
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb477: {
        unreachable;                     // scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb478: {
        _479 = ((_29 as Some).0: bool);  // scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _477 = _479;                     // scope 196 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb483;                   // scope 191 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb479: {
        _481 = discriminant(_480);       // scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _481) -> [0: bb482, 1: bb480, otherwise: bb481]; // scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb480: {
        _483 = move ((_480 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _483); // scope 198 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 191 at no-location
    }

    bb481: {
        unreachable;                     // scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb482: {
        _482 = ((_480 as Ok).0: bool);   // scope 191 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _477 = _482;                     // scope 197 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb483;                   // scope 191 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb483: {
        _485 = discriminant(_30);        // scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _485) -> [0: bb484, 1: bb486, otherwise: bb485]; // scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb484: {
        _487 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "tcp_nodelay") -> [return: bb487, unwind: bb496]; // scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:77:5: 77:16
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb485: {
        unreachable;                     // scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb486: {
        _486 = ((_30 as Some).0: bool);  // scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _484 = _486;                     // scope 200 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb491;                   // scope 195 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb487: {
        _488 = discriminant(_487);       // scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
        switchInt(move _488) -> [0: bb490, 1: bb488, otherwise: bb489]; // scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb488: {
        _490 = move ((_487 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Err(move _490); // scope 202 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb492;                   // scope 195 at no-location
    }

    bb489: {
        unreachable;                     // scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb490: {
        _489 = ((_487 as Ok).0: bool);   // scope 195 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _484 = _489;                     // scope 201 at cita-jsonrpc/src/config.rs:47:21: 47:32
        goto -> bb491;                   // scope 195 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb491: {
        _492 = _295;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _493 = _302;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _494 = move _309;                // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _495 = move _316;                // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _496 = _323;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _497 = _330;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _498 = _337;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _499 = _344;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _500 = _351;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _501 = _358;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _502 = _365;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _503 = _372;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _504 = _379;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _505 = _386;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _506 = _393;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _507 = _400;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _508 = _407;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _509 = _414;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _510 = _421;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _511 = _428;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _512 = _435;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _513 = _442;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _514 = _449;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _515 = _456;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _516 = _463;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _517 = _470;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _518 = _477;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _519 = _484;                     // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _491 = WsConfig { enable: move _492, thread_number: move _493, listen_ip: move _494, listen_port: move _495, max_connections: move _496, queue_size: move _497, panic_on_new_connection: move _498, panic_on_shutdown: move _499, fragments_capacity: move _500, fragments_grow: move _501, fragment_size: move _502, in_buffer_capacity: move _503, in_buffer_grow: move _504, out_buffer_capacity: move _505, out_buffer_grow: move _506, panic_on_internal: move _507, panic_on_capacity: move _508, panic_on_protocol: move _509, panic_on_encoding: move _510, panic_on_queue: move _511, panic_on_io: move _512, panic_on_timeout: move _513, shutdown_on_interrupt: move _514, masking_strict: move _515, key_strict: move _516, method_strict: move _517, encrypt_server: move _518, tcp_nodelay: move _519 }; // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = Result::<WsConfig, <__A as MapAccess<'_>>::Error>::Ok(move _491); // scope 199 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _520 = const false;              // scope 3 at cita-jsonrpc/src/config.rs:47:31: 47:32
        _521 = const false;              // scope 2 at cita-jsonrpc/src/config.rs:47:31: 47:32
        drop(_2) -> bb495;               // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb492: {
        drop(_316) -> [return: bb493, unwind: bb497]; // scope 99 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb493: {
        drop(_309) -> [return: bb494, unwind: bb509]; // scope 95 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb494: {
        _522 = discriminant(_6);         // scope 3 at cita-jsonrpc/src/config.rs:47:31: 47:32
        switchInt(move _522) -> [1: bb502, otherwise: bb501]; // scope 3 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb495: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:32: 47:32
    }

    bb496 (cleanup): {
        drop(_316) -> bb497;             // scope 99 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb497 (cleanup): {
        drop(_309) -> bb509;             // scope 95 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb498 (cleanup): {
        _525 = discriminant(_5);         // scope 2 at cita-jsonrpc/src/config.rs:47:31: 47:32
        switchInt(move _525) -> [1: bb510, otherwise: bb499]; // scope 2 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb499 (cleanup): {
        drop(_2) -> bb500;               // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb500 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }

    bb501: {
        _520 = const false;              // scope 3 at cita-jsonrpc/src/config.rs:47:31: 47:32
        _523 = discriminant(_5);         // scope 2 at cita-jsonrpc/src/config.rs:47:31: 47:32
        switchInt(move _523) -> [1: bb505, otherwise: bb504]; // scope 2 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb502: {
        switchInt(_520) -> [0: bb501, otherwise: bb503]; // scope 3 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb503: {
        drop(((_6 as Some).0: std::string::String)) -> [return: bb501, unwind: bb498]; // scope 3 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb504: {
        _521 = const false;              // scope 2 at cita-jsonrpc/src/config.rs:47:31: 47:32
        drop(_2) -> bb495;               // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb505: {
        switchInt(_521) -> [0: bb504, otherwise: bb506]; // scope 2 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb506: {
        drop(((_5 as Some).0: std::string::String)) -> [return: bb504, unwind: bb499]; // scope 2 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb507 (cleanup): {
        switchInt(_520) -> [0: bb498, otherwise: bb508]; // scope 3 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb508 (cleanup): {
        drop(((_6 as Some).0: std::string::String)) -> bb498; // scope 3 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb509 (cleanup): {
        _524 = discriminant(_6);         // scope 3 at cita-jsonrpc/src/config.rs:47:31: 47:32
        switchInt(move _524) -> [1: bb507, otherwise: bb498]; // scope 3 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb510 (cleanup): {
        switchInt(_521) -> [0: bb499, otherwise: bb511]; // scope 2 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }

    bb511 (cleanup): {
        drop(((_5 as Some).0: std::string::String)) -> bb499; // scope 2 at cita-jsonrpc/src/config.rs:47:31: 47:32
    }
}

const _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: &[&str; 28];             // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _2: &[&str; 28];                 // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let _3: [&str; 28];                  // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _4: &[&str; 28];             // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        StorageLive(_1);                 // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        StorageLive(_2);                 // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _4 = const _;                    // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &[&str; 28], val: Unevaluated(_IMPL_DESERIALIZE_FOR_WsConfig::<impl Deserialize<'de> for WsConfig>::deserialize::FIELDS, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _1 = &(*_2);                     // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        StorageDead(_2);                 // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
        StorageDead(_1);                 // scope 0 at cita-jsonrpc/src/config.rs:47:31: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_WsConfig::<impl at cita-jsonrpc/src/config.rs:47:21: 47:32>::deserialize::FIELDS: &[&str; 28] = {
    let mut _0: &[&str; 28];             // return place in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    let mut _1: [&str; 28];              // in scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32

    bb0: {
        _1 = [const "enable", const "thread_number", const "listen_ip", const "listen_port", const "max_connections", const "queue_size", const "panic_on_new_connection", const "panic_on_shutdown", const "fragments_capacity", const "fragments_grow", const "fragment_size", const "in_buffer_capacity", const "in_buffer_grow", const "out_buffer_capacity", const "out_buffer_grow", const "panic_on_internal", const "panic_on_capacity", const "panic_on_protocol", const "panic_on_encoding", const "panic_on_queue", const "panic_on_io", const "panic_on_timeout", const "shutdown_on_interrupt", const "masking_strict", const "key_strict", const "method_strict", const "encrypt_server", const "tcp_nodelay"]; // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:21: 47:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:21: 47:32
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:47:34: 47:39>::fmt(_1: &WsConfig, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
    debug f => _2;                       // in scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
    let _4: &[&dyn std::fmt::Debug; 28]; // in scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
    let _5: [&dyn std::fmt::Debug; 28];  // in scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/config.rs:49:5: 49:21
    let _7: &bool;                       // in scope 0 at cita-jsonrpc/src/config.rs:49:5: 49:21
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/config.rs:50:5: 50:29
    let _9: &usize;                      // in scope 0 at cita-jsonrpc/src/config.rs:50:5: 50:29
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:51:5: 51:26
    let _11: &std::string::String;       // in scope 0 at cita-jsonrpc/src/config.rs:51:5: 51:26
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:52:5: 52:28
    let _13: &std::string::String;       // in scope 0 at cita-jsonrpc/src/config.rs:52:5: 52:28
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:54:5: 54:27
    let _15: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:54:5: 54:27
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:55:5: 55:22
    let _17: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:55:5: 55:22
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:56:5: 56:34
    let _19: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:56:5: 56:34
    let mut _20: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:57:5: 57:28
    let _21: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:57:5: 57:28
    let mut _22: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:58:5: 58:30
    let _23: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:58:5: 58:30
    let mut _24: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:59:5: 59:25
    let _25: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:59:5: 59:25
    let mut _26: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:60:5: 60:25
    let _27: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:60:5: 60:25
    let mut _28: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:61:5: 61:30
    let _29: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:61:5: 61:30
    let mut _30: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:62:5: 62:25
    let _31: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:62:5: 62:25
    let mut _32: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:63:5: 63:31
    let _33: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:63:5: 63:31
    let mut _34: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:64:5: 64:26
    let _35: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:64:5: 64:26
    let mut _36: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:65:5: 65:28
    let _37: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:65:5: 65:28
    let mut _38: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:66:5: 66:28
    let _39: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:66:5: 66:28
    let mut _40: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:67:5: 67:28
    let _41: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:67:5: 67:28
    let mut _42: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:68:5: 68:28
    let _43: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:68:5: 68:28
    let mut _44: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:69:5: 69:25
    let _45: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:69:5: 69:25
    let mut _46: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:70:5: 70:22
    let _47: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:70:5: 70:22
    let mut _48: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:71:5: 71:27
    let _49: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:71:5: 71:27
    let mut _50: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:72:5: 72:32
    let _51: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:72:5: 72:32
    let mut _52: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:73:5: 73:25
    let _53: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:73:5: 73:25
    let mut _54: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:74:5: 74:21
    let _55: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:74:5: 74:21
    let mut _56: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:75:5: 75:24
    let _57: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:75:5: 75:24
    let mut _58: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:76:5: 76:25
    let _59: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:76:5: 76:25
    let mut _60: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:77:5: 77:22
    let _61: &&bool;                     // in scope 0 at cita-jsonrpc/src/config.rs:77:5: 77:22
    let _62: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:77:5: 77:22
    let _63: &str;                       // in scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
    let mut _64: &[&str];                // in scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
    let mut _65: &[&str; 28];            // in scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
    scope 1 {
        debug names => _65;              // in scope 1 at cita-jsonrpc/src/config.rs:47:34: 47:39
        let _3: &[&dyn std::fmt::Debug]; // in scope 1 at cita-jsonrpc/src/config.rs:47:34: 47:39
        scope 2 {
            debug values => _3;          // in scope 2 at cita-jsonrpc/src/config.rs:47:34: 47:39
        }
    }

    bb0: {
        _65 = const _;                   // scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:34: 47:39
                                         // + literal: Const { ty: &[&str; 28], val: Unevaluated(<WsConfig as Debug>::fmt, [], Some(promoted[0])) }
        _7 = &((*_1).0: bool);           // scope 1 at cita-jsonrpc/src/config.rs:49:5: 49:21
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:49:5: 49:21
        _9 = &((*_1).1: usize);          // scope 1 at cita-jsonrpc/src/config.rs:50:5: 50:29
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:50:5: 50:29
        _11 = &((*_1).2: std::string::String); // scope 1 at cita-jsonrpc/src/config.rs:51:5: 51:26
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:51:5: 51:26
        _13 = &((*_1).3: std::string::String); // scope 1 at cita-jsonrpc/src/config.rs:52:5: 52:28
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:52:5: 52:28
        _15 = &((*_1).4: usize);         // scope 1 at cita-jsonrpc/src/config.rs:54:5: 54:27
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:54:5: 54:27
        _17 = &((*_1).5: usize);         // scope 1 at cita-jsonrpc/src/config.rs:55:5: 55:22
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:55:5: 55:22
        _19 = &((*_1).6: bool);          // scope 1 at cita-jsonrpc/src/config.rs:56:5: 56:34
        _18 = _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:56:5: 56:34
        _21 = &((*_1).7: bool);          // scope 1 at cita-jsonrpc/src/config.rs:57:5: 57:28
        _20 = _21 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:57:5: 57:28
        _23 = &((*_1).8: usize);         // scope 1 at cita-jsonrpc/src/config.rs:58:5: 58:30
        _22 = _23 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:58:5: 58:30
        _25 = &((*_1).9: bool);          // scope 1 at cita-jsonrpc/src/config.rs:59:5: 59:25
        _24 = _25 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:59:5: 59:25
        _27 = &((*_1).10: usize);        // scope 1 at cita-jsonrpc/src/config.rs:60:5: 60:25
        _26 = _27 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:60:5: 60:25
        _29 = &((*_1).11: usize);        // scope 1 at cita-jsonrpc/src/config.rs:61:5: 61:30
        _28 = _29 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:61:5: 61:30
        _31 = &((*_1).12: bool);         // scope 1 at cita-jsonrpc/src/config.rs:62:5: 62:25
        _30 = _31 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:62:5: 62:25
        _33 = &((*_1).13: usize);        // scope 1 at cita-jsonrpc/src/config.rs:63:5: 63:31
        _32 = _33 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:63:5: 63:31
        _35 = &((*_1).14: bool);         // scope 1 at cita-jsonrpc/src/config.rs:64:5: 64:26
        _34 = _35 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:64:5: 64:26
        _37 = &((*_1).15: bool);         // scope 1 at cita-jsonrpc/src/config.rs:65:5: 65:28
        _36 = _37 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:65:5: 65:28
        _39 = &((*_1).16: bool);         // scope 1 at cita-jsonrpc/src/config.rs:66:5: 66:28
        _38 = _39 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:66:5: 66:28
        _41 = &((*_1).17: bool);         // scope 1 at cita-jsonrpc/src/config.rs:67:5: 67:28
        _40 = _41 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:67:5: 67:28
        _43 = &((*_1).18: bool);         // scope 1 at cita-jsonrpc/src/config.rs:68:5: 68:28
        _42 = _43 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:68:5: 68:28
        _45 = &((*_1).19: bool);         // scope 1 at cita-jsonrpc/src/config.rs:69:5: 69:25
        _44 = _45 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:69:5: 69:25
        _47 = &((*_1).20: bool);         // scope 1 at cita-jsonrpc/src/config.rs:70:5: 70:22
        _46 = _47 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:70:5: 70:22
        _49 = &((*_1).21: bool);         // scope 1 at cita-jsonrpc/src/config.rs:71:5: 71:27
        _48 = _49 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:71:5: 71:27
        _51 = &((*_1).22: bool);         // scope 1 at cita-jsonrpc/src/config.rs:72:5: 72:32
        _50 = _51 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:72:5: 72:32
        _53 = &((*_1).23: bool);         // scope 1 at cita-jsonrpc/src/config.rs:73:5: 73:25
        _52 = _53 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:73:5: 73:25
        _55 = &((*_1).24: bool);         // scope 1 at cita-jsonrpc/src/config.rs:74:5: 74:21
        _54 = _55 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:74:5: 74:21
        _57 = &((*_1).25: bool);         // scope 1 at cita-jsonrpc/src/config.rs:75:5: 75:24
        _56 = _57 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:75:5: 75:24
        _59 = &((*_1).26: bool);         // scope 1 at cita-jsonrpc/src/config.rs:76:5: 76:25
        _58 = _59 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:76:5: 76:25
        _62 = &((*_1).27: bool);         // scope 1 at cita-jsonrpc/src/config.rs:77:5: 77:22
        _61 = &_62;                      // scope 1 at cita-jsonrpc/src/config.rs:77:5: 77:22
        _60 = _61 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:77:5: 77:22
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54, move _56, move _58, move _60]; // scope 1 at cita-jsonrpc/src/config.rs:47:34: 47:39
        _4 = &_5;                        // scope 1 at cita-jsonrpc/src/config.rs:47:34: 47:39
        _3 = _4 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:47:34: 47:39
        _63 = const "WsConfig";          // scope 2 at cita-jsonrpc/src/config.rs:47:34: 47:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:34: 47:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _64 = _65 as &[&str] (Pointer(Unsize)); // scope 2 at cita-jsonrpc/src/config.rs:47:34: 47:39
        _0 = std::fmt::Formatter::<'_>::debug_struct_fields_finish(_2, _63, move _64, _3) -> bb1; // scope 2 at cita-jsonrpc/src/config.rs:47:34: 47:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:47:34: 47:39
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:39: 47:39
    }
}

promoted[0] in config::<impl at cita-jsonrpc/src/config.rs:47:34: 47:39>::fmt: &[&str; 28] = {
    let mut _0: &[&str; 28];             // return place in scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
    let mut _1: [&str; 28];              // in scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
    let mut _2: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:50:5: 50:29
    let mut _3: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:50:5: 50:29
    let mut _4: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:51:5: 51:26
    let mut _5: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:51:5: 51:26
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:52:5: 52:28
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:52:5: 52:28
    let mut _8: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:54:5: 54:27
    let mut _9: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:54:5: 54:27
    let mut _10: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:55:5: 55:22
    let mut _11: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:55:5: 55:22
    let mut _12: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:56:5: 56:34
    let mut _13: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:56:5: 56:34
    let mut _14: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:57:5: 57:28
    let mut _15: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:57:5: 57:28
    let mut _16: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:58:5: 58:30
    let mut _17: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:58:5: 58:30
    let mut _18: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:59:5: 59:25
    let mut _19: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:59:5: 59:25
    let mut _20: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:60:5: 60:25
    let mut _21: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:60:5: 60:25
    let mut _22: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:61:5: 61:30
    let mut _23: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:61:5: 61:30
    let mut _24: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:62:5: 62:25
    let mut _25: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:62:5: 62:25
    let mut _26: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:63:5: 63:31
    let mut _27: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:63:5: 63:31
    let mut _28: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:64:5: 64:26
    let mut _29: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:64:5: 64:26
    let mut _30: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:65:5: 65:28
    let mut _31: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:65:5: 65:28
    let mut _32: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:66:5: 66:28
    let mut _33: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:66:5: 66:28
    let mut _34: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:67:5: 67:28
    let mut _35: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:67:5: 67:28
    let mut _36: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:68:5: 68:28
    let mut _37: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:68:5: 68:28
    let mut _38: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:69:5: 69:25
    let mut _39: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:69:5: 69:25
    let mut _40: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:70:5: 70:22
    let mut _41: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:70:5: 70:22
    let mut _42: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:71:5: 71:27
    let mut _43: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:71:5: 71:27
    let mut _44: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:72:5: 72:32
    let mut _45: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:72:5: 72:32
    let mut _46: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:73:5: 73:25
    let mut _47: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:73:5: 73:25
    let mut _48: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:74:5: 74:21
    let mut _49: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:74:5: 74:21
    let mut _50: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:75:5: 75:24
    let mut _51: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:75:5: 75:24
    let mut _52: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:76:5: 76:25
    let mut _53: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:76:5: 76:25
    let mut _54: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:77:5: 77:22
    let mut _55: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:77:5: 77:22

    bb0: {
        _3 = const "thread_number";      // scope 0 at cita-jsonrpc/src/config.rs:50:5: 50:29
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:50:5: 50:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-jsonrpc/src/config.rs:50:5: 50:29
        _5 = const "listen_ip";          // scope 0 at cita-jsonrpc/src/config.rs:51:5: 51:26
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:51:5: 51:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at cita-jsonrpc/src/config.rs:51:5: 51:26
        _7 = const "listen_port";        // scope 0 at cita-jsonrpc/src/config.rs:52:5: 52:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:52:5: 52:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/config.rs:52:5: 52:28
        _9 = const "max_connections";    // scope 0 at cita-jsonrpc/src/config.rs:54:5: 54:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:54:5: 54:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at cita-jsonrpc/src/config.rs:54:5: 54:27
        _11 = const "queue_size";        // scope 0 at cita-jsonrpc/src/config.rs:55:5: 55:22
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:55:5: 55:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at cita-jsonrpc/src/config.rs:55:5: 55:22
        _13 = const "panic_on_new_connection"; // scope 0 at cita-jsonrpc/src/config.rs:56:5: 56:34
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:56:5: 56:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &(*_13);                   // scope 0 at cita-jsonrpc/src/config.rs:56:5: 56:34
        _15 = const "panic_on_shutdown"; // scope 0 at cita-jsonrpc/src/config.rs:57:5: 57:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:57:5: 57:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = &(*_15);                   // scope 0 at cita-jsonrpc/src/config.rs:57:5: 57:28
        _17 = const "fragments_capacity"; // scope 0 at cita-jsonrpc/src/config.rs:58:5: 58:30
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:58:5: 58:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = &(*_17);                   // scope 0 at cita-jsonrpc/src/config.rs:58:5: 58:30
        _19 = const "fragments_grow";    // scope 0 at cita-jsonrpc/src/config.rs:59:5: 59:25
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:59:5: 59:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _18 = &(*_19);                   // scope 0 at cita-jsonrpc/src/config.rs:59:5: 59:25
        _21 = const "fragment_size";     // scope 0 at cita-jsonrpc/src/config.rs:60:5: 60:25
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:60:5: 60:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = &(*_21);                   // scope 0 at cita-jsonrpc/src/config.rs:60:5: 60:25
        _23 = const "in_buffer_capacity"; // scope 0 at cita-jsonrpc/src/config.rs:61:5: 61:30
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:61:5: 61:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _22 = &(*_23);                   // scope 0 at cita-jsonrpc/src/config.rs:61:5: 61:30
        _25 = const "in_buffer_grow";    // scope 0 at cita-jsonrpc/src/config.rs:62:5: 62:25
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:62:5: 62:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = &(*_25);                   // scope 0 at cita-jsonrpc/src/config.rs:62:5: 62:25
        _27 = const "out_buffer_capacity"; // scope 0 at cita-jsonrpc/src/config.rs:63:5: 63:31
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:63:5: 63:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _26 = &(*_27);                   // scope 0 at cita-jsonrpc/src/config.rs:63:5: 63:31
        _29 = const "out_buffer_grow";   // scope 0 at cita-jsonrpc/src/config.rs:64:5: 64:26
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:64:5: 64:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _28 = &(*_29);                   // scope 0 at cita-jsonrpc/src/config.rs:64:5: 64:26
        _31 = const "panic_on_internal"; // scope 0 at cita-jsonrpc/src/config.rs:65:5: 65:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:65:5: 65:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _30 = &(*_31);                   // scope 0 at cita-jsonrpc/src/config.rs:65:5: 65:28
        _33 = const "panic_on_capacity"; // scope 0 at cita-jsonrpc/src/config.rs:66:5: 66:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:66:5: 66:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _32 = &(*_33);                   // scope 0 at cita-jsonrpc/src/config.rs:66:5: 66:28
        _35 = const "panic_on_protocol"; // scope 0 at cita-jsonrpc/src/config.rs:67:5: 67:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:67:5: 67:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _34 = &(*_35);                   // scope 0 at cita-jsonrpc/src/config.rs:67:5: 67:28
        _37 = const "panic_on_encoding"; // scope 0 at cita-jsonrpc/src/config.rs:68:5: 68:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:68:5: 68:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _36 = &(*_37);                   // scope 0 at cita-jsonrpc/src/config.rs:68:5: 68:28
        _39 = const "panic_on_queue";    // scope 0 at cita-jsonrpc/src/config.rs:69:5: 69:25
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:69:5: 69:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _38 = &(*_39);                   // scope 0 at cita-jsonrpc/src/config.rs:69:5: 69:25
        _41 = const "panic_on_io";       // scope 0 at cita-jsonrpc/src/config.rs:70:5: 70:22
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:70:5: 70:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _40 = &(*_41);                   // scope 0 at cita-jsonrpc/src/config.rs:70:5: 70:22
        _43 = const "panic_on_timeout";  // scope 0 at cita-jsonrpc/src/config.rs:71:5: 71:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:71:5: 71:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _42 = &(*_43);                   // scope 0 at cita-jsonrpc/src/config.rs:71:5: 71:27
        _45 = const "shutdown_on_interrupt"; // scope 0 at cita-jsonrpc/src/config.rs:72:5: 72:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:72:5: 72:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _44 = &(*_45);                   // scope 0 at cita-jsonrpc/src/config.rs:72:5: 72:32
        _47 = const "masking_strict";    // scope 0 at cita-jsonrpc/src/config.rs:73:5: 73:25
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:73:5: 73:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _46 = &(*_47);                   // scope 0 at cita-jsonrpc/src/config.rs:73:5: 73:25
        _49 = const "key_strict";        // scope 0 at cita-jsonrpc/src/config.rs:74:5: 74:21
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:74:5: 74:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _48 = &(*_49);                   // scope 0 at cita-jsonrpc/src/config.rs:74:5: 74:21
        _51 = const "method_strict";     // scope 0 at cita-jsonrpc/src/config.rs:75:5: 75:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:75:5: 75:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _50 = &(*_51);                   // scope 0 at cita-jsonrpc/src/config.rs:75:5: 75:24
        _53 = const "encrypt_server";    // scope 0 at cita-jsonrpc/src/config.rs:76:5: 76:25
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:76:5: 76:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _52 = &(*_53);                   // scope 0 at cita-jsonrpc/src/config.rs:76:5: 76:25
        _55 = const "tcp_nodelay";       // scope 0 at cita-jsonrpc/src/config.rs:77:5: 77:22
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:77:5: 77:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _54 = &(*_55);                   // scope 0 at cita-jsonrpc/src/config.rs:77:5: 77:22
        _1 = [const "enable", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30, move _32, move _34, move _36, move _38, move _40, move _42, move _44, move _46, move _48, move _50, move _52, move _54]; // scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:49:5: 49:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:34: 47:39
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:47:41: 47:46>::clone(_1: &WsConfig) -> WsConfig {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:47:41: 47:46
    let mut _0: config::WsConfig;        // return place in scope 0 at cita-jsonrpc/src/config.rs:47:41: 47:46
    let mut _2: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:49:5: 49:21
    let _3: &bool;                       // in scope 0 at cita-jsonrpc/src/config.rs:49:5: 49:21
    let mut _4: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:50:5: 50:29
    let _5: &usize;                      // in scope 0 at cita-jsonrpc/src/config.rs:50:5: 50:29
    let mut _6: std::string::String;     // in scope 0 at cita-jsonrpc/src/config.rs:51:5: 51:26
    let _7: &std::string::String;        // in scope 0 at cita-jsonrpc/src/config.rs:51:5: 51:26
    let mut _8: std::string::String;     // in scope 0 at cita-jsonrpc/src/config.rs:52:5: 52:28
    let _9: &std::string::String;        // in scope 0 at cita-jsonrpc/src/config.rs:52:5: 52:28
    let mut _10: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:54:5: 54:27
    let _11: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:54:5: 54:27
    let mut _12: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:55:5: 55:22
    let _13: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:55:5: 55:22
    let mut _14: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:56:5: 56:34
    let _15: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:56:5: 56:34
    let mut _16: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:57:5: 57:28
    let _17: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:57:5: 57:28
    let mut _18: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:58:5: 58:30
    let _19: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:58:5: 58:30
    let mut _20: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:59:5: 59:25
    let _21: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:59:5: 59:25
    let mut _22: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:60:5: 60:25
    let _23: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:60:5: 60:25
    let mut _24: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:61:5: 61:30
    let _25: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:61:5: 61:30
    let mut _26: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:62:5: 62:25
    let _27: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:62:5: 62:25
    let mut _28: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:63:5: 63:31
    let _29: &usize;                     // in scope 0 at cita-jsonrpc/src/config.rs:63:5: 63:31
    let mut _30: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:64:5: 64:26
    let _31: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:64:5: 64:26
    let mut _32: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:65:5: 65:28
    let _33: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:65:5: 65:28
    let mut _34: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:66:5: 66:28
    let _35: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:66:5: 66:28
    let mut _36: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:67:5: 67:28
    let _37: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:67:5: 67:28
    let mut _38: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:68:5: 68:28
    let _39: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:68:5: 68:28
    let mut _40: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:69:5: 69:25
    let _41: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:69:5: 69:25
    let mut _42: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:70:5: 70:22
    let _43: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:70:5: 70:22
    let mut _44: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:71:5: 71:27
    let _45: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:71:5: 71:27
    let mut _46: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:72:5: 72:32
    let _47: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:72:5: 72:32
    let mut _48: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:73:5: 73:25
    let _49: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:73:5: 73:25
    let mut _50: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:74:5: 74:21
    let _51: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:74:5: 74:21
    let mut _52: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:75:5: 75:24
    let _53: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:75:5: 75:24
    let mut _54: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:76:5: 76:25
    let _55: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:76:5: 76:25
    let mut _56: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:77:5: 77:22
    let _57: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:77:5: 77:22

    bb0: {
        _3 = &((*_1).0: bool);           // scope 0 at cita-jsonrpc/src/config.rs:49:5: 49:21
        _2 = (*_3);                      // scope 0 at cita-jsonrpc/src/config.rs:49:5: 49:21
        _5 = &((*_1).1: usize);          // scope 0 at cita-jsonrpc/src/config.rs:50:5: 50:29
        _4 = (*_5);                      // scope 0 at cita-jsonrpc/src/config.rs:50:5: 50:29
        _7 = &((*_1).2: std::string::String); // scope 0 at cita-jsonrpc/src/config.rs:51:5: 51:26
        _6 = <std::string::String as Clone>::clone(_7) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:51:5: 51:26
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:51:5: 51:26
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> std::string::String {<std::string::String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &((*_1).3: std::string::String); // scope 0 at cita-jsonrpc/src/config.rs:52:5: 52:28
        _8 = <std::string::String as Clone>::clone(_9) -> [return: bb2, unwind: bb3]; // scope 0 at cita-jsonrpc/src/config.rs:52:5: 52:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:52:5: 52:28
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> std::string::String {<std::string::String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &((*_1).4: usize);         // scope 0 at cita-jsonrpc/src/config.rs:54:5: 54:27
        _10 = (*_11);                    // scope 0 at cita-jsonrpc/src/config.rs:54:5: 54:27
        _13 = &((*_1).5: usize);         // scope 0 at cita-jsonrpc/src/config.rs:55:5: 55:22
        _12 = (*_13);                    // scope 0 at cita-jsonrpc/src/config.rs:55:5: 55:22
        _15 = &((*_1).6: bool);          // scope 0 at cita-jsonrpc/src/config.rs:56:5: 56:34
        _14 = (*_15);                    // scope 0 at cita-jsonrpc/src/config.rs:56:5: 56:34
        _17 = &((*_1).7: bool);          // scope 0 at cita-jsonrpc/src/config.rs:57:5: 57:28
        _16 = (*_17);                    // scope 0 at cita-jsonrpc/src/config.rs:57:5: 57:28
        _19 = &((*_1).8: usize);         // scope 0 at cita-jsonrpc/src/config.rs:58:5: 58:30
        _18 = (*_19);                    // scope 0 at cita-jsonrpc/src/config.rs:58:5: 58:30
        _21 = &((*_1).9: bool);          // scope 0 at cita-jsonrpc/src/config.rs:59:5: 59:25
        _20 = (*_21);                    // scope 0 at cita-jsonrpc/src/config.rs:59:5: 59:25
        _23 = &((*_1).10: usize);        // scope 0 at cita-jsonrpc/src/config.rs:60:5: 60:25
        _22 = (*_23);                    // scope 0 at cita-jsonrpc/src/config.rs:60:5: 60:25
        _25 = &((*_1).11: usize);        // scope 0 at cita-jsonrpc/src/config.rs:61:5: 61:30
        _24 = (*_25);                    // scope 0 at cita-jsonrpc/src/config.rs:61:5: 61:30
        _27 = &((*_1).12: bool);         // scope 0 at cita-jsonrpc/src/config.rs:62:5: 62:25
        _26 = (*_27);                    // scope 0 at cita-jsonrpc/src/config.rs:62:5: 62:25
        _29 = &((*_1).13: usize);        // scope 0 at cita-jsonrpc/src/config.rs:63:5: 63:31
        _28 = (*_29);                    // scope 0 at cita-jsonrpc/src/config.rs:63:5: 63:31
        _31 = &((*_1).14: bool);         // scope 0 at cita-jsonrpc/src/config.rs:64:5: 64:26
        _30 = (*_31);                    // scope 0 at cita-jsonrpc/src/config.rs:64:5: 64:26
        _33 = &((*_1).15: bool);         // scope 0 at cita-jsonrpc/src/config.rs:65:5: 65:28
        _32 = (*_33);                    // scope 0 at cita-jsonrpc/src/config.rs:65:5: 65:28
        _35 = &((*_1).16: bool);         // scope 0 at cita-jsonrpc/src/config.rs:66:5: 66:28
        _34 = (*_35);                    // scope 0 at cita-jsonrpc/src/config.rs:66:5: 66:28
        _37 = &((*_1).17: bool);         // scope 0 at cita-jsonrpc/src/config.rs:67:5: 67:28
        _36 = (*_37);                    // scope 0 at cita-jsonrpc/src/config.rs:67:5: 67:28
        _39 = &((*_1).18: bool);         // scope 0 at cita-jsonrpc/src/config.rs:68:5: 68:28
        _38 = (*_39);                    // scope 0 at cita-jsonrpc/src/config.rs:68:5: 68:28
        _41 = &((*_1).19: bool);         // scope 0 at cita-jsonrpc/src/config.rs:69:5: 69:25
        _40 = (*_41);                    // scope 0 at cita-jsonrpc/src/config.rs:69:5: 69:25
        _43 = &((*_1).20: bool);         // scope 0 at cita-jsonrpc/src/config.rs:70:5: 70:22
        _42 = (*_43);                    // scope 0 at cita-jsonrpc/src/config.rs:70:5: 70:22
        _45 = &((*_1).21: bool);         // scope 0 at cita-jsonrpc/src/config.rs:71:5: 71:27
        _44 = (*_45);                    // scope 0 at cita-jsonrpc/src/config.rs:71:5: 71:27
        _47 = &((*_1).22: bool);         // scope 0 at cita-jsonrpc/src/config.rs:72:5: 72:32
        _46 = (*_47);                    // scope 0 at cita-jsonrpc/src/config.rs:72:5: 72:32
        _49 = &((*_1).23: bool);         // scope 0 at cita-jsonrpc/src/config.rs:73:5: 73:25
        _48 = (*_49);                    // scope 0 at cita-jsonrpc/src/config.rs:73:5: 73:25
        _51 = &((*_1).24: bool);         // scope 0 at cita-jsonrpc/src/config.rs:74:5: 74:21
        _50 = (*_51);                    // scope 0 at cita-jsonrpc/src/config.rs:74:5: 74:21
        _53 = &((*_1).25: bool);         // scope 0 at cita-jsonrpc/src/config.rs:75:5: 75:24
        _52 = (*_53);                    // scope 0 at cita-jsonrpc/src/config.rs:75:5: 75:24
        _55 = &((*_1).26: bool);         // scope 0 at cita-jsonrpc/src/config.rs:76:5: 76:25
        _54 = (*_55);                    // scope 0 at cita-jsonrpc/src/config.rs:76:5: 76:25
        _57 = &((*_1).27: bool);         // scope 0 at cita-jsonrpc/src/config.rs:77:5: 77:22
        _56 = (*_57);                    // scope 0 at cita-jsonrpc/src/config.rs:77:5: 77:22
        _0 = WsConfig { enable: move _2, thread_number: move _4, listen_ip: move _6, listen_port: move _8, max_connections: move _10, queue_size: move _12, panic_on_new_connection: move _14, panic_on_shutdown: move _16, fragments_capacity: move _18, fragments_grow: move _20, fragment_size: move _22, in_buffer_capacity: move _24, in_buffer_grow: move _26, out_buffer_capacity: move _28, out_buffer_grow: move _30, panic_on_internal: move _32, panic_on_capacity: move _34, panic_on_protocol: move _36, panic_on_encoding: move _38, panic_on_queue: move _40, panic_on_io: move _42, panic_on_timeout: move _44, shutdown_on_interrupt: move _46, masking_strict: move _48, key_strict: move _50, method_strict: move _52, encrypt_server: move _54, tcp_nodelay: move _56 }; // scope 0 at cita-jsonrpc/src/config.rs:47:41: 47:46
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:47:46: 47:46
    }

    bb3 (cleanup): {
        drop(_6) -> bb4;                 // scope 0 at cita-jsonrpc/src/config.rs:47:45: 47:46
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:47:41: 47:46
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:80:1: 80:33>::into(_1: WsConfig) -> Settings {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:81:13: 81:17
    let mut _0: ws::Settings;            // return place in scope 0 at cita-jsonrpc/src/config.rs:81:22: 81:30
    let mut _2: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:83:30: 83:50
    let mut _3: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:84:25: 84:40
    let mut _4: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:85:38: 85:66
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:86:32: 86:54
    let mut _6: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:87:33: 87:56
    let mut _7: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:88:29: 88:48
    let mut _8: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:89:28: 89:46
    let mut _9: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:90:33: 90:56
    let mut _10: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:91:29: 91:48
    let mut _11: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:92:34: 92:58
    let mut _12: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:93:30: 93:50
    let mut _13: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:94:32: 94:54
    let mut _14: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:95:32: 95:54
    let mut _15: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:96:32: 96:54
    let mut _16: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:97:32: 97:54
    let mut _17: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:98:29: 98:48
    let mut _18: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:99:26: 99:42
    let mut _19: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:100:31: 100:52
    let mut _20: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:101:36: 101:62
    let mut _21: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:102:29: 102:48
    let mut _22: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:103:25: 103:40
    let mut _23: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:104:28: 104:46
    let mut _24: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:105:29: 105:48
    let mut _25: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:106:26: 106:42

    bb0: {
        _2 = (_1.4: usize);              // scope 0 at cita-jsonrpc/src/config.rs:83:30: 83:50
        _3 = (_1.5: usize);              // scope 0 at cita-jsonrpc/src/config.rs:84:25: 84:40
        _4 = (_1.6: bool);               // scope 0 at cita-jsonrpc/src/config.rs:85:38: 85:66
        _5 = (_1.7: bool);               // scope 0 at cita-jsonrpc/src/config.rs:86:32: 86:54
        _6 = (_1.8: usize);              // scope 0 at cita-jsonrpc/src/config.rs:87:33: 87:56
        _7 = (_1.9: bool);               // scope 0 at cita-jsonrpc/src/config.rs:88:29: 88:48
        _8 = (_1.10: usize);             // scope 0 at cita-jsonrpc/src/config.rs:89:28: 89:46
        _9 = (_1.11: usize);             // scope 0 at cita-jsonrpc/src/config.rs:90:33: 90:56
        _10 = (_1.12: bool);             // scope 0 at cita-jsonrpc/src/config.rs:91:29: 91:48
        _11 = (_1.13: usize);            // scope 0 at cita-jsonrpc/src/config.rs:92:34: 92:58
        _12 = (_1.14: bool);             // scope 0 at cita-jsonrpc/src/config.rs:93:30: 93:50
        _13 = (_1.15: bool);             // scope 0 at cita-jsonrpc/src/config.rs:94:32: 94:54
        _14 = (_1.16: bool);             // scope 0 at cita-jsonrpc/src/config.rs:95:32: 95:54
        _15 = (_1.17: bool);             // scope 0 at cita-jsonrpc/src/config.rs:96:32: 96:54
        _16 = (_1.18: bool);             // scope 0 at cita-jsonrpc/src/config.rs:97:32: 97:54
        _17 = (_1.19: bool);             // scope 0 at cita-jsonrpc/src/config.rs:98:29: 98:48
        _18 = (_1.20: bool);             // scope 0 at cita-jsonrpc/src/config.rs:99:26: 99:42
        _19 = (_1.21: bool);             // scope 0 at cita-jsonrpc/src/config.rs:100:31: 100:52
        _20 = (_1.22: bool);             // scope 0 at cita-jsonrpc/src/config.rs:101:36: 101:62
        _21 = (_1.23: bool);             // scope 0 at cita-jsonrpc/src/config.rs:102:29: 102:48
        _22 = (_1.24: bool);             // scope 0 at cita-jsonrpc/src/config.rs:103:25: 103:40
        _23 = (_1.25: bool);             // scope 0 at cita-jsonrpc/src/config.rs:104:28: 104:46
        _24 = (_1.26: bool);             // scope 0 at cita-jsonrpc/src/config.rs:105:29: 105:48
        _25 = (_1.27: bool);             // scope 0 at cita-jsonrpc/src/config.rs:106:26: 106:42
        _0 = Settings { max_connections: move _2, queue_size: move _3, panic_on_new_connection: move _4, panic_on_shutdown: move _5, fragments_capacity: move _6, fragments_grow: move _7, fragment_size: move _8, in_buffer_capacity: move _9, in_buffer_grow: move _10, out_buffer_capacity: move _11, out_buffer_grow: move _12, panic_on_internal: move _13, panic_on_capacity: move _14, panic_on_protocol: move _15, panic_on_encoding: move _16, panic_on_queue: move _17, panic_on_io: move _18, panic_on_timeout: move _19, shutdown_on_interrupt: move _20, masking_strict: move _21, key_strict: move _22, method_strict: move _23, encrypt_server: move _24, tcp_nodelay: move _25 }; // scope 0 at cita-jsonrpc/src/config.rs:82:9: 107:10
        drop(_1) -> bb1;                 // scope 0 at cita-jsonrpc/src/config.rs:108:5: 108:6
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:108:6: 108:6
    }
}

const _IMPL_SERIALIZE_FOR_HttpConfig: () = {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19

    bb0: {
        _0 = const ();                   // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }
}

fn _IMPL_SERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:10: 111:19>::serialize(_1: &HttpConfig, _2: __S) -> Result<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    debug __serializer => _2;            // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _0: std::result::Result<<__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _3: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _4: std::result::Result<<__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _5: __S;                     // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _6: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _7: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let _8: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let _9: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _10: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _11: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let _12: &bool;                      // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _13: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _15: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _16: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let _17: &std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _18: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _20: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _21: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let _22: &std::string::String;       // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _23: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _25: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _26: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let _27: &std::string::String;       // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _28: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _30: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _31: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let _32: &u64;                       // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _33: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _35: std::result::Result<(), <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _36: &mut <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let _37: &std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _38: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _40: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct; // in scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    let mut _41: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:18: 111:19
    let mut _42: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:18: 111:19
    scope 1 {
        debug __serde_state => _3;       // in scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        let _14: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        let _19: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        let _24: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        let _29: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        let _34: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        let _39: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        scope 4 {
            debug __val => const ();     // in scope 4 at cita-jsonrpc/src/config.rs:111:10: 111:19
        }
        scope 5 {
            debug __err => _14;          // in scope 5 at cita-jsonrpc/src/config.rs:111:10: 111:19
        }
        scope 6 {
            debug __val => const ();     // in scope 6 at cita-jsonrpc/src/config.rs:111:10: 111:19
        }
        scope 7 {
            debug __err => _19;          // in scope 7 at cita-jsonrpc/src/config.rs:111:10: 111:19
        }
        scope 8 {
            debug __val => const ();     // in scope 8 at cita-jsonrpc/src/config.rs:111:10: 111:19
        }
        scope 9 {
            debug __err => _24;          // in scope 9 at cita-jsonrpc/src/config.rs:111:10: 111:19
        }
        scope 10 {
            debug __val => const ();     // in scope 10 at cita-jsonrpc/src/config.rs:111:10: 111:19
        }
        scope 11 {
            debug __err => _29;          // in scope 11 at cita-jsonrpc/src/config.rs:111:10: 111:19
        }
        scope 12 {
            debug __val => const ();     // in scope 12 at cita-jsonrpc/src/config.rs:111:10: 111:19
        }
        scope 13 {
            debug __err => _34;          // in scope 13 at cita-jsonrpc/src/config.rs:111:10: 111:19
        }
        scope 14 {
            debug __val => const ();     // in scope 14 at cita-jsonrpc/src/config.rs:111:10: 111:19
        }
        scope 15 {
            debug __err => _39;          // in scope 15 at cita-jsonrpc/src/config.rs:111:10: 111:19
        }
    }
    scope 2 {
        debug __val => _8;               // in scope 2 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }
    scope 3 {
        debug __err => _9;               // in scope 3 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb0: {
        _42 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _41 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _42 = const true;                // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _5 = move _2;                    // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _6 = const 6_usize;              // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _42 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _4 = <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::serialize_struct(move _5, const "HttpConfig", move _6) -> [return: bb1, unwind: bb37]; // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // + literal: Const { ty: fn(__S, &'static str, usize) -> Result<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error> {<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::serialize_struct}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _42 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:111:18: 111:19
        _7 = discriminant(_4);           // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
        switchInt(move _7) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb2: {
        _9 = move ((_4 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _9); // scope 3 at cita-jsonrpc/src/config.rs:111:10: 111:19
        goto -> bb31;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb4: {
        _8 = move ((_4 as Ok).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct); // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _41 = const true;                // scope 2 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _3 = move _8;                    // scope 2 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _11 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _12 = &((*_1).0: bool);          // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _10 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>(_11, const "enable", _12) -> [return: bb5, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:113:5: 113:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b bool) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<bool>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _13 = discriminant(_10);         // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        switchInt(move _13) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb6: {
        _14 = move ((_10 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _14); // scope 5 at cita-jsonrpc/src/config.rs:111:10: 111:19
        goto -> bb30;                    // scope 1 at no-location
    }

    bb7: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb8: {
        _16 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _17 = &((*_1).1: std::option::Option<usize>); // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _15 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::option::Option<usize>>(_16, const "thread_number", _17) -> [return: bb9, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:114:5: 114:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b std::option::Option<usize>) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::option::Option<usize>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _18 = discriminant(_15);         // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        switchInt(move _18) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb10: {
        _19 = move ((_15 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _19); // scope 7 at cita-jsonrpc/src/config.rs:111:10: 111:19
        goto -> bb30;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb12: {
        _21 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _22 = &((*_1).2: std::string::String); // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _20 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_21, const "listen_ip", _22) -> [return: bb13, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:115:5: 115:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b std::string::String) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _23 = discriminant(_20);         // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        switchInt(move _23) -> [0: bb16, 1: bb14, otherwise: bb15]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb14: {
        _24 = move ((_20 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _24); // scope 9 at cita-jsonrpc/src/config.rs:111:10: 111:19
        goto -> bb30;                    // scope 1 at no-location
    }

    bb15: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb16: {
        _26 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _27 = &((*_1).3: std::string::String); // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _25 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>(_26, const "listen_port", _27) -> [return: bb17, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:116:5: 116:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b std::string::String) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::string::String>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _28 = discriminant(_25);         // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        switchInt(move _28) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb18: {
        _29 = move ((_25 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _29); // scope 11 at cita-jsonrpc/src/config.rs:111:10: 111:19
        goto -> bb30;                    // scope 1 at no-location
    }

    bb19: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb20: {
        _31 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _32 = &((*_1).4: u64);           // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _30 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<u64>(_31, const "timeout", _32) -> [return: bb21, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:117:5: 117:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b u64) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<u64>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _33 = discriminant(_30);         // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        switchInt(move _33) -> [0: bb24, 1: bb22, otherwise: bb23]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb22: {
        _34 = move ((_30 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _34); // scope 13 at cita-jsonrpc/src/config.rs:111:10: 111:19
        goto -> bb30;                    // scope 1 at no-location
    }

    bb23: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb24: {
        _36 = &mut _3;                   // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _37 = &((*_1).5: std::option::Option<std::string::String>); // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _35 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::option::Option<std::string::String>>(_36, const "allow_origin", _37) -> [return: bb25, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:118:5: 118:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct, &'static str, &'b std::option::Option<std::string::String>) -> Result<(), <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<std::option::Option<std::string::String>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _38 = discriminant(_35);         // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        switchInt(move _38) -> [0: bb28, 1: bb26, otherwise: bb27]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb26: {
        _39 = move ((_35 as Err).0: <__S as config::_IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error); // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _0 = Result::<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Ok, <__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::Error>::Err(move _39); // scope 15 at cita-jsonrpc/src/config.rs:111:10: 111:19
        goto -> bb30;                    // scope 1 at no-location
    }

    bb27: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb28: {
        _41 = const false;               // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _40 = move _3;                   // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
        _0 = <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _40) -> [return: bb29, unwind: bb35]; // scope 1 at cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:10: 111:19
                                         // + literal: Const { ty: fn(<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct) -> Result<<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Ok, <<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::Error> {<<__S as _IMPL_SERIALIZE_FOR_Config::_serde::Serializer>::SerializeStruct as SerializeStruct>::end}, val: Value(<ZST>) }
    }

    bb29: {
        _41 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:111:18: 111:19
        goto -> bb32;                    // scope 0 at cita-jsonrpc/src/config.rs:111:18: 111:19
    }

    bb30: {
        drop(_3) -> bb31;                // scope 0 at cita-jsonrpc/src/config.rs:111:18: 111:19
    }

    bb31: {
        _41 = const false;               // scope 0 at cita-jsonrpc/src/config.rs:111:18: 111:19
        goto -> bb32;                    // scope 0 at cita-jsonrpc/src/config.rs:111:18: 111:19
    }

    bb32: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:19: 111:19
    }

    bb33 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:111:10: 111:19
    }

    bb34 (cleanup): {
        drop(_3) -> bb33;                // scope 0 at cita-jsonrpc/src/config.rs:111:18: 111:19
    }

    bb35 (cleanup): {
        switchInt(_41) -> [0: bb33, otherwise: bb34]; // scope 0 at cita-jsonrpc/src/config.rs:111:18: 111:19
    }

    bb36 (cleanup): {
        drop(_5) -> bb33;                // scope 0 at cita-jsonrpc/src/config.rs:111:18: 111:19
    }

    bb37 (cleanup): {
        switchInt(_42) -> [0: bb33, otherwise: bb36]; // scope 0 at cita-jsonrpc/src/config.rs:111:18: 111:19
    }
}

const _IMPL_DESERIALIZE_FOR_HttpConfig: () = {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _0 = const ();                   // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
}

fn _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize(_1: __D) -> Result<HttpConfig, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _0: std::result::Result<config::HttpConfig, <__D as config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _0 = <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'_>>(move _1, const "HttpConfig", const _, const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<HttpConfig>, lifetime: PhantomData::<&()> }}) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: fn(__D, &'static str, &'static [&'static str], _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'_>) -> Result<<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'_> as Visitor<'_>>::Value, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {<__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_struct::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'_>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &[&str], val: Unevaluated(_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::FIELDS, [], None) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'_>, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:32: 111:32
    }
}

fn _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    debug __formatter => _2;             // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _3 = const "field identifier";   // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:32: 111:32
    }
}

fn _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::visit_u64(_1: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor, _2: u64) -> Result<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _3: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _4: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _5: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _6: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _7: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _8: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _9: __E;                     // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _10: config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Unexpected<'_>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _11: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _12: &&str;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, otherwise: bb1]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb1: {
        _10 = Unexpected::<'_>::Unsigned(_2); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _12 = const _;                   // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor as Visitor<'de>>::visit_u64, [ReErased, __E], Some(promoted[0])) }
        _11 = _12 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _9 = <__E as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_value(move _10, move _11) -> bb8; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a, 'b> fn(Unexpected<'a>, &'b (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'b)) -> __E {<__E as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_value}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _3); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb3: {
        _4 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _4); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb4: {
        _5 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field2; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _5); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb5: {
        _6 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field3; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _6); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb6: {
        _7 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field4; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _7); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb7: {
        _8 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field5; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _8); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb8: {
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Err(move _9); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb9;                     // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb9: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:32: 111:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::visit_u64: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _1 = const "field index 0 <= i < 6"; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
}

fn _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::visit_str(_1: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor, _2: &str) -> Result<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _3: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _4: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _6: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _7: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _8: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _9: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _10: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _11: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _12: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _13: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _14: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _15: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "enable") -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb13]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "thread_number") -> bb3; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb14]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb4: {
        _5 = <str as PartialEq>::eq(_2, const "listen_ip") -> bb5; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _5) -> [0: bb6, otherwise: bb15]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb6: {
        _6 = <str as PartialEq>::eq(_2, const "listen_port") -> bb7; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _6) -> [0: bb8, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb8: {
        _7 = <str as PartialEq>::eq(_2, const "timeout") -> bb9; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        switchInt(move _7) -> [0: bb10, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb10: {
        _8 = <str as PartialEq>::eq(_2, const "allow_origin") -> bb11; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        switchInt(move _8) -> [0: bb12, otherwise: bb18]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb12: {
        _15 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__ignore; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _15); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb13: {
        _9 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _9); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb14: {
        _10 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _10); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb15: {
        _11 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field2; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _11); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb16: {
        _12 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field3; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _12); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb17: {
        _13 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field4; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _13); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb18: {
        _14 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field5; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _14); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb19;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb19: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:32: 111:32
    }
}

fn _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::visit_bytes(_1: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor, _2: &[u8]) -> Result<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E> {
    debug self => const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    debug __value => _2;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field, __E>; // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _3: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _4: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _6: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _7: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _8: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _9: usize;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _10: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _11: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _12: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _13: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _14: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _15: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _16: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _17: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _18: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _19: usize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _20: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _21: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _22: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _23: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _24: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _25: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _26: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _27: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _18 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _19 = const 6_usize;             // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _20 = Eq(move _18, move _19);    // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _20) -> [0: bb8, otherwise: bb1]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb1: {
        switchInt((*_2)[0 of 6]) -> [101: bb2, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb2: {
        switchInt((*_2)[1 of 6]) -> [110: bb3, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb3: {
        switchInt((*_2)[2 of 6]) -> [97: bb4, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb4: {
        switchInt((*_2)[3 of 6]) -> [98: bb5, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb5: {
        switchInt((*_2)[4 of 6]) -> [108: bb6, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb6: {
        switchInt((*_2)[5 of 6]) -> [101: bb65, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb7: {
        _27 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__ignore; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x06)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _27); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb71;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb8: {
        _15 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _16 = const 13_usize;            // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _17 = Eq(move _15, move _16);    // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _17) -> [0: bb22, otherwise: bb9]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb9: {
        switchInt((*_2)[0 of 13]) -> [116: bb10, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb10: {
        switchInt((*_2)[1 of 13]) -> [104: bb11, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb11: {
        switchInt((*_2)[2 of 13]) -> [114: bb12, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb12: {
        switchInt((*_2)[3 of 13]) -> [101: bb13, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb13: {
        switchInt((*_2)[4 of 13]) -> [97: bb14, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb14: {
        switchInt((*_2)[5 of 13]) -> [100: bb15, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb15: {
        switchInt((*_2)[6 of 13]) -> [95: bb16, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb16: {
        switchInt((*_2)[7 of 13]) -> [110: bb17, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb17: {
        switchInt((*_2)[8 of 13]) -> [117: bb18, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb18: {
        switchInt((*_2)[9 of 13]) -> [109: bb19, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb19: {
        switchInt((*_2)[10 of 13]) -> [98: bb20, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb20: {
        switchInt((*_2)[11 of 13]) -> [101: bb21, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb21: {
        switchInt((*_2)[12 of 13]) -> [114: bb66, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb22: {
        _12 = Len((*_2));                // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _13 = const 9_usize;             // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _14 = Eq(move _12, move _13);    // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _14) -> [0: bb32, otherwise: bb23]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb23: {
        switchInt((*_2)[0 of 9]) -> [108: bb24, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb24: {
        switchInt((*_2)[1 of 9]) -> [105: bb25, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb25: {
        switchInt((*_2)[2 of 9]) -> [115: bb26, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb26: {
        switchInt((*_2)[3 of 9]) -> [116: bb27, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb27: {
        switchInt((*_2)[4 of 9]) -> [101: bb28, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb28: {
        switchInt((*_2)[5 of 9]) -> [110: bb29, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb29: {
        switchInt((*_2)[6 of 9]) -> [95: bb30, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb30: {
        switchInt((*_2)[7 of 9]) -> [105: bb31, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb31: {
        switchInt((*_2)[8 of 9]) -> [112: bb67, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb32: {
        _9 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _10 = const 11_usize;            // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _11 = Eq(move _9, move _10);     // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _11) -> [0: bb44, otherwise: bb33]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb33: {
        switchInt((*_2)[0 of 11]) -> [108: bb34, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb34: {
        switchInt((*_2)[1 of 11]) -> [105: bb35, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb35: {
        switchInt((*_2)[2 of 11]) -> [115: bb36, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb36: {
        switchInt((*_2)[3 of 11]) -> [116: bb37, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb37: {
        switchInt((*_2)[4 of 11]) -> [101: bb38, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb38: {
        switchInt((*_2)[5 of 11]) -> [110: bb39, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb39: {
        switchInt((*_2)[6 of 11]) -> [95: bb40, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb40: {
        switchInt((*_2)[7 of 11]) -> [112: bb41, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb41: {
        switchInt((*_2)[8 of 11]) -> [111: bb42, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb42: {
        switchInt((*_2)[9 of 11]) -> [114: bb43, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb43: {
        switchInt((*_2)[10 of 11]) -> [116: bb68, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb44: {
        _6 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _7 = const 7_usize;              // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _8 = Eq(move _6, move _7);       // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _8) -> [0: bb52, otherwise: bb45]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb45: {
        switchInt((*_2)[0 of 7]) -> [116: bb46, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb46: {
        switchInt((*_2)[1 of 7]) -> [105: bb47, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb47: {
        switchInt((*_2)[2 of 7]) -> [109: bb48, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb48: {
        switchInt((*_2)[3 of 7]) -> [101: bb49, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb49: {
        switchInt((*_2)[4 of 7]) -> [111: bb50, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb50: {
        switchInt((*_2)[5 of 7]) -> [117: bb51, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb51: {
        switchInt((*_2)[6 of 7]) -> [116: bb69, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb52: {
        _3 = Len((*_2));                 // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _4 = const 12_usize;             // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _5 = Eq(move _3, move _4);       // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _5) -> [0: bb7, otherwise: bb53]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb53: {
        switchInt((*_2)[0 of 12]) -> [97: bb54, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb54: {
        switchInt((*_2)[1 of 12]) -> [108: bb55, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb55: {
        switchInt((*_2)[2 of 12]) -> [108: bb56, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb56: {
        switchInt((*_2)[3 of 12]) -> [111: bb57, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb57: {
        switchInt((*_2)[4 of 12]) -> [119: bb58, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb58: {
        switchInt((*_2)[5 of 12]) -> [95: bb59, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb59: {
        switchInt((*_2)[6 of 12]) -> [111: bb60, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb60: {
        switchInt((*_2)[7 of 12]) -> [114: bb61, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb61: {
        switchInt((*_2)[8 of 12]) -> [105: bb62, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb62: {
        switchInt((*_2)[9 of 12]) -> [103: bb63, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb63: {
        switchInt((*_2)[10 of 12]) -> [105: bb64, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb64: {
        switchInt((*_2)[11 of 12]) -> [110: bb70, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb65: {
        _21 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field0; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x00)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _21); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb71;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb66: {
        _22 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field1; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x01)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _22); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb71;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb67: {
        _23 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field2; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x02)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _23); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb71;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb68: {
        _24 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field3; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x03)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _24); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb71;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb69: {
        _25 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field4; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x04)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _25); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb71;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb70: {
        _26 = const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field::__field5; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, val: Value(Scalar(0x05)) }
        _0 = Result::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, __E>::Ok(move _26); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb71;                    // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb71: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:32: 111:32
    }
}

fn _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize(_1: __D) -> Result<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;          // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _0: std::result::Result<config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field, <__D as config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _0 = <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor>(move _1, const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: fn(__D, _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor) -> Result<<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor as Visitor<'_>>::Value, <__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::Error> {<__D as _IMPL_SERIALIZE_FOR_Config::_serde::Deserializer<'_>>::deserialize_identifier::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__FieldVisitor, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:32: 111:32
    }
}

fn _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::expecting(_1: &_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    debug __formatter => _2;             // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _3 = const "struct HttpConfig";  // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:32: 111:32
    }
}

fn _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::visit_seq(_1: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'_>, _2: __A) -> Result<HttpConfig, <__A as SeqAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<HttpConfig>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    debug __seq => _2;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _0: std::result::Result<config::HttpConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _3: std::result::Result<std::option::Option<bool>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _4: &mut __A;                // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _5: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _6: std::option::Option<bool>;   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _7: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _8: isize;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _9: bool;                        // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _10: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _11: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _12: std::result::Result<std::option::Option<std::option::Option<usize>>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _13: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _14: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _17: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _19: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _20: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _22: std::result::Result<std::option::Option<std::string::String>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _23: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _24: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _27: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _29: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _30: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _32: std::result::Result<std::option::Option<std::string::String>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _33: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _34: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _37: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _39: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _40: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _41: std::result::Result<std::option::Option<u64>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _42: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _43: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _46: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _48: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _49: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _50: std::result::Result<std::option::Option<std::option::Option<std::string::String>>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _51: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _52: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _55: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _57: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _58: &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _59: config::HttpConfig;     // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _60: std::string::String;    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _61: std::string::String;    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _62: &&str;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    scope 1 {
        debug __field0 => _9;            // in scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        let _15: std::option::Option<std::option::Option<usize>>; // in scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        let _16: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        let _18: std::option::Option<usize>; // in scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        let mut _63: &&str;              // in scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        scope 5 {
            debug __field1 => _18;       // in scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
            let _21: std::string::String; // in scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
            let _25: std::option::Option<std::string::String>; // in scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
            let _26: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
            let _28: std::string::String; // in scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
            let mut _64: &&str;          // in scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
            scope 9 {
                debug __field2 => _21;   // in scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
                let _31: std::string::String; // in scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
                let _35: std::option::Option<std::string::String>; // in scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
                let _36: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
                let _38: std::string::String; // in scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
                let mut _65: &&str;      // in scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
                scope 13 {
                    debug __field3 => _31; // in scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
                    let _44: std::option::Option<u64>; // in scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
                    let _45: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
                    let _47: u64;        // in scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
                    let mut _66: &&str;  // in scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
                    scope 17 {
                        debug __field4 => _47; // in scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
                        let _53: std::option::Option<std::option::Option<std::string::String>>; // in scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
                        let _54: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error; // in scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
                        let _56: std::option::Option<std::string::String>; // in scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
                        let mut _67: &&str; // in scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
                        scope 21 {
                            debug __field5 => _56; // in scope 21 at cita-jsonrpc/src/config.rs:111:21: 111:32
                        }
                        scope 22 {
                            debug __val => _53; // in scope 22 at cita-jsonrpc/src/config.rs:111:21: 111:32
                        }
                        scope 23 {
                            debug __err => _54; // in scope 23 at cita-jsonrpc/src/config.rs:111:21: 111:32
                        }
                        scope 24 {
                            debug __value => _56; // in scope 24 at cita-jsonrpc/src/config.rs:111:21: 111:32
                        }
                    }
                    scope 18 {
                        debug __val => _44; // in scope 18 at cita-jsonrpc/src/config.rs:111:21: 111:32
                    }
                    scope 19 {
                        debug __err => _45; // in scope 19 at cita-jsonrpc/src/config.rs:111:21: 111:32
                    }
                    scope 20 {
                        debug __value => _47; // in scope 20 at cita-jsonrpc/src/config.rs:111:21: 111:32
                    }
                }
                scope 14 {
                    debug __val => _35;  // in scope 14 at cita-jsonrpc/src/config.rs:111:21: 111:32
                }
                scope 15 {
                    debug __err => _36;  // in scope 15 at cita-jsonrpc/src/config.rs:111:21: 111:32
                }
                scope 16 {
                    debug __value => _38; // in scope 16 at cita-jsonrpc/src/config.rs:111:21: 111:32
                }
            }
            scope 10 {
                debug __val => _25;      // in scope 10 at cita-jsonrpc/src/config.rs:111:21: 111:32
            }
            scope 11 {
                debug __err => _26;      // in scope 11 at cita-jsonrpc/src/config.rs:111:21: 111:32
            }
            scope 12 {
                debug __value => _28;    // in scope 12 at cita-jsonrpc/src/config.rs:111:21: 111:32
            }
        }
        scope 6 {
            debug __val => _15;          // in scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
        }
        scope 7 {
            debug __err => _16;          // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        }
        scope 8 {
            debug __value => _18;        // in scope 8 at cita-jsonrpc/src/config.rs:111:21: 111:32
        }
    }
    scope 2 {
        debug __val => _6;               // in scope 2 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
    scope 3 {
        debug __err => _7;               // in scope 3 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
    scope 4 {
        debug __value => _9;             // in scope 4 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb0: {
        _4 = &mut _2;                    // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _3 = <__A as SeqAccess<'_>>::next_element::<bool>(_4) -> [return: bb1, unwind: bb55]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:113:5: 113:8
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<bool>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<bool>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = discriminant(_3);           // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Err(move _7); // scope 3 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb51;                    // scope 0 at no-location
    }

    bb3: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<bool>); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _8 = discriminant(_6);           // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb5: {
        _62 = const _;                   // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[0])) }
        _11 = _62 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _10 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb8, unwind: bb55]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb7: {
        _9 = ((_6 as Some).0: bool);     // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _13 = &mut _2;                   // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<usize>>(_13) -> [return: bb9, unwind: bb55]; // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:114:5: 114:8
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<std::option::Option<usize>>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<std::option::Option<usize>>}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Err(move _10); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb51;                    // scope 0 at no-location
    }

    bb9: {
        _14 = discriminant(_12);         // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _14) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb10: {
        _16 = move ((_12 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Err(move _16); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb51;                    // scope 1 at no-location
    }

    bb11: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb12: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<usize>>); // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _17 = discriminant(_15);         // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _17) -> [0: bb13, 1: bb15, otherwise: bb14]; // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb13: {
        _63 = const _;                   // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[1])) }
        _20 = _63 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _19 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb16, unwind: bb55]; // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb14: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb15: {
        _18 = ((_15 as Some).0: std::option::Option<usize>); // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _23 = &mut _2;                   // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _22 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_23) -> [return: bb17, unwind: bb55]; // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:115:5: 115:8
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<std::string::String>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<std::string::String>}, val: Value(<ZST>) }
    }

    bb16: {
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Err(move _19); // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb51;                    // scope 1 at no-location
    }

    bb17: {
        _24 = discriminant(_22);         // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _24) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb18: {
        _26 = move ((_22 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Err(move _26); // scope 11 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb51;                    // scope 5 at no-location
    }

    bb19: {
        unreachable;                     // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb20: {
        _25 = move ((_22 as Ok).0: std::option::Option<std::string::String>); // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _27 = discriminant(_25);         // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _27) -> [0: bb21, 1: bb23, otherwise: bb22]; // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb21: {
        _64 = const _;                   // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[2])) }
        _30 = _64 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _29 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 2_usize, move _30) -> [return: bb24, unwind: bb55]; // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb22: {
        unreachable;                     // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb23: {
        _28 = move ((_25 as Some).0: std::string::String); // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _21 = move _28;                  // scope 12 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _33 = &mut _2;                   // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _32 = <__A as SeqAccess<'_>>::next_element::<std::string::String>(_33) -> [return: bb25, unwind: bb54]; // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:116:5: 116:8
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<std::string::String>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<std::string::String>}, val: Value(<ZST>) }
    }

    bb24: {
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Err(move _29); // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb51;                    // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb25: {
        _34 = discriminant(_32);         // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _34) -> [0: bb28, 1: bb26, otherwise: bb27]; // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb26: {
        _36 = move ((_32 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Err(move _36); // scope 15 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb50;                    // scope 9 at no-location
    }

    bb27: {
        unreachable;                     // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb28: {
        _35 = move ((_32 as Ok).0: std::option::Option<std::string::String>); // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _37 = discriminant(_35);         // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _37) -> [0: bb29, 1: bb31, otherwise: bb30]; // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb29: {
        _65 = const _;                   // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[3])) }
        _40 = _65 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _39 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 3_usize, move _40) -> [return: bb32, unwind: bb54]; // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb30: {
        unreachable;                     // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb31: {
        _38 = move ((_35 as Some).0: std::string::String); // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _31 = move _38;                  // scope 16 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _42 = &mut _2;                   // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _41 = <__A as SeqAccess<'_>>::next_element::<u64>(_42) -> [return: bb33, unwind: bb53]; // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:117:5: 117:8
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<u64>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<u64>}, val: Value(<ZST>) }
    }

    bb32: {
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Err(move _39); // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb50;                    // scope 9 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb33: {
        _43 = discriminant(_41);         // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _43) -> [0: bb36, 1: bb34, otherwise: bb35]; // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb34: {
        _45 = move ((_41 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Err(move _45); // scope 19 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb49;                    // scope 13 at no-location
    }

    bb35: {
        unreachable;                     // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb36: {
        _44 = ((_41 as Ok).0: std::option::Option<u64>); // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _46 = discriminant(_44);         // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _46) -> [0: bb37, 1: bb39, otherwise: bb38]; // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb37: {
        _66 = const _;                   // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[4])) }
        _49 = _66 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _48 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 4_usize, move _49) -> [return: bb40, unwind: bb53]; // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb38: {
        unreachable;                     // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb39: {
        _47 = ((_44 as Some).0: u64);    // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _51 = &mut _2;                   // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _50 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>(_51) -> [return: bb41, unwind: bb53]; // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:118:5: 118:8
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<std::option::Option<std::string::String>>, <__A as SeqAccess<'_>>::Error> {<__A as SeqAccess<'_>>::next_element::<std::option::Option<std::string::String>>}, val: Value(<ZST>) }
    }

    bb40: {
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Err(move _48); // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb49;                    // scope 13 at no-location
    }

    bb41: {
        _52 = discriminant(_50);         // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _52) -> [0: bb44, 1: bb42, otherwise: bb43]; // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb42: {
        _54 = move ((_50 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::SeqAccess<'_>>::Error); // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Err(move _54); // scope 23 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb49;                    // scope 17 at no-location
    }

    bb43: {
        unreachable;                     // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb44: {
        _53 = move ((_50 as Ok).0: std::option::Option<std::option::Option<std::string::String>>); // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _55 = discriminant(_53);         // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _55) -> [0: bb45, 1: bb47, otherwise: bb46]; // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb45: {
        _67 = const _;                   // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &&str, val: Unevaluated(<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_seq, [ReErased, __A], Some(promoted[5])) }
        _58 = _67 as &dyn config::_IMPL_SERIALIZE_FOR_Config::_serde::de::Expected (Pointer(Unsize)); // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _57 = <<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length(const 5_usize, move _58) -> [return: bb48, unwind: bb53]; // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: for<'a> fn(usize, &'a (dyn _IMPL_SERIALIZE_FOR_Config::_serde::de::Expected + 'a)) -> <__A as SeqAccess<'_>>::Error {<<__A as SeqAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::invalid_length}, val: Value(<ZST>) }
    }

    bb46: {
        unreachable;                     // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb47: {
        _56 = move ((_53 as Some).0: std::option::Option<std::string::String>); // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _60 = move _21;                  // scope 21 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _61 = move _31;                  // scope 21 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _59 = HttpConfig { enable: _9, thread_number: _18, listen_ip: move _60, listen_port: move _61, timeout: _47, allow_origin: move _56 }; // scope 21 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Ok(move _59); // scope 21 at cita-jsonrpc/src/config.rs:111:21: 111:32
        drop(_2) -> bb52;                // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb48: {
        _0 = Result::<HttpConfig, <__A as SeqAccess<'_>>::Error>::Err(move _57); // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb49;                    // scope 17 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb49: {
        drop(_31) -> [return: bb50, unwind: bb54]; // scope 9 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb50: {
        drop(_21) -> [return: bb51, unwind: bb55]; // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb51: {
        drop(_2) -> bb52;                // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb52: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:32: 111:32
    }

    bb53 (cleanup): {
        drop(_31) -> bb54;               // scope 9 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb54 (cleanup): {
        drop(_21) -> bb55;               // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb55 (cleanup): {
        drop(_2) -> bb56;                // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb56 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _1 = const "struct HttpConfig with 6 elements"; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
}

promoted[1] in _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _1 = const "struct HttpConfig with 6 elements"; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
}

promoted[2] in _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _1 = const "struct HttpConfig with 6 elements"; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
}

promoted[3] in _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _1 = const "struct HttpConfig with 6 elements"; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
}

promoted[4] in _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _1 = const "struct HttpConfig with 6 elements"; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
}

promoted[5] in _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::visit_seq: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _1: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _1 = const "struct HttpConfig with 6 elements"; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
}

fn _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::visit_map(_1: _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor<'_>, _2: __A) -> Result<HttpConfig, <__A as MapAccess<'_>>::Error> {
    debug self => const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<HttpConfig>, lifetime: PhantomData::<&()> }}; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    debug __map => _2;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _0: std::result::Result<config::HttpConfig, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _3: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _9: std::result::Result<std::option::Option<config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _10: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _11: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _14: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _16: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _17: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _18: &std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _19: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _20: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _21: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _22: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _23: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _26: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _27: &std::option::Option<std::option::Option<usize>>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _28: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _29: std::option::Option<std::option::Option<usize>>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _30: std::result::Result<std::option::Option<usize>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _31: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _32: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _35: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _36: &std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _37: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _38: std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _39: std::result::Result<std::string::String, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _40: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _41: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _44: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _45: &std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _46: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _47: std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _48: std::result::Result<std::string::String, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _49: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _50: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _53: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _54: &std::option::Option<u64>;  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _55: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _56: std::option::Option<u64>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _57: std::result::Result<u64, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _58: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _59: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _62: bool;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _63: &std::option::Option<std::option::Option<std::string::String>>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _64: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _65: std::option::Option<std::option::Option<std::string::String>>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _66: std::result::Result<std::option::Option<std::string::String>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _67: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _68: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _71: std::result::Result<config::_IMPL_SERIALIZE_FOR_Config::_serde::de::IgnoredAny, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _72: &mut __A;               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _73: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _76: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _78: std::result::Result<bool, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _79: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _83: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _85: std::result::Result<std::option::Option<usize>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _86: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _90: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _92: std::result::Result<std::string::String, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _93: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _97: isize;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _99: std::result::Result<std::string::String, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _100: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _104: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _106: std::result::Result<u64, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _107: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _111: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _113: std::result::Result<std::option::Option<std::string::String>, <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _114: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _117: config::HttpConfig;    // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _118: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _119: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _120: std::string::String;   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _121: std::string::String;   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _122: u64;                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _123: std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _124: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    let mut _125: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    let mut _126: bool;                  // in scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    let mut _127: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    let mut _128: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    let mut _129: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    let mut _130: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    let mut _131: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    let mut _132: isize;                 // in scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    scope 1 {
        debug __field0 => _3;            // in scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        let mut _4: std::option::Option<std::option::Option<usize>>; // in scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        scope 2 {
            debug __field1 => _4;        // in scope 2 at cita-jsonrpc/src/config.rs:111:21: 111:32
            let mut _5: std::option::Option<std::string::String>; // in scope 2 at cita-jsonrpc/src/config.rs:111:21: 111:32
            scope 3 {
                debug __field2 => _5;    // in scope 3 at cita-jsonrpc/src/config.rs:111:21: 111:32
                let mut _6: std::option::Option<std::string::String>; // in scope 3 at cita-jsonrpc/src/config.rs:111:21: 111:32
                scope 4 {
                    debug __field3 => _6; // in scope 4 at cita-jsonrpc/src/config.rs:111:21: 111:32
                    let mut _7: std::option::Option<u64>; // in scope 4 at cita-jsonrpc/src/config.rs:111:21: 111:32
                    scope 5 {
                        debug __field4 => _7; // in scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
                        let mut _8: std::option::Option<std::option::Option<std::string::String>>; // in scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
                        scope 6 {
                            debug __field5 => _8; // in scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
                            let _75: bool; // in scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
                            let _77: bool; // in scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
                            let _80: bool; // in scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
                            let _81: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
                            scope 7 {
                                debug __key => _15; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _12: std::option::Option<config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field>; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _13: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _15: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _24: bool; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _25: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _33: std::option::Option<usize>; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _34: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _42: std::string::String; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _43: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _51: std::string::String; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _52: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _60: u64; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _61: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _69: std::option::Option<std::string::String>; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _70: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _74: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                scope 8 {
                                    debug __val => _12; // in scope 8 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 9 {
                                    debug __err => _13; // in scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 10 {
                                    debug __val => _24; // in scope 10 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 11 {
                                    debug __err => _25; // in scope 11 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 12 {
                                    debug __val => _33; // in scope 12 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 13 {
                                    debug __err => _34; // in scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 14 {
                                    debug __val => _42; // in scope 14 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 15 {
                                    debug __err => _43; // in scope 15 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 16 {
                                    debug __val => _51; // in scope 16 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 17 {
                                    debug __err => _52; // in scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 18 {
                                    debug __val => _60; // in scope 18 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 19 {
                                    debug __err => _61; // in scope 19 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 20 {
                                    debug __val => _69; // in scope 20 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 21 {
                                    debug __err => _70; // in scope 21 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 22 {
                                }
                                scope 23 {
                                    debug __val => const IgnoredAny; // in scope 23 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 24 {
                                    debug __err => _74; // in scope 24 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                            }
                            scope 25 {
                                debug __field0 => _75; // in scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _82: std::option::Option<usize>; // in scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _84: std::option::Option<usize>; // in scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _87: std::option::Option<usize>; // in scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                let _88: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                scope 29 {
                                    debug __field1 => _82; // in scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                    let _89: std::string::String; // in scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                    let _91: std::string::String; // in scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                    let _94: std::string::String; // in scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                    let _95: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                    scope 33 {
                                        debug __field2 => _89; // in scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                        let _96: std::string::String; // in scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                        let _98: std::string::String; // in scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                        let _101: std::string::String; // in scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                        let _102: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                        scope 37 {
                                            debug __field3 => _96; // in scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                            let _103: u64; // in scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                            let _105: u64; // in scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                            let _108: u64; // in scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                            let _109: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                            scope 41 {
                                                debug __field4 => _103; // in scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                                let _110: std::option::Option<std::string::String>; // in scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                                let _112: std::option::Option<std::string::String>; // in scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                                let _115: std::option::Option<std::string::String>; // in scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                                let _116: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error; // in scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                                scope 45 {
                                                    debug __field5 => _110; // in scope 45 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                                }
                                                scope 46 {
                                                    debug __field5 => _112; // in scope 46 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                                }
                                                scope 47 {
                                                    debug __val => _115; // in scope 47 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                                }
                                                scope 48 {
                                                    debug __err => _116; // in scope 48 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                                }
                                            }
                                            scope 42 {
                                                debug __field4 => _105; // in scope 42 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                            }
                                            scope 43 {
                                                debug __val => _108; // in scope 43 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                            }
                                            scope 44 {
                                                debug __err => _109; // in scope 44 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                            }
                                        }
                                        scope 38 {
                                            debug __field3 => _98; // in scope 38 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                        }
                                        scope 39 {
                                            debug __val => _101; // in scope 39 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                        }
                                        scope 40 {
                                            debug __err => _102; // in scope 40 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                        }
                                    }
                                    scope 34 {
                                        debug __field2 => _91; // in scope 34 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                    }
                                    scope 35 {
                                        debug __val => _94; // in scope 35 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                    }
                                    scope 36 {
                                        debug __err => _95; // in scope 36 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                    }
                                }
                                scope 30 {
                                    debug __field1 => _84; // in scope 30 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 31 {
                                    debug __val => _87; // in scope 31 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                                scope 32 {
                                    debug __err => _88; // in scope 32 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                }
                            }
                            scope 26 {
                                debug __field0 => _77; // in scope 26 at cita-jsonrpc/src/config.rs:111:21: 111:32
                            }
                            scope 27 {
                                debug __val => _80; // in scope 27 at cita-jsonrpc/src/config.rs:111:21: 111:32
                            }
                            scope 28 {
                                debug __err => _81; // in scope 28 at cita-jsonrpc/src/config.rs:111:21: 111:32
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _124 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _125 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _126 = const false;              // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _3 = std::option::Option::<bool>::None; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _4 = std::option::Option::<std::option::Option<usize>>::None; // scope 1 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _126 = const true;               // scope 2 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _5 = std::option::Option::<std::string::String>::None; // scope 2 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _125 = const true;               // scope 3 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _6 = std::option::Option::<std::string::String>::None; // scope 3 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _7 = std::option::Option::<u64>::None; // scope 4 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _124 = const true;               // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _8 = std::option::Option::<std::option::Option<std::string::String>>::None; // scope 5 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb1;                     // scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb1: {
        _10 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _9 = <__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field>(_10) -> [return: bb2, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_key::<_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::__Field>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = discriminant(_9);          // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _11) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb3: {
        _13 = move ((_9 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _13); // scope 9 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb4: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb5: {
        _12 = move ((_9 as Ok).0: std::option::Option<config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field>); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _14 = discriminant(_12);         // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _14) -> [1: bb7, otherwise: bb6]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb6: {
        _76 = discriminant(_3);          // scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _76) -> [0: bb72, 1: bb74, otherwise: bb73]; // scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb7: {
        _15 = move ((_12 as Some).0: config::_IMPL_DESERIALIZE_FOR_HttpConfig::<impl config::_IMPL_SERIALIZE_FOR_Config::_serde::Deserialize<'de> for config::HttpConfig>::deserialize::__Field); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _16 = discriminant(_15);         // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _16) -> [0: bb9, 1: bb18, 2: bb27, 3: bb38, 4: bb49, 5: bb58, otherwise: bb8]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb8: {
        _72 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _71 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_72) -> [return: bb69, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(31)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<IgnoredAny, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<IgnoredAny>}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = &_3;                       // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _17 = std::option::Option::<bool>::is_some(_18) -> [return: bb10, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<bool>) -> bool {std::option::Option::<bool>::is_some}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _17) -> [0: bb13, otherwise: bb11]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb11: {
        _19 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "enable") -> [return: bb12, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _19); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb13: {
        _22 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _21 = <__A as MapAccess<'_>>::next_value::<bool>(_22) -> [return: bb14, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:113:5: 113:8
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<bool, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<bool>}, val: Value(<ZST>) }
    }

    bb14: {
        _23 = discriminant(_21);         // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _23) -> [0: bb17, 1: bb15, otherwise: bb16]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _25); // scope 11 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb16: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb17: {
        _24 = ((_21 as Ok).0: bool);     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _20 = std::option::Option::<bool>::Some(_24); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _3 = move _20;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb1;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb18: {
        _27 = &_4;                       // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _26 = std::option::Option::<std::option::Option<usize>>::is_some(_27) -> [return: bb19, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::option::Option<usize>>) -> bool {std::option::Option::<std::option::Option<usize>>::is_some}, val: Value(<ZST>) }
    }

    bb19: {
        switchInt(move _26) -> [0: bb22, otherwise: bb20]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb20: {
        _28 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "thread_number") -> [return: bb21, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _28); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb22: {
        _31 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _30 = <__A as MapAccess<'_>>::next_value::<std::option::Option<usize>>(_31) -> [return: bb23, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:114:5: 114:8
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<usize>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<std::option::Option<usize>>}, val: Value(<ZST>) }
    }

    bb23: {
        _32 = discriminant(_30);         // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _32) -> [0: bb26, 1: bb24, otherwise: bb25]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb24: {
        _34 = move ((_30 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _34); // scope 13 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb25: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb26: {
        _33 = ((_30 as Ok).0: std::option::Option<usize>); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _29 = std::option::Option::<std::option::Option<usize>>::Some(_33); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _4 = move _29;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb1;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb27: {
        _36 = &_5;                       // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _35 = std::option::Option::<std::string::String>::is_some(_36) -> [return: bb28, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(<ZST>) }
    }

    bb28: {
        switchInt(move _35) -> [0: bb31, otherwise: bb29]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb29: {
        _37 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "listen_ip") -> [return: bb30, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _37); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb31: {
        _40 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _39 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_40) -> [return: bb32, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:115:5: 115:8
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::string::String, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<std::string::String>}, val: Value(<ZST>) }
    }

    bb32: {
        _41 = discriminant(_39);         // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _41) -> [0: bb35, 1: bb33, otherwise: bb34]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb33: {
        _43 = move ((_39 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _43); // scope 15 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb34: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb35: {
        _42 = move ((_39 as Ok).0: std::string::String); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _38 = std::option::Option::<std::string::String>::Some(move _42); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        drop(_5) -> [return: bb36, unwind: bb37]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb36: {
        _126 = const true;               // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _5 = move _38;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb1;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb37 (cleanup): {
        _126 = const true;               // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _5 = move _38;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb141;                   // scope 7 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb38: {
        _45 = &_6;                       // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _44 = std::option::Option::<std::string::String>::is_some(_45) -> [return: bb39, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::string::String>) -> bool {std::option::Option::<std::string::String>::is_some}, val: Value(<ZST>) }
    }

    bb39: {
        switchInt(move _44) -> [0: bb42, otherwise: bb40]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb40: {
        _46 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "listen_port") -> [return: bb41, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb41: {
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _46); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb42: {
        _49 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _48 = <__A as MapAccess<'_>>::next_value::<std::string::String>(_49) -> [return: bb43, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:116:5: 116:8
                                         // + user_ty: UserType(24)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::string::String, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<std::string::String>}, val: Value(<ZST>) }
    }

    bb43: {
        _50 = discriminant(_48);         // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _50) -> [0: bb46, 1: bb44, otherwise: bb45]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb44: {
        _52 = move ((_48 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _52); // scope 17 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb45: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb46: {
        _51 = move ((_48 as Ok).0: std::string::String); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _47 = std::option::Option::<std::string::String>::Some(move _51); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        drop(_6) -> [return: bb47, unwind: bb48]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb47: {
        _125 = const true;               // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _6 = move _47;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb1;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb48 (cleanup): {
        _125 = const true;               // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _6 = move _47;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb141;                   // scope 7 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb49: {
        _54 = &_7;                       // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _53 = std::option::Option::<u64>::is_some(_54) -> [return: bb50, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(25)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<u64>) -> bool {std::option::Option::<u64>::is_some}, val: Value(<ZST>) }
    }

    bb50: {
        switchInt(move _53) -> [0: bb53, otherwise: bb51]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb51: {
        _55 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "timeout") -> [return: bb52, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(26)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb52: {
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _55); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb53: {
        _58 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _57 = <__A as MapAccess<'_>>::next_value::<u64>(_58) -> [return: bb54, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:117:5: 117:8
                                         // + user_ty: UserType(27)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<u64, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<u64>}, val: Value(<ZST>) }
    }

    bb54: {
        _59 = discriminant(_57);         // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _59) -> [0: bb57, 1: bb55, otherwise: bb56]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb55: {
        _61 = move ((_57 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _61); // scope 19 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb56: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb57: {
        _60 = ((_57 as Ok).0: u64);      // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _56 = std::option::Option::<u64>::Some(_60); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _7 = move _56;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb1;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb58: {
        _63 = &_8;                       // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _62 = std::option::Option::<std::option::Option<std::string::String>>::is_some(_63) -> [return: bb59, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(28)
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::option::Option<std::string::String>>) -> bool {std::option::Option::<std::option::Option<std::string::String>>::is_some}, val: Value(<ZST>) }
    }

    bb59: {
        switchInt(move _62) -> [0: bb62, otherwise: bb60]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb60: {
        _64 = <<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field(const "allow_origin") -> [return: bb61, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + user_ty: UserType(29)
                                         // + literal: Const { ty: fn(&'static str) -> <__A as MapAccess<'_>>::Error {<<__A as MapAccess<'_>>::Error as _IMPL_SERIALIZE_FOR_Config::_serde::de::Error>::duplicate_field}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb61: {
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _64); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb62: {
        _67 = &mut _2;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _66 = <__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>(_67) -> [return: bb63, unwind: bb141]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:118:5: 118:8
                                         // + user_ty: UserType(30)
                                         // + literal: Const { ty: for<'a> fn(&'a mut __A) -> Result<std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error> {<__A as MapAccess<'_>>::next_value::<std::option::Option<std::string::String>>}, val: Value(<ZST>) }
    }

    bb63: {
        _68 = discriminant(_66);         // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _68) -> [0: bb66, 1: bb64, otherwise: bb65]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb64: {
        _70 = move ((_66 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _70); // scope 21 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb65: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb66: {
        _69 = move ((_66 as Ok).0: std::option::Option<std::string::String>); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _65 = std::option::Option::<std::option::Option<std::string::String>>::Some(move _69); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        drop(_8) -> [return: bb67, unwind: bb68]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb67: {
        _124 = const true;               // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _8 = move _65;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb1;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb68 (cleanup): {
        _124 = const true;               // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _8 = move _65;                   // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb141;                   // scope 7 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb69: {
        _73 = discriminant(_71);         // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _73) -> [0: bb1, 1: bb70, otherwise: bb71]; // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb70: {
        _74 = move ((_71 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _74); // scope 24 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 7 at no-location
    }

    bb71: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb72: {
        _78 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>(const "enable") -> [return: bb75, unwind: bb141]; // scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:113:5: 113:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<bool, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, bool, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb73: {
        unreachable;                     // scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb74: {
        _77 = ((_3 as Some).0: bool);    // scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _75 = _77;                       // scope 26 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb79;                    // scope 6 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb75: {
        _79 = discriminant(_78);         // scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _79) -> [0: bb78, 1: bb76, otherwise: bb77]; // scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb76: {
        _81 = move ((_78 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _81); // scope 28 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 6 at no-location
    }

    bb77: {
        unreachable;                     // scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb78: {
        _80 = ((_78 as Ok).0: bool);     // scope 6 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _75 = _80;                       // scope 27 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb79;                    // scope 6 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb79: {
        _83 = discriminant(_4);          // scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _83) -> [0: bb80, 1: bb82, otherwise: bb81]; // scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb80: {
        _85 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::option::Option<usize>, <__A as MapAccess<'_>>::Error>(const "thread_number") -> [return: bb83, unwind: bb141]; // scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:114:5: 114:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<std::option::Option<usize>, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::option::Option<usize>, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb81: {
        unreachable;                     // scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb82: {
        _84 = ((_4 as Some).0: std::option::Option<usize>); // scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _82 = _84;                       // scope 30 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb87;                    // scope 25 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb83: {
        _86 = discriminant(_85);         // scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _86) -> [0: bb86, 1: bb84, otherwise: bb85]; // scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb84: {
        _88 = move ((_85 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _88); // scope 32 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 25 at no-location
    }

    bb85: {
        unreachable;                     // scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb86: {
        _87 = ((_85 as Ok).0: std::option::Option<usize>); // scope 25 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _82 = _87;                       // scope 31 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb87;                    // scope 25 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb87: {
        _90 = discriminant(_5);          // scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _90) -> [0: bb88, 1: bb90, otherwise: bb89]; // scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb88: {
        _92 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "listen_ip") -> [return: bb91, unwind: bb141]; // scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:115:5: 115:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<std::string::String, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb89: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb90: {
        _126 = const false;              // scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _91 = move ((_5 as Some).0: std::string::String); // scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _89 = move _91;                  // scope 34 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb95;                    // scope 29 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb91: {
        _93 = discriminant(_92);         // scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _93) -> [0: bb94, 1: bb92, otherwise: bb93]; // scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb92: {
        _95 = move ((_92 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _95); // scope 36 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb132;                   // scope 29 at no-location
    }

    bb93: {
        unreachable;                     // scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb94: {
        _94 = move ((_92 as Ok).0: std::string::String); // scope 29 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _89 = move _94;                  // scope 35 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb95;                    // scope 29 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb95: {
        _97 = discriminant(_6);          // scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _97) -> [0: bb96, 1: bb98, otherwise: bb97]; // scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb96: {
        _99 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>(const "listen_port") -> [return: bb99, unwind: bb124]; // scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:116:5: 116:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<std::string::String, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::string::String, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb97: {
        unreachable;                     // scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb98: {
        _125 = const false;              // scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _98 = move ((_6 as Some).0: std::string::String); // scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _96 = move _98;                  // scope 38 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb103;                   // scope 33 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb99: {
        _100 = discriminant(_99);        // scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _100) -> [0: bb102, 1: bb100, otherwise: bb101]; // scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb100: {
        _102 = move ((_99 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _102); // scope 40 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb121;                   // scope 33 at no-location
    }

    bb101: {
        unreachable;                     // scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb102: {
        _101 = move ((_99 as Ok).0: std::string::String); // scope 33 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _96 = move _101;                 // scope 39 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb103;                   // scope 33 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb103: {
        _104 = discriminant(_7);         // scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _104) -> [0: bb104, 1: bb106, otherwise: bb105]; // scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb104: {
        _106 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, u64, <__A as MapAccess<'_>>::Error>(const "timeout") -> [return: bb107, unwind: bb123]; // scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:117:5: 117:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<u64, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, u64, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb105: {
        unreachable;                     // scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb106: {
        _105 = ((_7 as Some).0: u64);    // scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _103 = _105;                     // scope 42 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb111;                   // scope 37 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb107: {
        _107 = discriminant(_106);       // scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _107) -> [0: bb110, 1: bb108, otherwise: bb109]; // scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb108: {
        _109 = move ((_106 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _109); // scope 44 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb120;                   // scope 37 at no-location
    }

    bb109: {
        unreachable;                     // scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb110: {
        _108 = ((_106 as Ok).0: u64);    // scope 37 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _103 = _108;                     // scope 43 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb111;                   // scope 37 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb111: {
        _111 = discriminant(_8);         // scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _111) -> [0: bb112, 1: bb114, otherwise: bb113]; // scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb112: {
        _113 = _IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>(const "allow_origin") -> [return: bb115, unwind: bb123]; // scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:118:5: 118:8
                                         // + literal: Const { ty: fn(&'static str) -> Result<std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error> {_IMPL_SERIALIZE_FOR_Config::_serde::private::de::missing_field::<'_, std::option::Option<std::string::String>, <__A as MapAccess<'_>>::Error>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb113: {
        unreachable;                     // scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb114: {
        _124 = const false;              // scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _112 = move ((_8 as Some).0: std::option::Option<std::string::String>); // scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _110 = move _112;                // scope 46 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb119;                   // scope 41 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb115: {
        _114 = discriminant(_113);       // scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
        switchInt(move _114) -> [0: bb118, 1: bb116, otherwise: bb117]; // scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb116: {
        _116 = move ((_113 as Err).0: <__A as config::_IMPL_SERIALIZE_FOR_Config::_serde::de::MapAccess<'_>>::Error); // scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Err(move _116); // scope 48 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb120;                   // scope 41 at no-location
    }

    bb117: {
        unreachable;                     // scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb118: {
        _115 = move ((_113 as Ok).0: std::option::Option<std::string::String>); // scope 41 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _110 = move _115;                // scope 47 at cita-jsonrpc/src/config.rs:111:21: 111:32
        goto -> bb119;                   // scope 41 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb119: {
        _118 = _75;                      // scope 45 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _119 = _82;                      // scope 45 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _120 = move _89;                 // scope 45 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _121 = move _96;                 // scope 45 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _122 = _103;                     // scope 45 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _123 = move _110;                // scope 45 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _117 = HttpConfig { enable: move _118, thread_number: move _119, listen_ip: move _120, listen_port: move _121, timeout: move _122, allow_origin: move _123 }; // scope 45 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = Result::<HttpConfig, <__A as MapAccess<'_>>::Error>::Ok(move _117); // scope 45 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _124 = const false;              // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
        _125 = const false;              // scope 3 at cita-jsonrpc/src/config.rs:111:31: 111:32
        _126 = const false;              // scope 2 at cita-jsonrpc/src/config.rs:111:31: 111:32
        drop(_2) -> bb122;               // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb120: {
        drop(_96) -> [return: bb121, unwind: bb124]; // scope 33 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb121: {
        drop(_89) -> [return: bb132, unwind: bb141]; // scope 29 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb122: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:32: 111:32
    }

    bb123 (cleanup): {
        drop(_96) -> bb124;              // scope 33 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb124 (cleanup): {
        drop(_89) -> bb141;              // scope 29 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb125 (cleanup): {
        _131 = discriminant(_6);         // scope 3 at cita-jsonrpc/src/config.rs:111:31: 111:32
        switchInt(move _131) -> [1: bb142, otherwise: bb126]; // scope 3 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb126 (cleanup): {
        _132 = discriminant(_5);         // scope 2 at cita-jsonrpc/src/config.rs:111:31: 111:32
        switchInt(move _132) -> [1: bb144, otherwise: bb127]; // scope 2 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb127 (cleanup): {
        drop(_2) -> bb128;               // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb128 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }

    bb129: {
        _124 = const false;              // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
        _128 = discriminant(_6);         // scope 3 at cita-jsonrpc/src/config.rs:111:31: 111:32
        switchInt(move _128) -> [1: bb134, otherwise: bb133]; // scope 3 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb130: {
        switchInt(_124) -> [0: bb129, otherwise: bb131]; // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb131: {
        drop(((_8 as Some).0: std::option::Option<std::string::String>)) -> [return: bb129, unwind: bb125]; // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb132: {
        _127 = discriminant(_8);         // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
        switchInt(move _127) -> [1: bb130, otherwise: bb129]; // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb133: {
        _125 = const false;              // scope 3 at cita-jsonrpc/src/config.rs:111:31: 111:32
        _129 = discriminant(_5);         // scope 2 at cita-jsonrpc/src/config.rs:111:31: 111:32
        switchInt(move _129) -> [1: bb137, otherwise: bb136]; // scope 2 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb134: {
        switchInt(_125) -> [0: bb133, otherwise: bb135]; // scope 3 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb135: {
        drop(((_6 as Some).0: std::string::String)) -> [return: bb133, unwind: bb126]; // scope 3 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb136: {
        _126 = const false;              // scope 2 at cita-jsonrpc/src/config.rs:111:31: 111:32
        drop(_2) -> bb122;               // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb137: {
        switchInt(_126) -> [0: bb136, otherwise: bb138]; // scope 2 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb138: {
        drop(((_5 as Some).0: std::string::String)) -> [return: bb136, unwind: bb127]; // scope 2 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb139 (cleanup): {
        switchInt(_124) -> [0: bb125, otherwise: bb140]; // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb140 (cleanup): {
        drop(((_8 as Some).0: std::option::Option<std::string::String>)) -> bb125; // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb141 (cleanup): {
        _130 = discriminant(_8);         // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
        switchInt(move _130) -> [1: bb139, otherwise: bb125]; // scope 5 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb142 (cleanup): {
        switchInt(_125) -> [0: bb126, otherwise: bb143]; // scope 3 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb143 (cleanup): {
        drop(((_6 as Some).0: std::string::String)) -> bb126; // scope 3 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb144 (cleanup): {
        switchInt(_126) -> [0: bb127, otherwise: bb145]; // scope 2 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }

    bb145 (cleanup): {
        drop(((_5 as Some).0: std::string::String)) -> bb127; // scope 2 at cita-jsonrpc/src/config.rs:111:31: 111:32
    }
}

const _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::FIELDS: &[&str] = {
    let mut _0: &[&str];                 // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _1: &[&str; 6];              // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _2: &[&str; 6];                  // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let _3: [&str; 6];                   // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _4: &[&str; 6];              // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        StorageLive(_1);                 // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        StorageLive(_2);                 // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _4 = const _;                    // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &[&str; 6], val: Unevaluated(_IMPL_DESERIALIZE_FOR_HttpConfig::<impl Deserialize<'de> for HttpConfig>::deserialize::FIELDS, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _1 = &(*_2);                     // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        _0 = move _1 as &[&str] (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        StorageDead(_2);                 // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
        StorageDead(_1);                 // scope 0 at cita-jsonrpc/src/config.rs:111:31: 111:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
}

promoted[0] in _IMPL_DESERIALIZE_FOR_HttpConfig::<impl at cita-jsonrpc/src/config.rs:111:21: 111:32>::deserialize::FIELDS: &[&str; 6] = {
    let mut _0: &[&str; 6];              // return place in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    let mut _1: [&str; 6];               // in scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32

    bb0: {
        _1 = [const "enable", const "thread_number", const "listen_ip", const "listen_port", const "timeout", const "allow_origin"]; // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:21: 111:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:21: 111:32
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:111:34: 111:39>::fmt(_1: &HttpConfig, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
    debug f => _2;                       // in scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
    let _4: &[&dyn std::fmt::Debug; 6];  // in scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
    let _5: [&dyn std::fmt::Debug; 6];   // in scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/config.rs:113:5: 113:21
    let _7: &bool;                       // in scope 0 at cita-jsonrpc/src/config.rs:113:5: 113:21
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/config.rs:114:5: 114:37
    let _9: &std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:114:5: 114:37
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:115:5: 115:26
    let _11: &std::string::String;       // in scope 0 at cita-jsonrpc/src/config.rs:115:5: 115:26
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:116:5: 116:28
    let _13: &std::string::String;       // in scope 0 at cita-jsonrpc/src/config.rs:116:5: 116:28
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:117:5: 117:21
    let _15: &u64;                       // in scope 0 at cita-jsonrpc/src/config.rs:117:5: 117:21
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/config.rs:118:5: 118:37
    let _17: &&std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:118:5: 118:37
    let _18: &std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:118:5: 118:37
    let _19: &str;                       // in scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
    let mut _20: &[&str];                // in scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
    let mut _21: &[&str; 6];             // in scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
    scope 1 {
        debug names => _21;              // in scope 1 at cita-jsonrpc/src/config.rs:111:34: 111:39
        let _3: &[&dyn std::fmt::Debug]; // in scope 1 at cita-jsonrpc/src/config.rs:111:34: 111:39
        scope 2 {
            debug values => _3;          // in scope 2 at cita-jsonrpc/src/config.rs:111:34: 111:39
        }
    }

    bb0: {
        _21 = const _;                   // scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:34: 111:39
                                         // + literal: Const { ty: &[&str; 6], val: Unevaluated(<HttpConfig as Debug>::fmt, [], Some(promoted[0])) }
        _7 = &((*_1).0: bool);           // scope 1 at cita-jsonrpc/src/config.rs:113:5: 113:21
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:113:5: 113:21
        _9 = &((*_1).1: std::option::Option<usize>); // scope 1 at cita-jsonrpc/src/config.rs:114:5: 114:37
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:114:5: 114:37
        _11 = &((*_1).2: std::string::String); // scope 1 at cita-jsonrpc/src/config.rs:115:5: 115:26
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:115:5: 115:26
        _13 = &((*_1).3: std::string::String); // scope 1 at cita-jsonrpc/src/config.rs:116:5: 116:28
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:116:5: 116:28
        _15 = &((*_1).4: u64);           // scope 1 at cita-jsonrpc/src/config.rs:117:5: 117:21
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:117:5: 117:21
        _18 = &((*_1).5: std::option::Option<std::string::String>); // scope 1 at cita-jsonrpc/src/config.rs:118:5: 118:37
        _17 = &_18;                      // scope 1 at cita-jsonrpc/src/config.rs:118:5: 118:37
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:118:5: 118:37
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16]; // scope 1 at cita-jsonrpc/src/config.rs:111:34: 111:39
        _4 = &_5;                        // scope 1 at cita-jsonrpc/src/config.rs:111:34: 111:39
        _3 = _4 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/config.rs:111:34: 111:39
        _19 = const "HttpConfig";        // scope 2 at cita-jsonrpc/src/config.rs:111:34: 111:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:34: 111:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21 as &[&str] (Pointer(Unsize)); // scope 2 at cita-jsonrpc/src/config.rs:111:34: 111:39
        _0 = std::fmt::Formatter::<'_>::debug_struct_fields_finish(_2, _19, move _20, _3) -> bb1; // scope 2 at cita-jsonrpc/src/config.rs:111:34: 111:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:111:34: 111:39
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:39: 111:39
    }
}

promoted[0] in config::<impl at cita-jsonrpc/src/config.rs:111:34: 111:39>::fmt: &[&str; 6] = {
    let mut _0: &[&str; 6];              // return place in scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
    let mut _1: [&str; 6];               // in scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
    let mut _2: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:114:5: 114:37
    let mut _3: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:114:5: 114:37
    let mut _4: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:115:5: 115:26
    let mut _5: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:115:5: 115:26
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:116:5: 116:28
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:116:5: 116:28
    let mut _8: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:117:5: 117:21
    let mut _9: &str;                    // in scope 0 at cita-jsonrpc/src/config.rs:117:5: 117:21
    let mut _10: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:118:5: 118:37
    let mut _11: &str;                   // in scope 0 at cita-jsonrpc/src/config.rs:118:5: 118:37

    bb0: {
        _3 = const "thread_number";      // scope 0 at cita-jsonrpc/src/config.rs:114:5: 114:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:114:5: 114:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-jsonrpc/src/config.rs:114:5: 114:37
        _5 = const "listen_ip";          // scope 0 at cita-jsonrpc/src/config.rs:115:5: 115:26
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:115:5: 115:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at cita-jsonrpc/src/config.rs:115:5: 115:26
        _7 = const "listen_port";        // scope 0 at cita-jsonrpc/src/config.rs:116:5: 116:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:116:5: 116:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/config.rs:116:5: 116:28
        _9 = const "timeout";            // scope 0 at cita-jsonrpc/src/config.rs:117:5: 117:21
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:117:5: 117:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at cita-jsonrpc/src/config.rs:117:5: 117:21
        _11 = const "allow_origin";      // scope 0 at cita-jsonrpc/src/config.rs:118:5: 118:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:118:5: 118:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at cita-jsonrpc/src/config.rs:118:5: 118:37
        _1 = [const "enable", move _2, move _4, move _6, move _8, move _10]; // scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:113:5: 113:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:34: 111:39
    }
}

fn config::<impl at cita-jsonrpc/src/config.rs:111:41: 111:46>::clone(_1: &HttpConfig) -> HttpConfig {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/config.rs:111:41: 111:46
    let mut _0: config::HttpConfig;      // return place in scope 0 at cita-jsonrpc/src/config.rs:111:41: 111:46
    let mut _2: bool;                    // in scope 0 at cita-jsonrpc/src/config.rs:113:5: 113:21
    let _3: &bool;                       // in scope 0 at cita-jsonrpc/src/config.rs:113:5: 113:21
    let mut _4: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:114:5: 114:37
    let _5: &std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/config.rs:114:5: 114:37
    let mut _6: std::string::String;     // in scope 0 at cita-jsonrpc/src/config.rs:115:5: 115:26
    let _7: &std::string::String;        // in scope 0 at cita-jsonrpc/src/config.rs:115:5: 115:26
    let mut _8: std::string::String;     // in scope 0 at cita-jsonrpc/src/config.rs:116:5: 116:28
    let _9: &std::string::String;        // in scope 0 at cita-jsonrpc/src/config.rs:116:5: 116:28
    let mut _10: u64;                    // in scope 0 at cita-jsonrpc/src/config.rs:117:5: 117:21
    let _11: &u64;                       // in scope 0 at cita-jsonrpc/src/config.rs:117:5: 117:21
    let mut _12: std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:118:5: 118:37
    let _13: &std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/config.rs:118:5: 118:37

    bb0: {
        _3 = &((*_1).0: bool);           // scope 0 at cita-jsonrpc/src/config.rs:113:5: 113:21
        _2 = (*_3);                      // scope 0 at cita-jsonrpc/src/config.rs:113:5: 113:21
        _5 = &((*_1).1: std::option::Option<usize>); // scope 0 at cita-jsonrpc/src/config.rs:114:5: 114:37
        _4 = <std::option::Option<usize> as Clone>::clone(_5) -> bb1; // scope 0 at cita-jsonrpc/src/config.rs:114:5: 114:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:114:5: 114:37
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<usize>) -> std::option::Option<usize> {<std::option::Option<usize> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).2: std::string::String); // scope 0 at cita-jsonrpc/src/config.rs:115:5: 115:26
        _6 = <std::string::String as Clone>::clone(_7) -> bb2; // scope 0 at cita-jsonrpc/src/config.rs:115:5: 115:26
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:115:5: 115:26
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> std::string::String {<std::string::String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &((*_1).3: std::string::String); // scope 0 at cita-jsonrpc/src/config.rs:116:5: 116:28
        _8 = <std::string::String as Clone>::clone(_9) -> [return: bb3, unwind: bb6]; // scope 0 at cita-jsonrpc/src/config.rs:116:5: 116:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:116:5: 116:28
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> std::string::String {<std::string::String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = &((*_1).4: u64);           // scope 0 at cita-jsonrpc/src/config.rs:117:5: 117:21
        _10 = (*_11);                    // scope 0 at cita-jsonrpc/src/config.rs:117:5: 117:21
        _13 = &((*_1).5: std::option::Option<std::string::String>); // scope 0 at cita-jsonrpc/src/config.rs:118:5: 118:37
        _12 = <std::option::Option<std::string::String> as Clone>::clone(_13) -> [return: bb4, unwind: bb5]; // scope 0 at cita-jsonrpc/src/config.rs:118:5: 118:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/config.rs:118:5: 118:37
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::string::String>) -> std::option::Option<std::string::String> {<std::option::Option<std::string::String> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = HttpConfig { enable: move _2, thread_number: move _4, listen_ip: move _6, listen_port: move _8, timeout: move _10, allow_origin: move _12 }; // scope 0 at cita-jsonrpc/src/config.rs:111:41: 111:46
        return;                          // scope 0 at cita-jsonrpc/src/config.rs:111:46: 111:46
    }

    bb5 (cleanup): {
        drop(_8) -> bb6;                 // scope 0 at cita-jsonrpc/src/config.rs:111:45: 111:46
    }

    bb6 (cleanup): {
        drop(_6) -> bb7;                 // scope 0 at cita-jsonrpc/src/config.rs:111:45: 111:46
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/config.rs:111:41: 111:46
    }
}

fn extractor::<impl at cita-jsonrpc/src/extractor.rs:40:1: 40:66>::extract_from(_1: hyper::Request<Body>) -> Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/extractor.rs:44:21: 44:25
    let mut _0: std::boxed::Box<dyn futures::Future<Item = jsonrpc_types::rpc_request::RpcRequest, Error = service_error::ServiceError> + std::marker::Send>; // return place in scope 0 at cita-jsonrpc/src/extractor.rs:56:9: 56:27
    let _2: futures::AndThen<futures::MapErr<futures::stream::Concat2<hyper::Body>, fn(hyper::Error) -> service_error::ServiceError {service_error::ServiceError::BodyConcatError}>, std::result::Result<jsonrpc_types::rpc_request::RpcRequest, service_error::ServiceError>, [closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30]>; // in scope 0 at cita-jsonrpc/src/extractor.rs:47:13: 47:21
    let mut _3: futures::MapErr<futures::stream::Concat2<hyper::Body>, fn(hyper::Error) -> service_error::ServiceError {service_error::ServiceError::BodyConcatError}>; // in scope 0 at cita-jsonrpc/src/extractor.rs:47:24: 50:52
    let mut _4: futures::stream::Concat2<hyper::Body>; // in scope 0 at cita-jsonrpc/src/extractor.rs:47:24: 49:23
    let mut _5: hyper::Body;             // in scope 0 at cita-jsonrpc/src/extractor.rs:47:24: 48:25
    let mut _6: std::boxed::Box<futures::AndThen<futures::MapErr<futures::stream::Concat2<hyper::Body>, fn(hyper::Error) -> service_error::ServiceError {service_error::ServiceError::BodyConcatError}>, std::result::Result<jsonrpc_types::rpc_request::RpcRequest, service_error::ServiceError>, [closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30]>>; // in scope 0 at cita-jsonrpc/src/extractor.rs:56:9: 56:27
    let mut _7: futures::AndThen<futures::MapErr<futures::stream::Concat2<hyper::Body>, fn(hyper::Error) -> service_error::ServiceError {service_error::ServiceError::BodyConcatError}>, std::result::Result<jsonrpc_types::rpc_request::RpcRequest, service_error::ServiceError>, [closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30]>; // in scope 0 at cita-jsonrpc/src/extractor.rs:56:18: 56:26
    scope 1 {
        debug fut_resp => _2;            // in scope 1 at cita-jsonrpc/src/extractor.rs:47:13: 47:21
    }

    bb0: {
        _5 = hyper::Request::<Body>::into_body(move _1) -> bb1; // scope 0 at cita-jsonrpc/src/extractor.rs:47:24: 48:25
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:48:14: 48:23
                                         // + literal: Const { ty: fn(hyper::Request<Body>) -> Body {hyper::Request::<Body>::into_body}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <Body as Stream>::concat2(move _5) -> bb2; // scope 0 at cita-jsonrpc/src/extractor.rs:47:24: 49:23
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:49:14: 49:21
                                         // + literal: Const { ty: fn(Body) -> Concat2<Body> {<Body as Stream>::concat2}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <Concat2<Body> as futures::Future>::map_err::<fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}, ServiceError>(move _4, ServiceError::BodyConcatError) -> bb3; // scope 0 at cita-jsonrpc/src/extractor.rs:47:24: 50:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:50:14: 50:21
                                         // + literal: Const { ty: fn(Concat2<Body>, fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}) -> futures::MapErr<Concat2<Body>, fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}> {<Concat2<Body> as futures::Future>::map_err::<fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}, ServiceError>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:50:22: 50:51
                                         // + literal: Const { ty: fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = <futures::MapErr<Concat2<Body>, fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}> as futures::Future>::and_then::<[closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30], Result<RpcRequest, ServiceError>>(move _3, const ZeroSized: [closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30]) -> bb4; // scope 0 at cita-jsonrpc/src/extractor.rs:47:24: 54:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:51:14: 51:22
                                         // + literal: Const { ty: fn(futures::MapErr<Concat2<Body>, fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}>, [closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30]) -> futures::AndThen<futures::MapErr<Concat2<Body>, fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}>, Result<RpcRequest, ServiceError>, [closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30]> {<futures::MapErr<Concat2<Body>, fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}> as futures::Future>::and_then::<[closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30], Result<RpcRequest, ServiceError>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30], val: Value(<ZST>) }
    }

    bb4: {
        _7 = move _2;                    // scope 1 at cita-jsonrpc/src/extractor.rs:56:18: 56:26
        _6 = Box::<futures::AndThen<futures::MapErr<Concat2<Body>, fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}>, Result<RpcRequest, ServiceError>, [closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30]>>::new(move _7) -> bb5; // scope 1 at cita-jsonrpc/src/extractor.rs:56:9: 56:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:56:9: 56:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(futures::AndThen<futures::MapErr<Concat2<Body>, fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}>, Result<RpcRequest, ServiceError>, [closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30]>) -> Box<futures::AndThen<futures::MapErr<Concat2<Body>, fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}>, Result<RpcRequest, ServiceError>, [closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30]>> {Box::<futures::AndThen<futures::MapErr<Concat2<Body>, fn(hyper::Error) -> ServiceError {ServiceError::BodyConcatError}>, Result<RpcRequest, ServiceError>, [closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30]>>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = move _6 as std::boxed::Box<dyn futures::Future<Item = jsonrpc_types::rpc_request::RpcRequest, Error = service_error::ServiceError> + std::marker::Send> (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/extractor.rs:56:9: 56:27
        return;                          // scope 0 at cita-jsonrpc/src/extractor.rs:57:6: 57:6
    }
}

fn extractor::<impl at cita-jsonrpc/src/extractor.rs:40:1: 40:66>::extract_from::{closure#0}(_1: [closure@cita-jsonrpc/src/extractor.rs:51:23: 51:30], _2: Chunk) -> Result<RpcRequest, ServiceError> {
    debug chunk => _2;                   // in scope 0 at cita-jsonrpc/src/extractor.rs:51:24: 51:29
    let mut _0: std::result::Result<jsonrpc_types::rpc_request::RpcRequest, service_error::ServiceError>; // return place in scope 0 at cita-jsonrpc/src/extractor.rs:51:31: 51:31
    let mut _3: std::result::Result<jsonrpc_types::rpc_request::RpcRequest, serde_json::Error>; // in scope 0 at cita-jsonrpc/src/extractor.rs:52:17: 52:65
    let mut _4: &[u8];                   // in scope 0 at cita-jsonrpc/src/extractor.rs:52:58: 52:64
    let _5: &[u8];                       // in scope 0 at cita-jsonrpc/src/extractor.rs:52:58: 52:64
    let _6: &hyper::Chunk;               // in scope 0 at cita-jsonrpc/src/extractor.rs:52:58: 52:64

    bb0: {
        _6 = &_2;                        // scope 0 at cita-jsonrpc/src/extractor.rs:52:58: 52:64
        _5 = <Chunk as Deref>::deref(_6) -> [return: bb1, unwind: bb5]; // scope 0 at cita-jsonrpc/src/extractor.rs:52:58: 52:64
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:52:58: 52:64
                                         // + literal: Const { ty: for<'a> fn(&'a Chunk) -> &'a <Chunk as Deref>::Target {<Chunk as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-jsonrpc/src/extractor.rs:52:58: 52:64
        _3 = from_slice::<'_, RpcRequest>(move _4) -> [return: bb2, unwind: bb5]; // scope 0 at cita-jsonrpc/src/extractor.rs:52:17: 52:65
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:52:17: 52:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[u8]) -> Result<RpcRequest, serde_json::Error> {from_slice::<'_, RpcRequest>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Result::<RpcRequest, serde_json::Error>::map_err::<ServiceError, fn(serde_json::Error) -> ServiceError {ServiceError::JsonrpcSerdeError}>(move _3, ServiceError::JsonrpcSerdeError) -> [return: bb3, unwind: bb5]; // scope 0 at cita-jsonrpc/src/extractor.rs:52:17: 53:62
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:53:22: 53:29
                                         // + literal: Const { ty: fn(Result<RpcRequest, serde_json::Error>, fn(serde_json::Error) -> ServiceError {ServiceError::JsonrpcSerdeError}) -> Result<RpcRequest, ServiceError> {Result::<RpcRequest, serde_json::Error>::map_err::<ServiceError, fn(serde_json::Error) -> ServiceError {ServiceError::JsonrpcSerdeError}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:53:30: 53:61
                                         // + literal: Const { ty: fn(serde_json::Error) -> ServiceError {ServiceError::JsonrpcSerdeError}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at cita-jsonrpc/src/extractor.rs:54:13: 54:14
    }

    bb4: {
        return;                          // scope 0 at cita-jsonrpc/src/extractor.rs:54:14: 54:14
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at cita-jsonrpc/src/extractor.rs:54:13: 54:14
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/extractor.rs:51:23: 54:14
    }
}

fn extractor::<impl at cita-jsonrpc/src/extractor.rs:60:1: 60:49>::extract_from(_1: PartialRequest) -> Result<HybridRequest, ServiceError> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/extractor.rs:63:21: 63:25
    let mut _0: std::result::Result<mq_publisher::HybridRequest, service_error::ServiceError>; // return place in scope 0 at cita-jsonrpc/src/extractor.rs:63:30: 63:64
    let _2: jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/extractor.rs:64:13: 64:21
    let mut _3: &jsonrpc_types::rpc_request::PartialRequest; // in scope 0 at cita-jsonrpc/src/extractor.rs:64:24: 64:39
    let mut _4: std::result::Result<(jsonrpc_types::rpc_request::Request, libproto::Request), service_error::ServiceError>; // in scope 0 at cita-jsonrpc/src/extractor.rs:66:9: 67:78
    let mut _5: std::result::Result<(jsonrpc_types::rpc_request::Request, libproto::Request), jsonrpc_types::Error>; // in scope 0 at cita-jsonrpc/src/extractor.rs:66:9: 66:39
    let mut _6: jsonrpc_types::rpc_request::PartialRequest; // in scope 0 at cita-jsonrpc/src/extractor.rs:66:9: 66:13
    let mut _7: [closure@cita-jsonrpc/src/extractor.rs:67:22: 67:25]; // in scope 0 at cita-jsonrpc/src/extractor.rs:67:22: 67:77
    let mut _8: bool;                    // in scope 0 at cita-jsonrpc/src/extractor.rs:72:5: 72:6
    let mut _9: bool;                    // in scope 0 at cita-jsonrpc/src/extractor.rs:72:5: 72:6
    scope 1 {
        debug req_info => _2;            // in scope 1 at cita-jsonrpc/src/extractor.rs:64:13: 64:21
    }

    bb0: {
        _9 = const false;                // scope 0 at cita-jsonrpc/src/extractor.rs:64:13: 64:21
        _8 = const false;                // scope 0 at cita-jsonrpc/src/extractor.rs:64:13: 64:21
        _9 = const true;                 // scope 0 at cita-jsonrpc/src/extractor.rs:64:13: 64:21
        _3 = &_1;                        // scope 0 at cita-jsonrpc/src/extractor.rs:64:24: 64:39
        _2 = PartialRequest::get_info(move _3) -> [return: bb1, unwind: bb9]; // scope 0 at cita-jsonrpc/src/extractor.rs:64:24: 64:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:64:29: 64:37
                                         // + literal: Const { ty: for<'a> fn(&'a PartialRequest) -> RequestInfo {PartialRequest::get_info}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = const true;                 // scope 0 at cita-jsonrpc/src/extractor.rs:64:38: 64:39
        _9 = const false;                // scope 1 at cita-jsonrpc/src/extractor.rs:66:9: 66:13
        _6 = move _1;                    // scope 1 at cita-jsonrpc/src/extractor.rs:66:9: 66:13
        _5 = <PartialRequest as CompleteInto>::complete_and_into_proto(move _6) -> [return: bb2, unwind: bb7]; // scope 1 at cita-jsonrpc/src/extractor.rs:66:9: 66:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:66:14: 66:37
                                         // + literal: Const { ty: fn(PartialRequest) -> Result<(jsonrpc_types::rpc_request::Request, libproto::Request), jsonrpc_types::Error> {<PartialRequest as CompleteInto>::complete_and_into_proto}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const false;                // scope 1 at cita-jsonrpc/src/extractor.rs:67:22: 67:77
        _7 = [closure@cita-jsonrpc/src/extractor.rs:67:22: 67:25] { req_info: move _2 }; // scope 1 at cita-jsonrpc/src/extractor.rs:67:22: 67:77
                                         // closure
                                         // + def_id: DefId(0:50 ~ cita_jsonrpc[a6db]::extractor::{impl#1}::extract_from::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((jsonrpc_types::Error,)) -> service_error::ServiceError,
                                         //     (jsonrpc_types::rpc_request::RequestInfo,),
                                         // ]
        _4 = Result::<(jsonrpc_types::rpc_request::Request, libproto::Request), jsonrpc_types::Error>::map_err::<ServiceError, [closure@cita-jsonrpc/src/extractor.rs:67:22: 67:25]>(move _5, move _7) -> [return: bb3, unwind: bb7]; // scope 1 at cita-jsonrpc/src/extractor.rs:66:9: 67:78
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:67:14: 67:21
                                         // + literal: Const { ty: fn(Result<(jsonrpc_types::rpc_request::Request, libproto::Request), jsonrpc_types::Error>, [closure@cita-jsonrpc/src/extractor.rs:67:22: 67:25]) -> Result<(jsonrpc_types::rpc_request::Request, libproto::Request), ServiceError> {Result::<(jsonrpc_types::rpc_request::Request, libproto::Request), jsonrpc_types::Error>::map_err::<ServiceError, [closure@cita-jsonrpc/src/extractor.rs:67:22: 67:25]>}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Result::<(jsonrpc_types::rpc_request::Request, libproto::Request), ServiceError>::map::<HybridRequest, [closure@cita-jsonrpc/src/extractor.rs:68:18: 68:52]>(move _4, const ZeroSized: [closure@cita-jsonrpc/src/extractor.rs:68:18: 68:52]) -> [return: bb4, unwind: bb7]; // scope 1 at cita-jsonrpc/src/extractor.rs:66:9: 71:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:68:14: 68:17
                                         // + literal: Const { ty: fn(Result<(jsonrpc_types::rpc_request::Request, libproto::Request), ServiceError>, [closure@cita-jsonrpc/src/extractor.rs:68:18: 68:52]) -> Result<HybridRequest, ServiceError> {Result::<(jsonrpc_types::rpc_request::Request, libproto::Request), ServiceError>::map::<HybridRequest, [closure@cita-jsonrpc/src/extractor.rs:68:18: 68:52]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/extractor.rs:68:18: 68:52], val: Value(<ZST>) }
    }

    bb4: {
        _8 = const false;                // scope 0 at cita-jsonrpc/src/extractor.rs:72:5: 72:6
        return;                          // scope 0 at cita-jsonrpc/src/extractor.rs:72:6: 72:6
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/extractor.rs:63:5: 72:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at cita-jsonrpc/src/extractor.rs:72:5: 72:6
    }

    bb7 (cleanup): {
        switchInt(_8) -> [0: bb9, otherwise: bb6]; // scope 0 at cita-jsonrpc/src/extractor.rs:72:5: 72:6
    }

    bb8 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at cita-jsonrpc/src/extractor.rs:72:5: 72:6
    }

    bb9 (cleanup): {
        switchInt(_9) -> [0: bb5, otherwise: bb8]; // scope 0 at cita-jsonrpc/src/extractor.rs:72:5: 72:6
    }
}

fn extractor::<impl at cita-jsonrpc/src/extractor.rs:60:1: 60:49>::extract_from::{closure#0}(_1: [closure@cita-jsonrpc/src/extractor.rs:67:22: 67:25], _2: jsonrpc_types::Error) -> ServiceError {
    debug e => _2;                       // in scope 0 at cita-jsonrpc/src/extractor.rs:67:23: 67:24
    debug req_info => (_1.0: jsonrpc_types::rpc_request::RequestInfo); // in scope 0 at cita-jsonrpc/src/extractor.rs:64:13: 64:21
    let mut _0: service_error::ServiceError; // return place in scope 0 at cita-jsonrpc/src/extractor.rs:67:26: 67:26
    let mut _3: jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/extractor.rs:67:65: 67:73

    bb0: {
        _3 = move (_1.0: jsonrpc_types::rpc_request::RequestInfo); // scope 0 at cita-jsonrpc/src/extractor.rs:67:65: 67:73
        _0 = ServiceError::JsonrpcPartCompleteError(move _3, move _2); // scope 0 at cita-jsonrpc/src/extractor.rs:67:26: 67:77
        return;                          // scope 0 at cita-jsonrpc/src/extractor.rs:67:77: 67:77
    }
}

fn extractor::<impl at cita-jsonrpc/src/extractor.rs:60:1: 60:49>::extract_from::{closure#1}(_1: [closure@cita-jsonrpc/src/extractor.rs:68:18: 68:52], _2: (jsonrpc_types::rpc_request::Request, libproto::Request)) -> HybridRequest {
    debug req => _2;                     // in scope 0 at cita-jsonrpc/src/extractor.rs:68:19: 68:22
    let mut _0: mq_publisher::HybridRequest; // return place in scope 0 at cita-jsonrpc/src/extractor.rs:68:53: 68:53
    let mut _3: jsonrpc_types::rpc_request::Request; // in scope 0 at cita-jsonrpc/src/extractor.rs:69:27: 69:32
    let mut _4: libproto::Request;       // in scope 0 at cita-jsonrpc/src/extractor.rs:70:28: 70:33

    bb0: {
        _3 = move (_2.0: jsonrpc_types::rpc_request::Request); // scope 0 at cita-jsonrpc/src/extractor.rs:69:27: 69:32
        _4 = move (_2.1: libproto::Request); // scope 0 at cita-jsonrpc/src/extractor.rs:70:28: 70:33
        _0 = HybridRequest { json_req: move _3, proto_req: move _4 }; // scope 0 at cita-jsonrpc/src/extractor.rs:68:53: 71:14
        return;                          // scope 0 at cita-jsonrpc/src/extractor.rs:71:14: 71:14
    }
}

fn extractor::<impl at cita-jsonrpc/src/extractor.rs:75:1: 75:48>::extract_from(_1: RpcRequest) -> Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/extractor.rs:79:21: 79:25
    let mut _0: std::boxed::Box<dyn futures::Future<Item = mq_publisher::MQRequest, Error = service_error::ServiceError> + std::marker::Send>; // return place in scope 0 at cita-jsonrpc/src/extractor.rs:91:9: 91:26
    let _2: futures::Done<mq_publisher::MQRequest, service_error::ServiceError>; // in scope 0 at cita-jsonrpc/src/extractor.rs:80:13: 80:20
    let mut _3: std::result::Result<mq_publisher::MQRequest, service_error::ServiceError>; // in scope 0 at cita-jsonrpc/src/extractor.rs:80:62: 88:10
    let mut _4: isize;                   // in scope 0 at cita-jsonrpc/src/extractor.rs:81:13: 81:45
    let _5: jsonrpc_types::rpc_request::PartialRequest; // in scope 0 at cita-jsonrpc/src/extractor.rs:81:36: 81:44
    let mut _6: std::result::Result<mq_publisher::HybridRequest, service_error::ServiceError>; // in scope 0 at cita-jsonrpc/src/extractor.rs:81:49: 81:99
    let _7: std::vec::Vec<jsonrpc_types::rpc_request::PartialRequest>; // in scope 0 at cita-jsonrpc/src/extractor.rs:83:35: 83:44
    let mut _8: std::result::Result<std::vec::Vec<mq_publisher::HybridRequest>, service_error::ServiceError>; // in scope 0 at cita-jsonrpc/src/extractor.rs:83:49: 86:71
    let mut _9: std::iter::Map<std::vec::IntoIter<jsonrpc_types::rpc_request::PartialRequest>, fn(jsonrpc_types::rpc_request::PartialRequest) -> std::result::Result<mq_publisher::HybridRequest, <jsonrpc_types::rpc_request::PartialRequest as extractor::Extractor<mq_publisher::HybridRequest>>::Error> {<jsonrpc_types::rpc_request::PartialRequest as extractor::Extractor<mq_publisher::HybridRequest>>::extract_from}>; // in scope 0 at cita-jsonrpc/src/extractor.rs:83:49: 85:63
    let mut _10: std::vec::IntoIter<jsonrpc_types::rpc_request::PartialRequest>; // in scope 0 at cita-jsonrpc/src/extractor.rs:83:49: 84:29
    let mut _11: std::boxed::Box<futures::Done<mq_publisher::MQRequest, service_error::ServiceError>>; // in scope 0 at cita-jsonrpc/src/extractor.rs:91:9: 91:26
    let mut _12: futures::Done<mq_publisher::MQRequest, service_error::ServiceError>; // in scope 0 at cita-jsonrpc/src/extractor.rs:91:18: 91:25
    scope 1 {
        debug fut_ret => _2;             // in scope 1 at cita-jsonrpc/src/extractor.rs:80:13: 80:20
    }
    scope 2 {
        debug part_req => _5;            // in scope 2 at cita-jsonrpc/src/extractor.rs:81:36: 81:44
    }
    scope 3 {
        debug part_reqs => _7;           // in scope 3 at cita-jsonrpc/src/extractor.rs:83:35: 83:44
    }

    bb0: {
        _4 = discriminant(_1);           // scope 0 at cita-jsonrpc/src/extractor.rs:80:68: 80:72
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/extractor.rs:80:62: 80:72
    }

    bb1: {
        _7 = move ((_1 as Batch).0: std::vec::Vec<jsonrpc_types::rpc_request::PartialRequest>); // scope 0 at cita-jsonrpc/src/extractor.rs:83:35: 83:44
        _10 = <Vec<PartialRequest> as IntoIterator>::into_iter(move _7) -> bb5; // scope 3 at cita-jsonrpc/src/extractor.rs:83:49: 84:29
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:84:18: 84:27
                                         // + literal: Const { ty: fn(Vec<PartialRequest>) -> <Vec<PartialRequest> as IntoIterator>::IntoIter {<Vec<PartialRequest> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/extractor.rs:80:68: 80:72
    }

    bb3: {
        _5 = move ((_1 as Single).0: jsonrpc_types::rpc_request::PartialRequest); // scope 0 at cita-jsonrpc/src/extractor.rs:81:36: 81:44
        _6 = <PartialRequest as Extractor<HybridRequest>>::extract_from(move _5) -> bb4; // scope 2 at cita-jsonrpc/src/extractor.rs:81:49: 81:99
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:81:49: 81:89
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(PartialRequest) -> Result<HybridRequest, <PartialRequest as Extractor<HybridRequest>>::Error> {<PartialRequest as Extractor<HybridRequest>>::extract_from}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = Result::<HybridRequest, ServiceError>::map::<MQRequest, [closure@cita-jsonrpc/src/extractor.rs:82:22: 82:34]>(move _6, const ZeroSized: [closure@cita-jsonrpc/src/extractor.rs:82:22: 82:34]) -> bb8; // scope 2 at cita-jsonrpc/src/extractor.rs:81:49: 82:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:82:18: 82:21
                                         // + literal: Const { ty: fn(Result<HybridRequest, ServiceError>, [closure@cita-jsonrpc/src/extractor.rs:82:22: 82:34]) -> Result<MQRequest, ServiceError> {Result::<HybridRequest, ServiceError>::map::<MQRequest, [closure@cita-jsonrpc/src/extractor.rs:82:22: 82:34]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/extractor.rs:82:22: 82:34], val: Value(<ZST>) }
    }

    bb5: {
        _9 = <std::vec::IntoIter<PartialRequest> as Iterator>::map::<Result<HybridRequest, ServiceError>, fn(PartialRequest) -> Result<HybridRequest, <PartialRequest as Extractor<HybridRequest>>::Error> {<PartialRequest as Extractor<HybridRequest>>::extract_from}>(move _10, <PartialRequest as Extractor<HybridRequest>>::extract_from) -> bb6; // scope 3 at cita-jsonrpc/src/extractor.rs:83:49: 85:63
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:85:18: 85:21
                                         // + literal: Const { ty: fn(std::vec::IntoIter<PartialRequest>, fn(PartialRequest) -> Result<HybridRequest, <PartialRequest as Extractor<HybridRequest>>::Error> {<PartialRequest as Extractor<HybridRequest>>::extract_from}) -> std::iter::Map<std::vec::IntoIter<PartialRequest>, fn(PartialRequest) -> Result<HybridRequest, <PartialRequest as Extractor<HybridRequest>>::Error> {<PartialRequest as Extractor<HybridRequest>>::extract_from}> {<std::vec::IntoIter<PartialRequest> as Iterator>::map::<Result<HybridRequest, ServiceError>, fn(PartialRequest) -> Result<HybridRequest, <PartialRequest as Extractor<HybridRequest>>::Error> {<PartialRequest as Extractor<HybridRequest>>::extract_from}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:85:22: 85:62
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(PartialRequest) -> Result<HybridRequest, <PartialRequest as Extractor<HybridRequest>>::Error> {<PartialRequest as Extractor<HybridRequest>>::extract_from}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = <std::iter::Map<std::vec::IntoIter<PartialRequest>, fn(PartialRequest) -> Result<HybridRequest, <PartialRequest as Extractor<HybridRequest>>::Error> {<PartialRequest as Extractor<HybridRequest>>::extract_from}> as Iterator>::collect::<Result<Vec<HybridRequest>, ServiceError>>(move _9) -> bb7; // scope 3 at cita-jsonrpc/src/extractor.rs:83:49: 86:71
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:86:18: 86:25
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<PartialRequest>, fn(PartialRequest) -> Result<HybridRequest, <PartialRequest as Extractor<HybridRequest>>::Error> {<PartialRequest as Extractor<HybridRequest>>::extract_from}>) -> Result<Vec<HybridRequest>, ServiceError> {<std::iter::Map<std::vec::IntoIter<PartialRequest>, fn(PartialRequest) -> Result<HybridRequest, <PartialRequest as Extractor<HybridRequest>>::Error> {<PartialRequest as Extractor<HybridRequest>>::extract_from}> as Iterator>::collect::<Result<Vec<HybridRequest>, ServiceError>>}, val: Value(<ZST>) }
    }

    bb7: {
        _3 = Result::<Vec<HybridRequest>, ServiceError>::map::<MQRequest, fn(Vec<HybridRequest>) -> MQRequest {MQRequest::Batch}>(move _8, MQRequest::Batch) -> bb8; // scope 3 at cita-jsonrpc/src/extractor.rs:83:49: 87:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:87:18: 87:21
                                         // + literal: Const { ty: fn(Result<Vec<HybridRequest>, ServiceError>, fn(Vec<HybridRequest>) -> MQRequest {MQRequest::Batch}) -> Result<MQRequest, ServiceError> {Result::<Vec<HybridRequest>, ServiceError>::map::<MQRequest, fn(Vec<HybridRequest>) -> MQRequest {MQRequest::Batch}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:87:22: 87:38
                                         // + literal: Const { ty: fn(Vec<HybridRequest>) -> MQRequest {MQRequest::Batch}, val: Value(<ZST>) }
    }

    bb8: {
        _2 = <Result<MQRequest, ServiceError> as Into<Failed<MQRequest, ServiceError>>>::into(move _3) -> bb9; // scope 0 at cita-jsonrpc/src/extractor.rs:80:62: 89:16
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:89:10: 89:14
                                         // + literal: Const { ty: fn(Result<MQRequest, ServiceError>) -> Failed<MQRequest, ServiceError> {<Result<MQRequest, ServiceError> as Into<Failed<MQRequest, ServiceError>>>::into}, val: Value(<ZST>) }
    }

    bb9: {
        _12 = move _2;                   // scope 1 at cita-jsonrpc/src/extractor.rs:91:18: 91:25
        _11 = Box::<Failed<MQRequest, ServiceError>>::new(move _12) -> bb10; // scope 1 at cita-jsonrpc/src/extractor.rs:91:9: 91:26
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:91:9: 91:17
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(Failed<MQRequest, ServiceError>) -> Box<Failed<MQRequest, ServiceError>> {Box::<Failed<MQRequest, ServiceError>>::new}, val: Value(<ZST>) }
    }

    bb10: {
        _0 = move _11 as std::boxed::Box<dyn futures::Future<Item = mq_publisher::MQRequest, Error = service_error::ServiceError> + std::marker::Send> (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/extractor.rs:91:9: 91:26
        return;                          // scope 0 at cita-jsonrpc/src/extractor.rs:92:6: 92:6
    }
}

fn extractor::<impl at cita-jsonrpc/src/extractor.rs:75:1: 75:48>::extract_from::{closure#0}(_1: [closure@cita-jsonrpc/src/extractor.rs:82:22: 82:34], _2: HybridRequest) -> MQRequest {
    debug hybrid_req => _2;              // in scope 0 at cita-jsonrpc/src/extractor.rs:82:23: 82:33
    let mut _0: mq_publisher::MQRequest; // return place in scope 0 at cita-jsonrpc/src/extractor.rs:82:35: 82:35
    let mut _3: std::boxed::Box<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/extractor.rs:82:53: 82:73

    bb0: {
        _3 = Box::<HybridRequest>::new(move _2) -> bb1; // scope 0 at cita-jsonrpc/src/extractor.rs:82:53: 82:73
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/extractor.rs:82:53: 82:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(HybridRequest) -> Box<HybridRequest> {Box::<HybridRequest>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = MQRequest::Single(move _3); // scope 0 at cita-jsonrpc/src/extractor.rs:82:35: 82:74
        return;                          // scope 0 at cita-jsonrpc/src/extractor.rs:82:74: 82:74
    }
}

fn set_fd_limit() -> () {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/fdlimit.rs:16:23: 16:23
    let mut _2: i32;                     // in scope 0 at cita-jsonrpc/src/fdlimit.rs:24:12: 24:59
    let mut _3: *mut libc::rlimit;       // in scope 0 at cita-jsonrpc/src/fdlimit.rs:24:49: 24:58
    let mut _4: &mut libc::rlimit;       // in scope 0 at cita-jsonrpc/src/fdlimit.rs:24:49: 24:58
    let mut _6: !;                       // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
    let mut _7: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _8: &[&str];                 // in scope 0 at cita-jsonrpc/src/fdlimit.rs:26:20: 26:63
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/fdlimit.rs:26:65: 26:68
    let _13: &std::io::Error;            // in scope 0 at cita-jsonrpc/src/fdlimit.rs:26:65: 26:68
    let mut _14: u64;                    // in scope 0 at cita-jsonrpc/src/fdlimit.rs:28:25: 28:38
    let mut _15: i32;                    // in scope 0 at cita-jsonrpc/src/fdlimit.rs:29:12: 29:55
    let mut _16: *const libc::rlimit;    // in scope 0 at cita-jsonrpc/src/fdlimit.rs:29:49: 29:54
    let _17: &libc::rlimit;              // in scope 0 at cita-jsonrpc/src/fdlimit.rs:29:49: 29:54
    let mut _19: !;                      // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
    let mut _20: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _21: &[&str];                // in scope 0 at cita-jsonrpc/src/fdlimit.rs:31:20: 31:65
    let mut _22: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _23: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let _24: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
    let mut _25: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/fdlimit.rs:31:67: 31:70
    let _26: &std::io::Error;            // in scope 0 at cita-jsonrpc/src/fdlimit.rs:31:67: 31:70
    scope 1 {
        let mut _1: libc::rlimit;        // in scope 1 at cita-jsonrpc/src/fdlimit.rs:20:13: 20:21
        scope 2 {
            debug rlim => _1;            // in scope 2 at cita-jsonrpc/src/fdlimit.rs:20:13: 20:21
            let _5: std::io::Error;      // in scope 2 at cita-jsonrpc/src/fdlimit.rs:25:17: 25:20
            let _18: std::io::Error;     // in scope 2 at cita-jsonrpc/src/fdlimit.rs:30:17: 30:20
            scope 3 {
                debug err => _5;         // in scope 3 at cita-jsonrpc/src/fdlimit.rs:25:17: 25:20
                let mut _28: &[&str; 1]; // in scope 3 at cita-jsonrpc/src/fdlimit.rs:26:20: 26:63
            }
            scope 4 {
                debug err => _18;        // in scope 4 at cita-jsonrpc/src/fdlimit.rs:30:17: 30:20
                let mut _27: &[&str; 1]; // in scope 4 at cita-jsonrpc/src/fdlimit.rs:31:20: 31:65
            }
        }
    }

    bb0: {
        _1 = rlimit { rlim_cur: const 0_u64, rlim_max: const 0_u64 }; // scope 1 at cita-jsonrpc/src/fdlimit.rs:20:24: 23:10
        _4 = &mut _1;                    // scope 2 at cita-jsonrpc/src/fdlimit.rs:24:49: 24:58
        _3 = &raw mut (*_4);             // scope 2 at cita-jsonrpc/src/fdlimit.rs:24:49: 24:58
        _2 = getrlimit(const _, move _3) -> bb1; // scope 2 at cita-jsonrpc/src/fdlimit.rs:24:12: 24:59
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/fdlimit.rs:24:12: 24:27
                                         // + literal: Const { ty: unsafe extern "C" fn(i32, *mut rlimit) -> i32 {getrlimit}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb6, otherwise: bb2]; // scope 2 at cita-jsonrpc/src/fdlimit.rs:24:12: 24:64
    }

    bb2: {
        _5 = std::io::Error::last_os_error() -> bb3; // scope 2 at cita-jsonrpc/src/fdlimit.rs:25:23: 25:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/fdlimit.rs:25:23: 25:47
                                         // + literal: Const { ty: fn() -> std::io::Error {std::io::Error::last_os_error}, val: Value(<ZST>) }
    }

    bb3: {
        _28 = const _;                   // scope 3 at cita-jsonrpc/src/fdlimit.rs:26:20: 26:63
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/fdlimit.rs:26:20: 26:63
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(set_fd_limit, [], Some(promoted[1])) }
        _8 = _28 as &[&str] (Pointer(Unsize)); // scope 3 at cita-jsonrpc/src/fdlimit.rs:26:20: 26:63
        _13 = &_5;                       // scope 3 at cita-jsonrpc/src/fdlimit.rs:26:65: 26:68
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>(_13) -> [return: bb4, unwind: bb14]; // scope 3 at cita-jsonrpc/src/fdlimit.rs:26:65: 26:68
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/fdlimit.rs:26:65: 26:68
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b std::io::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = [move _12];                // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _10 = &_11;                      // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _9 = _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb5, unwind: bb14]; // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = panic_fmt(move _7) -> bb14; // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = (_1.1: u64);               // scope 2 at cita-jsonrpc/src/fdlimit.rs:28:25: 28:38
        (_1.0: u64) = move _14;          // scope 2 at cita-jsonrpc/src/fdlimit.rs:28:9: 28:38
        _17 = &_1;                       // scope 2 at cita-jsonrpc/src/fdlimit.rs:29:49: 29:54
        _16 = &raw const (*_17);         // scope 2 at cita-jsonrpc/src/fdlimit.rs:29:49: 29:54
        _15 = setrlimit(const _, move _16) -> bb7; // scope 2 at cita-jsonrpc/src/fdlimit.rs:29:12: 29:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/fdlimit.rs:29:12: 29:27
                                         // + literal: Const { ty: unsafe extern "C" fn(i32, *const rlimit) -> i32 {setrlimit}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _15) -> [0: bb12, otherwise: bb8]; // scope 2 at cita-jsonrpc/src/fdlimit.rs:29:12: 29:60
    }

    bb8: {
        _18 = std::io::Error::last_os_error() -> bb9; // scope 2 at cita-jsonrpc/src/fdlimit.rs:30:23: 30:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/fdlimit.rs:30:23: 30:47
                                         // + literal: Const { ty: fn() -> std::io::Error {std::io::Error::last_os_error}, val: Value(<ZST>) }
    }

    bb9: {
        _27 = const _;                   // scope 4 at cita-jsonrpc/src/fdlimit.rs:31:20: 31:65
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/fdlimit.rs:31:20: 31:65
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(set_fd_limit, [], Some(promoted[0])) }
        _21 = _27 as &[&str] (Pointer(Unsize)); // scope 4 at cita-jsonrpc/src/fdlimit.rs:31:20: 31:65
        _26 = &_18;                      // scope 4 at cita-jsonrpc/src/fdlimit.rs:31:67: 31:70
        _25 = core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>(_26) -> [return: bb10, unwind: bb13]; // scope 4 at cita-jsonrpc/src/fdlimit.rs:31:67: 31:70
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/fdlimit.rs:31:67: 31:70
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b std::io::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>}, val: Value(<ZST>) }
    }

    bb10: {
        _24 = [move _25];                // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _23 = &_24;                      // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _22 = _23 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb11, unwind: bb13]; // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = panic_fmt(move _20) -> bb13; // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at cita-jsonrpc/src/fdlimit.rs:34:2: 34:2
    }

    bb13 (cleanup): {
        drop(_18) -> bb15;               // scope 2 at cita-jsonrpc/src/fdlimit.rs:32:9: 32:10
    }

    bb14 (cleanup): {
        drop(_5) -> bb15;                // scope 2 at cita-jsonrpc/src/fdlimit.rs:27:9: 27:10
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/fdlimit.rs:16:1: 34:2
    }
}

promoted[0] in set_fd_limit: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/fdlimit.rs:31:20: 31:65
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/fdlimit.rs:31:20: 31:65

    bb0: {
        _1 = [const "raise_fd_limit: error calling setrlimit: "]; // scope 0 at cita-jsonrpc/src/fdlimit.rs:31:20: 31:65
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/fdlimit.rs:31:20: 31:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/fdlimit.rs:31:20: 31:65
        return;                          // scope 0 at cita-jsonrpc/src/fdlimit.rs:31:20: 31:65
    }
}

promoted[1] in set_fd_limit: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/fdlimit.rs:26:20: 26:63
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/fdlimit.rs:26:20: 26:63

    bb0: {
        _1 = [const "set_fd_limit: error calling getrlimit: "]; // scope 0 at cita-jsonrpc/src/fdlimit.rs:26:20: 26:63
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/fdlimit.rs:26:20: 26:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/fdlimit.rs:26:20: 26:63
        return;                          // scope 0 at cita-jsonrpc/src/fdlimit.rs:26:20: 26:63
    }
}

fn select_topic(_1: &str) -> std::string::String {
    debug method => _1;                  // in scope 0 at cita-jsonrpc/src/helper.rs:36:21: 36:27
    let mut _0: std::string::String;     // return place in scope 0 at cita-jsonrpc/src/helper.rs:36:38: 36:44
    let mut _2: bool;                    // in scope 0 at cita-jsonrpc/src/helper.rs:38:9: 38:20
    let mut _3: bool;                    // in scope 0 at cita-jsonrpc/src/helper.rs:39:9: 39:20
    let mut _4: bool;                    // in scope 0 at cita-jsonrpc/src/helper.rs:40:9: 40:29
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/helper.rs:40:32: 40:49
    let mut _6: bool;                    // in scope 0 at cita-jsonrpc/src/helper.rs:41:9: 41:21
    let mut _7: bool;                    // in scope 0 at cita-jsonrpc/src/helper.rs:41:24: 41:39
    let mut _8: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _9: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _10: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _11: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _12: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _13: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _14: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _15: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _16: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _17: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _18: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _19: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _20: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _21: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _22: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25

    bb0: {
        _2 = <str as PartialEq>::eq(_1, const "peerCount") -> bb1; // scope 0 at cita-jsonrpc/src/helper.rs:38:9: 38:20
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:38:9: 38:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:38:9: 38:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb13]; // scope 0 at cita-jsonrpc/src/helper.rs:38:9: 38:20
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_1, const "peersInfo") -> bb3; // scope 0 at cita-jsonrpc/src/helper.rs:39:9: 39:20
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:39:9: 39:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:39:9: 39:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _3) -> [0: bb4, otherwise: bb14]; // scope 0 at cita-jsonrpc/src/helper.rs:39:9: 39:20
    }

    bb4: {
        _4 = <str as PartialEq>::eq(_1, const "sendRawTransaction") -> bb5; // scope 0 at cita-jsonrpc/src/helper.rs:40:9: 40:29
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:40:9: 40:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:40:9: 40:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _4) -> [0: bb6, otherwise: bb15]; // scope 0 at cita-jsonrpc/src/helper.rs:40:9: 40:29
    }

    bb6: {
        _5 = <str as PartialEq>::eq(_1, const "sendTransaction") -> bb7; // scope 0 at cita-jsonrpc/src/helper.rs:40:32: 40:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:40:32: 40:49
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:40:32: 40:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _5) -> [0: bb8, otherwise: bb15]; // scope 0 at cita-jsonrpc/src/helper.rs:40:32: 40:49
    }

    bb8: {
        _6 = <str as PartialEq>::eq(_1, const "getVersion") -> bb9; // scope 0 at cita-jsonrpc/src/helper.rs:41:9: 41:21
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:41:9: 41:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:41:9: 41:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        switchInt(move _6) -> [0: bb10, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/helper.rs:41:9: 41:21
    }

    bb10: {
        _7 = <str as PartialEq>::eq(_1, const "estimateQuota") -> bb11; // scope 0 at cita-jsonrpc/src/helper.rs:41:24: 41:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:41:24: 41:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:41:24: 41:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        switchInt(move _7) -> [0: bb12, otherwise: bb16]; // scope 0 at cita-jsonrpc/src/helper.rs:41:24: 41:39
    }

    bb12: {
        _21 = const libproto::router::SubModules::Jsonrpc; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x00)) }
        _22 = const libproto::router::MsgType::Request; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x01)) }
        _20 = RoutingKey(move _21, move _22); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _0 = <RoutingKey as Into<std::string::String>>::into(move _20) -> bb17; // scope 0 at cita-jsonrpc/src/helper.rs:42:14: 42:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:42:47: 42:51
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb13: {
        _9 = const libproto::router::SubModules::Jsonrpc; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x00)) }
        _10 = const RequestNet;          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x1e)) }
        _8 = RoutingKey(move _9, move _10); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _0 = <RoutingKey as Into<std::string::String>>::into(move _8) -> bb17; // scope 0 at cita-jsonrpc/src/helper.rs:38:24: 38:66
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:38:60: 38:64
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb14: {
        _12 = const libproto::router::SubModules::Jsonrpc; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x00)) }
        _13 = const RequestPeersInfo;    // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x21)) }
        _11 = RoutingKey(move _12, move _13); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _0 = <RoutingKey as Into<std::string::String>>::into(move _11) -> bb17; // scope 0 at cita-jsonrpc/src/helper.rs:39:24: 39:72
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:39:66: 39:70
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb15: {
        _15 = const libproto::router::SubModules::Jsonrpc; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x00)) }
        _16 = const RequestNewTx;        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x1c)) }
        _14 = RoutingKey(move _15, move _16); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _0 = <RoutingKey as Into<std::string::String>>::into(move _14) -> bb17; // scope 0 at cita-jsonrpc/src/helper.rs:40:53: 40:97
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:40:91: 40:95
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb16: {
        _18 = const libproto::router::SubModules::Jsonrpc; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x00)) }
        _19 = const RequestRpc;          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x20)) }
        _17 = RoutingKey(move _18, move _19); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _0 = <RoutingKey as Into<std::string::String>>::into(move _17) -> bb17; // scope 0 at cita-jsonrpc/src/helper.rs:41:43: 41:85
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/helper.rs:41:79: 41:83
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb17: {
        return;                          // scope 0 at cita-jsonrpc/src/helper.rs:44:2: 44:2
    }
}

const ORIGIN_ANY_STR: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-jsonrpc/src/http_header.rs:17:27: 17:31

    bb0: {
        _0 = const "*";                  // scope 0 at cita-jsonrpc/src/http_header.rs:17:34: 17:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:17:34: 17:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:17:1: 17:38
    }
}

const ORIGIN_NULL_STR: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-jsonrpc/src/http_header.rs:18:28: 18:32

    bb0: {
        _0 = const "null";               // scope 0 at cita-jsonrpc/src/http_header.rs:18:35: 18:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:18:35: 18:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:18:1: 18:42
    }
}

const CONTENT_TYPE_PLAIN_TEXT_STR: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-jsonrpc/src/http_header.rs:21:40: 21:44

    bb0: {
        _0 = const "text/plain; charset=utf-8"; // scope 0 at cita-jsonrpc/src/http_header.rs:21:47: 21:74
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:21:47: 21:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:21:1: 21:75
    }
}

const CONTENT_TYPE_JSON_STR: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-jsonrpc/src/http_header.rs:22:34: 22:38

    bb0: {
        _0 = const "application/json";   // scope 0 at cita-jsonrpc/src/http_header.rs:22:41: 22:59
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:22:41: 22:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:22:1: 22:60
    }
}

const X_REQUESTED_WITH_STR: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-jsonrpc/src/http_header.rs:24:33: 24:37

    bb0: {
        _0 = const "x-requested-with";   // scope 0 at cita-jsonrpc/src/http_header.rs:24:40: 24:58
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:24:40: 24:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:24:1: 24:59
    }
}

fn http_header::<impl at cita-jsonrpc/src/http_header.rs:36:1: 36:42>::from_vec(_1: Vec<T>) -> HeaderValue {
    debug values => _1;                  // in scope 0 at cita-jsonrpc/src/http_header.rs:40:17: 40:23
    let mut _0: hyper::header::HeaderValue; // return place in scope 0 at cita-jsonrpc/src/http_header.rs:40:36: 40:47
    let _2: std::string::String;         // in scope 0 at cita-jsonrpc/src/http_header.rs:41:13: 41:23
    let mut _3: &[&str];                 // in scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 45:24
    let _4: &[&str];                     // in scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 45:24
    let mut _5: &std::vec::Vec<&str>;    // in scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 45:24
    let _6: std::vec::Vec<&str>;         // in scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 44:36
    let mut _7: std::iter::Map<std::slice::Iter<'_, T>, for<'a> fn(&'a T) -> &'a str {<T as std::convert::AsRef<str>>::as_ref}>; // in scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 43:39
    let mut _8: std::slice::Iter<'_, T>; // in scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 42:20
    let mut _9: &[T];                    // in scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 42:20
    let _10: &[T];                       // in scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 42:20
    let mut _11: &std::vec::Vec<T>;      // in scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 42:20
    let _12: &str;                       // in scope 0 at cita-jsonrpc/src/http_header.rs:45:19: 45:23
    let mut _13: std::result::Result<hyper::header::HeaderValue, hyper::header::InvalidHeaderValue>; // in scope 0 at cita-jsonrpc/src/http_header.rs:47:9: 47:43
    let mut _14: &str;                   // in scope 0 at cita-jsonrpc/src/http_header.rs:47:31: 47:42
    let _15: &str;                       // in scope 0 at cita-jsonrpc/src/http_header.rs:47:31: 47:42
    let _16: &std::string::String;       // in scope 0 at cita-jsonrpc/src/http_header.rs:47:31: 47:42
    scope 1 {
        debug joined_str => _2;          // in scope 1 at cita-jsonrpc/src/http_header.rs:41:13: 41:23
    }

    bb0: {
        _11 = &_1;                       // scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 42:20
        _10 = <Vec<T> as Deref>::deref(move _11) -> [return: bb1, unwind: bb15]; // scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 42:20
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:41:26: 42:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<T>) -> &'a <Vec<T> as Deref>::Target {<Vec<T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = _10;                        // scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 42:20
        _8 = core::slice::<impl [T]>::iter(move _9) -> [return: bb2, unwind: bb15]; // scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 42:20
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:42:14: 42:18
                                         // + literal: Const { ty: for<'a> fn(&'a [T]) -> std::slice::Iter<'a, T> {core::slice::<impl [T]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = <std::slice::Iter<'_, T> as Iterator>::map::<&str, for<'a> fn(&'a T) -> &'a str {<T as AsRef<str>>::as_ref}>(move _8, <T as AsRef<str>>::as_ref) -> [return: bb3, unwind: bb15]; // scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 43:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:43:14: 43:17
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, T>, for<'a> fn(&'a T) -> &'a str {<T as AsRef<str>>::as_ref}) -> std::iter::Map<std::slice::Iter<'_, T>, for<'a> fn(&'a T) -> &'a str {<T as AsRef<str>>::as_ref}> {<std::slice::Iter<'_, T> as Iterator>::map::<&str, for<'a> fn(&'a T) -> &'a str {<T as AsRef<str>>::as_ref}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:43:18: 43:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> &'a str {<T as AsRef<str>>::as_ref}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = <std::iter::Map<std::slice::Iter<'_, T>, for<'a> fn(&'a T) -> &'a str {<T as AsRef<str>>::as_ref}> as Iterator>::collect::<Vec<&str>>(move _7) -> [return: bb4, unwind: bb15]; // scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 44:36
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:44:14: 44:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, T>, for<'a> fn(&'a T) -> &'a str {<T as AsRef<str>>::as_ref}>) -> Vec<&str> {<std::iter::Map<std::slice::Iter<'_, T>, for<'a> fn(&'a T) -> &'a str {<T as AsRef<str>>::as_ref}> as Iterator>::collect::<Vec<&str>>}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = &_6;                        // scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 45:24
        _4 = <Vec<&str> as Deref>::deref(move _5) -> [return: bb5, unwind: bb14]; // scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 45:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:41:26: 45:24
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<&str>) -> &'a <Vec<&str> as Deref>::Target {<Vec<&str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _3 = _4;                         // scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 45:24
        _12 = const ", ";                // scope 0 at cita-jsonrpc/src/http_header.rs:45:19: 45:23
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:45:19: 45:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = slice::<impl [&str]>::join::<&str>(move _3, _12) -> [return: bb6, unwind: bb14]; // scope 0 at cita-jsonrpc/src/http_header.rs:41:26: 45:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:45:14: 45:18
                                         // + literal: Const { ty: for<'a> fn(&'a [&str], &str) -> <[&str] as std::slice::Join<&str>>::Output {slice::<impl [&str]>::join::<&str>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_6) -> [return: bb7, unwind: bb13]; // scope 0 at cita-jsonrpc/src/http_header.rs:45:24: 45:25
    }

    bb7: {
        _16 = &_2;                       // scope 1 at cita-jsonrpc/src/http_header.rs:47:31: 47:42
        _15 = <std::string::String as Deref>::deref(_16) -> [return: bb8, unwind: bb13]; // scope 1 at cita-jsonrpc/src/http_header.rs:47:31: 47:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:47:31: 47:42
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _14 = _15;                       // scope 1 at cita-jsonrpc/src/http_header.rs:47:31: 47:42
        _13 = HeaderValue::from_str(move _14) -> [return: bb9, unwind: bb13]; // scope 1 at cita-jsonrpc/src/http_header.rs:47:9: 47:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:47:9: 47:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<HeaderValue, InvalidHeaderValue> {HeaderValue::from_str}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = Result::<HeaderValue, InvalidHeaderValue>::unwrap(move _13) -> [return: bb10, unwind: bb13]; // scope 1 at cita-jsonrpc/src/http_header.rs:47:9: 47:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:47:44: 47:50
                                         // + literal: Const { ty: fn(Result<HeaderValue, InvalidHeaderValue>) -> HeaderValue {Result::<HeaderValue, InvalidHeaderValue>::unwrap}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_2) -> [return: bb11, unwind: bb15]; // scope 0 at cita-jsonrpc/src/http_header.rs:48:5: 48:6
    }

    bb11: {
        drop(_1) -> bb12;                // scope 0 at cita-jsonrpc/src/http_header.rs:48:5: 48:6
    }

    bb12: {
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:48:6: 48:6
    }

    bb13 (cleanup): {
        drop(_2) -> bb15;                // scope 0 at cita-jsonrpc/src/http_header.rs:48:5: 48:6
    }

    bb14 (cleanup): {
        drop(_6) -> bb15;                // scope 0 at cita-jsonrpc/src/http_header.rs:45:24: 45:25
    }

    bb15 (cleanup): {
        drop(_1) -> bb16;                // scope 0 at cita-jsonrpc/src/http_header.rs:48:5: 48:6
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/http_header.rs:40:5: 48:6
    }
}

fn http_header::<impl at cita-jsonrpc/src/http_header.rs:55:1: 55:38>::insert_vec(_1: &mut HeaderMap, _2: HeaderName, _3: Vec<T>) -> std::option::Option<HeaderValue> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/http_header.rs:59:19: 59:28
    debug name => _2;                    // in scope 0 at cita-jsonrpc/src/http_header.rs:59:30: 59:34
    debug values => _3;                  // in scope 0 at cita-jsonrpc/src/http_header.rs:59:48: 59:54
    let mut _0: std::option::Option<hyper::header::HeaderValue>; // return place in scope 0 at cita-jsonrpc/src/http_header.rs:59:67: 59:86
    let mut _4: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_header.rs:60:21: 60:25
    let mut _5: hyper::header::HeaderValue; // in scope 0 at cita-jsonrpc/src/http_header.rs:60:27: 60:56
    let mut _6: bool;                    // in scope 0 at cita-jsonrpc/src/http_header.rs:60:56: 60:57

    bb0: {
        _6 = const false;                // scope 0 at cita-jsonrpc/src/http_header.rs:60:9: 60:57
        _6 = const true;                 // scope 0 at cita-jsonrpc/src/http_header.rs:60:21: 60:25
        _4 = move _2;                    // scope 0 at cita-jsonrpc/src/http_header.rs:60:21: 60:25
        _5 = <HeaderValue as HeaderValueExt<T>>::from_vec(move _3) -> [return: bb1, unwind: bb5]; // scope 0 at cita-jsonrpc/src/http_header.rs:60:27: 60:56
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:60:27: 60:48
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Vec<T>) -> HeaderValue {<HeaderValue as HeaderValueExt<T>>::from_vec}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = const false;                // scope 0 at cita-jsonrpc/src/http_header.rs:60:9: 60:57
        _0 = HeaderMap::insert::<HeaderName>(_1, move _4, move _5) -> [return: bb2, unwind: bb5]; // scope 0 at cita-jsonrpc/src/http_header.rs:60:9: 60:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:60:14: 60:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut HeaderMap, HeaderName, HeaderValue) -> std::option::Option<HeaderValue> {HeaderMap::insert::<HeaderName>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = const false;                // scope 0 at cita-jsonrpc/src/http_header.rs:60:56: 60:57
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:61:6: 61:6
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/http_header.rs:59:5: 61:6
    }

    bb4 (cleanup): {
        drop(_4) -> bb3;                 // scope 0 at cita-jsonrpc/src/http_header.rs:60:56: 60:57
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4]; // scope 0 at cita-jsonrpc/src/http_header.rs:60:56: 60:57
    }
}

fn http_header::<impl at cita-jsonrpc/src/http_header.rs:66:1: 66:12>::from_config(_1: &std::option::Option<std::string::String>) -> Result<HeaderValue, InvalidHeaderValue> {
    debug config => _1;                  // in scope 0 at cita-jsonrpc/src/http_header.rs:67:24: 67:30
    let mut _0: std::result::Result<hyper::header::HeaderValue, hyper::header::InvalidHeaderValue>; // return place in scope 0 at cita-jsonrpc/src/http_header.rs:67:52: 67:91
    let mut _2: std::option::Option<&str>; // in scope 0 at cita-jsonrpc/src/http_header.rs:68:15: 68:48
    let mut _3: std::option::Option<&std::string::String>; // in scope 0 at cita-jsonrpc/src/http_header.rs:68:15: 68:30
    let mut _4: bool;                    // in scope 0 at cita-jsonrpc/src/http_header.rs:69:18: 69:21
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/http_header.rs:70:25: 70:27
    let mut _6: bool;                    // in scope 0 at cita-jsonrpc/src/http_header.rs:70:36: 70:42
    let mut _7: isize;                   // in scope 0 at cita-jsonrpc/src/http_header.rs:69:13: 69:22
    let mut _8: hyper::header::HeaderValue; // in scope 0 at cita-jsonrpc/src/http_header.rs:69:29: 69:40
    let mut _9: hyper::header::HeaderValue; // in scope 0 at cita-jsonrpc/src/http_header.rs:70:50: 70:62
    let _10: &str;                       // in scope 0 at cita-jsonrpc/src/http_header.rs:71:18: 71:24
    scope 1 {
        debug origin => _10;             // in scope 1 at cita-jsonrpc/src/http_header.rs:71:18: 71:24
    }

    bb0: {
        _3 = std::option::Option::<std::string::String>::as_ref(_1) -> bb1; // scope 0 at cita-jsonrpc/src/http_header.rs:68:15: 68:30
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:68:22: 68:28
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::string::String>) -> std::option::Option<&'a std::string::String> {std::option::Option::<std::string::String>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = std::option::Option::<&std::string::String>::map::<&str, [closure@cita-jsonrpc/src/http_header.rs:68:35: 68:38]>(move _3, const ZeroSized: [closure@cita-jsonrpc/src/http_header.rs:68:35: 68:38]) -> bb2; // scope 0 at cita-jsonrpc/src/http_header.rs:68:15: 68:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:68:31: 68:34
                                         // + literal: Const { ty: fn(std::option::Option<&std::string::String>, [closure@cita-jsonrpc/src/http_header.rs:68:35: 68:38]) -> std::option::Option<&str> {std::option::Option::<&std::string::String>::map::<&str, [closure@cita-jsonrpc/src/http_header.rs:68:35: 68:38]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/http_header.rs:68:35: 68:38], val: Value(<ZST>) }
    }

    bb2: {
        _7 = discriminant(_2);           // scope 0 at cita-jsonrpc/src/http_header.rs:68:15: 68:48
        switchInt(move _7) -> [0: bb13, 1: bb3, otherwise: bb10]; // scope 0 at cita-jsonrpc/src/http_header.rs:68:9: 68:48
    }

    bb3: {
        _4 = <str as PartialEq>::eq(((_2 as Some).0: &str), const "*") -> bb4; // scope 0 at cita-jsonrpc/src/http_header.rs:69:18: 69:21
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:69:18: 69:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:69:18: 69:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        switchInt(move _4) -> [0: bb5, otherwise: bb11]; // scope 0 at cita-jsonrpc/src/http_header.rs:69:18: 69:21
    }

    bb5: {
        _5 = <str as PartialEq>::eq(((_2 as Some).0: &str), const "") -> bb6; // scope 0 at cita-jsonrpc/src/http_header.rs:70:25: 70:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:70:25: 70:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:70:25: 70:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        switchInt(move _5) -> [0: bb7, otherwise: bb13]; // scope 0 at cita-jsonrpc/src/http_header.rs:70:25: 70:27
    }

    bb7: {
        _6 = <str as PartialEq>::eq(((_2 as Some).0: &str), const "null") -> bb8; // scope 0 at cita-jsonrpc/src/http_header.rs:70:36: 70:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:70:36: 70:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:70:36: 70:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        switchInt(move _6) -> [0: bb9, otherwise: bb13]; // scope 0 at cita-jsonrpc/src/http_header.rs:70:36: 70:42
    }

    bb9: {
        _10 = ((_2 as Some).0: &str);    // scope 0 at cita-jsonrpc/src/http_header.rs:71:18: 71:24
        _0 = Origin::from_str(_10) -> bb15; // scope 1 at cita-jsonrpc/src/http_header.rs:71:29: 71:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:71:29: 71:43
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<HeaderValue, InvalidHeaderValue> {Origin::from_str}, val: Value(<ZST>) }
    }

    bb10: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/http_header.rs:68:15: 68:48
    }

    bb11: {
        _8 = Origin::any() -> bb12;      // scope 0 at cita-jsonrpc/src/http_header.rs:69:29: 69:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:69:29: 69:38
                                         // + literal: Const { ty: fn() -> HeaderValue {Origin::any}, val: Value(<ZST>) }
    }

    bb12: {
        _0 = Result::<HeaderValue, InvalidHeaderValue>::Ok(move _8); // scope 0 at cita-jsonrpc/src/http_header.rs:69:26: 69:41
        goto -> bb15;                    // scope 0 at cita-jsonrpc/src/http_header.rs:69:40: 69:41
    }

    bb13: {
        _9 = Origin::null() -> bb14;     // scope 0 at cita-jsonrpc/src/http_header.rs:70:50: 70:62
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:70:50: 70:60
                                         // + literal: Const { ty: fn() -> HeaderValue {Origin::null}, val: Value(<ZST>) }
    }

    bb14: {
        _0 = Result::<HeaderValue, InvalidHeaderValue>::Ok(move _9); // scope 0 at cita-jsonrpc/src/http_header.rs:70:47: 70:63
        goto -> bb15;                    // scope 0 at cita-jsonrpc/src/http_header.rs:70:62: 70:63
    }

    bb15: {
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:73:6: 73:6
    }
}

fn http_header::<impl at cita-jsonrpc/src/http_header.rs:66:1: 66:12>::from_config::{closure#0}(_1: [closure@cita-jsonrpc/src/http_header.rs:68:35: 68:38], _2: &std::string::String) -> &str {
    debug s => _2;                       // in scope 0 at cita-jsonrpc/src/http_header.rs:68:36: 68:37
    let mut _0: &str;                    // return place in scope 0 at cita-jsonrpc/src/http_header.rs:68:39: 68:39
    let mut _3: &str;                    // in scope 0 at cita-jsonrpc/src/http_header.rs:68:39: 68:47
    let _4: &str;                        // in scope 0 at cita-jsonrpc/src/http_header.rs:68:39: 68:47

    bb0: {
        _4 = <std::string::String as Deref>::deref(_2) -> bb1; // scope 0 at cita-jsonrpc/src/http_header.rs:68:39: 68:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:68:39: 68:47
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at cita-jsonrpc/src/http_header.rs:68:39: 68:47
        _0 = core::str::<impl str>::trim(move _3) -> bb2; // scope 0 at cita-jsonrpc/src/http_header.rs:68:39: 68:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:68:41: 68:45
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a str {core::str::<impl str>::trim}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:68:47: 68:47
    }
}

fn http_header::<impl at cita-jsonrpc/src/http_header.rs:66:1: 66:12>::from_str(_1: &str) -> Result<HeaderValue, InvalidHeaderValue> {
    debug value => _1;                   // in scope 0 at cita-jsonrpc/src/http_header.rs:75:21: 75:26
    let mut _0: std::result::Result<hyper::header::HeaderValue, hyper::header::InvalidHeaderValue>; // return place in scope 0 at cita-jsonrpc/src/http_header.rs:75:37: 75:76
    let _2: ();                          // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at cita-jsonrpc/src/http_header.rs:76:18: 76:24
    let mut _5: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:137:28: 137:61
    let _6: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:137:28: 137:61
    let _7: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:137:28: 137:61
    let mut _8: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/http_header.rs:76:26: 76:31
    let _9: &&str;                       // in scope 0 at cita-jsonrpc/src/http_header.rs:76:26: 76:31
    let mut _10: &[&str; 2];             // in scope 0 at cita-jsonrpc/src/http_header.rs:76:18: 76:24

    bb0: {
        _10 = const _;                   // scope 0 at cita-jsonrpc/src/http_header.rs:76:18: 76:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:76:18: 76:24
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Origin::from_str, [], Some(promoted[0])) }
        _4 = _10 as &[&str] (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/http_header.rs:76:18: 76:24
        _9 = &_1;                        // scope 0 at cita-jsonrpc/src/http_header.rs:76:26: 76:31
        _8 = core::fmt::ArgumentV1::<'_>::new_debug::<&str>(_9) -> bb1; // scope 0 at cita-jsonrpc/src/http_header.rs:76:26: 76:31
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:76:26: 76:31
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = [move _8];                  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:137:28: 137:61
        _6 = &_7;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:137:28: 137:61
        _5 = _6 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> bb2; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = HeaderValue::from_str(_1) -> bb4; // scope 0 at cita-jsonrpc/src/http_header.rs:77:9: 77:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:77:9: 77:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<HeaderValue, InvalidHeaderValue> {HeaderValue::from_str}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:78:6: 78:6
    }
}

promoted[0] in http_header::<impl at cita-jsonrpc/src/http_header.rs:66:1: 66:12>::from_str: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-jsonrpc/src/http_header.rs:76:18: 76:24
    let mut _1: [&str; 2];               // in scope 0 at cita-jsonrpc/src/http_header.rs:76:18: 76:24

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at cita-jsonrpc/src/http_header.rs:76:18: 76:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:76:18: 76:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:76:18: 76:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_header.rs:76:18: 76:24
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:76:18: 76:24
    }
}

fn http_header::<impl at cita-jsonrpc/src/http_header.rs:66:1: 66:12>::any() -> HeaderValue {
    let mut _0: hyper::header::HeaderValue; // return place in scope 0 at cita-jsonrpc/src/http_header.rs:80:21: 80:32

    bb0: {
        _0 = HeaderValue::from_static(const _) -> bb1; // scope 0 at cita-jsonrpc/src/http_header.rs:81:9: 81:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:81:9: 81:33
                                         // + literal: Const { ty: fn(&'static str) -> HeaderValue {HeaderValue::from_static}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:81:34: 81:48
                                         // + literal: Const { ty: &str, val: Unevaluated(ORIGIN_ANY_STR, [], None) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:82:6: 82:6
    }
}

fn http_header::<impl at cita-jsonrpc/src/http_header.rs:66:1: 66:12>::null() -> HeaderValue {
    let mut _0: hyper::header::HeaderValue; // return place in scope 0 at cita-jsonrpc/src/http_header.rs:84:22: 84:33

    bb0: {
        _0 = HeaderValue::from_static(const _) -> bb1; // scope 0 at cita-jsonrpc/src/http_header.rs:85:9: 85:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:85:9: 85:33
                                         // + literal: Const { ty: fn(&'static str) -> HeaderValue {HeaderValue::from_static}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_header.rs:85:34: 85:49
                                         // + literal: Const { ty: &str, val: Unevaluated(ORIGIN_NULL_STR, [], None) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/http_header.rs:86:6: 86:6
    }
}

const TCP_BACKLOG: i32 = {
    let mut _0: i32;                     // return place in scope 0 at cita-jsonrpc/src/http_server.rs:37:20: 37:23

    bb0: {
        _0 = const 1024_i32;             // scope 0 at cita-jsonrpc/src/http_server.rs:37:26: 37:30
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:37:1: 37:31
    }
}

const CORS_CACHE: u32 = {
    let mut _0: u32;                     // return place in scope 0 at cita-jsonrpc/src/http_server.rs:38:19: 38:22

    bb0: {
        _0 = const 86400_u32;            // scope 0 at cita-jsonrpc/src/http_server.rs:38:25: 38:34
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:38:1: 38:35
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:55:1: 55:50>::make_service(_1: &mut JsonrpcMakeService, _2: Ctx) -> Box<dyn futures::Future<Item = http_server::Jsonrpc, Error = hyper::Error> + std::marker::Send> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:63:21: 63:30
    let mut _0: std::boxed::Box<dyn futures::Future<Item = http_server::Jsonrpc, Error = hyper::Error> + std::marker::Send>; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:64:9: 66:12
    let mut _3: std::boxed::Box<futures::Done<http_server::Jsonrpc, hyper::Error>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:64:9: 66:12
    let mut _4: futures::Done<http_server::Jsonrpc, hyper::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:64:18: 66:11
    let mut _5: http_server::Jsonrpc;    // in scope 0 at cita-jsonrpc/src/http_server.rs:64:29: 66:10
    let mut _6: std::sync::Arc<http_server::Inner>; // in scope 0 at cita-jsonrpc/src/http_server.rs:65:20: 65:43
    let _7: &std::sync::Arc<http_server::Inner>; // in scope 0 at cita-jsonrpc/src/http_server.rs:65:31: 65:42

    bb0: {
        _7 = &((*_1).0: std::sync::Arc<http_server::Inner>); // scope 0 at cita-jsonrpc/src/http_server.rs:65:31: 65:42
        _6 = <Arc<Inner> as Clone>::clone(_7) -> [return: bb1, unwind: bb5]; // scope 0 at cita-jsonrpc/src/http_server.rs:65:20: 65:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:65:20: 65:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Inner>) -> Arc<Inner> {<Arc<Inner> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = http_server::Jsonrpc { inner: move _6 }; // scope 0 at cita-jsonrpc/src/http_server.rs:64:29: 66:10
        _4 = finished::<http_server::Jsonrpc, hyper::Error>(move _5) -> [return: bb2, unwind: bb5]; // scope 0 at cita-jsonrpc/src/http_server.rs:64:18: 66:11
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:64:18: 64:28
                                         // + literal: Const { ty: fn(http_server::Jsonrpc) -> Failed<http_server::Jsonrpc, hyper::Error> {finished::<http_server::Jsonrpc, hyper::Error>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Box::<Failed<http_server::Jsonrpc, hyper::Error>>::new(move _4) -> [return: bb3, unwind: bb5]; // scope 0 at cita-jsonrpc/src/http_server.rs:64:9: 66:12
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:64:9: 64:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Failed<http_server::Jsonrpc, hyper::Error>) -> Box<Failed<http_server::Jsonrpc, hyper::Error>> {Box::<Failed<http_server::Jsonrpc, hyper::Error>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = move _3 as std::boxed::Box<dyn futures::Future<Item = http_server::Jsonrpc, Error = hyper::Error> + std::marker::Send> (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/http_server.rs:64:9: 66:12
        drop(_2) -> bb4;                 // scope 0 at cita-jsonrpc/src/http_server.rs:67:5: 67:6
    }

    bb4: {
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:67:6: 67:6
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at cita-jsonrpc/src/http_server.rs:67:5: 67:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/http_server.rs:63:5: 67:6
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:91:1: 91:40>::from(_1: mq_publisher::AccessLog) -> RpcAccessLog {
    debug mq_log => _1;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:92:13: 92:19
    let mut _0: http_server::RpcAccessLog; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:92:37: 92:41
    let mut _2: isize;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:94:13: 94:47
    let _3: jsonrpc_types::rpc_types::Id; // in scope 0 at cita-jsonrpc/src/http_server.rs:94:35: 94:37
    let _4: std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/http_server.rs:94:39: 94:45
    let mut _5: http_server::SingleRpcAccessLog; // in scope 0 at cita-jsonrpc/src/http_server.rs:95:38: 95:71
    let _6: std::option::Option<usize>;  // in scope 0 at cita-jsonrpc/src/http_server.rs:97:34: 97:39
    let mut _7: http_server::BatchRpcAccessLog; // in scope 0 at cita-jsonrpc/src/http_server.rs:97:65: 97:92
    scope 1 {
        debug id => _3;                  // in scope 1 at cita-jsonrpc/src/http_server.rs:94:35: 94:37
        debug method => _4;              // in scope 1 at cita-jsonrpc/src/http_server.rs:94:39: 94:45
    }
    scope 2 {
        debug count => _6;               // in scope 2 at cita-jsonrpc/src/http_server.rs:97:34: 97:39
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at cita-jsonrpc/src/http_server.rs:93:15: 93:21
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/http_server.rs:93:9: 93:21
    }

    bb1: {
        _6 = ((_1 as Batch).0: std::option::Option<usize>); // scope 0 at cita-jsonrpc/src/http_server.rs:97:34: 97:39
        _7 = BatchRpcAccessLog { count: _6 }; // scope 2 at cita-jsonrpc/src/http_server.rs:97:65: 97:92
        _0 = RpcAccessLog::Batch(move _7); // scope 2 at cita-jsonrpc/src/http_server.rs:97:45: 97:93
        goto -> bb4;                     // scope 0 at cita-jsonrpc/src/http_server.rs:97:92: 97:93
    }

    bb2: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/http_server.rs:93:15: 93:21
    }

    bb3: {
        _3 = move ((_1 as Single).0: jsonrpc_types::rpc_types::Id); // scope 0 at cita-jsonrpc/src/http_server.rs:94:35: 94:37
        _4 = move ((_1 as Single).1: std::option::Option<std::string::String>); // scope 0 at cita-jsonrpc/src/http_server.rs:94:39: 94:45
        _5 = SingleRpcAccessLog { id: move _3, method: move _4 }; // scope 1 at cita-jsonrpc/src/http_server.rs:95:38: 95:71
        _0 = RpcAccessLog::Single(move _5); // scope 1 at cita-jsonrpc/src/http_server.rs:95:17: 95:72
        goto -> bb4;                     // scope 0 at cita-jsonrpc/src/http_server.rs:99:5: 99:6
    }

    bb4: {
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:99:6: 99:6
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:102:1: 102:15>::new(_1: &Method, _2: &str, _3: &HeaderMap) -> http_server::AccessLog {
    debug http_method => _1;             // in scope 0 at cita-jsonrpc/src/http_server.rs:103:16: 103:27
    debug http_path => _2;               // in scope 0 at cita-jsonrpc/src/http_server.rs:103:38: 103:47
    debug http_headers => _3;            // in scope 0 at cita-jsonrpc/src/http_server.rs:103:55: 103:67
    let mut _0: http_server::AccessLog;  // return place in scope 0 at cita-jsonrpc/src/http_server.rs:103:82: 103:86
    let _4: std::string::String;         // in scope 0 at cita-jsonrpc/src/http_server.rs:104:13: 104:23
    let mut _5: &str;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:104:26: 108:24
    let _6: &str;                        // in scope 0 at cita-jsonrpc/src/http_server.rs:104:26: 107:42
    let mut _7: std::option::Option<&str>; // in scope 0 at cita-jsonrpc/src/http_server.rs:104:26: 106:43
    let mut _8: std::option::Option<&hyper::header::HeaderValue>; // in scope 0 at cita-jsonrpc/src/http_server.rs:104:26: 105:29
    let mut _9: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_server.rs:105:18: 105:28
    let mut _10: std::string::String;    // in scope 0 at cita-jsonrpc/src/http_server.rs:111:13: 111:23
    let mut _11: hyper::Method;          // in scope 0 at cita-jsonrpc/src/http_server.rs:112:26: 112:45
    let mut _12: std::string::String;    // in scope 0 at cita-jsonrpc/src/http_server.rs:113:24: 113:44
    let mut _13: std::option::Option<http_server::RpcAccessLog>; // in scope 0 at cita-jsonrpc/src/http_server.rs:114:23: 114:27
    scope 1 {
        debug user_agent => _4;          // in scope 1 at cita-jsonrpc/src/http_server.rs:104:13: 104:23
    }

    bb0: {
        _9 = const _;                    // scope 0 at cita-jsonrpc/src/http_server.rs:105:18: 105:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:105:18: 105:28
                                         // + literal: Const { ty: HeaderName, val: Unevaluated(USER_AGENT, [], None) }
        _8 = HeaderMap::get::<HeaderName>(_3, move _9) -> bb1; // scope 0 at cita-jsonrpc/src/http_server.rs:104:26: 105:29
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:105:14: 105:17
                                         // + literal: Const { ty: for<'a> fn(&'a HeaderMap, HeaderName) -> std::option::Option<&'a HeaderValue> {HeaderMap::get::<HeaderName>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = std::option::Option::<&HeaderValue>::and_then::<&str, [closure@cita-jsonrpc/src/http_server.rs:106:23: 106:26]>(move _8, const ZeroSized: [closure@cita-jsonrpc/src/http_server.rs:106:23: 106:26]) -> bb2; // scope 0 at cita-jsonrpc/src/http_server.rs:104:26: 106:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:106:14: 106:22
                                         // + literal: Const { ty: fn(std::option::Option<&HeaderValue>, [closure@cita-jsonrpc/src/http_server.rs:106:23: 106:26]) -> std::option::Option<&str> {std::option::Option::<&HeaderValue>::and_then::<&str, [closure@cita-jsonrpc/src/http_server.rs:106:23: 106:26]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/http_server.rs:106:23: 106:26], val: Value(<ZST>) }
    }

    bb2: {
        _6 = std::option::Option::<&str>::unwrap_or_else::<[closure@cita-jsonrpc/src/http_server.rs:107:29: 107:31]>(move _7, const ZeroSized: [closure@cita-jsonrpc/src/http_server.rs:107:29: 107:31]) -> bb3; // scope 0 at cita-jsonrpc/src/http_server.rs:104:26: 107:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:107:14: 107:28
                                         // + literal: Const { ty: fn(std::option::Option<&str>, [closure@cita-jsonrpc/src/http_server.rs:107:29: 107:31]) -> &str {std::option::Option::<&str>::unwrap_or_else::<[closure@cita-jsonrpc/src/http_server.rs:107:29: 107:31]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/http_server.rs:107:29: 107:31], val: Value(<ZST>) }
    }

    bb3: {
        _5 = _6;                         // scope 0 at cita-jsonrpc/src/http_server.rs:104:26: 108:24
        _4 = <str as ToOwned>::to_owned(move _5) -> bb4; // scope 0 at cita-jsonrpc/src/http_server.rs:104:26: 108:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:108:14: 108:22
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = move _4;                   // scope 1 at cita-jsonrpc/src/http_server.rs:111:13: 111:23
        _11 = <Method as Clone>::clone(_1) -> [return: bb5, unwind: bb8]; // scope 1 at cita-jsonrpc/src/http_server.rs:112:26: 112:45
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:112:38: 112:43
                                         // + literal: Const { ty: for<'a> fn(&'a Method) -> Method {<Method as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = <str as ToOwned>::to_owned(_2) -> [return: bb6, unwind: bb7]; // scope 1 at cita-jsonrpc/src/http_server.rs:113:24: 113:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:113:34: 113:42
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = std::option::Option::<RpcAccessLog>::None; // scope 1 at cita-jsonrpc/src/http_server.rs:114:23: 114:27
        _0 = http_server::AccessLog { user_agent: move _10, http_method: move _11, http_path: move _12, rpc_info: move _13 }; // scope 1 at cita-jsonrpc/src/http_server.rs:110:9: 115:10
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:116:6: 116:6
    }

    bb7 (cleanup): {
        drop(_11) -> bb8;                // scope 1 at cita-jsonrpc/src/http_server.rs:115:9: 115:10
    }

    bb8 (cleanup): {
        drop(_10) -> bb9;                // scope 1 at cita-jsonrpc/src/http_server.rs:115:9: 115:10
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/http_server.rs:103:5: 116:6
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:102:1: 102:15>::new::{closure#0}(_1: [closure@cita-jsonrpc/src/http_server.rs:106:23: 106:26], _2: &HeaderValue) -> std::option::Option<&str> {
    debug u => _2;                       // in scope 0 at cita-jsonrpc/src/http_server.rs:106:24: 106:25
    let mut _0: std::option::Option<&str>; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:106:27: 106:27
    let mut _3: std::result::Result<&str, hyper::header::ToStrError>; // in scope 0 at cita-jsonrpc/src/http_server.rs:106:27: 106:37

    bb0: {
        _3 = HeaderValue::to_str(_2) -> bb1; // scope 0 at cita-jsonrpc/src/http_server.rs:106:27: 106:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:106:29: 106:35
                                         // + literal: Const { ty: for<'a> fn(&'a HeaderValue) -> Result<&'a str, ToStrError> {HeaderValue::to_str}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Result::<&str, ToStrError>::ok(move _3) -> bb2; // scope 0 at cita-jsonrpc/src/http_server.rs:106:27: 106:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:106:38: 106:40
                                         // + literal: Const { ty: fn(Result<&str, ToStrError>) -> std::option::Option<&str> {Result::<&str, ToStrError>::ok}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:106:42: 106:42
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:102:1: 102:15>::new::{closure#1}(_1: [closure@cita-jsonrpc/src/http_server.rs:107:29: 107:31]) -> &str {
    let mut _0: &str;                    // return place in scope 0 at cita-jsonrpc/src/http_server.rs:107:32: 107:41

    bb0: {
        _0 = const "unknown";            // scope 0 at cita-jsonrpc/src/http_server.rs:107:32: 107:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:107:32: 107:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:107:41: 107:41
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:102:1: 102:15>::set_rpc_info(_1: &mut http_server::AccessLog, _2: RpcAccessLog) -> () {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:118:25: 118:34
    debug rpc_acc_log => _2;             // in scope 0 at cita-jsonrpc/src/http_server.rs:118:36: 118:47
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/http_server.rs:118:63: 118:63
    let mut _3: std::option::Option<http_server::RpcAccessLog>; // in scope 0 at cita-jsonrpc/src/http_server.rs:119:25: 119:42

    bb0: {
        _3 = std::option::Option::<RpcAccessLog>::Some(move _2); // scope 0 at cita-jsonrpc/src/http_server.rs:119:25: 119:42
        drop(((*_1).3: std::option::Option<http_server::RpcAccessLog>)) -> [return: bb1, unwind: bb2]; // scope 0 at cita-jsonrpc/src/http_server.rs:119:9: 119:22
    }

    bb1: {
        ((*_1).3: std::option::Option<http_server::RpcAccessLog>) = move _3; // scope 0 at cita-jsonrpc/src/http_server.rs:119:9: 119:22
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:120:6: 120:6
    }

    bb2 (cleanup): {
        ((*_1).3: std::option::Option<http_server::RpcAccessLog>) = move _3; // scope 0 at cita-jsonrpc/src/http_server.rs:119:9: 119:22
        resume;                          // scope 0 at cita-jsonrpc/src/http_server.rs:118:5: 120:6
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:123:1: 123:39>::fmt(_1: &http_server::AccessLog, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:124:12: 124:17
    debug f => _2;                       // in scope 0 at cita-jsonrpc/src/http_server.rs:124:19: 124:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:124:53: 124:71
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:125:9: 125:53
    let mut _4: std::result::Result<(), std::fmt::Error>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _6: &[&str];                 // in scope 0 at cita-jsonrpc/src/http_server.rs:125:19: 125:34
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/http_server.rs:125:36: 125:51
    let _11: &std::string::String;       // in scope 0 at cita-jsonrpc/src/http_server.rs:125:36: 125:51
    let mut _12: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:125:52: 125:53
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:126:9: 126:57
    let mut _14: std::result::Result<(), std::fmt::Error>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _15: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _16: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:126:19: 126:37
    let mut _17: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _18: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _19: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _20: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/http_server.rs:126:39: 126:55
    let _21: &hyper::Method;             // in scope 0 at cita-jsonrpc/src/http_server.rs:126:39: 126:55
    let mut _22: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:126:56: 126:57
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:127:9: 127:53
    let mut _24: std::result::Result<(), std::fmt::Error>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _25: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _26: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:127:19: 127:35
    let mut _27: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _28: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _29: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _30: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/http_server.rs:127:37: 127:51
    let _31: &std::string::String;       // in scope 0 at cita-jsonrpc/src/http_server.rs:127:37: 127:51
    let mut _32: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:127:52: 127:53
    let mut _33: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:129:18: 129:46
    let mut _34: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:129:13: 129:47
    let _35: &http_server::SingleRpcAccessLog; // in scope 0 at cita-jsonrpc/src/http_server.rs:129:39: 129:45
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:130:17: 130:48
    let mut _37: std::result::Result<(), std::fmt::Error>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _38: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _39: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:130:27: 130:46
    let mut _40: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:130:47: 130:48
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:131:17: 131:51
    let mut _42: std::result::Result<(), std::fmt::Error>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _43: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _44: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:131:27: 131:42
    let mut _45: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _46: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _47: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _48: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/http_server.rs:131:44: 131:49
    let _49: &jsonrpc_types::rpc_types::Id; // in scope 0 at cita-jsonrpc/src/http_server.rs:131:44: 131:49
    let mut _50: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:131:50: 131:51
    let mut _51: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:132:24: 132:35
    let mut _53: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _54: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:133:31: 133:48
    let mut _55: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _56: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _57: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _58: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/http_server.rs:133:50: 133:51
    let _59: &&std::string::String;      // in scope 0 at cita-jsonrpc/src/http_server.rs:133:50: 133:51
    let mut _60: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _61: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:135:31: 135:53
    let _62: &http_server::BatchRpcAccessLog; // in scope 0 at cita-jsonrpc/src/http_server.rs:138:38: 138:44
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:139:17: 139:47
    let mut _64: std::result::Result<(), std::fmt::Error>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _65: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _66: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:139:27: 139:45
    let mut _67: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:139:46: 139:47
    let mut _68: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:140:24: 140:31
    let mut _70: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _71: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:141:31: 141:47
    let mut _72: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _73: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let _74: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _75: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/http_server.rs:141:49: 141:50
    let _76: &usize;                     // in scope 0 at cita-jsonrpc/src/http_server.rs:141:49: 141:50
    let mut _77: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _78: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:143:31: 143:47
    let mut _79: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _80: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:146:31: 146:51
    let mut _81: &[&str; 1];             // in scope 0 at cita-jsonrpc/src/http_server.rs:146:31: 146:51
    let mut _89: &[&str; 1];             // in scope 0 at cita-jsonrpc/src/http_server.rs:127:19: 127:35
    let mut _90: &[&str; 1];             // in scope 0 at cita-jsonrpc/src/http_server.rs:126:19: 126:37
    let mut _91: &[&str; 1];             // in scope 0 at cita-jsonrpc/src/http_server.rs:125:19: 125:34
    scope 1 {
        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error); // in scope 1 at cita-jsonrpc/src/http_server.rs:125:52: 125:53
        scope 2 {
        }
    }
    scope 3 {
        debug val => const ();           // in scope 3 at cita-jsonrpc/src/http_server.rs:125:9: 125:53
        scope 4 {
        }
    }
    scope 5 {
        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error); // in scope 5 at cita-jsonrpc/src/http_server.rs:126:56: 126:57
        scope 6 {
        }
    }
    scope 7 {
        debug val => const ();           // in scope 7 at cita-jsonrpc/src/http_server.rs:126:9: 126:57
        scope 8 {
        }
    }
    scope 9 {
        debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error); // in scope 9 at cita-jsonrpc/src/http_server.rs:127:52: 127:53
        scope 10 {
        }
    }
    scope 11 {
        debug val => const ();           // in scope 11 at cita-jsonrpc/src/http_server.rs:127:9: 127:53
        scope 12 {
        }
    }
    scope 13 {
        debug sl => _35;                 // in scope 13 at cita-jsonrpc/src/http_server.rs:129:39: 129:45
        let mut _83: &[&str; 1];         // in scope 13 at cita-jsonrpc/src/http_server.rs:135:31: 135:53
        let mut _84: &[&str; 1];         // in scope 13 at cita-jsonrpc/src/http_server.rs:131:27: 131:42
        let mut _85: &[&str; 1];         // in scope 13 at cita-jsonrpc/src/http_server.rs:130:27: 130:46
        scope 14 {
            debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error); // in scope 14 at cita-jsonrpc/src/http_server.rs:130:47: 130:48
            scope 15 {
            }
        }
        scope 16 {
            debug val => const ();       // in scope 16 at cita-jsonrpc/src/http_server.rs:130:17: 130:48
            scope 17 {
            }
        }
        scope 18 {
            debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error); // in scope 18 at cita-jsonrpc/src/http_server.rs:131:50: 131:51
            scope 19 {
            }
        }
        scope 20 {
            debug val => const ();       // in scope 20 at cita-jsonrpc/src/http_server.rs:131:17: 131:51
            scope 21 {
            }
        }
        scope 22 {
            debug m => _52;              // in scope 22 at cita-jsonrpc/src/http_server.rs:132:29: 132:34
            let _52: &std::string::String; // in scope 22 at cita-jsonrpc/src/http_server.rs:132:29: 132:34
            let mut _82: &[&str; 1];     // in scope 22 at cita-jsonrpc/src/http_server.rs:133:31: 133:48
        }
    }
    scope 23 {
        debug bl => _62;                 // in scope 23 at cita-jsonrpc/src/http_server.rs:138:38: 138:44
        let mut _87: &[&str; 1];         // in scope 23 at cita-jsonrpc/src/http_server.rs:143:31: 143:47
        let mut _88: &[&str; 1];         // in scope 23 at cita-jsonrpc/src/http_server.rs:139:27: 139:45
        scope 24 {
            debug residual => const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error); // in scope 24 at cita-jsonrpc/src/http_server.rs:139:46: 139:47
            scope 25 {
            }
        }
        scope 26 {
            debug val => const ();       // in scope 26 at cita-jsonrpc/src/http_server.rs:139:17: 139:47
            scope 27 {
            }
        }
        scope 28 {
            debug c => _69;              // in scope 28 at cita-jsonrpc/src/http_server.rs:140:29: 140:30
            let _69: usize;              // in scope 28 at cita-jsonrpc/src/http_server.rs:140:29: 140:30
            let mut _86: &[&str; 1];     // in scope 28 at cita-jsonrpc/src/http_server.rs:141:31: 141:47
        }
    }

    bb0: {
        _91 = const _;                   // scope 0 at cita-jsonrpc/src/http_server.rs:125:19: 125:34
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:125:19: 125:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::AccessLog as std::fmt::Display>::fmt, [], Some(promoted[10])) }
        _6 = _91 as &[&str] (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/http_server.rs:125:19: 125:34
        _11 = &((*_1).0: std::string::String); // scope 0 at cita-jsonrpc/src/http_server.rs:125:36: 125:51
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_11) -> bb1; // scope 0 at cita-jsonrpc/src/http_server.rs:125:36: 125:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:125:36: 125:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = [move _10];                 // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _8 = &_9;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _7 = _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> bb2; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = std::fmt::Formatter::<'_>::write_fmt(_2, move _5) -> bb3; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = <Result<(), std::fmt::Error> as Try>::branch(move _4) -> bb4; // scope 0 at cita-jsonrpc/src/http_server.rs:125:9: 125:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:125:9: 125:53
                                         // + literal: Const { ty: fn(Result<(), std::fmt::Error>) -> ControlFlow<<Result<(), std::fmt::Error> as Try>::Residual, <Result<(), std::fmt::Error> as Try>::Output> {<Result<(), std::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = discriminant(_3);          // scope 0 at cita-jsonrpc/src/http_server.rs:125:9: 125:53
        switchInt(move _12) -> [0: bb5, 1: bb7, otherwise: bb6]; // scope 0 at cita-jsonrpc/src/http_server.rs:125:9: 125:53
    }

    bb5: {
        _90 = const _;                   // scope 0 at cita-jsonrpc/src/http_server.rs:126:19: 126:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:126:19: 126:37
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::AccessLog as std::fmt::Display>::fmt, [], Some(promoted[9])) }
        _16 = _90 as &[&str] (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/http_server.rs:126:19: 126:37
        _21 = &((*_1).1: hyper::Method); // scope 0 at cita-jsonrpc/src/http_server.rs:126:39: 126:55
        _20 = core::fmt::ArgumentV1::<'_>::new_display::<Method>(_21) -> bb8; // scope 0 at cita-jsonrpc/src/http_server.rs:126:39: 126:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:126:39: 126:55
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b Method) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<Method>}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/http_server.rs:125:9: 125:53
    }

    bb7: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> bb57; // scope 2 at cita-jsonrpc/src/http_server.rs:125:9: 125:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:125:52: 125:53
                                         // + literal: Const { ty: fn(Result<Infallible, std::fmt::Error>) -> Result<(), std::fmt::Error> {<Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, std::fmt::Error>, val: Value(<ZST>) }
    }

    bb8: {
        _19 = [move _20];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _18 = &_19;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _17 = _18 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _15 = Arguments::<'_>::new_v1(move _16, move _17) -> bb9; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _14 = std::fmt::Formatter::<'_>::write_fmt(_2, move _15) -> bb10; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb10: {
        _13 = <Result<(), std::fmt::Error> as Try>::branch(move _14) -> bb11; // scope 0 at cita-jsonrpc/src/http_server.rs:126:9: 126:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:126:9: 126:57
                                         // + literal: Const { ty: fn(Result<(), std::fmt::Error>) -> ControlFlow<<Result<(), std::fmt::Error> as Try>::Residual, <Result<(), std::fmt::Error> as Try>::Output> {<Result<(), std::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = discriminant(_13);         // scope 0 at cita-jsonrpc/src/http_server.rs:126:9: 126:57
        switchInt(move _22) -> [0: bb12, 1: bb14, otherwise: bb13]; // scope 0 at cita-jsonrpc/src/http_server.rs:126:9: 126:57
    }

    bb12: {
        _89 = const _;                   // scope 0 at cita-jsonrpc/src/http_server.rs:127:19: 127:35
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:127:19: 127:35
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::AccessLog as std::fmt::Display>::fmt, [], Some(promoted[8])) }
        _26 = _89 as &[&str] (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/http_server.rs:127:19: 127:35
        _31 = &((*_1).2: std::string::String); // scope 0 at cita-jsonrpc/src/http_server.rs:127:37: 127:51
        _30 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_31) -> bb15; // scope 0 at cita-jsonrpc/src/http_server.rs:127:37: 127:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:127:37: 127:51
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb13: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/http_server.rs:126:9: 126:57
    }

    bb14: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> bb57; // scope 6 at cita-jsonrpc/src/http_server.rs:126:9: 126:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:126:56: 126:57
                                         // + literal: Const { ty: fn(Result<Infallible, std::fmt::Error>) -> Result<(), std::fmt::Error> {<Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, std::fmt::Error>, val: Value(<ZST>) }
    }

    bb15: {
        _29 = [move _30];                // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _28 = &_29;                      // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _27 = _28 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _25 = Arguments::<'_>::new_v1(move _26, move _27) -> bb16; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb16: {
        _24 = std::fmt::Formatter::<'_>::write_fmt(_2, move _25) -> bb17; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb17: {
        _23 = <Result<(), std::fmt::Error> as Try>::branch(move _24) -> bb18; // scope 0 at cita-jsonrpc/src/http_server.rs:127:9: 127:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:127:9: 127:53
                                         // + literal: Const { ty: fn(Result<(), std::fmt::Error>) -> ControlFlow<<Result<(), std::fmt::Error> as Try>::Residual, <Result<(), std::fmt::Error> as Try>::Output> {<Result<(), std::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb18: {
        _32 = discriminant(_23);         // scope 0 at cita-jsonrpc/src/http_server.rs:127:9: 127:53
        switchInt(move _32) -> [0: bb19, 1: bb21, otherwise: bb20]; // scope 0 at cita-jsonrpc/src/http_server.rs:127:9: 127:53
    }

    bb19: {
        _34 = discriminant(((*_1).3: std::option::Option<http_server::RpcAccessLog>)); // scope 0 at cita-jsonrpc/src/http_server.rs:128:15: 128:28
        switchInt(move _34) -> [0: bb22, 1: bb23, otherwise: bb24]; // scope 0 at cita-jsonrpc/src/http_server.rs:128:9: 128:28
    }

    bb20: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/http_server.rs:127:9: 127:53
    }

    bb21: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> bb57; // scope 10 at cita-jsonrpc/src/http_server.rs:127:9: 127:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:127:52: 127:53
                                         // + literal: Const { ty: fn(Result<Infallible, std::fmt::Error>) -> Result<(), std::fmt::Error> {<Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, std::fmt::Error>, val: Value(<ZST>) }
    }

    bb22: {
        _81 = const _;                   // scope 0 at cita-jsonrpc/src/http_server.rs:146:31: 146:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:146:31: 146:51
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::AccessLog as std::fmt::Display>::fmt, [], Some(promoted[0])) }
        _80 = _81 as &[&str] (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/http_server.rs:146:31: 146:51
        _79 = Arguments::<'_>::new_const(move _80) -> bb56; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb23: {
        _33 = discriminant(((((*_1).3: std::option::Option<http_server::RpcAccessLog>) as Some).0: http_server::RpcAccessLog)); // scope 0 at cita-jsonrpc/src/http_server.rs:128:15: 128:28
        switchInt(move _33) -> [0: bb25, 1: bb44, otherwise: bb24]; // scope 0 at cita-jsonrpc/src/http_server.rs:128:9: 128:28
    }

    bb24: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/http_server.rs:128:15: 128:28
    }

    bb25: {
        _35 = &((((((*_1).3: std::option::Option<http_server::RpcAccessLog>) as Some).0: http_server::RpcAccessLog) as Single).0: http_server::SingleRpcAccessLog); // scope 0 at cita-jsonrpc/src/http_server.rs:129:39: 129:45
        _85 = const _;                   // scope 13 at cita-jsonrpc/src/http_server.rs:130:27: 130:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:130:27: 130:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::AccessLog as std::fmt::Display>::fmt, [], Some(promoted[4])) }
        _39 = _85 as &[&str] (Pointer(Unsize)); // scope 13 at cita-jsonrpc/src/http_server.rs:130:27: 130:46
        _38 = Arguments::<'_>::new_const(move _39) -> bb26; // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb26: {
        _37 = std::fmt::Formatter::<'_>::write_fmt(_2, move _38) -> bb27; // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb27: {
        _36 = <Result<(), std::fmt::Error> as Try>::branch(move _37) -> bb28; // scope 13 at cita-jsonrpc/src/http_server.rs:130:17: 130:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:130:17: 130:48
                                         // + literal: Const { ty: fn(Result<(), std::fmt::Error>) -> ControlFlow<<Result<(), std::fmt::Error> as Try>::Residual, <Result<(), std::fmt::Error> as Try>::Output> {<Result<(), std::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb28: {
        _40 = discriminant(_36);         // scope 13 at cita-jsonrpc/src/http_server.rs:130:17: 130:48
        switchInt(move _40) -> [0: bb29, 1: bb31, otherwise: bb30]; // scope 13 at cita-jsonrpc/src/http_server.rs:130:17: 130:48
    }

    bb29: {
        _84 = const _;                   // scope 13 at cita-jsonrpc/src/http_server.rs:131:27: 131:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:131:27: 131:42
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::AccessLog as std::fmt::Display>::fmt, [], Some(promoted[3])) }
        _44 = _84 as &[&str] (Pointer(Unsize)); // scope 13 at cita-jsonrpc/src/http_server.rs:131:27: 131:42
        _49 = &((*_35).0: jsonrpc_types::rpc_types::Id); // scope 13 at cita-jsonrpc/src/http_server.rs:131:44: 131:49
        _48 = core::fmt::ArgumentV1::<'_>::new_debug::<Id>(_49) -> bb32; // scope 13 at cita-jsonrpc/src/http_server.rs:131:44: 131:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:131:44: 131:49
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'b> fn(&'b Id) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Id>}, val: Value(<ZST>) }
    }

    bb30: {
        unreachable;                     // scope 13 at cita-jsonrpc/src/http_server.rs:130:17: 130:48
    }

    bb31: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> bb57; // scope 15 at cita-jsonrpc/src/http_server.rs:130:17: 130:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:130:47: 130:48
                                         // + literal: Const { ty: fn(Result<Infallible, std::fmt::Error>) -> Result<(), std::fmt::Error> {<Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, std::fmt::Error>, val: Value(<ZST>) }
    }

    bb32: {
        _47 = [move _48];                // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _46 = &_47;                      // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _45 = _46 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _43 = Arguments::<'_>::new_v1(move _44, move _45) -> bb33; // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb33: {
        _42 = std::fmt::Formatter::<'_>::write_fmt(_2, move _43) -> bb34; // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb34: {
        _41 = <Result<(), std::fmt::Error> as Try>::branch(move _42) -> bb35; // scope 13 at cita-jsonrpc/src/http_server.rs:131:17: 131:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:131:17: 131:51
                                         // + literal: Const { ty: fn(Result<(), std::fmt::Error>) -> ControlFlow<<Result<(), std::fmt::Error> as Try>::Residual, <Result<(), std::fmt::Error> as Try>::Output> {<Result<(), std::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb35: {
        _50 = discriminant(_41);         // scope 13 at cita-jsonrpc/src/http_server.rs:131:17: 131:51
        switchInt(move _50) -> [0: bb36, 1: bb38, otherwise: bb37]; // scope 13 at cita-jsonrpc/src/http_server.rs:131:17: 131:51
    }

    bb36: {
        _51 = discriminant(((*_35).1: std::option::Option<std::string::String>)); // scope 22 at cita-jsonrpc/src/http_server.rs:132:24: 132:35
        switchInt(move _51) -> [1: bb40, otherwise: bb39]; // scope 22 at cita-jsonrpc/src/http_server.rs:132:24: 132:35
    }

    bb37: {
        unreachable;                     // scope 13 at cita-jsonrpc/src/http_server.rs:131:17: 131:51
    }

    bb38: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> bb57; // scope 19 at cita-jsonrpc/src/http_server.rs:131:17: 131:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:131:50: 131:51
                                         // + literal: Const { ty: fn(Result<Infallible, std::fmt::Error>) -> Result<(), std::fmt::Error> {<Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, std::fmt::Error>, val: Value(<ZST>) }
    }

    bb39: {
        _83 = const _;                   // scope 13 at cita-jsonrpc/src/http_server.rs:135:31: 135:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:135:31: 135:53
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::AccessLog as std::fmt::Display>::fmt, [], Some(promoted[2])) }
        _61 = _83 as &[&str] (Pointer(Unsize)); // scope 13 at cita-jsonrpc/src/http_server.rs:135:31: 135:53
        _60 = Arguments::<'_>::new_const(move _61) -> bb43; // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb40: {
        _52 = &((((*_35).1: std::option::Option<std::string::String>) as Some).0: std::string::String); // scope 22 at cita-jsonrpc/src/http_server.rs:132:29: 132:34
        _82 = const _;                   // scope 22 at cita-jsonrpc/src/http_server.rs:133:31: 133:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:133:31: 133:48
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::AccessLog as std::fmt::Display>::fmt, [], Some(promoted[1])) }
        _54 = _82 as &[&str] (Pointer(Unsize)); // scope 22 at cita-jsonrpc/src/http_server.rs:133:31: 133:48
        _59 = &_52;                      // scope 22 at cita-jsonrpc/src/http_server.rs:133:50: 133:51
        _58 = core::fmt::ArgumentV1::<'_>::new_display::<&std::string::String>(_59) -> bb41; // scope 22 at cita-jsonrpc/src/http_server.rs:133:50: 133:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:133:50: 133:51
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: for<'b> fn(&'b &std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&std::string::String>}, val: Value(<ZST>) }
    }

    bb41: {
        _57 = [move _58];                // scope 22 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _56 = &_57;                      // scope 22 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _55 = _56 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 22 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _53 = Arguments::<'_>::new_v1(move _54, move _55) -> bb42; // scope 22 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb42: {
        _0 = std::fmt::Formatter::<'_>::write_fmt(_2, move _53) -> bb57; // scope 22 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb43: {
        _0 = std::fmt::Formatter::<'_>::write_fmt(_2, move _60) -> bb57; // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb44: {
        _62 = &((((((*_1).3: std::option::Option<http_server::RpcAccessLog>) as Some).0: http_server::RpcAccessLog) as Batch).0: http_server::BatchRpcAccessLog); // scope 0 at cita-jsonrpc/src/http_server.rs:138:38: 138:44
        _88 = const _;                   // scope 23 at cita-jsonrpc/src/http_server.rs:139:27: 139:45
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:139:27: 139:45
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::AccessLog as std::fmt::Display>::fmt, [], Some(promoted[7])) }
        _66 = _88 as &[&str] (Pointer(Unsize)); // scope 23 at cita-jsonrpc/src/http_server.rs:139:27: 139:45
        _65 = Arguments::<'_>::new_const(move _66) -> bb45; // scope 23 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb45: {
        _64 = std::fmt::Formatter::<'_>::write_fmt(_2, move _65) -> bb46; // scope 23 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb46: {
        _63 = <Result<(), std::fmt::Error> as Try>::branch(move _64) -> bb47; // scope 23 at cita-jsonrpc/src/http_server.rs:139:17: 139:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:139:17: 139:47
                                         // + literal: Const { ty: fn(Result<(), std::fmt::Error>) -> ControlFlow<<Result<(), std::fmt::Error> as Try>::Residual, <Result<(), std::fmt::Error> as Try>::Output> {<Result<(), std::fmt::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb47: {
        _67 = discriminant(_63);         // scope 23 at cita-jsonrpc/src/http_server.rs:139:17: 139:47
        switchInt(move _67) -> [0: bb48, 1: bb50, otherwise: bb49]; // scope 23 at cita-jsonrpc/src/http_server.rs:139:17: 139:47
    }

    bb48: {
        _68 = discriminant(((*_62).0: std::option::Option<usize>)); // scope 28 at cita-jsonrpc/src/http_server.rs:140:24: 140:31
        switchInt(move _68) -> [1: bb52, otherwise: bb51]; // scope 28 at cita-jsonrpc/src/http_server.rs:140:24: 140:31
    }

    bb49: {
        unreachable;                     // scope 23 at cita-jsonrpc/src/http_server.rs:139:17: 139:47
    }

    bb50: {
        _0 = <Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual(const Result::<Infallible, std::fmt::Error>::Err(std::fmt::Error)) -> bb57; // scope 25 at cita-jsonrpc/src/http_server.rs:139:17: 139:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:139:46: 139:47
                                         // + literal: Const { ty: fn(Result<Infallible, std::fmt::Error>) -> Result<(), std::fmt::Error> {<Result<(), std::fmt::Error> as FromResidual<Result<Infallible, std::fmt::Error>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, std::fmt::Error>, val: Value(<ZST>) }
    }

    bb51: {
        _87 = const _;                   // scope 23 at cita-jsonrpc/src/http_server.rs:143:31: 143:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:143:31: 143:47
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::AccessLog as std::fmt::Display>::fmt, [], Some(promoted[6])) }
        _78 = _87 as &[&str] (Pointer(Unsize)); // scope 23 at cita-jsonrpc/src/http_server.rs:143:31: 143:47
        _77 = Arguments::<'_>::new_const(move _78) -> bb55; // scope 23 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb52: {
        _69 = ((((*_62).0: std::option::Option<usize>) as Some).0: usize); // scope 28 at cita-jsonrpc/src/http_server.rs:140:29: 140:30
        _86 = const _;                   // scope 28 at cita-jsonrpc/src/http_server.rs:141:31: 141:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:141:31: 141:47
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::AccessLog as std::fmt::Display>::fmt, [], Some(promoted[5])) }
        _71 = _86 as &[&str] (Pointer(Unsize)); // scope 28 at cita-jsonrpc/src/http_server.rs:141:31: 141:47
        _76 = &_69;                      // scope 28 at cita-jsonrpc/src/http_server.rs:141:49: 141:50
        _75 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(_76) -> bb53; // scope 28 at cita-jsonrpc/src/http_server.rs:141:49: 141:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:141:49: 141:50
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb53: {
        _74 = [move _75];                // scope 28 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _73 = &_74;                      // scope 28 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _72 = _73 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 28 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
        _70 = Arguments::<'_>::new_v1(move _71, move _72) -> bb54; // scope 28 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb54: {
        _0 = std::fmt::Formatter::<'_>::write_fmt(_2, move _70) -> bb57; // scope 28 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb55: {
        _0 = std::fmt::Formatter::<'_>::write_fmt(_2, move _77) -> bb57; // scope 23 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb56: {
        _0 = std::fmt::Formatter::<'_>::write_fmt(_2, move _79) -> bb57; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb57: {
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:148:6: 148:6
    }
}

promoted[0] in http_server::<impl at cita-jsonrpc/src/http_server.rs:123:1: 123:39>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:146:31: 146:51
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:146:31: 146:51

    bb0: {
        _1 = [const ", rpc-type=unknown"]; // scope 0 at cita-jsonrpc/src/http_server.rs:146:31: 146:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:146:31: 146:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:146:31: 146:51
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:146:31: 146:51
    }
}

promoted[1] in http_server::<impl at cita-jsonrpc/src/http_server.rs:123:1: 123:39>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:133:31: 133:48
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:133:31: 133:48

    bb0: {
        _1 = [const ", rpc-method="];    // scope 0 at cita-jsonrpc/src/http_server.rs:133:31: 133:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:133:31: 133:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:133:31: 133:48
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:133:31: 133:48
    }
}

promoted[2] in http_server::<impl at cita-jsonrpc/src/http_server.rs:123:1: 123:39>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:135:31: 135:53
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:135:31: 135:53

    bb0: {
        _1 = [const ", rpc-method=unknown"]; // scope 0 at cita-jsonrpc/src/http_server.rs:135:31: 135:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:135:31: 135:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:135:31: 135:53
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:135:31: 135:53
    }
}

promoted[3] in http_server::<impl at cita-jsonrpc/src/http_server.rs:123:1: 123:39>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:131:27: 131:42
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:131:27: 131:42

    bb0: {
        _1 = [const ", rpc-id="];        // scope 0 at cita-jsonrpc/src/http_server.rs:131:27: 131:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:131:27: 131:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:131:27: 131:42
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:131:27: 131:42
    }
}

promoted[4] in http_server::<impl at cita-jsonrpc/src/http_server.rs:123:1: 123:39>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:130:27: 130:46
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:130:27: 130:46

    bb0: {
        _1 = [const ", rpc-type=single"]; // scope 0 at cita-jsonrpc/src/http_server.rs:130:27: 130:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:130:27: 130:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:130:27: 130:46
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:130:27: 130:46
    }
}

promoted[5] in http_server::<impl at cita-jsonrpc/src/http_server.rs:123:1: 123:39>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:141:31: 141:47
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:141:31: 141:47

    bb0: {
        _1 = [const ", rpc-count="];     // scope 0 at cita-jsonrpc/src/http_server.rs:141:31: 141:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:141:31: 141:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:141:31: 141:47
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:141:31: 141:47
    }
}

promoted[6] in http_server::<impl at cita-jsonrpc/src/http_server.rs:123:1: 123:39>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:143:31: 143:47
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:143:31: 143:47

    bb0: {
        _1 = [const ", rpc-count=-1"];   // scope 0 at cita-jsonrpc/src/http_server.rs:143:31: 143:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:143:31: 143:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:143:31: 143:47
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:143:31: 143:47
    }
}

promoted[7] in http_server::<impl at cita-jsonrpc/src/http_server.rs:123:1: 123:39>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:139:27: 139:45
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:139:27: 139:45

    bb0: {
        _1 = [const ", rpc-type=batch"]; // scope 0 at cita-jsonrpc/src/http_server.rs:139:27: 139:45
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:139:27: 139:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:139:27: 139:45
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:139:27: 139:45
    }
}

promoted[8] in http_server::<impl at cita-jsonrpc/src/http_server.rs:123:1: 123:39>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:127:19: 127:35
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:127:19: 127:35

    bb0: {
        _1 = [const ", http-path="];     // scope 0 at cita-jsonrpc/src/http_server.rs:127:19: 127:35
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:127:19: 127:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:127:19: 127:35
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:127:19: 127:35
    }
}

promoted[9] in http_server::<impl at cita-jsonrpc/src/http_server.rs:123:1: 123:39>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:126:19: 126:37
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:126:19: 126:37

    bb0: {
        _1 = [const ", http-method="];   // scope 0 at cita-jsonrpc/src/http_server.rs:126:19: 126:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:126:19: 126:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:126:19: 126:37
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:126:19: 126:37
    }
}

promoted[10] in http_server::<impl at cita-jsonrpc/src/http_server.rs:123:1: 123:39>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:125:19: 125:34
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:125:19: 125:34

    bb0: {
        _1 = [const "user-agent="];      // scope 0 at cita-jsonrpc/src/http_server.rs:125:19: 125:34
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:125:19: 125:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:125:19: 125:34
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:125:19: 125:34
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:151:1: 151:25>::call(_1: &mut http_server::Jsonrpc, _2: hyper::Request<Body>) -> Box<dyn futures::Future<Item = hyper::Response<Body>, Error = hyper::Error> + std::marker::Send> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:157:13: 157:22
    debug http_req => _2;                // in scope 0 at cita-jsonrpc/src/http_server.rs:157:24: 157:32
    let mut _0: std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = hyper::Error> + std::marker::Send>; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:157:61: 157:73
    let mut _3: std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = hyper::Error> + std::marker::Send>; // in scope 0 at cita-jsonrpc/src/http_server.rs:166:9: 207:10
    let _4: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/http_server.rs:158:13: 158:19
    let mut _5: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:52
    let _6: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:52
    let mut _7: &lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:52
    let _8: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:44
    let mut _9: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:44
    let _10: &http_server::Inner;        // in scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:37
    let mut _11: &std::sync::Arc<http_server::Inner>; // in scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:34
    let _13: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:159:36: 159:57
    let _14: &http_server::Inner;        // in scope 0 at cita-jsonrpc/src/http_server.rs:159:37: 159:57
    let mut _15: &std::sync::Arc<http_server::Inner>; // in scope 0 at cita-jsonrpc/src/http_server.rs:159:37: 159:47
    let mut _17: &http_server::Inner;    // in scope 0 at cita-jsonrpc/src/http_server.rs:160:23: 160:41
    let mut _18: &std::sync::Arc<http_server::Inner>; // in scope 0 at cita-jsonrpc/src/http_server.rs:160:23: 160:33
    let mut _20: &hyper::HeaderMap;      // in scope 0 at cita-jsonrpc/src/http_server.rs:161:28: 161:59
    let _21: &http_server::Inner;        // in scope 0 at cita-jsonrpc/src/http_server.rs:161:28: 161:51
    let mut _22: &std::sync::Arc<http_server::Inner>; // in scope 0 at cita-jsonrpc/src/http_server.rs:161:28: 161:38
    let mut _24: &str;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:163:25: 163:57
    let _25: &str;                       // in scope 0 at cita-jsonrpc/src/http_server.rs:163:25: 163:46
    let mut _26: &hyper::Uri;            // in scope 0 at cita-jsonrpc/src/http_server.rs:163:25: 163:46
    let _27: &hyper::Uri;                // in scope 0 at cita-jsonrpc/src/http_server.rs:163:25: 163:39
    let mut _28: &hyper::Request<hyper::Body>; // in scope 0 at cita-jsonrpc/src/http_server.rs:163:25: 163:39
    let mut _30: &hyper::Method;         // in scope 0 at cita-jsonrpc/src/http_server.rs:164:45: 164:62
    let _31: &hyper::Method;             // in scope 0 at cita-jsonrpc/src/http_server.rs:164:45: 164:62
    let mut _32: &hyper::Request<hyper::Body>; // in scope 0 at cita-jsonrpc/src/http_server.rs:164:45: 164:62
    let mut _33: &str;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:164:64: 164:74
    let _34: &str;                       // in scope 0 at cita-jsonrpc/src/http_server.rs:164:64: 164:74
    let _35: &std::string::String;       // in scope 0 at cita-jsonrpc/src/http_server.rs:164:64: 164:74
    let _36: &hyper::HeaderMap;          // in scope 0 at cita-jsonrpc/src/http_server.rs:164:76: 164:89
    let mut _37: std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = hyper::Error> + std::marker::Send>; // in scope 0 at cita-jsonrpc/src/http_server.rs:166:9: 207:10
    let mut _38: (&hyper::Method, &str); // in scope 0 at cita-jsonrpc/src/http_server.rs:166:15: 166:54
    let mut _39: &hyper::Method;         // in scope 0 at cita-jsonrpc/src/http_server.rs:166:16: 166:33
    let mut _40: &hyper::Request<hyper::Body>; // in scope 0 at cita-jsonrpc/src/http_server.rs:166:16: 166:33
    let mut _41: &str;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:166:35: 166:53
    let mut _42: &std::string::String;   // in scope 0 at cita-jsonrpc/src/http_server.rs:166:35: 166:53
    let mut _43: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:193:32: 193:35
    let mut _44: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:167:29: 167:32
    let mut _45: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:167:15: 167:27
    let mut _46: std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = hyper::Error> + std::marker::Send>; // in scope 0 at cita-jsonrpc/src/http_server.rs:191:17: 191:35
    let mut _48: futures::AndThen<futures::AndThen<std::boxed::Box<dyn futures::Future<Item = jsonrpc_types::rpc_request::RpcRequest, Error = service_error::ServiceError> + std::marker::Send>, std::boxed::Box<dyn futures::Future<Item = mq_publisher::MQRequest, Error = service_error::ServiceError> + std::marker::Send>, fn(jsonrpc_types::rpc_request::RpcRequest) -> <jsonrpc_types::rpc_request::RpcRequest as extractor::FutExtractor<mq_publisher::MQRequest>>::Fut {<jsonrpc_types::rpc_request::RpcRequest as extractor::FutExtractor<mq_publisher::MQRequest>>::extract_from}>, std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = service_error::ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]>; // in scope 0 at cita-jsonrpc/src/http_server.rs:168:32: 185:23
    let mut _49: futures::AndThen<std::boxed::Box<dyn futures::Future<Item = jsonrpc_types::rpc_request::RpcRequest, Error = service_error::ServiceError> + std::marker::Send>, std::boxed::Box<dyn futures::Future<Item = mq_publisher::MQRequest, Error = service_error::ServiceError> + std::marker::Send>, fn(jsonrpc_types::rpc_request::RpcRequest) -> <jsonrpc_types::rpc_request::RpcRequest as extractor::FutExtractor<mq_publisher::MQRequest>>::Fut {<jsonrpc_types::rpc_request::RpcRequest as extractor::FutExtractor<mq_publisher::MQRequest>>::extract_from}>; // in scope 0 at cita-jsonrpc/src/http_server.rs:168:32: 169:71
    let mut _50: std::boxed::Box<dyn futures::Future<Item = jsonrpc_types::rpc_request::RpcRequest, Error = service_error::ServiceError> + std::marker::Send>; // in scope 0 at cita-jsonrpc/src/http_server.rs:168:32: 168:86
    let mut _51: hyper::Request<hyper::Body>; // in scope 0 at cita-jsonrpc/src/http_server.rs:168:77: 168:85
    let mut _52: [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]; // in scope 0 at cita-jsonrpc/src/http_server.rs:170:31: 185:22
    let mut _54: &hyper::HeaderMap;      // in scope 0 at cita-jsonrpc/src/http_server.rs:171:39: 171:59
    let mut _55: [closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38]; // in scope 0 at cita-jsonrpc/src/http_server.rs:186:27: 189:22
    let mut _56: std::boxed::Box<futures::Then<futures::AndThen<futures::AndThen<std::boxed::Box<dyn futures::Future<Item = jsonrpc_types::rpc_request::RpcRequest, Error = service_error::ServiceError> + std::marker::Send>, std::boxed::Box<dyn futures::Future<Item = mq_publisher::MQRequest, Error = service_error::ServiceError> + std::marker::Send>, fn(jsonrpc_types::rpc_request::RpcRequest) -> <jsonrpc_types::rpc_request::RpcRequest as extractor::FutExtractor<mq_publisher::MQRequest>>::Fut {<jsonrpc_types::rpc_request::RpcRequest as extractor::FutExtractor<mq_publisher::MQRequest>>::extract_from}>, std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = service_error::ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]>, std::result::Result<hyper::Response<hyper::Body>, hyper::Error>, [closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38]>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:191:17: 191:35
    let mut _57: futures::Then<futures::AndThen<futures::AndThen<std::boxed::Box<dyn futures::Future<Item = jsonrpc_types::rpc_request::RpcRequest, Error = service_error::ServiceError> + std::marker::Send>, std::boxed::Box<dyn futures::Future<Item = mq_publisher::MQRequest, Error = service_error::ServiceError> + std::marker::Send>, fn(jsonrpc_types::rpc_request::RpcRequest) -> <jsonrpc_types::rpc_request::RpcRequest as extractor::FutExtractor<mq_publisher::MQRequest>>::Fut {<jsonrpc_types::rpc_request::RpcRequest as extractor::FutExtractor<mq_publisher::MQRequest>>::extract_from}>, std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = service_error::ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]>, std::result::Result<hyper::Response<hyper::Body>, hyper::Error>, [closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38]>; // in scope 0 at cita-jsonrpc/src/http_server.rs:191:26: 191:34
    let mut _59: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _60: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _61: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _62: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _63: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _64: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _65: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _66: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _67: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _68: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:194:23: 194:27
    let mut _69: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _70: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _71: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _72: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/http_server.rs:194:29: 194:39
    let _73: &http_server::AccessLog;    // in scope 0 at cita-jsonrpc/src/http_server.rs:194:29: 194:39
    let mut _75: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/http_server.rs:195:28: 195:47
    let mut _76: hyper::HeaderMap;       // in scope 0 at cita-jsonrpc/src/http_server.rs:195:61: 195:93
    let mut _77: hyper::HeaderMap;       // in scope 0 at cita-jsonrpc/src/http_server.rs:195:80: 195:92
    let mut _78: std::boxed::Box<futures::Done<hyper::Response<hyper::Body>, hyper::Error>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:197:17: 197:43
    let mut _79: futures::Done<hyper::Response<hyper::Body>, hyper::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:197:26: 197:42
    let mut _80: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/http_server.rs:197:37: 197:41
    let mut _82: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _83: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _84: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _85: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _86: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _87: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _88: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _89: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _90: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _91: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:200:23: 200:27
    let mut _92: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _93: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _94: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _95: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/http_server.rs:200:29: 200:39
    let _96: &http_server::AccessLog;    // in scope 0 at cita-jsonrpc/src/http_server.rs:200:29: 200:39
    let mut _98: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/http_server.rs:201:28: 202:48
    let mut _99: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/http_server.rs:201:28: 201:47
    let mut _100: hyper::HeaderMap;      // in scope 0 at cita-jsonrpc/src/http_server.rs:202:35: 202:47
    let mut _101: std::boxed::Box<futures::Done<hyper::Response<hyper::Body>, hyper::Error>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:205:17: 205:43
    let mut _102: futures::Done<hyper::Response<hyper::Body>, hyper::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:205:26: 205:42
    let mut _103: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/http_server.rs:205:37: 205:41
    let mut _110: &hyper::Method;        // in scope 0 at cita-jsonrpc/src/http_server.rs:166:15: 166:54
    let mut _111: bool;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    let mut _112: bool;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    let mut _113: bool;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    let mut _114: bool;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    let mut _115: bool;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:195:93: 195:94
    let mut _116: bool;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:185:22: 185:23
    let mut _117: bool;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    scope 1 {
        debug sender => _4;              // in scope 1 at cita-jsonrpc/src/http_server.rs:158:13: 158:19
        let _12: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 1 at cita-jsonrpc/src/http_server.rs:159:13: 159:22
        scope 2 {
            debug responses => _12;      // in scope 2 at cita-jsonrpc/src/http_server.rs:159:13: 159:22
            let _16: std::time::Duration; // in scope 2 at cita-jsonrpc/src/http_server.rs:160:13: 160:20
            scope 3 {
                debug timeout => _16;    // in scope 3 at cita-jsonrpc/src/http_server.rs:160:13: 160:20
                let _19: hyper::HeaderMap; // in scope 3 at cita-jsonrpc/src/http_server.rs:161:13: 161:25
                scope 4 {
                    debug http_headers => _19; // in scope 4 at cita-jsonrpc/src/http_server.rs:161:13: 161:25
                    let _23: std::string::String; // in scope 4 at cita-jsonrpc/src/http_server.rs:163:13: 163:22
                    scope 5 {
                        debug http_path => _23; // in scope 5 at cita-jsonrpc/src/http_server.rs:163:13: 163:22
                        let mut _29: http_server::AccessLog; // in scope 5 at cita-jsonrpc/src/http_server.rs:164:13: 164:27
                        scope 6 {
                            debug access_log => _29; // in scope 6 at cita-jsonrpc/src/http_server.rs:164:13: 164:27
                            let _47: futures::Then<futures::AndThen<futures::AndThen<std::boxed::Box<dyn futures::Future<Item = jsonrpc_types::rpc_request::RpcRequest, Error = service_error::ServiceError> + std::marker::Send>, std::boxed::Box<dyn futures::Future<Item = mq_publisher::MQRequest, Error = service_error::ServiceError> + std::marker::Send>, fn(jsonrpc_types::rpc_request::RpcRequest) -> <jsonrpc_types::rpc_request::RpcRequest as extractor::FutExtractor<mq_publisher::MQRequest>>::Fut {<jsonrpc_types::rpc_request::RpcRequest as extractor::FutExtractor<mq_publisher::MQRequest>>::extract_from}>, std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = service_error::ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]>, std::result::Result<hyper::Response<hyper::Body>, hyper::Error>, [closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38]>; // in scope 6 at cita-jsonrpc/src/http_server.rs:168:21: 168:29
                            let _53: hyper::HeaderMap; // in scope 6 at cita-jsonrpc/src/http_server.rs:171:29: 171:36
                            let _58: log::Level; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                            let _74: hyper::Response<hyper::Body>; // in scope 6 at cita-jsonrpc/src/http_server.rs:195:21: 195:25
                            let _81: log::Level; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                            let _97: hyper::Response<hyper::Body>; // in scope 6 at cita-jsonrpc/src/http_server.rs:201:21: 201:25
                            scope 7 {
                                debug fut_resp => _47; // in scope 7 at cita-jsonrpc/src/http_server.rs:168:21: 168:29
                            }
                            scope 8 {
                                debug headers => _53; // in scope 8 at cita-jsonrpc/src/http_server.rs:171:29: 171:36
                            }
                            scope 9 {
                                debug lvl => _58; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                let mut _107: &(&str, &str, &str, u32); // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                let mut _108: &[&str; 1]; // in scope 9 at cita-jsonrpc/src/http_server.rs:194:23: 194:27
                                let mut _109: &log::LevelFilter; // in scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                            }
                            scope 10 {
                                debug resp => _74; // in scope 10 at cita-jsonrpc/src/http_server.rs:195:21: 195:25
                            }
                            scope 11 {
                                debug lvl => _81; // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                let mut _104: &(&str, &str, &str, u32); // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                let mut _105: &[&str; 1]; // in scope 11 at cita-jsonrpc/src/http_server.rs:200:23: 200:27
                                let mut _106: &log::LevelFilter; // in scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                            }
                            scope 12 {
                                debug resp => _97; // in scope 12 at cita-jsonrpc/src/http_server.rs:201:21: 201:25
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _115 = const false;              // scope 0 at cita-jsonrpc/src/http_server.rs:166:9: 207:10
        _117 = const false;              // scope 0 at cita-jsonrpc/src/http_server.rs:166:9: 207:10
        _114 = const false;              // scope 0 at cita-jsonrpc/src/http_server.rs:166:9: 207:10
        _112 = const false;              // scope 0 at cita-jsonrpc/src/http_server.rs:166:9: 207:10
        _113 = const false;              // scope 0 at cita-jsonrpc/src/http_server.rs:166:9: 207:10
        _111 = const false;              // scope 0 at cita-jsonrpc/src/http_server.rs:166:9: 207:10
        _116 = const false;              // scope 0 at cita-jsonrpc/src/http_server.rs:166:9: 207:10
        _114 = const true;               // scope 0 at cita-jsonrpc/src/http_server.rs:166:9: 207:10
        _11 = &((*_1).0: std::sync::Arc<http_server::Inner>); // scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:34
        _10 = <Arc<Inner> as Deref>::deref(move _11) -> [return: bb1, unwind: bb88]; // scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:158:24: 158:37
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Inner>) -> &'a <Arc<Inner> as Deref>::Target {<Arc<Inner> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &((*_10).0: lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>>); // scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:44
        _8 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>>::lock(move _9) -> [return: bb2, unwind: bb88]; // scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:158:38: 158:42
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>>) -> lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>>::lock}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_8;                        // scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:52
        _6 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>> as Deref>::deref(move _7) -> [return: bb3, unwind: bb69]; // scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:158:24: 158:52
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>>) -> &'a <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _6;                         // scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:52
        _4 = <pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> as Clone>::clone(move _5) -> [return: bb4, unwind: bb69]; // scope 0 at cita-jsonrpc/src/http_server.rs:158:24: 158:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:158:45: 158:50
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>) -> pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> {<pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _113 = const true;               // scope 0 at cita-jsonrpc/src/http_server.rs:158:51: 158:52
        drop(_8) -> [return: bb5, unwind: bb86]; // scope 0 at cita-jsonrpc/src/http_server.rs:158:54: 158:55
    }

    bb5: {
        _15 = &((*_1).0: std::sync::Arc<http_server::Inner>); // scope 1 at cita-jsonrpc/src/http_server.rs:159:37: 159:47
        _14 = <Arc<Inner> as Deref>::deref(move _15) -> [return: bb6, unwind: bb86]; // scope 1 at cita-jsonrpc/src/http_server.rs:159:37: 159:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:159:37: 159:57
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Inner>) -> &'a <Arc<Inner> as Deref>::Target {<Arc<Inner> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = &((*_14).1: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 1 at cita-jsonrpc/src/http_server.rs:159:36: 159:57
        _12 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone(_13) -> [return: bb7, unwind: bb86]; // scope 1 at cita-jsonrpc/src/http_server.rs:159:25: 159:58
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:159:25: 159:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb7: {
        _112 = const true;               // scope 1 at cita-jsonrpc/src/http_server.rs:159:57: 159:58
        _18 = &((*_1).0: std::sync::Arc<http_server::Inner>); // scope 2 at cita-jsonrpc/src/http_server.rs:160:23: 160:33
        _17 = <Arc<Inner> as Deref>::deref(move _18) -> [return: bb8, unwind: bb84]; // scope 2 at cita-jsonrpc/src/http_server.rs:160:23: 160:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:160:23: 160:41
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Inner>) -> &'a <Arc<Inner> as Deref>::Target {<Arc<Inner> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = ((*_17).2: std::time::Duration); // scope 2 at cita-jsonrpc/src/http_server.rs:160:23: 160:41
        _22 = &((*_1).0: std::sync::Arc<http_server::Inner>); // scope 3 at cita-jsonrpc/src/http_server.rs:161:28: 161:38
        _21 = <Arc<Inner> as Deref>::deref(move _22) -> [return: bb9, unwind: bb84]; // scope 3 at cita-jsonrpc/src/http_server.rs:161:28: 161:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:161:28: 161:51
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Inner>) -> &'a <Arc<Inner> as Deref>::Target {<Arc<Inner> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _20 = &((*_21).3: hyper::HeaderMap); // scope 3 at cita-jsonrpc/src/http_server.rs:161:28: 161:59
        _19 = <HeaderMap as Clone>::clone(move _20) -> [return: bb10, unwind: bb84]; // scope 3 at cita-jsonrpc/src/http_server.rs:161:28: 161:59
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:161:52: 161:57
                                         // + literal: Const { ty: for<'a> fn(&'a HeaderMap) -> HeaderMap {<HeaderMap as Clone>::clone}, val: Value(<ZST>) }
    }

    bb10: {
        _117 = const true;               // scope 3 at cita-jsonrpc/src/http_server.rs:161:58: 161:59
        _28 = &_2;                       // scope 4 at cita-jsonrpc/src/http_server.rs:163:25: 163:39
        _27 = hyper::Request::<Body>::uri(move _28) -> [return: bb11, unwind: bb82]; // scope 4 at cita-jsonrpc/src/http_server.rs:163:25: 163:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:163:34: 163:37
                                         // + literal: Const { ty: for<'a> fn(&'a hyper::Request<Body>) -> &'a Uri {hyper::Request::<Body>::uri}, val: Value(<ZST>) }
    }

    bb11: {
        _26 = _27;                       // scope 4 at cita-jsonrpc/src/http_server.rs:163:25: 163:46
        _25 = Uri::path(move _26) -> [return: bb12, unwind: bb82]; // scope 4 at cita-jsonrpc/src/http_server.rs:163:25: 163:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:163:40: 163:44
                                         // + literal: Const { ty: for<'a> fn(&'a Uri) -> &'a str {Uri::path}, val: Value(<ZST>) }
    }

    bb12: {
        _24 = _25;                       // scope 4 at cita-jsonrpc/src/http_server.rs:163:25: 163:57
        _23 = <str as ToOwned>::to_owned(move _24) -> [return: bb13, unwind: bb82]; // scope 4 at cita-jsonrpc/src/http_server.rs:163:25: 163:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:163:47: 163:55
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb13: {
        _32 = &_2;                       // scope 5 at cita-jsonrpc/src/http_server.rs:164:45: 164:62
        _31 = hyper::Request::<Body>::method(move _32) -> [return: bb14, unwind: bb68]; // scope 5 at cita-jsonrpc/src/http_server.rs:164:45: 164:62
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:164:54: 164:60
                                         // + literal: Const { ty: for<'a> fn(&'a hyper::Request<Body>) -> &'a Method {hyper::Request::<Body>::method}, val: Value(<ZST>) }
    }

    bb14: {
        _30 = _31;                       // scope 5 at cita-jsonrpc/src/http_server.rs:164:45: 164:62
        _35 = &_23;                      // scope 5 at cita-jsonrpc/src/http_server.rs:164:64: 164:74
        _34 = <std::string::String as Deref>::deref(_35) -> [return: bb15, unwind: bb68]; // scope 5 at cita-jsonrpc/src/http_server.rs:164:64: 164:74
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:164:64: 164:74
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb15: {
        _33 = _34;                       // scope 5 at cita-jsonrpc/src/http_server.rs:164:64: 164:74
        _36 = &_19;                      // scope 5 at cita-jsonrpc/src/http_server.rs:164:76: 164:89
        _29 = http_server::AccessLog::new(move _30, move _33, _36) -> [return: bb16, unwind: bb68]; // scope 5 at cita-jsonrpc/src/http_server.rs:164:30: 164:90
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:164:30: 164:44
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a Method, &'b str, &'c HeaderMap) -> http_server::AccessLog {http_server::AccessLog::new}, val: Value(<ZST>) }
    }

    bb16: {
        _111 = const true;               // scope 5 at cita-jsonrpc/src/http_server.rs:164:89: 164:90
        _40 = &_2;                       // scope 6 at cita-jsonrpc/src/http_server.rs:166:16: 166:33
        _39 = hyper::Request::<Body>::method(move _40) -> [return: bb17, unwind: bb80]; // scope 6 at cita-jsonrpc/src/http_server.rs:166:16: 166:33
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:166:25: 166:31
                                         // + literal: Const { ty: for<'a> fn(&'a hyper::Request<Body>) -> &'a Method {hyper::Request::<Body>::method}, val: Value(<ZST>) }
    }

    bb17: {
        _42 = &_23;                      // scope 6 at cita-jsonrpc/src/http_server.rs:166:35: 166:53
        _41 = <std::string::String as AsRef<str>>::as_ref(move _42) -> [return: bb18, unwind: bb80]; // scope 6 at cita-jsonrpc/src/http_server.rs:166:35: 166:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:166:45: 166:51
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a str {<std::string::String as AsRef<str>>::as_ref}, val: Value(<ZST>) }
    }

    bb18: {
        _38 = (move _39, move _41);      // scope 6 at cita-jsonrpc/src/http_server.rs:166:15: 166:54
        _110 = deref_copy (_38.0: &hyper::Method); // scope 6 at cita-jsonrpc/src/http_server.rs:166:15: 166:54
        _45 = discriminant(((*_110).0: hyper::http::method::Inner)); // scope 6 at cita-jsonrpc/src/http_server.rs:166:15: 166:54
        switchInt(move _45) -> [0: bb19, 2: bb22, otherwise: bb21]; // scope 6 at cita-jsonrpc/src/http_server.rs:166:9: 166:54
    }

    bb19: {
        _43 = <str as PartialEq>::eq((_38.1: &str), const "/") -> [return: bb20, unwind: bb80]; // scope 6 at cita-jsonrpc/src/http_server.rs:193:32: 193:35
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:193:32: 193:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:193:32: 193:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        switchInt(move _43) -> [0: bb21, otherwise: bb31]; // scope 6 at cita-jsonrpc/src/http_server.rs:193:32: 193:35
    }

    bb21: {
        _81 = log::Level::Info;          // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _84 = &_81;                      // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _106 = const _;                  // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(<http_server::Jsonrpc as Service>::call, [], Some(promoted[2])) }
        _83 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _84, _106) -> [return: bb50, unwind: bb80]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb22: {
        _44 = <str as PartialEq>::eq((_38.1: &str), const "/") -> [return: bb23, unwind: bb80]; // scope 6 at cita-jsonrpc/src/http_server.rs:167:29: 167:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:167:29: 167:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:167:29: 167:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        switchInt(move _44) -> [0: bb21, otherwise: bb24]; // scope 6 at cita-jsonrpc/src/http_server.rs:167:29: 167:32
    }

    bb24: {
        _114 = const false;              // scope 6 at cita-jsonrpc/src/http_server.rs:168:77: 168:85
        _51 = move _2;                   // scope 6 at cita-jsonrpc/src/http_server.rs:168:77: 168:85
        _50 = <hyper::Request<Body> as FutExtractor<RpcRequest>>::extract_from(move _51) -> [return: bb25, unwind: bb80]; // scope 6 at cita-jsonrpc/src/http_server.rs:168:32: 168:86
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:168:32: 168:76
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(hyper::Request<Body>) -> <hyper::Request<Body> as FutExtractor<RpcRequest>>::Fut {<hyper::Request<Body> as FutExtractor<RpcRequest>>::extract_from}, val: Value(<ZST>) }
    }

    bb25: {
        _49 = <Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send> as futures::Future>::and_then::<fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>>(move _50, <RpcRequest as FutExtractor<MQRequest>>::extract_from) -> [return: bb26, unwind: bb80]; // scope 6 at cita-jsonrpc/src/http_server.rs:168:32: 169:71
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:169:22: 169:30
                                         // + literal: Const { ty: fn(Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}) -> futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}> {<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send> as futures::Future>::and_then::<fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:169:31: 169:70
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}, val: Value(<ZST>) }
    }

    bb26: {
        _116 = const true;               // scope 6 at cita-jsonrpc/src/http_server.rs:169:70: 169:71
        _54 = &_19;                      // scope 6 at cita-jsonrpc/src/http_server.rs:171:39: 171:59
        _53 = <HeaderMap as Clone>::clone(move _54) -> [return: bb27, unwind: bb78]; // scope 6 at cita-jsonrpc/src/http_server.rs:171:39: 171:59
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:171:52: 171:57
                                         // + literal: Const { ty: for<'a> fn(&'a HeaderMap) -> HeaderMap {<HeaderMap as Clone>::clone}, val: Value(<ZST>) }
    }

    bb27: {
        _111 = const false;              // scope 8 at cita-jsonrpc/src/http_server.rs:173:25: 184:26
        _112 = const false;              // scope 8 at cita-jsonrpc/src/http_server.rs:173:25: 184:26
        _113 = const false;              // scope 8 at cita-jsonrpc/src/http_server.rs:173:25: 184:26
        _52 = [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38] { access_log: move _29, responses: move _12, sender: move _4, headers: move _53, timeout: _16 }; // scope 8 at cita-jsonrpc/src/http_server.rs:173:25: 184:26
                                         // closure
                                         // + def_id: DefId(0:222 ~ cita_jsonrpc[a6db]::http_server::{impl#4}::call::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((mq_publisher::MQRequest,)) -> std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = service_error::ServiceError> + std::marker::Send>,
                                         //     (http_server::AccessLog, std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, hyper::HeaderMap, std::time::Duration),
                                         // ]
        _116 = const false;              // scope 6 at cita-jsonrpc/src/http_server.rs:168:32: 185:23
        _48 = <futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}> as futures::Future>::and_then::<[closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38], Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send>>(move _49, move _52) -> [return: bb28, unwind: bb78]; // scope 6 at cita-jsonrpc/src/http_server.rs:168:32: 185:23
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:170:22: 170:30
                                         // + literal: Const { ty: fn(futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]) -> futures::AndThen<futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}>, Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]> {<futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}> as futures::Future>::and_then::<[closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38], Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send>>}, val: Value(<ZST>) }
    }

    bb28: {
        _116 = const false;              // scope 6 at cita-jsonrpc/src/http_server.rs:185:22: 185:23
        _117 = const false;              // scope 6 at cita-jsonrpc/src/http_server.rs:186:27: 189:22
        _55 = [closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38] { http_headers: move _19 }; // scope 6 at cita-jsonrpc/src/http_server.rs:186:27: 189:22
                                         // closure
                                         // + def_id: DefId(0:223 ~ cita_jsonrpc[a6db]::http_server::{impl#4}::call::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::result::Result<hyper::Response<hyper::Body>, service_error::ServiceError>,)) -> std::result::Result<hyper::Response<hyper::Body>, hyper::Error>,
                                         //     (hyper::HeaderMap,),
                                         // ]
        _47 = <futures::AndThen<futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}>, Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]> as futures::Future>::then::<[closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38], Result<hyper::Response<Body>, hyper::Error>>(move _48, move _55) -> [return: bb29, unwind: bb80]; // scope 6 at cita-jsonrpc/src/http_server.rs:168:32: 189:23
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:186:22: 186:26
                                         // + literal: Const { ty: fn(futures::AndThen<futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}>, Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]>, [closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38]) -> futures::Then<futures::AndThen<futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}>, Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]>, Result<hyper::Response<Body>, hyper::Error>, [closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38]> {<futures::AndThen<futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}>, Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]> as futures::Future>::then::<[closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38], Result<hyper::Response<Body>, hyper::Error>>}, val: Value(<ZST>) }
    }

    bb29: {
        _57 = move _47;                  // scope 7 at cita-jsonrpc/src/http_server.rs:191:26: 191:34
        _56 = Box::<futures::Then<futures::AndThen<futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}>, Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]>, Result<hyper::Response<Body>, hyper::Error>, [closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38]>>::new(move _57) -> [return: bb30, unwind: bb80]; // scope 7 at cita-jsonrpc/src/http_server.rs:191:17: 191:35
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:191:17: 191:25
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(futures::Then<futures::AndThen<futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}>, Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]>, Result<hyper::Response<Body>, hyper::Error>, [closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38]>) -> Box<futures::Then<futures::AndThen<futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}>, Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]>, Result<hyper::Response<Body>, hyper::Error>, [closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38]>> {Box::<futures::Then<futures::AndThen<futures::AndThen<Box<dyn futures::Future<Item = RpcRequest, Error = ServiceError> + std::marker::Send>, Box<dyn futures::Future<Item = MQRequest, Error = ServiceError> + std::marker::Send>, fn(RpcRequest) -> <RpcRequest as FutExtractor<MQRequest>>::Fut {<RpcRequest as FutExtractor<MQRequest>>::extract_from}>, Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send>, [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38]>, Result<hyper::Response<Body>, hyper::Error>, [closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38]>>::new}, val: Value(<ZST>) }
    }

    bb30: {
        _46 = move _56 as std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = hyper::Error> + std::marker::Send> (Pointer(Unsize)); // scope 7 at cita-jsonrpc/src/http_server.rs:191:17: 191:35
        _37 = move _46;                  // scope 6 at cita-jsonrpc/src/http_server.rs:191:17: 191:35
        goto -> bb62;                    // scope 6 at cita-jsonrpc/src/http_server.rs:192:13: 192:14
    }

    bb31: {
        _58 = log::Level::Info;          // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _61 = &_58;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _109 = const _;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(<http_server::Jsonrpc as Service>::call, [], Some(promoted[5])) }
        _60 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _61, _109) -> [return: bb35, unwind: bb80]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb32: {
        _59 = const false;               // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb34;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb33: {
        _63 = &_58;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _65 = log::max_level() -> [return: bb36, unwind: bb80]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb34: {
        switchInt(move _59) -> [0: bb41, otherwise: bb38]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb35: {
        switchInt(move _60) -> [0: bb32, otherwise: bb33]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb36: {
        _64 = &_65;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _62 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _63, move _64) -> [return: bb37, unwind: bb80]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb37: {
        _59 = move _62;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb34;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb38: {
        _108 = const _;                  // scope 9 at cita-jsonrpc/src/http_server.rs:194:23: 194:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:194:23: 194:27
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::Jsonrpc as Service>::call, [], Some(promoted[4])) }
        _68 = _108 as &[&str] (Pointer(Unsize)); // scope 9 at cita-jsonrpc/src/http_server.rs:194:23: 194:27
        _73 = &_29;                      // scope 9 at cita-jsonrpc/src/http_server.rs:194:29: 194:39
        _72 = core::fmt::ArgumentV1::<'_>::new_display::<http_server::AccessLog>(_73) -> [return: bb39, unwind: bb80]; // scope 9 at cita-jsonrpc/src/http_server.rs:194:29: 194:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:194:29: 194:39
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b http_server::AccessLog) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<http_server::AccessLog>}, val: Value(<ZST>) }
    }

    bb39: {
        _71 = [move _72];                // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _70 = &_71;                      // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _69 = _70 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _67 = Arguments::<'_>::new_v1(move _68, move _69) -> [return: bb40, unwind: bb80]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb40: {
        _107 = const _;                  // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(<http_server::Jsonrpc as Service>::call, [], Some(promoted[3])) }
        _66 = log::__private_api_log(move _67, _58, _107) -> [return: bb89, unwind: bb80]; // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb41: {
        _75 = <hyper::Response<Body> as Default>::default() -> [return: bb42, unwind: bb80]; // scope 6 at cita-jsonrpc/src/http_server.rs:195:28: 195:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:195:28: 195:45
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn() -> hyper::Response<Body> {<hyper::Response<Body> as Default>::default}, val: Value(<ZST>) }
    }

    bb42: {
        _115 = const true;               // scope 6 at cita-jsonrpc/src/http_server.rs:195:61: 195:93
        _117 = const false;              // scope 6 at cita-jsonrpc/src/http_server.rs:195:80: 195:92
        _77 = move _19;                  // scope 6 at cita-jsonrpc/src/http_server.rs:195:80: 195:92
        _76 = handle_preflighted(move _77) -> [return: bb43, unwind: bb76]; // scope 6 at cita-jsonrpc/src/http_server.rs:195:61: 195:93
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:195:61: 195:79
                                         // + literal: Const { ty: fn(HeaderMap) -> HeaderMap {handle_preflighted}, val: Value(<ZST>) }
    }

    bb43: {
        _115 = const false;              // scope 6 at cita-jsonrpc/src/http_server.rs:195:28: 195:94
        _74 = <hyper::Response<Body> as HyperResponseExt<Body>>::with_headers(move _75, move _76) -> [return: bb44, unwind: bb76]; // scope 6 at cita-jsonrpc/src/http_server.rs:195:28: 195:94
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:195:48: 195:60
                                         // + literal: Const { ty: fn(hyper::Response<Body>, HeaderMap) -> hyper::Response<Body> {<hyper::Response<Body> as HyperResponseExt<Body>>::with_headers}, val: Value(<ZST>) }
    }

    bb44: {
        _115 = const false;              // scope 6 at cita-jsonrpc/src/http_server.rs:195:93: 195:94
        _80 = move _74;                  // scope 10 at cita-jsonrpc/src/http_server.rs:197:37: 197:41
        _79 = finished::<hyper::Response<Body>, hyper::Error>(move _80) -> [return: bb45, unwind: bb80]; // scope 10 at cita-jsonrpc/src/http_server.rs:197:26: 197:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:197:26: 197:36
                                         // + literal: Const { ty: fn(hyper::Response<Body>) -> Failed<hyper::Response<Body>, hyper::Error> {finished::<hyper::Response<Body>, hyper::Error>}, val: Value(<ZST>) }
    }

    bb45: {
        _78 = Box::<Failed<hyper::Response<Body>, hyper::Error>>::new(move _79) -> [return: bb46, unwind: bb80]; // scope 10 at cita-jsonrpc/src/http_server.rs:197:17: 197:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:197:17: 197:25
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(Failed<hyper::Response<Body>, hyper::Error>) -> Box<Failed<hyper::Response<Body>, hyper::Error>> {Box::<Failed<hyper::Response<Body>, hyper::Error>>::new}, val: Value(<ZST>) }
    }

    bb46: {
        _37 = move _78 as std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = hyper::Error> + std::marker::Send> (Pointer(Unsize)); // scope 10 at cita-jsonrpc/src/http_server.rs:197:17: 197:43
        goto -> bb62;                    // scope 6 at cita-jsonrpc/src/http_server.rs:198:13: 198:14
    }

    bb47: {
        _82 = const false;               // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb49;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb48: {
        _86 = &_81;                      // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _88 = log::max_level() -> [return: bb51, unwind: bb80]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb49: {
        switchInt(move _82) -> [0: bb56, otherwise: bb53]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb50: {
        switchInt(move _83) -> [0: bb47, otherwise: bb48]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb51: {
        _87 = &_88;                      // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _85 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _86, move _87) -> [return: bb52, unwind: bb80]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb52: {
        _82 = move _85;                  // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb49;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb53: {
        _105 = const _;                  // scope 11 at cita-jsonrpc/src/http_server.rs:200:23: 200:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:200:23: 200:27
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::Jsonrpc as Service>::call, [], Some(promoted[1])) }
        _91 = _105 as &[&str] (Pointer(Unsize)); // scope 11 at cita-jsonrpc/src/http_server.rs:200:23: 200:27
        _96 = &_29;                      // scope 11 at cita-jsonrpc/src/http_server.rs:200:29: 200:39
        _95 = core::fmt::ArgumentV1::<'_>::new_display::<http_server::AccessLog>(_96) -> [return: bb54, unwind: bb80]; // scope 11 at cita-jsonrpc/src/http_server.rs:200:29: 200:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:200:29: 200:39
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'b> fn(&'b http_server::AccessLog) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<http_server::AccessLog>}, val: Value(<ZST>) }
    }

    bb54: {
        _94 = [move _95];                // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _93 = &_94;                      // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _92 = _93 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _90 = Arguments::<'_>::new_v1(move _91, move _92) -> [return: bb55, unwind: bb80]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb55: {
        _104 = const _;                  // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(<http_server::Jsonrpc as Service>::call, [], Some(promoted[0])) }
        _89 = log::__private_api_log(move _90, _81, _104) -> [return: bb90, unwind: bb80]; // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb56: {
        _99 = <hyper::Response<Body> as Default>::default() -> [return: bb57, unwind: bb80]; // scope 6 at cita-jsonrpc/src/http_server.rs:201:28: 201:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:201:28: 201:45
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn() -> hyper::Response<Body> {<hyper::Response<Body> as Default>::default}, val: Value(<ZST>) }
    }

    bb57: {
        _117 = const false;              // scope 6 at cita-jsonrpc/src/http_server.rs:202:35: 202:47
        _100 = move _19;                 // scope 6 at cita-jsonrpc/src/http_server.rs:202:35: 202:47
        _98 = <hyper::Response<Body> as HyperResponseExt<Body>>::with_headers(move _99, move _100) -> [return: bb58, unwind: bb80]; // scope 6 at cita-jsonrpc/src/http_server.rs:201:28: 202:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:202:22: 202:34
                                         // + literal: Const { ty: fn(hyper::Response<Body>, HeaderMap) -> hyper::Response<Body> {<hyper::Response<Body> as HyperResponseExt<Body>>::with_headers}, val: Value(<ZST>) }
    }

    bb58: {
        _97 = <hyper::Response<Body> as HyperResponseExt<Body>>::with_status(move _98, const _) -> [return: bb59, unwind: bb80]; // scope 6 at cita-jsonrpc/src/http_server.rs:201:28: 203:56
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:203:22: 203:33
                                         // + literal: Const { ty: fn(hyper::Response<Body>, StatusCode) -> hyper::Response<Body> {<hyper::Response<Body> as HyperResponseExt<Body>>::with_status}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:203:34: 203:55
                                         // + literal: Const { ty: StatusCode, val: Unevaluated(StatusCode::NOT_FOUND, [], None) }
    }

    bb59: {
        _103 = move _97;                 // scope 12 at cita-jsonrpc/src/http_server.rs:205:37: 205:41
        _102 = finished::<hyper::Response<Body>, hyper::Error>(move _103) -> [return: bb60, unwind: bb80]; // scope 12 at cita-jsonrpc/src/http_server.rs:205:26: 205:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:205:26: 205:36
                                         // + literal: Const { ty: fn(hyper::Response<Body>) -> Failed<hyper::Response<Body>, hyper::Error> {finished::<hyper::Response<Body>, hyper::Error>}, val: Value(<ZST>) }
    }

    bb60: {
        _101 = Box::<Failed<hyper::Response<Body>, hyper::Error>>::new(move _102) -> [return: bb61, unwind: bb80]; // scope 12 at cita-jsonrpc/src/http_server.rs:205:17: 205:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:205:17: 205:25
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(Failed<hyper::Response<Body>, hyper::Error>) -> Box<Failed<hyper::Response<Body>, hyper::Error>> {Box::<Failed<hyper::Response<Body>, hyper::Error>>::new}, val: Value(<ZST>) }
    }

    bb61: {
        _37 = move _101 as std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = hyper::Error> + std::marker::Send> (Pointer(Unsize)); // scope 12 at cita-jsonrpc/src/http_server.rs:205:17: 205:43
        goto -> bb62;                    // scope 6 at cita-jsonrpc/src/http_server.rs:206:13: 206:14
    }

    bb62: {
        _3 = move _37;                   // scope 6 at cita-jsonrpc/src/http_server.rs:166:9: 207:10
        switchInt(_111) -> [0: bb63, otherwise: bb71]; // scope 5 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb63: {
        _111 = const false;              // scope 5 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
        drop(_23) -> [return: bb64, unwind: bb82]; // scope 4 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb64: {
        _117 = const false;              // scope 3 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
        switchInt(_112) -> [0: bb65, otherwise: bb72]; // scope 1 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb65: {
        _112 = const false;              // scope 1 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
        switchInt(_113) -> [0: bb66, otherwise: bb73]; // scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb66: {
        _113 = const false;              // scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
        _0 = move _3;                    // scope 0 at cita-jsonrpc/src/http_server.rs:166:9: 207:10
        switchInt(_114) -> [0: bb67, otherwise: bb74]; // scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb67: {
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:208:6: 208:6
    }

    bb68 (cleanup): {
        drop(_23) -> bb82;               // scope 4 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb69 (cleanup): {
        drop(_8) -> bb88;                // scope 0 at cita-jsonrpc/src/http_server.rs:158:54: 158:55
    }

    bb70 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/http_server.rs:157:5: 208:6
    }

    bb71: {
        drop(_29) -> [return: bb63, unwind: bb68]; // scope 5 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb72: {
        drop(_12) -> [return: bb65, unwind: bb86]; // scope 1 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb73: {
        drop(_4) -> [return: bb66, unwind: bb88]; // scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb74: {
        drop(_2) -> bb67;                // scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb75 (cleanup): {
        drop(_75) -> bb80;               // scope 6 at cita-jsonrpc/src/http_server.rs:195:93: 195:94
    }

    bb76 (cleanup): {
        switchInt(_115) -> [0: bb80, otherwise: bb75]; // scope 6 at cita-jsonrpc/src/http_server.rs:195:93: 195:94
    }

    bb77 (cleanup): {
        drop(_49) -> bb80;               // scope 6 at cita-jsonrpc/src/http_server.rs:185:22: 185:23
    }

    bb78 (cleanup): {
        switchInt(_116) -> [0: bb80, otherwise: bb77]; // scope 6 at cita-jsonrpc/src/http_server.rs:185:22: 185:23
    }

    bb79 (cleanup): {
        drop(_29) -> bb68;               // scope 5 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb80 (cleanup): {
        switchInt(_111) -> [0: bb68, otherwise: bb79]; // scope 5 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb81 (cleanup): {
        drop(_19) -> bb84;               // scope 3 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb82 (cleanup): {
        switchInt(_117) -> [0: bb84, otherwise: bb81]; // scope 3 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb83 (cleanup): {
        drop(_12) -> bb86;               // scope 1 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb84 (cleanup): {
        switchInt(_112) -> [0: bb86, otherwise: bb83]; // scope 1 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb85 (cleanup): {
        drop(_4) -> bb88;                // scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb86 (cleanup): {
        switchInt(_113) -> [0: bb88, otherwise: bb85]; // scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb87 (cleanup): {
        drop(_2) -> bb70;                // scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb88 (cleanup): {
        switchInt(_114) -> [0: bb70, otherwise: bb87]; // scope 0 at cita-jsonrpc/src/http_server.rs:208:5: 208:6
    }

    bb89: {
        goto -> bb41;                    // scope 9 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb90: {
        goto -> bb56;                    // scope 11 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in http_server::<impl at cita-jsonrpc/src/http_server.rs:151:1: 151:25>::call: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:200:17: 200:40
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:200:17: 200:40

    bb0: {
        _3 = const "cita_jsonrpc::http_server"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::http_server"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/http_server.rs"; // scope 0 at cita-jsonrpc/src/http_server.rs:200:17: 200:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:200:17: 200:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/http_server.rs:200:17: 200:40
        _1 = (move _2, move _4, move _6, const 200_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in http_server::<impl at cita-jsonrpc/src/http_server.rs:151:1: 151:25>::call: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:200:23: 200:27
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:200:23: 200:27

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-jsonrpc/src/http_server.rs:200:23: 200:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:200:23: 200:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:200:23: 200:27
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:200:23: 200:27
    }
}

promoted[2] in http_server::<impl at cita-jsonrpc/src/http_server.rs:151:1: 151:25>::call: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in http_server::<impl at cita-jsonrpc/src/http_server.rs:151:1: 151:25>::call: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:194:17: 194:40
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:194:17: 194:40

    bb0: {
        _3 = const "cita_jsonrpc::http_server"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::http_server"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/http_server.rs"; // scope 0 at cita-jsonrpc/src/http_server.rs:194:17: 194:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:194:17: 194:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/http_server.rs:194:17: 194:40
        _1 = (move _2, move _4, move _6, const 194_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in http_server::<impl at cita-jsonrpc/src/http_server.rs:151:1: 151:25>::call: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:194:23: 194:27
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:194:23: 194:27

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-jsonrpc/src/http_server.rs:194:23: 194:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:194:23: 194:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:194:23: 194:27
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:194:23: 194:27
    }
}

promoted[5] in http_server::<impl at cita-jsonrpc/src/http_server.rs:151:1: 151:25>::call: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:151:1: 151:25>::call::{closure#0}(_1: [closure@cita-jsonrpc/src/http_server.rs:173:25: 173:38], _2: MQRequest) -> Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send> {
    debug mq_req => _2;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:173:31: 173:37
    debug access_log => (_1.0: http_server::AccessLog); // in scope 0 at cita-jsonrpc/src/http_server.rs:164:17: 164:27
    debug responses => (_1.1: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // in scope 0 at cita-jsonrpc/src/http_server.rs:159:13: 159:22
    debug sender => (_1.2: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // in scope 0 at cita-jsonrpc/src/http_server.rs:158:13: 158:19
    debug headers => (_1.3: hyper::HeaderMap); // in scope 0 at cita-jsonrpc/src/http_server.rs:171:29: 171:36
    debug timeout => (_1.4: std::time::Duration); // in scope 0 at cita-jsonrpc/src/http_server.rs:160:13: 160:20
    let mut _0: std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = service_error::ServiceError> + std::marker::Send>; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:183:29: 183:54
    let _3: ();                          // in scope 0 at cita-jsonrpc/src/http_server.rs:175:29: 175:93
    let mut _4: &mut http_server::AccessLog; // in scope 0 at cita-jsonrpc/src/http_server.rs:175:29: 175:93
    let mut _5: http_server::RpcAccessLog; // in scope 0 at cita-jsonrpc/src/http_server.rs:175:53: 175:92
    let mut _6: mq_publisher::AccessLog; // in scope 0 at cita-jsonrpc/src/http_server.rs:175:72: 175:91
    let mut _7: &mq_publisher::MQRequest; // in scope 0 at cita-jsonrpc/src/http_server.rs:175:72: 175:91
    let _8: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _9: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _10: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _11: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _12: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _13: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _14: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _15: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _16: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _17: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _18: &[&str];                // in scope 0 at cita-jsonrpc/src/http_server.rs:176:35: 176:39
    let mut _19: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _21: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _22: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/http_server.rs:176:41: 176:51
    let _23: &http_server::AccessLog;    // in scope 0 at cita-jsonrpc/src/http_server.rs:176:41: 176:51
    let _24: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:178:33: 178:50
    let _25: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:178:64: 178:74
    let mut _27: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:179:60: 179:69
    let mut _28: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/http_server.rs:179:71: 179:77
    let mut _29: hyper::HeaderMap;       // in scope 0 at cita-jsonrpc/src/http_server.rs:179:79: 179:86
    let mut _31: mq_publisher::Publisher; // in scope 0 at cita-jsonrpc/src/http_server.rs:181:55: 181:64
    let mut _32: std::time::Duration;    // in scope 0 at cita-jsonrpc/src/http_server.rs:181:66: 181:73
    let mut _33: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:181:75: 181:92
    let mut _34: mq_publisher::TimeoutPublisher; // in scope 0 at cita-jsonrpc/src/http_server.rs:183:29: 183:38
    let mut _35: mq_publisher::MQRequest; // in scope 0 at cita-jsonrpc/src/http_server.rs:183:47: 183:53
    let mut _39: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    let mut _40: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    let mut _41: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    let mut _42: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    let mut _43: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    scope 1 {
        debug lvl => _8;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _36: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _37: &[&str; 1];         // in scope 1 at cita-jsonrpc/src/http_server.rs:176:35: 176:39
        let mut _38: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
    scope 2 {
        debug timeout_responses => _24;  // in scope 2 at cita-jsonrpc/src/http_server.rs:178:33: 178:50
        let _26: mq_publisher::Publisher; // in scope 2 at cita-jsonrpc/src/http_server.rs:179:33: 179:42
        scope 3 {
            debug pulibsher => _26;      // in scope 3 at cita-jsonrpc/src/http_server.rs:179:33: 179:42
            let _30: mq_publisher::TimeoutPublisher; // in scope 3 at cita-jsonrpc/src/http_server.rs:180:33: 180:42
            scope 4 {
                debug pulibsher => _30;  // in scope 4 at cita-jsonrpc/src/http_server.rs:180:33: 180:42
            }
        }
    }

    bb0: {
        _43 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:183:29: 183:54
        _41 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:183:29: 183:54
        _40 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:183:29: 183:54
        _42 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:183:29: 183:54
        _39 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:183:29: 183:54
        _41 = const true;                // scope 0 at cita-jsonrpc/src/http_server.rs:183:29: 183:54
        _42 = const true;                // scope 0 at cita-jsonrpc/src/http_server.rs:183:29: 183:54
        _43 = const true;                // scope 0 at cita-jsonrpc/src/http_server.rs:183:29: 183:54
        _40 = const true;                // scope 0 at cita-jsonrpc/src/http_server.rs:183:29: 183:54
        _4 = &mut (_1.0: http_server::AccessLog); // scope 0 at cita-jsonrpc/src/http_server.rs:175:29: 175:93
        _7 = &_2;                        // scope 0 at cita-jsonrpc/src/http_server.rs:175:72: 175:91
        _6 = MQRequest::access_log(move _7) -> [return: bb1, unwind: bb24]; // scope 0 at cita-jsonrpc/src/http_server.rs:175:72: 175:91
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:175:79: 175:89
                                         // + literal: Const { ty: for<'a> fn(&'a MQRequest) -> mq_publisher::AccessLog {MQRequest::access_log}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = <RpcAccessLog as From<mq_publisher::AccessLog>>::from(move _6) -> [return: bb2, unwind: bb24]; // scope 0 at cita-jsonrpc/src/http_server.rs:175:53: 175:92
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:175:53: 175:71
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(mq_publisher::AccessLog) -> RpcAccessLog {<RpcAccessLog as From<mq_publisher::AccessLog>>::from}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = http_server::AccessLog::set_rpc_info(move _4, move _5) -> [return: bb3, unwind: bb24]; // scope 0 at cita-jsonrpc/src/http_server.rs:175:29: 175:93
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:175:40: 175:52
                                         // + literal: Const { ty: for<'a> fn(&'a mut http_server::AccessLog, RpcAccessLog) {http_server::AccessLog::set_rpc_info}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = log::Level::Info;           // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _11 = &_8;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _38 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(<http_server::Jsonrpc as Service>::call::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _10 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _11, _38) -> [return: bb7, unwind: bb24]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb6;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _13 = &_8;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _15 = log::max_level() -> [return: bb8, unwind: bb24]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _9) -> [0: bb13, otherwise: bb10]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        switchInt(move _10) -> [0: bb4, otherwise: bb5]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb8: {
        _14 = &_15;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _12 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _13, move _14) -> [return: bb9, unwind: bb24]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb9: {
        _9 = move _12;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb6;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb10: {
        _37 = const _;                   // scope 1 at cita-jsonrpc/src/http_server.rs:176:35: 176:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:176:35: 176:39
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<http_server::Jsonrpc as Service>::call::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _18 = _37 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/http_server.rs:176:35: 176:39
        _23 = &(_1.0: http_server::AccessLog); // scope 1 at cita-jsonrpc/src/http_server.rs:176:41: 176:51
        _22 = core::fmt::ArgumentV1::<'_>::new_display::<http_server::AccessLog>(_23) -> [return: bb11, unwind: bb24]; // scope 1 at cita-jsonrpc/src/http_server.rs:176:41: 176:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:176:41: 176:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b http_server::AccessLog) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<http_server::AccessLog>}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = [move _22];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _20 = &_21;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _19 = _20 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _17 = Arguments::<'_>::new_v1(move _18, move _19) -> [return: bb12, unwind: bb24]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb12: {
        _36 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(<http_server::Jsonrpc as Service>::call::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _16 = log::__private_api_log(move _17, _8, _36) -> [return: bb31, unwind: bb24]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb13: {
        _25 = &(_1.1: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 0 at cita-jsonrpc/src/http_server.rs:178:64: 178:74
        _24 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone(_25) -> [return: bb14, unwind: bb24]; // scope 0 at cita-jsonrpc/src/http_server.rs:178:53: 178:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:178:53: 178:63
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb14: {
        _39 = const true;                // scope 0 at cita-jsonrpc/src/http_server.rs:178:74: 178:75
        _43 = const false;               // scope 2 at cita-jsonrpc/src/http_server.rs:179:60: 179:69
        _27 = move (_1.1: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 2 at cita-jsonrpc/src/http_server.rs:179:60: 179:69
        _42 = const false;               // scope 2 at cita-jsonrpc/src/http_server.rs:179:71: 179:77
        _28 = move (_1.2: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // scope 2 at cita-jsonrpc/src/http_server.rs:179:71: 179:77
        _41 = const false;               // scope 2 at cita-jsonrpc/src/http_server.rs:179:79: 179:86
        _29 = move (_1.3: hyper::HeaderMap); // scope 2 at cita-jsonrpc/src/http_server.rs:179:79: 179:86
        _26 = Publisher::new(move _27, move _28, move _29) -> [return: bb15, unwind: bb22]; // scope 2 at cita-jsonrpc/src/http_server.rs:179:45: 179:87
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:179:45: 179:59
                                         // + literal: Const { ty: fn(Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, HeaderMap) -> Publisher {Publisher::new}, val: Value(<ZST>) }
    }

    bb15: {
        _31 = move _26;                  // scope 3 at cita-jsonrpc/src/http_server.rs:181:55: 181:64
        _32 = (_1.4: std::time::Duration); // scope 3 at cita-jsonrpc/src/http_server.rs:181:66: 181:73
        _39 = const false;               // scope 3 at cita-jsonrpc/src/http_server.rs:181:75: 181:92
        _33 = move _24;                  // scope 3 at cita-jsonrpc/src/http_server.rs:181:75: 181:92
        _30 = TimeoutPublisher::new(move _31, move _32, move _33) -> [return: bb16, unwind: bb22]; // scope 3 at cita-jsonrpc/src/http_server.rs:181:33: 181:93
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:181:33: 181:54
                                         // + literal: Const { ty: fn(Publisher, Duration, Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> TimeoutPublisher {TimeoutPublisher::new}, val: Value(<ZST>) }
    }

    bb16: {
        _34 = move _30;                  // scope 4 at cita-jsonrpc/src/http_server.rs:183:29: 183:38
        _40 = const false;               // scope 4 at cita-jsonrpc/src/http_server.rs:183:47: 183:53
        _35 = move _2;                   // scope 4 at cita-jsonrpc/src/http_server.rs:183:47: 183:53
        _0 = TimeoutPublisher::publish(move _34, move _35) -> [return: bb17, unwind: bb22]; // scope 4 at cita-jsonrpc/src/http_server.rs:183:29: 183:54
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:183:39: 183:46
                                         // + literal: Const { ty: fn(TimeoutPublisher, MQRequest) -> Box<(dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send + 'static)> {TimeoutPublisher::publish}, val: Value(<ZST>) }
    }

    bb17: {
        _39 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
        drop((_1.0: http_server::AccessLog)) -> bb20; // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    }

    bb18 (cleanup): {
        drop((_1.0: http_server::AccessLog)) -> bb29; // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    }

    bb19 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/http_server.rs:173:25: 184:26
    }

    bb20: {
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:184:26: 184:26
    }

    bb21 (cleanup): {
        drop(_24) -> bb24;               // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    }

    bb22 (cleanup): {
        switchInt(_39) -> [0: bb24, otherwise: bb21]; // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    }

    bb23 (cleanup): {
        drop(_2) -> bb18;                // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    }

    bb24 (cleanup): {
        switchInt(_40) -> [0: bb18, otherwise: bb23]; // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    }

    bb25 (cleanup): {
        switchInt(_41) -> [0: bb19, otherwise: bb26]; // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    }

    bb26 (cleanup): {
        drop((_1.3: hyper::HeaderMap)) -> bb19; // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    }

    bb27 (cleanup): {
        switchInt(_42) -> [0: bb25, otherwise: bb28]; // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    }

    bb28 (cleanup): {
        drop((_1.2: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>)) -> bb25; // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    }

    bb29 (cleanup): {
        switchInt(_43) -> [0: bb27, otherwise: bb30]; // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    }

    bb30 (cleanup): {
        drop((_1.1: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>)) -> bb27; // scope 0 at cita-jsonrpc/src/http_server.rs:184:25: 184:26
    }

    bb31: {
        goto -> bb13;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in http_server::<impl at cita-jsonrpc/src/http_server.rs:151:1: 151:25>::call::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:176:29: 176:52
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:176:29: 176:52

    bb0: {
        _3 = const "cita_jsonrpc::http_server"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::http_server"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/http_server.rs"; // scope 0 at cita-jsonrpc/src/http_server.rs:176:29: 176:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:176:29: 176:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/http_server.rs:176:29: 176:52
        _1 = (move _2, move _4, move _6, const 176_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in http_server::<impl at cita-jsonrpc/src/http_server.rs:151:1: 151:25>::call::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/http_server.rs:176:35: 176:39
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/http_server.rs:176:35: 176:39

    bb0: {
        _1 = [const ""];                 // scope 0 at cita-jsonrpc/src/http_server.rs:176:35: 176:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:176:35: 176:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:176:35: 176:39
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:176:35: 176:39
    }
}

promoted[2] in http_server::<impl at cita-jsonrpc/src/http_server.rs:151:1: 151:25>::call::{closure#0}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:151:1: 151:25>::call::{closure#1}(_1: [closure@cita-jsonrpc/src/http_server.rs:186:27: 186:38], _2: Result<hyper::Response<Body>, ServiceError>) -> Result<hyper::Response<Body>, hyper::Error> {
    debug resp => _2;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:186:33: 186:37
    debug http_headers => (_1.0: hyper::HeaderMap); // in scope 0 at cita-jsonrpc/src/http_server.rs:161:13: 161:25
    let mut _0: std::result::Result<hyper::Response<hyper::Body>, hyper::Error>; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:186:39: 186:39
    let mut _3: isize;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:187:25: 187:33
    let _4: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/http_server.rs:187:28: 187:32
    let _5: service_error::ServiceError; // in scope 0 at cita-jsonrpc/src/http_server.rs:188:29: 188:32
    let mut _6: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/http_server.rs:188:40: 188:79
    let mut _7: service_error::ServiceError; // in scope 0 at cita-jsonrpc/src/http_server.rs:188:40: 188:43
    let mut _8: hyper::HeaderMap;        // in scope 0 at cita-jsonrpc/src/http_server.rs:188:58: 188:78
    let mut _9: &hyper::HeaderMap;       // in scope 0 at cita-jsonrpc/src/http_server.rs:188:58: 188:78
    let mut _10: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:188:78: 188:79
    scope 1 {
        debug resp => _4;                // in scope 1 at cita-jsonrpc/src/http_server.rs:187:28: 187:32
    }
    scope 2 {
        debug err => _5;                 // in scope 2 at cita-jsonrpc/src/http_server.rs:188:29: 188:32
    }

    bb0: {
        _10 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:186:45: 186:49
        _3 = discriminant(_2);           // scope 0 at cita-jsonrpc/src/http_server.rs:186:45: 186:49
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/http_server.rs:186:39: 186:49
    }

    bb1: {
        _5 = move ((_2 as Err).0: service_error::ServiceError); // scope 0 at cita-jsonrpc/src/http_server.rs:188:29: 188:32
        _10 = const true;                // scope 2 at cita-jsonrpc/src/http_server.rs:188:40: 188:43
        _7 = move _5;                    // scope 2 at cita-jsonrpc/src/http_server.rs:188:40: 188:43
        _9 = &(_1.0: hyper::HeaderMap);  // scope 2 at cita-jsonrpc/src/http_server.rs:188:58: 188:78
        _8 = <HeaderMap as Clone>::clone(move _9) -> [return: bb4, unwind: bb11]; // scope 2 at cita-jsonrpc/src/http_server.rs:188:58: 188:78
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:188:71: 188:76
                                         // + literal: Const { ty: for<'a> fn(&'a HeaderMap) -> HeaderMap {<HeaderMap as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/http_server.rs:186:45: 186:49
    }

    bb3: {
        _4 = move ((_2 as Ok).0: hyper::Response<hyper::Body>); // scope 0 at cita-jsonrpc/src/http_server.rs:187:28: 187:32
        _0 = Result::<hyper::Response<Body>, hyper::Error>::Ok(move _4); // scope 1 at cita-jsonrpc/src/http_server.rs:187:37: 187:45
        goto -> bb6;                     // scope 0 at cita-jsonrpc/src/http_server.rs:187:44: 187:45
    }

    bb4: {
        _10 = const false;               // scope 2 at cita-jsonrpc/src/http_server.rs:188:40: 188:79
        _6 = <ServiceError as IntoResponse>::into_response(move _7, move _8) -> [return: bb5, unwind: bb11]; // scope 2 at cita-jsonrpc/src/http_server.rs:188:40: 188:79
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:188:44: 188:57
                                         // + literal: Const { ty: fn(ServiceError, HeaderMap) -> hyper::Response<Body> {<ServiceError as IntoResponse>::into_response}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = const false;               // scope 2 at cita-jsonrpc/src/http_server.rs:188:78: 188:79
        _0 = Result::<hyper::Response<Body>, hyper::Error>::Ok(move _6); // scope 2 at cita-jsonrpc/src/http_server.rs:188:37: 188:80
        goto -> bb6;                     // scope 0 at cita-jsonrpc/src/http_server.rs:188:79: 188:80
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at cita-jsonrpc/src/http_server.rs:189:21: 189:22
    }

    bb7: {
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:189:22: 189:22
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at cita-jsonrpc/src/http_server.rs:189:21: 189:22
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/http_server.rs:186:27: 189:22
    }

    bb10 (cleanup): {
        drop(_7) -> bb8;                 // scope 2 at cita-jsonrpc/src/http_server.rs:188:78: 188:79
    }

    bb11 (cleanup): {
        switchInt(_10) -> [0: bb8, otherwise: bb10]; // scope 2 at cita-jsonrpc/src/http_server.rs:188:78: 188:79
    }
}

fn handle_preflighted(_1: HeaderMap) -> HeaderMap {
    debug headers => _1;                 // in scope 0 at cita-jsonrpc/src/http_server.rs:211:23: 211:34
    let mut _0: hyper::HeaderMap;        // return place in scope 0 at cita-jsonrpc/src/http_server.rs:211:48: 211:55
    let _2: hyper::header::HeaderName;   // in scope 0 at cita-jsonrpc/src/http_server.rs:214:9: 214:25
    let mut _6: std::boxed::Box<[hyper::Method]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _7: usize;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _8: usize;                   // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _9: *mut u8;                 // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _10: std::boxed::Box<[hyper::Method; 2]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _11: hyper::Method;          // in scope 0 at cita-jsonrpc/src/http_server.rs:217:30: 217:42
    let mut _12: hyper::Method;          // in scope 0 at cita-jsonrpc/src/http_server.rs:217:44: 217:59
    let mut _14: std::boxed::Box<[hyper::header::HeaderName]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _15: usize;                  // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _16: usize;                  // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _17: *mut u8;                // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _18: std::boxed::Box<[hyper::header::HeaderName; 5]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _19: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_server.rs:218:30: 218:36
    let mut _20: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_server.rs:218:38: 218:50
    let mut _21: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_server.rs:218:52: 218:68
    let mut _22: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_server.rs:218:70: 218:80
    let mut _23: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_server.rs:218:82: 218:88
    let _24: std::option::Option<hyper::header::HeaderValue>; // in scope 0 at cita-jsonrpc/src/http_server.rs:220:5: 220:45
    let mut _25: &mut hyper::HeaderMap;  // in scope 0 at cita-jsonrpc/src/http_server.rs:220:5: 220:45
    let mut _26: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_server.rs:220:20: 220:32
    let mut _27: hyper::header::HeaderValue; // in scope 0 at cita-jsonrpc/src/http_server.rs:220:34: 220:44
    let _28: std::option::Option<hyper::header::HeaderValue>; // in scope 0 at cita-jsonrpc/src/http_server.rs:221:5: 221:68
    let mut _29: &mut hyper::HeaderMap;  // in scope 0 at cita-jsonrpc/src/http_server.rs:221:5: 221:68
    let mut _30: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_server.rs:221:24: 221:52
    let mut _31: std::vec::Vec<hyper::Method>; // in scope 0 at cita-jsonrpc/src/http_server.rs:221:54: 221:67
    let _32: std::option::Option<hyper::header::HeaderValue>; // in scope 0 at cita-jsonrpc/src/http_server.rs:222:5: 222:68
    let mut _33: &mut hyper::HeaderMap;  // in scope 0 at cita-jsonrpc/src/http_server.rs:222:5: 222:68
    let mut _34: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_server.rs:222:24: 222:52
    let mut _35: std::vec::Vec<hyper::header::HeaderName>; // in scope 0 at cita-jsonrpc/src/http_server.rs:222:54: 222:67
    let _36: std::option::Option<hyper::header::HeaderValue>; // in scope 0 at cita-jsonrpc/src/http_server.rs:223:5: 223:55
    let mut _37: &mut hyper::HeaderMap;  // in scope 0 at cita-jsonrpc/src/http_server.rs:223:5: 223:55
    let mut _38: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_server.rs:223:20: 223:42
    let mut _39: hyper::header::HeaderValue; // in scope 0 at cita-jsonrpc/src/http_server.rs:223:44: 223:54
    let mut _40: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    let mut _41: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    let mut _42: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    let mut _43: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    let mut _44: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    let mut _45: *const [hyper::Method; 2]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _46: *const [hyper::header::HeaderName; 5]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    scope 1 {
        debug x_requested_with => _2;    // in scope 1 at cita-jsonrpc/src/http_server.rs:214:9: 214:25
        let _3: hyper::header::HeaderValue; // in scope 1 at cita-jsonrpc/src/http_server.rs:215:9: 215:19
        scope 2 {
            debug plain_text => _3;      // in scope 2 at cita-jsonrpc/src/http_server.rs:215:9: 215:19
            let _4: hyper::header::HeaderValue; // in scope 2 at cita-jsonrpc/src/http_server.rs:216:9: 216:19
            scope 3 {
                debug cors_cache => _4;  // in scope 3 at cita-jsonrpc/src/http_server.rs:216:9: 216:19
                let _5: std::vec::Vec<hyper::Method>; // in scope 3 at cita-jsonrpc/src/http_server.rs:217:9: 217:22
                scope 4 {
                    debug allow_methods => _5; // in scope 4 at cita-jsonrpc/src/http_server.rs:217:9: 217:22
                    let _13: std::vec::Vec<hyper::header::HeaderName>; // in scope 4 at cita-jsonrpc/src/http_server.rs:218:9: 218:22
                    scope 6 {
                        debug allow_headers => _13; // in scope 6 at cita-jsonrpc/src/http_server.rs:218:9: 218:22
                    }
                    scope 7 {
                    }
                }
                scope 5 {
                }
            }
        }
    }

    bb0: {
        _41 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:214:9: 214:25
        _44 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:214:9: 214:25
        _42 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:214:9: 214:25
        _40 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:214:9: 214:25
        _43 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:214:9: 214:25
        _2 = HeaderName::from_static(const _) -> [return: bb1, unwind: bb16]; // scope 0 at cita-jsonrpc/src/http_server.rs:214:28: 214:73
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:214:28: 214:51
                                         // + literal: Const { ty: fn(&'static str) -> HeaderName {HeaderName::from_static}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:214:52: 214:72
                                         // + literal: Const { ty: &str, val: Unevaluated(X_REQUESTED_WITH_STR, [], None) }
    }

    bb1: {
        _44 = const true;                // scope 1 at cita-jsonrpc/src/http_server.rs:215:9: 215:19
        _3 = HeaderValue::from_static(const _) -> [return: bb2, unwind: bb27]; // scope 1 at cita-jsonrpc/src/http_server.rs:215:22: 215:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:215:22: 215:46
                                         // + literal: Const { ty: fn(&'static str) -> HeaderValue {HeaderValue::from_static}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:215:47: 215:74
                                         // + literal: Const { ty: &str, val: Unevaluated(CONTENT_TYPE_PLAIN_TEXT_STR, [], None) }
    }

    bb2: {
        _43 = const true;                // scope 2 at cita-jsonrpc/src/http_server.rs:216:9: 216:19
        _4 = <HeaderValue as From<u32>>::from(const _) -> [return: bb3, unwind: bb25]; // scope 2 at cita-jsonrpc/src/http_server.rs:216:22: 216:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:216:22: 216:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> HeaderValue {<HeaderValue as From<u32>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        _42 = const true;                // scope 3 at cita-jsonrpc/src/http_server.rs:217:9: 217:22
        _7 = const 48_usize;             // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _8 = const 8_usize;              // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> [return: bb4, unwind: bb23]; // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = ShallowInitBox(move _9, [hyper::Method; 2]); // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _11 = const _;                   // scope 3 at cita-jsonrpc/src/http_server.rs:217:30: 217:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:217:30: 217:42
                                         // + literal: Const { ty: Method, val: Unevaluated(Method::POST, [], None) }
        _12 = const _;                   // scope 3 at cita-jsonrpc/src/http_server.rs:217:44: 217:59
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:217:44: 217:59
                                         // + literal: Const { ty: Method, val: Unevaluated(Method::OPTIONS, [], None) }
        _45 = (((_10.0: std::ptr::Unique<[hyper::Method; 2]>).0: std::ptr::NonNull<[hyper::Method; 2]>).0: *const [hyper::Method; 2]); // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        (*_45) = [move _11, move _12];   // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        _6 = move _10 as std::boxed::Box<[hyper::Method]> (Pointer(Unsize)); // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _5 = slice::<impl [Method]>::into_vec::<std::alloc::Global>(move _6) -> [return: bb5, unwind: bb23]; // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[Method]>) -> Vec<Method> {slice::<impl [Method]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb5: {
        _41 = const true;                // scope 3 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:55:9: 55:10
        _15 = const 200_usize;           // scope 7 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _16 = const 8_usize;             // scope 7 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _17 = alloc::alloc::exchange_malloc(move _15, move _16) -> [return: bb6, unwind: bb21]; // scope 7 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = ShallowInitBox(move _17, [hyper::header::HeaderName; 5]); // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _19 = const _;                   // scope 4 at cita-jsonrpc/src/http_server.rs:218:30: 218:36
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:218:30: 218:36
                                         // + literal: Const { ty: HeaderName, val: Unevaluated(ORIGIN, [], None) }
        _20 = const _;                   // scope 4 at cita-jsonrpc/src/http_server.rs:218:38: 218:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:218:38: 218:50
                                         // + literal: Const { ty: HeaderName, val: Unevaluated(CONTENT_TYPE, [], None) }
        _44 = const false;               // scope 4 at cita-jsonrpc/src/http_server.rs:218:52: 218:68
        _21 = move _2;                   // scope 4 at cita-jsonrpc/src/http_server.rs:218:52: 218:68
        _22 = const _;                   // scope 4 at cita-jsonrpc/src/http_server.rs:218:70: 218:80
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:218:70: 218:80
                                         // + literal: Const { ty: HeaderName, val: Unevaluated(USER_AGENT, [], None) }
        _23 = const _;                   // scope 4 at cita-jsonrpc/src/http_server.rs:218:82: 218:88
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:218:82: 218:88
                                         // + literal: Const { ty: HeaderName, val: Unevaluated(ACCEPT, [], None) }
        _46 = (((_18.0: std::ptr::Unique<[hyper::header::HeaderName; 5]>).0: std::ptr::NonNull<[hyper::header::HeaderName; 5]>).0: *const [hyper::header::HeaderName; 5]); // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        (*_46) = [move _19, move _20, move _21, move _22, move _23]; // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        _14 = move _18 as std::boxed::Box<[hyper::header::HeaderName]> (Pointer(Unsize)); // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _13 = slice::<impl [HeaderName]>::into_vec::<std::alloc::Global>(move _14) -> [return: bb7, unwind: bb21]; // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<[HeaderName]>) -> Vec<HeaderName> {slice::<impl [HeaderName]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb7: {
        _40 = const true;                // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:55:9: 55:10
        _25 = &mut _1;                   // scope 6 at cita-jsonrpc/src/http_server.rs:220:5: 220:45
        _26 = const _;                   // scope 6 at cita-jsonrpc/src/http_server.rs:220:20: 220:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:220:20: 220:32
                                         // + literal: Const { ty: HeaderName, val: Unevaluated(CONTENT_TYPE, [], None) }
        _43 = const false;               // scope 6 at cita-jsonrpc/src/http_server.rs:220:34: 220:44
        _27 = move _3;                   // scope 6 at cita-jsonrpc/src/http_server.rs:220:34: 220:44
        _24 = HeaderMap::insert::<HeaderName>(move _25, move _26, move _27) -> [return: bb8, unwind: bb19]; // scope 6 at cita-jsonrpc/src/http_server.rs:220:5: 220:45
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:220:13: 220:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut HeaderMap, HeaderName, HeaderValue) -> std::option::Option<HeaderValue> {HeaderMap::insert::<HeaderName>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_24) -> [return: bb9, unwind: bb19]; // scope 6 at cita-jsonrpc/src/http_server.rs:220:45: 220:46
    }

    bb9: {
        _29 = &mut _1;                   // scope 6 at cita-jsonrpc/src/http_server.rs:221:5: 221:68
        _30 = const _;                   // scope 6 at cita-jsonrpc/src/http_server.rs:221:24: 221:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:221:24: 221:52
                                         // + literal: Const { ty: HeaderName, val: Unevaluated(ACCESS_CONTROL_ALLOW_METHODS, [], None) }
        _41 = const false;               // scope 6 at cita-jsonrpc/src/http_server.rs:221:54: 221:67
        _31 = move _5;                   // scope 6 at cita-jsonrpc/src/http_server.rs:221:54: 221:67
        _28 = <HeaderMap as HeaderMapExt<Method>>::insert_vec(move _29, move _30, move _31) -> [return: bb10, unwind: bb19]; // scope 6 at cita-jsonrpc/src/http_server.rs:221:5: 221:68
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:221:13: 221:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut HeaderMap, HeaderName, Vec<Method>) -> std::option::Option<HeaderValue> {<HeaderMap as HeaderMapExt<Method>>::insert_vec}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_28) -> [return: bb11, unwind: bb19]; // scope 6 at cita-jsonrpc/src/http_server.rs:221:68: 221:69
    }

    bb11: {
        _33 = &mut _1;                   // scope 6 at cita-jsonrpc/src/http_server.rs:222:5: 222:68
        _34 = const _;                   // scope 6 at cita-jsonrpc/src/http_server.rs:222:24: 222:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:222:24: 222:52
                                         // + literal: Const { ty: HeaderName, val: Unevaluated(ACCESS_CONTROL_ALLOW_HEADERS, [], None) }
        _40 = const false;               // scope 6 at cita-jsonrpc/src/http_server.rs:222:54: 222:67
        _35 = move _13;                  // scope 6 at cita-jsonrpc/src/http_server.rs:222:54: 222:67
        _32 = <HeaderMap as HeaderMapExt<HeaderName>>::insert_vec(move _33, move _34, move _35) -> [return: bb12, unwind: bb19]; // scope 6 at cita-jsonrpc/src/http_server.rs:222:5: 222:68
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:222:13: 222:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut HeaderMap, HeaderName, Vec<HeaderName>) -> std::option::Option<HeaderValue> {<HeaderMap as HeaderMapExt<HeaderName>>::insert_vec}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_32) -> [return: bb13, unwind: bb19]; // scope 6 at cita-jsonrpc/src/http_server.rs:222:68: 222:69
    }

    bb13: {
        _37 = &mut _1;                   // scope 6 at cita-jsonrpc/src/http_server.rs:223:5: 223:55
        _38 = const _;                   // scope 6 at cita-jsonrpc/src/http_server.rs:223:20: 223:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:223:20: 223:42
                                         // + literal: Const { ty: HeaderName, val: Unevaluated(ACCESS_CONTROL_MAX_AGE, [], None) }
        _42 = const false;               // scope 6 at cita-jsonrpc/src/http_server.rs:223:44: 223:54
        _39 = move _4;                   // scope 6 at cita-jsonrpc/src/http_server.rs:223:44: 223:54
        _36 = HeaderMap::insert::<HeaderName>(move _37, move _38, move _39) -> [return: bb14, unwind: bb19]; // scope 6 at cita-jsonrpc/src/http_server.rs:223:5: 223:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:223:13: 223:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut HeaderMap, HeaderName, HeaderValue) -> std::option::Option<HeaderValue> {HeaderMap::insert::<HeaderName>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_36) -> [return: bb15, unwind: bb19]; // scope 6 at cita-jsonrpc/src/http_server.rs:223:55: 223:56
    }

    bb15: {
        _0 = move _1;                    // scope 6 at cita-jsonrpc/src/http_server.rs:225:5: 225:12
        _40 = const false;               // scope 4 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
        _41 = const false;               // scope 3 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
        _42 = const false;               // scope 2 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
        _43 = const false;               // scope 1 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
        _44 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:226:2: 226:2
    }

    bb16 (cleanup): {
        drop(_1) -> bb17;                // scope 0 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    }

    bb17 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/http_server.rs:211:1: 226:2
    }

    bb18 (cleanup): {
        drop(_13) -> bb21;               // scope 4 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    }

    bb19 (cleanup): {
        switchInt(_40) -> [0: bb21, otherwise: bb18]; // scope 4 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    }

    bb20 (cleanup): {
        drop(_5) -> bb23;                // scope 3 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    }

    bb21 (cleanup): {
        switchInt(_41) -> [0: bb23, otherwise: bb20]; // scope 3 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    }

    bb22 (cleanup): {
        drop(_4) -> bb25;                // scope 2 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    }

    bb23 (cleanup): {
        switchInt(_42) -> [0: bb25, otherwise: bb22]; // scope 2 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    }

    bb24 (cleanup): {
        drop(_3) -> bb27;                // scope 1 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    }

    bb25 (cleanup): {
        switchInt(_43) -> [0: bb27, otherwise: bb24]; // scope 1 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    }

    bb26 (cleanup): {
        drop(_2) -> bb16;                // scope 0 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    }

    bb27 (cleanup): {
        switchInt(_44) -> [0: bb16, otherwise: bb26]; // scope 0 at cita-jsonrpc/src/http_server.rs:226:1: 226:2
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:234:1: 234:12>::create(_1: &std::net::SocketAddr, _2: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, _3: Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>, _4: u64, _5: &std::option::Option<std::string::String>) -> Result<http_server::Server, Box<dyn std::error::Error>> {
    debug addr => _1;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:236:9: 236:13
    debug tx => _2;                      // in scope 0 at cita-jsonrpc/src/http_server.rs:237:9: 237:11
    debug responses => _3;               // in scope 0 at cita-jsonrpc/src/http_server.rs:238:9: 238:18
    debug timeout => _4;                 // in scope 0 at cita-jsonrpc/src/http_server.rs:239:9: 239:16
    debug allow_origin => _5;            // in scope 0 at cita-jsonrpc/src/http_server.rs:240:9: 240:21
    let mut _0: std::result::Result<http_server::Server, std::boxed::Box<dyn std::error::Error>>; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:241:10: 241:50
    let _6: std::net::TcpListener;       // in scope 0 at cita-jsonrpc/src/http_server.rs:242:13: 242:21
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::net::TcpListener>; // in scope 0 at cita-jsonrpc/src/http_server.rs:242:24: 242:57
    let mut _8: std::result::Result<std::net::TcpListener, std::io::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:242:24: 242:56
    let _9: &&std::net::SocketAddr;      // in scope 0 at cita-jsonrpc/src/http_server.rs:242:50: 242:55
    let mut _10: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:242:56: 242:57
    let _11: std::result::Result<std::convert::Infallible, std::io::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:242:56: 242:57
    let _12: std::net::TcpListener;      // in scope 0 at cita-jsonrpc/src/http_server.rs:242:24: 242:57
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::net::SocketAddr>; // in scope 0 at cita-jsonrpc/src/http_server.rs:243:20: 243:42
    let mut _15: std::result::Result<std::net::SocketAddr, std::io::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:243:20: 243:41
    let mut _16: &std::net::TcpListener; // in scope 0 at cita-jsonrpc/src/http_server.rs:243:20: 243:41
    let mut _17: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:243:41: 243:42
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, hyper::header::InvalidHeaderValue>, hyper::header::HeaderValue>; // in scope 0 at cita-jsonrpc/src/http_server.rs:246:28: 246:62
    let mut _24: std::result::Result<hyper::header::HeaderValue, hyper::header::InvalidHeaderValue>; // in scope 0 at cita-jsonrpc/src/http_server.rs:246:28: 246:61
    let mut _25: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:246:61: 246:62
    let _28: std::option::Option<hyper::header::HeaderValue>; // in scope 0 at cita-jsonrpc/src/http_server.rs:249:9: 249:48
    let mut _29: &mut hyper::HeaderMap;  // in scope 0 at cita-jsonrpc/src/http_server.rs:249:9: 249:48
    let mut _30: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_server.rs:249:29: 249:41
    let mut _31: hyper::header::HeaderValue; // in scope 0 at cita-jsonrpc/src/http_server.rs:249:43: 249:47
    let _32: std::option::Option<hyper::header::HeaderValue>; // in scope 0 at cita-jsonrpc/src/http_server.rs:250:9: 250:71
    let mut _33: &mut hyper::HeaderMap;  // in scope 0 at cita-jsonrpc/src/http_server.rs:250:9: 250:71
    let mut _34: hyper::header::HeaderName; // in scope 0 at cita-jsonrpc/src/http_server.rs:250:29: 250:56
    let mut _35: hyper::header::HeaderValue; // in scope 0 at cita-jsonrpc/src/http_server.rs:250:58: 250:70
    let mut _37: std::sync::Arc<http_server::Inner>; // in scope 0 at cita-jsonrpc/src/http_server.rs:253:20: 258:15
    let mut _38: http_server::Inner;     // in scope 0 at cita-jsonrpc/src/http_server.rs:253:29: 258:14
    let mut _39: lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:254:21: 254:35
    let mut _40: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/http_server.rs:254:32: 254:34
    let mut _41: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/http_server.rs:255:17: 255:26
    let mut _42: std::time::Duration;    // in scope 0 at cita-jsonrpc/src/http_server.rs:256:17: 256:24
    let mut _43: hyper::HeaderMap;       // in scope 0 at cita-jsonrpc/src/http_server.rs:257:17: 257:29
    let mut _44: std::result::Result<http_server::Server, hyper::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:262:9: 264:51
    let mut _45: std::result::Result<hyper::Server<hyper::server::conn::AddrIncoming, http_server::JsonrpcMakeService>, hyper::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:262:9: 263:82
    let mut _46: std::result::Result<hyper::server::Builder<hyper::server::conn::AddrIncoming>, hyper::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:262:9: 262:42
    let mut _47: std::net::TcpListener;  // in scope 0 at cita-jsonrpc/src/http_server.rs:262:33: 262:41
    let mut _48: [closure@cita-jsonrpc/src/http_server.rs:263:18: 263:27]; // in scope 0 at cita-jsonrpc/src/http_server.rs:263:18: 263:81
    let mut _49: [closure@cita-jsonrpc/src/http_server.rs:264:18: 264:27]; // in scope 0 at cita-jsonrpc/src/http_server.rs:264:18: 264:50
    let mut _50: &std::net::SocketAddr;  // in scope 0 at cita-jsonrpc/src/http_server.rs:264:18: 264:50
    let mut _51: &std::net::SocketAddr;  // in scope 0 at cita-jsonrpc/src/http_server.rs:242:50: 242:55
    let mut _52: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    let mut _53: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    let mut _54: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    let mut _55: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    let mut _56: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    let mut _57: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    let mut _58: bool;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    scope 1 {
        debug listener => _6;            // in scope 1 at cita-jsonrpc/src/http_server.rs:242:13: 242:21
        let _13: std::net::SocketAddr;   // in scope 1 at cita-jsonrpc/src/http_server.rs:243:13: 243:17
        let _18: std::result::Result<std::convert::Infallible, std::io::Error>; // in scope 1 at cita-jsonrpc/src/http_server.rs:243:41: 243:42
        let _19: std::net::SocketAddr;   // in scope 1 at cita-jsonrpc/src/http_server.rs:243:20: 243:42
        scope 6 {
            debug addr => _13;           // in scope 6 at cita-jsonrpc/src/http_server.rs:243:13: 243:17
            let _20: std::time::Duration; // in scope 6 at cita-jsonrpc/src/http_server.rs:244:13: 244:20
            scope 11 {
                debug timeout => _20;    // in scope 11 at cita-jsonrpc/src/http_server.rs:244:13: 244:20
                let _21: hyper::header::HeaderValue; // in scope 11 at cita-jsonrpc/src/http_server.rs:245:13: 245:17
                scope 12 {
                    debug json => _21;   // in scope 12 at cita-jsonrpc/src/http_server.rs:245:13: 245:17
                    let _22: hyper::header::HeaderValue; // in scope 12 at cita-jsonrpc/src/http_server.rs:246:13: 246:25
                    let _26: hyper::header::HeaderValue; // in scope 12 at cita-jsonrpc/src/http_server.rs:246:28: 246:62
                    scope 13 {
                        debug allow_origin => _22; // in scope 13 at cita-jsonrpc/src/http_server.rs:246:13: 246:25
                        let mut _27: hyper::HeaderMap; // in scope 13 at cita-jsonrpc/src/http_server.rs:248:13: 248:29
                        scope 18 {
                            debug http_headers => _27; // in scope 18 at cita-jsonrpc/src/http_server.rs:248:13: 248:29
                            let _36: http_server::JsonrpcMakeService; // in scope 18 at cita-jsonrpc/src/http_server.rs:252:13: 252:29
                            scope 19 {
                                debug make_jsonrpc_svc => _36; // in scope 19 at cita-jsonrpc/src/http_server.rs:252:13: 252:29
                            }
                        }
                    }
                    scope 14 {
                        debug residual => const Result::<Infallible, InvalidHeaderValue>::Err(InvalidHeaderValue {{ _priv: () }}); // in scope 14 at cita-jsonrpc/src/http_server.rs:246:61: 246:62
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _26; // in scope 16 at cita-jsonrpc/src/http_server.rs:246:28: 246:62
                        scope 17 {
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _18;       // in scope 7 at cita-jsonrpc/src/http_server.rs:243:41: 243:42
            scope 8 {
            }
        }
        scope 9 {
            debug val => _19;            // in scope 9 at cita-jsonrpc/src/http_server.rs:243:20: 243:42
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;           // in scope 2 at cita-jsonrpc/src/http_server.rs:242:56: 242:57
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;                // in scope 4 at cita-jsonrpc/src/http_server.rs:242:24: 242:57
        scope 5 {
        }
    }

    bb0: {
        _56 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:242:13: 242:21
        _53 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:242:13: 242:21
        _57 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:242:13: 242:21
        _58 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:242:13: 242:21
        _54 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:242:13: 242:21
        _52 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:242:13: 242:21
        _55 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:242:13: 242:21
        _58 = const true;                // scope 0 at cita-jsonrpc/src/http_server.rs:242:13: 242:21
        _57 = const true;                // scope 0 at cita-jsonrpc/src/http_server.rs:242:13: 242:21
        _9 = &_1;                        // scope 0 at cita-jsonrpc/src/http_server.rs:242:50: 242:55
        _51 = deref_copy (*_9);          // scope 0 at cita-jsonrpc/src/http_server.rs:242:50: 242:55
        _8 = listener_from_socket_addr(_51) -> [return: bb1, unwind: bb47]; // scope 0 at cita-jsonrpc/src/http_server.rs:242:24: 242:56
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:242:24: 242:49
                                         // + literal: Const { ty: for<'a> fn(&'a std::net::SocketAddr) -> Result<std::net::TcpListener, std::io::Error> {listener_from_socket_addr}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = <Result<std::net::TcpListener, std::io::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb47]; // scope 0 at cita-jsonrpc/src/http_server.rs:242:24: 242:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:242:24: 242:57
                                         // + literal: Const { ty: fn(Result<std::net::TcpListener, std::io::Error>) -> ControlFlow<<Result<std::net::TcpListener, std::io::Error> as Try>::Residual, <Result<std::net::TcpListener, std::io::Error> as Try>::Output> {<Result<std::net::TcpListener, std::io::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = discriminant(_7);          // scope 0 at cita-jsonrpc/src/http_server.rs:242:24: 242:57
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at cita-jsonrpc/src/http_server.rs:242:24: 242:57
    }

    bb3: {
        _12 = move ((_7 as Continue).0: std::net::TcpListener); // scope 0 at cita-jsonrpc/src/http_server.rs:242:24: 242:57
        _56 = const true;                // scope 5 at cita-jsonrpc/src/http_server.rs:242:24: 242:57
        _6 = move _12;                   // scope 5 at cita-jsonrpc/src/http_server.rs:242:24: 242:57
        _16 = &_6;                       // scope 1 at cita-jsonrpc/src/http_server.rs:243:20: 243:41
        _15 = std::net::TcpListener::local_addr(move _16) -> [return: bb6, unwind: bb45]; // scope 1 at cita-jsonrpc/src/http_server.rs:243:20: 243:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:243:29: 243:39
                                         // + literal: Const { ty: for<'a> fn(&'a std::net::TcpListener) -> Result<std::net::SocketAddr, std::io::Error> {std::net::TcpListener::local_addr}, val: Value(<ZST>) }
    }

    bb4: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/http_server.rs:242:24: 242:57
    }

    bb5: {
        _11 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>); // scope 0 at cita-jsonrpc/src/http_server.rs:242:56: 242:57
        _0 = <Result<http_server::Server, Box<dyn std::error::Error>> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _11) -> [return: bb50, unwind: bb47]; // scope 3 at cita-jsonrpc/src/http_server.rs:242:24: 242:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:242:56: 242:57
                                         // + literal: Const { ty: fn(Result<Infallible, std::io::Error>) -> Result<http_server::Server, Box<dyn std::error::Error>> {<Result<http_server::Server, Box<dyn std::error::Error>> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = <Result<std::net::SocketAddr, std::io::Error> as Try>::branch(move _15) -> [return: bb7, unwind: bb45]; // scope 1 at cita-jsonrpc/src/http_server.rs:243:20: 243:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:243:20: 243:42
                                         // + literal: Const { ty: fn(Result<std::net::SocketAddr, std::io::Error>) -> ControlFlow<<Result<std::net::SocketAddr, std::io::Error> as Try>::Residual, <Result<std::net::SocketAddr, std::io::Error> as Try>::Output> {<Result<std::net::SocketAddr, std::io::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = discriminant(_14);         // scope 1 at cita-jsonrpc/src/http_server.rs:243:20: 243:42
        switchInt(move _17) -> [0: bb8, 1: bb10, otherwise: bb9]; // scope 1 at cita-jsonrpc/src/http_server.rs:243:20: 243:42
    }

    bb8: {
        _19 = ((_14 as Continue).0: std::net::SocketAddr); // scope 1 at cita-jsonrpc/src/http_server.rs:243:20: 243:42
        _13 = _19;                       // scope 10 at cita-jsonrpc/src/http_server.rs:243:20: 243:42
        _20 = Duration::from_secs(_4) -> [return: bb11, unwind: bb45]; // scope 6 at cita-jsonrpc/src/http_server.rs:244:23: 244:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:244:23: 244:42
                                         // + literal: Const { ty: fn(u64) -> Duration {Duration::from_secs}, val: Value(<ZST>) }
    }

    bb9: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/http_server.rs:243:20: 243:42
    }

    bb10: {
        _18 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>); // scope 1 at cita-jsonrpc/src/http_server.rs:243:41: 243:42
        _0 = <Result<http_server::Server, Box<dyn std::error::Error>> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _18) -> [return: bb51, unwind: bb45]; // scope 8 at cita-jsonrpc/src/http_server.rs:243:20: 243:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:243:41: 243:42
                                         // + literal: Const { ty: fn(Result<Infallible, std::io::Error>) -> Result<http_server::Server, Box<dyn std::error::Error>> {<Result<http_server::Server, Box<dyn std::error::Error>> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = HeaderValue::from_static(const _) -> [return: bb12, unwind: bb45]; // scope 11 at cita-jsonrpc/src/http_server.rs:245:20: 245:67
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:245:20: 245:44
                                         // + literal: Const { ty: fn(&'static str) -> HeaderValue {HeaderValue::from_static}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:245:45: 245:66
                                         // + literal: Const { ty: &str, val: Unevaluated(CONTENT_TYPE_JSON_STR, [], None) }
    }

    bb12: {
        _55 = const true;                // scope 12 at cita-jsonrpc/src/http_server.rs:246:13: 246:25
        _24 = Origin::from_config(_5) -> [return: bb13, unwind: bb43]; // scope 12 at cita-jsonrpc/src/http_server.rs:246:28: 246:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:246:28: 246:47
                                         // + literal: Const { ty: for<'a> fn(&'a std::option::Option<std::string::String>) -> Result<HeaderValue, InvalidHeaderValue> {Origin::from_config}, val: Value(<ZST>) }
    }

    bb13: {
        _23 = <Result<HeaderValue, InvalidHeaderValue> as Try>::branch(move _24) -> [return: bb14, unwind: bb43]; // scope 12 at cita-jsonrpc/src/http_server.rs:246:28: 246:62
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:246:28: 246:62
                                         // + literal: Const { ty: fn(Result<HeaderValue, InvalidHeaderValue>) -> ControlFlow<<Result<HeaderValue, InvalidHeaderValue> as Try>::Residual, <Result<HeaderValue, InvalidHeaderValue> as Try>::Output> {<Result<HeaderValue, InvalidHeaderValue> as Try>::branch}, val: Value(<ZST>) }
    }

    bb14: {
        _25 = discriminant(_23);         // scope 12 at cita-jsonrpc/src/http_server.rs:246:28: 246:62
        switchInt(move _25) -> [0: bb15, 1: bb17, otherwise: bb16]; // scope 12 at cita-jsonrpc/src/http_server.rs:246:28: 246:62
    }

    bb15: {
        _26 = move ((_23 as Continue).0: hyper::header::HeaderValue); // scope 12 at cita-jsonrpc/src/http_server.rs:246:28: 246:62
        _54 = const true;                // scope 17 at cita-jsonrpc/src/http_server.rs:246:28: 246:62
        _22 = move _26;                  // scope 17 at cita-jsonrpc/src/http_server.rs:246:28: 246:62
        _27 = HeaderMap::new() -> [return: bb19, unwind: bb41]; // scope 13 at cita-jsonrpc/src/http_server.rs:248:32: 248:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:248:32: 248:44
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> HeaderMap {HeaderMap::new}, val: Value(<ZST>) }
    }

    bb16: {
        unreachable;                     // scope 12 at cita-jsonrpc/src/http_server.rs:246:28: 246:62
    }

    bb17: {
        _0 = <Result<http_server::Server, Box<dyn std::error::Error>> as FromResidual<Result<Infallible, InvalidHeaderValue>>>::from_residual(const Result::<Infallible, InvalidHeaderValue>::Err(InvalidHeaderValue {{ _priv: () }})) -> [return: bb18, unwind: bb43]; // scope 15 at cita-jsonrpc/src/http_server.rs:246:28: 246:62
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:246:61: 246:62
                                         // + literal: Const { ty: fn(Result<Infallible, InvalidHeaderValue>) -> Result<http_server::Server, Box<dyn std::error::Error>> {<Result<http_server::Server, Box<dyn std::error::Error>> as FromResidual<Result<Infallible, InvalidHeaderValue>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, InvalidHeaderValue>, val: Value(<ZST>) }
    }

    bb18: {
        _54 = const false;               // scope 12 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
        drop(_21) -> [return: bb30, unwind: bb45]; // scope 11 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb19: {
        _53 = const true;                // scope 18 at cita-jsonrpc/src/http_server.rs:249:9: 249:48
        _29 = &mut _27;                  // scope 18 at cita-jsonrpc/src/http_server.rs:249:9: 249:48
        _30 = const _;                   // scope 18 at cita-jsonrpc/src/http_server.rs:249:29: 249:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:249:29: 249:41
                                         // + literal: Const { ty: HeaderName, val: Unevaluated(CONTENT_TYPE, [], None) }
        _55 = const false;               // scope 18 at cita-jsonrpc/src/http_server.rs:249:43: 249:47
        _31 = move _21;                  // scope 18 at cita-jsonrpc/src/http_server.rs:249:43: 249:47
        _28 = HeaderMap::insert::<HeaderName>(move _29, move _30, move _31) -> [return: bb20, unwind: bb39]; // scope 18 at cita-jsonrpc/src/http_server.rs:249:9: 249:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:249:22: 249:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut HeaderMap, HeaderName, HeaderValue) -> std::option::Option<HeaderValue> {HeaderMap::insert::<HeaderName>}, val: Value(<ZST>) }
    }

    bb20: {
        drop(_28) -> [return: bb21, unwind: bb39]; // scope 18 at cita-jsonrpc/src/http_server.rs:249:48: 249:49
    }

    bb21: {
        _33 = &mut _27;                  // scope 18 at cita-jsonrpc/src/http_server.rs:250:9: 250:71
        _34 = const _;                   // scope 18 at cita-jsonrpc/src/http_server.rs:250:29: 250:56
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:250:29: 250:56
                                         // + literal: Const { ty: HeaderName, val: Unevaluated(ACCESS_CONTROL_ALLOW_ORIGIN, [], None) }
        _54 = const false;               // scope 18 at cita-jsonrpc/src/http_server.rs:250:58: 250:70
        _35 = move _22;                  // scope 18 at cita-jsonrpc/src/http_server.rs:250:58: 250:70
        _32 = HeaderMap::insert::<HeaderName>(move _33, move _34, move _35) -> [return: bb22, unwind: bb39]; // scope 18 at cita-jsonrpc/src/http_server.rs:250:9: 250:71
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:250:22: 250:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut HeaderMap, HeaderName, HeaderValue) -> std::option::Option<HeaderValue> {HeaderMap::insert::<HeaderName>}, val: Value(<ZST>) }
    }

    bb22: {
        drop(_32) -> [return: bb23, unwind: bb39]; // scope 18 at cita-jsonrpc/src/http_server.rs:250:71: 250:72
    }

    bb23: {
        _58 = const false;               // scope 18 at cita-jsonrpc/src/http_server.rs:254:32: 254:34
        _40 = move _2;                   // scope 18 at cita-jsonrpc/src/http_server.rs:254:32: 254:34
        _39 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>>::new(move _40) -> [return: bb24, unwind: bb39]; // scope 18 at cita-jsonrpc/src/http_server.rs:254:21: 254:35
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:254:21: 254:31
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>) -> lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>>::new}, val: Value(<ZST>) }
    }

    bb24: {
        _57 = const false;               // scope 18 at cita-jsonrpc/src/http_server.rs:255:17: 255:26
        _41 = move _3;                   // scope 18 at cita-jsonrpc/src/http_server.rs:255:17: 255:26
        _42 = _20;                       // scope 18 at cita-jsonrpc/src/http_server.rs:256:17: 256:24
        _53 = const false;               // scope 18 at cita-jsonrpc/src/http_server.rs:257:17: 257:29
        _43 = move _27;                  // scope 18 at cita-jsonrpc/src/http_server.rs:257:17: 257:29
        _38 = Inner { tx: move _39, responses: move _41, timeout: move _42, http_headers: move _43 }; // scope 18 at cita-jsonrpc/src/http_server.rs:253:29: 258:14
        _37 = Arc::<Inner>::new(move _38) -> [return: bb25, unwind: bb39]; // scope 18 at cita-jsonrpc/src/http_server.rs:253:20: 258:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:253:20: 253:28
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Inner) -> Arc<Inner> {Arc::<Inner>::new}, val: Value(<ZST>) }
    }

    bb25: {
        _52 = const true;                // scope 18 at cita-jsonrpc/src/http_server.rs:252:32: 259:10
        _36 = JsonrpcMakeService { inner: move _37 }; // scope 18 at cita-jsonrpc/src/http_server.rs:252:32: 259:10
        _56 = const false;               // scope 19 at cita-jsonrpc/src/http_server.rs:262:33: 262:41
        _47 = move _6;                   // scope 19 at cita-jsonrpc/src/http_server.rs:262:33: 262:41
        _46 = hyper::Server::<AddrIncoming, ()>::from_tcp(move _47) -> [return: bb26, unwind: bb37]; // scope 19 at cita-jsonrpc/src/http_server.rs:262:9: 262:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:262:9: 262:32
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(std::net::TcpListener) -> Result<hyper::server::Builder<AddrIncoming>, hyper::Error> {hyper::Server::<AddrIncoming, ()>::from_tcp}, val: Value(<ZST>) }
    }

    bb26: {
        _52 = const false;               // scope 19 at cita-jsonrpc/src/http_server.rs:263:18: 263:81
        _48 = [closure@cita-jsonrpc/src/http_server.rs:263:18: 263:27] { make_jsonrpc_svc: move _36 }; // scope 19 at cita-jsonrpc/src/http_server.rs:263:18: 263:81
                                         // closure
                                         // + def_id: DefId(0:234 ~ cita_jsonrpc[a6db]::http_server::{impl#5}::create::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((hyper::server::Builder<hyper::server::conn::AddrIncoming>,)) -> hyper::Server<hyper::server::conn::AddrIncoming, http_server::JsonrpcMakeService>,
                                         //     (http_server::JsonrpcMakeService,),
                                         // ]
        _45 = Result::<hyper::server::Builder<AddrIncoming>, hyper::Error>::map::<hyper::Server<AddrIncoming, JsonrpcMakeService>, [closure@cita-jsonrpc/src/http_server.rs:263:18: 263:27]>(move _46, move _48) -> [return: bb27, unwind: bb37]; // scope 19 at cita-jsonrpc/src/http_server.rs:262:9: 263:82
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:263:14: 263:17
                                         // + literal: Const { ty: fn(Result<hyper::server::Builder<AddrIncoming>, hyper::Error>, [closure@cita-jsonrpc/src/http_server.rs:263:18: 263:27]) -> Result<hyper::Server<AddrIncoming, JsonrpcMakeService>, hyper::Error> {Result::<hyper::server::Builder<AddrIncoming>, hyper::Error>::map::<hyper::Server<AddrIncoming, JsonrpcMakeService>, [closure@cita-jsonrpc/src/http_server.rs:263:18: 263:27]>}, val: Value(<ZST>) }
    }

    bb27: {
        _50 = &_13;                      // scope 19 at cita-jsonrpc/src/http_server.rs:264:18: 264:50
        _49 = [closure@cita-jsonrpc/src/http_server.rs:264:18: 264:27] { addr: move _50 }; // scope 19 at cita-jsonrpc/src/http_server.rs:264:18: 264:50
                                         // closure
                                         // + def_id: DefId(0:235 ~ cita_jsonrpc[a6db]::http_server::{impl#5}::create::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((hyper::Server<hyper::server::conn::AddrIncoming, http_server::JsonrpcMakeService>,)) -> http_server::Server,
                                         //     (&std::net::SocketAddr,),
                                         // ]
        _44 = Result::<hyper::Server<AddrIncoming, JsonrpcMakeService>, hyper::Error>::map::<http_server::Server, [closure@cita-jsonrpc/src/http_server.rs:264:18: 264:27]>(move _45, move _49) -> [return: bb28, unwind: bb37]; // scope 19 at cita-jsonrpc/src/http_server.rs:262:9: 264:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:264:14: 264:17
                                         // + literal: Const { ty: fn(Result<hyper::Server<AddrIncoming, JsonrpcMakeService>, hyper::Error>, [closure@cita-jsonrpc/src/http_server.rs:264:18: 264:27]) -> Result<http_server::Server, hyper::Error> {Result::<hyper::Server<AddrIncoming, JsonrpcMakeService>, hyper::Error>::map::<http_server::Server, [closure@cita-jsonrpc/src/http_server.rs:264:18: 264:27]>}, val: Value(<ZST>) }
    }

    bb28: {
        _0 = Result::<http_server::Server, hyper::Error>::map_err::<Box<dyn std::error::Error>, fn(hyper::Error) -> Box<dyn std::error::Error> {<Box<dyn std::error::Error> as From<hyper::Error>>::from}>(move _44, <Box<dyn std::error::Error> as From<hyper::Error>>::from) -> [return: bb29, unwind: bb37]; // scope 19 at cita-jsonrpc/src/http_server.rs:262:9: 265:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:265:14: 265:21
                                         // + literal: Const { ty: fn(Result<http_server::Server, hyper::Error>, fn(hyper::Error) -> Box<dyn std::error::Error> {<Box<dyn std::error::Error> as From<hyper::Error>>::from}) -> Result<http_server::Server, Box<dyn std::error::Error>> {Result::<http_server::Server, hyper::Error>::map_err::<Box<dyn std::error::Error>, fn(hyper::Error) -> Box<dyn std::error::Error> {<Box<dyn std::error::Error> as From<hyper::Error>>::from}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:265:22: 265:31
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(hyper::Error) -> Box<dyn std::error::Error> {<Box<dyn std::error::Error> as From<hyper::Error>>::from}, val: Value(<ZST>) }
    }

    bb29: {
        _52 = const false;               // scope 18 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
        _53 = const false;               // scope 13 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
        _54 = const false;               // scope 12 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
        _55 = const false;               // scope 11 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
        _56 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
        goto -> bb34;                    // scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb30: {
        _55 = const false;               // scope 11 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
        goto -> bb31;                    // scope 6 at no-location
    }

    bb31: {
        drop(_6) -> [return: bb32, unwind: bb47]; // scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb32: {
        _56 = const false;               // scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
        drop(_3) -> [return: bb33, unwind: bb49]; // scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb33: {
        drop(_2) -> bb34;                // scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb34: {
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:266:6: 266:6
    }

    bb35 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/http_server.rs:235:5: 266:6
    }

    bb36 (cleanup): {
        drop(_36) -> bb39;               // scope 18 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb37 (cleanup): {
        switchInt(_52) -> [0: bb39, otherwise: bb36]; // scope 18 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb38 (cleanup): {
        drop(_27) -> bb41;               // scope 13 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb39 (cleanup): {
        switchInt(_53) -> [0: bb41, otherwise: bb38]; // scope 13 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb40 (cleanup): {
        drop(_22) -> bb43;               // scope 12 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb41 (cleanup): {
        switchInt(_54) -> [0: bb43, otherwise: bb40]; // scope 12 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb42 (cleanup): {
        drop(_21) -> bb45;               // scope 11 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb43 (cleanup): {
        switchInt(_55) -> [0: bb45, otherwise: bb42]; // scope 11 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb44 (cleanup): {
        drop(_6) -> bb47;                // scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb45 (cleanup): {
        switchInt(_56) -> [0: bb47, otherwise: bb44]; // scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb46 (cleanup): {
        drop(_3) -> bb49;                // scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb47 (cleanup): {
        switchInt(_57) -> [0: bb49, otherwise: bb46]; // scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb48 (cleanup): {
        drop(_2) -> bb35;                // scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb49 (cleanup): {
        switchInt(_58) -> [0: bb35, otherwise: bb48]; // scope 0 at cita-jsonrpc/src/http_server.rs:266:5: 266:6
    }

    bb50: {
        goto -> bb32;                    // scope 3 at cita-jsonrpc/src/http_server.rs:242:24: 242:57
    }

    bb51: {
        goto -> bb31;                    // scope 8 at cita-jsonrpc/src/http_server.rs:243:20: 243:42
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:234:1: 234:12>::create::{closure#0}(_1: [closure@cita-jsonrpc/src/http_server.rs:263:18: 263:27], _2: hyper::server::Builder<AddrIncoming>) -> hyper::Server<AddrIncoming, JsonrpcMakeService> {
    debug builder => _2;                 // in scope 0 at cita-jsonrpc/src/http_server.rs:263:19: 263:26
    debug make_jsonrpc_svc => (_1.0: http_server::JsonrpcMakeService); // in scope 0 at cita-jsonrpc/src/http_server.rs:252:13: 252:29
    let mut _0: hyper::Server<hyper::server::conn::AddrIncoming, http_server::JsonrpcMakeService>; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:263:28: 263:28
    let mut _3: hyper::server::Builder<hyper::server::conn::AddrIncoming>; // in scope 0 at cita-jsonrpc/src/http_server.rs:263:28: 263:57
    let mut _4: http_server::JsonrpcMakeService; // in scope 0 at cita-jsonrpc/src/http_server.rs:263:64: 263:80
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:263:80: 263:81

    bb0: {
        _5 = const false;                // scope 0 at cita-jsonrpc/src/http_server.rs:263:28: 263:57
        _5 = const true;                 // scope 0 at cita-jsonrpc/src/http_server.rs:263:28: 263:57
        _3 = hyper::server::Builder::<AddrIncoming>::http1_keepalive(move _2, const true) -> [return: bb1, unwind: bb5]; // scope 0 at cita-jsonrpc/src/http_server.rs:263:28: 263:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:263:36: 263:51
                                         // + literal: Const { ty: fn(hyper::server::Builder<AddrIncoming>, bool) -> hyper::server::Builder<AddrIncoming> {hyper::server::Builder::<AddrIncoming>::http1_keepalive}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const false;                // scope 0 at cita-jsonrpc/src/http_server.rs:263:64: 263:80
        _4 = move (_1.0: http_server::JsonrpcMakeService); // scope 0 at cita-jsonrpc/src/http_server.rs:263:64: 263:80
        _0 = hyper::server::Builder::<AddrIncoming>::serve::<JsonrpcMakeService, Body>(move _3, move _4) -> [return: bb2, unwind: bb5]; // scope 0 at cita-jsonrpc/src/http_server.rs:263:28: 263:81
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:263:58: 263:63
                                         // + literal: Const { ty: fn(hyper::server::Builder<AddrIncoming>, JsonrpcMakeService) -> hyper::Server<AddrIncoming, JsonrpcMakeService> {hyper::server::Builder::<AddrIncoming>::serve::<JsonrpcMakeService, Body>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:263:81: 263:81
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/http_server.rs:263:18: 263:81
    }

    bb4 (cleanup): {
        drop((_1.0: http_server::JsonrpcMakeService)) -> bb3; // scope 0 at cita-jsonrpc/src/http_server.rs:263:80: 263:81
    }

    bb5 (cleanup): {
        switchInt(_5) -> [0: bb3, otherwise: bb4]; // scope 0 at cita-jsonrpc/src/http_server.rs:263:80: 263:81
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:234:1: 234:12>::create::{closure#1}(_1: [closure@cita-jsonrpc/src/http_server.rs:264:18: 264:27], _2: hyper::Server<AddrIncoming, JsonrpcMakeService>) -> http_server::Server {
    debug jsonrpc => _2;                 // in scope 0 at cita-jsonrpc/src/http_server.rs:264:19: 264:26
    debug addr => (*(_1.0: &std::net::SocketAddr)); // in scope 0 at cita-jsonrpc/src/http_server.rs:243:13: 243:17
    let mut _0: http_server::Server;     // return place in scope 0 at cita-jsonrpc/src/http_server.rs:264:28: 264:28
    let mut _3: std::net::SocketAddr;    // in scope 0 at cita-jsonrpc/src/http_server.rs:264:35: 264:39
    let mut _4: &std::net::SocketAddr;   // in scope 0 at cita-jsonrpc/src/http_server.rs:264:18: 264:50

    bb0: {
        _4 = deref_copy (_1.0: &std::net::SocketAddr); // scope 0 at cita-jsonrpc/src/http_server.rs:264:35: 264:39
        _3 = (*_4);                      // scope 0 at cita-jsonrpc/src/http_server.rs:264:35: 264:39
        _0 = http_server::Server { addr: move _3, jsonrpc: move _2 }; // scope 0 at cita-jsonrpc/src/http_server.rs:264:28: 264:50
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:264:50: 264:50
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:234:1: 234:12>::local_addr(_1: &http_server::Server) -> std::net::SocketAddr {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:270:23: 270:28
    let mut _0: std::net::SocketAddr;    // return place in scope 0 at cita-jsonrpc/src/http_server.rs:270:33: 270:43

    bb0: {
        _0 = ((*_1).0: std::net::SocketAddr); // scope 0 at cita-jsonrpc/src/http_server.rs:271:9: 271:18
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:272:6: 272:6
    }
}

fn http_server::<impl at cita-jsonrpc/src/http_server.rs:234:1: 234:12>::jsonrpc(_1: http_server::Server) -> hyper::Server<AddrIncoming, JsonrpcMakeService> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:274:20: 274:24
    let mut _0: hyper::Server<hyper::server::conn::AddrIncoming, http_server::JsonrpcMakeService>; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:274:29: 274:42

    bb0: {
        _0 = move (_1.1: hyper::Server<hyper::server::conn::AddrIncoming, http_server::JsonrpcMakeService>); // scope 0 at cita-jsonrpc/src/http_server.rs:275:9: 275:21
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:276:6: 276:6
    }
}

fn listener_from_socket_addr(_1: &std::net::SocketAddr) -> Result<std::net::TcpListener, std::io::Error> {
    debug addr => _1;                    // in scope 0 at cita-jsonrpc/src/http_server.rs:279:34: 279:38
    let mut _0: std::result::Result<std::net::TcpListener, std::io::Error>; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:279:56: 279:84
    let _2: net2::TcpBuilder;            // in scope 0 at cita-jsonrpc/src/http_server.rs:282:9: 282:17
    let mut _3: isize;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:283:9: 283:26
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, net2::TcpBuilder>; // in scope 0 at cita-jsonrpc/src/http_server.rs:283:30: 283:57
    let mut _5: std::result::Result<net2::TcpBuilder, std::io::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:283:30: 283:56
    let mut _6: isize;                   // in scope 0 at cita-jsonrpc/src/http_server.rs:283:56: 283:57
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:283:56: 283:57
    let _8: net2::TcpBuilder;            // in scope 0 at cita-jsonrpc/src/http_server.rs:283:30: 283:57
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, net2::TcpBuilder>; // in scope 0 at cita-jsonrpc/src/http_server.rs:284:30: 284:57
    let mut _10: std::result::Result<net2::TcpBuilder, std::io::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:284:30: 284:56
    let mut _11: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:284:56: 284:57
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:284:56: 284:57
    let _13: net2::TcpBuilder;           // in scope 0 at cita-jsonrpc/src/http_server.rs:284:30: 284:57
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, &net2::TcpBuilder>; // in scope 0 at cita-jsonrpc/src/http_server.rs:286:5: 286:31
    let mut _15: std::result::Result<&net2::TcpBuilder, std::io::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:286:5: 286:30
    let mut _16: &net2::TcpBuilder;      // in scope 0 at cita-jsonrpc/src/http_server.rs:286:5: 286:30
    let mut _17: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:286:30: 286:31
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, &net2::TcpBuilder>; // in scope 0 at cita-jsonrpc/src/http_server.rs:287:5: 287:34
    let mut _21: std::result::Result<&net2::TcpBuilder, std::io::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:287:5: 287:33
    let mut _22: &net2::TcpBuilder;      // in scope 0 at cita-jsonrpc/src/http_server.rs:287:5: 287:33
    let mut _23: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:287:33: 287:34
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, &net2::TcpBuilder>; // in scope 0 at cita-jsonrpc/src/http_server.rs:288:5: 288:25
    let mut _27: std::result::Result<&net2::TcpBuilder, std::io::Error>; // in scope 0 at cita-jsonrpc/src/http_server.rs:288:5: 288:24
    let mut _28: &net2::TcpBuilder;      // in scope 0 at cita-jsonrpc/src/http_server.rs:288:5: 288:24
    let mut _29: isize;                  // in scope 0 at cita-jsonrpc/src/http_server.rs:288:24: 288:25
    let mut _32: &net2::TcpBuilder;      // in scope 0 at cita-jsonrpc/src/http_server.rs:289:5: 289:33
    scope 1 {
        debug listener => _2;            // in scope 1 at cita-jsonrpc/src/http_server.rs:282:9: 282:17
        let _18: std::result::Result<std::convert::Infallible, std::io::Error>; // in scope 1 at cita-jsonrpc/src/http_server.rs:286:30: 286:31
        let _19: &net2::TcpBuilder;      // in scope 1 at cita-jsonrpc/src/http_server.rs:286:5: 286:31
        let _24: std::result::Result<std::convert::Infallible, std::io::Error>; // in scope 1 at cita-jsonrpc/src/http_server.rs:287:33: 287:34
        let _25: &net2::TcpBuilder;      // in scope 1 at cita-jsonrpc/src/http_server.rs:287:5: 287:34
        let _30: std::result::Result<std::convert::Infallible, std::io::Error>; // in scope 1 at cita-jsonrpc/src/http_server.rs:288:24: 288:25
        let _31: &net2::TcpBuilder;      // in scope 1 at cita-jsonrpc/src/http_server.rs:288:5: 288:25
        scope 10 {
            debug residual => _18;       // in scope 10 at cita-jsonrpc/src/http_server.rs:286:30: 286:31
            scope 11 {
            }
        }
        scope 12 {
            debug val => _19;            // in scope 12 at cita-jsonrpc/src/http_server.rs:286:5: 286:31
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _24;       // in scope 14 at cita-jsonrpc/src/http_server.rs:287:33: 287:34
            scope 15 {
            }
        }
        scope 16 {
            debug val => _25;            // in scope 16 at cita-jsonrpc/src/http_server.rs:287:5: 287:34
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _30;       // in scope 18 at cita-jsonrpc/src/http_server.rs:288:24: 288:25
            scope 19 {
            }
        }
        scope 20 {
            debug val => _31;            // in scope 20 at cita-jsonrpc/src/http_server.rs:288:5: 288:25
            scope 21 {
            }
        }
    }
    scope 2 {
        debug residual => _7;            // in scope 2 at cita-jsonrpc/src/http_server.rs:283:56: 283:57
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;                 // in scope 4 at cita-jsonrpc/src/http_server.rs:283:30: 283:57
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _12;           // in scope 6 at cita-jsonrpc/src/http_server.rs:284:56: 284:57
        scope 7 {
        }
    }
    scope 8 {
        debug val => _13;                // in scope 8 at cita-jsonrpc/src/http_server.rs:284:30: 284:57
        scope 9 {
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-jsonrpc/src/http_server.rs:282:26: 282:31
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/http_server.rs:282:20: 282:31
    }

    bb1: {
        _10 = TcpBuilder::new_v6() -> bb9; // scope 0 at cita-jsonrpc/src/http_server.rs:284:30: 284:56
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:284:30: 284:54
                                         // + literal: Const { ty: fn() -> Result<TcpBuilder, std::io::Error> {TcpBuilder::new_v6}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/http_server.rs:282:26: 282:31
    }

    bb3: {
        _5 = TcpBuilder::new_v4() -> bb4; // scope 0 at cita-jsonrpc/src/http_server.rs:283:30: 283:56
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:283:30: 283:54
                                         // + literal: Const { ty: fn() -> Result<TcpBuilder, std::io::Error> {TcpBuilder::new_v4}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = <Result<TcpBuilder, std::io::Error> as Try>::branch(move _5) -> bb5; // scope 0 at cita-jsonrpc/src/http_server.rs:283:30: 283:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:283:30: 283:57
                                         // + literal: Const { ty: fn(Result<TcpBuilder, std::io::Error>) -> ControlFlow<<Result<TcpBuilder, std::io::Error> as Try>::Residual, <Result<TcpBuilder, std::io::Error> as Try>::Output> {<Result<TcpBuilder, std::io::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = discriminant(_4);           // scope 0 at cita-jsonrpc/src/http_server.rs:283:30: 283:57
        switchInt(move _6) -> [0: bb6, 1: bb8, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/http_server.rs:283:30: 283:57
    }

    bb6: {
        _8 = move ((_4 as Continue).0: net2::TcpBuilder); // scope 0 at cita-jsonrpc/src/http_server.rs:283:30: 283:57
        _2 = move _8;                    // scope 5 at cita-jsonrpc/src/http_server.rs:283:30: 283:57
        goto -> bb14;                    // scope 0 at cita-jsonrpc/src/http_server.rs:283:56: 283:57
    }

    bb7: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/http_server.rs:283:30: 283:57
    }

    bb8: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>); // scope 0 at cita-jsonrpc/src/http_server.rs:283:56: 283:57
        _0 = <Result<std::net::TcpListener, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> bb32; // scope 3 at cita-jsonrpc/src/http_server.rs:283:30: 283:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:283:56: 283:57
                                         // + literal: Const { ty: fn(Result<Infallible, std::io::Error>) -> Result<std::net::TcpListener, std::io::Error> {<Result<std::net::TcpListener, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb9: {
        _9 = <Result<TcpBuilder, std::io::Error> as Try>::branch(move _10) -> bb10; // scope 0 at cita-jsonrpc/src/http_server.rs:284:30: 284:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:284:30: 284:57
                                         // + literal: Const { ty: fn(Result<TcpBuilder, std::io::Error>) -> ControlFlow<<Result<TcpBuilder, std::io::Error> as Try>::Residual, <Result<TcpBuilder, std::io::Error> as Try>::Output> {<Result<TcpBuilder, std::io::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb10: {
        _11 = discriminant(_9);          // scope 0 at cita-jsonrpc/src/http_server.rs:284:30: 284:57
        switchInt(move _11) -> [0: bb11, 1: bb13, otherwise: bb12]; // scope 0 at cita-jsonrpc/src/http_server.rs:284:30: 284:57
    }

    bb11: {
        _13 = move ((_9 as Continue).0: net2::TcpBuilder); // scope 0 at cita-jsonrpc/src/http_server.rs:284:30: 284:57
        _2 = move _13;                   // scope 9 at cita-jsonrpc/src/http_server.rs:284:30: 284:57
        goto -> bb14;                    // scope 0 at cita-jsonrpc/src/http_server.rs:284:56: 284:57
    }

    bb12: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/http_server.rs:284:30: 284:57
    }

    bb13: {
        _12 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>); // scope 0 at cita-jsonrpc/src/http_server.rs:284:56: 284:57
        _0 = <Result<std::net::TcpListener, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> bb32; // scope 7 at cita-jsonrpc/src/http_server.rs:284:30: 284:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:284:56: 284:57
                                         // + literal: Const { ty: fn(Result<Infallible, std::io::Error>) -> Result<std::net::TcpListener, std::io::Error> {<Result<std::net::TcpListener, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb14: {
        _16 = &_2;                       // scope 1 at cita-jsonrpc/src/http_server.rs:286:5: 286:30
        _15 = <TcpBuilder as UnixTcpBuilderExt>::reuse_port(move _16, const true) -> [return: bb15, unwind: bb33]; // scope 1 at cita-jsonrpc/src/http_server.rs:286:5: 286:30
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:286:14: 286:24
                                         // + literal: Const { ty: for<'a> fn(&'a TcpBuilder, bool) -> Result<&'a TcpBuilder, std::io::Error> {<TcpBuilder as UnixTcpBuilderExt>::reuse_port}, val: Value(<ZST>) }
    }

    bb15: {
        _14 = <Result<&TcpBuilder, std::io::Error> as Try>::branch(move _15) -> [return: bb16, unwind: bb33]; // scope 1 at cita-jsonrpc/src/http_server.rs:286:5: 286:31
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:286:5: 286:31
                                         // + literal: Const { ty: fn(Result<&TcpBuilder, std::io::Error>) -> ControlFlow<<Result<&TcpBuilder, std::io::Error> as Try>::Residual, <Result<&TcpBuilder, std::io::Error> as Try>::Output> {<Result<&TcpBuilder, std::io::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb16: {
        _17 = discriminant(_14);         // scope 1 at cita-jsonrpc/src/http_server.rs:286:5: 286:31
        switchInt(move _17) -> [0: bb17, 1: bb19, otherwise: bb18]; // scope 1 at cita-jsonrpc/src/http_server.rs:286:5: 286:31
    }

    bb17: {
        _19 = ((_14 as Continue).0: &net2::TcpBuilder); // scope 1 at cita-jsonrpc/src/http_server.rs:286:5: 286:31
        _22 = &_2;                       // scope 1 at cita-jsonrpc/src/http_server.rs:287:5: 287:33
        _21 = net2::ext::<impl TcpBuilder>::reuse_address(move _22, const true) -> [return: bb20, unwind: bb33]; // scope 1 at cita-jsonrpc/src/http_server.rs:287:5: 287:33
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:287:14: 287:27
                                         // + literal: Const { ty: for<'a> fn(&'a TcpBuilder, bool) -> Result<&'a TcpBuilder, std::io::Error> {net2::ext::<impl TcpBuilder>::reuse_address}, val: Value(<ZST>) }
    }

    bb18: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/http_server.rs:286:5: 286:31
    }

    bb19: {
        _18 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>); // scope 1 at cita-jsonrpc/src/http_server.rs:286:30: 286:31
        _0 = <Result<std::net::TcpListener, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _18) -> [return: bb35, unwind: bb33]; // scope 11 at cita-jsonrpc/src/http_server.rs:286:5: 286:31
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:286:30: 286:31
                                         // + literal: Const { ty: fn(Result<Infallible, std::io::Error>) -> Result<std::net::TcpListener, std::io::Error> {<Result<std::net::TcpListener, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb20: {
        _20 = <Result<&TcpBuilder, std::io::Error> as Try>::branch(move _21) -> [return: bb21, unwind: bb33]; // scope 1 at cita-jsonrpc/src/http_server.rs:287:5: 287:34
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:287:5: 287:34
                                         // + literal: Const { ty: fn(Result<&TcpBuilder, std::io::Error>) -> ControlFlow<<Result<&TcpBuilder, std::io::Error> as Try>::Residual, <Result<&TcpBuilder, std::io::Error> as Try>::Output> {<Result<&TcpBuilder, std::io::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb21: {
        _23 = discriminant(_20);         // scope 1 at cita-jsonrpc/src/http_server.rs:287:5: 287:34
        switchInt(move _23) -> [0: bb22, 1: bb24, otherwise: bb23]; // scope 1 at cita-jsonrpc/src/http_server.rs:287:5: 287:34
    }

    bb22: {
        _25 = ((_20 as Continue).0: &net2::TcpBuilder); // scope 1 at cita-jsonrpc/src/http_server.rs:287:5: 287:34
        _28 = &_2;                       // scope 1 at cita-jsonrpc/src/http_server.rs:288:5: 288:24
        _27 = TcpBuilder::bind::<&std::net::SocketAddr>(move _28, _1) -> [return: bb25, unwind: bb33]; // scope 1 at cita-jsonrpc/src/http_server.rs:288:5: 288:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:288:14: 288:18
                                         // + literal: Const { ty: for<'a> fn(&'a TcpBuilder, &std::net::SocketAddr) -> Result<&'a TcpBuilder, std::io::Error> {TcpBuilder::bind::<&std::net::SocketAddr>}, val: Value(<ZST>) }
    }

    bb23: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/http_server.rs:287:5: 287:34
    }

    bb24: {
        _24 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>); // scope 1 at cita-jsonrpc/src/http_server.rs:287:33: 287:34
        _0 = <Result<std::net::TcpListener, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _24) -> [return: bb36, unwind: bb33]; // scope 15 at cita-jsonrpc/src/http_server.rs:287:5: 287:34
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:287:33: 287:34
                                         // + literal: Const { ty: fn(Result<Infallible, std::io::Error>) -> Result<std::net::TcpListener, std::io::Error> {<Result<std::net::TcpListener, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb25: {
        _26 = <Result<&TcpBuilder, std::io::Error> as Try>::branch(move _27) -> [return: bb26, unwind: bb33]; // scope 1 at cita-jsonrpc/src/http_server.rs:288:5: 288:25
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:288:5: 288:25
                                         // + literal: Const { ty: fn(Result<&TcpBuilder, std::io::Error>) -> ControlFlow<<Result<&TcpBuilder, std::io::Error> as Try>::Residual, <Result<&TcpBuilder, std::io::Error> as Try>::Output> {<Result<&TcpBuilder, std::io::Error> as Try>::branch}, val: Value(<ZST>) }
    }

    bb26: {
        _29 = discriminant(_26);         // scope 1 at cita-jsonrpc/src/http_server.rs:288:5: 288:25
        switchInt(move _29) -> [0: bb27, 1: bb29, otherwise: bb28]; // scope 1 at cita-jsonrpc/src/http_server.rs:288:5: 288:25
    }

    bb27: {
        _31 = ((_26 as Continue).0: &net2::TcpBuilder); // scope 1 at cita-jsonrpc/src/http_server.rs:288:5: 288:25
        _32 = &_2;                       // scope 1 at cita-jsonrpc/src/http_server.rs:289:5: 289:33
        _0 = TcpBuilder::listen(move _32, const _) -> [return: bb30, unwind: bb33]; // scope 1 at cita-jsonrpc/src/http_server.rs:289:5: 289:33
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:289:14: 289:20
                                         // + literal: Const { ty: for<'a> fn(&'a TcpBuilder, i32) -> Result<std::net::TcpListener, std::io::Error> {TcpBuilder::listen}, val: Value(<ZST>) }
    }

    bb28: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/http_server.rs:288:5: 288:25
    }

    bb29: {
        _30 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>); // scope 1 at cita-jsonrpc/src/http_server.rs:288:24: 288:25
        _0 = <Result<std::net::TcpListener, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _30) -> [return: bb37, unwind: bb33]; // scope 19 at cita-jsonrpc/src/http_server.rs:288:5: 288:25
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/http_server.rs:288:24: 288:25
                                         // + literal: Const { ty: fn(Result<Infallible, std::io::Error>) -> Result<std::net::TcpListener, std::io::Error> {<Result<std::net::TcpListener, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual}, val: Value(<ZST>) }
    }

    bb30: {
        drop(_2) -> bb32;                // scope 0 at cita-jsonrpc/src/http_server.rs:290:1: 290:2
    }

    bb31: {
        drop(_2) -> bb32;                // scope 0 at cita-jsonrpc/src/http_server.rs:290:1: 290:2
    }

    bb32: {
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:290:2: 290:2
    }

    bb33 (cleanup): {
        drop(_2) -> bb34;                // scope 0 at cita-jsonrpc/src/http_server.rs:290:1: 290:2
    }

    bb34 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/http_server.rs:279:1: 290:2
    }

    bb35: {
        goto -> bb31;                    // scope 11 at cita-jsonrpc/src/http_server.rs:286:5: 286:31
    }

    bb36: {
        goto -> bb31;                    // scope 15 at cita-jsonrpc/src/http_server.rs:287:5: 287:34
    }

    bb37: {
        goto -> bb31;                    // scope 19 at cita-jsonrpc/src/http_server.rs:288:5: 288:25
    }
}

fn mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:23:10: 23:17>::default() -> MqHandler {
    let mut _0: mq_handler::MqHandler;   // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:23:10: 23:17
    let mut _1: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:25:5: 25:22

    bb0: {
        _1 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Default>::default() -> bb1; // scope 0 at cita-jsonrpc/src/mq_handler.rs:25:5: 25:22
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:25:5: 25:22
                                         // + literal: Const { ty: fn() -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = MqHandler { responses: move _1 }; // scope 0 at cita-jsonrpc/src/mq_handler.rs:23:10: 23:17
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:23:17: 23:17
    }
}

fn mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::new(_1: Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> MqHandler {
    debug responses => _1;               // in scope 0 at cita-jsonrpc/src/mq_handler.rs:29:16: 29:25
    let mut _0: mq_handler::MqHandler;   // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:29:38: 29:42

    bb0: {
        _0 = MqHandler { responses: move _1 }; // scope 0 at cita-jsonrpc/src/mq_handler.rs:30:9: 30:32
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:31:6: 31:6
    }
}

fn mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle(_1: &mut MqHandler, _2: &str, _3: &[u8]) -> Result<(), ()> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:33:19: 33:28
    debug key => _2;                     // in scope 0 at cita-jsonrpc/src/mq_handler.rs:33:30: 33:33
    debug body => _3;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:33:41: 33:45
    let mut _0: std::result::Result<(), ()>; // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:33:57: 33:71
    let _4: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _7: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _8: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _9: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _10: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _12: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _14: &[&str];                // in scope 0 at cita-jsonrpc/src/mq_handler.rs:34:16: 34:45
    let mut _15: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _17: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:34:47: 34:50
    let _19: &&str;                      // in scope 0 at cita-jsonrpc/src/mq_handler.rs:34:47: 34:50
    let mut _20: libproto::Message;      // in scope 0 at cita-jsonrpc/src/mq_handler.rs:36:13: 36:20
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, libproto::Message>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:36:23: 38:12
    let mut _22: std::result::Result<libproto::Message, ()>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:36:23: 38:11
    let mut _23: std::result::Result<libproto::Message, libproto::TryFromConvertError>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:36:23: 36:46
    let mut _24: isize;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:38:11: 38:12
    let _25: libproto::Message;          // in scope 0 at cita-jsonrpc/src/mq_handler.rs:36:23: 38:12
    let mut _26: libproto::router::RoutingKey; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:40:15: 40:36
    let mut _27: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _28: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _29: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _30: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _31: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _32: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, libproto::Response>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
    let mut _35: std::result::Result<libproto::Response, ()>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:19
    let mut _36: std::option::Option<libproto::Response>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:46:31: 46:50
    let mut _37: &mut libproto::Message; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:46:31: 46:50
    let mut _38: isize;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:48:19: 48:20
    let mut _43: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _44: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _45: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _46: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _47: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _48: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _49: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _50: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _51: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _52: &[&str];                // in scope 0 at cita-jsonrpc/src/mq_handler.rs:52:28: 52:59
    let mut _53: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _54: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _55: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _56: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:52:61: 52:71
    let _57: &&std::vec::Vec<u8>;        // in scope 0 at cita-jsonrpc/src/mq_handler.rs:52:61: 52:71
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, helper::TransferType>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
    let mut _59: std::result::Result<helper::TransferType, ()>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:23
    let mut _60: std::option::Option<helper::TransferType>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:61
    let mut _61: &mut std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:61
    let mut _62: &mut std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:61
    let mut _63: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:61
    let mut _64: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:42
    let mut _65: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:42
    let _66: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:42
    let mut _67: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:42
    let mut _68: [closure@cita-jsonrpc/src/mq_handler.rs:53:73: 53:75]; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:73: 55:22
    let mut _69: &&std::vec::Vec<u8>;    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:73: 55:22
    let mut _70: isize;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:55:23: 55:24
    let mut _72: isize;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:59:21: 59:59
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:60:25: 64:32
    let mut _76: std::result::Result<(), ()>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:60:25: 64:31
    let mut _77: std::result::Result<(), jsonrpc_types::rpc_response::Output>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:60:25: 61:76
    let mut _78: futures::Complete<jsonrpc_types::rpc_response::Output>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:60:25: 60:31
    let mut _79: jsonrpc_types::rpc_response::Output; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:61:35: 61:75
    let mut _80: libproto::Response;     // in scope 0 at cita-jsonrpc/src/mq_handler.rs:61:57: 61:64
    let mut _81: isize;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:64:31: 64:32
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, std::string::String>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:36
    let mut _86: std::result::Result<std::string::String, ()>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:35
    let mut _87: std::result::Result<std::string::String, serde_json::Error>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:68:29: 68:93
    let _88: &jsonrpc_types::rpc_response::Output; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:68:51: 68:92
    let _89: jsonrpc_types::rpc_response::Output; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:68:52: 68:92
    let mut _90: libproto::Response;     // in scope 0 at cita-jsonrpc/src/mq_handler.rs:68:74: 68:81
    let mut _91: isize;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:71:35: 71:36
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:72:25: 74:28
    let mut _94: std::result::Result<(), ()>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:72:25: 74:27
    let mut _95: std::result::Result<(), ws::Error>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:72:25: 72:47
    let mut _96: &ws::Sender;            // in scope 0 at cita-jsonrpc/src/mq_handler.rs:72:25: 72:47
    let mut _97: std::string::String;    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:72:37: 72:46
    let mut _98: isize;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:74:27: 74:28
    let mut _100: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _101: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _102: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _103: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _104: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _105: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _106: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _107: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _108: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _109: &[&str];               // in scope 0 at cita-jsonrpc/src/mq_handler.rs:79:23: 79:48
    let mut _110: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _111: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _112: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _113: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:79:50: 79:53
    let _114: &&str;                     // in scope 0 at cita-jsonrpc/src/mq_handler.rs:79:50: 79:53
    let mut _124: bool;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    let mut _125: bool;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:75:21: 75:22
    let mut _126: bool;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:61:75: 61:76
    let mut _127: bool;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    let mut _128: bool;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    let mut _129: bool;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    let mut _130: bool;                  // in scope 0 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    let mut _131: isize;                 // in scope 0 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    scope 1 {
        debug lvl => _4;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _121: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _122: &[&str; 1];        // in scope 1 at cita-jsonrpc/src/mq_handler.rs:34:16: 34:45
        let mut _123: &log::LevelFilter; // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
    scope 2 {
        debug msg => _20;                // in scope 2 at cita-jsonrpc/src/mq_handler.rs:36:13: 36:20
        let _33: libproto::Response;     // in scope 2 at cita-jsonrpc/src/mq_handler.rs:46:21: 46:28
        let _39: libproto::Response;     // in scope 2 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
        let _99: log::Level;             // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        scope 7 {
            debug content => _33;        // in scope 7 at cita-jsonrpc/src/mq_handler.rs:46:21: 46:28
            let _40: helper::TransferType; // in scope 7 at cita-jsonrpc/src/mq_handler.rs:50:21: 50:25
            let _41: &std::vec::Vec<u8>; // in scope 7 at cita-jsonrpc/src/mq_handler.rs:51:25: 51:35
            scope 12 {
                debug resp => _40;       // in scope 12 at cita-jsonrpc/src/mq_handler.rs:50:21: 50:25
                let _73: jsonrpc_types::rpc_request::RequestInfo; // in scope 12 at cita-jsonrpc/src/mq_handler.rs:59:41: 59:49
                let _74: futures::Complete<jsonrpc_types::rpc_response::Output>; // in scope 12 at cita-jsonrpc/src/mq_handler.rs:59:51: 59:57
                let _82: jsonrpc_types::rpc_request::RequestInfo; // in scope 12 at cita-jsonrpc/src/mq_handler.rs:66:46: 66:54
                let _83: ws::Sender;     // in scope 12 at cita-jsonrpc/src/mq_handler.rs:66:56: 66:62
                scope 19 {
                    debug req_info => _73; // in scope 19 at cita-jsonrpc/src/mq_handler.rs:59:41: 59:49
                    debug sender => _74; // in scope 19 at cita-jsonrpc/src/mq_handler.rs:59:51: 59:57
                    scope 20 {
                        debug residual => const Result::<Infallible, ()>::Err(()); // in scope 20 at cita-jsonrpc/src/mq_handler.rs:64:31: 64:32
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug val => const (); // in scope 22 at cita-jsonrpc/src/mq_handler.rs:60:25: 64:32
                        scope 23 {
                        }
                    }
                }
                scope 24 {
                    debug req_info => _82; // in scope 24 at cita-jsonrpc/src/mq_handler.rs:66:46: 66:54
                    debug sender => _83; // in scope 24 at cita-jsonrpc/src/mq_handler.rs:66:56: 66:62
                    let _84: std::string::String; // in scope 24 at cita-jsonrpc/src/mq_handler.rs:67:29: 67:38
                    let _92: std::string::String; // in scope 24 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:36
                    scope 25 {
                        debug json_body => _84; // in scope 25 at cita-jsonrpc/src/mq_handler.rs:67:29: 67:38
                        scope 30 {
                            debug residual => const Result::<Infallible, ()>::Err(()); // in scope 30 at cita-jsonrpc/src/mq_handler.rs:74:27: 74:28
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => const (); // in scope 32 at cita-jsonrpc/src/mq_handler.rs:72:25: 74:28
                            scope 33 {
                            }
                        }
                    }
                    scope 26 {
                        debug residual => const Result::<Infallible, ()>::Err(()); // in scope 26 at cita-jsonrpc/src/mq_handler.rs:71:35: 71:36
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug val => _92; // in scope 28 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:36
                        scope 29 {
                        }
                    }
                }
            }
            scope 13 {
                debug request_id => _41; // in scope 13 at cita-jsonrpc/src/mq_handler.rs:51:25: 51:35
                let _42: log::Level;     // in scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let _71: helper::TransferType; // in scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
                scope 14 {
                    debug lvl => _42;    // in scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let mut _115: &(&str, &str, &str, u32); // in scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                    let mut _116: &[&str; 1]; // in scope 14 at cita-jsonrpc/src/mq_handler.rs:52:28: 52:59
                    let mut _117: &log::LevelFilter; // in scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                }
                scope 15 {
                    debug residual => const Result::<Infallible, ()>::Err(()); // in scope 15 at cita-jsonrpc/src/mq_handler.rs:55:23: 55:24
                    scope 16 {
                    }
                }
                scope 17 {
                    debug val => _71;    // in scope 17 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
                    scope 18 {
                    }
                }
            }
        }
        scope 8 {
            debug residual => const Result::<Infallible, ()>::Err(()); // in scope 8 at cita-jsonrpc/src/mq_handler.rs:48:19: 48:20
            scope 9 {
            }
        }
        scope 10 {
            debug val => _39;            // in scope 10 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
            scope 11 {
            }
        }
        scope 34 {
            debug lvl => _99;            // in scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _118: &(&str, &str, &str, u32); // in scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
            let mut _119: &[&str; 1];    // in scope 34 at cita-jsonrpc/src/mq_handler.rs:79:23: 79:48
            let mut _120: &log::LevelFilter; // in scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        }
    }
    scope 3 {
        debug residual => const Result::<Infallible, ()>::Err(()); // in scope 3 at cita-jsonrpc/src/mq_handler.rs:38:11: 38:12
        scope 4 {
        }
    }
    scope 5 {
        debug val => _25;                // in scope 5 at cita-jsonrpc/src/mq_handler.rs:36:23: 38:12
        scope 6 {
        }
    }

    bb0: {
        _124 = const false;              // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _127 = const false;              // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _130 = const false;              // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _128 = const false;              // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _125 = const false;              // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _129 = const false;              // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _126 = const false;              // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _4 = log::Level::Trace;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _7 = &_4;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _123 = const _;                  // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(MqHandler::handle, [], Some(promoted[8])) }
        _6 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _7, _123) -> bb4; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _9 = &_4;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _11 = log::max_level() -> bb5;   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _5) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _6) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _10 = &_11;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _8 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _9, move _10) -> bb6; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = move _8;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _122 = const _;                  // scope 1 at cita-jsonrpc/src/mq_handler.rs:34:16: 34:45
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:34:16: 34:45
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(MqHandler::handle, [], Some(promoted[7])) }
        _14 = _122 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/mq_handler.rs:34:16: 34:45
        _19 = &_2;                       // scope 1 at cita-jsonrpc/src/mq_handler.rs:34:47: 34:50
        _18 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_19) -> bb8; // scope 1 at cita-jsonrpc/src/mq_handler.rs:34:47: 34:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:34:47: 34:50
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = [move _18];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _16 = &_17;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = _16 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> bb9; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _121 = const _;                  // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(MqHandler::handle, [], Some(promoted[6])) }
        _12 = log::__private_api_log(move _13, _4, _121) -> bb10; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = <libproto::Message as libproto::TryFrom<&[u8]>>::try_from(_3) -> bb11; // scope 0 at cita-jsonrpc/src/mq_handler.rs:36:23: 36:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:36:23: 36:40
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[u8]) -> Result<libproto::Message, <libproto::Message as libproto::TryFrom<&[u8]>>::Error> {<libproto::Message as libproto::TryFrom<&[u8]>>::try_from}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = Result::<libproto::Message, TryFromConvertError>::map_err::<(), [closure@cita-jsonrpc/src/mq_handler.rs:36:55: 36:58]>(move _23, const ZeroSized: [closure@cita-jsonrpc/src/mq_handler.rs:36:55: 36:58]) -> bb12; // scope 0 at cita-jsonrpc/src/mq_handler.rs:36:23: 38:11
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:36:47: 36:54
                                         // + literal: Const { ty: fn(Result<libproto::Message, TryFromConvertError>, [closure@cita-jsonrpc/src/mq_handler.rs:36:55: 36:58]) -> Result<libproto::Message, ()> {Result::<libproto::Message, TryFromConvertError>::map_err::<(), [closure@cita-jsonrpc/src/mq_handler.rs:36:55: 36:58]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/mq_handler.rs:36:55: 36:58], val: Value(<ZST>) }
    }

    bb12: {
        _21 = <Result<libproto::Message, ()> as Try>::branch(move _22) -> bb13; // scope 0 at cita-jsonrpc/src/mq_handler.rs:36:23: 38:12
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:36:23: 38:12
                                         // + literal: Const { ty: fn(Result<libproto::Message, ()>) -> ControlFlow<<Result<libproto::Message, ()> as Try>::Residual, <Result<libproto::Message, ()> as Try>::Output> {<Result<libproto::Message, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb13: {
        _24 = discriminant(_21);         // scope 0 at cita-jsonrpc/src/mq_handler.rs:36:23: 38:12
        switchInt(move _24) -> [0: bb14, 1: bb16, otherwise: bb15]; // scope 0 at cita-jsonrpc/src/mq_handler.rs:36:23: 38:12
    }

    bb14: {
        _25 = move ((_21 as Continue).0: libproto::Message); // scope 0 at cita-jsonrpc/src/mq_handler.rs:36:23: 38:12
        _20 = move _25;                  // scope 6 at cita-jsonrpc/src/mq_handler.rs:36:23: 38:12
        _26 = <RoutingKey as From<&str>>::from(_2) -> [return: bb17, unwind: bb95]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:15: 40:36
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:40:15: 40:31
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&str) -> RoutingKey {<RoutingKey as From<&str>>::from}, val: Value(<ZST>) }
    }

    bb15: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/mq_handler.rs:36:23: 38:12
    }

    bb16: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> bb91; // scope 4 at cita-jsonrpc/src/mq_handler.rs:36:23: 38:12
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:38:11: 38:12
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, ()>, val: Value(<ZST>) }
    }

    bb17: {
        _32 = discriminant((_26.0: libproto::router::SubModules)); // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:15: 40:36
        switchInt(move _32) -> [0: bb18, 1: bb20, 2: bb21, 4: bb22, 5: bb23, otherwise: bb19]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:9: 40:36
    }

    bb18: {
        _27 = discriminant((_26.1: libproto::router::MsgType)); // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:15: 40:36
        switchInt(move _27) -> [2: bb24, otherwise: bb19]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:9: 40:36
    }

    bb19: {
        _99 = log::Level::Warn;          // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _102 = &_99;                     // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _120 = const _;                  // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(MqHandler::handle, [], Some(promoted[5])) }
        _101 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _102, _120) -> [return: bb80, unwind: bb95]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb20: {
        _28 = discriminant((_26.1: libproto::router::MsgType)); // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:15: 40:36
        switchInt(move _28) -> [2: bb24, otherwise: bb19]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:9: 40:36
    }

    bb21: {
        _29 = discriminant((_26.1: libproto::router::MsgType)); // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:15: 40:36
        switchInt(move _29) -> [2: bb24, otherwise: bb19]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:9: 40:36
    }

    bb22: {
        _30 = discriminant((_26.1: libproto::router::MsgType)); // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:15: 40:36
        switchInt(move _30) -> [2: bb24, otherwise: bb19]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:9: 40:36
    }

    bb23: {
        _31 = discriminant((_26.1: libproto::router::MsgType)); // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:15: 40:36
        switchInt(move _31) -> [2: bb24, otherwise: bb19]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:40:9: 40:36
    }

    bb24: {
        _37 = &mut _20;                  // scope 2 at cita-jsonrpc/src/mq_handler.rs:46:31: 46:50
        _36 = libproto::Message::take_response(move _37) -> [return: bb25, unwind: bb95]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:46:31: 46:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:46:35: 46:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Message) -> std::option::Option<libproto::Response> {libproto::Message::take_response}, val: Value(<ZST>) }
    }

    bb25: {
        _35 = std::option::Option::<libproto::Response>::ok_or_else::<(), [closure@cita-jsonrpc/src/mq_handler.rs:46:62: 46:64]>(move _36, const ZeroSized: [closure@cita-jsonrpc/src/mq_handler.rs:46:62: 46:64]) -> [return: bb26, unwind: bb95]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:46:51: 46:61
                                         // + literal: Const { ty: fn(std::option::Option<libproto::Response>, [closure@cita-jsonrpc/src/mq_handler.rs:46:62: 46:64]) -> Result<libproto::Response, ()> {std::option::Option::<libproto::Response>::ok_or_else::<(), [closure@cita-jsonrpc/src/mq_handler.rs:46:62: 46:64]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/mq_handler.rs:46:62: 46:64], val: Value(<ZST>) }
    }

    bb26: {
        _34 = <Result<libproto::Response, ()> as Try>::branch(move _35) -> [return: bb27, unwind: bb95]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
                                         // + literal: Const { ty: fn(Result<libproto::Response, ()>) -> ControlFlow<<Result<libproto::Response, ()> as Try>::Residual, <Result<libproto::Response, ()> as Try>::Output> {<Result<libproto::Response, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb27: {
        _38 = discriminant(_34);         // scope 2 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
        switchInt(move _38) -> [0: bb28, 1: bb30, otherwise: bb29]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
    }

    bb28: {
        _39 = move ((_34 as Continue).0: libproto::Response); // scope 2 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
        _124 = const true;               // scope 11 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
        _33 = move _39;                  // scope 11 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
        _41 = &(_33.0: std::vec::Vec<u8>); // scope 7 at cita-jsonrpc/src/mq_handler.rs:51:38: 51:57
        _42 = log::Level::Trace;         // scope 13 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _45 = &_42;                      // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _117 = const _;                  // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(MqHandler::handle, [], Some(promoted[2])) }
        _44 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _45, _117) -> [return: bb34, unwind: bb112]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb29: {
        unreachable;                     // scope 2 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
    }

    bb30: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb113, unwind: bb95]; // scope 9 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:48:19: 48:20
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, ()>, val: Value(<ZST>) }
    }

    bb31: {
        _43 = const false;               // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb33;                    // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb32: {
        _47 = &_42;                      // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _49 = log::max_level() -> [return: bb35, unwind: bb112]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb33: {
        switchInt(move _43) -> [0: bb40, otherwise: bb37]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb34: {
        switchInt(move _44) -> [0: bb31, otherwise: bb32]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb35: {
        _48 = &_49;                      // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _46 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _47, move _48) -> [return: bb36, unwind: bb112]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb36: {
        _43 = move _46;                  // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb33;                    // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb37: {
        _116 = const _;                  // scope 14 at cita-jsonrpc/src/mq_handler.rs:52:28: 52:59
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:52:28: 52:59
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(MqHandler::handle, [], Some(promoted[1])) }
        _52 = _116 as &[&str] (Pointer(Unsize)); // scope 14 at cita-jsonrpc/src/mq_handler.rs:52:28: 52:59
        _57 = &_41;                      // scope 14 at cita-jsonrpc/src/mq_handler.rs:52:61: 52:71
        _56 = core::fmt::ArgumentV1::<'_>::new_debug::<&Vec<u8>>(_57) -> [return: bb38, unwind: bb112]; // scope 14 at cita-jsonrpc/src/mq_handler.rs:52:61: 52:71
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:52:61: 52:71
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b &Vec<u8>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&Vec<u8>>}, val: Value(<ZST>) }
    }

    bb38: {
        _55 = [move _56];                // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _54 = &_55;                      // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _53 = _54 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _51 = Arguments::<'_>::new_v1(move _52, move _53) -> [return: bb39, unwind: bb112]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb39: {
        _115 = const _;                  // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(MqHandler::handle, [], Some(promoted[0])) }
        _50 = log::__private_api_log(move _51, _42, _115) -> [return: bb114, unwind: bb112]; // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb40: {
        _67 = &((*_1).0: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:42
        _66 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Deref>::deref(move _67) -> [return: bb41, unwind: bb112]; // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:53:21: 53:42
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb41: {
        _65 = _66;                       // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:42
        _64 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>::lock(move _65) -> [return: bb42, unwind: bb112]; // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:53:36: 53:40
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>) -> lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>::lock}, val: Value(<ZST>) }
    }

    bb42: {
        _63 = &mut _64;                  // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:61
        _62 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> as DerefMut>::deref_mut(move _63) -> [return: bb43, unwind: bb94]; // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:53:21: 53:61
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb43: {
        _61 = _62;                       // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:61
        _60 = HashMap::<Vec<u8>, TransferType>::remove::<Vec<u8>>(move _61, _41) -> [return: bb44, unwind: bb94]; // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 53:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:53:43: 53:49
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut HashMap<Vec<u8>, TransferType>, &'b Vec<u8>) -> std::option::Option<TransferType> {HashMap::<Vec<u8>, TransferType>::remove::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb44: {
        _69 = &_41;                      // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:73: 55:22
        _68 = [closure@cita-jsonrpc/src/mq_handler.rs:53:73: 53:75] { request_id: move _69 }; // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:73: 55:22
                                         // closure
                                         // + def_id: DefId(0:258 ~ cita_jsonrpc[a6db]::mq_handler::{impl#0}::handle::{closure#2})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&&std::vec::Vec<u8>,),
                                         // ]
        _59 = std::option::Option::<TransferType>::ok_or_else::<(), [closure@cita-jsonrpc/src/mq_handler.rs:53:73: 53:75]>(move _60, move _68) -> [return: bb45, unwind: bb94]; // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:23
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:53:62: 53:72
                                         // + literal: Const { ty: fn(std::option::Option<TransferType>, [closure@cita-jsonrpc/src/mq_handler.rs:53:73: 53:75]) -> Result<TransferType, ()> {std::option::Option::<TransferType>::ok_or_else::<(), [closure@cita-jsonrpc/src/mq_handler.rs:53:73: 53:75]>}, val: Value(<ZST>) }
    }

    bb45: {
        _58 = <Result<TransferType, ()> as Try>::branch(move _59) -> [return: bb46, unwind: bb94]; // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
                                         // + literal: Const { ty: fn(Result<TransferType, ()>) -> ControlFlow<<Result<TransferType, ()> as Try>::Residual, <Result<TransferType, ()> as Try>::Output> {<Result<TransferType, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb46: {
        _70 = discriminant(_58);         // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
        switchInt(move _70) -> [0: bb47, 1: bb49, otherwise: bb48]; // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
    }

    bb47: {
        _71 = move ((_58 as Continue).0: helper::TransferType); // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
        _127 = const true;               // scope 18 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
        _128 = const true;               // scope 18 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
        _129 = const true;               // scope 18 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
        _130 = const true;               // scope 18 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
        _40 = move _71;                  // scope 18 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
        drop(_64) -> [return: bb51, unwind: bb110]; // scope 7 at cita-jsonrpc/src/mq_handler.rs:56:18: 56:19
    }

    bb48: {
        unreachable;                     // scope 13 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
    }

    bb49: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb50, unwind: bb94]; // scope 16 at cita-jsonrpc/src/mq_handler.rs:53:21: 55:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:55:23: 55:24
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, ()>, val: Value(<ZST>) }
    }

    bb50: {
        drop(_64) -> [return: bb89, unwind: bb112]; // scope 7 at cita-jsonrpc/src/mq_handler.rs:56:18: 56:19
    }

    bb51: {
        _72 = discriminant(_40);         // scope 12 at cita-jsonrpc/src/mq_handler.rs:58:23: 58:27
        switchInt(move _72) -> [0: bb54, 1: bb52, otherwise: bb53]; // scope 12 at cita-jsonrpc/src/mq_handler.rs:58:17: 58:27
    }

    bb52: {
        _130 = const false;              // scope 12 at cita-jsonrpc/src/mq_handler.rs:66:46: 66:54
        _82 = move (((_40 as WEBSOCKET).0: (jsonrpc_types::rpc_request::RequestInfo, ws::Sender)).0: jsonrpc_types::rpc_request::RequestInfo); // scope 12 at cita-jsonrpc/src/mq_handler.rs:66:46: 66:54
        _129 = const false;              // scope 12 at cita-jsonrpc/src/mq_handler.rs:66:56: 66:62
        _83 = move (((_40 as WEBSOCKET).0: (jsonrpc_types::rpc_request::RequestInfo, ws::Sender)).1: ws::Sender); // scope 12 at cita-jsonrpc/src/mq_handler.rs:66:56: 66:62
        _124 = const false;              // scope 24 at cita-jsonrpc/src/mq_handler.rs:68:74: 68:81
        _90 = move _33;                  // scope 24 at cita-jsonrpc/src/mq_handler.rs:68:74: 68:81
        _89 = <jsonrpc_types::rpc_response::Output as OutputExt>::from_res_info(move _90, move _82) -> [return: bb61, unwind: bb93]; // scope 24 at cita-jsonrpc/src/mq_handler.rs:68:52: 68:92
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:68:52: 68:73
                                         // + literal: Const { ty: fn(libproto::Response, RequestInfo) -> jsonrpc_types::rpc_response::Output {<jsonrpc_types::rpc_response::Output as OutputExt>::from_res_info}, val: Value(<ZST>) }
    }

    bb53: {
        unreachable;                     // scope 12 at cita-jsonrpc/src/mq_handler.rs:58:23: 58:27
    }

    bb54: {
        _128 = const false;              // scope 12 at cita-jsonrpc/src/mq_handler.rs:59:41: 59:49
        _73 = move (((_40 as HTTP).0: (jsonrpc_types::rpc_request::RequestInfo, futures::Complete<jsonrpc_types::rpc_response::Output>)).0: jsonrpc_types::rpc_request::RequestInfo); // scope 12 at cita-jsonrpc/src/mq_handler.rs:59:41: 59:49
        _127 = const false;              // scope 12 at cita-jsonrpc/src/mq_handler.rs:59:51: 59:57
        _74 = move (((_40 as HTTP).0: (jsonrpc_types::rpc_request::RequestInfo, futures::Complete<jsonrpc_types::rpc_response::Output>)).1: futures::Complete<jsonrpc_types::rpc_response::Output>); // scope 12 at cita-jsonrpc/src/mq_handler.rs:59:51: 59:57
        _126 = const true;               // scope 19 at cita-jsonrpc/src/mq_handler.rs:60:25: 60:31
        _78 = move _74;                  // scope 19 at cita-jsonrpc/src/mq_handler.rs:60:25: 60:31
        _124 = const false;              // scope 19 at cita-jsonrpc/src/mq_handler.rs:61:57: 61:64
        _80 = move _33;                  // scope 19 at cita-jsonrpc/src/mq_handler.rs:61:57: 61:64
        _79 = <jsonrpc_types::rpc_response::Output as OutputExt>::from_res_info(move _80, move _73) -> [return: bb55, unwind: bb101]; // scope 19 at cita-jsonrpc/src/mq_handler.rs:61:35: 61:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:61:35: 61:56
                                         // + literal: Const { ty: fn(libproto::Response, RequestInfo) -> jsonrpc_types::rpc_response::Output {<jsonrpc_types::rpc_response::Output as OutputExt>::from_res_info}, val: Value(<ZST>) }
    }

    bb55: {
        _126 = const false;              // scope 19 at cita-jsonrpc/src/mq_handler.rs:60:25: 61:76
        _77 = futures::Complete::<jsonrpc_types::rpc_response::Output>::send(move _78, move _79) -> [return: bb56, unwind: bb101]; // scope 19 at cita-jsonrpc/src/mq_handler.rs:60:25: 61:76
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:61:30: 61:34
                                         // + literal: Const { ty: fn(futures::Complete<jsonrpc_types::rpc_response::Output>, jsonrpc_types::rpc_response::Output) -> Result<(), jsonrpc_types::rpc_response::Output> {futures::Complete::<jsonrpc_types::rpc_response::Output>::send}, val: Value(<ZST>) }
    }

    bb56: {
        _126 = const false;              // scope 19 at cita-jsonrpc/src/mq_handler.rs:61:75: 61:76
        _76 = Result::<(), jsonrpc_types::rpc_response::Output>::map_err::<(), [closure@cita-jsonrpc/src/mq_handler.rs:62:38: 62:41]>(move _77, const ZeroSized: [closure@cita-jsonrpc/src/mq_handler.rs:62:38: 62:41]) -> [return: bb57, unwind: bb110]; // scope 19 at cita-jsonrpc/src/mq_handler.rs:60:25: 64:31
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:62:30: 62:37
                                         // + literal: Const { ty: fn(Result<(), jsonrpc_types::rpc_response::Output>, [closure@cita-jsonrpc/src/mq_handler.rs:62:38: 62:41]) -> Result<(), ()> {Result::<(), jsonrpc_types::rpc_response::Output>::map_err::<(), [closure@cita-jsonrpc/src/mq_handler.rs:62:38: 62:41]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/mq_handler.rs:62:38: 62:41], val: Value(<ZST>) }
    }

    bb57: {
        _75 = <Result<(), ()> as Try>::branch(move _76) -> [return: bb58, unwind: bb110]; // scope 19 at cita-jsonrpc/src/mq_handler.rs:60:25: 64:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:60:25: 64:32
                                         // + literal: Const { ty: fn(Result<(), ()>) -> ControlFlow<<Result<(), ()> as Try>::Residual, <Result<(), ()> as Try>::Output> {<Result<(), ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb58: {
        _81 = discriminant(_75);         // scope 19 at cita-jsonrpc/src/mq_handler.rs:60:25: 64:32
        switchInt(move _81) -> [0: bb76, 1: bb60, otherwise: bb59]; // scope 19 at cita-jsonrpc/src/mq_handler.rs:60:25: 64:32
    }

    bb59: {
        unreachable;                     // scope 19 at cita-jsonrpc/src/mq_handler.rs:60:25: 64:32
    }

    bb60: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb115, unwind: bb110]; // scope 21 at cita-jsonrpc/src/mq_handler.rs:60:25: 64:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:64:31: 64:32
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, ()>, val: Value(<ZST>) }
    }

    bb61: {
        _88 = &_89;                      // scope 24 at cita-jsonrpc/src/mq_handler.rs:68:51: 68:92
        _87 = serde_json::to_string::<jsonrpc_types::rpc_response::Output>(_88) -> [return: bb62, unwind: bb92]; // scope 24 at cita-jsonrpc/src/mq_handler.rs:68:29: 68:93
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:68:29: 68:50
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::rpc_response::Output) -> Result<std::string::String, serde_json::Error> {serde_json::to_string::<jsonrpc_types::rpc_response::Output>}, val: Value(<ZST>) }
    }

    bb62: {
        _86 = Result::<std::string::String, serde_json::Error>::map_err::<(), [closure@cita-jsonrpc/src/mq_handler.rs:69:42: 69:45]>(move _87, const ZeroSized: [closure@cita-jsonrpc/src/mq_handler.rs:69:42: 69:45]) -> [return: bb63, unwind: bb92]; // scope 24 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:35
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:69:34: 69:41
                                         // + literal: Const { ty: fn(Result<std::string::String, serde_json::Error>, [closure@cita-jsonrpc/src/mq_handler.rs:69:42: 69:45]) -> Result<std::string::String, ()> {Result::<std::string::String, serde_json::Error>::map_err::<(), [closure@cita-jsonrpc/src/mq_handler.rs:69:42: 69:45]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/mq_handler.rs:69:42: 69:45], val: Value(<ZST>) }
    }

    bb63: {
        _85 = <Result<std::string::String, ()> as Try>::branch(move _86) -> [return: bb64, unwind: bb92]; // scope 24 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:36
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:68:29: 71:36
                                         // + literal: Const { ty: fn(Result<std::string::String, ()>) -> ControlFlow<<Result<std::string::String, ()> as Try>::Residual, <Result<std::string::String, ()> as Try>::Output> {<Result<std::string::String, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb64: {
        _91 = discriminant(_85);         // scope 24 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:36
        switchInt(move _91) -> [0: bb65, 1: bb67, otherwise: bb66]; // scope 24 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:36
    }

    bb65: {
        _92 = move ((_85 as Continue).0: std::string::String); // scope 24 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:36
        _125 = const true;               // scope 29 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:36
        _84 = move _92;                  // scope 29 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:36
        drop(_89) -> [return: bb69, unwind: bb99]; // scope 24 at cita-jsonrpc/src/mq_handler.rs:71:36: 71:37
    }

    bb66: {
        unreachable;                     // scope 24 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:36
    }

    bb67: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb68, unwind: bb92]; // scope 27 at cita-jsonrpc/src/mq_handler.rs:68:29: 71:36
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:71:35: 71:36
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, ()>, val: Value(<ZST>) }
    }

    bb68: {
        drop(_89) -> [return: bb87, unwind: bb93]; // scope 24 at cita-jsonrpc/src/mq_handler.rs:71:36: 71:37
    }

    bb69: {
        _96 = &_83;                      // scope 25 at cita-jsonrpc/src/mq_handler.rs:72:25: 72:47
        _125 = const false;              // scope 25 at cita-jsonrpc/src/mq_handler.rs:72:37: 72:46
        _97 = move _84;                  // scope 25 at cita-jsonrpc/src/mq_handler.rs:72:37: 72:46
        _95 = ws::Sender::send::<std::string::String>(move _96, move _97) -> [return: bb70, unwind: bb99]; // scope 25 at cita-jsonrpc/src/mq_handler.rs:72:25: 72:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:72:32: 72:36
                                         // + literal: Const { ty: for<'a> fn(&'a ws::Sender, std::string::String) -> Result<(), ws::Error> {ws::Sender::send::<std::string::String>}, val: Value(<ZST>) }
    }

    bb70: {
        _94 = Result::<(), ws::Error>::map_err::<(), [closure@cita-jsonrpc/src/mq_handler.rs:72:56: 72:59]>(move _95, const ZeroSized: [closure@cita-jsonrpc/src/mq_handler.rs:72:56: 72:59]) -> [return: bb71, unwind: bb99]; // scope 25 at cita-jsonrpc/src/mq_handler.rs:72:25: 74:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:72:48: 72:55
                                         // + literal: Const { ty: fn(Result<(), ws::Error>, [closure@cita-jsonrpc/src/mq_handler.rs:72:56: 72:59]) -> Result<(), ()> {Result::<(), ws::Error>::map_err::<(), [closure@cita-jsonrpc/src/mq_handler.rs:72:56: 72:59]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/mq_handler.rs:72:56: 72:59], val: Value(<ZST>) }
    }

    bb71: {
        _93 = <Result<(), ()> as Try>::branch(move _94) -> [return: bb72, unwind: bb99]; // scope 25 at cita-jsonrpc/src/mq_handler.rs:72:25: 74:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:72:25: 74:28
                                         // + literal: Const { ty: fn(Result<(), ()>) -> ControlFlow<<Result<(), ()> as Try>::Residual, <Result<(), ()> as Try>::Output> {<Result<(), ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb72: {
        _98 = discriminant(_93);         // scope 25 at cita-jsonrpc/src/mq_handler.rs:72:25: 74:28
        switchInt(move _98) -> [0: bb73, 1: bb75, otherwise: bb74]; // scope 25 at cita-jsonrpc/src/mq_handler.rs:72:25: 74:28
    }

    bb73: {
        _125 = const false;              // scope 24 at cita-jsonrpc/src/mq_handler.rs:75:21: 75:22
        drop(_83) -> [return: bb76, unwind: bb110]; // scope 12 at cita-jsonrpc/src/mq_handler.rs:75:21: 75:22
    }

    bb74: {
        unreachable;                     // scope 25 at cita-jsonrpc/src/mq_handler.rs:72:25: 74:28
    }

    bb75: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(const Result::<Infallible, ()>::Err(())) -> [return: bb116, unwind: bb99]; // scope 31 at cita-jsonrpc/src/mq_handler.rs:72:25: 74:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:74:27: 74:28
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<Infallible, ()>, val: Value(<ZST>) }
    }

    bb76: {
        _127 = const false;              // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
        _128 = const false;              // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
        _129 = const false;              // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
        _130 = const false;              // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
        _124 = const false;              // scope 2 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
        goto -> bb86;                    // scope 2 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb77: {
        _100 = const false;              // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb79;                    // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb78: {
        _104 = &_99;                     // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _106 = log::max_level() -> [return: bb81, unwind: bb95]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb79: {
        switchInt(move _100) -> [0: bb86, otherwise: bb83]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb80: {
        switchInt(move _101) -> [0: bb77, otherwise: bb78]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb81: {
        _105 = &_106;                    // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _103 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _104, move _105) -> [return: bb82, unwind: bb95]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb82: {
        _100 = move _103;                // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb79;                    // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb83: {
        _119 = const _;                  // scope 34 at cita-jsonrpc/src/mq_handler.rs:79:23: 79:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:79:23: 79:48
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(MqHandler::handle, [], Some(promoted[4])) }
        _109 = _119 as &[&str] (Pointer(Unsize)); // scope 34 at cita-jsonrpc/src/mq_handler.rs:79:23: 79:48
        _114 = &_2;                      // scope 34 at cita-jsonrpc/src/mq_handler.rs:79:50: 79:53
        _113 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_114) -> [return: bb84, unwind: bb95]; // scope 34 at cita-jsonrpc/src/mq_handler.rs:79:50: 79:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:79:50: 79:53
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb84: {
        _112 = [move _113];              // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _111 = &_112;                    // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _110 = _111 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _108 = Arguments::<'_>::new_v1(move _109, move _110) -> [return: bb85, unwind: bb95]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb85: {
        _118 = const _;                  // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(MqHandler::handle, [], Some(promoted[3])) }
        _107 = log::__private_api_log(move _108, _99, _118) -> [return: bb117, unwind: bb95]; // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb86: {
        _0 = const Result::<(), ()>::Ok(()); // scope 2 at cita-jsonrpc/src/mq_handler.rs:82:9: 82:15
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: Result<(), ()>, val: Value(Scalar(0x00)) }
        drop(_20) -> bb91;               // scope 0 at cita-jsonrpc/src/mq_handler.rs:83:5: 83:6
    }

    bb87: {
        _125 = const false;              // scope 24 at cita-jsonrpc/src/mq_handler.rs:75:21: 75:22
        drop(_83) -> [return: bb88, unwind: bb110]; // scope 12 at cita-jsonrpc/src/mq_handler.rs:75:21: 75:22
    }

    bb88: {
        goto -> bb89;                    // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb89: {
        _127 = const false;              // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
        _128 = const false;              // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
        _129 = const false;              // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
        _130 = const false;              // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
        switchInt(_124) -> [0: bb90, otherwise: bb97]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb90: {
        _124 = const false;              // scope 2 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
        drop(_20) -> bb91;               // scope 0 at cita-jsonrpc/src/mq_handler.rs:83:5: 83:6
    }

    bb91: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:83:6: 83:6
    }

    bb92 (cleanup): {
        drop(_89) -> bb93;               // scope 24 at cita-jsonrpc/src/mq_handler.rs:71:36: 71:37
    }

    bb93 (cleanup): {
        drop(_83) -> bb110;              // scope 12 at cita-jsonrpc/src/mq_handler.rs:75:21: 75:22
    }

    bb94 (cleanup): {
        drop(_64) -> bb112;              // scope 7 at cita-jsonrpc/src/mq_handler.rs:56:18: 56:19
    }

    bb95 (cleanup): {
        drop(_20) -> bb96;               // scope 0 at cita-jsonrpc/src/mq_handler.rs:83:5: 83:6
    }

    bb96 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:33:5: 83:6
    }

    bb97: {
        drop(_33) -> [return: bb90, unwind: bb95]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb98 (cleanup): {
        drop(_84) -> bb93;               // scope 24 at cita-jsonrpc/src/mq_handler.rs:75:21: 75:22
    }

    bb99 (cleanup): {
        switchInt(_125) -> [0: bb93, otherwise: bb98]; // scope 24 at cita-jsonrpc/src/mq_handler.rs:75:21: 75:22
    }

    bb100 (cleanup): {
        drop(_78) -> bb110;              // scope 19 at cita-jsonrpc/src/mq_handler.rs:61:75: 61:76
    }

    bb101 (cleanup): {
        switchInt(_126) -> [0: bb110, otherwise: bb100]; // scope 19 at cita-jsonrpc/src/mq_handler.rs:61:75: 61:76
    }

    bb102 (cleanup): {
        switchInt(_128) -> [0: bb103, otherwise: bb105]; // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb103 (cleanup): {
        switchInt(_127) -> [0: bb112, otherwise: bb104]; // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb104 (cleanup): {
        drop((((_40 as HTTP).0: (jsonrpc_types::rpc_request::RequestInfo, futures::Complete<jsonrpc_types::rpc_response::Output>)).1: futures::Complete<jsonrpc_types::rpc_response::Output>)) -> bb112; // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb105 (cleanup): {
        drop((((_40 as HTTP).0: (jsonrpc_types::rpc_request::RequestInfo, futures::Complete<jsonrpc_types::rpc_response::Output>)).0: jsonrpc_types::rpc_request::RequestInfo)) -> bb103; // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb106 (cleanup): {
        switchInt(_130) -> [0: bb107, otherwise: bb109]; // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb107 (cleanup): {
        switchInt(_129) -> [0: bb112, otherwise: bb108]; // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb108 (cleanup): {
        drop((((_40 as WEBSOCKET).0: (jsonrpc_types::rpc_request::RequestInfo, ws::Sender)).1: ws::Sender)) -> bb112; // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb109 (cleanup): {
        drop((((_40 as WEBSOCKET).0: (jsonrpc_types::rpc_request::RequestInfo, ws::Sender)).0: jsonrpc_types::rpc_request::RequestInfo)) -> bb107; // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb110 (cleanup): {
        _131 = discriminant(_40);        // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
        switchInt(move _131) -> [0: bb102, otherwise: bb106]; // scope 7 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb111 (cleanup): {
        drop(_33) -> bb95;               // scope 2 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb112 (cleanup): {
        switchInt(_124) -> [0: bb95, otherwise: bb111]; // scope 2 at cita-jsonrpc/src/mq_handler.rs:77:13: 77:14
    }

    bb113: {
        goto -> bb90;                    // scope 9 at cita-jsonrpc/src/mq_handler.rs:46:31: 48:20
    }

    bb114: {
        goto -> bb40;                    // scope 14 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb115: {
        goto -> bb88;                    // scope 21 at cita-jsonrpc/src/mq_handler.rs:60:25: 64:32
    }

    bb116: {
        goto -> bb87;                    // scope 31 at cita-jsonrpc/src/mq_handler.rs:72:25: 74:28
    }

    bb117: {
        goto -> bb86;                    // scope 34 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:52:21: 52:72
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:52:21: 52:72

    bb0: {
        _3 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/mq_handler.rs"; // scope 0 at cita-jsonrpc/src/mq_handler.rs:52:21: 52:72
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:52:21: 52:72
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/mq_handler.rs:52:21: 52:72
        _1 = (move _2, move _4, move _6, const 52_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:52:28: 52:59
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/mq_handler.rs:52:28: 52:59

    bb0: {
        _1 = [const "from response request_id "]; // scope 0 at cita-jsonrpc/src/mq_handler.rs:52:28: 52:59
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:52:28: 52:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/mq_handler.rs:52:28: 52:59
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:52:28: 52:59
    }
}

promoted[2] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:79:17: 79:54
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:79:17: 79:54

    bb0: {
        _3 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/mq_handler.rs"; // scope 0 at cita-jsonrpc/src/mq_handler.rs:79:17: 79:54
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:79:17: 79:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/mq_handler.rs:79:17: 79:54
        _1 = (move _2, move _4, move _6, const 79_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:79:23: 79:48
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/mq_handler.rs:79:23: 79:48

    bb0: {
        _1 = [const "receive unexpect key "]; // scope 0 at cita-jsonrpc/src/mq_handler.rs:79:23: 79:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:79:23: 79:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/mq_handler.rs:79:23: 79:48
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:79:23: 79:48
    }
}

promoted[5] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[6] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:34:9: 34:51
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:34:9: 34:51

    bb0: {
        _3 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/mq_handler.rs"; // scope 0 at cita-jsonrpc/src/mq_handler.rs:34:9: 34:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:34:9: 34:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/mq_handler.rs:34:9: 34:51
        _1 = (move _2, move _4, move _6, const 34_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[7] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:34:16: 34:45
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/mq_handler.rs:34:16: 34:45

    bb0: {
        _1 = [const "get msg from routing_key "]; // scope 0 at cita-jsonrpc/src/mq_handler.rs:34:16: 34:45
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:34:16: 34:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/mq_handler.rs:34:16: 34:45
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:34:16: 34:45
    }
}

promoted[8] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#0}(_1: [closure@cita-jsonrpc/src/mq_handler.rs:36:55: 36:58], _2: TryFromConvertError) -> () {
    debug e => const TryFromConvertError(()); // in scope 0 at cita-jsonrpc/src/mq_handler.rs:36:56: 36:57
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:36:59: 36:59
    let _3: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _6: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _8: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _9: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _12: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _13: &[&str];                // in scope 0 at cita-jsonrpc/src/mq_handler.rs:37:20: 37:36
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:37:38: 37:39
    let _18: &libproto::TryFromConvertError; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:37:38: 37:39
    scope 1 {
        debug lvl => _3;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _19: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _20: &[&str; 1];         // in scope 1 at cita-jsonrpc/src/mq_handler.rs:37:20: 37:36
        let mut _21: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _3 = log::Level::Error;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _6 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _21 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(MqHandler::handle::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _5 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _6, _21) -> bb4; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _8 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _10 = log::max_level() -> bb5;   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _9 = &_10;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _7 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _8, move _9) -> bb6; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = move _7;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _20 = const _;                   // scope 1 at cita-jsonrpc/src/mq_handler.rs:37:20: 37:36
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:37:20: 37:36
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(MqHandler::handle::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _13 = _20 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/mq_handler.rs:37:20: 37:36
        _18 = &_2;                       // scope 1 at cita-jsonrpc/src/mq_handler.rs:37:38: 37:39
        _17 = core::fmt::ArgumentV1::<'_>::new_debug::<TryFromConvertError>(_18) -> bb8; // scope 1 at cita-jsonrpc/src/mq_handler.rs:37:38: 37:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:37:38: 37:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b TryFromConvertError) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<TryFromConvertError>}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = [move _17];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = &_16;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> bb9; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(MqHandler::handle::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _11 = log::__private_api_log(move _12, _3, _19) -> bb10; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:38:10: 38:10
    }
}

promoted[0] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:37:13: 37:40
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:37:13: 37:40

    bb0: {
        _3 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/mq_handler.rs"; // scope 0 at cita-jsonrpc/src/mq_handler.rs:37:13: 37:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:37:13: 37:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/mq_handler.rs:37:13: 37:40
        _1 = (move _2, move _4, move _6, const 37_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:37:20: 37:36
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/mq_handler.rs:37:20: 37:36

    bb0: {
        _1 = [const "try_from: "];       // scope 0 at cita-jsonrpc/src/mq_handler.rs:37:20: 37:36
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:37:20: 37:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/mq_handler.rs:37:20: 37:36
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:37:20: 37:36
    }
}

promoted[2] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#0}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#1}(_1: [closure@cita-jsonrpc/src/mq_handler.rs:46:62: 46:64]) -> () {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:46:65: 46:65
    let _2: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _3: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _5: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _7: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _8: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _9: log::LevelFilter;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _11: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _12: &[&str];                // in scope 0 at cita-jsonrpc/src/mq_handler.rs:47:28: 47:52
    scope 1 {
        debug lvl => _2;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _13: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _14: &[&str; 1];         // in scope 1 at cita-jsonrpc/src/mq_handler.rs:47:28: 47:52
        let mut _15: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _2 = log::Level::Error;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _5 = &_2;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _15 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(MqHandler::handle::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _4 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _5, _15) -> bb4; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _7 = &_2;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _9 = log::max_level() -> bb5;    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _3) -> [0: bb9, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _4) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _8 = &_9;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _6 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _7, move _8) -> bb6; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _3 = move _6;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _14 = const _;                   // scope 1 at cita-jsonrpc/src/mq_handler.rs:47:28: 47:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:47:28: 47:52
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(MqHandler::handle::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _12 = _14 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/mq_handler.rs:47:28: 47:52
        _11 = Arguments::<'_>::new_const(move _12) -> bb8; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb8: {
        _13 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(MqHandler::handle::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _10 = log::__private_api_log(move _11, _2, _13) -> bb9; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:48:18: 48:18
    }
}

promoted[0] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#1}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:47:21: 47:53
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:47:21: 47:53

    bb0: {
        _3 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/mq_handler.rs"; // scope 0 at cita-jsonrpc/src/mq_handler.rs:47:21: 47:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:47:21: 47:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/mq_handler.rs:47:21: 47:53
        _1 = (move _2, move _4, move _6, const 47_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:47:28: 47:52
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/mq_handler.rs:47:28: 47:52

    bb0: {
        _1 = [const "empty response message"]; // scope 0 at cita-jsonrpc/src/mq_handler.rs:47:28: 47:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:47:28: 47:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/mq_handler.rs:47:28: 47:52
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:47:28: 47:52
    }
}

promoted[2] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#1}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#2}(_1: [closure@cita-jsonrpc/src/mq_handler.rs:53:73: 53:75]) -> () {
    debug request_id => (*(_1.0: &&std::vec::Vec<u8>)); // in scope 0 at cita-jsonrpc/src/mq_handler.rs:51:25: 51:35
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:76: 53:76
    let _2: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _3: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _5: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _7: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _8: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _9: log::LevelFilter;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _11: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _12: &[&str];                // in scope 0 at cita-jsonrpc/src/mq_handler.rs:54:31: 54:61
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:54:63: 54:73
    let mut _20: &&std::vec::Vec<u8>;    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:53:73: 55:22
    scope 1 {
        debug lvl => _2;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _17: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _18: &[&str; 1];         // in scope 1 at cita-jsonrpc/src/mq_handler.rs:54:31: 54:61
        let mut _19: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _2 = log::Level::Warn;           // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _5 = &_2;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _19 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(MqHandler::handle::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _4 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _5, _19) -> bb4; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _7 = &_2;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _9 = log::max_level() -> bb5;    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _3) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _4) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _8 = &_9;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _6 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _7, move _8) -> bb6; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _3 = move _6;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _18 = const _;                   // scope 1 at cita-jsonrpc/src/mq_handler.rs:54:31: 54:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:54:31: 54:61
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(MqHandler::handle::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _12 = _18 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/mq_handler.rs:54:31: 54:61
        _20 = deref_copy (_1.0: &&std::vec::Vec<u8>); // scope 1 at cita-jsonrpc/src/mq_handler.rs:54:63: 54:73
        _16 = core::fmt::ArgumentV1::<'_>::new_debug::<&Vec<u8>>(_20) -> bb8; // scope 1 at cita-jsonrpc/src/mq_handler.rs:54:63: 54:73
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:54:63: 54:73
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &Vec<u8>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&Vec<u8>>}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = [move _16];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = &_15;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _13 = _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> bb9; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(MqHandler::handle::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _10 = log::__private_api_log(move _11, _2, _17) -> bb10; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:55:22: 55:22
    }
}

promoted[0] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#2}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:54:25: 54:74
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:54:25: 54:74

    bb0: {
        _3 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/mq_handler.rs"; // scope 0 at cita-jsonrpc/src/mq_handler.rs:54:25: 54:74
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:54:25: 54:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/mq_handler.rs:54:25: 54:74
        _1 = (move _2, move _4, move _6, const 54_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#2}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:54:31: 54:61
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/mq_handler.rs:54:31: 54:61

    bb0: {
        _1 = [const "receive lost request_id "]; // scope 0 at cita-jsonrpc/src/mq_handler.rs:54:31: 54:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:54:31: 54:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/mq_handler.rs:54:31: 54:61
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:54:31: 54:61
    }
}

promoted[2] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#2}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#3}(_1: [closure@cita-jsonrpc/src/mq_handler.rs:62:38: 62:41], _2: jsonrpc_types::rpc_response::Output) -> () {
    debug e => _2;                       // in scope 0 at cita-jsonrpc/src/mq_handler.rs:62:39: 62:40
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:62:42: 62:42
    let _3: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _6: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _8: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _9: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _12: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _13: &[&str];                // in scope 0 at cita-jsonrpc/src/mq_handler.rs:63:40: 63:52
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:63:54: 63:55
    let _18: &jsonrpc_types::rpc_response::Output; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:63:54: 63:55
    scope 1 {
        debug lvl => _3;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _19: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _20: &[&str; 1];         // in scope 1 at cita-jsonrpc/src/mq_handler.rs:63:40: 63:52
        let mut _21: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _3 = log::Level::Error;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _6 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _21 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(MqHandler::handle::{closure#3}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _5 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _6, _21) -> [return: bb4, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _8 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _10 = log::max_level() -> [return: bb5, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _9 = &_10;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _7 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _8, move _9) -> [return: bb6, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = move _7;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _20 = const _;                   // scope 1 at cita-jsonrpc/src/mq_handler.rs:63:40: 63:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:63:40: 63:52
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(MqHandler::handle::{closure#3}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _13 = _20 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/mq_handler.rs:63:40: 63:52
        _18 = &_2;                       // scope 1 at cita-jsonrpc/src/mq_handler.rs:63:54: 63:55
        _17 = core::fmt::ArgumentV1::<'_>::new_debug::<jsonrpc_types::rpc_response::Output>(_18) -> [return: bb8, unwind: bb12]; // scope 1 at cita-jsonrpc/src/mq_handler.rs:63:54: 63:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:63:54: 63:55
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b jsonrpc_types::rpc_response::Output) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<jsonrpc_types::rpc_response::Output>}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = [move _17];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = &_16;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb9, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(MqHandler::handle::{closure#3}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _11 = log::__private_api_log(move _12, _3, _19) -> [return: bb14, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_2) -> bb11;                // scope 0 at cita-jsonrpc/src/mq_handler.rs:64:29: 64:30
    }

    bb11: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:64:30: 64:30
    }

    bb12 (cleanup): {
        drop(_2) -> bb13;                // scope 0 at cita-jsonrpc/src/mq_handler.rs:64:29: 64:30
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:62:38: 64:30
    }

    bb14: {
        goto -> bb10;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#3}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:63:33: 63:56
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:63:33: 63:56

    bb0: {
        _3 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/mq_handler.rs"; // scope 0 at cita-jsonrpc/src/mq_handler.rs:63:33: 63:56
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:63:33: 63:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/mq_handler.rs:63:33: 63:56
        _1 = (move _2, move _4, move _6, const 63_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#3}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:63:40: 63:52
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/mq_handler.rs:63:40: 63:52

    bb0: {
        _1 = [const "http: "];           // scope 0 at cita-jsonrpc/src/mq_handler.rs:63:40: 63:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:63:40: 63:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/mq_handler.rs:63:40: 63:52
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:63:40: 63:52
    }
}

promoted[2] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#3}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#4}(_1: [closure@cita-jsonrpc/src/mq_handler.rs:69:42: 69:45], _2: serde_json::Error) -> () {
    debug e => _2;                       // in scope 0 at cita-jsonrpc/src/mq_handler.rs:69:43: 69:44
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:69:46: 69:46
    let _3: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _6: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _8: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _9: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _12: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _13: &[&str];                // in scope 0 at cita-jsonrpc/src/mq_handler.rs:70:44: 70:54
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:70:56: 70:57
    let _18: &serde_json::Error;         // in scope 0 at cita-jsonrpc/src/mq_handler.rs:70:56: 70:57
    scope 1 {
        debug lvl => _3;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _19: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _20: &[&str; 1];         // in scope 1 at cita-jsonrpc/src/mq_handler.rs:70:44: 70:54
        let mut _21: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _3 = log::Level::Error;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _6 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _21 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(MqHandler::handle::{closure#4}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _5 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _6, _21) -> [return: bb4, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _8 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _10 = log::max_level() -> [return: bb5, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _9 = &_10;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _7 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _8, move _9) -> [return: bb6, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = move _7;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _20 = const _;                   // scope 1 at cita-jsonrpc/src/mq_handler.rs:70:44: 70:54
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:70:44: 70:54
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(MqHandler::handle::{closure#4}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _13 = _20 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/mq_handler.rs:70:44: 70:54
        _18 = &_2;                       // scope 1 at cita-jsonrpc/src/mq_handler.rs:70:56: 70:57
        _17 = core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>(_18) -> [return: bb8, unwind: bb12]; // scope 1 at cita-jsonrpc/src/mq_handler.rs:70:56: 70:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:70:56: 70:57
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b serde_json::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<serde_json::Error>}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = [move _17];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = &_16;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb9, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(MqHandler::handle::{closure#4}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _11 = log::__private_api_log(move _12, _3, _19) -> [return: bb14, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_2) -> bb11;                // scope 0 at cita-jsonrpc/src/mq_handler.rs:71:33: 71:34
    }

    bb11: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:71:34: 71:34
    }

    bb12 (cleanup): {
        drop(_2) -> bb13;                // scope 0 at cita-jsonrpc/src/mq_handler.rs:71:33: 71:34
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:69:42: 71:34
    }

    bb14: {
        goto -> bb10;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#4}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:70:37: 70:58
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:70:37: 70:58

    bb0: {
        _3 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/mq_handler.rs"; // scope 0 at cita-jsonrpc/src/mq_handler.rs:70:37: 70:58
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:70:37: 70:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/mq_handler.rs:70:37: 70:58
        _1 = (move _2, move _4, move _6, const 70_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#4}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:70:44: 70:54
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/mq_handler.rs:70:44: 70:54

    bb0: {
        _1 = [const "ws: "];             // scope 0 at cita-jsonrpc/src/mq_handler.rs:70:44: 70:54
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:70:44: 70:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/mq_handler.rs:70:44: 70:54
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:70:44: 70:54
    }
}

promoted[2] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#4}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#5}(_1: [closure@cita-jsonrpc/src/mq_handler.rs:72:56: 72:59], _2: ws::Error) -> () {
    debug e => _2;                       // in scope 0 at cita-jsonrpc/src/mq_handler.rs:72:57: 72:58
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:72:60: 72:60
    let _3: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _6: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _8: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _9: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _12: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _13: &[&str];                // in scope 0 at cita-jsonrpc/src/mq_handler.rs:73:36: 73:46
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/mq_handler.rs:73:48: 73:49
    let _18: &ws::Error;                 // in scope 0 at cita-jsonrpc/src/mq_handler.rs:73:48: 73:49
    scope 1 {
        debug lvl => _3;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _19: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _20: &[&str; 1];         // in scope 1 at cita-jsonrpc/src/mq_handler.rs:73:36: 73:46
        let mut _21: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _3 = log::Level::Error;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _6 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _21 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(MqHandler::handle::{closure#5}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _5 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _6, _21) -> [return: bb4, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _8 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _10 = log::max_level() -> [return: bb5, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _9 = &_10;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _7 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _8, move _9) -> [return: bb6, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = move _7;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _20 = const _;                   // scope 1 at cita-jsonrpc/src/mq_handler.rs:73:36: 73:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:73:36: 73:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(MqHandler::handle::{closure#5}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _13 = _20 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/mq_handler.rs:73:36: 73:46
        _18 = &_2;                       // scope 1 at cita-jsonrpc/src/mq_handler.rs:73:48: 73:49
        _17 = core::fmt::ArgumentV1::<'_>::new_debug::<ws::Error>(_18) -> [return: bb8, unwind: bb12]; // scope 1 at cita-jsonrpc/src/mq_handler.rs:73:48: 73:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:73:48: 73:49
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b ws::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<ws::Error>}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = [move _17];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = &_16;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb9, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(MqHandler::handle::{closure#5}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _11 = log::__private_api_log(move _12, _3, _19) -> [return: bb14, unwind: bb12]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_2) -> bb11;                // scope 0 at cita-jsonrpc/src/mq_handler.rs:74:25: 74:26
    }

    bb11: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:74:26: 74:26
    }

    bb12 (cleanup): {
        drop(_2) -> bb13;                // scope 0 at cita-jsonrpc/src/mq_handler.rs:74:25: 74:26
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:72:56: 74:26
    }

    bb14: {
        goto -> bb10;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#5}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:73:29: 73:50
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/mq_handler.rs:73:29: 73:50

    bb0: {
        _3 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::mq_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/mq_handler.rs"; // scope 0 at cita-jsonrpc/src/mq_handler.rs:73:29: 73:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:73:29: 73:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/mq_handler.rs:73:29: 73:50
        _1 = (move _2, move _4, move _6, const 73_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#5}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/mq_handler.rs:73:36: 73:46
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/mq_handler.rs:73:36: 73:46

    bb0: {
        _1 = [const "ws: "];             // scope 0 at cita-jsonrpc/src/mq_handler.rs:73:36: 73:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_handler.rs:73:36: 73:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/mq_handler.rs:73:36: 73:46
        return;                          // scope 0 at cita-jsonrpc/src/mq_handler.rs:73:36: 73:46
    }
}

promoted[2] in mq_handler::<impl at cita-jsonrpc/src/mq_handler.rs:28:1: 28:15>::handle::{closure#5}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn mq_publisher::<impl at cita-jsonrpc/src/mq_publisher.rs:32:10: 32:15>::fmt(_1: &HybridRequest, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:32:10: 32:15
    debug f => _2;                       // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:32:10: 32:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:32:10: 32:15
    let _3: &str;                        // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:32:10: 32:15
    let _4: &str;                        // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:34:5: 34:30
    let mut _5: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:34:5: 34:30
    let _6: &jsonrpc_types::rpc_request::Request; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:34:5: 34:30
    let _7: &str;                        // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:35:5: 35:32
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:35:5: 35:32
    let _9: &&libproto::Request;         // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:35:5: 35:32
    let _10: &libproto::Request;         // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:35:5: 35:32

    bb0: {
        _3 = const "HybridRequest";      // scope 0 at cita-jsonrpc/src/mq_publisher.rs:32:10: 32:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:32:10: 32:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = const "json_req";           // scope 0 at cita-jsonrpc/src/mq_publisher.rs:34:5: 34:30
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:34:5: 34:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &((*_1).0: jsonrpc_types::rpc_request::Request); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:34:5: 34:30
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:34:5: 34:30
        _7 = const "proto_req";          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:35:5: 35:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:35:5: 35:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &((*_1).1: libproto::Request); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:35:5: 35:32
        _9 = &_10;                       // scope 0 at cita-jsonrpc/src/mq_publisher.rs:35:5: 35:32
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:35:5: 35:32
        _0 = std::fmt::Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> bb1; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:32:10: 32:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:32:10: 32:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:32:15: 32:15
    }
}

fn mq_publisher::<impl at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15>::fmt(_1: &MQRequest, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
    debug f => _2;                       // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
    let mut _3: isize;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
    let _4: &std::boxed::Box<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:40:12: 40:30
    let _5: &str;                        // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:40:12: 40:30
    let _7: &&std::boxed::Box<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:40:12: 40:30
    let _8: &std::vec::Vec<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:41:11: 41:29
    let _9: &str;                        // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:41:11: 41:29
    let _11: &&std::vec::Vec<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:41:11: 41:29
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at cita-jsonrpc/src/mq_publisher.rs:40:12: 40:30
    }
    scope 2 {
        debug __self_0 => _8;            // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:41:11: 41:29
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
    }

    bb1: {
        _8 = &(((*_1) as Batch).0: std::vec::Vec<mq_publisher::HybridRequest>); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:41:11: 41:29
        _9 = const "Batch";              // scope 2 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = &_8;                       // scope 2 at cita-jsonrpc/src/mq_publisher.rs:41:11: 41:29
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at cita-jsonrpc/src/mq_publisher.rs:41:11: 41:29
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> bb4; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
    }

    bb3: {
        _4 = &(((*_1) as Single).0: std::boxed::Box<mq_publisher::HybridRequest>); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:40:12: 40:30
        _5 = const "Single";             // scope 1 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &_4;                        // scope 1 at cita-jsonrpc/src/mq_publisher.rs:40:12: 40:30
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/mq_publisher.rs:40:12: 40:30
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb4; // scope 1 at cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:38:10: 38:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:38:15: 38:15
    }
}

fn mq_publisher::<impl at cita-jsonrpc/src/mq_publisher.rs:54:1: 54:15>::access_log(_1: &MQRequest) -> mq_publisher::AccessLog {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:55:23: 55:28
    let mut _0: mq_publisher::AccessLog; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:55:33: 55:42
    let mut _2: isize;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:57:13: 57:46
    let _3: &std::boxed::Box<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:57:31: 57:45
    let mut _4: jsonrpc_types::rpc_types::Id; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:58:21: 58:51
    let mut _5: &jsonrpc_types::rpc_types::Id; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:58:21: 58:51
    let mut _6: std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:59:25: 59:74
    let mut _7: std::string::String;     // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:59:30: 59:73
    let mut _8: &str;                    // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:59:30: 59:73
    let _9: &str;                        // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:59:30: 59:62
    let mut _10: &jsonrpc_types::rpc_request::Request; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:59:30: 59:62
    let _11: &std::vec::Vec<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:61:30: 61:45
    let mut _12: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:62:24: 62:47
    let mut _13: usize;                  // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:62:29: 62:46
    let mut _14: std::boxed::Box<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:57:31: 57:45
    let mut _15: std::boxed::Box<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:57:31: 57:45
    let mut _16: *const mq_publisher::HybridRequest; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:57:31: 57:45
    let mut _17: *const mq_publisher::HybridRequest; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:57:31: 57:45
    scope 1 {
        debug hybrid_req => _3;          // in scope 1 at cita-jsonrpc/src/mq_publisher.rs:57:31: 57:45
    }
    scope 2 {
        debug hybrid_reqs => _11;        // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:61:30: 61:45
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at cita-jsonrpc/src/mq_publisher.rs:56:15: 56:19
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:56:9: 56:19
    }

    bb1: {
        _11 = &(((*_1) as Batch).0: std::vec::Vec<mq_publisher::HybridRequest>); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:61:30: 61:45
        _13 = Vec::<HybridRequest>::len(_11) -> bb7; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:62:29: 62:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:62:41: 62:44
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<HybridRequest>) -> usize {Vec::<HybridRequest>::len}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/mq_publisher.rs:56:15: 56:19
    }

    bb3: {
        _3 = &(((*_1) as Single).0: std::boxed::Box<mq_publisher::HybridRequest>); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:57:31: 57:45
        _14 = deref_copy (*_3);          // scope 1 at cita-jsonrpc/src/mq_publisher.rs:58:21: 58:51
        _16 = (((_14.0: std::ptr::Unique<mq_publisher::HybridRequest>).0: std::ptr::NonNull<mq_publisher::HybridRequest>).0: *const mq_publisher::HybridRequest); // scope 1 at cita-jsonrpc/src/mq_publisher.rs:58:21: 58:51
        _5 = &(((*_16).0: jsonrpc_types::rpc_request::Request).1: jsonrpc_types::rpc_types::Id); // scope 1 at cita-jsonrpc/src/mq_publisher.rs:58:21: 58:51
        _4 = <Id as Clone>::clone(move _5) -> bb4; // scope 1 at cita-jsonrpc/src/mq_publisher.rs:58:21: 58:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:58:44: 58:49
                                         // + literal: Const { ty: for<'a> fn(&'a Id) -> Id {<Id as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = deref_copy (*_3);          // scope 1 at cita-jsonrpc/src/mq_publisher.rs:59:30: 59:62
        _17 = (((_15.0: std::ptr::Unique<mq_publisher::HybridRequest>).0: std::ptr::NonNull<mq_publisher::HybridRequest>).0: *const mq_publisher::HybridRequest); // scope 1 at cita-jsonrpc/src/mq_publisher.rs:59:30: 59:62
        _10 = &((*_17).0: jsonrpc_types::rpc_request::Request); // scope 1 at cita-jsonrpc/src/mq_publisher.rs:59:30: 59:62
        _9 = jsonrpc_types::rpc_request::Request::get_method(move _10) -> [return: bb5, unwind: bb9]; // scope 1 at cita-jsonrpc/src/mq_publisher.rs:59:30: 59:62
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:59:50: 59:60
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::rpc_request::Request) -> &'a str {jsonrpc_types::rpc_request::Request::get_method}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = _9;                         // scope 1 at cita-jsonrpc/src/mq_publisher.rs:59:30: 59:73
        _7 = <str as ToOwned>::to_owned(move _8) -> [return: bb6, unwind: bb9]; // scope 1 at cita-jsonrpc/src/mq_publisher.rs:59:30: 59:73
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:59:63: 59:71
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> <str as ToOwned>::Owned {<str as ToOwned>::to_owned}, val: Value(<ZST>) }
    }

    bb6: {
        _6 = std::option::Option::<std::string::String>::Some(move _7); // scope 1 at cita-jsonrpc/src/mq_publisher.rs:59:25: 59:74
        _0 = mq_publisher::AccessLog::Single { id: move _4, method: move _6 }; // scope 1 at cita-jsonrpc/src/mq_publisher.rs:57:50: 60:14
        goto -> bb8;                     // scope 0 at cita-jsonrpc/src/mq_publisher.rs:60:13: 60:14
    }

    bb7: {
        _12 = std::option::Option::<usize>::Some(move _13); // scope 2 at cita-jsonrpc/src/mq_publisher.rs:62:24: 62:47
        _0 = mq_publisher::AccessLog::Batch { count: move _12 }; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:61:50: 63:14
        goto -> bb8;                     // scope 0 at cita-jsonrpc/src/mq_publisher.rs:63:13: 63:14
    }

    bb8: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:65:6: 65:6
    }

    bb9 (cleanup): {
        drop(_4) -> bb10;                // scope 1 at cita-jsonrpc/src/mq_publisher.rs:60:13: 60:14
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:55:5: 65:6
    }
}

fn mq_publisher::<impl at cita-jsonrpc/src/mq_publisher.rs:76:1: 76:15>::new(_1: Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>, _2: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, _3: HeaderMap) -> Publisher {
    debug responses => _1;               // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:77:16: 77:25
    debug sender => _2;                  // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:77:35: 77:41
    debug headers => _3;                 // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:77:59: 77:66
    let mut _0: mq_publisher::Publisher; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:77:80: 77:84

    bb0: {
        _0 = Publisher { responses: move _1, sender: move _2, headers: move _3 }; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:78:9: 82:10
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:83:6: 83:6
    }
}

fn mq_publisher::<impl at cita-jsonrpc/src/mq_publisher.rs:76:1: 76:15>::publish(_1: &mut Publisher, _2: MQRequest) -> PublishFutResponse {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:85:20: 85:29
    debug req => _2;                     // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:85:31: 85:34
    let mut _0: response::PublishFutResponse; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:85:50: 85:68
    let mut _3: isize;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:90:13: 90:35
    let _4: std::boxed::Box<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:90:31: 90:34
    let mut _6: mq_publisher::HybridRequest; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:91:44: 91:48
    let mut _8: futures::Oneshot<jsonrpc_types::rpc_response::Output>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:93:54: 93:56
    let mut _9: hyper::HeaderMap;        // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:93:58: 93:78
    let mut _10: &hyper::HeaderMap;      // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:93:58: 93:78
    let mut _11: response::SingleFutureResponse; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:94:44: 94:48
    let _12: std::vec::Vec<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:96:30: 96:34
    let mut _14: std::iter::Map<std::vec::IntoIter<mq_publisher::HybridRequest>, [closure@cita-jsonrpc/src/mq_publisher.rs:99:26: 99:31]>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:97:27: 99:55
    let mut _15: std::vec::IntoIter<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:97:27: 98:33
    let mut _16: [closure@cita-jsonrpc/src/mq_publisher.rs:99:26: 99:31]; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:99:26: 99:54
    let mut _17: &mut &mut mq_publisher::Publisher; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:99:26: 99:54
    let mut _19: futures::stream::Collect<futures::stream::FuturesOrdered<futures::Oneshot<jsonrpc_types::rpc_response::Output>>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:103:21: 103:61
    let mut _20: futures::stream::FuturesOrdered<futures::Oneshot<jsonrpc_types::rpc_response::Output>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:103:21: 103:51
    let mut _21: std::vec::Vec<futures::Oneshot<jsonrpc_types::rpc_response::Output>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:103:47: 103:50
    let mut _22: hyper::HeaderMap;       // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:104:21: 104:41
    let mut _23: &hyper::HeaderMap;      // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:104:21: 104:41
    let mut _24: response::BatchFutureResponse; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:106:43: 106:47
    let mut _25: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:105:17: 105:18
    let mut _26: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:93:78: 93:79
    let mut _27: ();                     // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:95:13: 95:14
    let mut _28: ();                     // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:95:13: 95:14
    let mut _29: *const mq_publisher::HybridRequest; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:90:31: 90:34
    scope 1 {
        debug req => _4;                 // in scope 1 at cita-jsonrpc/src/mq_publisher.rs:90:31: 90:34
        let _5: futures::Oneshot<jsonrpc_types::rpc_response::Output>; // in scope 1 at cita-jsonrpc/src/mq_publisher.rs:91:21: 91:23
        scope 2 {
            debug rx => _5;              // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:91:21: 91:23
            let _7: response::SingleFutureResponse; // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:93:21: 93:25
            scope 3 {
                debug resp => _7;        // in scope 3 at cita-jsonrpc/src/mq_publisher.rs:93:21: 93:25
            }
        }
    }
    scope 4 {
        debug reqs => _12;               // in scope 4 at cita-jsonrpc/src/mq_publisher.rs:96:30: 96:34
        let _13: std::vec::Vec<futures::Oneshot<jsonrpc_types::rpc_response::Output>>; // in scope 4 at cita-jsonrpc/src/mq_publisher.rs:97:21: 97:24
        scope 5 {
            debug rxs => _13;            // in scope 5 at cita-jsonrpc/src/mq_publisher.rs:97:21: 97:24
            let _18: response::BatchFutureResponse; // in scope 5 at cita-jsonrpc/src/mq_publisher.rs:102:21: 102:25
            scope 6 {
                debug resp => _18;       // in scope 6 at cita-jsonrpc/src/mq_publisher.rs:102:21: 102:25
            }
        }
    }

    bb0: {
        _25 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:89:15: 89:18
        _26 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:89:15: 89:18
        _3 = discriminant(_2);           // scope 0 at cita-jsonrpc/src/mq_publisher.rs:89:15: 89:18
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:89:9: 89:18
    }

    bb1: {
        _12 = move ((_2 as Batch).0: std::vec::Vec<mq_publisher::HybridRequest>); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:96:30: 96:34
        _15 = <Vec<HybridRequest> as IntoIterator>::into_iter(move _12) -> bb7; // scope 4 at cita-jsonrpc/src/mq_publisher.rs:97:27: 98:33
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:98:22: 98:31
                                         // + literal: Const { ty: fn(Vec<HybridRequest>) -> <Vec<HybridRequest> as IntoIterator>::IntoIter {<Vec<HybridRequest> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/mq_publisher.rs:89:15: 89:18
    }

    bb3: {
        _4 = move ((_2 as Single).0: std::boxed::Box<mq_publisher::HybridRequest>); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:90:31: 90:34
        _29 = (((_4.0: std::ptr::Unique<mq_publisher::HybridRequest>).0: std::ptr::NonNull<mq_publisher::HybridRequest>).0: *const mq_publisher::HybridRequest); // scope 1 at cita-jsonrpc/src/mq_publisher.rs:91:44: 91:48
        _6 = move (*_29);                // scope 1 at cita-jsonrpc/src/mq_publisher.rs:91:44: 91:48
        _5 = Publisher::send_request(_1, move _6) -> [return: bb4, unwind: bb19]; // scope 1 at cita-jsonrpc/src/mq_publisher.rs:91:26: 91:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:91:31: 91:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut Publisher, HybridRequest) -> Oneshot<jsonrpc_types::rpc_response::Output> {Publisher::send_request}, val: Value(<ZST>) }
    }

    bb4: {
        _26 = const true;                // scope 2 at cita-jsonrpc/src/mq_publisher.rs:93:54: 93:56
        _8 = move _5;                    // scope 2 at cita-jsonrpc/src/mq_publisher.rs:93:54: 93:56
        _10 = &((*_1).2: hyper::HeaderMap); // scope 2 at cita-jsonrpc/src/mq_publisher.rs:93:58: 93:78
        _9 = <HeaderMap as Clone>::clone(move _10) -> [return: bb5, unwind: bb18]; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:93:58: 93:78
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:93:71: 93:76
                                         // + literal: Const { ty: for<'a> fn(&'a HeaderMap) -> HeaderMap {<HeaderMap as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = const false;               // scope 2 at cita-jsonrpc/src/mq_publisher.rs:93:28: 93:79
        _7 = SingleFutureResponse::new(move _8, move _9) -> [return: bb6, unwind: bb18]; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:93:28: 93:79
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:93:28: 93:53
                                         // + literal: Const { ty: fn(Oneshot<jsonrpc_types::rpc_response::Output>, HeaderMap) -> SingleFutureResponse {SingleFutureResponse::new}, val: Value(<ZST>) }
    }

    bb6: {
        _26 = const false;               // scope 2 at cita-jsonrpc/src/mq_publisher.rs:93:78: 93:79
        _11 = move _7;                   // scope 3 at cita-jsonrpc/src/mq_publisher.rs:94:44: 94:48
        _0 = PublishFutResponse::Single(move _11); // scope 3 at cita-jsonrpc/src/mq_publisher.rs:94:17: 94:49
        _27 = alloc::alloc::box_free::<HybridRequest, std::alloc::Global>(move (_4.0: std::ptr::Unique<mq_publisher::HybridRequest>), const std::alloc::Global) -> bb14; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:95:13: 95:14
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:95:13: 95:14
                                         // + literal: Const { ty: unsafe fn(Unique<HybridRequest>, std::alloc::Global) {alloc::alloc::box_free::<HybridRequest, std::alloc::Global>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::alloc::Global, val: Value(<ZST>) }
    }

    bb7: {
        _17 = &mut _1;                   // scope 4 at cita-jsonrpc/src/mq_publisher.rs:99:26: 99:54
        _16 = [closure@cita-jsonrpc/src/mq_publisher.rs:99:26: 99:31] { self: move _17 }; // scope 4 at cita-jsonrpc/src/mq_publisher.rs:99:26: 99:54
                                         // closure
                                         // + def_id: DefId(0:306 ~ cita_jsonrpc[a6db]::mq_publisher::{impl#1}::publish::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((mq_publisher::HybridRequest,)) -> futures::Oneshot<jsonrpc_types::rpc_response::Output>,
                                         //     (&mut &mut mq_publisher::Publisher,),
                                         // ]
        _14 = <std::vec::IntoIter<HybridRequest> as Iterator>::map::<Oneshot<jsonrpc_types::rpc_response::Output>, [closure@cita-jsonrpc/src/mq_publisher.rs:99:26: 99:31]>(move _15, move _16) -> bb8; // scope 4 at cita-jsonrpc/src/mq_publisher.rs:97:27: 99:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:99:22: 99:25
                                         // + literal: Const { ty: fn(std::vec::IntoIter<HybridRequest>, [closure@cita-jsonrpc/src/mq_publisher.rs:99:26: 99:31]) -> std::iter::Map<std::vec::IntoIter<HybridRequest>, [closure@cita-jsonrpc/src/mq_publisher.rs:99:26: 99:31]> {<std::vec::IntoIter<HybridRequest> as Iterator>::map::<Oneshot<jsonrpc_types::rpc_response::Output>, [closure@cita-jsonrpc/src/mq_publisher.rs:99:26: 99:31]>}, val: Value(<ZST>) }
    }

    bb8: {
        _13 = <std::iter::Map<std::vec::IntoIter<HybridRequest>, [closure@cita-jsonrpc/src/mq_publisher.rs:99:26: 99:31]> as Iterator>::collect::<Vec<Oneshot<jsonrpc_types::rpc_response::Output>>>(move _14) -> bb9; // scope 4 at cita-jsonrpc/src/mq_publisher.rs:97:27: 100:74
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:100:22: 100:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::iter::Map<std::vec::IntoIter<HybridRequest>, [closure@cita-jsonrpc/src/mq_publisher.rs:99:26: 99:31]>) -> Vec<Oneshot<jsonrpc_types::rpc_response::Output>> {<std::iter::Map<std::vec::IntoIter<HybridRequest>, [closure@cita-jsonrpc/src/mq_publisher.rs:99:26: 99:31]> as Iterator>::collect::<Vec<Oneshot<jsonrpc_types::rpc_response::Output>>>}, val: Value(<ZST>) }
    }

    bb9: {
        _21 = move _13;                  // scope 5 at cita-jsonrpc/src/mq_publisher.rs:103:47: 103:50
        _20 = <FuturesOrdered<Oneshot<jsonrpc_types::rpc_response::Output>> as FromIterator<Oneshot<jsonrpc_types::rpc_response::Output>>>::from_iter::<Vec<Oneshot<jsonrpc_types::rpc_response::Output>>>(move _21) -> bb10; // scope 5 at cita-jsonrpc/src/mq_publisher.rs:103:21: 103:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:103:21: 103:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Vec<Oneshot<jsonrpc_types::rpc_response::Output>>) -> FuturesOrdered<Oneshot<jsonrpc_types::rpc_response::Output>> {<FuturesOrdered<Oneshot<jsonrpc_types::rpc_response::Output>> as FromIterator<Oneshot<jsonrpc_types::rpc_response::Output>>>::from_iter::<Vec<Oneshot<jsonrpc_types::rpc_response::Output>>>}, val: Value(<ZST>) }
    }

    bb10: {
        _19 = <FuturesOrdered<Oneshot<jsonrpc_types::rpc_response::Output>> as Stream>::collect(move _20) -> bb11; // scope 5 at cita-jsonrpc/src/mq_publisher.rs:103:21: 103:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:103:52: 103:59
                                         // + literal: Const { ty: fn(FuturesOrdered<Oneshot<jsonrpc_types::rpc_response::Output>>) -> futures::stream::Collect<FuturesOrdered<Oneshot<jsonrpc_types::rpc_response::Output>>> {<FuturesOrdered<Oneshot<jsonrpc_types::rpc_response::Output>> as Stream>::collect}, val: Value(<ZST>) }
    }

    bb11: {
        _25 = const true;                // scope 5 at cita-jsonrpc/src/mq_publisher.rs:103:60: 103:61
        _23 = &((*_1).2: hyper::HeaderMap); // scope 5 at cita-jsonrpc/src/mq_publisher.rs:104:21: 104:41
        _22 = <HeaderMap as Clone>::clone(move _23) -> [return: bb12, unwind: bb16]; // scope 5 at cita-jsonrpc/src/mq_publisher.rs:104:21: 104:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:104:34: 104:39
                                         // + literal: Const { ty: for<'a> fn(&'a HeaderMap) -> HeaderMap {<HeaderMap as Clone>::clone}, val: Value(<ZST>) }
    }

    bb12: {
        _25 = const false;               // scope 5 at cita-jsonrpc/src/mq_publisher.rs:102:28: 105:18
        _18 = BatchFutureResponse::new(move _19, move _22) -> [return: bb13, unwind: bb16]; // scope 5 at cita-jsonrpc/src/mq_publisher.rs:102:28: 105:18
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:102:28: 102:52
                                         // + literal: Const { ty: fn(futures::stream::Collect<FuturesOrdered<Oneshot<jsonrpc_types::rpc_response::Output>>>, HeaderMap) -> BatchFutureResponse {BatchFutureResponse::new}, val: Value(<ZST>) }
    }

    bb13: {
        _25 = const false;               // scope 5 at cita-jsonrpc/src/mq_publisher.rs:105:17: 105:18
        _24 = move _18;                  // scope 6 at cita-jsonrpc/src/mq_publisher.rs:106:43: 106:47
        _0 = PublishFutResponse::Batch(move _24); // scope 6 at cita-jsonrpc/src/mq_publisher.rs:106:17: 106:48
        goto -> bb14;                    // scope 0 at cita-jsonrpc/src/mq_publisher.rs:109:5: 109:6
    }

    bb14: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:109:6: 109:6
    }

    bb15 (cleanup): {
        drop(_19) -> bb20;               // scope 5 at cita-jsonrpc/src/mq_publisher.rs:105:17: 105:18
    }

    bb16 (cleanup): {
        switchInt(_25) -> [0: bb20, otherwise: bb15]; // scope 5 at cita-jsonrpc/src/mq_publisher.rs:105:17: 105:18
    }

    bb17 (cleanup): {
        drop(_8) -> bb19;                // scope 2 at cita-jsonrpc/src/mq_publisher.rs:93:78: 93:79
    }

    bb18 (cleanup): {
        switchInt(_26) -> [0: bb19, otherwise: bb17]; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:93:78: 93:79
    }

    bb19 (cleanup): {
        _28 = alloc::alloc::box_free::<HybridRequest, std::alloc::Global>(move (_4.0: std::ptr::Unique<mq_publisher::HybridRequest>), const std::alloc::Global) -> bb20; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:95:13: 95:14
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:95:13: 95:14
                                         // + literal: Const { ty: unsafe fn(Unique<HybridRequest>, std::alloc::Global) {alloc::alloc::box_free::<HybridRequest, std::alloc::Global>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::alloc::Global, val: Value(<ZST>) }
    }

    bb20 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:85:5: 109:6
    }
}

fn mq_publisher::<impl at cita-jsonrpc/src/mq_publisher.rs:76:1: 76:15>::publish::{closure#0}(_1: &mut [closure@cita-jsonrpc/src/mq_publisher.rs:99:26: 99:31], _2: HybridRequest) -> Oneshot<jsonrpc_types::rpc_response::Output> {
    debug req => _2;                     // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:99:27: 99:30
    debug self => (*((*_1).0: &mut &mut mq_publisher::Publisher)); // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:85:25: 85:29
    let mut _0: futures::Oneshot<jsonrpc_types::rpc_response::Output>; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:99:32: 99:32
    let mut _3: &mut &mut mq_publisher::Publisher; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:99:26: 99:54
    let mut _4: &mut mq_publisher::Publisher; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:99:26: 99:54

    bb0: {
        _3 = deref_copy ((*_1).0: &mut &mut mq_publisher::Publisher); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:99:32: 99:54
        _4 = deref_copy (*_3);           // scope 0 at cita-jsonrpc/src/mq_publisher.rs:99:32: 99:54
        _0 = Publisher::send_request(_4, move _2) -> bb1; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:99:32: 99:54
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:99:37: 99:49
                                         // + literal: Const { ty: for<'a> fn(&'a mut Publisher, HybridRequest) -> Oneshot<jsonrpc_types::rpc_response::Output> {Publisher::send_request}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:99:54: 99:54
    }
}

fn mq_publisher::<impl at cita-jsonrpc/src/mq_publisher.rs:76:1: 76:15>::send_request(_1: &mut Publisher, _2: HybridRequest) -> Oneshot<jsonrpc_types::rpc_response::Output> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:111:21: 111:30
    debug hybrid_req => _2;              // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:111:32: 111:42
    let _3: jsonrpc_types::rpc_request::Request; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:14: 112:22
    let _4: libproto::Request;           // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:24: 112:33
    let mut _5: (jsonrpc_types::rpc_request::Request, libproto::Request); // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:37: 112:80
    let mut _6: jsonrpc_types::rpc_request::Request; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:38: 112:57
    let mut _7: libproto::Request;       // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:59: 112:79
    let mut _9: (futures::Complete<jsonrpc_types::rpc_response::Output>, futures::Oneshot<jsonrpc_types::rpc_response::Output>); // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:113:24: 113:42
    let mut _11: &str;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:114:34: 114:55
    let _12: &str;                       // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:114:34: 114:55
    let mut _13: &jsonrpc_types::rpc_request::Request; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:114:34: 114:55
    let _14: std::option::Option<helper::TransferType>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:116:9: 119:10
    let mut _15: &mut std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:116:9: 119:10
    let mut _16: &mut std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:116:9: 119:10
    let mut _17: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:116:9: 119:10
    let mut _18: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:116:9: 116:30
    let mut _19: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:116:9: 116:30
    let _20: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:116:9: 116:30
    let mut _21: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:116:9: 116:30
    let mut _22: std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:117:13: 117:41
    let mut _23: &std::vec::Vec<u8>;     // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:117:13: 117:41
    let mut _24: helper::TransferType;   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:118:13: 118:58
    let mut _25: (jsonrpc_types::rpc_request::RequestInfo, futures::Complete<jsonrpc_types::rpc_response::Output>); // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:118:32: 118:57
    let mut _26: jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:118:33: 118:52
    let mut _27: &jsonrpc_types::rpc_request::Request; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:118:33: 118:52
    let mut _28: futures::Complete<jsonrpc_types::rpc_response::Output>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:118:54: 118:56
    let mut _29: std::result::Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, libproto::Request)>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:122:17: 122:53
    let mut _30: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:122:17: 122:53
    let mut _31: (std::string::String, libproto::Request); // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:122:34: 122:52
    let mut _32: std::string::String;    // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:122:35: 122:40
    let mut _33: libproto::Request;      // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:122:42: 122:51
    let mut _34: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:119:9: 119:10
    let mut _35: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
    let mut _36: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
    let mut _37: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
    scope 1 {
        debug json_req => _3;            // in scope 1 at cita-jsonrpc/src/mq_publisher.rs:112:14: 112:22
        debug proto_req => _4;           // in scope 1 at cita-jsonrpc/src/mq_publisher.rs:112:24: 112:33
        let mut _0: futures::Oneshot<jsonrpc_types::rpc_response::Output>; // return place in scope 1 at cita-jsonrpc/src/mq_publisher.rs:113:18: 113:20
        let _8: futures::Complete<jsonrpc_types::rpc_response::Output>; // in scope 1 at cita-jsonrpc/src/mq_publisher.rs:113:14: 113:16
        scope 2 {
            debug tx => _8;              // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:113:14: 113:16
            debug rx => _0;              // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:113:18: 113:20
            let _10: std::string::String; // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:114:13: 114:18
            scope 3 {
                debug topic => _10;      // in scope 3 at cita-jsonrpc/src/mq_publisher.rs:114:13: 114:18
                scope 4 {
                }
            }
        }
    }

    bb0: {
        _36 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:37: 112:80
        _34 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:37: 112:80
        _37 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:37: 112:80
        _35 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:37: 112:80
        _6 = move (_2.0: jsonrpc_types::rpc_request::Request); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:38: 112:57
        _7 = move (_2.1: libproto::Request); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:59: 112:79
        _5 = (move _6, move _7);         // scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:37: 112:80
        _3 = move (_5.0: jsonrpc_types::rpc_request::Request); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:14: 112:22
        _37 = const true;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:24: 112:33
        _4 = move (_5.1: libproto::Request); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:112:24: 112:33
        _9 = oneshot::<jsonrpc_types::rpc_response::Output>() -> [return: bb1, unwind: bb17]; // scope 1 at cita-jsonrpc/src/mq_publisher.rs:113:24: 113:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:113:24: 113:40
                                         // + literal: Const { ty: fn() -> (futures::Complete<jsonrpc_types::rpc_response::Output>, Oneshot<jsonrpc_types::rpc_response::Output>) {oneshot::<jsonrpc_types::rpc_response::Output>}, val: Value(<ZST>) }
    }

    bb1: {
        _36 = const true;                // scope 1 at cita-jsonrpc/src/mq_publisher.rs:113:14: 113:16
        _8 = move (_9.0: futures::Complete<jsonrpc_types::rpc_response::Output>); // scope 1 at cita-jsonrpc/src/mq_publisher.rs:113:14: 113:16
        _0 = move (_9.1: futures::Oneshot<jsonrpc_types::rpc_response::Output>); // scope 1 at cita-jsonrpc/src/mq_publisher.rs:113:18: 113:20
        _13 = &_3;                       // scope 2 at cita-jsonrpc/src/mq_publisher.rs:114:34: 114:55
        _12 = jsonrpc_types::rpc_request::Request::get_method(move _13) -> [return: bb2, unwind: bb16]; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:114:34: 114:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:114:43: 114:53
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::rpc_request::Request) -> &'a str {jsonrpc_types::rpc_request::Request::get_method}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = _12;                       // scope 2 at cita-jsonrpc/src/mq_publisher.rs:114:34: 114:55
        _10 = select_topic(move _11) -> [return: bb3, unwind: bb16]; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:114:21: 114:56
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:114:21: 114:33
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> std::string::String {select_topic}, val: Value(<ZST>) }
    }

    bb3: {
        _35 = const true;                // scope 2 at cita-jsonrpc/src/mq_publisher.rs:114:55: 114:56
        _21 = &((*_1).0: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 3 at cita-jsonrpc/src/mq_publisher.rs:116:9: 116:30
        _20 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Deref>::deref(move _21) -> [return: bb4, unwind: bb23]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:116:9: 116:30
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:116:9: 116:30
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = _20;                       // scope 3 at cita-jsonrpc/src/mq_publisher.rs:116:9: 116:30
        _18 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>::lock(move _19) -> [return: bb5, unwind: bb23]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:116:9: 116:30
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:116:24: 116:28
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>) -> lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>::lock}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = &mut _18;                  // scope 3 at cita-jsonrpc/src/mq_publisher.rs:116:9: 119:10
        _16 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> as DerefMut>::deref_mut(move _17) -> [return: bb6, unwind: bb15]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:116:9: 119:10
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:116:9: 119:10
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = _16;                       // scope 3 at cita-jsonrpc/src/mq_publisher.rs:116:9: 119:10
        _23 = &(_4.0: std::vec::Vec<u8>); // scope 3 at cita-jsonrpc/src/mq_publisher.rs:117:13: 117:41
        _22 = <Vec<u8> as Clone>::clone(move _23) -> [return: bb7, unwind: bb15]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:117:13: 117:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:117:34: 117:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> Vec<u8> {<Vec<u8> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb7: {
        _34 = const true;                // scope 3 at cita-jsonrpc/src/mq_publisher.rs:117:40: 117:41
        _27 = &_3;                       // scope 3 at cita-jsonrpc/src/mq_publisher.rs:118:33: 118:52
        _26 = jsonrpc_types::rpc_request::Request::get_info(move _27) -> [return: bb8, unwind: bb21]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:118:33: 118:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:118:42: 118:50
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::rpc_request::Request) -> RequestInfo {jsonrpc_types::rpc_request::Request::get_info}, val: Value(<ZST>) }
    }

    bb8: {
        _36 = const false;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:118:54: 118:56
        _28 = move _8;                   // scope 3 at cita-jsonrpc/src/mq_publisher.rs:118:54: 118:56
        _25 = (move _26, move _28);      // scope 3 at cita-jsonrpc/src/mq_publisher.rs:118:32: 118:57
        _24 = TransferType::HTTP(move _25); // scope 3 at cita-jsonrpc/src/mq_publisher.rs:118:13: 118:58
        _34 = const false;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:116:9: 119:10
        _14 = HashMap::<Vec<u8>, TransferType>::insert(move _15, move _22, move _24) -> [return: bb9, unwind: bb21]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:116:9: 119:10
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:116:31: 116:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<Vec<u8>, TransferType>, Vec<u8>, TransferType) -> std::option::Option<TransferType> {HashMap::<Vec<u8>, TransferType>::insert}, val: Value(<ZST>) }
    }

    bb9: {
        _34 = const false;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:119:9: 119:10
        drop(_14) -> [return: bb10, unwind: bb15]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:119:10: 119:11
    }

    bb10: {
        drop(_18) -> [return: bb11, unwind: bb23]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:119:10: 119:11
    }

    bb11: {
        _30 = &((*_1).1: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // scope 3 at cita-jsonrpc/src/mq_publisher.rs:122:17: 122:53
        _35 = const false;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:122:35: 122:40
        _32 = move _10;                  // scope 3 at cita-jsonrpc/src/mq_publisher.rs:122:35: 122:40
        _37 = const false;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:122:42: 122:51
        _33 = move _4;                   // scope 3 at cita-jsonrpc/src/mq_publisher.rs:122:42: 122:51
        _31 = (move _32, move _33);      // scope 3 at cita-jsonrpc/src/mq_publisher.rs:122:34: 122:52
        _29 = pubsub::crossbeam_channel::Sender::<(std::string::String, libproto::Request)>::send(move _30, move _31) -> [return: bb12, unwind: bb23]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:122:17: 122:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:122:29: 122:33
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, (std::string::String, libproto::Request)) -> Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, libproto::Request)>> {pubsub::crossbeam_channel::Sender::<(std::string::String, libproto::Request)>::send}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_29) -> [return: bb13, unwind: bb23]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:122:53: 122:54
    }

    bb13: {
        _35 = const false;               // scope 2 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
        _36 = const false;               // scope 1 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
        _37 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
        drop(_3) -> bb14;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
    }

    bb14: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:125:6: 125:6
    }

    bb15 (cleanup): {
        drop(_18) -> bb23;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:119:10: 119:11
    }

    bb16 (cleanup): {
        drop(_0) -> bb25;                // scope 1 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
    }

    bb17 (cleanup): {
        switchInt(_37) -> [0: bb18, otherwise: bb26]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
    }

    bb18 (cleanup): {
        drop(_3) -> bb19;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
    }

    bb19 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:111:5: 125:6
    }

    bb20 (cleanup): {
        drop(_22) -> bb15;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:119:9: 119:10
    }

    bb21 (cleanup): {
        switchInt(_34) -> [0: bb15, otherwise: bb20]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:119:9: 119:10
    }

    bb22 (cleanup): {
        drop(_10) -> bb16;               // scope 2 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
    }

    bb23 (cleanup): {
        switchInt(_35) -> [0: bb16, otherwise: bb22]; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
    }

    bb24 (cleanup): {
        drop(_8) -> bb17;                // scope 1 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
    }

    bb25 (cleanup): {
        switchInt(_36) -> [0: bb17, otherwise: bb24]; // scope 1 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
    }

    bb26 (cleanup): {
        drop(_4) -> bb18;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:125:5: 125:6
    }
}

fn mq_publisher::<impl at cita-jsonrpc/src/mq_publisher.rs:134:1: 134:22>::new(_1: Publisher, _2: Duration, _3: Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> TimeoutPublisher {
    debug publisher => _1;               // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:135:16: 135:25
    debug timeout => _2;                 // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:135:38: 135:45
    debug timeout_responses => _3;       // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:135:57: 135:74
    let mut _0: mq_publisher::TimeoutPublisher; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:135:87: 135:91

    bb0: {
        _0 = TimeoutPublisher { publisher: move _1, timeout: _2, timeout_responses: move _3 }; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:136:9: 140:10
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:141:6: 141:6
    }
}

fn mq_publisher::<impl at cita-jsonrpc/src/mq_publisher.rs:134:1: 134:22>::publish(_1: TimeoutPublisher, _2: MQRequest) -> Box<dyn futures::Future<Item = hyper::Response<Body>, Error = ServiceError> + std::marker::Send> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:144:9: 144:17
    debug req => _2;                     // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:145:9: 145:12
    let mut _0: std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = service_error::ServiceError> + std::marker::Send>; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:185:9: 185:27
    let _3: tokio_timer::Delay;          // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:150:13: 150:20
    let mut _4: std::time::Instant;      // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:150:34: 150:61
    let mut _5: std::time::Instant;      // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:150:34: 150:46
    let mut _6: std::time::Duration;     // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:150:49: 150:61
    let _8: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:151:44: 151:67
    let mut _11: (std::option::Option<jsonrpc_types::rpc_request::RequestInfo>, std::vec::Vec<std::vec::Vec<u8>>); // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:152:35: 164:10
    let mut _12: isize;                  // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:153:13: 153:46
    let mut _14: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:154:17: 154:53
    let mut _15: jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:154:22: 154:52
    let mut _16: &jsonrpc_types::rpc_request::Request; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:154:22: 154:52
    let mut _17: std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
    let mut _18: std::boxed::Box<[std::vec::Vec<u8>]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _19: usize;                  // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _20: usize;                  // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _21: *mut u8;                // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _22: std::boxed::Box<[std::vec::Vec<u8>; 1]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _23: std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:155:22: 155:61
    let mut _24: &std::vec::Vec<u8>;     // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:155:22: 155:61
    let mut _26: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:158:17: 158:21
    let mut _27: std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:159:17: 162:31
    let mut _28: std::iter::Map<std::slice::Iter<'_, mq_publisher::HybridRequest>, [closure@cita-jsonrpc/src/mq_publisher.rs:161:26: 161:35]>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:159:17: 161:69
    let mut _29: std::slice::Iter<'_, mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:159:17: 160:28
    let mut _30: &[mq_publisher::HybridRequest]; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:159:17: 160:28
    let _31: &[mq_publisher::HybridRequest]; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:159:17: 160:28
    let mut _33: futures::future::Select2<response::PublishFutResponse, tokio_timer::Delay>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:166:24: 169:30
    let mut _34: response::PublishFutResponse; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:166:24: 168:26
    let mut _35: &mut mq_publisher::Publisher; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:166:24: 168:26
    let mut _36: mq_publisher::MQRequest; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:168:22: 168:25
    let mut _37: tokio_timer::Delay;     // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:169:22: 169:29
    let mut _38: [closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29]; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:19: 183:14
    let mut _39: std::boxed::Box<futures::Then<futures::future::Select2<response::PublishFutResponse, tokio_timer::Delay>, std::result::Result<hyper::Response<hyper::Body>, service_error::ServiceError>, [closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29]>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:185:9: 185:27
    let mut _40: futures::Then<futures::future::Select2<response::PublishFutResponse, tokio_timer::Delay>, std::result::Result<hyper::Response<hyper::Body>, service_error::ServiceError>, [closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29]>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:185:18: 185:26
    let mut _41: std::boxed::Box<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:153:31: 153:45
    let mut _42: std::boxed::Box<mq_publisher::HybridRequest>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:153:31: 153:45
    let mut _43: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    let mut _44: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    let mut _45: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    let mut _46: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    let mut _47: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    let mut _48: ();                     // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
    let mut _49: *const mq_publisher::HybridRequest; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:153:31: 153:45
    let mut _50: *const mq_publisher::HybridRequest; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:153:31: 153:45
    let mut _51: *const [std::vec::Vec<u8>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    scope 1 {
        debug timeout => _3;             // in scope 1 at cita-jsonrpc/src/mq_publisher.rs:150:13: 150:20
        let _7: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 1 at cita-jsonrpc/src/mq_publisher.rs:151:13: 151:30
        scope 2 {
            debug timeout_responses => _7; // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:151:13: 151:30
            let _9: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>; // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:152:14: 152:22
            let _10: std::vec::Vec<std::vec::Vec<u8>>; // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:152:24: 152:31
            let _13: &std::boxed::Box<mq_publisher::HybridRequest>; // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:153:31: 153:45
            let _25: &std::vec::Vec<mq_publisher::HybridRequest>; // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:157:30: 157:45
            scope 3 {
                debug req_info => _9;    // in scope 3 at cita-jsonrpc/src/mq_publisher.rs:152:14: 152:22
                debug req_ids => _10;    // in scope 3 at cita-jsonrpc/src/mq_publisher.rs:152:24: 152:31
                let _32: futures::Then<futures::future::Select2<response::PublishFutResponse, tokio_timer::Delay>, std::result::Result<hyper::Response<hyper::Body>, service_error::ServiceError>, [closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29]>; // in scope 3 at cita-jsonrpc/src/mq_publisher.rs:166:13: 166:21
                scope 7 {
                    debug fut_resp => _32; // in scope 7 at cita-jsonrpc/src/mq_publisher.rs:166:13: 166:21
                }
            }
            scope 4 {
                debug hybrid_req => _13; // in scope 4 at cita-jsonrpc/src/mq_publisher.rs:153:31: 153:45
                scope 5 {
                }
            }
            scope 6 {
                debug hybrid_reqs => _25; // in scope 6 at cita-jsonrpc/src/mq_publisher.rs:157:30: 157:45
            }
        }
    }

    bb0: {
        _45 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:185:9: 185:27
        _47 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:185:9: 185:27
        _43 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:185:9: 185:27
        _46 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:185:9: 185:27
        _44 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:185:9: 185:27
        _47 = const true;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:185:9: 185:27
        _5 = tokio::clock::now() -> [return: bb1, unwind: bb36]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:150:34: 150:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:150:34: 150:44
                                         // + literal: Const { ty: fn() -> Instant {tokio::clock::now}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = (_1.1: std::time::Duration); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:150:49: 150:61
        _4 = <Instant as Add<Duration>>::add(move _5, move _6) -> [return: bb2, unwind: bb36]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:150:34: 150:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:150:34: 150:61
                                         // + literal: Const { ty: fn(Instant, Duration) -> <Instant as Add<Duration>>::Output {<Instant as Add<Duration>>::add}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Delay::new(move _4) -> [return: bb3, unwind: bb36]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:150:23: 150:62
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:150:23: 150:33
                                         // + literal: Const { ty: fn(Instant) -> Delay {Delay::new}, val: Value(<ZST>) }
    }

    bb3: {
        _46 = const true;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:150:61: 150:62
        _8 = &(_1.2: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 1 at cita-jsonrpc/src/mq_publisher.rs:151:44: 151:67
        _7 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone(_8) -> [return: bb4, unwind: bb34]; // scope 1 at cita-jsonrpc/src/mq_publisher.rs:151:33: 151:68
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:151:33: 151:43
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _45 = const true;                // scope 1 at cita-jsonrpc/src/mq_publisher.rs:151:67: 151:68
        _12 = discriminant(_2);          // scope 2 at cita-jsonrpc/src/mq_publisher.rs:152:41: 152:44
        switchInt(move _12) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:152:35: 152:44
    }

    bb5: {
        _25 = &((_2 as Batch).0: std::vec::Vec<mq_publisher::HybridRequest>); // scope 2 at cita-jsonrpc/src/mq_publisher.rs:157:30: 157:45
        _26 = std::option::Option::<RequestInfo>::None; // scope 6 at cita-jsonrpc/src/mq_publisher.rs:158:17: 158:21
        _31 = <Vec<HybridRequest> as Deref>::deref(_25) -> [return: bb12, unwind: bb23]; // scope 6 at cita-jsonrpc/src/mq_publisher.rs:159:17: 160:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:159:17: 160:28
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<HybridRequest>) -> &'a <Vec<HybridRequest> as Deref>::Target {<Vec<HybridRequest> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 2 at cita-jsonrpc/src/mq_publisher.rs:152:41: 152:44
    }

    bb7: {
        _13 = &((_2 as Single).0: std::boxed::Box<mq_publisher::HybridRequest>); // scope 2 at cita-jsonrpc/src/mq_publisher.rs:153:31: 153:45
        _41 = deref_copy (*_13);         // scope 4 at cita-jsonrpc/src/mq_publisher.rs:154:22: 154:52
        _49 = (((_41.0: std::ptr::Unique<mq_publisher::HybridRequest>).0: std::ptr::NonNull<mq_publisher::HybridRequest>).0: *const mq_publisher::HybridRequest); // scope 4 at cita-jsonrpc/src/mq_publisher.rs:154:22: 154:52
        _16 = &((*_49).0: jsonrpc_types::rpc_request::Request); // scope 4 at cita-jsonrpc/src/mq_publisher.rs:154:22: 154:52
        _15 = jsonrpc_types::rpc_request::Request::get_info(move _16) -> [return: bb8, unwind: bb32]; // scope 4 at cita-jsonrpc/src/mq_publisher.rs:154:22: 154:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:154:42: 154:50
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::rpc_request::Request) -> RequestInfo {jsonrpc_types::rpc_request::Request::get_info}, val: Value(<ZST>) }
    }

    bb8: {
        _14 = std::option::Option::<RequestInfo>::Some(move _15); // scope 4 at cita-jsonrpc/src/mq_publisher.rs:154:17: 154:53
        _19 = const 24_usize;            // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _20 = const 8_usize;             // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _21 = alloc::alloc::exchange_malloc(move _19, move _20) -> [return: bb9, unwind: bb24]; // scope 5 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = ShallowInitBox(move _21, [std::vec::Vec<u8>; 1]); // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _42 = deref_copy (*_13);         // scope 4 at cita-jsonrpc/src/mq_publisher.rs:155:22: 155:61
        _50 = (((_42.0: std::ptr::Unique<mq_publisher::HybridRequest>).0: std::ptr::NonNull<mq_publisher::HybridRequest>).0: *const mq_publisher::HybridRequest); // scope 4 at cita-jsonrpc/src/mq_publisher.rs:155:22: 155:61
        _24 = &(((*_50).1: libproto::Request).0: std::vec::Vec<u8>); // scope 4 at cita-jsonrpc/src/mq_publisher.rs:155:22: 155:61
        _23 = <Vec<u8> as Clone>::clone(move _24) -> [return: bb10, unwind: bb30]; // scope 4 at cita-jsonrpc/src/mq_publisher.rs:155:22: 155:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:155:54: 155:59
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> Vec<u8> {<Vec<u8> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb10: {
        _51 = (((_22.0: std::ptr::Unique<[std::vec::Vec<u8>; 1]>).0: std::ptr::NonNull<[std::vec::Vec<u8>; 1]>).0: *const [std::vec::Vec<u8>; 1]); // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        (*_51) = [move _23];             // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        _18 = move _22 as std::boxed::Box<[std::vec::Vec<u8>]> (Pointer(Unsize)); // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _17 = slice::<impl [Vec<u8>]>::into_vec::<std::alloc::Global>(move _18) -> [return: bb11, unwind: bb24]; // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[Vec<u8>]>) -> Vec<Vec<u8>> {slice::<impl [Vec<u8>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb11: {
        _11 = (move _14, move _17);      // scope 4 at cita-jsonrpc/src/mq_publisher.rs:153:50: 156:14
        goto -> bb16;                    // scope 2 at cita-jsonrpc/src/mq_publisher.rs:156:13: 156:14
    }

    bb12: {
        _30 = _31;                       // scope 6 at cita-jsonrpc/src/mq_publisher.rs:159:17: 160:28
        _29 = core::slice::<impl [HybridRequest]>::iter(move _30) -> [return: bb13, unwind: bb23]; // scope 6 at cita-jsonrpc/src/mq_publisher.rs:159:17: 160:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:160:22: 160:26
                                         // + literal: Const { ty: for<'a> fn(&'a [HybridRequest]) -> std::slice::Iter<'a, HybridRequest> {core::slice::<impl [HybridRequest]>::iter}, val: Value(<ZST>) }
    }

    bb13: {
        _28 = <std::slice::Iter<'_, HybridRequest> as Iterator>::map::<Vec<u8>, [closure@cita-jsonrpc/src/mq_publisher.rs:161:26: 161:35]>(move _29, const ZeroSized: [closure@cita-jsonrpc/src/mq_publisher.rs:161:26: 161:35]) -> [return: bb14, unwind: bb23]; // scope 6 at cita-jsonrpc/src/mq_publisher.rs:159:17: 161:69
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:161:22: 161:25
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, HybridRequest>, [closure@cita-jsonrpc/src/mq_publisher.rs:161:26: 161:35]) -> std::iter::Map<std::slice::Iter<'_, HybridRequest>, [closure@cita-jsonrpc/src/mq_publisher.rs:161:26: 161:35]> {<std::slice::Iter<'_, HybridRequest> as Iterator>::map::<Vec<u8>, [closure@cita-jsonrpc/src/mq_publisher.rs:161:26: 161:35]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/mq_publisher.rs:161:26: 161:35], val: Value(<ZST>) }
    }

    bb14: {
        _27 = <std::iter::Map<std::slice::Iter<'_, HybridRequest>, [closure@cita-jsonrpc/src/mq_publisher.rs:161:26: 161:35]> as Iterator>::collect::<Vec<Vec<u8>>>(move _28) -> [return: bb15, unwind: bb23]; // scope 6 at cita-jsonrpc/src/mq_publisher.rs:159:17: 162:31
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:162:22: 162:29
                                         // + literal: Const { ty: fn(std::iter::Map<std::slice::Iter<'_, HybridRequest>, [closure@cita-jsonrpc/src/mq_publisher.rs:161:26: 161:35]>) -> Vec<Vec<u8>> {<std::iter::Map<std::slice::Iter<'_, HybridRequest>, [closure@cita-jsonrpc/src/mq_publisher.rs:161:26: 161:35]> as Iterator>::collect::<Vec<Vec<u8>>>}, val: Value(<ZST>) }
    }

    bb15: {
        _11 = (move _26, move _27);      // scope 6 at cita-jsonrpc/src/mq_publisher.rs:157:50: 163:14
        goto -> bb16;                    // scope 2 at cita-jsonrpc/src/mq_publisher.rs:163:13: 163:14
    }

    bb16: {
        _44 = const true;                // scope 2 at cita-jsonrpc/src/mq_publisher.rs:152:14: 152:22
        _9 = move (_11.0: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>); // scope 2 at cita-jsonrpc/src/mq_publisher.rs:152:14: 152:22
        _43 = const true;                // scope 2 at cita-jsonrpc/src/mq_publisher.rs:152:24: 152:31
        _10 = move (_11.1: std::vec::Vec<std::vec::Vec<u8>>); // scope 2 at cita-jsonrpc/src/mq_publisher.rs:152:24: 152:31
        _35 = &mut (_1.0: mq_publisher::Publisher); // scope 3 at cita-jsonrpc/src/mq_publisher.rs:166:24: 168:26
        _47 = const false;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:168:22: 168:25
        _36 = move _2;                   // scope 3 at cita-jsonrpc/src/mq_publisher.rs:168:22: 168:25
        _34 = Publisher::publish(move _35, move _36) -> [return: bb17, unwind: bb28]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:166:24: 168:26
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:168:14: 168:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Publisher, MQRequest) -> PublishFutResponse {Publisher::publish}, val: Value(<ZST>) }
    }

    bb17: {
        _46 = const false;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:169:22: 169:29
        _37 = move _3;                   // scope 3 at cita-jsonrpc/src/mq_publisher.rs:169:22: 169:29
        _33 = <PublishFutResponse as futures::Future>::select2::<Delay>(move _34, move _37) -> [return: bb18, unwind: bb28]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:166:24: 169:30
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:169:14: 169:21
                                         // + literal: Const { ty: fn(PublishFutResponse, Delay) -> Select2<PublishFutResponse, <Delay as futures::IntoFuture>::Future> {<PublishFutResponse as futures::Future>::select2::<Delay>}, val: Value(<ZST>) }
    }

    bb18: {
        _45 = const false;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:170:19: 183:14
        _43 = const false;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:170:19: 183:14
        _44 = const false;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:170:19: 183:14
        _38 = [closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29] { timeout_responses: move _7, req_ids: move _10, req_info: move _9 }; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:170:19: 183:14
                                         // closure
                                         // + def_id: DefId(0:318 ~ cita_jsonrpc[a6db]::mq_publisher::{impl#2}::publish::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::result::Result<futures::future::Either<(hyper::Response<hyper::Body>, tokio_timer::Delay), ((), response::PublishFutResponse)>, futures::future::Either<(service_error::ServiceError, tokio_timer::Delay), (tokio_timer::Error, response::PublishFutResponse)>>,)) -> std::result::Result<hyper::Response<hyper::Body>, service_error::ServiceError>,
                                         //     (std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>, std::vec::Vec<std::vec::Vec<u8>>, std::option::Option<jsonrpc_types::rpc_request::RequestInfo>),
                                         // ]
        _32 = <Select2<PublishFutResponse, Delay> as futures::Future>::then::<[closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29], Result<hyper::Response<Body>, ServiceError>>(move _33, move _38) -> [return: bb19, unwind: bb28]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:166:24: 183:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:170:14: 170:18
                                         // + literal: Const { ty: fn(Select2<PublishFutResponse, Delay>, [closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29]) -> futures::Then<Select2<PublishFutResponse, Delay>, Result<hyper::Response<Body>, ServiceError>, [closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29]> {<Select2<PublishFutResponse, Delay> as futures::Future>::then::<[closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29], Result<hyper::Response<Body>, ServiceError>>}, val: Value(<ZST>) }
    }

    bb19: {
        _40 = move _32;                  // scope 7 at cita-jsonrpc/src/mq_publisher.rs:185:18: 185:26
        _39 = Box::<futures::Then<Select2<PublishFutResponse, Delay>, Result<hyper::Response<Body>, ServiceError>, [closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29]>>::new(move _40) -> [return: bb20, unwind: bb28]; // scope 7 at cita-jsonrpc/src/mq_publisher.rs:185:9: 185:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:185:9: 185:17
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(futures::Then<Select2<PublishFutResponse, Delay>, Result<hyper::Response<Body>, ServiceError>, [closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29]>) -> Box<futures::Then<Select2<PublishFutResponse, Delay>, Result<hyper::Response<Body>, ServiceError>, [closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29]>> {Box::<futures::Then<Select2<PublishFutResponse, Delay>, Result<hyper::Response<Body>, ServiceError>, [closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29]>>::new}, val: Value(<ZST>) }
    }

    bb20: {
        _0 = move _39 as std::boxed::Box<dyn futures::Future<Item = hyper::Response<hyper::Body>, Error = service_error::ServiceError> + std::marker::Send> (Pointer(Unsize)); // scope 7 at cita-jsonrpc/src/mq_publisher.rs:185:9: 185:27
        _43 = const false;               // scope 2 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
        _44 = const false;               // scope 2 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
        _45 = const false;               // scope 1 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
        _46 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
        drop(_1) -> bb21;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    }

    bb21: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:6: 186:6
    }

    bb22 (cleanup): {
        switchInt(_44) -> [0: bb32, otherwise: bb29]; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    }

    bb23 (cleanup): {
        drop(_26) -> bb32;               // scope 6 at cita-jsonrpc/src/mq_publisher.rs:163:13: 163:14
    }

    bb24 (cleanup): {
        drop(_14) -> bb32;               // scope 4 at cita-jsonrpc/src/mq_publisher.rs:156:13: 156:14
    }

    bb25 (cleanup): {
        drop(_1) -> bb26;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    }

    bb26 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:143:5: 186:6
    }

    bb27 (cleanup): {
        drop(_10) -> bb22;               // scope 2 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    }

    bb28 (cleanup): {
        switchInt(_43) -> [0: bb22, otherwise: bb27]; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    }

    bb29 (cleanup): {
        drop(_9) -> bb32;                // scope 2 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    }

    bb30 (cleanup): {
        _48 = alloc::alloc::box_free::<[Vec<u8>; 1], std::alloc::Global>(move (_22.0: std::ptr::Unique<[std::vec::Vec<u8>; 1]>), const std::alloc::Global) -> bb24; // scope 4 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:46: 54:47
                                         // + literal: Const { ty: unsafe fn(Unique<[Vec<u8>; 1]>, std::alloc::Global) {alloc::alloc::box_free::<[Vec<u8>; 1], std::alloc::Global>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: std::alloc::Global, val: Value(<ZST>) }
    }

    bb31 (cleanup): {
        drop(_7) -> bb34;                // scope 1 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    }

    bb32 (cleanup): {
        switchInt(_45) -> [0: bb34, otherwise: bb31]; // scope 1 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    }

    bb33 (cleanup): {
        drop(_3) -> bb36;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    }

    bb34 (cleanup): {
        switchInt(_46) -> [0: bb36, otherwise: bb33]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    }

    bb35 (cleanup): {
        drop(_2) -> bb25;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    }

    bb36 (cleanup): {
        switchInt(_47) -> [0: bb25, otherwise: bb35]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:186:5: 186:6
    }
}

fn mq_publisher::<impl at cita-jsonrpc/src/mq_publisher.rs:134:1: 134:22>::publish::{closure#0}(_1: &mut [closure@cita-jsonrpc/src/mq_publisher.rs:161:26: 161:35], _2: &HybridRequest) -> Vec<u8> {
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:161:36: 161:36
    let _3: &&mq_publisher::HybridRequest; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:161:27: 161:34
    let mut _4: &std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:161:36: 161:68
    let mut _5: &mq_publisher::HybridRequest; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:161:27: 161:34
    scope 1 {
        debug req => _3;                 // in scope 1 at cita-jsonrpc/src/mq_publisher.rs:161:27: 161:34
    }

    bb0: {
        _3 = &_2;                        // scope 0 at cita-jsonrpc/src/mq_publisher.rs:161:27: 161:34
        _5 = deref_copy (*_3);           // scope 1 at cita-jsonrpc/src/mq_publisher.rs:161:36: 161:68
        _4 = &(((*_5).1: libproto::Request).0: std::vec::Vec<u8>); // scope 1 at cita-jsonrpc/src/mq_publisher.rs:161:36: 161:68
        _0 = <Vec<u8> as Clone>::clone(move _4) -> bb1; // scope 1 at cita-jsonrpc/src/mq_publisher.rs:161:36: 161:68
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:161:61: 161:66
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> Vec<u8> {<Vec<u8> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:161:68: 161:68
    }
}

fn mq_publisher::<impl at cita-jsonrpc/src/mq_publisher.rs:134:1: 134:22>::publish::{closure#1}(_1: [closure@cita-jsonrpc/src/mq_publisher.rs:170:19: 170:29], _2: Result<Either<(hyper::Response<Body>, Delay), ((), PublishFutResponse)>, Either<(ServiceError, Delay), (tokio_timer::Error, PublishFutResponse)>>) -> Result<hyper::Response<Body>, ServiceError> {
    debug res => _2;                     // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:25: 170:28
    debug timeout_responses => (_1.0: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:151:13: 151:30
    debug req_ids => (_1.1: std::vec::Vec<std::vec::Vec<u8>>); // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:152:24: 152:31
    debug req_info => (_1.2: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>); // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:152:14: 152:22
    let mut _0: std::result::Result<hyper::Response<hyper::Body>, service_error::ServiceError>; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:30: 170:30
    let mut _3: isize;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:171:20: 171:50
    let mut _4: isize;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:179:21: 179:54
    let mut _5: isize;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:171:17: 171:51
    let _6: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:171:31: 171:38
    let _7: tokio_timer::Delay;          // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:171:40: 171:48
    let _8: response::PublishFutResponse; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:172:47: 172:55
    let mut _10: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:173:37: 173:61
    let _11: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:173:37: 173:61
    let mut _12: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:173:37: 173:61
    let mut _13: std::vec::IntoIter<std::vec::Vec<u8>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
    let mut _14: std::vec::Vec<std::vec::Vec<u8>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
    let mut _16: std::option::Option<std::vec::Vec<u8>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
    let mut _17: &mut std::vec::IntoIter<std::vec::Vec<u8>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
    let mut _18: isize;                  // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:174:21: 176:22
    let _20: std::option::Option<helper::TransferType>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:175:25: 175:42
    let mut _21: &mut std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:175:25: 175:42
    let mut _22: &mut std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:175:25: 175:42
    let mut _23: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:175:25: 175:42
    let _24: &std::vec::Vec<u8>;         // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:175:38: 175:41
    let mut _25: service_error::ServiceError; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:177:25: 177:61
    let mut _26: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:177:52: 177:60
    let _27: service_error::ServiceError; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:179:32: 179:42
    let _28: tokio_timer::Delay;         // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:179:44: 179:52
    let _29: tokio_timer::Error;         // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:180:32: 180:44
    let _30: response::PublishFutResponse; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:180:46: 180:57
    let mut _31: service_error::ServiceError; // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:181:25: 181:58
    let mut _32: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    let mut _33: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    let mut _34: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    let mut _35: bool;                   // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    let mut _36: isize;                  // in scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    scope 1 {
        debug mq_resp => _6;             // in scope 1 at cita-jsonrpc/src/mq_publisher.rs:171:31: 171:38
        debug _timeout => _7;            // in scope 1 at cita-jsonrpc/src/mq_publisher.rs:171:40: 171:48
    }
    scope 2 {
        debug _reach_timeout => const (); // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:172:31: 172:45
        debug _no_resp => _8;            // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:172:47: 172:55
        let mut _9: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 2 at cita-jsonrpc/src/mq_publisher.rs:173:25: 173:34
        scope 3 {
            debug guard => _9;           // in scope 3 at cita-jsonrpc/src/mq_publisher.rs:173:25: 173:34
            let mut _15: std::vec::IntoIter<std::vec::Vec<u8>>; // in scope 3 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
            scope 4 {
                debug iter => _15;       // in scope 4 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
                let _19: std::vec::Vec<u8>; // in scope 4 at cita-jsonrpc/src/mq_publisher.rs:174:25: 174:27
                scope 5 {
                    debug id => _19;     // in scope 5 at cita-jsonrpc/src/mq_publisher.rs:174:25: 174:27
                }
            }
        }
    }
    scope 6 {
        debug mq_rpc_err => _27;         // in scope 6 at cita-jsonrpc/src/mq_publisher.rs:179:32: 179:42
        debug _timeout => _28;           // in scope 6 at cita-jsonrpc/src/mq_publisher.rs:179:44: 179:52
    }
    scope 7 {
        debug _timeout_err => _29;       // in scope 7 at cita-jsonrpc/src/mq_publisher.rs:180:32: 180:44
        debug _mq_rpc_err => _30;        // in scope 7 at cita-jsonrpc/src/mq_publisher.rs:180:46: 180:57
    }

    bb0: {
        _32 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:36: 170:39
        _33 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:36: 170:39
        _35 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:36: 170:39
        _34 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:36: 170:39
        _34 = const true;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:36: 170:39
        _35 = const true;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:36: 170:39
        _32 = const true;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:36: 170:39
        _33 = const true;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:36: 170:39
        _5 = discriminant(_2);           // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:36: 170:39
        switchInt(move _5) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:30: 170:39
    }

    bb1: {
        _3 = discriminant(((_2 as Ok).0: futures::future::Either<(hyper::Response<hyper::Body>, tokio_timer::Delay), ((), response::PublishFutResponse)>)); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:36: 170:39
        switchInt(move _3) -> [0: bb5, 1: bb6, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:30: 170:39
    }

    bb2: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:36: 170:39
    }

    bb3: {
        _4 = discriminant(((_2 as Err).0: futures::future::Either<(service_error::ServiceError, tokio_timer::Delay), (tokio_timer::Error, response::PublishFutResponse)>)); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:36: 170:39
        switchInt(move _4) -> [0: bb20, 1: bb4, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:30: 170:39
    }

    bb4: {
        _29 = move (((((_2 as Err).0: futures::future::Either<(service_error::ServiceError, tokio_timer::Delay), (tokio_timer::Error, response::PublishFutResponse)>) as B).0: (tokio_timer::Error, response::PublishFutResponse)).0: tokio_timer::Error); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:180:32: 180:44
        _30 = move (((((_2 as Err).0: futures::future::Either<(service_error::ServiceError, tokio_timer::Delay), (tokio_timer::Error, response::PublishFutResponse)>) as B).0: (tokio_timer::Error, response::PublishFutResponse)).1: response::PublishFutResponse); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:180:46: 180:57
        _31 = ServiceError::InternalServerError; // scope 7 at cita-jsonrpc/src/mq_publisher.rs:181:25: 181:58
        _0 = Result::<hyper::Response<Body>, ServiceError>::Err(move _31); // scope 7 at cita-jsonrpc/src/mq_publisher.rs:181:21: 181:59
        drop(_30) -> [return: bb33, unwind: bb43]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:182:17: 182:18
    }

    bb5: {
        _6 = move (((((_2 as Ok).0: futures::future::Either<(hyper::Response<hyper::Body>, tokio_timer::Delay), ((), response::PublishFutResponse)>) as A).0: (hyper::Response<hyper::Body>, tokio_timer::Delay)).0: hyper::Response<hyper::Body>); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:171:31: 171:38
        _7 = move (((((_2 as Ok).0: futures::future::Either<(hyper::Response<hyper::Body>, tokio_timer::Delay), ((), response::PublishFutResponse)>) as A).0: (hyper::Response<hyper::Body>, tokio_timer::Delay)).1: tokio_timer::Delay); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:171:40: 171:48
        _0 = Result::<hyper::Response<Body>, ServiceError>::Ok(move _6); // scope 1 at cita-jsonrpc/src/mq_publisher.rs:171:55: 171:66
        drop(_7) -> [return: bb33, unwind: bb43]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:171:65: 171:66
    }

    bb6: {
        _8 = move (((((_2 as Ok).0: futures::future::Either<(hyper::Response<hyper::Body>, tokio_timer::Delay), ((), response::PublishFutResponse)>) as B).0: ((), response::PublishFutResponse)).1: response::PublishFutResponse); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:172:47: 172:55
        _12 = &(_1.0: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 2 at cita-jsonrpc/src/mq_publisher.rs:173:37: 173:61
        _11 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Deref>::deref(move _12) -> [return: bb7, unwind: bb24]; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:173:37: 173:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:173:37: 173:61
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = _11;                       // scope 2 at cita-jsonrpc/src/mq_publisher.rs:173:37: 173:61
        _9 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>::lock(move _10) -> [return: bb8, unwind: bb24]; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:173:37: 173:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:173:55: 173:59
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>) -> lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>::lock}, val: Value(<ZST>) }
    }

    bb8: {
        _35 = const false;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
        _14 = move (_1.1: std::vec::Vec<std::vec::Vec<u8>>); // scope 3 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
        _13 = <Vec<Vec<u8>> as IntoIterator>::into_iter(move _14) -> [return: bb9, unwind: bb23]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
                                         // + literal: Const { ty: fn(Vec<Vec<u8>>) -> <Vec<Vec<u8>> as IntoIterator>::IntoIter {<Vec<Vec<u8>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = move _13;                  // scope 3 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
        goto -> bb10;                    // scope 4 at cita-jsonrpc/src/mq_publisher.rs:174:21: 176:22
    }

    bb10: {
        _17 = &mut _15;                  // scope 4 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
        _16 = <std::vec::IntoIter<Vec<u8>> as Iterator>::next(_17) -> [return: bb11, unwind: bb22]; // scope 4 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<Vec<u8>>) -> std::option::Option<<std::vec::IntoIter<Vec<u8>> as Iterator>::Item> {<std::vec::IntoIter<Vec<u8>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = discriminant(_16);         // scope 4 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
        switchInt(move _18) -> [0: bb14, 1: bb12, otherwise: bb13]; // scope 4 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
    }

    bb12: {
        _19 = move ((_16 as Some).0: std::vec::Vec<u8>); // scope 4 at cita-jsonrpc/src/mq_publisher.rs:174:25: 174:27
        _23 = &mut _9;                   // scope 5 at cita-jsonrpc/src/mq_publisher.rs:175:25: 175:42
        _22 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> as DerefMut>::deref_mut(move _23) -> [return: bb15, unwind: bb21]; // scope 5 at cita-jsonrpc/src/mq_publisher.rs:175:25: 175:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:175:25: 175:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb13: {
        unreachable;                     // scope 4 at cita-jsonrpc/src/mq_publisher.rs:174:31: 174:38
    }

    bb14: {
        drop(_15) -> [return: bb18, unwind: bb23]; // scope 3 at cita-jsonrpc/src/mq_publisher.rs:176:21: 176:22
    }

    bb15: {
        _21 = _22;                       // scope 5 at cita-jsonrpc/src/mq_publisher.rs:175:25: 175:42
        _24 = &_19;                      // scope 5 at cita-jsonrpc/src/mq_publisher.rs:175:38: 175:41
        _20 = HashMap::<Vec<u8>, TransferType>::remove::<Vec<u8>>(move _21, _24) -> [return: bb16, unwind: bb21]; // scope 5 at cita-jsonrpc/src/mq_publisher.rs:175:25: 175:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/mq_publisher.rs:175:31: 175:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut HashMap<Vec<u8>, TransferType>, &'b Vec<u8>) -> std::option::Option<TransferType> {HashMap::<Vec<u8>, TransferType>::remove::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_20) -> [return: bb17, unwind: bb21]; // scope 5 at cita-jsonrpc/src/mq_publisher.rs:175:42: 175:43
    }

    bb17: {
        drop(_19) -> [return: bb10, unwind: bb22]; // scope 4 at cita-jsonrpc/src/mq_publisher.rs:176:21: 176:22
    }

    bb18: {
        _34 = const false;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:177:52: 177:60
        _26 = move (_1.2: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>); // scope 3 at cita-jsonrpc/src/mq_publisher.rs:177:52: 177:60
        _25 = ServiceError::MQRpcTimeout(move _26); // scope 3 at cita-jsonrpc/src/mq_publisher.rs:177:25: 177:61
        _0 = Result::<hyper::Response<Body>, ServiceError>::Err(move _25); // scope 3 at cita-jsonrpc/src/mq_publisher.rs:177:21: 177:62
        drop(_9) -> [return: bb19, unwind: bb24]; // scope 2 at cita-jsonrpc/src/mq_publisher.rs:178:17: 178:18
    }

    bb19: {
        drop(_8) -> [return: bb33, unwind: bb43]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:178:17: 178:18
    }

    bb20: {
        _27 = move (((((_2 as Err).0: futures::future::Either<(service_error::ServiceError, tokio_timer::Delay), (tokio_timer::Error, response::PublishFutResponse)>) as A).0: (service_error::ServiceError, tokio_timer::Delay)).0: service_error::ServiceError); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:179:32: 179:42
        _28 = move (((((_2 as Err).0: futures::future::Either<(service_error::ServiceError, tokio_timer::Delay), (tokio_timer::Error, response::PublishFutResponse)>) as A).0: (service_error::ServiceError, tokio_timer::Delay)).1: tokio_timer::Delay); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:179:44: 179:52
        _0 = Result::<hyper::Response<Body>, ServiceError>::Err(move _27); // scope 6 at cita-jsonrpc/src/mq_publisher.rs:179:59: 179:74
        drop(_28) -> [return: bb33, unwind: bb43]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:179:73: 179:74
    }

    bb21 (cleanup): {
        drop(_19) -> bb22;               // scope 4 at cita-jsonrpc/src/mq_publisher.rs:176:21: 176:22
    }

    bb22 (cleanup): {
        drop(_15) -> bb23;               // scope 3 at cita-jsonrpc/src/mq_publisher.rs:176:21: 176:22
    }

    bb23 (cleanup): {
        drop(_9) -> bb24;                // scope 2 at cita-jsonrpc/src/mq_publisher.rs:178:17: 178:18
    }

    bb24 (cleanup): {
        drop(_8) -> bb43;                // scope 0 at cita-jsonrpc/src/mq_publisher.rs:178:17: 178:18
    }

    bb25 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:170:19: 183:14
    }

    bb26: {
        drop((_1.0: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>)) -> [return: bb41, unwind: bb37]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb27: {
        switchInt(_32) -> [0: bb28, otherwise: bb29]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb28: {
        _32 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
        goto -> bb26;                    // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb29: {
        goto -> bb28;                    // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb30: {
        switchInt(_33) -> [0: bb31, otherwise: bb32]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb31: {
        _33 = const false;               // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
        goto -> bb26;                    // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb32: {
        goto -> bb31;                    // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb33: {
        _36 = discriminant(_2);          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
        switchInt(move _36) -> [0: bb27, otherwise: bb30]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb34: {
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:14: 183:14
    }

    bb35 (cleanup): {
        switchInt(_34) -> [0: bb25, otherwise: bb36]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb36 (cleanup): {
        drop((_1.2: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>)) -> bb25; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb37 (cleanup): {
        switchInt(_35) -> [0: bb35, otherwise: bb38]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb38 (cleanup): {
        drop((_1.1: std::vec::Vec<std::vec::Vec<u8>>)) -> bb35; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb39: {
        switchInt(_34) -> [0: bb34, otherwise: bb40]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb40: {
        drop((_1.2: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>)) -> bb34; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb41: {
        switchInt(_35) -> [0: bb39, otherwise: bb42]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb42: {
        drop((_1.1: std::vec::Vec<std::vec::Vec<u8>>)) -> [return: bb39, unwind: bb35]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb43 (cleanup): {
        drop((_1.0: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>)) -> bb46; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb44 (cleanup): {
        switchInt(_34) -> [0: bb25, otherwise: bb45]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb45 (cleanup): {
        drop((_1.2: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>)) -> bb25; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb46 (cleanup): {
        switchInt(_35) -> [0: bb44, otherwise: bb47]; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }

    bb47 (cleanup): {
        drop((_1.1: std::vec::Vec<std::vec::Vec<u8>>)) -> bb44; // scope 0 at cita-jsonrpc/src/mq_publisher.rs:183:13: 183:14
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:32:1: 32:49>::with_headers(_1: hyper::Response<T>, _2: HeaderMap) -> hyper::Response<T> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/response.rs:33:21: 33:29
    debug headers => _2;                 // in scope 0 at cita-jsonrpc/src/response.rs:33:31: 33:38
    let mut _0: hyper::Response<T>;      // return place in scope 0 at cita-jsonrpc/src/response.rs:33:52: 33:56
    let _3: ();                          // in scope 0 at cita-jsonrpc/src/response.rs:34:9: 34:43
    let mut _4: &mut hyper::HeaderMap;   // in scope 0 at cita-jsonrpc/src/response.rs:34:9: 34:43
    let mut _5: &mut hyper::HeaderMap;   // in scope 0 at cita-jsonrpc/src/response.rs:34:9: 34:27
    let mut _6: &mut hyper::Response<T>; // in scope 0 at cita-jsonrpc/src/response.rs:34:9: 34:27
    let mut _7: hyper::HeaderMap;        // in scope 0 at cita-jsonrpc/src/response.rs:34:35: 34:42
    let mut _8: bool;                    // in scope 0 at cita-jsonrpc/src/response.rs:36:5: 36:6

    bb0: {
        _8 = const false;                // scope 0 at cita-jsonrpc/src/response.rs:34:9: 34:43
        _8 = const true;                 // scope 0 at cita-jsonrpc/src/response.rs:34:9: 34:43
        _6 = &mut _1;                    // scope 0 at cita-jsonrpc/src/response.rs:34:9: 34:27
        _5 = hyper::Response::<T>::headers_mut(move _6) -> [return: bb1, unwind: bb6]; // scope 0 at cita-jsonrpc/src/response.rs:34:9: 34:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:34:14: 34:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut hyper::Response<T>) -> &'a mut HeaderMap {hyper::Response::<T>::headers_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at cita-jsonrpc/src/response.rs:34:9: 34:43
        _8 = const false;                // scope 0 at cita-jsonrpc/src/response.rs:34:35: 34:42
        _7 = move _2;                    // scope 0 at cita-jsonrpc/src/response.rs:34:35: 34:42
        _3 = <HeaderMap as Extend<(std::option::Option<HeaderName>, HeaderValue)>>::extend::<HeaderMap>(move _4, move _7) -> [return: bb2, unwind: bb6]; // scope 0 at cita-jsonrpc/src/response.rs:34:9: 34:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:34:28: 34:34
                                         // + literal: Const { ty: for<'a> fn(&'a mut HeaderMap, HeaderMap) {<HeaderMap as Extend<(std::option::Option<HeaderName>, HeaderValue)>>::extend::<HeaderMap>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = move _1;                    // scope 0 at cita-jsonrpc/src/response.rs:35:9: 35:13
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:36:6: 36:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at cita-jsonrpc/src/response.rs:36:5: 36:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/response.rs:33:5: 36:6
    }

    bb5 (cleanup): {
        drop(_2) -> bb3;                 // scope 0 at cita-jsonrpc/src/response.rs:36:5: 36:6
    }

    bb6 (cleanup): {
        switchInt(_8) -> [0: bb3, otherwise: bb5]; // scope 0 at cita-jsonrpc/src/response.rs:36:5: 36:6
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:32:1: 32:49>::with_body(_1: hyper::Response<T>, _2: T) -> hyper::Response<T> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/response.rs:38:18: 38:22
    debug body => _2;                    // in scope 0 at cita-jsonrpc/src/response.rs:38:24: 38:28
    let mut _0: hyper::Response<T>;      // return place in scope 0 at cita-jsonrpc/src/response.rs:38:36: 38:40
    let mut _3: [closure@cita-jsonrpc/src/response.rs:39:18: 39:21]; // in scope 0 at cita-jsonrpc/src/response.rs:39:18: 39:26

    bb0: {
        _3 = [closure@cita-jsonrpc/src/response.rs:39:18: 39:21] { body: move _2 }; // scope 0 at cita-jsonrpc/src/response.rs:39:18: 39:26
                                         // closure
                                         // + def_id: DefId(0:345 ~ cita_jsonrpc[a6db]::response::{impl#0}::with_body::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     i32,
                                         //     extern "rust-call" fn((T,)) -> T,
                                         //     (T,),
                                         // ]
        _0 = hyper::Response::<T>::map::<[closure@cita-jsonrpc/src/response.rs:39:18: 39:21], T>(move _1, move _3) -> bb1; // scope 0 at cita-jsonrpc/src/response.rs:39:9: 39:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:39:14: 39:17
                                         // + literal: Const { ty: fn(hyper::Response<T>, [closure@cita-jsonrpc/src/response.rs:39:18: 39:21]) -> hyper::Response<T> {hyper::Response::<T>::map::<[closure@cita-jsonrpc/src/response.rs:39:18: 39:21], T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:40:6: 40:6
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:32:1: 32:49>::with_body::{closure#0}(_1: [closure@cita-jsonrpc/src/response.rs:39:18: 39:21], _2: T) -> T {
    debug body => (_1.0: T);             // in scope 0 at cita-jsonrpc/src/response.rs:38:24: 38:28
    let mut _0: T;                       // return place in scope 0 at cita-jsonrpc/src/response.rs:39:22: 39:22

    bb0: {
        _0 = move (_1.0: T);             // scope 0 at cita-jsonrpc/src/response.rs:39:22: 39:26
        drop(_2) -> bb1;                 // scope 0 at cita-jsonrpc/src/response.rs:39:25: 39:26
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:39:26: 39:26
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:32:1: 32:49>::with_status(_1: hyper::Response<T>, _2: StatusCode) -> hyper::Response<T> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/response.rs:42:20: 42:28
    debug code => _2;                    // in scope 0 at cita-jsonrpc/src/response.rs:42:30: 42:34
    let mut _0: hyper::Response<T>;      // return place in scope 0 at cita-jsonrpc/src/response.rs:42:51: 42:55
    let mut _3: &mut hyper::StatusCode;  // in scope 0 at cita-jsonrpc/src/response.rs:43:10: 43:27
    let mut _4: &mut hyper::Response<T>; // in scope 0 at cita-jsonrpc/src/response.rs:43:10: 43:27

    bb0: {
        _4 = &mut _1;                    // scope 0 at cita-jsonrpc/src/response.rs:43:10: 43:27
        _3 = hyper::Response::<T>::status_mut(move _4) -> [return: bb1, unwind: bb2]; // scope 0 at cita-jsonrpc/src/response.rs:43:10: 43:27
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:43:15: 43:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut hyper::Response<T>) -> &'a mut StatusCode {hyper::Response::<T>::status_mut}, val: Value(<ZST>) }
    }

    bb1: {
        (*_3) = _2;                      // scope 0 at cita-jsonrpc/src/response.rs:43:9: 43:34
        _0 = move _1;                    // scope 0 at cita-jsonrpc/src/response.rs:44:9: 44:13
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:45:6: 45:6
    }

    bb2 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at cita-jsonrpc/src/response.rs:45:5: 45:6
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/response.rs:42:5: 45:6
    }
}

fn FutureResponse::poll_response(_1: &mut Self) -> Result<Async<hyper::Response<Body>>, ServiceError> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/response.rs:63:22: 63:31
    let mut _0: std::result::Result<futures::Async<hyper::Response<hyper::Body>>, service_error::ServiceError>; // return place in scope 0 at cita-jsonrpc/src/response.rs:63:36: 63:64
    let _2: &str;                        // in scope 0 at cita-jsonrpc/src/response.rs:64:13: 64:26
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, service_error::ServiceError>, <<Self as response::FutureResponse>::Output as futures::Future>::Item>; // in scope 0 at cita-jsonrpc/src/response.rs:66:20: 73:11
    let mut _5: std::result::Result<<<Self as response::FutureResponse>::Output as futures::Future>::Item, service_error::ServiceError>; // in scope 0 at cita-jsonrpc/src/response.rs:66:20: 73:10
    let mut _6: std::result::Result<futures::Async<<<Self as response::FutureResponse>::Output as futures::Future>::Item>, <<Self as response::FutureResponse>::Output as futures::Future>::Error>; // in scope 0 at cita-jsonrpc/src/response.rs:66:26: 66:52
    let mut _7: &mut <Self as response::FutureResponse>::Output; // in scope 0 at cita-jsonrpc/src/response.rs:66:26: 66:52
    let mut _8: &mut <Self as response::FutureResponse>::Output; // in scope 0 at cita-jsonrpc/src/response.rs:66:26: 66:45
    let mut _9: isize;                   // in scope 0 at cita-jsonrpc/src/response.rs:67:16: 67:31
    let mut _10: isize;                  // in scope 0 at cita-jsonrpc/src/response.rs:67:13: 67:32
    let mut _11: futures::Async<hyper::Response<hyper::Body>>; // in scope 0 at cita-jsonrpc/src/response.rs:67:46: 67:61
    let mut _15: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _16: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _17: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _18: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _19: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _20: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _21: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _22: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _23: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _24: &[&str];                // in scope 0 at cita-jsonrpc/src/response.rs:70:24: 70:46
    let mut _25: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _26: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _27: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _28: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/response.rs:70:48: 70:61
    let _29: &&str;                      // in scope 0 at cita-jsonrpc/src/response.rs:70:48: 70:61
    let mut _30: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/response.rs:70:63: 70:64
    let _31: &<<Self as response::FutureResponse>::Output as futures::Future>::Error; // in scope 0 at cita-jsonrpc/src/response.rs:70:63: 70:64
    let mut _32: service_error::ServiceError; // in scope 0 at cita-jsonrpc/src/response.rs:71:21: 71:64
    let mut _33: isize;                  // in scope 0 at cita-jsonrpc/src/response.rs:73:10: 73:11
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, service_error::ServiceError>, hyper::HeaderMap>; // in scope 0 at cita-jsonrpc/src/response.rs:75:23: 78:12
    let mut _38: std::result::Result<hyper::HeaderMap, service_error::ServiceError>; // in scope 0 at cita-jsonrpc/src/response.rs:75:23: 78:11
    let mut _39: std::option::Option<hyper::HeaderMap>; // in scope 0 at cita-jsonrpc/src/response.rs:75:23: 75:44
    let mut _40: &mut std::option::Option<hyper::HeaderMap>; // in scope 0 at cita-jsonrpc/src/response.rs:75:23: 75:44
    let mut _41: &mut std::option::Option<hyper::HeaderMap>; // in scope 0 at cita-jsonrpc/src/response.rs:75:23: 75:37
    let mut _42: [closure@cita-jsonrpc/src/response.rs:75:56: 75:58]; // in scope 0 at cita-jsonrpc/src/response.rs:75:56: 78:10
    let mut _43: &&str;                  // in scope 0 at cita-jsonrpc/src/response.rs:75:56: 78:10
    let mut _44: isize;                  // in scope 0 at cita-jsonrpc/src/response.rs:78:11: 78:12
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, service_error::ServiceError>, std::vec::Vec<u8>>; // in scope 0 at cita-jsonrpc/src/response.rs:80:25: 83:12
    let mut _49: std::result::Result<std::vec::Vec<u8>, service_error::ServiceError>; // in scope 0 at cita-jsonrpc/src/response.rs:80:25: 83:11
    let mut _50: std::result::Result<std::vec::Vec<u8>, serde_json::Error>; // in scope 0 at cita-jsonrpc/src/response.rs:80:25: 80:50
    let _51: &<<Self as response::FutureResponse>::Output as futures::Future>::Item; // in scope 0 at cita-jsonrpc/src/response.rs:80:44: 80:49
    let mut _52: [closure@cita-jsonrpc/src/response.rs:80:59: 80:64]; // in scope 0 at cita-jsonrpc/src/response.rs:80:59: 83:10
    let mut _53: &&str;                  // in scope 0 at cita-jsonrpc/src/response.rs:80:59: 83:10
    let mut _54: isize;                  // in scope 0 at cita-jsonrpc/src/response.rs:83:11: 83:12
    let mut _58: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/response.rs:85:20: 86:35
    let mut _59: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/response.rs:85:20: 85:39
    let mut _60: hyper::HeaderMap;       // in scope 0 at cita-jsonrpc/src/response.rs:86:27: 86:34
    let mut _61: hyper::Body;            // in scope 0 at cita-jsonrpc/src/response.rs:87:24: 87:52
    let mut _62: std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/response.rs:87:42: 87:51
    let mut _63: futures::Async<hyper::Response<hyper::Body>>; // in scope 0 at cita-jsonrpc/src/response.rs:88:12: 88:30
    let mut _64: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/response.rs:88:25: 88:29
    let mut _68: bool;                   // in scope 0 at cita-jsonrpc/src/response.rs:87:52: 87:53
    let mut _69: bool;                   // in scope 0 at cita-jsonrpc/src/response.rs:89:5: 89:6
    let mut _70: bool;                   // in scope 0 at cita-jsonrpc/src/response.rs:89:5: 89:6
    let mut _71: isize;                  // in scope 0 at cita-jsonrpc/src/response.rs:73:11: 73:12
    let mut _72: isize;                  // in scope 0 at cita-jsonrpc/src/response.rs:73:11: 73:12
    scope 1 {
        debug response_type => _2;       // in scope 1 at cita-jsonrpc/src/response.rs:64:13: 64:26
        let _3: <<Self as response::FutureResponse>::Output as futures::Future>::Item; // in scope 1 at cita-jsonrpc/src/response.rs:66:13: 66:17
        let _12: <<Self as response::FutureResponse>::Output as futures::Future>::Item; // in scope 1 at cita-jsonrpc/src/response.rs:68:29: 68:33
        let _13: <<Self as response::FutureResponse>::Output as futures::Future>::Error; // in scope 1 at cita-jsonrpc/src/response.rs:69:17: 69:18
        let _34: std::result::Result<std::convert::Infallible, service_error::ServiceError>; // in scope 1 at cita-jsonrpc/src/response.rs:73:10: 73:11
        let _35: <<Self as response::FutureResponse>::Output as futures::Future>::Item; // in scope 1 at cita-jsonrpc/src/response.rs:66:20: 73:11
        scope 2 {
            debug resp => _3;            // in scope 2 at cita-jsonrpc/src/response.rs:66:13: 66:17
            let _36: hyper::HeaderMap;   // in scope 2 at cita-jsonrpc/src/response.rs:75:13: 75:20
            let _45: std::result::Result<std::convert::Infallible, service_error::ServiceError>; // in scope 2 at cita-jsonrpc/src/response.rs:78:11: 78:12
            let _46: hyper::HeaderMap;   // in scope 2 at cita-jsonrpc/src/response.rs:75:23: 78:12
            scope 10 {
                debug headers => _36;    // in scope 10 at cita-jsonrpc/src/response.rs:75:13: 75:20
                let _47: std::vec::Vec<u8>; // in scope 10 at cita-jsonrpc/src/response.rs:80:13: 80:22
                let _55: std::result::Result<std::convert::Infallible, service_error::ServiceError>; // in scope 10 at cita-jsonrpc/src/response.rs:83:11: 83:12
                let _56: std::vec::Vec<u8>; // in scope 10 at cita-jsonrpc/src/response.rs:80:25: 83:12
                scope 15 {
                    debug json_body => _47; // in scope 15 at cita-jsonrpc/src/response.rs:80:13: 80:22
                    let _57: hyper::Response<hyper::Body>; // in scope 15 at cita-jsonrpc/src/response.rs:85:13: 85:17
                    scope 20 {
                        debug resp => _57; // in scope 20 at cita-jsonrpc/src/response.rs:85:13: 85:17
                    }
                }
                scope 16 {
                    debug residual => _55; // in scope 16 at cita-jsonrpc/src/response.rs:83:11: 83:12
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _56;    // in scope 18 at cita-jsonrpc/src/response.rs:80:25: 83:12
                    scope 19 {
                    }
                }
            }
            scope 11 {
                debug residual => _45;   // in scope 11 at cita-jsonrpc/src/response.rs:78:11: 78:12
                scope 12 {
                }
            }
            scope 13 {
                debug val => _46;        // in scope 13 at cita-jsonrpc/src/response.rs:75:23: 78:12
                scope 14 {
                }
            }
        }
        scope 3 {
            debug resp => _12;           // in scope 3 at cita-jsonrpc/src/response.rs:68:29: 68:33
        }
        scope 4 {
            debug e => _13;              // in scope 4 at cita-jsonrpc/src/response.rs:69:17: 69:18
            let _14: log::Level;         // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            scope 5 {
                debug lvl => _14;        // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _65: &(&str, &str, &str, u32); // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _66: &[&str; 2]; // in scope 5 at cita-jsonrpc/src/response.rs:70:24: 70:46
                let mut _67: &log::LevelFilter; // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
        }
        scope 6 {
            debug residual => _34;       // in scope 6 at cita-jsonrpc/src/response.rs:73:10: 73:11
            scope 7 {
            }
        }
        scope 8 {
            debug val => _35;            // in scope 8 at cita-jsonrpc/src/response.rs:66:20: 73:11
            scope 9 {
            }
        }
    }

    bb0: {
        _68 = const false;               // scope 0 at cita-jsonrpc/src/response.rs:64:13: 64:26
        _69 = const false;               // scope 0 at cita-jsonrpc/src/response.rs:64:13: 64:26
        _70 = const false;               // scope 0 at cita-jsonrpc/src/response.rs:64:13: 64:26
        _2 = <Self as FutureResponse>::response_type() -> bb1; // scope 0 at cita-jsonrpc/src/response.rs:64:29: 64:70
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:64:29: 64:68
                                         // + literal: Const { ty: fn() -> &'static str {<Self as FutureResponse>::response_type}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = <Self as FutureResponse>::inner_output(_1) -> bb2; // scope 1 at cita-jsonrpc/src/response.rs:66:26: 66:45
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:66:31: 66:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut Self) -> &'a mut <Self as FutureResponse>::Output {<Self as FutureResponse>::inner_output}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = _8;                         // scope 1 at cita-jsonrpc/src/response.rs:66:26: 66:52
        _6 = <<Self as FutureResponse>::Output as futures::Future>::poll(move _7) -> bb3; // scope 1 at cita-jsonrpc/src/response.rs:66:26: 66:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:66:46: 66:50
                                         // + literal: Const { ty: for<'a> fn(&'a mut <Self as FutureResponse>::Output) -> Result<Async<<<Self as FutureResponse>::Output as futures::Future>::Item>, <<Self as FutureResponse>::Output as futures::Future>::Error> {<<Self as FutureResponse>::Output as futures::Future>::poll}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = discriminant(_6);          // scope 1 at cita-jsonrpc/src/response.rs:66:26: 66:52
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 1 at cita-jsonrpc/src/response.rs:66:20: 66:52
    }

    bb4: {
        _9 = discriminant(((_6 as Ok).0: futures::Async<<<Self as response::FutureResponse>::Output as futures::Future>::Item>)); // scope 1 at cita-jsonrpc/src/response.rs:66:26: 66:52
        switchInt(move _9) -> [0: bb8, 1: bb7, otherwise: bb5]; // scope 1 at cita-jsonrpc/src/response.rs:66:20: 66:52
    }

    bb5: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/response.rs:66:26: 66:52
    }

    bb6: {
        _13 = move ((_6 as Err).0: <<Self as response::FutureResponse>::Output as futures::Future>::Error); // scope 1 at cita-jsonrpc/src/response.rs:69:17: 69:18
        _14 = log::Level::Error;         // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _17 = &_14;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _67 = const _;                   // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(FutureResponse::poll_response, [Self], Some(promoted[2])) }
        _16 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _17, _67) -> [return: bb12, unwind: bb47]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = Async::<hyper::Response<Body>>::NotReady; // scope 1 at cita-jsonrpc/src/response.rs:67:46: 67:61
        _0 = Result::<Async<hyper::Response<Body>>, ServiceError>::Ok(move _11); // scope 1 at cita-jsonrpc/src/response.rs:67:43: 67:62
        goto -> bb44;                    // scope 1 at no-location
    }

    bb8: {
        _12 = move ((((_6 as Ok).0: futures::Async<<<Self as response::FutureResponse>::Output as futures::Future>::Item>) as Ready).0: <<Self as response::FutureResponse>::Output as futures::Future>::Item); // scope 1 at cita-jsonrpc/src/response.rs:68:29: 68:33
        _5 = Result::<<<Self as FutureResponse>::Output as futures::Future>::Item, ServiceError>::Ok(move _12); // scope 3 at cita-jsonrpc/src/response.rs:68:39: 68:47
        goto -> bb20;                    // scope 1 at cita-jsonrpc/src/response.rs:68:46: 68:47
    }

    bb9: {
        _15 = const false;               // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb11;                    // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb10: {
        _19 = &_14;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _21 = log::max_level() -> [return: bb13, unwind: bb47]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb11: {
        switchInt(move _15) -> [0: bb19, otherwise: bb15]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb12: {
        switchInt(move _16) -> [0: bb9, otherwise: bb10]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        _20 = &_21;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _18 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _19, move _20) -> [return: bb14, unwind: bb47]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb14: {
        _15 = move _18;                  // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb11;                    // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb15: {
        _66 = const _;                   // scope 5 at cita-jsonrpc/src/response.rs:70:24: 70:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:70:24: 70:46
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(FutureResponse::poll_response, [Self], Some(promoted[1])) }
        _24 = _66 as &[&str] (Pointer(Unsize)); // scope 5 at cita-jsonrpc/src/response.rs:70:24: 70:46
        _29 = &_2;                       // scope 5 at cita-jsonrpc/src/response.rs:70:48: 70:61
        _28 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_29) -> [return: bb16, unwind: bb47]; // scope 5 at cita-jsonrpc/src/response.rs:70:48: 70:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:70:48: 70:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb16: {
        _31 = &_13;                      // scope 5 at cita-jsonrpc/src/response.rs:70:63: 70:64
        _30 = core::fmt::ArgumentV1::<'_>::new_display::<<<Self as FutureResponse>::Output as futures::Future>::Error>(_31) -> [return: bb17, unwind: bb47]; // scope 5 at cita-jsonrpc/src/response.rs:70:63: 70:64
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:70:63: 70:64
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b <<Self as FutureResponse>::Output as futures::Future>::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<<<Self as FutureResponse>::Output as futures::Future>::Error>}, val: Value(<ZST>) }
    }

    bb17: {
        _27 = [move _28, move _30];      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _26 = &_27;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _25 = _26 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _23 = Arguments::<'_>::new_v1(move _24, move _25) -> [return: bb18, unwind: bb47]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb18: {
        _65 = const _;                   // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(FutureResponse::poll_response, [Self], Some(promoted[0])) }
        _22 = log::__private_api_log(move _23, _14, _65) -> [return: bb59, unwind: bb47]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb19: {
        _32 = ServiceError::MQResponsePollIncompleteError; // scope 4 at cita-jsonrpc/src/response.rs:71:21: 71:64
        _5 = Result::<<<Self as FutureResponse>::Output as futures::Future>::Item, ServiceError>::Err(move _32); // scope 4 at cita-jsonrpc/src/response.rs:71:17: 71:65
        drop(_13) -> bb20;               // scope 1 at cita-jsonrpc/src/response.rs:72:13: 72:14
    }

    bb20: {
        _4 = <Result<<<Self as FutureResponse>::Output as futures::Future>::Item, ServiceError> as Try>::branch(move _5) -> bb21; // scope 1 at cita-jsonrpc/src/response.rs:66:20: 73:11
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:66:20: 73:11
                                         // + literal: Const { ty: fn(Result<<<Self as FutureResponse>::Output as futures::Future>::Item, ServiceError>) -> ControlFlow<<Result<<<Self as FutureResponse>::Output as futures::Future>::Item, ServiceError> as Try>::Residual, <Result<<<Self as FutureResponse>::Output as futures::Future>::Item, ServiceError> as Try>::Output> {<Result<<<Self as FutureResponse>::Output as futures::Future>::Item, ServiceError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb21: {
        _33 = discriminant(_4);          // scope 1 at cita-jsonrpc/src/response.rs:66:20: 73:11
        switchInt(move _33) -> [0: bb22, 1: bb24, otherwise: bb23]; // scope 1 at cita-jsonrpc/src/response.rs:66:20: 73:11
    }

    bb22: {
        _35 = move ((_4 as Continue).0: <<Self as response::FutureResponse>::Output as futures::Future>::Item); // scope 1 at cita-jsonrpc/src/response.rs:66:20: 73:11
        _3 = move _35;                   // scope 9 at cita-jsonrpc/src/response.rs:66:20: 73:11
        _71 = discriminant(_6);          // scope 1 at cita-jsonrpc/src/response.rs:73:11: 73:12
        switchInt(move _71) -> [0: bb50, otherwise: bb49]; // scope 1 at cita-jsonrpc/src/response.rs:73:11: 73:12
    }

    bb23: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/response.rs:66:20: 73:11
    }

    bb24: {
        _34 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, service_error::ServiceError>); // scope 1 at cita-jsonrpc/src/response.rs:73:10: 73:11
        _0 = <Result<Async<hyper::Response<Body>>, ServiceError> as FromResidual<Result<Infallible, ServiceError>>>::from_residual(move _34) -> bb44; // scope 7 at cita-jsonrpc/src/response.rs:66:20: 73:11
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:73:10: 73:11
                                         // + literal: Const { ty: fn(Result<Infallible, ServiceError>) -> Result<Async<hyper::Response<Body>>, ServiceError> {<Result<Async<hyper::Response<Body>>, ServiceError> as FromResidual<Result<Infallible, ServiceError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb25: {
        _40 = _41;                       // scope 2 at cita-jsonrpc/src/response.rs:75:23: 75:44
        _39 = std::option::Option::<HeaderMap>::take(move _40) -> [return: bb26, unwind: bb46]; // scope 2 at cita-jsonrpc/src/response.rs:75:23: 75:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:75:38: 75:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::option::Option<HeaderMap>) -> std::option::Option<HeaderMap> {std::option::Option::<HeaderMap>::take}, val: Value(<ZST>) }
    }

    bb26: {
        _43 = &_2;                       // scope 2 at cita-jsonrpc/src/response.rs:75:56: 78:10
        _42 = [closure@cita-jsonrpc/src/response.rs:75:56: 75:58] { response_type: move _43 }; // scope 2 at cita-jsonrpc/src/response.rs:75:56: 78:10
                                         // closure
                                         // + def_id: DefId(0:355 ~ cita_jsonrpc[a6db]::response::FutureResponse::poll_response::{closure#0})
                                         // + substs: [
                                         //     Self,
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> service_error::ServiceError,
                                         //     (&&str,),
                                         // ]
        _38 = std::option::Option::<HeaderMap>::ok_or_else::<ServiceError, [closure@cita-jsonrpc/src/response.rs:75:56: 75:58]>(move _39, move _42) -> [return: bb27, unwind: bb46]; // scope 2 at cita-jsonrpc/src/response.rs:75:23: 78:11
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:75:45: 75:55
                                         // + literal: Const { ty: fn(std::option::Option<HeaderMap>, [closure@cita-jsonrpc/src/response.rs:75:56: 75:58]) -> Result<HeaderMap, ServiceError> {std::option::Option::<HeaderMap>::ok_or_else::<ServiceError, [closure@cita-jsonrpc/src/response.rs:75:56: 75:58]>}, val: Value(<ZST>) }
    }

    bb27: {
        _37 = <Result<HeaderMap, ServiceError> as Try>::branch(move _38) -> [return: bb28, unwind: bb46]; // scope 2 at cita-jsonrpc/src/response.rs:75:23: 78:12
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:75:23: 78:12
                                         // + literal: Const { ty: fn(Result<HeaderMap, ServiceError>) -> ControlFlow<<Result<HeaderMap, ServiceError> as Try>::Residual, <Result<HeaderMap, ServiceError> as Try>::Output> {<Result<HeaderMap, ServiceError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb28: {
        _44 = discriminant(_37);         // scope 2 at cita-jsonrpc/src/response.rs:75:23: 78:12
        switchInt(move _44) -> [0: bb29, 1: bb31, otherwise: bb30]; // scope 2 at cita-jsonrpc/src/response.rs:75:23: 78:12
    }

    bb29: {
        _46 = move ((_37 as Continue).0: hyper::HeaderMap); // scope 2 at cita-jsonrpc/src/response.rs:75:23: 78:12
        _70 = const true;                // scope 14 at cita-jsonrpc/src/response.rs:75:23: 78:12
        _36 = move _46;                  // scope 14 at cita-jsonrpc/src/response.rs:75:23: 78:12
        _51 = &_3;                       // scope 10 at cita-jsonrpc/src/response.rs:80:44: 80:49
        _50 = to_vec::<<<Self as FutureResponse>::Output as futures::Future>::Item>(_51) -> [return: bb32, unwind: bb58]; // scope 10 at cita-jsonrpc/src/response.rs:80:25: 80:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:80:25: 80:43
                                         // + literal: Const { ty: for<'a> fn(&'a <<Self as FutureResponse>::Output as futures::Future>::Item) -> Result<Vec<u8>, serde_json::Error> {to_vec::<<<Self as FutureResponse>::Output as futures::Future>::Item>}, val: Value(<ZST>) }
    }

    bb30: {
        unreachable;                     // scope 2 at cita-jsonrpc/src/response.rs:75:23: 78:12
    }

    bb31: {
        _45 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, service_error::ServiceError>); // scope 2 at cita-jsonrpc/src/response.rs:78:11: 78:12
        _0 = <Result<Async<hyper::Response<Body>>, ServiceError> as FromResidual<Result<Infallible, ServiceError>>>::from_residual(move _45) -> [return: bb60, unwind: bb46]; // scope 12 at cita-jsonrpc/src/response.rs:75:23: 78:12
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:78:11: 78:12
                                         // + literal: Const { ty: fn(Result<Infallible, ServiceError>) -> Result<Async<hyper::Response<Body>>, ServiceError> {<Result<Async<hyper::Response<Body>>, ServiceError> as FromResidual<Result<Infallible, ServiceError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb32: {
        _53 = &_2;                       // scope 10 at cita-jsonrpc/src/response.rs:80:59: 83:10
        _52 = [closure@cita-jsonrpc/src/response.rs:80:59: 80:64] { response_type: move _53 }; // scope 10 at cita-jsonrpc/src/response.rs:80:59: 83:10
                                         // closure
                                         // + def_id: DefId(0:356 ~ cita_jsonrpc[a6db]::response::FutureResponse::poll_response::{closure#1})
                                         // + substs: [
                                         //     Self,
                                         //     i32,
                                         //     extern "rust-call" fn((serde_json::Error,)) -> service_error::ServiceError,
                                         //     (&&str,),
                                         // ]
        _49 = Result::<Vec<u8>, serde_json::Error>::map_err::<ServiceError, [closure@cita-jsonrpc/src/response.rs:80:59: 80:64]>(move _50, move _52) -> [return: bb33, unwind: bb58]; // scope 10 at cita-jsonrpc/src/response.rs:80:25: 83:11
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:80:51: 80:58
                                         // + literal: Const { ty: fn(Result<Vec<u8>, serde_json::Error>, [closure@cita-jsonrpc/src/response.rs:80:59: 80:64]) -> Result<Vec<u8>, ServiceError> {Result::<Vec<u8>, serde_json::Error>::map_err::<ServiceError, [closure@cita-jsonrpc/src/response.rs:80:59: 80:64]>}, val: Value(<ZST>) }
    }

    bb33: {
        _48 = <Result<Vec<u8>, ServiceError> as Try>::branch(move _49) -> [return: bb34, unwind: bb58]; // scope 10 at cita-jsonrpc/src/response.rs:80:25: 83:12
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:80:25: 83:12
                                         // + literal: Const { ty: fn(Result<Vec<u8>, ServiceError>) -> ControlFlow<<Result<Vec<u8>, ServiceError> as Try>::Residual, <Result<Vec<u8>, ServiceError> as Try>::Output> {<Result<Vec<u8>, ServiceError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb34: {
        _54 = discriminant(_48);         // scope 10 at cita-jsonrpc/src/response.rs:80:25: 83:12
        switchInt(move _54) -> [0: bb35, 1: bb37, otherwise: bb36]; // scope 10 at cita-jsonrpc/src/response.rs:80:25: 83:12
    }

    bb35: {
        _56 = move ((_48 as Continue).0: std::vec::Vec<u8>); // scope 10 at cita-jsonrpc/src/response.rs:80:25: 83:12
        _69 = const true;                // scope 19 at cita-jsonrpc/src/response.rs:80:25: 83:12
        _47 = move _56;                  // scope 19 at cita-jsonrpc/src/response.rs:80:25: 83:12
        _59 = <hyper::Response<Body> as Default>::default() -> [return: bb39, unwind: bb56]; // scope 15 at cita-jsonrpc/src/response.rs:85:20: 85:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:85:20: 85:37
                                         // + literal: Const { ty: fn() -> hyper::Response<Body> {<hyper::Response<Body> as Default>::default}, val: Value(<ZST>) }
    }

    bb36: {
        unreachable;                     // scope 10 at cita-jsonrpc/src/response.rs:80:25: 83:12
    }

    bb37: {
        _55 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, service_error::ServiceError>); // scope 10 at cita-jsonrpc/src/response.rs:83:11: 83:12
        _0 = <Result<Async<hyper::Response<Body>>, ServiceError> as FromResidual<Result<Infallible, ServiceError>>>::from_residual(move _55) -> [return: bb38, unwind: bb58]; // scope 17 at cita-jsonrpc/src/response.rs:80:25: 83:12
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:83:11: 83:12
                                         // + literal: Const { ty: fn(Result<Infallible, ServiceError>) -> Result<Async<hyper::Response<Body>>, ServiceError> {<Result<Async<hyper::Response<Body>>, ServiceError> as FromResidual<Result<Infallible, ServiceError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb38: {
        _69 = const false;               // scope 10 at cita-jsonrpc/src/response.rs:89:5: 89:6
        drop(_36) -> [return: bb43, unwind: bb46]; // scope 2 at cita-jsonrpc/src/response.rs:89:5: 89:6
    }

    bb39: {
        _70 = const false;               // scope 15 at cita-jsonrpc/src/response.rs:86:27: 86:34
        _60 = move _36;                  // scope 15 at cita-jsonrpc/src/response.rs:86:27: 86:34
        _58 = <hyper::Response<Body> as HyperResponseExt<Body>>::with_headers(move _59, move _60) -> [return: bb40, unwind: bb56]; // scope 15 at cita-jsonrpc/src/response.rs:85:20: 86:35
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:86:14: 86:26
                                         // + literal: Const { ty: fn(hyper::Response<Body>, HeaderMap) -> hyper::Response<Body> {<hyper::Response<Body> as HyperResponseExt<Body>>::with_headers}, val: Value(<ZST>) }
    }

    bb40: {
        _68 = const true;                // scope 15 at cita-jsonrpc/src/response.rs:86:34: 86:35
        _69 = const false;               // scope 15 at cita-jsonrpc/src/response.rs:87:42: 87:51
        _62 = move _47;                  // scope 15 at cita-jsonrpc/src/response.rs:87:42: 87:51
        _61 = <Body as From<Vec<u8>>>::from(move _62) -> [return: bb41, unwind: bb54]; // scope 15 at cita-jsonrpc/src/response.rs:87:24: 87:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:87:24: 87:41
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Vec<u8>) -> Body {<Body as From<Vec<u8>>>::from}, val: Value(<ZST>) }
    }

    bb41: {
        _68 = const false;               // scope 15 at cita-jsonrpc/src/response.rs:85:20: 87:53
        _57 = <hyper::Response<Body> as HyperResponseExt<Body>>::with_body(move _58, move _61) -> [return: bb42, unwind: bb54]; // scope 15 at cita-jsonrpc/src/response.rs:85:20: 87:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:87:14: 87:23
                                         // + literal: Const { ty: fn(hyper::Response<Body>, Body) -> hyper::Response<Body> {<hyper::Response<Body> as HyperResponseExt<Body>>::with_body}, val: Value(<ZST>) }
    }

    bb42: {
        _68 = const false;               // scope 15 at cita-jsonrpc/src/response.rs:87:52: 87:53
        _64 = move _57;                  // scope 20 at cita-jsonrpc/src/response.rs:88:25: 88:29
        _63 = Async::<hyper::Response<Body>>::Ready(move _64); // scope 20 at cita-jsonrpc/src/response.rs:88:12: 88:30
        _0 = Result::<Async<hyper::Response<Body>>, ServiceError>::Ok(move _63); // scope 20 at cita-jsonrpc/src/response.rs:88:9: 88:31
        _69 = const false;               // scope 10 at cita-jsonrpc/src/response.rs:89:5: 89:6
        _70 = const false;               // scope 2 at cita-jsonrpc/src/response.rs:89:5: 89:6
        drop(_3) -> bb45;                // scope 1 at cita-jsonrpc/src/response.rs:89:5: 89:6
    }

    bb43: {
        _70 = const false;               // scope 2 at cita-jsonrpc/src/response.rs:89:5: 89:6
        drop(_3) -> bb45;                // scope 1 at cita-jsonrpc/src/response.rs:89:5: 89:6
    }

    bb44: {
        _72 = discriminant(_6);          // scope 1 at cita-jsonrpc/src/response.rs:73:11: 73:12
        switchInt(move _72) -> [0: bb52, otherwise: bb51]; // scope 1 at cita-jsonrpc/src/response.rs:73:11: 73:12
    }

    bb45: {
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:89:6: 89:6
    }

    bb46 (cleanup): {
        drop(_3) -> bb48;                // scope 1 at cita-jsonrpc/src/response.rs:89:5: 89:6
    }

    bb47 (cleanup): {
        drop(_13) -> bb48;               // scope 1 at cita-jsonrpc/src/response.rs:72:13: 72:14
    }

    bb48 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/response.rs:63:5: 89:6
    }

    bb49: {
        _41 = <Self as FutureResponse>::headers(_1) -> [return: bb25, unwind: bb46]; // scope 2 at cita-jsonrpc/src/response.rs:75:23: 75:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:75:28: 75:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut Self) -> &'a mut std::option::Option<HeaderMap> {<Self as FutureResponse>::headers}, val: Value(<ZST>) }
    }

    bb50: {
        goto -> bb49;                    // scope 1 at cita-jsonrpc/src/response.rs:73:11: 73:12
    }

    bb51: {
        goto -> bb45;                    // scope 1 at no-location
    }

    bb52: {
        goto -> bb51;                    // scope 1 at cita-jsonrpc/src/response.rs:73:11: 73:12
    }

    bb53 (cleanup): {
        drop(_58) -> bb56;               // scope 15 at cita-jsonrpc/src/response.rs:87:52: 87:53
    }

    bb54 (cleanup): {
        switchInt(_68) -> [0: bb56, otherwise: bb53]; // scope 15 at cita-jsonrpc/src/response.rs:87:52: 87:53
    }

    bb55 (cleanup): {
        drop(_47) -> bb58;               // scope 10 at cita-jsonrpc/src/response.rs:89:5: 89:6
    }

    bb56 (cleanup): {
        switchInt(_69) -> [0: bb58, otherwise: bb55]; // scope 10 at cita-jsonrpc/src/response.rs:89:5: 89:6
    }

    bb57 (cleanup): {
        drop(_36) -> bb46;               // scope 2 at cita-jsonrpc/src/response.rs:89:5: 89:6
    }

    bb58 (cleanup): {
        switchInt(_70) -> [0: bb46, otherwise: bb57]; // scope 2 at cita-jsonrpc/src/response.rs:89:5: 89:6
    }

    bb59: {
        goto -> bb19;                    // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb60: {
        goto -> bb43;                    // scope 12 at cita-jsonrpc/src/response.rs:75:23: 78:12
    }
}

promoted[0] in FutureResponse::poll_response: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/response.rs:70:17: 70:65
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/response.rs:70:17: 70:65

    bb0: {
        _3 = const "cita_jsonrpc::response"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::response"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/response.rs"; // scope 0 at cita-jsonrpc/src/response.rs:70:17: 70:65
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:70:17: 70:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/response.rs:70:17: 70:65
        _1 = (move _2, move _4, move _6, const 70_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in FutureResponse::poll_response: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-jsonrpc/src/response.rs:70:24: 70:46
    let mut _1: [&str; 2];               // in scope 0 at cita-jsonrpc/src/response.rs:70:24: 70:46

    bb0: {
        _1 = [const "pool ", const " response: "]; // scope 0 at cita-jsonrpc/src/response.rs:70:24: 70:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:70:24: 70:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:70:24: 70:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/response.rs:70:24: 70:46
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:70:24: 70:46
    }
}

promoted[2] in FutureResponse::poll_response: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn FutureResponse::poll_response::{closure#0}(_1: [closure@cita-jsonrpc/src/response.rs:75:56: 75:58]) -> ServiceError {
    debug response_type => (*(_1.0: &&str)); // in scope 0 at cita-jsonrpc/src/response.rs:64:13: 64:26
    let mut _0: service_error::ServiceError; // return place in scope 0 at cita-jsonrpc/src/response.rs:75:59: 75:59
    let _2: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _3: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _5: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _7: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _8: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _9: log::LevelFilter;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _11: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _12: &[&str];                // in scope 0 at cita-jsonrpc/src/response.rs:76:20: 76:51
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/response.rs:76:53: 76:66
    let mut _20: &&str;                  // in scope 0 at cita-jsonrpc/src/response.rs:75:56: 78:10
    scope 1 {
        debug lvl => _2;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _17: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _18: &[&str; 2];         // in scope 1 at cita-jsonrpc/src/response.rs:76:20: 76:51
        let mut _19: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _2 = log::Level::Error;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _5 = &_2;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _19 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(FutureResponse::poll_response::{closure#0}, [Self, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _4 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _5, _19) -> bb4; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _7 = &_2;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _9 = log::max_level() -> bb5;    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _3) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _4) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _8 = &_9;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _6 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _7, move _8) -> bb6; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _3 = move _6;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _18 = const _;                   // scope 1 at cita-jsonrpc/src/response.rs:76:20: 76:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:76:20: 76:51
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(FutureResponse::poll_response::{closure#0}, [Self, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _12 = _18 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/response.rs:76:20: 76:51
        _20 = deref_copy (_1.0: &&str);  // scope 1 at cita-jsonrpc/src/response.rs:76:53: 76:66
        _16 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_20) -> bb8; // scope 1 at cita-jsonrpc/src/response.rs:76:53: 76:66
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:76:53: 76:66
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = [move _16];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = &_15;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _13 = _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> bb9; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(FutureResponse::poll_response::{closure#0}, [Self, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _10 = log::__private_api_log(move _11, _2, _17) -> bb10; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        _0 = ServiceError::InternalServerError; // scope 0 at cita-jsonrpc/src/response.rs:77:13: 77:46
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:78:10: 78:10
    }
}

promoted[0] in FutureResponse::poll_response::{closure#0}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/response.rs:76:13: 76:67
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/response.rs:76:13: 76:67

    bb0: {
        _3 = const "cita_jsonrpc::response"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::response"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/response.rs"; // scope 0 at cita-jsonrpc/src/response.rs:76:13: 76:67
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:76:13: 76:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/response.rs:76:13: 76:67
        _1 = (move _2, move _4, move _6, const 76_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in FutureResponse::poll_response::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-jsonrpc/src/response.rs:76:20: 76:51
    let mut _1: [&str; 2];               // in scope 0 at cita-jsonrpc/src/response.rs:76:20: 76:51

    bb0: {
        _1 = [const "pull ", const " future response twice"]; // scope 0 at cita-jsonrpc/src/response.rs:76:20: 76:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:76:20: 76:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:76:20: 76:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/response.rs:76:20: 76:51
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:76:20: 76:51
    }
}

promoted[2] in FutureResponse::poll_response::{closure#0}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn FutureResponse::poll_response::{closure#1}(_1: [closure@cita-jsonrpc/src/response.rs:80:59: 80:64], _2: serde_json::Error) -> ServiceError {
    debug err => _2;                     // in scope 0 at cita-jsonrpc/src/response.rs:80:60: 80:63
    debug response_type => (*(_1.0: &&str)); // in scope 0 at cita-jsonrpc/src/response.rs:64:13: 64:26
    let mut _0: service_error::ServiceError; // return place in scope 0 at cita-jsonrpc/src/response.rs:80:65: 80:65
    let _3: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _6: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _8: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _9: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _12: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _13: &[&str];                // in scope 0 at cita-jsonrpc/src/response.rs:81:20: 81:48
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/response.rs:81:50: 81:63
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/response.rs:81:65: 81:68
    let _19: &serde_json::Error;         // in scope 0 at cita-jsonrpc/src/response.rs:81:65: 81:68
    let mut _23: &&str;                  // in scope 0 at cita-jsonrpc/src/response.rs:80:59: 83:10
    scope 1 {
        debug lvl => _3;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _20: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _21: &[&str; 2];         // in scope 1 at cita-jsonrpc/src/response.rs:81:20: 81:48
        let mut _22: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _3 = log::Level::Error;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _6 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _22 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(FutureResponse::poll_response::{closure#1}, [Self, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _5 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _6, _22) -> [return: bb4, unwind: bb13]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _8 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _10 = log::max_level() -> [return: bb5, unwind: bb13]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb11, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _9 = &_10;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _7 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _8, move _9) -> [return: bb6, unwind: bb13]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = move _7;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _21 = const _;                   // scope 1 at cita-jsonrpc/src/response.rs:81:20: 81:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:81:20: 81:48
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(FutureResponse::poll_response::{closure#1}, [Self, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _13 = _21 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/response.rs:81:20: 81:48
        _23 = deref_copy (_1.0: &&str);  // scope 1 at cita-jsonrpc/src/response.rs:81:50: 81:63
        _17 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_23) -> [return: bb8, unwind: bb13]; // scope 1 at cita-jsonrpc/src/response.rs:81:50: 81:63
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:81:50: 81:63
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = &_2;                       // scope 1 at cita-jsonrpc/src/response.rs:81:65: 81:68
        _18 = core::fmt::ArgumentV1::<'_>::new_display::<serde_json::Error>(_19) -> [return: bb9, unwind: bb13]; // scope 1 at cita-jsonrpc/src/response.rs:81:65: 81:68
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:81:65: 81:68
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b serde_json::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<serde_json::Error>}, val: Value(<ZST>) }
    }

    bb9: {
        _16 = [move _17, move _18];      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = &_16;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb10, unwind: bb13]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb10: {
        _20 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(FutureResponse::poll_response::{closure#1}, [Self, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _11 = log::__private_api_log(move _12, _3, _20) -> [return: bb15, unwind: bb13]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = ServiceError::InternalServerError; // scope 0 at cita-jsonrpc/src/response.rs:82:13: 82:46
        drop(_2) -> bb12;                // scope 0 at cita-jsonrpc/src/response.rs:83:9: 83:10
    }

    bb12: {
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:83:10: 83:10
    }

    bb13 (cleanup): {
        drop(_2) -> bb14;                // scope 0 at cita-jsonrpc/src/response.rs:83:9: 83:10
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/response.rs:80:59: 83:10
    }

    bb15: {
        goto -> bb11;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in FutureResponse::poll_response::{closure#1}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/response.rs:81:13: 81:69
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/response.rs:81:13: 81:69

    bb0: {
        _3 = const "cita_jsonrpc::response"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::response"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/response.rs"; // scope 0 at cita-jsonrpc/src/response.rs:81:13: 81:69
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:81:13: 81:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/response.rs:81:13: 81:69
        _1 = (move _2, move _4, move _6, const 81_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in FutureResponse::poll_response::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-jsonrpc/src/response.rs:81:20: 81:48
    let mut _1: [&str; 2];               // in scope 0 at cita-jsonrpc/src/response.rs:81:20: 81:48

    bb0: {
        _1 = [const "json serde ", const " response: "]; // scope 0 at cita-jsonrpc/src/response.rs:81:20: 81:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:81:20: 81:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:81:20: 81:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/response.rs:81:20: 81:48
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:81:20: 81:48
    }
}

promoted[2] in FutureResponse::poll_response::{closure#1}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:97:1: 97:26>::new(_1: Oneshot<jsonrpc_types::rpc_response::Output>, _2: HeaderMap) -> SingleFutureResponse {
    debug output => _1;                  // in scope 0 at cita-jsonrpc/src/response.rs:98:16: 98:22
    debug headers => _2;                 // in scope 0 at cita-jsonrpc/src/response.rs:98:51: 98:58
    let mut _0: response::SingleFutureResponse; // return place in scope 0 at cita-jsonrpc/src/response.rs:98:72: 98:92
    let mut _3: std::option::Option<hyper::HeaderMap>; // in scope 0 at cita-jsonrpc/src/response.rs:101:22: 101:35

    bb0: {
        _3 = std::option::Option::<HeaderMap>::Some(move _2); // scope 0 at cita-jsonrpc/src/response.rs:101:22: 101:35
        _0 = SingleFutureResponse { output: move _1, headers: move _3 }; // scope 0 at cita-jsonrpc/src/response.rs:99:9: 102:10
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:103:6: 103:6
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:106:1: 106:45>::inner_output(_1: &mut SingleFutureResponse) -> &mut Oneshot<jsonrpc_types::rpc_response::Output> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/response.rs:109:21: 109:30
    let mut _0: &mut futures::Oneshot<jsonrpc_types::rpc_response::Output>; // return place in scope 0 at cita-jsonrpc/src/response.rs:110:9: 110:25

    bb0: {
        _0 = &mut ((*_1).0: futures::Oneshot<jsonrpc_types::rpc_response::Output>); // scope 0 at cita-jsonrpc/src/response.rs:110:9: 110:25
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:111:6: 111:6
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:106:1: 106:45>::headers(_1: &mut SingleFutureResponse) -> &mut std::option::Option<HeaderMap> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/response.rs:113:16: 113:25
    let mut _0: &mut std::option::Option<hyper::HeaderMap>; // return place in scope 0 at cita-jsonrpc/src/response.rs:114:9: 114:26

    bb0: {
        _0 = &mut ((*_1).1: std::option::Option<hyper::HeaderMap>); // scope 0 at cita-jsonrpc/src/response.rs:114:9: 114:26
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:115:6: 115:6
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:106:1: 106:45>::response_type() -> &str {
    let mut _0: &str;                    // return place in scope 0 at cita-jsonrpc/src/response.rs:117:27: 117:39

    bb0: {
        _0 = const "single";             // scope 0 at cita-jsonrpc/src/response.rs:118:9: 118:17
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:118:9: 118:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:119:6: 119:6
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:122:1: 122:37>::poll(_1: &mut SingleFutureResponse) -> Result<Async<hyper::Response<Body>>, ServiceError> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/response.rs:126:13: 126:22
    let mut _0: std::result::Result<futures::Async<hyper::Response<hyper::Body>>, service_error::ServiceError>; // return place in scope 0 at cita-jsonrpc/src/response.rs:126:27: 126:56

    bb0: {
        _0 = <SingleFutureResponse as FutureResponse>::poll_response(_1) -> bb1; // scope 0 at cita-jsonrpc/src/response.rs:127:9: 127:29
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:127:14: 127:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut SingleFutureResponse) -> Result<Async<hyper::Response<Body>>, ServiceError> {<SingleFutureResponse as FutureResponse>::poll_response}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:128:6: 128:6
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:138:1: 138:25>::new(_1: futures::stream::Collect<FuturesOrdered<Oneshot<jsonrpc_types::rpc_response::Output>>>, _2: HeaderMap) -> BatchFutureResponse {
    debug output => _1;                  // in scope 0 at cita-jsonrpc/src/response.rs:139:16: 139:22
    debug headers => _2;                 // in scope 0 at cita-jsonrpc/src/response.rs:139:37: 139:44
    let mut _0: response::BatchFutureResponse; // return place in scope 0 at cita-jsonrpc/src/response.rs:139:58: 139:77
    let mut _3: std::option::Option<hyper::HeaderMap>; // in scope 0 at cita-jsonrpc/src/response.rs:142:22: 142:35

    bb0: {
        _3 = std::option::Option::<HeaderMap>::Some(move _2); // scope 0 at cita-jsonrpc/src/response.rs:142:22: 142:35
        _0 = BatchFutureResponse { output: move _1, headers: move _3 }; // scope 0 at cita-jsonrpc/src/response.rs:140:9: 143:10
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:144:6: 144:6
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:147:1: 147:44>::inner_output(_1: &mut BatchFutureResponse) -> &mut futures::stream::Collect<FuturesOrdered<Oneshot<jsonrpc_types::rpc_response::Output>>> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/response.rs:150:21: 150:30
    let mut _0: &mut futures::stream::Collect<futures::stream::FuturesOrdered<futures::Oneshot<jsonrpc_types::rpc_response::Output>>>; // return place in scope 0 at cita-jsonrpc/src/response.rs:151:9: 151:25

    bb0: {
        _0 = &mut ((*_1).0: futures::stream::Collect<futures::stream::FuturesOrdered<futures::Oneshot<jsonrpc_types::rpc_response::Output>>>); // scope 0 at cita-jsonrpc/src/response.rs:151:9: 151:25
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:152:6: 152:6
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:147:1: 147:44>::headers(_1: &mut BatchFutureResponse) -> &mut std::option::Option<HeaderMap> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/response.rs:154:16: 154:25
    let mut _0: &mut std::option::Option<hyper::HeaderMap>; // return place in scope 0 at cita-jsonrpc/src/response.rs:155:9: 155:26

    bb0: {
        _0 = &mut ((*_1).1: std::option::Option<hyper::HeaderMap>); // scope 0 at cita-jsonrpc/src/response.rs:155:9: 155:26
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:156:6: 156:6
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:147:1: 147:44>::response_type() -> &str {
    let mut _0: &str;                    // return place in scope 0 at cita-jsonrpc/src/response.rs:158:27: 158:39

    bb0: {
        _0 = const "batch";              // scope 0 at cita-jsonrpc/src/response.rs:159:9: 159:16
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:159:9: 159:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:160:6: 160:6
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:163:1: 163:36>::poll(_1: &mut BatchFutureResponse) -> Result<Async<hyper::Response<Body>>, ServiceError> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/response.rs:167:13: 167:22
    let mut _0: std::result::Result<futures::Async<hyper::Response<hyper::Body>>, service_error::ServiceError>; // return place in scope 0 at cita-jsonrpc/src/response.rs:167:27: 167:56

    bb0: {
        _0 = <BatchFutureResponse as FutureResponse>::poll_response(_1) -> bb1; // scope 0 at cita-jsonrpc/src/response.rs:168:9: 168:29
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:168:14: 168:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut BatchFutureResponse) -> Result<Async<hyper::Response<Body>>, ServiceError> {<BatchFutureResponse as FutureResponse>::poll_response}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:169:6: 169:6
    }
}

fn response::<impl at cita-jsonrpc/src/response.rs:177:1: 177:35>::poll(_1: &mut PublishFutResponse) -> Result<Async<hyper::Response<Body>>, ServiceError> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/response.rs:181:13: 181:22
    let mut _0: std::result::Result<futures::Async<hyper::Response<hyper::Body>>, service_error::ServiceError>; // return place in scope 0 at cita-jsonrpc/src/response.rs:181:27: 181:56
    let mut _2: isize;                   // in scope 0 at cita-jsonrpc/src/response.rs:183:13: 183:45
    let _3: &mut response::SingleFutureResponse; // in scope 0 at cita-jsonrpc/src/response.rs:183:40: 183:44
    let _4: &mut response::BatchFutureResponse; // in scope 0 at cita-jsonrpc/src/response.rs:184:39: 184:43
    scope 1 {
        debug resp => _3;                // in scope 1 at cita-jsonrpc/src/response.rs:183:40: 183:44
    }
    scope 2 {
        debug resp => _4;                // in scope 2 at cita-jsonrpc/src/response.rs:184:39: 184:43
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at cita-jsonrpc/src/response.rs:182:15: 182:19
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/response.rs:182:9: 182:19
    }

    bb1: {
        _4 = &mut (((*_1) as Batch).0: response::BatchFutureResponse); // scope 0 at cita-jsonrpc/src/response.rs:184:39: 184:43
        _0 = <BatchFutureResponse as futures::Future>::poll(_4) -> bb4; // scope 2 at cita-jsonrpc/src/response.rs:184:48: 184:59
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:184:53: 184:57
                                         // + literal: Const { ty: for<'a> fn(&'a mut BatchFutureResponse) -> Result<Async<<BatchFutureResponse as futures::Future>::Item>, <BatchFutureResponse as futures::Future>::Error> {<BatchFutureResponse as futures::Future>::poll}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/response.rs:182:15: 182:19
    }

    bb3: {
        _3 = &mut (((*_1) as Single).0: response::SingleFutureResponse); // scope 0 at cita-jsonrpc/src/response.rs:183:40: 183:44
        _0 = <SingleFutureResponse as futures::Future>::poll(_3) -> bb4; // scope 1 at cita-jsonrpc/src/response.rs:183:49: 183:60
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/response.rs:183:54: 183:58
                                         // + literal: Const { ty: for<'a> fn(&'a mut SingleFutureResponse) -> Result<Async<<SingleFutureResponse as futures::Future>::Item>, <SingleFutureResponse as futures::Future>::Error> {<SingleFutureResponse as futures::Future>::poll}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:186:6: 186:6
    }
}

const MSG_TIMEOUT_RESEND: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-jsonrpc/src/service_error.rs:21:27: 21:31

    bb0: {
        _0 = const "{\"err\": \"System timeout, please resend.\"}"; // scope 0 at cita-jsonrpc/src/service_error.rs:21:34: 21:80
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:21:34: 21:80
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:21:1: 21:81
    }
}

const MSG_INCOMPLETE_REQUEST: &str = {
    let mut _0: &str;                    // return place in scope 0 at cita-jsonrpc/src/service_error.rs:22:31: 22:35

    bb0: {
        _0 = const "{\"err\": \"Incomplete request, please resend.\"}"; // scope 0 at cita-jsonrpc/src/service_error.rs:22:38: 22:88
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:22:38: 22:88
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:22:1: 22:89
    }
}

fn service_error::<impl at cita-jsonrpc/src/service_error.rs:24:10: 24:15>::fmt(_1: &ServiceError, _2: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
    debug f => _2;                       // in scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
    let mut _3: isize;                   // in scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
    let _4: &hyper::Error;               // in scope 0 at cita-jsonrpc/src/service_error.rs:26:21: 26:33
    let _5: &str;                        // in scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at cita-jsonrpc/src/service_error.rs:26:21: 26:33
    let _7: &&hyper::Error;              // in scope 0 at cita-jsonrpc/src/service_error.rs:26:21: 26:33
    let _8: &serde_json::Error;          // in scope 0 at cita-jsonrpc/src/service_error.rs:27:23: 27:40
    let _9: &str;                        // in scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/service_error.rs:27:23: 27:40
    let _11: &&serde_json::Error;        // in scope 0 at cita-jsonrpc/src/service_error.rs:27:23: 27:40
    let _12: &jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/service_error.rs:28:30: 28:41
    let _13: &jsonrpc_types::Error;      // in scope 0 at cita-jsonrpc/src/service_error.rs:28:43: 28:63
    let _14: &str;                       // in scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/service_error.rs:28:30: 28:41
    let mut _16: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/service_error.rs:28:43: 28:63
    let _17: &&jsonrpc_types::Error;     // in scope 0 at cita-jsonrpc/src/service_error.rs:28:43: 28:63
    let _18: &std::option::Option<jsonrpc_types::rpc_request::RequestInfo>; // in scope 0 at cita-jsonrpc/src/service_error.rs:29:18: 29:37
    let _19: &str;                       // in scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
    let mut _20: &dyn std::fmt::Debug;   // in scope 0 at cita-jsonrpc/src/service_error.rs:29:18: 29:37
    let _21: &&std::option::Option<jsonrpc_types::rpc_request::RequestInfo>; // in scope 0 at cita-jsonrpc/src/service_error.rs:29:18: 29:37
    let _22: &str;                       // in scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
    let _23: &str;                       // in scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at cita-jsonrpc/src/service_error.rs:26:21: 26:33
    }
    scope 2 {
        debug __self_0 => _8;            // in scope 2 at cita-jsonrpc/src/service_error.rs:27:23: 27:40
    }
    scope 3 {
        debug __self_0 => _12;           // in scope 3 at cita-jsonrpc/src/service_error.rs:28:30: 28:41
        debug __self_1 => _13;           // in scope 3 at cita-jsonrpc/src/service_error.rs:28:43: 28:63
    }
    scope 4 {
        debug __self_0 => _18;           // in scope 4 at cita-jsonrpc/src/service_error.rs:29:18: 29:37
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb1, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
    }

    bb1: {
        _23 = const "InternalServerError"; // scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _23) -> bb8; // scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
    }

    bb3: {
        _4 = &(((*_1) as BodyConcatError).0: hyper::Error); // scope 0 at cita-jsonrpc/src/service_error.rs:26:21: 26:33
        _5 = const "BodyConcatError";    // scope 1 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = &_4;                        // scope 1 at cita-jsonrpc/src/service_error.rs:26:21: 26:33
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/service_error.rs:26:21: 26:33
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> bb8; // scope 1 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = &(((*_1) as JsonrpcSerdeError).0: serde_json::Error); // scope 0 at cita-jsonrpc/src/service_error.rs:27:23: 27:40
        _9 = const "JsonrpcSerdeError";  // scope 2 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = &_8;                       // scope 2 at cita-jsonrpc/src/service_error.rs:27:23: 27:40
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at cita-jsonrpc/src/service_error.rs:27:23: 27:40
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> bb8; // scope 2 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = &(((*_1) as JsonrpcPartCompleteError).0: jsonrpc_types::rpc_request::RequestInfo); // scope 0 at cita-jsonrpc/src/service_error.rs:28:30: 28:41
        _13 = &(((*_1) as JsonrpcPartCompleteError).1: jsonrpc_types::Error); // scope 0 at cita-jsonrpc/src/service_error.rs:28:43: 28:63
        _14 = const "JsonrpcPartCompleteError"; // scope 3 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at cita-jsonrpc/src/service_error.rs:28:30: 28:41
        _17 = &_13;                      // scope 3 at cita-jsonrpc/src/service_error.rs:28:43: 28:63
        _16 = _17 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at cita-jsonrpc/src/service_error.rs:28:43: 28:63
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field2_finish(_2, _14, move _15, move _16) -> bb8; // scope 3 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = &(((*_1) as MQRpcTimeout).0: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>); // scope 0 at cita-jsonrpc/src/service_error.rs:29:18: 29:37
        _19 = const "MQRpcTimeout";      // scope 4 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _21 = &_18;                      // scope 4 at cita-jsonrpc/src/service_error.rs:29:18: 29:37
        _20 = _21 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 4 at cita-jsonrpc/src/service_error.rs:29:18: 29:37
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _19, move _20) -> bb8; // scope 4 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut std::fmt::Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb7: {
        _22 = const "MQResponsePollIncompleteError"; // scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _22) -> bb8; // scope 0 at cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:24:10: 24:15
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut std::fmt::Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {std::fmt::Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:24:15: 24:15
    }
}

fn service_error::<impl at cita-jsonrpc/src/service_error.rs:34:1: 34:35>::into_response(_1: ServiceError, _2: HeaderMap) -> hyper::Response<Body> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/service_error.rs:35:22: 35:26
    debug http_headers => _2;            // in scope 0 at cita-jsonrpc/src/service_error.rs:35:28: 35:40
    let mut _0: hyper::Response<hyper::Body>; // return place in scope 0 at cita-jsonrpc/src/service_error.rs:35:54: 35:68
    let _3: [closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81]; // in scope 0 at cita-jsonrpc/src/service_error.rs:36:13: 36:25
    let mut _4: isize;                   // in scope 0 at cita-jsonrpc/src/service_error.rs:48:13: 48:45
    let mut _6: [closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81]; // in scope 0 at cita-jsonrpc/src/service_error.rs:48:49: 48:61
    let mut _7: (std::option::Option<hyper::StatusCode>, std::option::Option<hyper::Body>); // in scope 0 at cita-jsonrpc/src/service_error.rs:48:49: 48:100
    let mut _8: std::option::Option<hyper::StatusCode>; // in scope 0 at cita-jsonrpc/src/service_error.rs:48:62: 48:66
    let mut _9: std::option::Option<hyper::Body>; // in scope 0 at cita-jsonrpc/src/service_error.rs:48:68: 48:99
    let mut _10: hyper::Body;            // in scope 0 at cita-jsonrpc/src/service_error.rs:48:73: 48:98
    let mut _11: std::string::String;    // in scope 0 at cita-jsonrpc/src/service_error.rs:48:84: 48:97
    let mut _12: &hyper::Error;          // in scope 0 at cita-jsonrpc/src/service_error.rs:48:84: 48:97
    let mut _13: [closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81]; // in scope 0 at cita-jsonrpc/src/service_error.rs:49:51: 49:63
    let mut _14: (std::option::Option<hyper::StatusCode>, std::option::Option<hyper::Body>); // in scope 0 at cita-jsonrpc/src/service_error.rs:49:51: 49:100
    let mut _15: std::option::Option<hyper::StatusCode>; // in scope 0 at cita-jsonrpc/src/service_error.rs:49:64: 49:93
    let mut _16: std::option::Option<hyper::Body>; // in scope 0 at cita-jsonrpc/src/service_error.rs:49:95: 49:99
    let mut _21: std::result::Result<std::vec::Vec<u8>, serde_json::Error>; // in scope 0 at cita-jsonrpc/src/service_error.rs:52:33: 52:61
    let _22: &jsonrpc_types::rpc_response::RpcFailure; // in scope 0 at cita-jsonrpc/src/service_error.rs:52:52: 52:60
    let mut _23: [closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81]; // in scope 0 at cita-jsonrpc/src/service_error.rs:57:17: 57:29
    let mut _24: (std::option::Option<hyper::StatusCode>, std::option::Option<hyper::Body>); // in scope 0 at cita-jsonrpc/src/service_error.rs:57:17: 57:64
    let mut _25: std::option::Option<hyper::StatusCode>; // in scope 0 at cita-jsonrpc/src/service_error.rs:57:30: 57:34
    let mut _26: std::option::Option<hyper::Body>; // in scope 0 at cita-jsonrpc/src/service_error.rs:57:36: 57:63
    let mut _27: hyper::Body;            // in scope 0 at cita-jsonrpc/src/service_error.rs:57:41: 57:62
    let mut _28: std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/service_error.rs:57:52: 57:61
    let mut _31: i64;                    // in scope 0 at cita-jsonrpc/src/service_error.rs:61:21: 61:55
    let mut _33: isize;                  // in scope 0 at cita-jsonrpc/src/service_error.rs:65:21: 65:31
    let mut _35: jsonrpc_types::Error;   // in scope 0 at cita-jsonrpc/src/service_error.rs:65:66: 65:77
    let mut _36: jsonrpc_types::Error;   // in scope 0 at cita-jsonrpc/src/service_error.rs:66:46: 66:57
    let mut _38: std::result::Result<std::vec::Vec<u8>, serde_json::Error>; // in scope 0 at cita-jsonrpc/src/service_error.rs:68:33: 68:61
    let _39: &jsonrpc_types::rpc_response::RpcFailure; // in scope 0 at cita-jsonrpc/src/service_error.rs:68:52: 68:60
    let mut _40: [closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81]; // in scope 0 at cita-jsonrpc/src/service_error.rs:73:17: 73:29
    let mut _41: (std::option::Option<hyper::StatusCode>, std::option::Option<hyper::Body>); // in scope 0 at cita-jsonrpc/src/service_error.rs:73:17: 73:64
    let mut _42: std::option::Option<hyper::StatusCode>; // in scope 0 at cita-jsonrpc/src/service_error.rs:73:30: 73:34
    let mut _43: std::option::Option<hyper::Body>; // in scope 0 at cita-jsonrpc/src/service_error.rs:73:36: 73:63
    let mut _44: hyper::Body;            // in scope 0 at cita-jsonrpc/src/service_error.rs:73:41: 73:62
    let mut _45: std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/service_error.rs:73:52: 73:61
    let mut _46: [closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81]; // in scope 0 at cita-jsonrpc/src/service_error.rs:76:17: 76:29
    let mut _47: (std::option::Option<hyper::StatusCode>, std::option::Option<hyper::Body>); // in scope 0 at cita-jsonrpc/src/service_error.rs:76:17: 76:76
    let mut _48: std::option::Option<hyper::StatusCode>; // in scope 0 at cita-jsonrpc/src/service_error.rs:76:30: 76:69
    let mut _49: std::option::Option<hyper::Body>; // in scope 0 at cita-jsonrpc/src/service_error.rs:76:71: 76:75
    let mut _50: bool;                   // in scope 0 at cita-jsonrpc/src/service_error.rs:73:63: 73:64
    let mut _51: bool;                   // in scope 0 at cita-jsonrpc/src/service_error.rs:74:13: 74:14
    let mut _52: bool;                   // in scope 0 at cita-jsonrpc/src/service_error.rs:57:63: 57:64
    let mut _53: bool;                   // in scope 0 at cita-jsonrpc/src/service_error.rs:48:99: 48:100
    let mut _54: bool;                   // in scope 0 at cita-jsonrpc/src/service_error.rs:79:5: 79:6
    let mut _55: isize;                  // in scope 0 at cita-jsonrpc/src/service_error.rs:79:5: 79:6
    let mut _56: isize;                  // in scope 0 at cita-jsonrpc/src/service_error.rs:74:13: 74:14
    let mut _57: isize;                  // in scope 0 at cita-jsonrpc/src/service_error.rs:79:5: 79:6
    scope 1 {
        debug new_response => _3;        // in scope 1 at cita-jsonrpc/src/service_error.rs:36:13: 36:25
        let _5: hyper::Error;            // in scope 1 at cita-jsonrpc/src/service_error.rs:48:43: 48:44
        let _17: jsonrpc_types::rpc_request::RequestInfo; // in scope 1 at cita-jsonrpc/src/service_error.rs:50:52: 50:60
        let _18: jsonrpc_types::Error;   // in scope 1 at cita-jsonrpc/src/service_error.rs:50:62: 50:65
        let _29: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>; // in scope 1 at cita-jsonrpc/src/service_error.rs:59:40: 59:48
        scope 2 {
            debug e => _5;               // in scope 2 at cita-jsonrpc/src/service_error.rs:48:43: 48:44
        }
        scope 3 {
            debug req_info => _17;       // in scope 3 at cita-jsonrpc/src/service_error.rs:50:52: 50:60
            debug err => _18;            // in scope 3 at cita-jsonrpc/src/service_error.rs:50:62: 50:65
            let _19: jsonrpc_types::rpc_response::RpcFailure; // in scope 3 at cita-jsonrpc/src/service_error.rs:51:21: 51:28
            scope 4 {
                debug failure => _19;    // in scope 4 at cita-jsonrpc/src/service_error.rs:51:21: 51:28
                let _20: std::vec::Vec<u8>; // in scope 4 at cita-jsonrpc/src/service_error.rs:52:21: 52:30
                scope 5 {
                    debug resp_body => _20; // in scope 5 at cita-jsonrpc/src/service_error.rs:52:21: 52:30
                }
            }
        }
        scope 6 {
            debug req_info => _29;       // in scope 6 at cita-jsonrpc/src/service_error.rs:59:40: 59:48
            let _30: jsonrpc_types::Error; // in scope 6 at cita-jsonrpc/src/service_error.rs:60:21: 60:32
            scope 7 {
                debug timeout_err => _30; // in scope 7 at cita-jsonrpc/src/service_error.rs:60:21: 60:32
                let _32: jsonrpc_types::rpc_response::RpcFailure; // in scope 7 at cita-jsonrpc/src/service_error.rs:64:21: 64:28
                let _34: jsonrpc_types::rpc_request::RequestInfo; // in scope 7 at cita-jsonrpc/src/service_error.rs:65:26: 65:30
                scope 8 {
                    debug failure => _32; // in scope 8 at cita-jsonrpc/src/service_error.rs:64:21: 64:28
                    let _37: std::vec::Vec<u8>; // in scope 8 at cita-jsonrpc/src/service_error.rs:68:21: 68:30
                    scope 10 {
                        debug resp_body => _37; // in scope 10 at cita-jsonrpc/src/service_error.rs:68:21: 68:30
                    }
                }
                scope 9 {
                    debug info => _34;   // in scope 9 at cita-jsonrpc/src/service_error.rs:65:26: 65:30
                }
            }
        }
    }

    bb0: {
        _51 = const false;               // scope 0 at cita-jsonrpc/src/service_error.rs:36:13: 36:25
        _52 = const false;               // scope 0 at cita-jsonrpc/src/service_error.rs:36:13: 36:25
        _50 = const false;               // scope 0 at cita-jsonrpc/src/service_error.rs:36:13: 36:25
        _53 = const false;               // scope 0 at cita-jsonrpc/src/service_error.rs:36:13: 36:25
        _54 = const false;               // scope 0 at cita-jsonrpc/src/service_error.rs:36:13: 36:25
        _54 = const true;                // scope 0 at cita-jsonrpc/src/service_error.rs:36:28: 45:10
        _3 = [closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] { http_headers: move _2 }; // scope 0 at cita-jsonrpc/src/service_error.rs:36:28: 45:10
                                         // closure
                                         // + def_id: DefId(0:414 ~ cita_jsonrpc[a6db]::service_error::{impl#0}::into_response::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((std::option::Option<hyper::StatusCode>, std::option::Option<hyper::Body>)) -> hyper::Response<hyper::Body>,
                                         //     (hyper::HeaderMap,),
                                         // ]
        _4 = discriminant(_1);           // scope 1 at cita-jsonrpc/src/service_error.rs:47:15: 47:19
        switchInt(move _4) -> [0: bb2, 1: bb6, 2: bb7, 3: bb13, 4: bb25, 5: bb25, otherwise: bb1]; // scope 1 at cita-jsonrpc/src/service_error.rs:47:9: 47:19
    }

    bb1: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/service_error.rs:47:15: 47:19
    }

    bb2: {
        _5 = move ((_1 as BodyConcatError).0: hyper::Error); // scope 1 at cita-jsonrpc/src/service_error.rs:48:43: 48:44
        _54 = const false;               // scope 2 at cita-jsonrpc/src/service_error.rs:48:49: 48:61
        _53 = const true;                // scope 2 at cita-jsonrpc/src/service_error.rs:48:49: 48:61
        _6 = move _3;                    // scope 2 at cita-jsonrpc/src/service_error.rs:48:49: 48:61
        _8 = std::option::Option::<StatusCode>::None; // scope 2 at cita-jsonrpc/src/service_error.rs:48:62: 48:66
        _12 = &_5;                       // scope 2 at cita-jsonrpc/src/service_error.rs:48:84: 48:97
        _11 = <hyper::Error as ToString>::to_string(move _12) -> [return: bb3, unwind: bb42]; // scope 2 at cita-jsonrpc/src/service_error.rs:48:84: 48:97
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:48:86: 48:95
                                         // + literal: Const { ty: for<'a> fn(&'a hyper::Error) -> std::string::String {<hyper::Error as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = <Body as From<std::string::String>>::from(move _11) -> [return: bb4, unwind: bb42]; // scope 2 at cita-jsonrpc/src/service_error.rs:48:73: 48:98
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:48:73: 48:83
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(std::string::String) -> Body {<Body as From<std::string::String>>::from}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = std::option::Option::<Body>::Some(move _10); // scope 2 at cita-jsonrpc/src/service_error.rs:48:68: 48:99
        _7 = (move _8, move _9);         // scope 2 at cita-jsonrpc/src/service_error.rs:48:49: 48:100
        _53 = const false;               // scope 2 at cita-jsonrpc/src/service_error.rs:48:49: 48:100
        _0 = <[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::call_once(move _6, move _7) -> [return: bb5, unwind: bb42]; // scope 2 at cita-jsonrpc/src/service_error.rs:48:49: 48:100
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:48:49: 48:61
                                         // + literal: Const { ty: extern "rust-call" fn([closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81], (std::option::Option<StatusCode>, std::option::Option<Body>)) -> <[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::Output {<[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::call_once}, val: Value(<ZST>) }
    }

    bb5: {
        _53 = const false;               // scope 2 at cita-jsonrpc/src/service_error.rs:48:99: 48:100
        drop(_5) -> [return: bb26, unwind: bb44]; // scope 1 at cita-jsonrpc/src/service_error.rs:48:99: 48:100
    }

    bb6: {
        _54 = const false;               // scope 1 at cita-jsonrpc/src/service_error.rs:49:51: 49:63
        _13 = move _3;                   // scope 1 at cita-jsonrpc/src/service_error.rs:49:51: 49:63
        _15 = std::option::Option::<StatusCode>::Some(const _); // scope 1 at cita-jsonrpc/src/service_error.rs:49:64: 49:93
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:49:69: 49:92
                                         // + literal: Const { ty: StatusCode, val: Unevaluated(StatusCode::BAD_REQUEST, [], None) }
        _16 = std::option::Option::<Body>::None; // scope 1 at cita-jsonrpc/src/service_error.rs:49:95: 49:99
        _14 = (move _15, move _16);      // scope 1 at cita-jsonrpc/src/service_error.rs:49:51: 49:100
        _0 = <[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::call_once(move _13, move _14) -> [return: bb46, unwind: bb44]; // scope 1 at cita-jsonrpc/src/service_error.rs:49:51: 49:100
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:49:51: 49:63
                                         // + literal: Const { ty: extern "rust-call" fn([closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81], (std::option::Option<StatusCode>, std::option::Option<Body>)) -> <[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::Output {<[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::call_once}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = move ((_1 as JsonrpcPartCompleteError).0: jsonrpc_types::rpc_request::RequestInfo); // scope 1 at cita-jsonrpc/src/service_error.rs:50:52: 50:60
        _18 = move ((_1 as JsonrpcPartCompleteError).1: jsonrpc_types::Error); // scope 1 at cita-jsonrpc/src/service_error.rs:50:62: 50:65
        _19 = RpcFailure::from_options(move _17, move _18) -> [return: bb8, unwind: bb44]; // scope 3 at cita-jsonrpc/src/service_error.rs:51:31: 51:70
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:51:31: 51:55
                                         // + literal: Const { ty: fn(RequestInfo, jsonrpc_types::Error) -> RpcFailure {RpcFailure::from_options}, val: Value(<ZST>) }
    }

    bb8: {
        _22 = &_19;                      // scope 4 at cita-jsonrpc/src/service_error.rs:52:52: 52:60
        _21 = to_vec::<RpcFailure>(_22) -> [return: bb9, unwind: bb28]; // scope 4 at cita-jsonrpc/src/service_error.rs:52:33: 52:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:52:33: 52:51
                                         // + literal: Const { ty: for<'a> fn(&'a RpcFailure) -> Result<Vec<u8>, serde_json::Error> {to_vec::<RpcFailure>}, val: Value(<ZST>) }
    }

    bb9: {
        _20 = Result::<Vec<u8>, serde_json::Error>::unwrap_or_else::<[closure@cita-jsonrpc/src/service_error.rs:52:77: 52:80]>(move _21, const ZeroSized: [closure@cita-jsonrpc/src/service_error.rs:52:77: 52:80]) -> [return: bb10, unwind: bb28]; // scope 4 at cita-jsonrpc/src/service_error.rs:52:33: 55:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:52:62: 52:76
                                         // + literal: Const { ty: fn(Result<Vec<u8>, serde_json::Error>, [closure@cita-jsonrpc/src/service_error.rs:52:77: 52:80]) -> Vec<u8> {Result::<Vec<u8>, serde_json::Error>::unwrap_or_else::<[closure@cita-jsonrpc/src/service_error.rs:52:77: 52:80]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/service_error.rs:52:77: 52:80], val: Value(<ZST>) }
    }

    bb10: {
        _54 = const false;               // scope 5 at cita-jsonrpc/src/service_error.rs:57:17: 57:29
        _52 = const true;                // scope 5 at cita-jsonrpc/src/service_error.rs:57:17: 57:29
        _23 = move _3;                   // scope 5 at cita-jsonrpc/src/service_error.rs:57:17: 57:29
        _25 = std::option::Option::<StatusCode>::None; // scope 5 at cita-jsonrpc/src/service_error.rs:57:30: 57:34
        _28 = move _20;                  // scope 5 at cita-jsonrpc/src/service_error.rs:57:52: 57:61
        _27 = <Body as From<Vec<u8>>>::from(move _28) -> [return: bb11, unwind: bb40]; // scope 5 at cita-jsonrpc/src/service_error.rs:57:41: 57:62
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:57:41: 57:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Vec<u8>) -> Body {<Body as From<Vec<u8>>>::from}, val: Value(<ZST>) }
    }

    bb11: {
        _26 = std::option::Option::<Body>::Some(move _27); // scope 5 at cita-jsonrpc/src/service_error.rs:57:36: 57:63
        _24 = (move _25, move _26);      // scope 5 at cita-jsonrpc/src/service_error.rs:57:17: 57:64
        _52 = const false;               // scope 5 at cita-jsonrpc/src/service_error.rs:57:17: 57:64
        _0 = <[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::call_once(move _23, move _24) -> [return: bb12, unwind: bb40]; // scope 5 at cita-jsonrpc/src/service_error.rs:57:17: 57:64
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:57:17: 57:29
                                         // + literal: Const { ty: extern "rust-call" fn([closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81], (std::option::Option<StatusCode>, std::option::Option<Body>)) -> <[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::Output {<[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::call_once}, val: Value(<ZST>) }
    }

    bb12: {
        _52 = const false;               // scope 5 at cita-jsonrpc/src/service_error.rs:57:63: 57:64
        drop(_19) -> [return: bb26, unwind: bb44]; // scope 3 at cita-jsonrpc/src/service_error.rs:58:13: 58:14
    }

    bb13: {
        _51 = const true;                // scope 1 at cita-jsonrpc/src/service_error.rs:59:40: 59:48
        _29 = move ((_1 as MQRpcTimeout).0: std::option::Option<jsonrpc_types::rpc_request::RequestInfo>); // scope 1 at cita-jsonrpc/src/service_error.rs:59:40: 59:48
        _31 = error::ErrorCode::time_out_error() -> [return: bb14, unwind: bb38]; // scope 6 at cita-jsonrpc/src/service_error.rs:61:21: 61:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:61:21: 61:53
                                         // + literal: Const { ty: fn() -> i64 {error::ErrorCode::time_out_error}, val: Value(<ZST>) }
    }

    bb14: {
        _30 = jsonrpc_types::Error::server_error::<&str>(move _31, const _) -> [return: bb15, unwind: bb38]; // scope 6 at cita-jsonrpc/src/service_error.rs:60:35: 63:18
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:60:35: 60:69
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(i64, &str) -> jsonrpc_types::Error {jsonrpc_types::Error::server_error::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:62:21: 62:39
                                         // + literal: Const { ty: &str, val: Unevaluated(MSG_TIMEOUT_RESEND, [], None) }
    }

    bb15: {
        _33 = discriminant(_29);         // scope 7 at cita-jsonrpc/src/service_error.rs:64:37: 64:45
        switchInt(move _33) -> [0: bb16, 1: bb18, otherwise: bb17]; // scope 7 at cita-jsonrpc/src/service_error.rs:64:31: 64:45
    }

    bb16: {
        _36 = move _30;                  // scope 7 at cita-jsonrpc/src/service_error.rs:66:46: 66:57
        _32 = <RpcFailure as From<jsonrpc_types::Error>>::from(move _36) -> [return: bb47, unwind: bb38]; // scope 7 at cita-jsonrpc/src/service_error.rs:66:29: 66:58
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:66:29: 66:45
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(jsonrpc_types::Error) -> RpcFailure {<RpcFailure as From<jsonrpc_types::Error>>::from}, val: Value(<ZST>) }
    }

    bb17: {
        unreachable;                     // scope 7 at cita-jsonrpc/src/service_error.rs:64:37: 64:45
    }

    bb18: {
        _51 = const false;               // scope 7 at cita-jsonrpc/src/service_error.rs:65:26: 65:30
        _34 = move ((_29 as Some).0: jsonrpc_types::rpc_request::RequestInfo); // scope 7 at cita-jsonrpc/src/service_error.rs:65:26: 65:30
        _35 = move _30;                  // scope 9 at cita-jsonrpc/src/service_error.rs:65:66: 65:77
        _32 = RpcFailure::from_options(move _34, move _35) -> [return: bb48, unwind: bb38]; // scope 9 at cita-jsonrpc/src/service_error.rs:65:35: 65:78
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:65:35: 65:59
                                         // + literal: Const { ty: fn(RequestInfo, jsonrpc_types::Error) -> RpcFailure {RpcFailure::from_options}, val: Value(<ZST>) }
    }

    bb19: {
        _39 = &_32;                      // scope 8 at cita-jsonrpc/src/service_error.rs:68:52: 68:60
        _38 = to_vec::<RpcFailure>(_39) -> [return: bb20, unwind: bb27]; // scope 8 at cita-jsonrpc/src/service_error.rs:68:33: 68:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:68:33: 68:51
                                         // + literal: Const { ty: for<'a> fn(&'a RpcFailure) -> Result<Vec<u8>, serde_json::Error> {to_vec::<RpcFailure>}, val: Value(<ZST>) }
    }

    bb20: {
        _37 = Result::<Vec<u8>, serde_json::Error>::unwrap_or_else::<[closure@cita-jsonrpc/src/service_error.rs:68:77: 68:80]>(move _38, const ZeroSized: [closure@cita-jsonrpc/src/service_error.rs:68:77: 68:80]) -> [return: bb21, unwind: bb27]; // scope 8 at cita-jsonrpc/src/service_error.rs:68:33: 71:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:68:62: 68:76
                                         // + literal: Const { ty: fn(Result<Vec<u8>, serde_json::Error>, [closure@cita-jsonrpc/src/service_error.rs:68:77: 68:80]) -> Vec<u8> {Result::<Vec<u8>, serde_json::Error>::unwrap_or_else::<[closure@cita-jsonrpc/src/service_error.rs:68:77: 68:80]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/service_error.rs:68:77: 68:80], val: Value(<ZST>) }
    }

    bb21: {
        _54 = const false;               // scope 10 at cita-jsonrpc/src/service_error.rs:73:17: 73:29
        _50 = const true;                // scope 10 at cita-jsonrpc/src/service_error.rs:73:17: 73:29
        _40 = move _3;                   // scope 10 at cita-jsonrpc/src/service_error.rs:73:17: 73:29
        _42 = std::option::Option::<StatusCode>::None; // scope 10 at cita-jsonrpc/src/service_error.rs:73:30: 73:34
        _45 = move _37;                  // scope 10 at cita-jsonrpc/src/service_error.rs:73:52: 73:61
        _44 = <Body as From<Vec<u8>>>::from(move _45) -> [return: bb22, unwind: bb35]; // scope 10 at cita-jsonrpc/src/service_error.rs:73:41: 73:62
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:73:41: 73:51
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Vec<u8>) -> Body {<Body as From<Vec<u8>>>::from}, val: Value(<ZST>) }
    }

    bb22: {
        _43 = std::option::Option::<Body>::Some(move _44); // scope 10 at cita-jsonrpc/src/service_error.rs:73:36: 73:63
        _41 = (move _42, move _43);      // scope 10 at cita-jsonrpc/src/service_error.rs:73:17: 73:64
        _50 = const false;               // scope 10 at cita-jsonrpc/src/service_error.rs:73:17: 73:64
        _0 = <[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::call_once(move _40, move _41) -> [return: bb23, unwind: bb35]; // scope 10 at cita-jsonrpc/src/service_error.rs:73:17: 73:64
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:73:17: 73:29
                                         // + literal: Const { ty: extern "rust-call" fn([closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81], (std::option::Option<StatusCode>, std::option::Option<Body>)) -> <[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::Output {<[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::call_once}, val: Value(<ZST>) }
    }

    bb23: {
        _50 = const false;               // scope 10 at cita-jsonrpc/src/service_error.rs:73:63: 73:64
        drop(_32) -> [return: bb24, unwind: bb38]; // scope 7 at cita-jsonrpc/src/service_error.rs:74:13: 74:14
    }

    bb24: {
        _51 = const false;               // scope 1 at cita-jsonrpc/src/service_error.rs:74:13: 74:14
        goto -> bb26;                    // scope 1 at cita-jsonrpc/src/service_error.rs:74:13: 74:14
    }

    bb25: {
        _54 = const false;               // scope 1 at cita-jsonrpc/src/service_error.rs:76:17: 76:29
        _46 = move _3;                   // scope 1 at cita-jsonrpc/src/service_error.rs:76:17: 76:29
        _48 = std::option::Option::<StatusCode>::Some(const _); // scope 1 at cita-jsonrpc/src/service_error.rs:76:30: 76:69
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:76:35: 76:68
                                         // + literal: Const { ty: StatusCode, val: Unevaluated(StatusCode::INTERNAL_SERVER_ERROR, [], None) }
        _49 = std::option::Option::<Body>::None; // scope 1 at cita-jsonrpc/src/service_error.rs:76:71: 76:75
        _47 = (move _48, move _49);      // scope 1 at cita-jsonrpc/src/service_error.rs:76:17: 76:76
        _0 = <[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::call_once(move _46, move _47) -> [return: bb49, unwind: bb44]; // scope 1 at cita-jsonrpc/src/service_error.rs:76:17: 76:76
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:76:17: 76:29
                                         // + literal: Const { ty: extern "rust-call" fn([closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81], (std::option::Option<StatusCode>, std::option::Option<Body>)) -> <[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::Output {<[closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81] as FnOnce<(std::option::Option<StatusCode>, std::option::Option<Body>)>>::call_once}, val: Value(<ZST>) }
    }

    bb26: {
        _54 = const false;               // scope 0 at cita-jsonrpc/src/service_error.rs:79:5: 79:6
        _55 = discriminant(_1);          // scope 0 at cita-jsonrpc/src/service_error.rs:79:5: 79:6
        switchInt(move _55) -> [0: bb32, 2: bb32, 3: bb32, otherwise: bb33]; // scope 0 at cita-jsonrpc/src/service_error.rs:79:5: 79:6
    }

    bb27 (cleanup): {
        drop(_32) -> bb38;               // scope 7 at cita-jsonrpc/src/service_error.rs:74:13: 74:14
    }

    bb28 (cleanup): {
        drop(_19) -> bb44;               // scope 3 at cita-jsonrpc/src/service_error.rs:58:13: 58:14
    }

    bb29 (cleanup): {
        drop(_5) -> bb44;                // scope 1 at cita-jsonrpc/src/service_error.rs:48:99: 48:100
    }

    bb30 (cleanup): {
        _57 = discriminant(_1);          // scope 0 at cita-jsonrpc/src/service_error.rs:79:5: 79:6
        switchInt(move _57) -> [0: bb31, 2: bb31, 3: bb31, otherwise: bb45]; // scope 0 at cita-jsonrpc/src/service_error.rs:79:5: 79:6
    }

    bb31 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/service_error.rs:35:5: 79:6
    }

    bb32: {
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:79:6: 79:6
    }

    bb33: {
        drop(_1) -> bb32;                // scope 0 at cita-jsonrpc/src/service_error.rs:79:5: 79:6
    }

    bb34 (cleanup): {
        drop(_40) -> bb27;               // scope 10 at cita-jsonrpc/src/service_error.rs:73:63: 73:64
    }

    bb35 (cleanup): {
        switchInt(_50) -> [0: bb27, otherwise: bb34]; // scope 10 at cita-jsonrpc/src/service_error.rs:73:63: 73:64
    }

    bb36 (cleanup): {
        switchInt(_51) -> [0: bb44, otherwise: bb37]; // scope 1 at cita-jsonrpc/src/service_error.rs:74:13: 74:14
    }

    bb37 (cleanup): {
        drop(((_29 as Some).0: jsonrpc_types::rpc_request::RequestInfo)) -> bb44; // scope 1 at cita-jsonrpc/src/service_error.rs:74:13: 74:14
    }

    bb38 (cleanup): {
        _56 = discriminant(_29);         // scope 1 at cita-jsonrpc/src/service_error.rs:74:13: 74:14
        switchInt(move _56) -> [1: bb36, otherwise: bb44]; // scope 1 at cita-jsonrpc/src/service_error.rs:74:13: 74:14
    }

    bb39 (cleanup): {
        drop(_23) -> bb28;               // scope 5 at cita-jsonrpc/src/service_error.rs:57:63: 57:64
    }

    bb40 (cleanup): {
        switchInt(_52) -> [0: bb28, otherwise: bb39]; // scope 5 at cita-jsonrpc/src/service_error.rs:57:63: 57:64
    }

    bb41 (cleanup): {
        drop(_6) -> bb29;                // scope 2 at cita-jsonrpc/src/service_error.rs:48:99: 48:100
    }

    bb42 (cleanup): {
        switchInt(_53) -> [0: bb29, otherwise: bb41]; // scope 2 at cita-jsonrpc/src/service_error.rs:48:99: 48:100
    }

    bb43 (cleanup): {
        drop(_3) -> bb30;                // scope 0 at cita-jsonrpc/src/service_error.rs:79:5: 79:6
    }

    bb44 (cleanup): {
        switchInt(_54) -> [0: bb30, otherwise: bb43]; // scope 0 at cita-jsonrpc/src/service_error.rs:79:5: 79:6
    }

    bb45 (cleanup): {
        drop(_1) -> bb31;                // scope 0 at cita-jsonrpc/src/service_error.rs:79:5: 79:6
    }

    bb46: {
        goto -> bb26;                    // scope 1 at cita-jsonrpc/src/service_error.rs:49:51: 49:100
    }

    bb47: {
        goto -> bb19;                    // scope 7 at cita-jsonrpc/src/service_error.rs:66:29: 66:58
    }

    bb48: {
        goto -> bb19;                    // scope 9 at cita-jsonrpc/src/service_error.rs:65:35: 65:78
    }

    bb49: {
        goto -> bb26;                    // scope 1 at cita-jsonrpc/src/service_error.rs:76:17: 76:76
    }
}

fn service_error::<impl at cita-jsonrpc/src/service_error.rs:34:1: 34:35>::into_response::{closure#0}(_1: [closure@cita-jsonrpc/src/service_error.rs:36:28: 36:81], _2: std::option::Option<StatusCode>, _3: std::option::Option<Body>) -> hyper::Response<Body> {
    debug status_code => _2;             // in scope 0 at cita-jsonrpc/src/service_error.rs:36:29: 36:40
    debug body => _3;                    // in scope 0 at cita-jsonrpc/src/service_error.rs:36:62: 36:66
    debug http_headers => (_1.0: hyper::HeaderMap); // in scope 0 at cita-jsonrpc/src/service_error.rs:35:28: 35:40
    let mut _0: hyper::Response<hyper::Body>; // return place in scope 0 at cita-jsonrpc/src/service_error.rs:36:82: 36:82
    let _4: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/service_error.rs:37:17: 37:21
    let mut _5: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/service_error.rs:37:24: 37:43
    let mut _6: hyper::HeaderMap;        // in scope 0 at cita-jsonrpc/src/service_error.rs:37:57: 37:69
    let mut _7: (std::option::Option<hyper::StatusCode>, std::option::Option<hyper::Body>); // in scope 0 at cita-jsonrpc/src/service_error.rs:39:19: 39:38
    let mut _8: std::option::Option<hyper::Body>; // in scope 0 at cita-jsonrpc/src/service_error.rs:39:33: 39:37
    let mut _9: isize;                   // in scope 0 at cita-jsonrpc/src/service_error.rs:42:24: 42:34
    let mut _10: isize;                  // in scope 0 at cita-jsonrpc/src/service_error.rs:40:30: 40:40
    let mut _11: isize;                  // in scope 0 at cita-jsonrpc/src/service_error.rs:40:18: 40:28
    let mut _14: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/service_error.rs:40:45: 40:67
    let mut _15: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/service_error.rs:40:45: 40:49
    let mut _16: hyper::Body;            // in scope 0 at cita-jsonrpc/src/service_error.rs:40:78: 40:82
    let mut _18: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/service_error.rs:41:39: 41:43
    let mut _20: hyper::Response<hyper::Body>; // in scope 0 at cita-jsonrpc/src/service_error.rs:42:39: 42:43
    let mut _21: bool;                   // in scope 0 at cita-jsonrpc/src/service_error.rs:40:82: 40:83
    let mut _22: bool;                   // in scope 0 at cita-jsonrpc/src/service_error.rs:45:9: 45:10
    let mut _23: bool;                   // in scope 0 at cita-jsonrpc/src/service_error.rs:45:9: 45:10
    scope 1 {
        debug resp => _4;                // in scope 1 at cita-jsonrpc/src/service_error.rs:37:17: 37:21
        let _12: hyper::StatusCode;      // in scope 1 at cita-jsonrpc/src/service_error.rs:40:23: 40:27
        let _13: hyper::Body;            // in scope 1 at cita-jsonrpc/src/service_error.rs:40:35: 40:39
        let _17: hyper::StatusCode;      // in scope 1 at cita-jsonrpc/src/service_error.rs:41:23: 41:27
        let _19: hyper::Body;            // in scope 1 at cita-jsonrpc/src/service_error.rs:42:29: 42:33
        scope 2 {
            debug code => _12;           // in scope 2 at cita-jsonrpc/src/service_error.rs:40:23: 40:27
            debug body => _13;           // in scope 2 at cita-jsonrpc/src/service_error.rs:40:35: 40:39
        }
        scope 3 {
            debug code => _17;           // in scope 3 at cita-jsonrpc/src/service_error.rs:41:23: 41:27
        }
        scope 4 {
            debug body => _19;           // in scope 4 at cita-jsonrpc/src/service_error.rs:42:29: 42:33
        }
    }

    bb0: {
        _23 = const false;               // scope 0 at cita-jsonrpc/src/service_error.rs:37:17: 37:21
        _21 = const false;               // scope 0 at cita-jsonrpc/src/service_error.rs:37:17: 37:21
        _22 = const false;               // scope 0 at cita-jsonrpc/src/service_error.rs:37:17: 37:21
        _23 = const true;                // scope 0 at cita-jsonrpc/src/service_error.rs:37:17: 37:21
        _22 = const true;                // scope 0 at cita-jsonrpc/src/service_error.rs:37:17: 37:21
        _5 = <hyper::Response<Body> as Default>::default() -> [return: bb1, unwind: bb18]; // scope 0 at cita-jsonrpc/src/service_error.rs:37:24: 37:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:37:24: 37:41
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> hyper::Response<Body> {<hyper::Response<Body> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _23 = const false;               // scope 0 at cita-jsonrpc/src/service_error.rs:37:57: 37:69
        _6 = move (_1.0: hyper::HeaderMap); // scope 0 at cita-jsonrpc/src/service_error.rs:37:57: 37:69
        _4 = <hyper::Response<Body> as HyperResponseExt<Body>>::with_headers(move _5, move _6) -> [return: bb2, unwind: bb18]; // scope 0 at cita-jsonrpc/src/service_error.rs:37:24: 37:70
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:37:44: 37:56
                                         // + literal: Const { ty: fn(hyper::Response<Body>, HeaderMap) -> hyper::Response<Body> {<hyper::Response<Body> as HyperResponseExt<Body>>::with_headers}, val: Value(<ZST>) }
    }

    bb2: {
        _22 = const false;               // scope 1 at cita-jsonrpc/src/service_error.rs:39:33: 39:37
        _8 = move _3;                    // scope 1 at cita-jsonrpc/src/service_error.rs:39:33: 39:37
        _7 = (_2, move _8);              // scope 1 at cita-jsonrpc/src/service_error.rs:39:19: 39:38
        _11 = discriminant((_7.0: std::option::Option<hyper::StatusCode>)); // scope 1 at cita-jsonrpc/src/service_error.rs:39:19: 39:38
        switchInt(move _11) -> [0: bb3, 1: bb6, otherwise: bb5]; // scope 1 at cita-jsonrpc/src/service_error.rs:39:13: 39:38
    }

    bb3: {
        _9 = discriminant((_7.1: std::option::Option<hyper::Body>)); // scope 1 at cita-jsonrpc/src/service_error.rs:39:19: 39:38
        switchInt(move _9) -> [0: bb4, 1: bb11, otherwise: bb5]; // scope 1 at cita-jsonrpc/src/service_error.rs:39:13: 39:38
    }

    bb4: {
        _0 = move _4;                    // scope 1 at cita-jsonrpc/src/service_error.rs:43:33: 43:37
        goto -> bb12;                    // scope 1 at cita-jsonrpc/src/service_error.rs:43:33: 43:37
    }

    bb5: {
        unreachable;                     // scope 1 at cita-jsonrpc/src/service_error.rs:39:19: 39:38
    }

    bb6: {
        _10 = discriminant((_7.1: std::option::Option<hyper::Body>)); // scope 1 at cita-jsonrpc/src/service_error.rs:39:19: 39:38
        switchInt(move _10) -> [0: bb10, 1: bb7, otherwise: bb5]; // scope 1 at cita-jsonrpc/src/service_error.rs:39:13: 39:38
    }

    bb7: {
        _12 = (((_7.0: std::option::Option<hyper::StatusCode>) as Some).0: hyper::StatusCode); // scope 1 at cita-jsonrpc/src/service_error.rs:40:23: 40:27
        _21 = const true;                // scope 1 at cita-jsonrpc/src/service_error.rs:40:35: 40:39
        _13 = move (((_7.1: std::option::Option<hyper::Body>) as Some).0: hyper::Body); // scope 1 at cita-jsonrpc/src/service_error.rs:40:35: 40:39
        _15 = move _4;                   // scope 2 at cita-jsonrpc/src/service_error.rs:40:45: 40:49
        _14 = <hyper::Response<Body> as HyperResponseExt<Body>>::with_status(move _15, _12) -> [return: bb8, unwind: bb16]; // scope 2 at cita-jsonrpc/src/service_error.rs:40:45: 40:67
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:40:50: 40:61
                                         // + literal: Const { ty: fn(hyper::Response<Body>, StatusCode) -> hyper::Response<Body> {<hyper::Response<Body> as HyperResponseExt<Body>>::with_status}, val: Value(<ZST>) }
    }

    bb8: {
        _21 = const false;               // scope 2 at cita-jsonrpc/src/service_error.rs:40:78: 40:82
        _16 = move _13;                  // scope 2 at cita-jsonrpc/src/service_error.rs:40:78: 40:82
        _0 = <hyper::Response<Body> as HyperResponseExt<Body>>::with_body(move _14, move _16) -> [return: bb9, unwind: bb16]; // scope 2 at cita-jsonrpc/src/service_error.rs:40:45: 40:83
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:40:68: 40:77
                                         // + literal: Const { ty: fn(hyper::Response<Body>, Body) -> hyper::Response<Body> {<hyper::Response<Body> as HyperResponseExt<Body>>::with_body}, val: Value(<ZST>) }
    }

    bb9: {
        _21 = const false;               // scope 1 at cita-jsonrpc/src/service_error.rs:40:82: 40:83
        goto -> bb12;                    // scope 1 at cita-jsonrpc/src/service_error.rs:40:82: 40:83
    }

    bb10: {
        _17 = (((_7.0: std::option::Option<hyper::StatusCode>) as Some).0: hyper::StatusCode); // scope 1 at cita-jsonrpc/src/service_error.rs:41:23: 41:27
        _18 = move _4;                   // scope 3 at cita-jsonrpc/src/service_error.rs:41:39: 41:43
        _0 = <hyper::Response<Body> as HyperResponseExt<Body>>::with_status(move _18, _17) -> [return: bb20, unwind: bb18]; // scope 3 at cita-jsonrpc/src/service_error.rs:41:39: 41:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:41:44: 41:55
                                         // + literal: Const { ty: fn(hyper::Response<Body>, StatusCode) -> hyper::Response<Body> {<hyper::Response<Body> as HyperResponseExt<Body>>::with_status}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = move (((_7.1: std::option::Option<hyper::Body>) as Some).0: hyper::Body); // scope 1 at cita-jsonrpc/src/service_error.rs:42:29: 42:33
        _20 = move _4;                   // scope 4 at cita-jsonrpc/src/service_error.rs:42:39: 42:43
        _0 = <hyper::Response<Body> as HyperResponseExt<Body>>::with_body(move _20, move _19) -> [return: bb21, unwind: bb18]; // scope 4 at cita-jsonrpc/src/service_error.rs:42:39: 42:59
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:42:44: 42:53
                                         // + literal: Const { ty: fn(hyper::Response<Body>, Body) -> hyper::Response<Body> {<hyper::Response<Body> as HyperResponseExt<Body>>::with_body}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:45:10: 45:10
    }

    bb13 (cleanup): {
        switchInt(_23) -> [0: bb14, otherwise: bb19]; // scope 0 at cita-jsonrpc/src/service_error.rs:45:9: 45:10
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/service_error.rs:36:28: 45:10
    }

    bb15 (cleanup): {
        drop(_13) -> bb18;               // scope 1 at cita-jsonrpc/src/service_error.rs:40:82: 40:83
    }

    bb16 (cleanup): {
        switchInt(_21) -> [0: bb18, otherwise: bb15]; // scope 1 at cita-jsonrpc/src/service_error.rs:40:82: 40:83
    }

    bb17 (cleanup): {
        drop(_3) -> bb13;                // scope 0 at cita-jsonrpc/src/service_error.rs:45:9: 45:10
    }

    bb18 (cleanup): {
        switchInt(_22) -> [0: bb13, otherwise: bb17]; // scope 0 at cita-jsonrpc/src/service_error.rs:45:9: 45:10
    }

    bb19 (cleanup): {
        drop((_1.0: hyper::HeaderMap)) -> bb14; // scope 0 at cita-jsonrpc/src/service_error.rs:45:9: 45:10
    }

    bb20: {
        goto -> bb12;                    // scope 3 at cita-jsonrpc/src/service_error.rs:41:39: 41:61
    }

    bb21: {
        goto -> bb12;                    // scope 4 at cita-jsonrpc/src/service_error.rs:42:39: 42:59
    }
}

fn service_error::<impl at cita-jsonrpc/src/service_error.rs:34:1: 34:35>::into_response::{closure#1}(_1: [closure@cita-jsonrpc/src/service_error.rs:52:77: 52:80], _2: serde_json::Error) -> Vec<u8> {
    debug e => _2;                       // in scope 0 at cita-jsonrpc/src/service_error.rs:52:78: 52:79
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-jsonrpc/src/service_error.rs:52:81: 52:81
    let _3: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _6: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _8: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _9: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _12: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _13: &[&str];                // in scope 0 at cita-jsonrpc/src/service_error.rs:53:28: 53:44
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/service_error.rs:53:46: 53:47
    let _18: &serde_json::Error;         // in scope 0 at cita-jsonrpc/src/service_error.rs:53:46: 53:47
    let mut _19: &[u8];                  // in scope 0 at cita-jsonrpc/src/service_error.rs:54:21: 54:63
    let _20: &[u8];                      // in scope 0 at cita-jsonrpc/src/service_error.rs:54:21: 54:54
    let _21: &str;                       // in scope 0 at cita-jsonrpc/src/service_error.rs:54:21: 54:43
    scope 1 {
        debug lvl => _3;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _22: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _23: &[&str; 1];         // in scope 1 at cita-jsonrpc/src/service_error.rs:53:28: 53:44
        let mut _24: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _3 = log::Level::Error;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _6 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _24 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(<ServiceError as IntoResponse>::into_response::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _5 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _6, _24) -> [return: bb4, unwind: bb14]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _8 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _10 = log::max_level() -> [return: bb5, unwind: bb14]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _9 = &_10;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _7 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _8, move _9) -> [return: bb6, unwind: bb14]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = move _7;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _23 = const _;                   // scope 1 at cita-jsonrpc/src/service_error.rs:53:28: 53:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:53:28: 53:44
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<ServiceError as IntoResponse>::into_response::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _13 = _23 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/service_error.rs:53:28: 53:44
        _18 = &_2;                       // scope 1 at cita-jsonrpc/src/service_error.rs:53:46: 53:47
        _17 = core::fmt::ArgumentV1::<'_>::new_display::<serde_json::Error>(_18) -> [return: bb8, unwind: bb14]; // scope 1 at cita-jsonrpc/src/service_error.rs:53:46: 53:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:53:46: 53:47
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b serde_json::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<serde_json::Error>}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = [move _17];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = &_16;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb9, unwind: bb14]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(<ServiceError as IntoResponse>::into_response::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _11 = log::__private_api_log(move _12, _3, _22) -> [return: bb16, unwind: bb14]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = const _;                   // scope 0 at cita-jsonrpc/src/service_error.rs:54:21: 54:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:54:21: 54:43
                                         // + literal: Const { ty: &str, val: Unevaluated(MSG_INCOMPLETE_REQUEST, [], None) }
        _20 = core::str::<impl str>::as_bytes(_21) -> [return: bb11, unwind: bb14]; // scope 0 at cita-jsonrpc/src/service_error.rs:54:21: 54:54
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:54:44: 54:52
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = _20;                       // scope 0 at cita-jsonrpc/src/service_error.rs:54:21: 54:63
        _0 = slice::<impl [u8]>::to_vec(move _19) -> [return: bb12, unwind: bb14]; // scope 0 at cita-jsonrpc/src/service_error.rs:54:21: 54:63
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:54:55: 54:61
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_2) -> bb13;                // scope 0 at cita-jsonrpc/src/service_error.rs:55:17: 55:18
    }

    bb13: {
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:55:18: 55:18
    }

    bb14 (cleanup): {
        drop(_2) -> bb15;                // scope 0 at cita-jsonrpc/src/service_error.rs:55:17: 55:18
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/service_error.rs:52:77: 55:18
    }

    bb16: {
        goto -> bb10;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in service_error::<impl at cita-jsonrpc/src/service_error.rs:34:1: 34:35>::into_response::{closure#1}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/service_error.rs:53:21: 53:48
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/service_error.rs:53:21: 53:48

    bb0: {
        _3 = const "cita_jsonrpc::service_error"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::service_error"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/service_error.rs"; // scope 0 at cita-jsonrpc/src/service_error.rs:53:21: 53:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:53:21: 53:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/service_error.rs:53:21: 53:48
        _1 = (move _2, move _4, move _6, const 53_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in service_error::<impl at cita-jsonrpc/src/service_error.rs:34:1: 34:35>::into_response::{closure#1}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/service_error.rs:53:28: 53:44
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/service_error.rs:53:28: 53:44

    bb0: {
        _1 = [const "serde_json: "];     // scope 0 at cita-jsonrpc/src/service_error.rs:53:28: 53:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:53:28: 53:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/service_error.rs:53:28: 53:44
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:53:28: 53:44
    }
}

promoted[2] in service_error::<impl at cita-jsonrpc/src/service_error.rs:34:1: 34:35>::into_response::{closure#1}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn service_error::<impl at cita-jsonrpc/src/service_error.rs:34:1: 34:35>::into_response::{closure#2}(_1: [closure@cita-jsonrpc/src/service_error.rs:68:77: 68:80], _2: serde_json::Error) -> Vec<u8> {
    debug e => _2;                       // in scope 0 at cita-jsonrpc/src/service_error.rs:68:78: 68:79
    let mut _0: std::vec::Vec<u8>;       // return place in scope 0 at cita-jsonrpc/src/service_error.rs:68:81: 68:81
    let _3: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _6: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _8: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _9: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _12: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _13: &[&str];                // in scope 0 at cita-jsonrpc/src/service_error.rs:69:28: 69:44
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/service_error.rs:69:46: 69:47
    let _18: &serde_json::Error;         // in scope 0 at cita-jsonrpc/src/service_error.rs:69:46: 69:47
    let mut _19: &[u8];                  // in scope 0 at cita-jsonrpc/src/service_error.rs:70:21: 70:59
    let _20: &[u8];                      // in scope 0 at cita-jsonrpc/src/service_error.rs:70:21: 70:50
    let _21: &str;                       // in scope 0 at cita-jsonrpc/src/service_error.rs:70:21: 70:39
    scope 1 {
        debug lvl => _3;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _22: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _23: &[&str; 1];         // in scope 1 at cita-jsonrpc/src/service_error.rs:69:28: 69:44
        let mut _24: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _3 = log::Level::Error;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _6 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _24 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(<ServiceError as IntoResponse>::into_response::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _5 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _6, _24) -> [return: bb4, unwind: bb14]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _8 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _10 = log::max_level() -> [return: bb5, unwind: bb14]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _9 = &_10;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _7 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _8, move _9) -> [return: bb6, unwind: bb14]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = move _7;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _23 = const _;                   // scope 1 at cita-jsonrpc/src/service_error.rs:69:28: 69:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:69:28: 69:44
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<ServiceError as IntoResponse>::into_response::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _13 = _23 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/service_error.rs:69:28: 69:44
        _18 = &_2;                       // scope 1 at cita-jsonrpc/src/service_error.rs:69:46: 69:47
        _17 = core::fmt::ArgumentV1::<'_>::new_display::<serde_json::Error>(_18) -> [return: bb8, unwind: bb14]; // scope 1 at cita-jsonrpc/src/service_error.rs:69:46: 69:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:69:46: 69:47
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b serde_json::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<serde_json::Error>}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = [move _17];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = &_16;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb9, unwind: bb14]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(<ServiceError as IntoResponse>::into_response::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _11 = log::__private_api_log(move _12, _3, _22) -> [return: bb16, unwind: bb14]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = const _;                   // scope 0 at cita-jsonrpc/src/service_error.rs:70:21: 70:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:70:21: 70:39
                                         // + literal: Const { ty: &str, val: Unevaluated(MSG_TIMEOUT_RESEND, [], None) }
        _20 = core::str::<impl str>::as_bytes(_21) -> [return: bb11, unwind: bb14]; // scope 0 at cita-jsonrpc/src/service_error.rs:70:21: 70:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:70:40: 70:48
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = _20;                       // scope 0 at cita-jsonrpc/src/service_error.rs:70:21: 70:59
        _0 = slice::<impl [u8]>::to_vec(move _19) -> [return: bb12, unwind: bb14]; // scope 0 at cita-jsonrpc/src/service_error.rs:70:21: 70:59
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:70:51: 70:57
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_2) -> bb13;                // scope 0 at cita-jsonrpc/src/service_error.rs:71:17: 71:18
    }

    bb13: {
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:71:18: 71:18
    }

    bb14 (cleanup): {
        drop(_2) -> bb15;                // scope 0 at cita-jsonrpc/src/service_error.rs:71:17: 71:18
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/service_error.rs:68:77: 71:18
    }

    bb16: {
        goto -> bb10;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in service_error::<impl at cita-jsonrpc/src/service_error.rs:34:1: 34:35>::into_response::{closure#2}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/service_error.rs:69:21: 69:48
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/service_error.rs:69:21: 69:48

    bb0: {
        _3 = const "cita_jsonrpc::service_error"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::service_error"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/service_error.rs"; // scope 0 at cita-jsonrpc/src/service_error.rs:69:21: 69:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:69:21: 69:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/service_error.rs:69:21: 69:48
        _1 = (move _2, move _4, move _6, const 69_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in service_error::<impl at cita-jsonrpc/src/service_error.rs:34:1: 34:35>::into_response::{closure#2}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/service_error.rs:69:28: 69:44
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/service_error.rs:69:28: 69:44

    bb0: {
        _1 = [const "serde_json: "];     // scope 0 at cita-jsonrpc/src/service_error.rs:69:28: 69:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/service_error.rs:69:28: 69:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/service_error.rs:69:28: 69:44
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:69:28: 69:44
    }
}

promoted[2] in service_error::<impl at cita-jsonrpc/src/service_error.rs:34:1: 34:35>::into_response::{closure#2}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::new(_1: Config) -> Soliloquy {
    debug config => _1;                  // in scope 0 at cita-jsonrpc/src/soliloquy.rs:29:16: 29:22
    let mut _0: soliloquy::Soliloquy;    // return place in scope 0 at cita-jsonrpc/src/soliloquy.rs:29:35: 29:39

    bb0: {
        _0 = Soliloquy { config: move _1 }; // scope 0 at cita-jsonrpc/src/soliloquy.rs:30:9: 30:29
        return;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:31:6: 31:6
    }
}

fn soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle(_1: &Soliloquy, _2: &[u8]) -> libproto::Message {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:33:19: 33:24
    debug msg_bytes => _2;               // in scope 0 at cita-jsonrpc/src/soliloquy.rs:33:26: 33:35
    let mut _0: libproto::Message;       // return place in scope 0 at cita-jsonrpc/src/soliloquy.rs:33:47: 33:54
    let _3: std::result::Result<libproto::Message, libproto::TryFromConvertError>; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:34:13: 34:22
    let mut _5: std::result::Result<std::option::Option<libproto::Request>, libproto::TryFromConvertError>; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:37:32: 37:75
    let mut _6: std::result::Result<libproto::Message, libproto::TryFromConvertError>; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:37:32: 37:41
    let mut _7: isize;                   // in scope 0 at cita-jsonrpc/src/soliloquy.rs:37:19: 37:28
    let mut _8: isize;                   // in scope 0 at cita-jsonrpc/src/soliloquy.rs:37:16: 37:29
    let _10: ();                         // in scope 0 at cita-jsonrpc/src/soliloquy.rs:38:13: 38:52
    let mut _11: &mut libproto::Response; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:38:13: 38:52
    let mut _12: std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/soliloquy.rs:38:37: 38:51
    let mut _14: std::option::Option<bool>; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:39:35: 39:61
    let mut _16: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _17: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _18: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _19: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _20: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _21: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _22: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _23: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _24: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _25: &[&str];                // in scope 0 at cita-jsonrpc/src/soliloquy.rs:40:20: 40:43
    let mut _26: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _27: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _28: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _29: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:40:45: 40:60
    let _30: &bool;                      // in scope 0 at cita-jsonrpc/src/soliloquy.rs:40:45: 40:60
    let mut _31: isize;                  // in scope 0 at cita-jsonrpc/src/soliloquy.rs:43:22: 43:41
    let mut _32: isize;                  // in scope 0 at cita-jsonrpc/src/soliloquy.rs:43:17: 43:42
    let mut _33: bool;                   // in scope 0 at cita-jsonrpc/src/soliloquy.rs:43:46: 43:61
    let mut _36: std::str::Split<'_, char>; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:45:42: 45:60
    let mut _37: &str;                   // in scope 0 at cita-jsonrpc/src/soliloquy.rs:45:42: 45:60
    let _39: &&str;                      // in scope 0 at cita-jsonrpc/src/soliloquy.rs:46:35: 46:41
    let mut _40: &std::vec::Vec<&str>;   // in scope 0 at cita-jsonrpc/src/soliloquy.rs:46:35: 46:38
    let mut _41: std::result::Result<serde_json::Value, serde_json::Error>; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:47:43: 47:94
    let mut _42: jsonrpc_types::rpc_types::SoftwareVersion; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:47:64: 47:93
    let mut _43: std::string::String;    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:47:85: 47:92
    let mut _44: isize;                  // in scope 0 at cita-jsonrpc/src/soliloquy.rs:47:28: 47:40
    let _46: ();                         // in scope 0 at cita-jsonrpc/src/soliloquy.rs:48:25: 48:76
    let mut _47: &mut libproto::Response; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:48:25: 48:76
    let mut _48: std::string::String;    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:48:55: 48:75
    let mut _49: &serde_json::Value;     // in scope 0 at cita-jsonrpc/src/soliloquy.rs:48:55: 48:75
    let _50: ();                         // in scope 0 at cita-jsonrpc/src/soliloquy.rs:50:25: 50:75
    let mut _51: &mut libproto::Response; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:50:25: 50:75
    let mut _52: i64;                    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:50:43: 50:74
    let _53: ();                         // in scope 0 at cita-jsonrpc/src/soliloquy.rs:51:25: 51:87
    let mut _54: &mut libproto::Response; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:51:25: 51:87
    let mut _55: std::string::String;    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:51:48: 51:86
    let _56: ();                         // in scope 0 at cita-jsonrpc/src/soliloquy.rs:55:21: 55:72
    let mut _57: &mut libproto::Response; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:55:21: 55:72
    let mut _58: i64;                    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:55:39: 55:71
    let _59: ();                         // in scope 0 at cita-jsonrpc/src/soliloquy.rs:56:21: 56:84
    let mut _60: &mut libproto::Response; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:56:21: 56:84
    let mut _61: std::string::String;    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:56:44: 56:83
    let mut _63: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _64: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _65: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _66: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _67: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _68: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _69: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _70: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _71: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _72: &[&str];                // in scope 0 at cita-jsonrpc/src/soliloquy.rs:60:19: 60:44
    let _73: ();                         // in scope 0 at cita-jsonrpc/src/soliloquy.rs:61:13: 61:64
    let mut _74: &mut libproto::Response; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:61:13: 61:64
    let mut _75: i64;                    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:61:31: 61:63
    let _76: ();                         // in scope 0 at cita-jsonrpc/src/soliloquy.rs:62:13: 62:76
    let mut _77: &mut libproto::Response; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:62:13: 62:76
    let mut _78: std::string::String;    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:62:36: 62:75
    let mut _79: libproto::Response;     // in scope 0 at cita-jsonrpc/src/soliloquy.rs:65:9: 65:17
    let mut _92: &str;                   // in scope 0 at cita-jsonrpc/src/soliloquy.rs:46:35: 46:41
    let mut _93: bool;                   // in scope 0 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    let mut _94: bool;                   // in scope 0 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    let mut _95: bool;                   // in scope 0 at cita-jsonrpc/src/soliloquy.rs:66:5: 66:6
    let mut _96: bool;                   // in scope 0 at cita-jsonrpc/src/soliloquy.rs:66:5: 66:6
    let mut _97: isize;                  // in scope 0 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    let mut _98: isize;                  // in scope 0 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    let mut _99: isize;                  // in scope 0 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    let mut _100: isize;                 // in scope 0 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    let mut _101: isize;                 // in scope 0 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    let mut _102: isize;                 // in scope 0 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    scope 1 {
        debug maybe_msg => _3;           // in scope 1 at cita-jsonrpc/src/soliloquy.rs:34:13: 34:22
        let mut _4: libproto::Response;  // in scope 1 at cita-jsonrpc/src/soliloquy.rs:35:13: 35:25
        scope 2 {
            debug response => _4;        // in scope 2 at cita-jsonrpc/src/soliloquy.rs:35:13: 35:25
            let _62: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _87: &jsonrpc_types::ErrorCode; // in scope 2 at cita-jsonrpc/src/soliloquy.rs:62:36: 62:75
            let mut _88: &jsonrpc_types::ErrorCode; // in scope 2 at cita-jsonrpc/src/soliloquy.rs:61:31: 61:63
            scope 3 {
                debug req => _9;         // in scope 3 at cita-jsonrpc/src/soliloquy.rs:37:24: 37:27
                let _9: libproto::Request; // in scope 3 at cita-jsonrpc/src/soliloquy.rs:37:24: 37:27
                let _13: bool;           // in scope 3 at cita-jsonrpc/src/soliloquy.rs:39:17: 39:32
                scope 4 {
                    debug enabled_version => _13; // in scope 4 at cita-jsonrpc/src/soliloquy.rs:39:17: 39:32
                    let _15: log::Level; // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let _34: &str;       // in scope 4 at cita-jsonrpc/src/soliloquy.rs:44:25: 44:32
                    let mut _80: &jsonrpc_types::ErrorCode; // in scope 4 at cita-jsonrpc/src/soliloquy.rs:56:44: 56:83
                    let mut _81: &jsonrpc_types::ErrorCode; // in scope 4 at cita-jsonrpc/src/soliloquy.rs:55:39: 55:71
                    scope 5 {
                        debug lvl => _15; // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        let mut _84: &(&str, &str, &str, u32); // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                        let mut _85: &[&str; 1]; // in scope 5 at cita-jsonrpc/src/soliloquy.rs:40:20: 40:43
                        let mut _86: &log::LevelFilter; // in scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                    }
                    scope 6 {
                        debug version => _34; // in scope 6 at cita-jsonrpc/src/soliloquy.rs:44:25: 44:32
                        let _35: std::vec::Vec<&str>; // in scope 6 at cita-jsonrpc/src/soliloquy.rs:45:25: 45:28
                        scope 7 {
                            debug vec => _35; // in scope 7 at cita-jsonrpc/src/soliloquy.rs:45:25: 45:28
                            let _38: std::string::String; // in scope 7 at cita-jsonrpc/src/soliloquy.rs:46:25: 46:32
                            scope 8 {
                                debug version => _38; // in scope 8 at cita-jsonrpc/src/soliloquy.rs:46:25: 46:32
                                let mut _82: &jsonrpc_types::ErrorCode; // in scope 8 at cita-jsonrpc/src/soliloquy.rs:51:48: 51:86
                                let mut _83: &jsonrpc_types::ErrorCode; // in scope 8 at cita-jsonrpc/src/soliloquy.rs:50:43: 50:74
                                scope 9 {
                                    debug json_ver => _45; // in scope 9 at cita-jsonrpc/src/soliloquy.rs:47:31: 47:39
                                    let _45: serde_json::Value; // in scope 9 at cita-jsonrpc/src/soliloquy.rs:47:31: 47:39
                                }
                            }
                        }
                    }
                }
            }
            scope 10 {
                debug lvl => _62;        // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _89: &(&str, &str, &str, u32); // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _90: &[&str; 1]; // in scope 10 at cita-jsonrpc/src/soliloquy.rs:60:19: 60:44
                let mut _91: &log::LevelFilter; // in scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
        }
    }

    bb0: {
        _95 = const false;               // scope 0 at cita-jsonrpc/src/soliloquy.rs:34:13: 34:22
        _93 = const false;               // scope 0 at cita-jsonrpc/src/soliloquy.rs:34:13: 34:22
        _94 = const false;               // scope 0 at cita-jsonrpc/src/soliloquy.rs:34:13: 34:22
        _96 = const false;               // scope 0 at cita-jsonrpc/src/soliloquy.rs:34:13: 34:22
        _96 = const true;                // scope 0 at cita-jsonrpc/src/soliloquy.rs:34:45: 34:83
        _3 = <libproto::Message as libproto::TryFrom<&[u8]>>::try_from(_2) -> bb1; // scope 0 at cita-jsonrpc/src/soliloquy.rs:34:45: 34:83
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:34:45: 34:72
                                         // + literal: Const { ty: fn(&[u8]) -> Result<libproto::Message, <libproto::Message as libproto::TryFrom<&[u8]>>::Error> {<libproto::Message as libproto::TryFrom<&[u8]>>::try_from}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = libproto::Response::new() -> [return: bb2, unwind: bb84]; // scope 1 at cita-jsonrpc/src/soliloquy.rs:35:28: 35:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:35:28: 35:41
                                         // + literal: Const { ty: fn() -> libproto::Response {libproto::Response::new}, val: Value(<ZST>) }
    }

    bb2: {
        _95 = const true;                // scope 2 at cita-jsonrpc/src/soliloquy.rs:37:9: 63:10
        _96 = const false;               // scope 3 at cita-jsonrpc/src/soliloquy.rs:37:32: 37:41
        _6 = move _3;                    // scope 3 at cita-jsonrpc/src/soliloquy.rs:37:32: 37:41
        _5 = Result::<libproto::Message, TryFromConvertError>::map::<std::option::Option<libproto::Request>, [closure@cita-jsonrpc/src/soliloquy.rs:37:46: 37:55]>(move _6, const ZeroSized: [closure@cita-jsonrpc/src/soliloquy.rs:37:46: 37:55]) -> [return: bb3, unwind: bb82]; // scope 3 at cita-jsonrpc/src/soliloquy.rs:37:32: 37:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:37:42: 37:45
                                         // + literal: Const { ty: fn(Result<libproto::Message, TryFromConvertError>, [closure@cita-jsonrpc/src/soliloquy.rs:37:46: 37:55]) -> Result<std::option::Option<libproto::Request>, TryFromConvertError> {Result::<libproto::Message, TryFromConvertError>::map::<std::option::Option<libproto::Request>, [closure@cita-jsonrpc/src/soliloquy.rs:37:46: 37:55]>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/soliloquy.rs:37:46: 37:55], val: Value(<ZST>) }
    }

    bb3: {
        _94 = const true;                // scope 3 at cita-jsonrpc/src/soliloquy.rs:37:74: 37:75
        _8 = discriminant(_5);           // scope 3 at cita-jsonrpc/src/soliloquy.rs:37:16: 37:29
        switchInt(move _8) -> [0: bb4, otherwise: bb42]; // scope 3 at cita-jsonrpc/src/soliloquy.rs:37:16: 37:29
    }

    bb4: {
        _7 = discriminant(((_5 as Ok).0: std::option::Option<libproto::Request>)); // scope 3 at cita-jsonrpc/src/soliloquy.rs:37:16: 37:29
        switchInt(move _7) -> [1: bb5, otherwise: bb42]; // scope 3 at cita-jsonrpc/src/soliloquy.rs:37:16: 37:29
    }

    bb5: {
        _94 = const false;               // scope 3 at cita-jsonrpc/src/soliloquy.rs:37:24: 37:27
        _9 = move ((((_5 as Ok).0: std::option::Option<libproto::Request>) as Some).0: libproto::Request); // scope 3 at cita-jsonrpc/src/soliloquy.rs:37:24: 37:27
        _11 = &mut _4;                   // scope 3 at cita-jsonrpc/src/soliloquy.rs:38:13: 38:52
        _12 = move (_9.0: std::vec::Vec<u8>); // scope 3 at cita-jsonrpc/src/soliloquy.rs:38:37: 38:51
        _10 = libproto::Response::set_request_id(move _11, move _12) -> [return: bb6, unwind: bb76]; // scope 3 at cita-jsonrpc/src/soliloquy.rs:38:13: 38:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:38:22: 38:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, Vec<u8>) {libproto::Response::set_request_id}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = (((*_1).0: config::Config).1: std::option::Option<bool>); // scope 3 at cita-jsonrpc/src/soliloquy.rs:39:35: 39:61
        _13 = std::option::Option::<bool>::unwrap_or(move _14, const false) -> [return: bb7, unwind: bb76]; // scope 3 at cita-jsonrpc/src/soliloquy.rs:39:35: 39:78
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:39:62: 39:71
                                         // + literal: Const { ty: fn(std::option::Option<bool>, bool) -> bool {std::option::Option::<bool>::unwrap_or}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = log::Level::Debug;         // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:142:14: 142:34
        _18 = &_15;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _86 = const _;                   // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Soliloquy::handle, [], Some(promoted[6])) }
        _17 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _18, _86) -> [return: bb11, unwind: bb76]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = const false;               // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb10;                    // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb9: {
        _20 = &_15;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _22 = log::max_level() -> [return: bb12, unwind: bb76]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _16) -> [0: bb17, otherwise: bb14]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        switchInt(move _17) -> [0: bb8, otherwise: bb9]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb12: {
        _21 = &_22;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _19 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _20, move _21) -> [return: bb13, unwind: bb76]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb13: {
        _16 = move _19;                  // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb10;                    // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb14: {
        _85 = const _;                   // scope 5 at cita-jsonrpc/src/soliloquy.rs:40:20: 40:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:40:20: 40:43
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Soliloquy::handle, [], Some(promoted[5])) }
        _25 = _85 as &[&str] (Pointer(Unsize)); // scope 5 at cita-jsonrpc/src/soliloquy.rs:40:20: 40:43
        _30 = &_13;                      // scope 5 at cita-jsonrpc/src/soliloquy.rs:40:45: 40:60
        _29 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(_30) -> [return: bb15, unwind: bb76]; // scope 5 at cita-jsonrpc/src/soliloquy.rs:40:45: 40:60
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:40:45: 40:60
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb15: {
        _28 = [move _29];                // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _27 = &_28;                      // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _26 = _27 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _24 = Arguments::<'_>::new_v1(move _25, move _26) -> [return: bb16, unwind: bb76]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb16: {
        _84 = const _;                   // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Soliloquy::handle, [], Some(promoted[4])) }
        _23 = log::__private_api_log(move _24, _15, _84) -> [return: bb85, unwind: bb76]; // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb17: {
        _32 = discriminant((_9.1: std::option::Option<libproto::Request_oneof_req>)); // scope 4 at cita-jsonrpc/src/soliloquy.rs:42:19: 42:26
        switchInt(move _32) -> [1: bb19, otherwise: bb18]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:42:13: 42:26
    }

    bb18: {
        _57 = &mut _4;                   // scope 4 at cita-jsonrpc/src/soliloquy.rs:55:21: 55:72
        _81 = const _;                   // scope 4 at cita-jsonrpc/src/soliloquy.rs:55:39: 55:71
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:55:39: 55:71
                                         // + literal: Const { ty: &jsonrpc_types::ErrorCode, val: Unevaluated(Soliloquy::handle, [], Some(promoted[1])) }
        _58 = jsonrpc_types::ErrorCode::code(_81) -> [return: bb38, unwind: bb76]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:55:39: 55:71
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:55:65: 55:69
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::ErrorCode) -> i64 {jsonrpc_types::ErrorCode::code}, val: Value(<ZST>) }
    }

    bb19: {
        _31 = discriminant((((_9.1: std::option::Option<libproto::Request_oneof_req>) as Some).0: libproto::Request_oneof_req)); // scope 4 at cita-jsonrpc/src/soliloquy.rs:42:19: 42:26
        switchInt(move _31) -> [25: bb20, otherwise: bb18]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:42:13: 42:26
    }

    bb20: {
        _33 = _13;                       // scope 4 at cita-jsonrpc/src/soliloquy.rs:43:46: 43:61
        switchInt(move _33) -> [0: bb18, otherwise: bb21]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:43:46: 43:61
    }

    bb21: {
        _34 = get_build_info_str(const true) -> [return: bb22, unwind: bb76]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:44:35: 44:59
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:44:35: 44:53
                                         // + literal: Const { ty: fn(bool) -> &'static str {get_build_info_str}, val: Value(<ZST>) }
    }

    bb22: {
        _37 = _34;                       // scope 6 at cita-jsonrpc/src/soliloquy.rs:45:42: 45:60
        _36 = core::str::<impl str>::split::<'_, char>(move _37, const '-') -> [return: bb23, unwind: bb76]; // scope 6 at cita-jsonrpc/src/soliloquy.rs:45:42: 45:60
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:45:50: 45:55
                                         // + literal: Const { ty: fn(&str, char) -> std::str::Split<'_, char> {core::str::<impl str>::split::<'_, char>}, val: Value(<ZST>) }
    }

    bb23: {
        _35 = <std::str::Split<'_, char> as Iterator>::collect::<Vec<&str>>(move _36) -> [return: bb24, unwind: bb76]; // scope 6 at cita-jsonrpc/src/soliloquy.rs:45:42: 45:70
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:45:61: 45:68
                                         // + literal: Const { ty: fn(std::str::Split<'_, char>) -> Vec<&str> {<std::str::Split<'_, char> as Iterator>::collect::<Vec<&str>>}, val: Value(<ZST>) }
    }

    bb24: {
        _40 = &_35;                      // scope 7 at cita-jsonrpc/src/soliloquy.rs:46:35: 46:38
        _39 = <Vec<&str> as std::ops::Index<usize>>::index(move _40, const 0_usize) -> [return: bb25, unwind: bb58]; // scope 7 at cita-jsonrpc/src/soliloquy.rs:46:35: 46:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:46:35: 46:41
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<&str>, usize) -> &'a <Vec<&str> as std::ops::Index<usize>>::Output {<Vec<&str> as std::ops::Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb25: {
        _92 = deref_copy (*_39);         // scope 7 at cita-jsonrpc/src/soliloquy.rs:46:35: 46:53
        _38 = <str as ToString>::to_string(_92) -> [return: bb26, unwind: bb58]; // scope 7 at cita-jsonrpc/src/soliloquy.rs:46:35: 46:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:46:42: 46:51
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> std::string::String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb26: {
        _43 = move _38;                  // scope 9 at cita-jsonrpc/src/soliloquy.rs:47:85: 47:92
        _42 = SoftwareVersion::new(move _43) -> [return: bb27, unwind: bb58]; // scope 9 at cita-jsonrpc/src/soliloquy.rs:47:64: 47:93
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:47:64: 47:84
                                         // + literal: Const { ty: fn(std::string::String) -> SoftwareVersion {SoftwareVersion::new}, val: Value(<ZST>) }
    }

    bb27: {
        _41 = to_value::<SoftwareVersion>(move _42) -> [return: bb28, unwind: bb58]; // scope 9 at cita-jsonrpc/src/soliloquy.rs:47:43: 47:94
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:47:43: 47:63
                                         // + literal: Const { ty: fn(SoftwareVersion) -> Result<Value, serde_json::Error> {to_value::<SoftwareVersion>}, val: Value(<ZST>) }
    }

    bb28: {
        _93 = const true;                // scope 9 at cita-jsonrpc/src/soliloquy.rs:47:93: 47:94
        _44 = discriminant(_41);         // scope 9 at cita-jsonrpc/src/soliloquy.rs:47:28: 47:40
        switchInt(move _44) -> [0: bb29, otherwise: bb32]; // scope 9 at cita-jsonrpc/src/soliloquy.rs:47:28: 47:40
    }

    bb29: {
        _93 = const false;               // scope 9 at cita-jsonrpc/src/soliloquy.rs:47:31: 47:39
        _45 = move ((_41 as Ok).0: serde_json::Value); // scope 9 at cita-jsonrpc/src/soliloquy.rs:47:31: 47:39
        _47 = &mut _4;                   // scope 9 at cita-jsonrpc/src/soliloquy.rs:48:25: 48:76
        _49 = &_45;                      // scope 9 at cita-jsonrpc/src/soliloquy.rs:48:55: 48:75
        _48 = <Value as ToString>::to_string(move _49) -> [return: bb30, unwind: bb56]; // scope 9 at cita-jsonrpc/src/soliloquy.rs:48:55: 48:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:48:64: 48:73
                                         // + literal: Const { ty: for<'a> fn(&'a Value) -> std::string::String {<Value as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb30: {
        _46 = libproto::Response::set_software_version(move _47, move _48) -> [return: bb31, unwind: bb56]; // scope 9 at cita-jsonrpc/src/soliloquy.rs:48:25: 48:76
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:48:34: 48:54
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_software_version}, val: Value(<ZST>) }
    }

    bb31: {
        drop(_45) -> [return: bb36, unwind: bb57]; // scope 8 at cita-jsonrpc/src/soliloquy.rs:49:21: 49:22
    }

    bb32: {
        _51 = &mut _4;                   // scope 8 at cita-jsonrpc/src/soliloquy.rs:50:25: 50:75
        _83 = const _;                   // scope 8 at cita-jsonrpc/src/soliloquy.rs:50:43: 50:74
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:50:43: 50:74
                                         // + literal: Const { ty: &jsonrpc_types::ErrorCode, val: Unevaluated(Soliloquy::handle, [], Some(promoted[3])) }
        _52 = jsonrpc_types::ErrorCode::code(_83) -> [return: bb33, unwind: bb57]; // scope 8 at cita-jsonrpc/src/soliloquy.rs:50:43: 50:74
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:50:68: 50:72
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::ErrorCode) -> i64 {jsonrpc_types::ErrorCode::code}, val: Value(<ZST>) }
    }

    bb33: {
        _50 = libproto::Response::set_code(move _51, move _52) -> [return: bb34, unwind: bb57]; // scope 8 at cita-jsonrpc/src/soliloquy.rs:50:25: 50:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:50:34: 50:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb34: {
        _54 = &mut _4;                   // scope 8 at cita-jsonrpc/src/soliloquy.rs:51:25: 51:87
        _82 = const _;                   // scope 8 at cita-jsonrpc/src/soliloquy.rs:51:48: 51:86
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:51:48: 51:86
                                         // + literal: Const { ty: &jsonrpc_types::ErrorCode, val: Unevaluated(Soliloquy::handle, [], Some(promoted[2])) }
        _55 = jsonrpc_types::ErrorCode::description(_82) -> [return: bb35, unwind: bb57]; // scope 8 at cita-jsonrpc/src/soliloquy.rs:51:48: 51:86
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:51:73: 51:84
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::ErrorCode) -> std::string::String {jsonrpc_types::ErrorCode::description}, val: Value(<ZST>) }
    }

    bb35: {
        _53 = libproto::Response::set_error_msg(move _54, move _55) -> [return: bb86, unwind: bb57]; // scope 8 at cita-jsonrpc/src/soliloquy.rs:51:25: 51:87
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:51:34: 51:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb36: {
        drop(_35) -> [return: bb37, unwind: bb74]; // scope 6 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    }

    bb37: {
        _97 = discriminant(_41);         // scope 4 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
        switchInt(move _97) -> [0: bb61, otherwise: bb63]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    }

    bb38: {
        _56 = libproto::Response::set_code(move _57, move _58) -> [return: bb39, unwind: bb76]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:55:21: 55:72
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:55:30: 55:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb39: {
        _60 = &mut _4;                   // scope 4 at cita-jsonrpc/src/soliloquy.rs:56:21: 56:84
        _80 = const _;                   // scope 4 at cita-jsonrpc/src/soliloquy.rs:56:44: 56:83
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:56:44: 56:83
                                         // + literal: Const { ty: &jsonrpc_types::ErrorCode, val: Unevaluated(Soliloquy::handle, [], Some(promoted[0])) }
        _61 = jsonrpc_types::ErrorCode::description(_80) -> [return: bb40, unwind: bb76]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:56:44: 56:83
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:56:70: 56:81
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::ErrorCode) -> std::string::String {jsonrpc_types::ErrorCode::description}, val: Value(<ZST>) }
    }

    bb40: {
        _59 = libproto::Response::set_error_msg(move _60, move _61) -> [return: bb87, unwind: bb76]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:56:21: 56:84
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:56:30: 56:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb41: {
        drop((_9.1: std::option::Option<libproto::Request_oneof_req>)) -> [return: bb65, unwind: bb64]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:59:9: 59:10
    }

    bb42: {
        _62 = log::Level::Warn;          // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:91:14: 91:33
        _65 = &_62;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _91 = const _;                   // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(Soliloquy::handle, [], Some(promoted[11])) }
        _64 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _65, _91) -> [return: bb46, unwind: bb80]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb43: {
        _63 = const false;               // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb45;                    // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb44: {
        _67 = &_62;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _69 = log::max_level() -> [return: bb47, unwind: bb80]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb45: {
        switchInt(move _63) -> [0: bb51, otherwise: bb49]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb46: {
        switchInt(move _64) -> [0: bb43, otherwise: bb44]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb47: {
        _68 = &_69;                      // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _66 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _67, move _68) -> [return: bb48, unwind: bb80]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb48: {
        _63 = move _66;                  // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb45;                    // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb49: {
        _90 = const _;                   // scope 10 at cita-jsonrpc/src/soliloquy.rs:60:19: 60:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:60:19: 60:44
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(Soliloquy::handle, [], Some(promoted[10])) }
        _72 = _90 as &[&str] (Pointer(Unsize)); // scope 10 at cita-jsonrpc/src/soliloquy.rs:60:19: 60:44
        _71 = Arguments::<'_>::new_const(move _72) -> [return: bb50, unwind: bb80]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb50: {
        _89 = const _;                   // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(Soliloquy::handle, [], Some(promoted[9])) }
        _70 = log::__private_api_log(move _71, _62, _89) -> [return: bb88, unwind: bb80]; // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb51: {
        _74 = &mut _4;                   // scope 2 at cita-jsonrpc/src/soliloquy.rs:61:13: 61:64
        _88 = const _;                   // scope 2 at cita-jsonrpc/src/soliloquy.rs:61:31: 61:63
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:61:31: 61:63
                                         // + literal: Const { ty: &jsonrpc_types::ErrorCode, val: Unevaluated(Soliloquy::handle, [], Some(promoted[8])) }
        _75 = jsonrpc_types::ErrorCode::code(_88) -> [return: bb52, unwind: bb80]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:61:31: 61:63
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:61:57: 61:61
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::ErrorCode) -> i64 {jsonrpc_types::ErrorCode::code}, val: Value(<ZST>) }
    }

    bb52: {
        _73 = libproto::Response::set_code(move _74, move _75) -> [return: bb53, unwind: bb80]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:61:13: 61:64
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:61:22: 61:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, i64) {libproto::Response::set_code}, val: Value(<ZST>) }
    }

    bb53: {
        _77 = &mut _4;                   // scope 2 at cita-jsonrpc/src/soliloquy.rs:62:13: 62:76
        _87 = const _;                   // scope 2 at cita-jsonrpc/src/soliloquy.rs:62:36: 62:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:62:36: 62:75
                                         // + literal: Const { ty: &jsonrpc_types::ErrorCode, val: Unevaluated(Soliloquy::handle, [], Some(promoted[7])) }
        _78 = jsonrpc_types::ErrorCode::description(_87) -> [return: bb54, unwind: bb80]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:62:36: 62:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:62:62: 62:73
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::ErrorCode) -> std::string::String {jsonrpc_types::ErrorCode::description}, val: Value(<ZST>) }
    }

    bb54: {
        _76 = libproto::Response::set_error_msg(move _77, move _78) -> [return: bb89, unwind: bb80]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:62:13: 62:76
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:62:22: 62:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Response, std::string::String) {libproto::Response::set_error_msg}, val: Value(<ZST>) }
    }

    bb55: {
        _95 = const false;               // scope 1 at cita-jsonrpc/src/soliloquy.rs:66:5: 66:6
        _96 = const false;               // scope 0 at cita-jsonrpc/src/soliloquy.rs:66:5: 66:6
        return;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:66:6: 66:6
    }

    bb56 (cleanup): {
        drop(_45) -> bb57;               // scope 8 at cita-jsonrpc/src/soliloquy.rs:49:21: 49:22
    }

    bb57 (cleanup): {
        drop(_35) -> bb74;               // scope 6 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    }

    bb58 (cleanup): {
        drop(_35) -> bb76;               // scope 6 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    }

    bb59 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:33:5: 66:6
    }

    bb60: {
        _93 = const false;               // scope 4 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
        goto -> bb41;                    // scope 4 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    }

    bb61: {
        switchInt(_93) -> [0: bb60, otherwise: bb62]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    }

    bb62: {
        drop(((_41 as Ok).0: serde_json::Value)) -> [return: bb60, unwind: bb76]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    }

    bb63: {
        drop(_41) -> [return: bb60, unwind: bb76]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    }

    bb64 (cleanup): {
        drop((_9.2: protobuf::unknown::UnknownFields)) -> bb80; // scope 2 at cita-jsonrpc/src/soliloquy.rs:59:9: 59:10
    }

    bb65: {
        drop((_9.2: protobuf::unknown::UnknownFields)) -> [return: bb70, unwind: bb80]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:59:9: 59:10
    }

    bb66: {
        _94 = const false;               // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
        _95 = const false;               // scope 2 at cita-jsonrpc/src/soliloquy.rs:65:9: 65:17
        _79 = move _4;                   // scope 2 at cita-jsonrpc/src/soliloquy.rs:65:9: 65:17
        _0 = <libproto::Response as Into<libproto::Message>>::into(move _79) -> [return: bb55, unwind: bb82]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:65:9: 65:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:65:18: 65:22
                                         // + literal: Const { ty: fn(libproto::Response) -> libproto::Message {<libproto::Response as Into<libproto::Message>>::into}, val: Value(<ZST>) }
    }

    bb67: {
        _98 = discriminant(((_5 as Ok).0: std::option::Option<libproto::Request>)); // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
        switchInt(move _98) -> [1: bb68, otherwise: bb66]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    }

    bb68: {
        switchInt(_94) -> [0: bb66, otherwise: bb69]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    }

    bb69: {
        drop(((((_5 as Ok).0: std::option::Option<libproto::Request>) as Some).0: libproto::Request)) -> [return: bb66, unwind: bb82]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    }

    bb70: {
        _99 = discriminant(_5);          // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
        switchInt(move _99) -> [0: bb67, otherwise: bb66]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    }

    bb71 (cleanup): {
        switchInt(_93) -> [0: bb76, otherwise: bb72]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    }

    bb72 (cleanup): {
        drop(((_41 as Ok).0: serde_json::Value)) -> bb76; // scope 4 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    }

    bb73 (cleanup): {
        drop(_41) -> bb76;               // scope 4 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    }

    bb74 (cleanup): {
        _100 = discriminant(_41);        // scope 4 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
        switchInt(move _100) -> [0: bb71, otherwise: bb73]; // scope 4 at cita-jsonrpc/src/soliloquy.rs:53:17: 53:18
    }

    bb75 (cleanup): {
        drop((_9.2: protobuf::unknown::UnknownFields)) -> bb80; // scope 2 at cita-jsonrpc/src/soliloquy.rs:59:9: 59:10
    }

    bb76 (cleanup): {
        drop((_9.1: std::option::Option<libproto::Request_oneof_req>)) -> bb75; // scope 2 at cita-jsonrpc/src/soliloquy.rs:59:9: 59:10
    }

    bb77 (cleanup): {
        _101 = discriminant(((_5 as Ok).0: std::option::Option<libproto::Request>)); // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
        switchInt(move _101) -> [1: bb78, otherwise: bb82]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    }

    bb78 (cleanup): {
        switchInt(_94) -> [0: bb82, otherwise: bb79]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    }

    bb79 (cleanup): {
        drop(((((_5 as Ok).0: std::option::Option<libproto::Request>) as Some).0: libproto::Request)) -> bb82; // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    }

    bb80 (cleanup): {
        _102 = discriminant(_5);         // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
        switchInt(move _102) -> [0: bb77, otherwise: bb82]; // scope 2 at cita-jsonrpc/src/soliloquy.rs:63:9: 63:10
    }

    bb81 (cleanup): {
        drop(_4) -> bb84;                // scope 1 at cita-jsonrpc/src/soliloquy.rs:66:5: 66:6
    }

    bb82 (cleanup): {
        switchInt(_95) -> [0: bb84, otherwise: bb81]; // scope 1 at cita-jsonrpc/src/soliloquy.rs:66:5: 66:6
    }

    bb83 (cleanup): {
        drop(_3) -> bb59;                // scope 0 at cita-jsonrpc/src/soliloquy.rs:66:5: 66:6
    }

    bb84 (cleanup): {
        switchInt(_96) -> [0: bb59, otherwise: bb83]; // scope 0 at cita-jsonrpc/src/soliloquy.rs:66:5: 66:6
    }

    bb85: {
        goto -> bb17;                    // scope 5 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb86: {
        goto -> bb36;                    // scope 8 at cita-jsonrpc/src/soliloquy.rs:51:25: 51:87
    }

    bb87: {
        goto -> bb41;                    // scope 4 at cita-jsonrpc/src/soliloquy.rs:56:21: 56:84
    }

    bb88: {
        goto -> bb51;                    // scope 10 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb89: {
        goto -> bb70;                    // scope 2 at cita-jsonrpc/src/soliloquy.rs:62:13: 62:76
    }
}

promoted[0] in soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle: &jsonrpc_types::ErrorCode = {
    let mut _0: &jsonrpc_types::ErrorCode; // return place in scope 0 at cita-jsonrpc/src/soliloquy.rs:56:44: 56:83
    let mut _1: jsonrpc_types::ErrorCode; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:56:44: 56:69

    bb0: {
        _1 = MethodNotFound;             // scope 0 at cita-jsonrpc/src/soliloquy.rs:56:44: 56:69
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/soliloquy.rs:56:44: 56:83
        return;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:56:44: 56:83
    }
}

promoted[1] in soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle: &jsonrpc_types::ErrorCode = {
    let mut _0: &jsonrpc_types::ErrorCode; // return place in scope 0 at cita-jsonrpc/src/soliloquy.rs:55:39: 55:71
    let mut _1: jsonrpc_types::ErrorCode; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:55:39: 55:64

    bb0: {
        _1 = MethodNotFound;             // scope 0 at cita-jsonrpc/src/soliloquy.rs:55:39: 55:64
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/soliloquy.rs:55:39: 55:71
        return;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:55:39: 55:71
    }
}

promoted[2] in soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle: &jsonrpc_types::ErrorCode = {
    let mut _0: &jsonrpc_types::ErrorCode; // return place in scope 0 at cita-jsonrpc/src/soliloquy.rs:51:48: 51:86
    let mut _1: jsonrpc_types::ErrorCode; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:51:48: 51:72

    bb0: {
        _1 = InternalError;              // scope 0 at cita-jsonrpc/src/soliloquy.rs:51:48: 51:72
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/soliloquy.rs:51:48: 51:86
        return;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:51:48: 51:86
    }
}

promoted[3] in soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle: &jsonrpc_types::ErrorCode = {
    let mut _0: &jsonrpc_types::ErrorCode; // return place in scope 0 at cita-jsonrpc/src/soliloquy.rs:50:43: 50:74
    let mut _1: jsonrpc_types::ErrorCode; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:50:43: 50:67

    bb0: {
        _1 = InternalError;              // scope 0 at cita-jsonrpc/src/soliloquy.rs:50:43: 50:67
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/soliloquy.rs:50:43: 50:74
        return;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:50:43: 50:74
    }
}

promoted[4] in soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:40:13: 40:61
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:40:13: 40:61

    bb0: {
        _3 = const "cita_jsonrpc::soliloquy"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::soliloquy"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/soliloquy.rs"; // scope 0 at cita-jsonrpc/src/soliloquy.rs:40:13: 40:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:40:13: 40:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/soliloquy.rs:40:13: 40:61
        _1 = (move _2, move _4, move _6, const 40_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[5] in soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/soliloquy.rs:40:20: 40:43
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/soliloquy.rs:40:20: 40:43

    bb0: {
        _1 = [const "getVersion enabled:"]; // scope 0 at cita-jsonrpc/src/soliloquy.rs:40:20: 40:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:40:20: 40:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/soliloquy.rs:40:20: 40:43
        return;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:40:20: 40:43
    }
}

promoted[6] in soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[7] in soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle: &jsonrpc_types::ErrorCode = {
    let mut _0: &jsonrpc_types::ErrorCode; // return place in scope 0 at cita-jsonrpc/src/soliloquy.rs:62:36: 62:75
    let mut _1: jsonrpc_types::ErrorCode; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:62:36: 62:61

    bb0: {
        _1 = InvalidRequest;             // scope 0 at cita-jsonrpc/src/soliloquy.rs:62:36: 62:61
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/soliloquy.rs:62:36: 62:75
        return;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:62:36: 62:75
    }
}

promoted[8] in soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle: &jsonrpc_types::ErrorCode = {
    let mut _0: &jsonrpc_types::ErrorCode; // return place in scope 0 at cita-jsonrpc/src/soliloquy.rs:61:31: 61:63
    let mut _1: jsonrpc_types::ErrorCode; // in scope 0 at cita-jsonrpc/src/soliloquy.rs:61:31: 61:56

    bb0: {
        _1 = InvalidRequest;             // scope 0 at cita-jsonrpc/src/soliloquy.rs:61:31: 61:56
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/soliloquy.rs:61:31: 61:63
        return;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:61:31: 61:63
    }
}

promoted[9] in soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:60:13: 60:45
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/soliloquy.rs:60:13: 60:45

    bb0: {
        _3 = const "cita_jsonrpc::soliloquy"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::soliloquy"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/soliloquy.rs"; // scope 0 at cita-jsonrpc/src/soliloquy.rs:60:13: 60:45
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:60:13: 60:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/soliloquy.rs:60:13: 60:45
        _1 = (move _2, move _4, move _6, const 60_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[10] in soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/soliloquy.rs:60:19: 60:44
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/soliloquy.rs:60:19: 60:44

    bb0: {
        _1 = [const "receive unexpected data"]; // scope 0 at cita-jsonrpc/src/soliloquy.rs:60:19: 60:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:60:19: 60:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/soliloquy.rs:60:19: 60:44
        return;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:60:19: 60:44
    }
}

promoted[11] in soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn soliloquy::<impl at cita-jsonrpc/src/soliloquy.rs:28:1: 28:15>::handle::{closure#0}(_1: [closure@cita-jsonrpc/src/soliloquy.rs:37:46: 37:55], _2: libproto::Message) -> std::option::Option<libproto::Request> {
    debug msg => _2;                     // in scope 0 at cita-jsonrpc/src/soliloquy.rs:37:47: 37:54
    let mut _0: std::option::Option<libproto::Request>; // return place in scope 0 at cita-jsonrpc/src/soliloquy.rs:37:56: 37:56
    let mut _3: &mut libproto::Message;  // in scope 0 at cita-jsonrpc/src/soliloquy.rs:37:56: 37:74

    bb0: {
        _3 = &mut _2;                    // scope 0 at cita-jsonrpc/src/soliloquy.rs:37:56: 37:74
        _0 = libproto::Message::take_request(move _3) -> [return: bb1, unwind: bb3]; // scope 0 at cita-jsonrpc/src/soliloquy.rs:37:56: 37:74
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/soliloquy.rs:37:60: 37:72
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Message) -> std::option::Option<libproto::Request> {libproto::Message::take_request}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at cita-jsonrpc/src/soliloquy.rs:37:73: 37:74
    }

    bb2: {
        return;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:37:74: 37:74
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at cita-jsonrpc/src/soliloquy.rs:37:73: 37:74
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/soliloquy.rs:37:46: 37:74
    }
}

fn ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:35:1: 35:15>::new(_1: Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>, _2: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, _3: usize) -> WsFactory {
    debug responses => _1;               // in scope 0 at cita-jsonrpc/src/ws_handler.rs:37:9: 37:18
    debug tx => _2;                      // in scope 0 at cita-jsonrpc/src/ws_handler.rs:38:9: 38:11
    debug thread_num => _3;              // in scope 0 at cita-jsonrpc/src/ws_handler.rs:39:9: 39:19
    let mut _0: ws_handler::WsFactory;   // return place in scope 0 at cita-jsonrpc/src/ws_handler.rs:40:10: 40:19
    let _4: usize;                       // in scope 0 at cita-jsonrpc/src/ws_handler.rs:41:13: 41:26
    let mut _6: std::string::String;     // in scope 0 at cita-jsonrpc/src/ws_handler.rs:46:49: 46:77
    let _7: &str;                        // in scope 0 at cita-jsonrpc/src/ws_handler.rs:46:49: 46:65
    let mut _8: usize;                   // in scope 0 at cita-jsonrpc/src/ws_handler.rs:46:79: 46:92
    let mut _9: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:48:13: 48:22
    let mut _10: threadpool::ThreadPool; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:49:13: 49:24
    let mut _11: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:50:13: 50:15
    scope 1 {
        debug thread_number => _4;       // in scope 1 at cita-jsonrpc/src/ws_handler.rs:41:13: 41:26
        let _5: threadpool::ThreadPool;  // in scope 1 at cita-jsonrpc/src/ws_handler.rs:46:13: 46:24
        scope 2 {
            debug thread_pool => _5;     // in scope 2 at cita-jsonrpc/src/ws_handler.rs:46:13: 46:24
        }
    }

    bb0: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:41:32: 41:47
    }

    bb1: {
        _4 = num_cpus::get() -> [return: bb9, unwind: bb6]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:42:13: 42:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:42:13: 42:26
                                         // + literal: Const { ty: fn() -> usize {num_cpus::get}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _3;                         // scope 0 at cita-jsonrpc/src/ws_handler.rs:44:13: 44:23
        goto -> bb3;                     // scope 0 at cita-jsonrpc/src/ws_handler.rs:41:29: 45:10
    }

    bb3: {
        _7 = const "ws_thread_pool";     // scope 1 at cita-jsonrpc/src/ws_handler.rs:46:49: 46:65
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:46:49: 46:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = <str as ToString>::to_string(_7) -> [return: bb4, unwind: bb6]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:46:49: 46:77
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:46:66: 46:75
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> std::string::String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = _4;                         // scope 1 at cita-jsonrpc/src/ws_handler.rs:46:79: 46:92
        _5 = threadpool::ThreadPool::with_name(move _6, move _8) -> [return: bb5, unwind: bb6]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:46:27: 46:93
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:46:27: 46:48
                                         // + literal: Const { ty: fn(std::string::String, usize) -> threadpool::ThreadPool {threadpool::ThreadPool::with_name}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = move _1;                    // scope 2 at cita-jsonrpc/src/ws_handler.rs:48:13: 48:22
        _10 = move _5;                   // scope 2 at cita-jsonrpc/src/ws_handler.rs:49:13: 49:24
        _11 = move _2;                   // scope 2 at cita-jsonrpc/src/ws_handler.rs:50:13: 50:15
        _0 = WsFactory { responses: move _9, thread_pool: move _10, tx: move _11 }; // scope 2 at cita-jsonrpc/src/ws_handler.rs:47:9: 51:10
        return;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:52:6: 52:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at cita-jsonrpc/src/ws_handler.rs:52:5: 52:6
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at cita-jsonrpc/src/ws_handler.rs:52:5: 52:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:36:5: 52:6
    }

    bb9: {
        goto -> bb3;                     // scope 0 at cita-jsonrpc/src/ws_handler.rs:42:13: 42:28
    }
}

fn ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:55:1: 55:27>::connection_made(_1: &mut WsFactory, _2: ws::Sender) -> WsHandler {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/ws_handler.rs:57:24: 57:33
    debug ws => _2;                      // in scope 0 at cita-jsonrpc/src/ws_handler.rs:57:35: 57:37
    let mut _0: ws_handler::WsHandler;   // return place in scope 0 at cita-jsonrpc/src/ws_handler.rs:57:54: 57:63
    let mut _3: ws::Sender;              // in scope 0 at cita-jsonrpc/src/ws_handler.rs:59:21: 59:23
    let mut _4: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:60:24: 60:51
    let _5: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:60:35: 60:50
    let mut _6: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:61:17: 61:32
    let mut _7: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:61:17: 61:32
    let mut _8: threadpool::ThreadPool;  // in scope 0 at cita-jsonrpc/src/ws_handler.rs:62:26: 62:50
    let mut _9: &threadpool::ThreadPool; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:62:26: 62:50

    bb0: {
        _3 = move _2;                    // scope 0 at cita-jsonrpc/src/ws_handler.rs:59:21: 59:23
        _5 = &((*_1).0: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 0 at cita-jsonrpc/src/ws_handler.rs:60:35: 60:50
        _4 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone(_5) -> [return: bb1, unwind: bb6]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:60:24: 60:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:60:24: 60:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).2: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // scope 0 at cita-jsonrpc/src/ws_handler.rs:61:17: 61:32
        _6 = <pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> as Clone>::clone(move _7) -> [return: bb2, unwind: bb5]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:61:17: 61:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:61:25: 61:30
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>) -> pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> {<pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &((*_1).1: threadpool::ThreadPool); // scope 0 at cita-jsonrpc/src/ws_handler.rs:62:26: 62:50
        _8 = <threadpool::ThreadPool as Clone>::clone(move _9) -> [return: bb3, unwind: bb4]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:62:26: 62:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:62:43: 62:48
                                         // + literal: Const { ty: for<'a> fn(&'a threadpool::ThreadPool) -> threadpool::ThreadPool {<threadpool::ThreadPool as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = WsHandler { responses: move _4, thread_pool: move _8, sender: move _3, tx: move _6 }; // scope 0 at cita-jsonrpc/src/ws_handler.rs:58:9: 63:10
        return;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:64:6: 64:6
    }

    bb4 (cleanup): {
        drop(_6) -> bb5;                 // scope 0 at cita-jsonrpc/src/ws_handler.rs:63:9: 63:10
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at cita-jsonrpc/src/ws_handler.rs:63:9: 63:10
    }

    bb6 (cleanup): {
        drop(_3) -> bb7;                 // scope 0 at cita-jsonrpc/src/ws_handler.rs:63:9: 63:10
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:57:5: 64:6
    }
}

fn ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:67:1: 67:27>::on_message(_1: &mut WsHandler, _2: ws::Message) -> Result<(), ws::Error> {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/ws_handler.rs:68:19: 68:28
    debug msg => _2;                     // in scope 0 at cita-jsonrpc/src/ws_handler.rs:68:30: 68:33
    let mut _0: std::result::Result<(), ws::Error>; // return place in scope 0 at cita-jsonrpc/src/ws_handler.rs:68:51: 68:65
    let _3: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _4: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _6: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _7: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _8: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _9: &log::LevelFilter;       // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _10: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _12: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _13: &[&str];                // in scope 0 at cita-jsonrpc/src/ws_handler.rs:69:16: 69:70
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:69:72: 69:75
    let _18: &ws::Message;               // in scope 0 at cita-jsonrpc/src/ws_handler.rs:69:72: 69:75
    let _19: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:70:13: 70:15
    let mut _20: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:70:18: 70:33
    let _22: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:71:35: 71:50
    let mut _24: &ws::Sender;            // in scope 0 at cita-jsonrpc/src/ws_handler.rs:72:22: 72:41
    let _25: ();                         // in scope 0 at cita-jsonrpc/src/ws_handler.rs:74:9: 99:11
    let mut _26: &threadpool::ThreadPool; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:74:9: 99:11
    let mut _27: [closure@cita-jsonrpc/src/ws_handler.rs:74:34: 74:41]; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:74:34: 99:10
    let mut _31: bool;                   // in scope 0 at cita-jsonrpc/src/ws_handler.rs:102:5: 102:6
    let mut _32: bool;                   // in scope 0 at cita-jsonrpc/src/ws_handler.rs:102:5: 102:6
    let mut _33: bool;                   // in scope 0 at cita-jsonrpc/src/ws_handler.rs:102:5: 102:6
    scope 1 {
        debug lvl => _3;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _28: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _29: &[&str; 2];         // in scope 1 at cita-jsonrpc/src/ws_handler.rs:69:16: 69:70
        let mut _30: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
    scope 2 {
        debug tx => _19;                 // in scope 2 at cita-jsonrpc/src/ws_handler.rs:70:13: 70:15
        let _21: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 2 at cita-jsonrpc/src/ws_handler.rs:71:13: 71:21
        scope 3 {
            debug response => _21;       // in scope 3 at cita-jsonrpc/src/ws_handler.rs:71:13: 71:21
            let _23: ws::Sender;         // in scope 3 at cita-jsonrpc/src/ws_handler.rs:72:13: 72:19
            scope 4 {
                debug sender => _23;     // in scope 4 at cita-jsonrpc/src/ws_handler.rs:72:13: 72:19
            }
        }
    }

    bb0: {
        _32 = const false;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _33 = const false;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _31 = const false;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _33 = const true;                // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _3 = log::Level::Trace;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _6 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _30 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(<WsHandler as ws::Handler>::on_message, [], Some(promoted[2])) }
        _5 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _6, _30) -> [return: bb4, unwind: bb21]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _8 = &_3;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _10 = log::max_level() -> [return: bb5, unwind: bb21]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb10, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _5) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _9 = &_10;                       // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _7 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _8, move _9) -> [return: bb6, unwind: bb21]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = move _7;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _29 = const _;                   // scope 1 at cita-jsonrpc/src/ws_handler.rs:69:16: 69:70
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:69:16: 69:70
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<WsHandler as ws::Handler>::on_message, [], Some(promoted[1])) }
        _13 = _29 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/ws_handler.rs:69:16: 69:70
        _18 = &_2;                       // scope 1 at cita-jsonrpc/src/ws_handler.rs:69:72: 69:75
        _17 = core::fmt::ArgumentV1::<'_>::new_display::<ws::Message>(_18) -> [return: bb8, unwind: bb21]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:69:72: 69:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:69:72: 69:75
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b ws::Message) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<ws::Message>}, val: Value(<ZST>) }
    }

    bb8: {
        _16 = [move _17];                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = &_16;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _14 = _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb9, unwind: bb21]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _28 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(<WsHandler as ws::Handler>::on_message, [], Some(promoted[0])) }
        _11 = log::__private_api_log(move _12, _3, _28) -> [return: bb22, unwind: bb21]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb10: {
        _20 = &((*_1).3: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // scope 0 at cita-jsonrpc/src/ws_handler.rs:70:18: 70:33
        _19 = <pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> as Clone>::clone(move _20) -> [return: bb11, unwind: bb21]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:70:18: 70:33
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:70:26: 70:31
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>) -> pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> {<pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb11: {
        _32 = const true;                // scope 0 at cita-jsonrpc/src/ws_handler.rs:70:32: 70:33
        _22 = &((*_1).0: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 2 at cita-jsonrpc/src/ws_handler.rs:71:35: 71:50
        _21 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone(_22) -> [return: bb12, unwind: bb19]; // scope 2 at cita-jsonrpc/src/ws_handler.rs:71:24: 71:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:71:24: 71:34
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb12: {
        _31 = const true;                // scope 2 at cita-jsonrpc/src/ws_handler.rs:71:50: 71:51
        _24 = &((*_1).2: ws::Sender);    // scope 3 at cita-jsonrpc/src/ws_handler.rs:72:22: 72:41
        _23 = <ws::Sender as Clone>::clone(move _24) -> [return: bb13, unwind: bb17]; // scope 3 at cita-jsonrpc/src/ws_handler.rs:72:22: 72:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:72:34: 72:39
                                         // + literal: Const { ty: for<'a> fn(&'a ws::Sender) -> ws::Sender {<ws::Sender as Clone>::clone}, val: Value(<ZST>) }
    }

    bb13: {
        _26 = &((*_1).1: threadpool::ThreadPool); // scope 4 at cita-jsonrpc/src/ws_handler.rs:74:9: 99:11
        _33 = const false;               // scope 4 at cita-jsonrpc/src/ws_handler.rs:74:34: 99:10
        _32 = const false;               // scope 4 at cita-jsonrpc/src/ws_handler.rs:74:34: 99:10
        _31 = const false;               // scope 4 at cita-jsonrpc/src/ws_handler.rs:74:34: 99:10
        _27 = [closure@cita-jsonrpc/src/ws_handler.rs:74:34: 74:41] { msg: move _2, tx: move _19, sender: move _23, response: move _21 }; // scope 4 at cita-jsonrpc/src/ws_handler.rs:74:34: 99:10
                                         // closure
                                         // + def_id: DefId(0:465 ~ cita_jsonrpc[a6db]::ws_handler::{impl#2}::on_message::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (ws::Message, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, ws::Sender, std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>),
                                         // ]
        _25 = threadpool::ThreadPool::execute::<[closure@cita-jsonrpc/src/ws_handler.rs:74:34: 74:41]>(move _26, move _27) -> [return: bb14, unwind: bb17]; // scope 4 at cita-jsonrpc/src/ws_handler.rs:74:9: 99:11
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:74:26: 74:33
                                         // + literal: Const { ty: for<'a> fn(&'a threadpool::ThreadPool, [closure@cita-jsonrpc/src/ws_handler.rs:74:34: 74:41]) {threadpool::ThreadPool::execute::<[closure@cita-jsonrpc/src/ws_handler.rs:74:34: 74:41]>}, val: Value(<ZST>) }
    }

    bb14: {
        _0 = Result::<(), ws::Error>::Ok(const ()); // scope 4 at cita-jsonrpc/src/ws_handler.rs:101:9: 101:15
        _31 = const false;               // scope 2 at cita-jsonrpc/src/ws_handler.rs:102:5: 102:6
        _32 = const false;               // scope 0 at cita-jsonrpc/src/ws_handler.rs:102:5: 102:6
        return;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:102:6: 102:6
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:68:5: 102:6
    }

    bb16 (cleanup): {
        drop(_21) -> bb19;               // scope 2 at cita-jsonrpc/src/ws_handler.rs:102:5: 102:6
    }

    bb17 (cleanup): {
        switchInt(_31) -> [0: bb19, otherwise: bb16]; // scope 2 at cita-jsonrpc/src/ws_handler.rs:102:5: 102:6
    }

    bb18 (cleanup): {
        drop(_19) -> bb21;               // scope 0 at cita-jsonrpc/src/ws_handler.rs:102:5: 102:6
    }

    bb19 (cleanup): {
        switchInt(_32) -> [0: bb21, otherwise: bb18]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:102:5: 102:6
    }

    bb20 (cleanup): {
        drop(_2) -> bb15;                // scope 0 at cita-jsonrpc/src/ws_handler.rs:102:5: 102:6
    }

    bb21 (cleanup): {
        switchInt(_33) -> [0: bb15, otherwise: bb20]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:102:5: 102:6
    }

    bb22: {
        goto -> bb10;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:67:1: 67:27>::on_message: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/ws_handler.rs:69:9: 69:76
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/ws_handler.rs:69:9: 69:76

    bb0: {
        _3 = const "cita_jsonrpc::ws_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::ws_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/ws_handler.rs"; // scope 0 at cita-jsonrpc/src/ws_handler.rs:69:9: 69:76
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:69:9: 69:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/ws_handler.rs:69:9: 69:76
        _1 = (move _2, move _4, move _6, const 69_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:67:1: 67:27>::on_message: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-jsonrpc/src/ws_handler.rs:69:16: 69:70
    let mut _1: [&str; 2];               // in scope 0 at cita-jsonrpc/src/ws_handler.rs:69:16: 69:70

    bb0: {
        _1 = [const "Server got message '", const "'  post thread_pool deal task "]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:69:16: 69:70
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:69:16: 69:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:69:16: 69:70
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/ws_handler.rs:69:16: 69:70
        return;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:69:16: 69:70
    }
}

promoted[2] in ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:67:1: 67:27>::on_message: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:67:1: 67:27>::on_message::{closure#0}(_1: [closure@cita-jsonrpc/src/ws_handler.rs:74:34: 74:41]) -> () {
    debug msg => (_1.0: ws::Message);    // in scope 0 at cita-jsonrpc/src/ws_handler.rs:68:30: 68:33
    debug tx => (_1.1: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:70:13: 70:15
    debug sender => (_1.2: ws::Sender);  // in scope 0 at cita-jsonrpc/src/ws_handler.rs:72:13: 72:19
    debug response => (_1.3: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:71:13: 71:21
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/ws_handler.rs:74:42: 74:42
    let mut _2: jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:75:17: 75:29
    let mut _3: std::result::Result<(), std::result::Result<(), ws::Error>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:77:21: 98:19
    let mut _4: std::result::Result<(), jsonrpc_types::Error>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:77:21: 92:19
    let mut _5: std::result::Result<jsonrpc_types::rpc_request::PartialRequest, jsonrpc_types::Error>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:77:21: 78:38
    let mut _6: std::result::Result<jsonrpc_types::rpc_request::PartialRequest, serde_json::Error>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:77:21: 77:86
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/ws_handler.rs:77:60: 77:85
    let _8: &str;                        // in scope 0 at cita-jsonrpc/src/ws_handler.rs:77:60: 77:85
    let _9: &std::string::String;        // in scope 0 at cita-jsonrpc/src/ws_handler.rs:77:60: 77:85
    let _10: std::string::String;        // in scope 0 at cita-jsonrpc/src/ws_handler.rs:77:61: 77:85
    let mut _11: std::result::Result<std::string::String, ws::Error>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:77:61: 77:76
    let mut _12: ws::Message;            // in scope 0 at cita-jsonrpc/src/ws_handler.rs:77:61: 77:64
    let mut _13: [closure@cita-jsonrpc/src/ws_handler.rs:79:27: 79:37]; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    let mut _14: &mut jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    let mut _15: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    let mut _16: &ws::Sender;            // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    let mut _17: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    let mut _18: [closure@cita-jsonrpc/src/ws_handler.rs:93:26: 93:31]; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:93:26: 98:18
    let mut _19: &ws::Sender;            // in scope 0 at cita-jsonrpc/src/ws_handler.rs:93:26: 98:18
    let mut _20: bool;                   // in scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    let mut _21: bool;                   // in scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    scope 1 {
        debug req_info => _2;            // in scope 1 at cita-jsonrpc/src/ws_handler.rs:75:17: 75:29
        scope 2 {
        }
    }

    bb0: {
        _21 = const false;               // scope 0 at cita-jsonrpc/src/ws_handler.rs:75:17: 75:29
        _20 = const false;               // scope 0 at cita-jsonrpc/src/ws_handler.rs:75:17: 75:29
        _21 = const true;                // scope 0 at cita-jsonrpc/src/ws_handler.rs:75:17: 75:29
        _2 = RequestInfo::null() -> [return: bb1, unwind: bb24]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:75:32: 75:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:75:32: 75:49
                                         // + literal: Const { ty: fn() -> RequestInfo {RequestInfo::null}, val: Value(<ZST>) }
    }

    bb1: {
        _20 = const true;                // scope 1 at cita-jsonrpc/src/ws_handler.rs:77:21: 98:19
        _21 = const false;               // scope 1 at cita-jsonrpc/src/ws_handler.rs:77:61: 77:64
        _12 = move (_1.0: ws::Message);  // scope 1 at cita-jsonrpc/src/ws_handler.rs:77:61: 77:64
        _11 = ws::Message::into_text(move _12) -> [return: bb2, unwind: bb19]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:77:61: 77:76
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:77:65: 77:74
                                         // + literal: Const { ty: fn(ws::Message) -> Result<std::string::String, ws::Error> {ws::Message::into_text}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = Result::<std::string::String, ws::Error>::unwrap(move _11) -> [return: bb3, unwind: bb19]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:77:61: 77:85
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:77:77: 77:83
                                         // + literal: Const { ty: fn(Result<std::string::String, ws::Error>) -> std::string::String {Result::<std::string::String, ws::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &_10;                       // scope 1 at cita-jsonrpc/src/ws_handler.rs:77:60: 77:85
        _8 = <std::string::String as Deref>::deref(_9) -> [return: bb4, unwind: bb11]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:77:60: 77:85
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:77:60: 77:85
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = _8;                         // scope 1 at cita-jsonrpc/src/ws_handler.rs:77:60: 77:85
        _6 = serde_json::from_str::<'_, PartialRequest>(move _7) -> [return: bb5, unwind: bb11]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:77:21: 77:86
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:77:21: 77:59
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> Result<PartialRequest, serde_json::Error> {serde_json::from_str::<'_, PartialRequest>}, val: Value(<ZST>) }
    }

    bb5: {
        _5 = Result::<PartialRequest, serde_json::Error>::map_err::<jsonrpc_types::Error, fn(serde_json::Error) -> jsonrpc_types::Error {<jsonrpc_types::Error as From<serde_json::Error>>::from}>(move _6, <jsonrpc_types::Error as From<serde_json::Error>>::from) -> [return: bb6, unwind: bb11]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:77:21: 78:38
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:78:18: 78:25
                                         // + literal: Const { ty: fn(Result<PartialRequest, serde_json::Error>, fn(serde_json::Error) -> jsonrpc_types::Error {<jsonrpc_types::Error as From<serde_json::Error>>::from}) -> Result<PartialRequest, jsonrpc_types::Error> {Result::<PartialRequest, serde_json::Error>::map_err::<jsonrpc_types::Error, fn(serde_json::Error) -> jsonrpc_types::Error {<jsonrpc_types::Error as From<serde_json::Error>>::from}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:78:26: 78:37
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(serde_json::Error) -> jsonrpc_types::Error {<jsonrpc_types::Error as From<serde_json::Error>>::from}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = &mut _2;                   // scope 1 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
        _15 = &(_1.1: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // scope 1 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
        _16 = &(_1.2: ws::Sender);       // scope 1 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
        _17 = &(_1.3: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 1 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
        _13 = [closure@cita-jsonrpc/src/ws_handler.rs:79:27: 79:37] { req_info: move _14, tx: move _15, sender: move _16, response: move _17 }; // scope 1 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
                                         // closure
                                         // + def_id: DefId(0:466 ~ cita_jsonrpc[a6db]::ws_handler::{impl#2}::on_message::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((jsonrpc_types::rpc_request::PartialRequest,)) -> std::result::Result<(), jsonrpc_types::Error>,
                                         //     (&mut jsonrpc_types::rpc_request::RequestInfo, &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, &ws::Sender, &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>),
                                         // ]
        _4 = Result::<PartialRequest, jsonrpc_types::Error>::and_then::<(), [closure@cita-jsonrpc/src/ws_handler.rs:79:27: 79:37]>(move _5, move _13) -> [return: bb7, unwind: bb11]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:77:21: 92:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:79:18: 79:26
                                         // + literal: Const { ty: fn(Result<PartialRequest, jsonrpc_types::Error>, [closure@cita-jsonrpc/src/ws_handler.rs:79:27: 79:37]) -> Result<(), jsonrpc_types::Error> {Result::<PartialRequest, jsonrpc_types::Error>::and_then::<(), [closure@cita-jsonrpc/src/ws_handler.rs:79:27: 79:37]>}, val: Value(<ZST>) }
    }

    bb7: {
        _19 = &(_1.2: ws::Sender);       // scope 1 at cita-jsonrpc/src/ws_handler.rs:93:26: 98:18
        _20 = const false;               // scope 1 at cita-jsonrpc/src/ws_handler.rs:93:26: 98:18
        _18 = [closure@cita-jsonrpc/src/ws_handler.rs:93:26: 93:31] { sender: move _19, req_info: move _2 }; // scope 1 at cita-jsonrpc/src/ws_handler.rs:93:26: 98:18
                                         // closure
                                         // + def_id: DefId(0:468 ~ cita_jsonrpc[a6db]::ws_handler::{impl#2}::on_message::{closure#0}::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn((jsonrpc_types::Error,)) -> std::result::Result<(), ws::Error>,
                                         //     (&ws::Sender, jsonrpc_types::rpc_request::RequestInfo),
                                         // ]
        _3 = Result::<(), jsonrpc_types::Error>::map_err::<Result<(), ws::Error>, [closure@cita-jsonrpc/src/ws_handler.rs:93:26: 93:31]>(move _4, move _18) -> [return: bb8, unwind: bb11]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:77:21: 98:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:93:18: 93:25
                                         // + literal: Const { ty: fn(Result<(), jsonrpc_types::Error>, [closure@cita-jsonrpc/src/ws_handler.rs:93:26: 93:31]) -> Result<(), Result<(), ws::Error>> {Result::<(), jsonrpc_types::Error>::map_err::<Result<(), ws::Error>, [closure@cita-jsonrpc/src/ws_handler.rs:93:26: 93:31]>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_3) -> [return: bb9, unwind: bb11]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:98:19: 98:20
    }

    bb9: {
        drop(_10) -> [return: bb10, unwind: bb19]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:98:19: 98:20
    }

    bb10: {
        _20 = const false;               // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
        drop((_1.1: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>)) -> [return: bb17, unwind: bb15]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    }

    bb11 (cleanup): {
        drop(_10) -> bb19;               // scope 1 at cita-jsonrpc/src/ws_handler.rs:98:19: 98:20
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:74:34: 99:10
    }

    bb13: {
        return;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:10: 99:10
    }

    bb14 (cleanup): {
        drop((_1.3: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>)) -> bb12; // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    }

    bb15 (cleanup): {
        drop((_1.2: ws::Sender)) -> bb14; // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    }

    bb16: {
        drop((_1.3: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>)) -> bb13; // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    }

    bb17: {
        drop((_1.2: ws::Sender)) -> [return: bb16, unwind: bb14]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    }

    bb18 (cleanup): {
        drop(_2) -> bb24;                // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    }

    bb19 (cleanup): {
        switchInt(_20) -> [0: bb24, otherwise: bb18]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    }

    bb20 (cleanup): {
        drop((_1.3: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>)) -> bb12; // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    }

    bb21 (cleanup): {
        drop((_1.2: ws::Sender)) -> bb20; // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    }

    bb22 (cleanup): {
        drop((_1.1: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>)) -> bb21; // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    }

    bb23 (cleanup): {
        drop((_1.0: ws::Message)) -> bb22; // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    }

    bb24 (cleanup): {
        switchInt(_21) -> [0: bb22, otherwise: bb23]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:99:9: 99:10
    }
}

fn ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:67:1: 67:27>::on_message::{closure#0}::{closure#0}(_1: [closure@cita-jsonrpc/src/ws_handler.rs:79:27: 79:37], _2: PartialRequest) -> Result<(), jsonrpc_types::Error> {
    debug part_req => _2;                // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:28: 79:36
    debug req_info => (*(_1.0: &mut jsonrpc_types::rpc_request::RequestInfo)); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:75:21: 75:29
    debug tx => (*(_1.1: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>)); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:70:13: 70:15
    debug sender => (*(_1.2: &ws::Sender)); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:72:13: 72:19
    debug response => (*(_1.3: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>)); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:71:13: 71:21
    let mut _0: std::result::Result<(), jsonrpc_types::Error>; // return place in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:38: 79:38
    let mut _3: jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:80:32: 80:51
    let mut _4: &jsonrpc_types::rpc_request::PartialRequest; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:80:32: 80:51
    let mut _5: std::result::Result<(jsonrpc_types::rpc_request::Request, libproto::Request), jsonrpc_types::Error>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:81:21: 81:55
    let mut _6: jsonrpc_types::rpc_request::PartialRequest; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:81:21: 81:29
    let mut _7: [closure@cita-jsonrpc/src/ws_handler.rs:81:60: 81:77]; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
    let mut _8: &jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
    let mut _9: &mut jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    let mut _10: &mut jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    let mut _11: &mut jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    let mut _12: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    let mut _13: &mut jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    let mut _14: &ws::Sender;            // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    let mut _15: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    let mut _16: bool;                   // in scope 0 at cita-jsonrpc/src/ws_handler.rs:92:17: 92:18

    bb0: {
        _16 = const false;               // scope 0 at cita-jsonrpc/src/ws_handler.rs:80:32: 80:51
        _16 = const true;                // scope 0 at cita-jsonrpc/src/ws_handler.rs:80:32: 80:51
        _4 = &_2;                        // scope 0 at cita-jsonrpc/src/ws_handler.rs:80:32: 80:51
        _3 = PartialRequest::get_info(move _4) -> [return: bb1, unwind: bb8]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:80:32: 80:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:80:41: 80:49
                                         // + literal: Const { ty: for<'a> fn(&'a PartialRequest) -> RequestInfo {PartialRequest::get_info}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = deref_copy (_1.0: &mut jsonrpc_types::rpc_request::RequestInfo); // scope 0 at cita-jsonrpc/src/ws_handler.rs:80:21: 80:29
        drop((*_9)) -> [return: bb2, unwind: bb3]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:80:21: 80:29
    }

    bb2: {
        _10 = deref_copy (_1.0: &mut jsonrpc_types::rpc_request::RequestInfo); // scope 0 at cita-jsonrpc/src/ws_handler.rs:80:21: 80:29
        (*_10) = move _3;                // scope 0 at cita-jsonrpc/src/ws_handler.rs:80:21: 80:29
        _16 = const false;               // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:21: 81:29
        _6 = move _2;                    // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:21: 81:29
        _5 = <PartialRequest as CompleteInto>::complete_and_into_proto(move _6) -> [return: bb4, unwind: bb8]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:21: 81:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:81:30: 81:53
                                         // + literal: Const { ty: fn(PartialRequest) -> Result<(jsonrpc_types::rpc_request::Request, libproto::Request), jsonrpc_types::Error> {<PartialRequest as CompleteInto>::complete_and_into_proto}, val: Value(<ZST>) }
    }

    bb3 (cleanup): {
        _11 = deref_copy (_1.0: &mut jsonrpc_types::rpc_request::RequestInfo); // scope 0 at cita-jsonrpc/src/ws_handler.rs:80:21: 80:29
        (*_11) = move _3;                // scope 0 at cita-jsonrpc/src/ws_handler.rs:80:21: 80:29
        goto -> bb8;                     // scope 0 at cita-jsonrpc/src/ws_handler.rs:80:50: 80:51
    }

    bb4: {
        _12 = deref_copy (_1.1: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
        _13 = deref_copy (_1.0: &mut jsonrpc_types::rpc_request::RequestInfo); // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
        _8 = &(*_13);                    // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
        _14 = deref_copy (_1.2: &ws::Sender); // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
        _15 = deref_copy (_1.3: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
        _7 = [closure@cita-jsonrpc/src/ws_handler.rs:81:60: 81:77] { tx: _12, req_info: move _8, sender: _14, response: _15 }; // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
                                         // closure
                                         // + def_id: DefId(0:467 ~ cita_jsonrpc[a6db]::ws_handler::{impl#2}::on_message::{closure#0}::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(((jsonrpc_types::rpc_request::Request, libproto::Request),)),
                                         //     (&pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, &jsonrpc_types::rpc_request::RequestInfo, &ws::Sender, &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>),
                                         // ]
        _0 = Result::<(jsonrpc_types::rpc_request::Request, libproto::Request), jsonrpc_types::Error>::map::<(), [closure@cita-jsonrpc/src/ws_handler.rs:81:60: 81:77]>(move _5, move _7) -> [return: bb5, unwind: bb8]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:21: 91:23
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:81:56: 81:59
                                         // + literal: Const { ty: fn(Result<(jsonrpc_types::rpc_request::Request, libproto::Request), jsonrpc_types::Error>, [closure@cita-jsonrpc/src/ws_handler.rs:81:60: 81:77]) -> Result<(), jsonrpc_types::Error> {Result::<(jsonrpc_types::rpc_request::Request, libproto::Request), jsonrpc_types::Error>::map::<(), [closure@cita-jsonrpc/src/ws_handler.rs:81:60: 81:77]>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:92:18: 92:18
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:79:27: 92:18
    }

    bb7 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at cita-jsonrpc/src/ws_handler.rs:92:17: 92:18
    }

    bb8 (cleanup): {
        switchInt(_16) -> [0: bb6, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:92:17: 92:18
    }
}

fn ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:67:1: 67:27>::on_message::{closure#0}::{closure#0}::{closure#0}(_1: [closure@cita-jsonrpc/src/ws_handler.rs:81:60: 81:77], _2: (jsonrpc_types::rpc_request::Request, libproto::Request)) -> () {
    debug tx => (*(_1.0: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>)); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:70:13: 70:15
    debug req_info => (*(_1.1: &jsonrpc_types::rpc_request::RequestInfo)); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:75:21: 75:29
    debug sender => (*(_1.2: &ws::Sender)); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:72:13: 72:19
    debug response => (*(_1.3: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>)); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:71:13: 71:21
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/ws_handler.rs:81:78: 81:78
    let _3: jsonrpc_types::rpc_request::Request; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:81:62: 81:70
    let _4: libproto::Request;           // in scope 0 at cita-jsonrpc/src/ws_handler.rs:81:72: 81:75
    let mut _6: &std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/ws_handler.rs:82:42: 82:64
    let _8: &&str;                       // in scope 0 at cita-jsonrpc/src/ws_handler.rs:83:50: 83:72
    let _9: &str;                        // in scope 0 at cita-jsonrpc/src/ws_handler.rs:83:51: 83:72
    let mut _10: &jsonrpc_types::rpc_request::Request; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:83:51: 83:72
    let mut _11: std::result::Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, libproto::Request)>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:84:33: 84:54
    let mut _12: (std::string::String, libproto::Request); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:84:41: 84:53
    let mut _13: std::string::String;    // in scope 0 at cita-jsonrpc/src/ws_handler.rs:84:42: 84:47
    let mut _14: libproto::Request;      // in scope 0 at cita-jsonrpc/src/ws_handler.rs:84:49: 84:52
    let mut _16: jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:85:38: 85:54
    let mut _17: ws::Sender;             // in scope 0 at cita-jsonrpc/src/ws_handler.rs:85:56: 85:70
    let _18: std::option::Option<helper::TransferType>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:87:29: 89:84
    let mut _19: &mut std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:87:29: 89:84
    let mut _20: &mut std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:87:29: 89:84
    let mut _21: &mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:87:29: 89:84
    let mut _22: lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:87:29: 88:40
    let mut _23: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:87:29: 88:40
    let _24: &lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:87:29: 88:40
    let mut _25: std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/ws_handler.rs:89:41: 89:51
    let mut _26: helper::TransferType;   // in scope 0 at cita-jsonrpc/src/ws_handler.rs:89:53: 89:83
    let mut _27: (jsonrpc_types::rpc_request::RequestInfo, ws::Sender); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:89:77: 89:82
    let mut _28: &str;                   // in scope 0 at cita-jsonrpc/src/ws_handler.rs:83:50: 83:72
    let mut _29: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
    let mut _30: &jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
    let mut _31: &ws::Sender;            // in scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
    let mut _32: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
    let mut _33: bool;                   // in scope 0 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
    let mut _34: bool;                   // in scope 0 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
    let mut _35: bool;                   // in scope 0 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
    scope 1 {
        debug full_req => _3;            // in scope 1 at cita-jsonrpc/src/ws_handler.rs:81:62: 81:70
        debug req => _4;                 // in scope 1 at cita-jsonrpc/src/ws_handler.rs:81:72: 81:75
        let _5: std::vec::Vec<u8>;       // in scope 1 at cita-jsonrpc/src/ws_handler.rs:82:29: 82:39
        scope 2 {
            debug request_id => _5;      // in scope 2 at cita-jsonrpc/src/ws_handler.rs:82:29: 82:39
            let _7: std::string::String; // in scope 2 at cita-jsonrpc/src/ws_handler.rs:83:29: 83:34
            scope 3 {
                debug topic => _7;       // in scope 3 at cita-jsonrpc/src/ws_handler.rs:83:29: 83:34
                scope 4 {
                    let _15: (jsonrpc_types::rpc_request::RequestInfo, ws::Sender); // in scope 4 at cita-jsonrpc/src/ws_handler.rs:85:29: 85:34
                    scope 5 {
                        debug value => _15; // in scope 5 at cita-jsonrpc/src/ws_handler.rs:85:29: 85:34
                    }
                }
            }
        }
    }

    bb0: {
        _35 = const false;               // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:62: 81:70
        _33 = const false;               // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:62: 81:70
        _34 = const false;               // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:62: 81:70
        _3 = move (_2.0: jsonrpc_types::rpc_request::Request); // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:62: 81:70
        _35 = const true;                // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:72: 81:75
        _4 = move (_2.1: libproto::Request); // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:72: 81:75
        _6 = &(_4.0: std::vec::Vec<u8>); // scope 1 at cita-jsonrpc/src/ws_handler.rs:82:42: 82:64
        _5 = <Vec<u8> as Clone>::clone(move _6) -> [return: bb1, unwind: bb24]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:82:42: 82:64
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:82:57: 82:62
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> Vec<u8> {<Vec<u8> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _34 = const true;                // scope 1 at cita-jsonrpc/src/ws_handler.rs:82:63: 82:64
        _10 = &_3;                       // scope 2 at cita-jsonrpc/src/ws_handler.rs:83:51: 83:72
        _9 = jsonrpc_types::rpc_request::Request::get_method(move _10) -> [return: bb2, unwind: bb22]; // scope 2 at cita-jsonrpc/src/ws_handler.rs:83:51: 83:72
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:83:60: 83:70
                                         // + literal: Const { ty: for<'a> fn(&'a jsonrpc_types::rpc_request::Request) -> &'a str {jsonrpc_types::rpc_request::Request::get_method}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_9;                        // scope 2 at cita-jsonrpc/src/ws_handler.rs:83:50: 83:72
        _28 = deref_copy (*_8);          // scope 2 at cita-jsonrpc/src/ws_handler.rs:83:50: 83:72
        _7 = select_topic(_28) -> [return: bb3, unwind: bb22]; // scope 2 at cita-jsonrpc/src/ws_handler.rs:83:37: 83:73
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:83:37: 83:49
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> std::string::String {select_topic}, val: Value(<ZST>) }
    }

    bb3: {
        _29 = deref_copy (_1.0: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // scope 3 at cita-jsonrpc/src/ws_handler.rs:84:33: 84:54
        _13 = move _7;                   // scope 3 at cita-jsonrpc/src/ws_handler.rs:84:42: 84:47
        _35 = const false;               // scope 3 at cita-jsonrpc/src/ws_handler.rs:84:49: 84:52
        _14 = move _4;                   // scope 3 at cita-jsonrpc/src/ws_handler.rs:84:49: 84:52
        _12 = (move _13, move _14);      // scope 3 at cita-jsonrpc/src/ws_handler.rs:84:41: 84:53
        _11 = pubsub::crossbeam_channel::Sender::<(std::string::String, libproto::Request)>::send(_29, move _12) -> [return: bb4, unwind: bb22]; // scope 3 at cita-jsonrpc/src/ws_handler.rs:84:33: 84:54
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:84:36: 84:40
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, (std::string::String, libproto::Request)) -> Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, libproto::Request)>> {pubsub::crossbeam_channel::Sender::<(std::string::String, libproto::Request)>::send}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_11) -> [return: bb5, unwind: bb22]; // scope 3 at cita-jsonrpc/src/ws_handler.rs:84:54: 84:55
    }

    bb5: {
        _30 = deref_copy (_1.1: &jsonrpc_types::rpc_request::RequestInfo); // scope 4 at cita-jsonrpc/src/ws_handler.rs:85:38: 85:54
        _16 = <RequestInfo as Clone>::clone(_30) -> [return: bb6, unwind: bb22]; // scope 4 at cita-jsonrpc/src/ws_handler.rs:85:38: 85:54
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:85:47: 85:52
                                         // + literal: Const { ty: for<'a> fn(&'a RequestInfo) -> RequestInfo {<RequestInfo as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _31 = deref_copy (_1.2: &ws::Sender); // scope 4 at cita-jsonrpc/src/ws_handler.rs:85:56: 85:70
        _17 = <ws::Sender as Clone>::clone(_31) -> [return: bb7, unwind: bb16]; // scope 4 at cita-jsonrpc/src/ws_handler.rs:85:56: 85:70
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:85:63: 85:68
                                         // + literal: Const { ty: for<'a> fn(&'a ws::Sender) -> ws::Sender {<ws::Sender as Clone>::clone}, val: Value(<ZST>) }
    }

    bb7: {
        _33 = const true;                // scope 4 at cita-jsonrpc/src/ws_handler.rs:85:37: 85:71
        _15 = (move _16, move _17);      // scope 4 at cita-jsonrpc/src/ws_handler.rs:85:37: 85:71
        _32 = deref_copy (_1.3: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 5 at cita-jsonrpc/src/ws_handler.rs:87:29: 88:40
        _24 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Deref>::deref(_32) -> [return: bb8, unwind: bb20]; // scope 5 at cita-jsonrpc/src/ws_handler.rs:87:29: 88:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:87:29: 88:40
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> &'a <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Deref>::Target {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _23 = _24;                       // scope 5 at cita-jsonrpc/src/ws_handler.rs:87:29: 88:40
        _22 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>::lock(move _23) -> [return: bb9, unwind: bb20]; // scope 5 at cita-jsonrpc/src/ws_handler.rs:87:29: 88:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:88:34: 88:38
                                         // + literal: Const { ty: for<'a> fn(&'a lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>) -> lock_api::mutex::MutexGuard<'a, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>::lock}, val: Value(<ZST>) }
    }

    bb9: {
        _21 = &mut _22;                  // scope 5 at cita-jsonrpc/src/ws_handler.rs:87:29: 89:84
        _20 = <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> as DerefMut>::deref_mut(move _21) -> [return: bb10, unwind: bb15]; // scope 5 at cita-jsonrpc/src/ws_handler.rs:87:29: 89:84
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:87:29: 89:84
                                         // + literal: Const { ty: for<'a> fn(&'a mut lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>) -> &'a mut <lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> as Deref>::Target {<lock_api::mutex::MutexGuard<'_, parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb10: {
        _19 = _20;                       // scope 5 at cita-jsonrpc/src/ws_handler.rs:87:29: 89:84
        _34 = const false;               // scope 5 at cita-jsonrpc/src/ws_handler.rs:89:41: 89:51
        _25 = move _5;                   // scope 5 at cita-jsonrpc/src/ws_handler.rs:89:41: 89:51
        _33 = const false;               // scope 5 at cita-jsonrpc/src/ws_handler.rs:89:77: 89:82
        _27 = move _15;                  // scope 5 at cita-jsonrpc/src/ws_handler.rs:89:77: 89:82
        _26 = TransferType::WEBSOCKET(move _27); // scope 5 at cita-jsonrpc/src/ws_handler.rs:89:53: 89:83
        _18 = HashMap::<Vec<u8>, TransferType>::insert(move _19, move _25, move _26) -> [return: bb11, unwind: bb15]; // scope 5 at cita-jsonrpc/src/ws_handler.rs:87:29: 89:84
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:89:34: 89:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<Vec<u8>, TransferType>, Vec<u8>, TransferType) -> std::option::Option<TransferType> {HashMap::<Vec<u8>, TransferType>::insert}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_18) -> [return: bb12, unwind: bb15]; // scope 5 at cita-jsonrpc/src/ws_handler.rs:89:84: 89:85
    }

    bb12: {
        drop(_22) -> [return: bb13, unwind: bb20]; // scope 5 at cita-jsonrpc/src/ws_handler.rs:89:84: 89:85
    }

    bb13: {
        _33 = const false;               // scope 4 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
        _34 = const false;               // scope 1 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
        _35 = const false;               // scope 0 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
        drop(_3) -> bb14;                // scope 0 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
    }

    bb14: {
        return;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:91:22: 91:22
    }

    bb15 (cleanup): {
        drop(_22) -> bb20;               // scope 5 at cita-jsonrpc/src/ws_handler.rs:89:84: 89:85
    }

    bb16 (cleanup): {
        drop(_16) -> bb22;               // scope 4 at cita-jsonrpc/src/ws_handler.rs:85:70: 85:71
    }

    bb17 (cleanup): {
        drop(_3) -> bb18;                // scope 0 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:81:60: 91:22
    }

    bb19 (cleanup): {
        drop(_15) -> bb22;               // scope 4 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
    }

    bb20 (cleanup): {
        switchInt(_33) -> [0: bb22, otherwise: bb19]; // scope 4 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
    }

    bb21 (cleanup): {
        drop(_5) -> bb24;                // scope 1 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
    }

    bb22 (cleanup): {
        switchInt(_34) -> [0: bb24, otherwise: bb21]; // scope 1 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
    }

    bb23 (cleanup): {
        drop(_4) -> bb17;                // scope 0 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
    }

    bb24 (cleanup): {
        switchInt(_35) -> [0: bb17, otherwise: bb23]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:91:21: 91:22
    }
}

fn ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:67:1: 67:27>::on_message::{closure#0}::{closure#1}(_1: [closure@cita-jsonrpc/src/ws_handler.rs:93:26: 93:31], _2: jsonrpc_types::Error) -> Result<(), ws::Error> {
    debug err => _2;                     // in scope 0 at cita-jsonrpc/src/ws_handler.rs:93:27: 93:30
    debug sender => (*(_1.0: &ws::Sender)); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:72:13: 72:19
    debug req_info => (_1.1: jsonrpc_types::rpc_request::RequestInfo); // in scope 0 at cita-jsonrpc/src/ws_handler.rs:75:21: 75:29
    let mut _0: std::result::Result<(), ws::Error>; // return place in scope 0 at cita-jsonrpc/src/ws_handler.rs:93:32: 93:32
    let mut _3: std::string::String;     // in scope 0 at cita-jsonrpc/src/ws_handler.rs:96:25: 96:97
    let mut _4: std::result::Result<std::string::String, serde_json::Error>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:96:25: 96:88
    let _5: &jsonrpc_types::rpc_response::RpcFailure; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:96:47: 96:87
    let _6: jsonrpc_types::rpc_response::RpcFailure; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:96:48: 96:87
    let mut _7: jsonrpc_types::rpc_request::RequestInfo; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:96:73: 96:81
    let mut _8: &ws::Sender;             // in scope 0 at cita-jsonrpc/src/ws_handler.rs:93:26: 98:18

    bb0: {
        _8 = deref_copy (_1.0: &ws::Sender); // scope 0 at cita-jsonrpc/src/ws_handler.rs:95:21: 97:22
        _7 = move (_1.1: jsonrpc_types::rpc_request::RequestInfo); // scope 0 at cita-jsonrpc/src/ws_handler.rs:96:73: 96:81
        _6 = RpcFailure::from_options(move _7, move _2) -> bb1; // scope 0 at cita-jsonrpc/src/ws_handler.rs:96:48: 96:87
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:96:48: 96:72
                                         // + literal: Const { ty: fn(RequestInfo, jsonrpc_types::Error) -> RpcFailure {RpcFailure::from_options}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 0 at cita-jsonrpc/src/ws_handler.rs:96:47: 96:87
        _4 = serde_json::to_string::<RpcFailure>(_5) -> [return: bb2, unwind: bb6]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:96:25: 96:88
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:96:25: 96:46
                                         // + literal: Const { ty: for<'a> fn(&'a RpcFailure) -> Result<std::string::String, serde_json::Error> {serde_json::to_string::<RpcFailure>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Result::<std::string::String, serde_json::Error>::unwrap(move _4) -> [return: bb3, unwind: bb6]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:96:25: 96:97
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:96:89: 96:95
                                         // + literal: Const { ty: fn(Result<std::string::String, serde_json::Error>) -> std::string::String {Result::<std::string::String, serde_json::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = ws::Sender::send::<std::string::String>(_8, move _3) -> [return: bb4, unwind: bb6]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:95:21: 97:22
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:95:28: 95:32
                                         // + literal: Const { ty: for<'a> fn(&'a ws::Sender, std::string::String) -> Result<(), ws::Error> {ws::Sender::send::<std::string::String>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_6) -> bb5;                 // scope 0 at cita-jsonrpc/src/ws_handler.rs:98:17: 98:18
    }

    bb5: {
        return;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:98:18: 98:18
    }

    bb6 (cleanup): {
        drop(_6) -> bb7;                 // scope 0 at cita-jsonrpc/src/ws_handler.rs:98:17: 98:18
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:93:26: 98:18
    }
}

fn ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:67:1: 67:27>::on_close(_1: &mut WsHandler, _2: CloseCode, _3: &str) -> () {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/ws_handler.rs:104:17: 104:26
    debug code => _2;                    // in scope 0 at cita-jsonrpc/src/ws_handler.rs:104:28: 104:32
    debug reason => _3;                  // in scope 0 at cita-jsonrpc/src/ws_handler.rs:104:45: 104:51
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/ws_handler.rs:104:59: 104:59
    let _4: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _7: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _8: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _9: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _10: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _12: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _14: &[&str];                // in scope 0 at cita-jsonrpc/src/ws_handler.rs:106:13: 106:55
    let mut _15: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _17: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:107:13: 107:17
    let _19: &ws::CloseCode;             // in scope 0 at cita-jsonrpc/src/ws_handler.rs:107:13: 107:17
    let mut _20: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:108:13: 108:19
    let _21: &&str;                      // in scope 0 at cita-jsonrpc/src/ws_handler.rs:108:13: 108:19
    let mut _22: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:109:13: 109:34
    let _23: &usize;                     // in scope 0 at cita-jsonrpc/src/ws_handler.rs:109:13: 109:34
    let _24: ws::util::Token;            // in scope 0 at cita-jsonrpc/src/ws_handler.rs:109:13: 109:32
    let mut _25: &ws::Sender;            // in scope 0 at cita-jsonrpc/src/ws_handler.rs:109:13: 109:32
    scope 1 {
        debug lvl => _4;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _26: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _27: &[&str; 3];         // in scope 1 at cita-jsonrpc/src/ws_handler.rs:106:13: 106:55
        let mut _28: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _4 = log::Level::Error;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _7 = &_4;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _28 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(<WsHandler as ws::Handler>::on_close, [], Some(promoted[2])) }
        _6 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _7, _28) -> bb4; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _9 = &_4;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _11 = log::max_level() -> bb5;   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _5) -> [0: bb13, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _6) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _10 = &_11;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _8 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _9, move _10) -> bb6; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = move _8;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _27 = const _;                   // scope 1 at cita-jsonrpc/src/ws_handler.rs:106:13: 106:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:106:13: 106:55
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(<WsHandler as ws::Handler>::on_close, [], Some(promoted[1])) }
        _14 = _27 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/ws_handler.rs:106:13: 106:55
        _19 = &_2;                       // scope 1 at cita-jsonrpc/src/ws_handler.rs:107:13: 107:17
        _18 = core::fmt::ArgumentV1::<'_>::new_debug::<CloseCode>(_19) -> bb8; // scope 1 at cita-jsonrpc/src/ws_handler.rs:107:13: 107:17
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:107:13: 107:17
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b CloseCode) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<CloseCode>}, val: Value(<ZST>) }
    }

    bb8: {
        _21 = &_3;                       // scope 1 at cita-jsonrpc/src/ws_handler.rs:108:13: 108:19
        _20 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_21) -> bb9; // scope 1 at cita-jsonrpc/src/ws_handler.rs:108:13: 108:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:108:13: 108:19
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb9: {
        _25 = &((*_1).2: ws::Sender);    // scope 1 at cita-jsonrpc/src/ws_handler.rs:109:13: 109:32
        _24 = ws::Sender::token(move _25) -> bb10; // scope 1 at cita-jsonrpc/src/ws_handler.rs:109:13: 109:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:109:25: 109:30
                                         // + literal: Const { ty: for<'a> fn(&'a ws::Sender) -> Token {ws::Sender::token}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = &(_24.0: usize);           // scope 1 at cita-jsonrpc/src/ws_handler.rs:109:13: 109:34
        _22 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(_23) -> bb11; // scope 1 at cita-jsonrpc/src/ws_handler.rs:109:13: 109:34
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:109:13: 109:34
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb11: {
        _17 = [move _18, move _20, move _22]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _16 = &_17;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = _16 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> bb12; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb12: {
        _26 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(<WsHandler as ws::Handler>::on_close, [], Some(promoted[0])) }
        _12 = log::__private_api_log(move _13, _4, _26) -> bb13; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb13: {
        return;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:111:6: 111:6
    }
}

promoted[0] in ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:67:1: 67:27>::on_close: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/ws_handler.rs:105:9: 110:10
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/ws_handler.rs:105:9: 110:10

    bb0: {
        _3 = const "cita_jsonrpc::ws_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc::ws_handler"; // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/ws_handler.rs"; // scope 0 at cita-jsonrpc/src/ws_handler.rs:105:9: 110:10
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:105:9: 110:10
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/ws_handler.rs:105:9: 110:10
        _1 = (move _2, move _4, move _6, const 105_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:67:1: 67:27>::on_close: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at cita-jsonrpc/src/ws_handler.rs:106:13: 106:55
    let mut _1: [&str; 3];               // in scope 0 at cita-jsonrpc/src/ws_handler.rs:106:13: 106:55

    bb0: {
        _1 = [const "WebSocket closing for (", const ") ", const " token "]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:106:13: 106:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:106:13: 106:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:106:13: 106:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:106:13: 106:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/ws_handler.rs:106:13: 106:55
        return;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:106:13: 106:55
    }
}

promoted[2] in ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:67:1: 67:27>::on_close: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn ws_handler::<impl at cita-jsonrpc/src/ws_handler.rs:114:10: 114:15>::clone(_1: &WsHandler) -> WsHandler {
    debug self => _1;                    // in scope 0 at cita-jsonrpc/src/ws_handler.rs:114:10: 114:15
    let mut _0: ws_handler::WsHandler;   // return place in scope 0 at cita-jsonrpc/src/ws_handler.rs:114:10: 114:15
    let mut _2: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:116:5: 116:22
    let _3: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:116:5: 116:22
    let mut _4: threadpool::ThreadPool;  // in scope 0 at cita-jsonrpc/src/ws_handler.rs:117:5: 117:28
    let _5: &threadpool::ThreadPool;     // in scope 0 at cita-jsonrpc/src/ws_handler.rs:117:5: 117:28
    let mut _6: ws::Sender;              // in scope 0 at cita-jsonrpc/src/ws_handler.rs:118:5: 118:23
    let _7: &ws::Sender;                 // in scope 0 at cita-jsonrpc/src/ws_handler.rs:118:5: 118:23
    let mut _8: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:119:5: 119:39
    let _9: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/ws_handler.rs:119:5: 119:39

    bb0: {
        _3 = &((*_1).0: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 0 at cita-jsonrpc/src/ws_handler.rs:116:5: 116:22
        _2 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone(_3) -> bb1; // scope 0 at cita-jsonrpc/src/ws_handler.rs:116:5: 116:22
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:116:5: 116:22
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &((*_1).1: threadpool::ThreadPool); // scope 0 at cita-jsonrpc/src/ws_handler.rs:117:5: 117:28
        _4 = <threadpool::ThreadPool as Clone>::clone(_5) -> [return: bb2, unwind: bb7]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:117:5: 117:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:117:5: 117:28
                                         // + literal: Const { ty: for<'a> fn(&'a threadpool::ThreadPool) -> threadpool::ThreadPool {<threadpool::ThreadPool as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &((*_1).2: ws::Sender);     // scope 0 at cita-jsonrpc/src/ws_handler.rs:118:5: 118:23
        _6 = <ws::Sender as Clone>::clone(_7) -> [return: bb3, unwind: bb6]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:118:5: 118:23
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:118:5: 118:23
                                         // + literal: Const { ty: for<'a> fn(&'a ws::Sender) -> ws::Sender {<ws::Sender as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &((*_1).3: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // scope 0 at cita-jsonrpc/src/ws_handler.rs:119:5: 119:39
        _8 = <pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> as Clone>::clone(_9) -> [return: bb4, unwind: bb5]; // scope 0 at cita-jsonrpc/src/ws_handler.rs:119:5: 119:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/ws_handler.rs:119:5: 119:39
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>) -> pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> {<pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = WsHandler { responses: move _2, thread_pool: move _4, sender: move _6, tx: move _8 }; // scope 0 at cita-jsonrpc/src/ws_handler.rs:114:10: 114:15
        return;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:114:15: 114:15
    }

    bb5 (cleanup): {
        drop(_6) -> bb6;                 // scope 0 at cita-jsonrpc/src/ws_handler.rs:114:14: 114:15
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 0 at cita-jsonrpc/src/ws_handler.rs:114:14: 114:15
    }

    bb7 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at cita-jsonrpc/src/ws_handler.rs:114:14: 114:15
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/ws_handler.rs:114:10: 114:15
    }
}

fn get_build_info_str(_1: bool) -> &str {
    debug short => _1;                   // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:4:35: 4:40
    let mut _0: &str;                    // return place in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:4:51: 4:63

    bb0: {
        switchInt(_1) -> [0: bb2, otherwise: bb1]; // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:5:15: 5:20
    }

    bb1: {
        _0 = const "20.2.0-unknown";     // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:5:23: 5:39
                                         // mir::Constant
                                         // + span: /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:5:23: 5:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb3;                     // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:5:12: 5:2490
    }

    bb2: {
        _0 = const "20.2.0-unknown\n(rustc 1.70.0-nightly-2023-03-18)\n\n                       ..-nnmmmmnn-..\n                  .-nndNNNNNNmddddmmmho.\n                .smNNMMMNnn-         :nnmhn.\n              .dNMMMMMNs--:nosnno-.     ..dNn..   ....\n            .hNMMMMMMMNmmNNNMMMMMNmn     ..nMNNmmmmmmmmdnn.\n           .mMMMMMMMMMMMMMMMMMMMMMMN:  ..ohmNNNNNNmdhnsoonms\n          nNMMMMMMMMMMMMMMMMMMMMMMMMh.                 .-:dN:\n         :NMMMMMMMMMMMMMMMMMMMMMMMMMNdnnnhhddmmmNNNNNNNNNNNMn\n        .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMMMMMMMMMMm dMN:\n        nNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN sMMMMMMMNNNNNNdNMNn\n       .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMMMNdn.--nohmNMmo.\n       nNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhnn       .:smNmhn.\n       .NMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhhdddhsnn.             nmMNmn:\n       nMMMMMMMMMMMMMMMMMMMMMMMMMMMMh..              .:n:-.   oNddNNn\n       oMMMMMMMMMMMMMMMMMMMMMMMMMMMMh.             .:noshmdnndmn  -hm.\n       sMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdsn-... .:.         -onsn:    .Nn\n       hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNmmdmmNn                osssNn\n      .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMs   .nnnmNNmdhnnnnssonNn\n      oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNsnsdNMMMMMMNhssnhdo.Ns\n     nmMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNnoN.\n    .nNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdm\n   oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmn\n  :NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNdnNMNn\n .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNds:\" nMMNn\n nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd:.    nMMMNo.\nnNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdo:...sMMMMNo\nnNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNmmNMMMMMm\n NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd\n  :mNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNms\n     mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm\n   ._____. ._____.  _. ._   ._____. ._____.   ._.   ._____. ._____.\n   | .___| |___. | | | | |  |___. | |_____|   |_|   |___. | |_____|\n   | |     ._. | | | |_| |  ._. | |   ._.   ._____. ._. | | ._____.\n   | |     | | |_| \\_____/  | | |_/   | |   | ,_, | | | |_/ |_____|\n   | |___. | | ._.   ._.    | |       | |   | | | | | |     ._____.\n   |_____| |_| |_|   |_|    |_|       |_|   |_| |_| |_|     |_____|\n"; // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:5:49: 5:2488
                                         // mir::Constant
                                         // + span: /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:5:49: 5:2488
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb3;                     // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:5:12: 5:2490
    }

    bb3: {
        return;                          // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:6:10: 6:10
    }
}

fn get_build_info() -> (&str, std::option::Option<&str>, std::option::Option<&str>, std::option::Option<&str>, std::option::Option<&str>, (u64, u64, u64), std::option::Option<&str>, std::option::Option<&str>) {
    let mut _0: (&str, std::option::Option<&str>, std::option::Option<&str>, std::option::Option<&str>, std::option::Option<&str>, (u64, u64, u64), std::option::Option<&str>, std::option::Option<&str>); // return place in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:10:36: 19:10
    let mut _1: std::option::Option<&str>; // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2403: 20:2407
    let mut _2: std::option::Option<&str>; // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2409: 20:2413
    let mut _3: std::option::Option<&str>; // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2415: 20:2419
    let mut _4: std::option::Option<&str>; // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2421: 20:2425
    let mut _5: (u64, u64, u64);         // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2427: 20:2437
    let mut _6: std::option::Option<&str>; // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2439: 20:2454
    let _7: &str;                        // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2444: 20:2453
    let mut _8: std::option::Option<&str>; // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2456: 20:2474
    let _9: &str;                        // in scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2461: 20:2473

    bb0: {
        _1 = std::option::Option::<&str>::None; // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2403: 20:2407
        _2 = std::option::Option::<&str>::None; // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2409: 20:2413
        _3 = std::option::Option::<&str>::None; // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2415: 20:2419
        _4 = std::option::Option::<&str>::None; // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2421: 20:2425
        _5 = (const 1_u64, const 70_u64, const 0_u64); // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2427: 20:2437
        _7 = const "nightly";            // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2444: 20:2453
                                         // mir::Constant
                                         // + span: /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2444: 20:2453
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = std::option::Option::<&str>::Some(_7); // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2439: 20:2454
        _9 = const "2023-03-18";         // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2461: 20:2473
                                         // mir::Constant
                                         // + span: /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2461: 20:2473
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = std::option::Option::<&str>::Some(_9); // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:2456: 20:2474
        _0 = (const "\n                       ..-nnmmmmnn-..\n                  .-nndNNNNNNmddddmmmho.\n                .smNNMMMNnn-         :nnmhn.\n              .dNMMMMMNs--:nosnno-.     ..dNn..   ....\n            .hNMMMMMMMNmmNNNMMMMMNmn     ..nMNNmmmmmmmmdnn.\n           .mMMMMMMMMMMMMMMMMMMMMMMN:  ..ohmNNNNNNmdhnsoonms\n          nNMMMMMMMMMMMMMMMMMMMMMMMMh.                 .-:dN:\n         :NMMMMMMMMMMMMMMMMMMMMMMMMMNdnnnhhddmmmNNNNNNNNNNNMn\n        .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMMMMMMMMMMm dMN:\n        nNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN sMMMMMMMNNNNNNdNMNn\n       .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNMMMMMNdn.--nohmNMmo.\n       nNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhnn       .:smNmhn.\n       .NMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhhdddhsnn.             nmMNmn:\n       nMMMMMMMMMMMMMMMMMMMMMMMMMMMMh..              .:n:-.   oNddNNn\n       oMMMMMMMMMMMMMMMMMMMMMMMMMMMMh.             .:noshmdnndmn  -hm.\n       sMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdsn-... .:.         -onsn:    .Nn\n       hMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNmmdmmNn                osssNn\n      .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMs   .nnnmNNmdhnnnnssonNn\n      oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNsnsdNMMMMMMNhssnhdo.Ns\n     nmMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNnoN.\n    .nNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdm\n   oNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmn\n  :NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNdnNMNn\n .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNds:\" nMMNn\n nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd:.    nMMMNo.\nnNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNdo:...sMMMMNo\nnNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNmmNMMMMMm\n NMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMd\n  :mNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNms\n     mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm\n   ._____. ._____.  _. ._   ._____. ._____.   ._.   ._____. ._____.\n   | .___| |___. | | | | |  |___. | |_____|   |_|   |___. | |_____|\n   | |     ._. | | | |_| |  ._. | |   ._.   ._____. ._. | | ._____.\n   | |     | | |_| \\_____/  | | |_/   | |   | ,_, | | | |_/ |_____|\n   | |___. | | ._.   ._.    | |       | |   | | | | | |     ._____.\n   |_____| |_| |_|   |_|    |_|       |_|   |_| |_| |_|     |_____|\n", move _1, move _2, move _3, move _4, move _5, move _6, move _8); // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:12: 20:2475
                                         // mir::Constant
                                         // + span: /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:20:13: 20:2401
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at /media/workstation/nvme0n1p2/home/fxl/benchmarks_real/compile_time/blockchain/cita-20.2.0/target/debug/build/cita-jsonrpc-7cb125adc87a8ea6/out/build_info.rs:21:10: 21:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/main.rs:100:11: 100:11
    let _1: clap::ArgMatches<'_>;        // in scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
    let mut _2: clap::App<'_, '_>;       // in scope 0 at cita-jsonrpc/src/main.rs:101:19: 109:10
    let mut _3: clap::App<'_, '_>;       // in scope 0 at cita-jsonrpc/src/main.rs:101:19: 105:40
    let mut _4: clap::App<'_, '_>;       // in scope 0 at cita-jsonrpc/src/main.rs:101:19: 104:28
    let mut _5: clap::App<'_, '_>;       // in scope 0 at cita-jsonrpc/src/main.rs:101:19: 103:49
    let mut _6: clap::App<'_, '_>;       // in scope 0 at cita-jsonrpc/src/main.rs:101:19: 102:43
    let mut _7: clap::App<'_, '_>;       // in scope 0 at cita-jsonrpc/src/main.rs:101:19: 101:38
    let mut _8: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:102:18: 102:42
    let mut _9: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:103:23: 103:48
    let _10: &str;                       // in scope 0 at cita-jsonrpc/src/main.rs:107:13: 108:57
    let mut _12: &clap::ArgMatches<'_>;  // in scope 0 at cita-jsonrpc/src/main.rs:112:18: 112:46
    let _13: std::option::Option<std::path::PathBuf>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:9: 21:30
    let mut _14: std::result::Result<std::path::PathBuf, dotenv::Error>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:9: 21:25
    let _15: ();                         // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:23:9: 23:54
    let _16: ();                         // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:26:9: 26:28
    let mut _17: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:113:57: 113:63
    let _18: ();                         // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:13: 30:64
    let _19: ();                         // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:13: 32:62
    let mut _21: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _22: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _23: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _24: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _25: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _26: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _27: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _28: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _29: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _30: &[&str];                // in scope 0 at cita-jsonrpc/src/main.rs:113:41: 113:55
    let mut _32: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _33: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _34: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _35: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _36: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _37: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _38: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _39: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _40: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _41: &[&str];                // in scope 0 at cita-jsonrpc/src/main.rs:114:11: 114:24
    let mut _42: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _43: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _44: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _45: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/main.rs:114:26: 114:50
    let _46: &&str;                      // in scope 0 at cita-jsonrpc/src/main.rs:114:26: 114:50
    let _47: &str;                       // in scope 0 at cita-jsonrpc/src/main.rs:114:26: 114:50
    let mut _49: std::option::Option<&str>; // in scope 0 at cita-jsonrpc/src/main.rs:116:23: 116:49
    let mut _50: &clap::ArgMatches<'_>;  // in scope 0 at cita-jsonrpc/src/main.rs:116:23: 116:49
    let _51: &str;                       // in scope 0 at cita-jsonrpc/src/main.rs:116:60: 116:74
    let mut _53: &str;                   // in scope 0 at cita-jsonrpc/src/main.rs:118:38: 118:49
    let mut _55: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _56: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _57: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _58: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _59: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _60: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _61: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _62: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _63: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _64: &[&str];                // in scope 0 at cita-jsonrpc/src/main.rs:119:11: 119:40
    let mut _65: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _66: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _67: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _68: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/main.rs:119:42: 119:48
    let _69: &config::Config;            // in scope 0 at cita-jsonrpc/src/main.rs:119:42: 119:48
    let mut _70: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:122:8: 122:62
    let mut _71: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:122:8: 122:32
    let mut _72: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:122:9: 122:32
    let mut _73: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:122:36: 122:62
    let mut _74: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:122:37: 122:62
    let mut _76: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _77: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _78: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _79: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _80: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _81: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _82: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _83: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _84: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _85: &[&str];                // in scope 0 at cita-jsonrpc/src/main.rs:123:16: 123:74
    let _86: !;                          // in scope 0 at cita-jsonrpc/src/main.rs:124:9: 124:30
    let _87: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:127:5: 127:42
    let _88: &config::ProfileConfig;     // in scope 0 at cita-jsonrpc/src/main.rs:127:19: 127:41
    let _89: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:130:5: 130:19
    let mut _92: (pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>, pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-jsonrpc/src/main.rs:133:28: 133:48
    let mut _95: (pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>, pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-jsonrpc/src/main.rs:134:28: 134:48
    let mut _98: (pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, pubsub::crossbeam_channel::Receiver<(std::string::String, libproto::Request)>); // in scope 0 at cita-jsonrpc/src/main.rs:136:32: 136:52
    let mut _101: (pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>, pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-jsonrpc/src/main.rs:138:20: 138:40
    let mut _103: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-jsonrpc/src/main.rs:139:24: 139:38
    let _104: ();                        // in scope 0 at cita-jsonrpc/src/main.rs:141:5: 151:6
    let _105: &str;                      // in scope 0 at cita-jsonrpc/src/main.rs:142:9: 142:18
    let mut _106: std::vec::Vec<libproto::router::RoutingKey>; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:20:39: 22:6
    let mut _107: std::boxed::Box<[libproto::router::RoutingKey]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _108: usize;                 // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _109: usize;                 // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _110: *mut u8;               // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _111: std::boxed::Box<[libproto::router::RoutingKey; 4]>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    let mut _112: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _113: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _114: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _115: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _116: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _117: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _118: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _119: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _120: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _121: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _122: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _123: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _124: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-jsonrpc/src/main.rs:149:9: 149:15
    let mut _125: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-jsonrpc/src/main.rs:150:9: 150:15
    let mut _128: lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>; // in scope 0 at cita-jsonrpc/src/main.rs:156:30: 156:82
    let mut _129: std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>; // in scope 0 at cita-jsonrpc/src/main.rs:156:41: 156:81
    let _131: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/main.rs:157:37: 157:47
    let _133: &std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/main.rs:158:35: 158:45
    let mut _135: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/main.rs:159:52: 159:61
    let _137: std::thread::JoinHandle<()>; // in scope 0 at cita-jsonrpc/src/main.rs:163:5: 192:7
    let mut _138: [closure@cita-jsonrpc/src/main.rs:163:19: 163:26]; // in scope 0 at cita-jsonrpc/src/main.rs:163:19: 192:6
    let mut _140: &config::Config;       // in scope 0 at cita-jsonrpc/src/main.rs:195:23: 195:37
    let _141: std::thread::JoinHandle<()>; // in scope 0 at cita-jsonrpc/src/main.rs:196:5: 208:7
    let mut _142: [closure@cita-jsonrpc/src/main.rs:196:19: 196:26]; // in scope 0 at cita-jsonrpc/src/main.rs:196:19: 208:6
    let mut _143: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:211:8: 211:31
    let mut _145: &config::WsConfig;     // in scope 0 at cita-jsonrpc/src/main.rs:212:25: 212:49
    let mut _147: &pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/main.rs:213:18: 213:34
    let _148: std::thread::JoinHandle<()>; // in scope 0 at cita-jsonrpc/src/main.rs:214:9: 224:11
    let mut _149: [closure@cita-jsonrpc/src/main.rs:214:23: 214:30]; // in scope 0 at cita-jsonrpc/src/main.rs:214:23: 224:10
    let mut _150: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:227:8: 227:33
    let mut _152: &config::HttpConfig;   // in scope 0 at cita-jsonrpc/src/main.rs:228:27: 228:53
    let mut _154: std::string::String;   // in scope 0 at cita-jsonrpc/src/main.rs:230:13: 230:48
    let mut _155: std::string::String;   // in scope 0 at cita-jsonrpc/src/main.rs:230:13: 230:42
    let mut _156: &std::string::String;  // in scope 0 at cita-jsonrpc/src/main.rs:230:13: 230:42
    let _157: &str;                      // in scope 0 at cita-jsonrpc/src/main.rs:230:45: 230:48
    let mut _158: &str;                  // in scope 0 at cita-jsonrpc/src/main.rs:230:51: 230:95
    let _159: &str;                      // in scope 0 at cita-jsonrpc/src/main.rs:230:51: 230:95
    let _160: &std::string::String;      // in scope 0 at cita-jsonrpc/src/main.rs:230:51: 230:95
    let _161: std::string::String;       // in scope 0 at cita-jsonrpc/src/main.rs:230:52: 230:95
    let mut _162: &std::string::String;  // in scope 0 at cita-jsonrpc/src/main.rs:230:52: 230:95
    let _163: std::string::String;       // in scope 0 at cita-jsonrpc/src/main.rs:230:52: 230:83
    let mut _164: &std::string::String;  // in scope 0 at cita-jsonrpc/src/main.rs:230:52: 230:83
    let mut _166: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _167: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _168: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _169: bool;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _170: &log::Level;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _171: &log::LevelFilter;     // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _172: log::LevelFilter;          // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _173: ();                        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _174: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _175: &[&str];               // in scope 0 at cita-jsonrpc/src/main.rs:231:15: 231:37
    let mut _176: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _177: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _178: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _179: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/main.rs:231:39: 231:44
    let _180: &&std::string::String;     // in scope 0 at cita-jsonrpc/src/main.rs:231:39: 231:44
    let _181: &std::string::String;      // in scope 0 at cita-jsonrpc/src/main.rs:231:39: 231:44
    let mut _183: std::option::Option<usize>; // in scope 0 at cita-jsonrpc/src/main.rs:233:30: 235:27
    let mut _185: std::result::Result<std::net::SocketAddr, std::net::AddrParseError>; // in scope 0 at cita-jsonrpc/src/main.rs:238:20: 238:32
    let mut _186: &str;                  // in scope 0 at cita-jsonrpc/src/main.rs:238:20: 238:32
    let _187: &str;                      // in scope 0 at cita-jsonrpc/src/main.rs:238:20: 238:32
    let mut _188: &std::string::String;  // in scope 0 at cita-jsonrpc/src/main.rs:238:20: 238:32
    let mut _191: std::thread::JoinHandle<()>; // in scope 0 at cita-jsonrpc/src/main.rs:241:17: 262:22
    let mut _192: std::result::Result<std::thread::JoinHandle<()>, std::io::Error>; // in scope 0 at cita-jsonrpc/src/main.rs:241:17: 261:15
    let mut _193: std::thread::Builder;  // in scope 0 at cita-jsonrpc/src/main.rs:241:17: 242:47
    let mut _194: std::thread::Builder;  // in scope 0 at cita-jsonrpc/src/main.rs:241:17: 241:39
    let mut _195: std::string::String;   // in scope 0 at cita-jsonrpc/src/main.rs:242:19: 242:46
    let mut _196: [closure@cita-jsonrpc/src/main.rs:243:20: 243:27]; // in scope 0 at cita-jsonrpc/src/main.rs:243:20: 261:14
    let mut _199: (std::string::String, std::vec::Vec<u8>); // in scope 0 at cita-jsonrpc/src/main.rs:266:26: 266:48
    let mut _200: std::result::Result<(std::string::String, std::vec::Vec<u8>), pubsub::crossbeam_channel::RecvError>; // in scope 0 at cita-jsonrpc/src/main.rs:266:26: 266:39
    let mut _201: &pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-jsonrpc/src/main.rs:266:26: 266:39
    let mut _202: std::result::Result<(), ()>; // in scope 0 at cita-jsonrpc/src/main.rs:267:17: 267:45
    let mut _203: &mut mq_handler::MqHandler; // in scope 0 at cita-jsonrpc/src/main.rs:267:17: 267:45
    let mut _204: &str;                  // in scope 0 at cita-jsonrpc/src/main.rs:267:34: 267:38
    let _205: &str;                      // in scope 0 at cita-jsonrpc/src/main.rs:267:34: 267:38
    let _206: &std::string::String;      // in scope 0 at cita-jsonrpc/src/main.rs:267:34: 267:38
    let mut _207: &[u8];                 // in scope 0 at cita-jsonrpc/src/main.rs:267:40: 267:44
    let _208: &[u8];                     // in scope 0 at cita-jsonrpc/src/main.rs:267:40: 267:44
    let _209: &std::vec::Vec<u8>;        // in scope 0 at cita-jsonrpc/src/main.rs:267:40: 267:44
    let mut _227: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:242:46: 242:47
    let mut _228: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:263:5: 263:6
    let mut _229: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:230:94: 230:95
    let mut _230: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:263:5: 263:6
    let mut _231: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:225:5: 225:6
    let mut _232: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:269:1: 269:2
    let mut _233: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:269:1: 269:2
    let mut _234: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:269:1: 269:2
    let mut _235: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:269:1: 269:2
    let mut _236: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:269:1: 269:2
    let mut _237: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:269:1: 269:2
    let mut _238: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:269:1: 269:2
    let mut _239: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:269:1: 269:2
    let mut _240: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:269:1: 269:2
    let mut _241: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:269:1: 269:2
    let mut _242: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:269:1: 269:2
    let mut _243: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:103:48: 103:49
    let mut _244: bool;                  // in scope 0 at cita-jsonrpc/src/main.rs:102:42: 102:43
    let mut _245: *const [libproto::router::RoutingKey; 4]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
    scope 1 {
        debug matches => _1;             // in scope 1 at cita-jsonrpc/src/main.rs:101:9: 101:16
        let _11: bool;                   // in scope 1 at cita-jsonrpc/src/main.rs:112:9: 112:15
        scope 2 {
            debug stdout => _11;         // in scope 2 at cita-jsonrpc/src/main.rs:112:9: 112:15
            let _20: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let _31: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let _48: &str;               // in scope 2 at cita-jsonrpc/src/main.rs:116:9: 116:20
            let mut _225: &logger::LogFavour<'_>; // in scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:33: 32:61
            let mut _226: &logger::LogFavour<'_>; // in scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:33: 30:63
            scope 3 {
                debug lvl => _20;        // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _222: &(&str, &str, &str, u32); // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _223: &[&str; 1]; // in scope 3 at cita-jsonrpc/src/main.rs:113:41: 113:55
                let mut _224: &log::LevelFilter; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 4 {
                debug lvl => _31;        // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _219: &(&str, &str, &str, u32); // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _220: &[&str; 1]; // in scope 4 at cita-jsonrpc/src/main.rs:114:11: 114:24
                let mut _221: &log::LevelFilter; // in scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 5 {
                debug config_path => _48; // in scope 5 at cita-jsonrpc/src/main.rs:116:9: 116:20
                let _52: config::Config; // in scope 5 at cita-jsonrpc/src/main.rs:118:9: 118:15
                scope 6 {
                    debug config => _52; // in scope 6 at cita-jsonrpc/src/main.rs:118:9: 118:15
                    let _54: log::Level; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let _75: log::Level; // in scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                    let _90: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 6 at cita-jsonrpc/src/main.rs:133:10: 133:16
                    let _91: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 6 at cita-jsonrpc/src/main.rs:133:18: 133:24
                    scope 7 {
                        debug lvl => _54; // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        let mut _216: &(&str, &str, &str, u32); // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                        let mut _217: &[&str; 1]; // in scope 7 at cita-jsonrpc/src/main.rs:119:11: 119:40
                        let mut _218: &log::LevelFilter; // in scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                    }
                    scope 8 {
                        debug lvl => _75; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                        let mut _213: &(&str, &str, &str, u32); // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                        let mut _214: &[&str; 1]; // in scope 8 at cita-jsonrpc/src/main.rs:123:16: 123:74
                        let mut _215: &log::LevelFilter; // in scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                    }
                    scope 9 {
                        debug tx_sub => _90; // in scope 9 at cita-jsonrpc/src/main.rs:133:10: 133:16
                        debug rx_sub => _91; // in scope 9 at cita-jsonrpc/src/main.rs:133:18: 133:24
                        let _93: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 9 at cita-jsonrpc/src/main.rs:134:10: 134:16
                        let _94: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 9 at cita-jsonrpc/src/main.rs:134:18: 134:24
                        scope 10 {
                            debug tx_pub => _93; // in scope 10 at cita-jsonrpc/src/main.rs:134:10: 134:16
                            debug rx_pub => _94; // in scope 10 at cita-jsonrpc/src/main.rs:134:18: 134:24
                            let _96: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 10 at cita-jsonrpc/src/main.rs:136:10: 136:18
                            let _97: pubsub::crossbeam_channel::Receiver<(std::string::String, libproto::Request)>; // in scope 10 at cita-jsonrpc/src/main.rs:136:20: 136:28
                            scope 11 {
                                debug tx_relay => _96; // in scope 11 at cita-jsonrpc/src/main.rs:136:10: 136:18
                                debug rx_relay => _97; // in scope 11 at cita-jsonrpc/src/main.rs:136:20: 136:28
                                let _99: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 11 at cita-jsonrpc/src/main.rs:138:10: 138:12
                                let _100: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 11 at cita-jsonrpc/src/main.rs:138:14: 138:16
                                scope 12 {
                                    debug tx => _99; // in scope 12 at cita-jsonrpc/src/main.rs:138:10: 138:12
                                    debug rx => _100; // in scope 12 at cita-jsonrpc/src/main.rs:138:14: 138:16
                                    let _102: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 12 at cita-jsonrpc/src/main.rs:139:9: 139:21
                                    scope 13 {
                                        debug soli_resp_tx => _102; // in scope 13 at cita-jsonrpc/src/main.rs:139:9: 139:21
                                        let _126: usize; // in scope 13 at cita-jsonrpc/src/main.rs:153:9: 153:25
                                        scope 14 {
                                        }
                                        scope 15 {
                                            debug backlog_capacity => _126; // in scope 15 at cita-jsonrpc/src/main.rs:153:9: 153:25
                                            let _127: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 15 at cita-jsonrpc/src/main.rs:156:9: 156:18
                                            scope 16 {
                                                debug responses => _127; // in scope 16 at cita-jsonrpc/src/main.rs:156:9: 156:18
                                                let _130: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 16 at cita-jsonrpc/src/main.rs:157:9: 157:23
                                                scope 17 {
                                                    debug http_responses => _130; // in scope 17 at cita-jsonrpc/src/main.rs:157:9: 157:23
                                                    let _132: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 17 at cita-jsonrpc/src/main.rs:158:9: 158:21
                                                    scope 18 {
                                                        debug ws_responses => _132; // in scope 18 at cita-jsonrpc/src/main.rs:158:9: 158:21
                                                        let mut _134: mq_handler::MqHandler; // in scope 18 at cita-jsonrpc/src/main.rs:159:9: 159:22
                                                        scope 19 {
                                                            debug mq_handle => _134; // in scope 19 at cita-jsonrpc/src/main.rs:159:9: 159:22
                                                            let _136: config::NewTxFlowConfig; // in scope 19 at cita-jsonrpc/src/main.rs:162:9: 162:23
                                                            scope 20 {
                                                                debug tx_flow_config => _136; // in scope 20 at cita-jsonrpc/src/main.rs:162:9: 162:23
                                                                let _139: config::Config; // in scope 20 at cita-jsonrpc/src/main.rs:195:9: 195:20
                                                                scope 21 {
                                                                    debug soli_config => _139; // in scope 21 at cita-jsonrpc/src/main.rs:195:9: 195:20
                                                                    let _144: config::WsConfig; // in scope 21 at cita-jsonrpc/src/main.rs:212:13: 212:22
                                                                    let _151: config::HttpConfig; // in scope 21 at cita-jsonrpc/src/main.rs:228:13: 228:24
                                                                    let _197: std::string::String; // in scope 21 at cita-jsonrpc/src/main.rs:266:14: 266:17
                                                                    let _198: std::vec::Vec<u8>; // in scope 21 at cita-jsonrpc/src/main.rs:266:19: 266:22
                                                                    scope 22 {
                                                                        debug ws_config => _144; // in scope 22 at cita-jsonrpc/src/main.rs:212:13: 212:22
                                                                        let _146: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 22 at cita-jsonrpc/src/main.rs:213:13: 213:15
                                                                        scope 23 {
                                                                            debug tx => _146; // in scope 23 at cita-jsonrpc/src/main.rs:213:13: 213:15
                                                                        }
                                                                    }
                                                                    scope 24 {
                                                                        debug http_config => _151; // in scope 24 at cita-jsonrpc/src/main.rs:228:13: 228:24
                                                                        let _153: std::string::String; // in scope 24 at cita-jsonrpc/src/main.rs:229:13: 229:17
                                                                        scope 25 {
                                                                            debug addr => _153; // in scope 25 at cita-jsonrpc/src/main.rs:229:13: 229:17
                                                                            let _165: log::Level; // in scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                                            let _182: usize; // in scope 25 at cita-jsonrpc/src/main.rs:233:13: 233:20
                                                                            scope 26 {
                                                                                debug lvl => _165; // in scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                                                                                let mut _210: &(&str, &str, &str, u32); // in scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                                                                let mut _211: &[&str; 1]; // in scope 26 at cita-jsonrpc/src/main.rs:231:15: 231:37
                                                                                let mut _212: &log::LevelFilter; // in scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                                                            }
                                                                            scope 27 {
                                                                                debug threads => _182; // in scope 27 at cita-jsonrpc/src/main.rs:233:13: 233:20
                                                                                let _184: std::net::SocketAddr; // in scope 27 at cita-jsonrpc/src/main.rs:238:13: 238:17
                                                                                scope 28 {
                                                                                    debug addr => _184; // in scope 28 at cita-jsonrpc/src/main.rs:238:13: 238:17
                                                                                    let _189: u64; // in scope 28 at cita-jsonrpc/src/main.rs:239:13: 239:20
                                                                                    scope 29 {
                                                                                        debug timeout => _189; // in scope 29 at cita-jsonrpc/src/main.rs:239:13: 239:20
                                                                                        let _190: std::option::Option<std::string::String>; // in scope 29 at cita-jsonrpc/src/main.rs:240:13: 240:25
                                                                                        scope 30 {
                                                                                            debug allow_origin => _190; // in scope 30 at cita-jsonrpc/src/main.rs:240:13: 240:25
                                                                                            scope 31 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 32 {
                                                                        debug key => _197; // in scope 32 at cita-jsonrpc/src/main.rs:266:14: 266:17
                                                                        debug msg => _198; // in scope 32 at cita-jsonrpc/src/main.rs:266:19: 266:22
                                                                        scope 33 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _235 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _237 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _239 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _227 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _241 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _242 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _230 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _232 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _233 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _228 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _231 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _244 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _236 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _229 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _234 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _238 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _240 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _243 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:9: 101:16
        _244 = const true;               // scope 0 at cita-jsonrpc/src/main.rs:101:19: 101:38
        _7 = App::<'_, '_>::new::<&str>(const "JsonRpc") -> bb1; // scope 0 at cita-jsonrpc/src/main.rs:101:19: 101:38
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:101:19: 101:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> App<'_, '_> {App::<'_, '_>::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:101:28: 101:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _8 = get_build_info_str(const true) -> [return: bb2, unwind: bb184]; // scope 0 at cita-jsonrpc/src/main.rs:102:18: 102:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:102:18: 102:36
                                         // + literal: Const { ty: fn(bool) -> &'static str {get_build_info_str}, val: Value(<ZST>) }
    }

    bb2: {
        _244 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:19: 102:43
        _6 = App::<'_, '_>::version::<&str>(move _7, move _8) -> [return: bb3, unwind: bb184]; // scope 0 at cita-jsonrpc/src/main.rs:101:19: 102:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:102:10: 102:17
                                         // + literal: Const { ty: fn(App<'_, '_>, &str) -> App<'_, '_> {App::<'_, '_>::version::<&str>}, val: Value(<ZST>) }
    }

    bb3: {
        _243 = const true;               // scope 0 at cita-jsonrpc/src/main.rs:102:42: 102:43
        _244 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:102:42: 102:43
        _9 = get_build_info_str(const false) -> [return: bb4, unwind: bb182]; // scope 0 at cita-jsonrpc/src/main.rs:103:23: 103:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:103:23: 103:41
                                         // + literal: Const { ty: fn(bool) -> &'static str {get_build_info_str}, val: Value(<ZST>) }
    }

    bb4: {
        _243 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:101:19: 103:49
        _5 = App::<'_, '_>::long_version::<&str>(move _6, move _9) -> [return: bb5, unwind: bb182]; // scope 0 at cita-jsonrpc/src/main.rs:101:19: 103:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:103:10: 103:22
                                         // + literal: Const { ty: fn(App<'_, '_>, &str) -> App<'_, '_> {App::<'_, '_>::long_version::<&str>}, val: Value(<ZST>) }
    }

    bb5: {
        _243 = const false;              // scope 0 at cita-jsonrpc/src/main.rs:103:48: 103:49
        _4 = App::<'_, '_>::author::<&str>(move _5, const "Rivtower") -> bb6; // scope 0 at cita-jsonrpc/src/main.rs:101:19: 104:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:104:10: 104:16
                                         // + literal: Const { ty: fn(App<'_, '_>, &str) -> App<'_, '_> {App::<'_, '_>::author::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:104:17: 104:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _3 = App::<'_, '_>::about::<&str>(move _4, const "CITA JSON-RPC by Rust") -> bb7; // scope 0 at cita-jsonrpc/src/main.rs:101:19: 105:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:105:10: 105:15
                                         // + literal: Const { ty: fn(App<'_, '_>, &str) -> App<'_, '_> {App::<'_, '_>::about::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:105:16: 105:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _10 = const "-c, --config=[FILE] 'Sets a custom config file'\n                          -s, --stdout 'Log to console'"; // scope 0 at cita-jsonrpc/src/main.rs:107:13: 108:57
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:107:13: 108:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = App::<'_, '_>::args_from_usage(move _3, _10) -> bb8; // scope 0 at cita-jsonrpc/src/main.rs:101:19: 109:10
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:106:10: 106:25
                                         // + literal: Const { ty: fn(App<'_, '_>, &str) -> App<'_, '_> {App::<'_, '_>::args_from_usage}, val: Value(<ZST>) }
    }

    bb8: {
        _1 = App::<'_, '_>::get_matches(move _2) -> bb9; // scope 0 at cita-jsonrpc/src/main.rs:101:19: 110:23
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:110:10: 110:21
                                         // + literal: Const { ty: fn(App<'_, '_>) -> ArgMatches<'_> {App::<'_, '_>::get_matches}, val: Value(<ZST>) }
    }

    bb9: {
        _12 = &_1;                       // scope 1 at cita-jsonrpc/src/main.rs:112:18: 112:46
        _11 = ArgMatches::<'_>::is_present::<&str>(move _12, const "stdout") -> [return: bb10, unwind: bb148]; // scope 1 at cita-jsonrpc/src/main.rs:112:18: 112:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:112:26: 112:36
                                         // + literal: Const { ty: for<'a> fn(&'a ArgMatches<'_>, &str) -> bool {ArgMatches::<'_>::is_present::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:112:37: 112:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _14 = dotenv() -> [return: bb11, unwind: bb148]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:9: 21:25
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:9: 21:23
                                         // + literal: Const { ty: fn() -> Result<PathBuf, dotenv::Error> {dotenv}, val: Value(<ZST>) }
    }

    bb11: {
        _13 = Result::<PathBuf, dotenv::Error>::ok(move _14) -> [return: bb12, unwind: bb148]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:9: 21:30
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:26: 21:28
                                         // + literal: Const { ty: fn(Result<PathBuf, dotenv::Error>) -> std::option::Option<PathBuf> {Result::<PathBuf, dotenv::Error>::ok}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_13) -> [return: bb13, unwind: bb148]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:21:30: 21:31
    }

    bb13: {
        _15 = set_var::<&str, &str>(const "RUST_BACKTRACE", const "full") -> [return: bb14, unwind: bb148]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:23:9: 23:54
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:23:9: 23:28
                                         // + literal: Const { ty: fn(&str, &str) {set_var::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:23:29: 23:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:23:47: 23:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        _16 = set_panic_handler() -> [return: bb15, unwind: bb148]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:26:9: 26:28
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:26:9: 26:26
                                         // + literal: Const { ty: fn() {set_panic_handler}, val: Value(<ZST>) }
    }

    bb15: {
        _17 = _11;                       // scope 2 at cita-jsonrpc/src/main.rs:113:57: 113:63
        switchInt(move _17) -> [0: bb17, otherwise: bb16]; // scope 2 at cita-jsonrpc/src/main.rs:113:57: 113:63
    }

    bb16: {
        _226 = const _;                  // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:33: 30:63
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:33: 30:63
                                         // + literal: Const { ty: &LogFavour<'_>, val: Unevaluated(main, [], Some(promoted[16])) }
        _18 = init_config(_226) -> [return: bb185, unwind: bb148]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:13: 30:64
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:13: 30:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a LogFavour<'b>) {init_config}, val: Value(<ZST>) }
    }

    bb17: {
        _225 = const _;                  // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:33: 32:61
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:33: 32:61
                                         // + literal: Const { ty: &LogFavour<'_>, val: Unevaluated(main, [], Some(promoted[15])) }
        _19 = init_config(_225) -> [return: bb186, unwind: bb148]; // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:13: 32:62
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:13: 32:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a LogFavour<'b>) {init_config}, val: Value(<ZST>) }
    }

    bb18: {
        _20 = log::Level::Info;          // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _23 = &_20;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _224 = const _;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[14])) }
        _22 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _23, _224) -> [return: bb22, unwind: bb148]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb19: {
        _21 = const false;               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb21;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb20: {
        _25 = &_20;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _27 = log::max_level() -> [return: bb23, unwind: bb148]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb21: {
        switchInt(move _21) -> [0: bb27, otherwise: bb25]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb22: {
        switchInt(move _22) -> [0: bb19, otherwise: bb20]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb23: {
        _26 = &_27;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _24 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _25, move _26) -> [return: bb24, unwind: bb148]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb24: {
        _21 = move _24;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb21;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb25: {
        _223 = const _;                  // scope 3 at cita-jsonrpc/src/main.rs:113:41: 113:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:113:41: 113:55
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[13])) }
        _30 = _223 as &[&str] (Pointer(Unsize)); // scope 3 at cita-jsonrpc/src/main.rs:113:41: 113:55
        _29 = Arguments::<'_>::new_const(move _30) -> [return: bb26, unwind: bb148]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb26: {
        _222 = const _;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[12])) }
        _28 = log::__private_api_log(move _29, _20, _222) -> [return: bb187, unwind: bb148]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb27: {
        _31 = log::Level::Info;          // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _34 = &_31;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _221 = const _;                  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[11])) }
        _33 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _34, _221) -> [return: bb31, unwind: bb148]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb28: {
        _32 = const false;               // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb30;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb29: {
        _36 = &_31;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _38 = log::max_level() -> [return: bb32, unwind: bb148]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb30: {
        switchInt(move _32) -> [0: bb38, otherwise: bb34]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb31: {
        switchInt(move _33) -> [0: bb28, otherwise: bb29]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb32: {
        _37 = &_38;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _35 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _36, move _37) -> [return: bb33, unwind: bb148]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb33: {
        _32 = move _35;                  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb30;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb34: {
        _220 = const _;                  // scope 4 at cita-jsonrpc/src/main.rs:114:11: 114:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:114:11: 114:24
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[10])) }
        _41 = _220 as &[&str] (Pointer(Unsize)); // scope 4 at cita-jsonrpc/src/main.rs:114:11: 114:24
        _47 = get_build_info_str(const true) -> [return: bb35, unwind: bb148]; // scope 4 at cita-jsonrpc/src/main.rs:114:26: 114:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:114:26: 114:44
                                         // + literal: Const { ty: fn(bool) -> &'static str {get_build_info_str}, val: Value(<ZST>) }
    }

    bb35: {
        _46 = &_47;                      // scope 4 at cita-jsonrpc/src/main.rs:114:26: 114:50
        _45 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(_46) -> [return: bb36, unwind: bb148]; // scope 4 at cita-jsonrpc/src/main.rs:114:26: 114:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:114:26: 114:50
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb36: {
        _44 = [move _45];                // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _43 = &_44;                      // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _42 = _43 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _40 = Arguments::<'_>::new_v1(move _41, move _42) -> [return: bb37, unwind: bb148]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb37: {
        _219 = const _;                  // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[9])) }
        _39 = log::__private_api_log(move _40, _31, _219) -> [return: bb188, unwind: bb148]; // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb38: {
        _50 = &_1;                       // scope 2 at cita-jsonrpc/src/main.rs:116:23: 116:49
        _49 = ArgMatches::<'_>::value_of::<&str>(move _50, const "config") -> [return: bb39, unwind: bb148]; // scope 2 at cita-jsonrpc/src/main.rs:116:23: 116:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:116:31: 116:39
                                         // + literal: Const { ty: for<'a> fn(&'a ArgMatches<'_>, &str) -> std::option::Option<&'a str> {ArgMatches::<'_>::value_of::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:116:40: 116:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb39: {
        _51 = const "jsonrpc.toml";      // scope 2 at cita-jsonrpc/src/main.rs:116:60: 116:74
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:116:60: 116:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _48 = std::option::Option::<&str>::unwrap_or(move _49, _51) -> [return: bb40, unwind: bb148]; // scope 2 at cita-jsonrpc/src/main.rs:116:23: 116:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:116:50: 116:59
                                         // + literal: Const { ty: fn(std::option::Option<&str>, &str) -> &str {std::option::Option::<&str>::unwrap_or}, val: Value(<ZST>) }
    }

    bb40: {
        _53 = _48;                       // scope 5 at cita-jsonrpc/src/main.rs:118:38: 118:49
        _52 = Config::new(move _53) -> [return: bb41, unwind: bb148]; // scope 5 at cita-jsonrpc/src/main.rs:118:18: 118:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:118:18: 118:37
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Config {Config::new}, val: Value(<ZST>) }
    }

    bb41: {
        _54 = log::Level::Info;          // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _57 = &_54;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _218 = const _;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[8])) }
        _56 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _57, _218) -> [return: bb45, unwind: bb147]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb42: {
        _55 = const false;               // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb44;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb43: {
        _59 = &_54;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _61 = log::max_level() -> [return: bb46, unwind: bb147]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb44: {
        switchInt(move _55) -> [0: bb51, otherwise: bb48]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb45: {
        switchInt(move _56) -> [0: bb42, otherwise: bb43]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb46: {
        _60 = &_61;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _58 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _59, move _60) -> [return: bb47, unwind: bb147]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb47: {
        _55 = move _58;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb44;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb48: {
        _217 = const _;                  // scope 7 at cita-jsonrpc/src/main.rs:119:11: 119:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:119:11: 119:40
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[7])) }
        _64 = _217 as &[&str] (Pointer(Unsize)); // scope 7 at cita-jsonrpc/src/main.rs:119:11: 119:40
        _69 = &_52;                      // scope 7 at cita-jsonrpc/src/main.rs:119:42: 119:48
        _68 = core::fmt::ArgumentV1::<'_>::new_debug::<Config>(_69) -> [return: bb49, unwind: bb147]; // scope 7 at cita-jsonrpc/src/main.rs:119:42: 119:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:119:42: 119:48
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b Config) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Config>}, val: Value(<ZST>) }
    }

    bb49: {
        _67 = [move _68];                // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _66 = &_67;                      // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _65 = _66 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _63 = Arguments::<'_>::new_v1(move _64, move _65) -> [return: bb50, unwind: bb147]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb50: {
        _216 = const _;                  // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[6])) }
        _62 = log::__private_api_log(move _63, _54, _216) -> [return: bb189, unwind: bb147]; // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb51: {
        _72 = ((_52.4: config::WsConfig).0: bool); // scope 6 at cita-jsonrpc/src/main.rs:122:9: 122:32
        _71 = Not(move _72);             // scope 6 at cita-jsonrpc/src/main.rs:122:8: 122:32
        switchInt(move _71) -> [0: bb52, otherwise: bb53]; // scope 6 at cita-jsonrpc/src/main.rs:122:8: 122:62
    }

    bb52: {
        _70 = const false;               // scope 6 at cita-jsonrpc/src/main.rs:122:8: 122:62
        goto -> bb54;                    // scope 6 at cita-jsonrpc/src/main.rs:122:8: 122:62
    }

    bb53: {
        _74 = ((_52.3: config::HttpConfig).0: bool); // scope 6 at cita-jsonrpc/src/main.rs:122:37: 122:62
        _73 = Not(move _74);             // scope 6 at cita-jsonrpc/src/main.rs:122:36: 122:62
        _70 = move _73;                  // scope 6 at cita-jsonrpc/src/main.rs:122:8: 122:62
        goto -> bb54;                    // scope 6 at cita-jsonrpc/src/main.rs:122:8: 122:62
    }

    bb54: {
        switchInt(move _70) -> [0: bb65, otherwise: bb55]; // scope 6 at cita-jsonrpc/src/main.rs:122:8: 122:62
    }

    bb55: {
        _75 = log::Level::Error;         // scope 6 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:67:14: 67:34
        _78 = &_75;                      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _215 = const _;                  // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[5])) }
        _77 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _78, _215) -> [return: bb59, unwind: bb147]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb56: {
        _76 = const false;               // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb58;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb57: {
        _80 = &_75;                      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _82 = log::max_level() -> [return: bb60, unwind: bb147]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb58: {
        switchInt(move _76) -> [0: bb64, otherwise: bb62]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb59: {
        switchInt(move _77) -> [0: bb56, otherwise: bb57]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb60: {
        _81 = &_82;                      // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _79 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _80, move _81) -> [return: bb61, unwind: bb147]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb61: {
        _76 = move _79;                  // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb58;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb62: {
        _214 = const _;                  // scope 8 at cita-jsonrpc/src/main.rs:123:16: 123:74
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:123:16: 123:74
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[4])) }
        _85 = _214 as &[&str] (Pointer(Unsize)); // scope 8 at cita-jsonrpc/src/main.rs:123:16: 123:74
        _84 = Arguments::<'_>::new_const(move _85) -> [return: bb63, unwind: bb147]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str]) -> Arguments<'_> {Arguments::<'_>::new_const}, val: Value(<ZST>) }
    }

    bb63: {
        _213 = const _;                  // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[3])) }
        _83 = log::__private_api_log(move _84, _75, _213) -> [return: bb190, unwind: bb147]; // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb64: {
        _86 = std::process::exit(const 2_i32) -> bb147; // scope 6 at cita-jsonrpc/src/main.rs:124:9: 124:30
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:124:9: 124:27
                                         // + literal: Const { ty: fn(i32) -> ! {std::process::exit}, val: Value(<ZST>) }
    }

    bb65: {
        _88 = &(_52.2: config::ProfileConfig); // scope 6 at cita-jsonrpc/src/main.rs:127:19: 127:41
        _87 = start_profile(_88) -> [return: bb66, unwind: bb147]; // scope 6 at cita-jsonrpc/src/main.rs:127:5: 127:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:127:5: 127:18
                                         // + literal: Const { ty: for<'a> fn(&'a ProfileConfig) {start_profile}, val: Value(<ZST>) }
    }

    bb66: {
        _89 = set_fd_limit() -> [return: bb67, unwind: bb147]; // scope 6 at cita-jsonrpc/src/main.rs:130:5: 130:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:130:5: 130:17
                                         // + literal: Const { ty: fn() {set_fd_limit}, val: Value(<ZST>) }
    }

    bb67: {
        _92 = pubsub::crossbeam_channel::unbounded::<(std::string::String, Vec<u8>)>() -> [return: bb68, unwind: bb147]; // scope 6 at cita-jsonrpc/src/main.rs:133:28: 133:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:133:28: 133:46
                                         // + literal: Const { ty: fn() -> (pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, pubsub::crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) {pubsub::crossbeam_channel::unbounded::<(std::string::String, Vec<u8>)>}, val: Value(<ZST>) }
    }

    bb68: {
        _242 = const true;               // scope 6 at cita-jsonrpc/src/main.rs:133:10: 133:16
        _90 = move (_92.0: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 6 at cita-jsonrpc/src/main.rs:133:10: 133:16
        _91 = move (_92.1: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 6 at cita-jsonrpc/src/main.rs:133:18: 133:24
        _95 = pubsub::crossbeam_channel::unbounded::<(std::string::String, Vec<u8>)>() -> [return: bb69, unwind: bb146]; // scope 9 at cita-jsonrpc/src/main.rs:134:28: 134:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:134:28: 134:46
                                         // + literal: Const { ty: fn() -> (pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, pubsub::crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) {pubsub::crossbeam_channel::unbounded::<(std::string::String, Vec<u8>)>}, val: Value(<ZST>) }
    }

    bb69: {
        _241 = const true;               // scope 9 at cita-jsonrpc/src/main.rs:134:10: 134:16
        _93 = move (_95.0: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 9 at cita-jsonrpc/src/main.rs:134:10: 134:16
        _240 = const true;               // scope 9 at cita-jsonrpc/src/main.rs:134:18: 134:24
        _94 = move (_95.1: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 9 at cita-jsonrpc/src/main.rs:134:18: 134:24
        _98 = pubsub::crossbeam_channel::unbounded::<(std::string::String, libproto::Request)>() -> [return: bb70, unwind: bb144]; // scope 10 at cita-jsonrpc/src/main.rs:136:32: 136:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:136:32: 136:50
                                         // + literal: Const { ty: fn() -> (pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, pubsub::crossbeam_channel::Receiver<(std::string::String, libproto::Request)>) {pubsub::crossbeam_channel::unbounded::<(std::string::String, libproto::Request)>}, val: Value(<ZST>) }
    }

    bb70: {
        _239 = const true;               // scope 10 at cita-jsonrpc/src/main.rs:136:10: 136:18
        _96 = move (_98.0: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // scope 10 at cita-jsonrpc/src/main.rs:136:10: 136:18
        _238 = const true;               // scope 10 at cita-jsonrpc/src/main.rs:136:20: 136:28
        _97 = move (_98.1: pubsub::crossbeam_channel::Receiver<(std::string::String, libproto::Request)>); // scope 10 at cita-jsonrpc/src/main.rs:136:20: 136:28
        _101 = pubsub::crossbeam_channel::unbounded::<(std::string::String, Vec<u8>)>() -> [return: bb71, unwind: bb142]; // scope 11 at cita-jsonrpc/src/main.rs:138:20: 138:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:138:20: 138:38
                                         // + literal: Const { ty: fn() -> (pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, pubsub::crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) {pubsub::crossbeam_channel::unbounded::<(std::string::String, Vec<u8>)>}, val: Value(<ZST>) }
    }

    bb71: {
        _237 = const true;               // scope 11 at cita-jsonrpc/src/main.rs:138:10: 138:12
        _99 = move (_101.0: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 11 at cita-jsonrpc/src/main.rs:138:10: 138:12
        _236 = const true;               // scope 11 at cita-jsonrpc/src/main.rs:138:14: 138:16
        _100 = move (_101.1: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 11 at cita-jsonrpc/src/main.rs:138:14: 138:16
        _103 = &_90;                     // scope 12 at cita-jsonrpc/src/main.rs:139:24: 139:38
        _102 = <pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)> as Clone>::clone(move _103) -> [return: bb72, unwind: bb140]; // scope 12 at cita-jsonrpc/src/main.rs:139:24: 139:38
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:139:31: 139:36
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) -> pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)> {<pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb72: {
        _235 = const true;               // scope 12 at cita-jsonrpc/src/main.rs:139:37: 139:38
        _105 = const "jsonrpc";          // scope 13 at cita-jsonrpc/src/main.rs:142:9: 142:18
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:142:9: 142:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _108 = const 8_usize;            // scope 14 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _109 = const 1_usize;            // scope 14 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _110 = alloc::alloc::exchange_malloc(move _108, move _109) -> [return: bb73, unwind: bb172]; // scope 14 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb73: {
        _111 = ShallowInitBox(move _110, [libproto::router::RoutingKey; 4]); // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _113 = const Auth;               // scope 13 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x04)) }
        _114 = const libproto::router::MsgType::Response; // scope 13 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x02)) }
        _112 = RoutingKey(move _113, move _114); // scope 13 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _116 = const libproto::router::SubModules::Chain; // scope 13 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x02)) }
        _117 = const libproto::router::MsgType::Response; // scope 13 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x02)) }
        _115 = RoutingKey(move _116, move _117); // scope 13 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _119 = const libproto::router::SubModules::Executor; // scope 13 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x05)) }
        _120 = const libproto::router::MsgType::Response; // scope 13 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x02)) }
        _118 = RoutingKey(move _119, move _120); // scope 13 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _122 = const Net;                // scope 13 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x01)) }
        _123 = const libproto::router::MsgType::Response; // scope 13 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x02)) }
        _121 = RoutingKey(move _122, move _123); // scope 13 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _245 = (((_111.0: std::ptr::Unique<[libproto::router::RoutingKey; 4]>).0: std::ptr::NonNull<[libproto::router::RoutingKey; 4]>).0: *const [libproto::router::RoutingKey; 4]); // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        (*_245) = [move _112, move _115, move _118, move _121]; // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:37: 54:46
        _107 = move _111 as std::boxed::Box<[libproto::router::RoutingKey]> (Pointer(Unsize)); // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:54:13: 54:47
        _106 = slice::<impl [RoutingKey]>::into_vec::<std::alloc::Global>(move _107) -> [return: bb74, unwind: bb172]; // scope 13 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 55:10
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(Box<[RoutingKey]>) -> Vec<RoutingKey> {slice::<impl [RoutingKey]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb74: {
        _242 = const false;              // scope 13 at cita-jsonrpc/src/main.rs:149:9: 149:15
        _124 = move _90;                 // scope 13 at cita-jsonrpc/src/main.rs:149:9: 149:15
        _240 = const false;              // scope 13 at cita-jsonrpc/src/main.rs:150:9: 150:15
        _125 = move _94;                 // scope 13 at cita-jsonrpc/src/main.rs:150:9: 150:15
        _104 = start_pubsub::<RoutingKey>(_105, move _106, move _124, move _125) -> [return: bb75, unwind: bb172]; // scope 13 at cita-jsonrpc/src/main.rs:141:5: 151:6
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:141:5: 141:17
                                         // + literal: Const { ty: for<'a> fn(&'a str, Vec<RoutingKey>, pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, pubsub::crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) {start_pubsub::<RoutingKey>}, val: Value(<ZST>) }
    }

    bb75: {
        _126 = (_52.0: usize);           // scope 13 at cita-jsonrpc/src/main.rs:153:28: 153:51
        _129 = HashMap::<Vec<u8>, TransferType>::with_capacity(_126) -> [return: bb76, unwind: bb172]; // scope 15 at cita-jsonrpc/src/main.rs:156:41: 156:81
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:156:41: 156:63
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(usize) -> HashMap<Vec<u8>, TransferType> {HashMap::<Vec<u8>, TransferType>::with_capacity}, val: Value(<ZST>) }
    }

    bb76: {
        _128 = lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>::new(move _129) -> [return: bb77, unwind: bb172]; // scope 15 at cita-jsonrpc/src/main.rs:156:30: 156:82
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:156:30: 156:40
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(HashMap<Vec<u8>, TransferType>) -> lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>> {lock_api::mutex::Mutex::<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>::new}, val: Value(<ZST>) }
    }

    bb77: {
        _127 = Arc::<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>::new(move _128) -> [return: bb78, unwind: bb172]; // scope 15 at cita-jsonrpc/src/main.rs:156:21: 156:83
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:156:21: 156:29
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> {Arc::<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>::new}, val: Value(<ZST>) }
    }

    bb78: {
        _234 = const true;               // scope 15 at cita-jsonrpc/src/main.rs:156:82: 156:83
        _131 = &_127;                    // scope 16 at cita-jsonrpc/src/main.rs:157:37: 157:47
        _130 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone(_131) -> [return: bb79, unwind: bb170]; // scope 16 at cita-jsonrpc/src/main.rs:157:26: 157:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:157:26: 157:36
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb79: {
        _233 = const true;               // scope 16 at cita-jsonrpc/src/main.rs:157:47: 157:48
        _133 = &_127;                    // scope 17 at cita-jsonrpc/src/main.rs:158:35: 158:45
        _132 = <Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone(_133) -> [return: bb80, unwind: bb168]; // scope 17 at cita-jsonrpc/src/main.rs:158:24: 158:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:158:24: 158:34
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> {<Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb80: {
        _232 = const true;               // scope 17 at cita-jsonrpc/src/main.rs:158:45: 158:46
        _234 = const false;              // scope 18 at cita-jsonrpc/src/main.rs:159:52: 159:61
        _135 = move _127;                // scope 18 at cita-jsonrpc/src/main.rs:159:52: 159:61
        _134 = MqHandler::new(move _135) -> [return: bb81, unwind: bb166]; // scope 18 at cita-jsonrpc/src/main.rs:159:25: 159:62
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:159:25: 159:51
                                         // + literal: Const { ty: fn(Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>) -> MqHandler {MqHandler::new}, val: Value(<ZST>) }
    }

    bb81: {
        _136 = (_52.5: config::NewTxFlowConfig); // scope 19 at cita-jsonrpc/src/main.rs:162:26: 162:51
        _238 = const false;              // scope 20 at cita-jsonrpc/src/main.rs:163:19: 192:6
        _237 = const false;              // scope 20 at cita-jsonrpc/src/main.rs:163:19: 192:6
        _241 = const false;              // scope 20 at cita-jsonrpc/src/main.rs:163:19: 192:6
        _138 = [closure@cita-jsonrpc/src/main.rs:163:19: 163:26] { rx_relay: move _97, tx: move _99, tx_pub: move _93, tx_flow_config: _136 }; // scope 20 at cita-jsonrpc/src/main.rs:163:19: 192:6
                                         // closure
                                         // + def_id: DefId(0:504 ~ cita_jsonrpc[a6db]::main::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (pubsub::crossbeam_channel::Receiver<(std::string::String, libproto::Request)>, pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>, pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>, config::NewTxFlowConfig),
                                         // ]
        _137 = std::thread::spawn::<[closure@cita-jsonrpc/src/main.rs:163:19: 163:26], ()>(move _138) -> [return: bb82, unwind: bb139]; // scope 20 at cita-jsonrpc/src/main.rs:163:5: 192:7
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:163:5: 163:18
                                         // + literal: Const { ty: fn([closure@cita-jsonrpc/src/main.rs:163:19: 163:26]) -> JoinHandle<()> {std::thread::spawn::<[closure@cita-jsonrpc/src/main.rs:163:19: 163:26], ()>}, val: Value(<ZST>) }
    }

    bb82: {
        drop(_137) -> [return: bb83, unwind: bb139]; // scope 20 at cita-jsonrpc/src/main.rs:192:7: 192:8
    }

    bb83: {
        _140 = &_52;                     // scope 20 at cita-jsonrpc/src/main.rs:195:23: 195:37
        _139 = <Config as Clone>::clone(move _140) -> [return: bb84, unwind: bb139]; // scope 20 at cita-jsonrpc/src/main.rs:195:23: 195:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:195:30: 195:35
                                         // + literal: Const { ty: for<'a> fn(&'a Config) -> Config {<Config as Clone>::clone}, val: Value(<ZST>) }
    }

    bb84: {
        _236 = const false;              // scope 21 at cita-jsonrpc/src/main.rs:196:19: 208:6
        _235 = const false;              // scope 21 at cita-jsonrpc/src/main.rs:196:19: 208:6
        _142 = [closure@cita-jsonrpc/src/main.rs:196:19: 196:26] { soli_config: move _139, rx: move _100, soli_resp_tx: move _102 }; // scope 21 at cita-jsonrpc/src/main.rs:196:19: 208:6
                                         // closure
                                         // + def_id: DefId(0:505 ~ cita_jsonrpc[a6db]::main::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (config::Config, pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>, pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>),
                                         // ]
        _141 = std::thread::spawn::<[closure@cita-jsonrpc/src/main.rs:196:19: 196:26], ()>(move _142) -> [return: bb85, unwind: bb139]; // scope 21 at cita-jsonrpc/src/main.rs:196:5: 208:7
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:196:5: 196:18
                                         // + literal: Const { ty: fn([closure@cita-jsonrpc/src/main.rs:196:19: 196:26]) -> JoinHandle<()> {std::thread::spawn::<[closure@cita-jsonrpc/src/main.rs:196:19: 196:26], ()>}, val: Value(<ZST>) }
    }

    bb85: {
        drop(_141) -> [return: bb86, unwind: bb139]; // scope 21 at cita-jsonrpc/src/main.rs:208:7: 208:8
    }

    bb86: {
        _143 = ((_52.4: config::WsConfig).0: bool); // scope 21 at cita-jsonrpc/src/main.rs:211:8: 211:31
        switchInt(move _143) -> [0: bb92, otherwise: bb87]; // scope 21 at cita-jsonrpc/src/main.rs:211:8: 211:31
    }

    bb87: {
        _145 = &(_52.4: config::WsConfig); // scope 21 at cita-jsonrpc/src/main.rs:212:25: 212:49
        _144 = <WsConfig as Clone>::clone(move _145) -> [return: bb88, unwind: bb139]; // scope 21 at cita-jsonrpc/src/main.rs:212:25: 212:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:212:42: 212:47
                                         // + literal: Const { ty: for<'a> fn(&'a WsConfig) -> WsConfig {<WsConfig as Clone>::clone}, val: Value(<ZST>) }
    }

    bb88: {
        _231 = const true;               // scope 21 at cita-jsonrpc/src/main.rs:212:48: 212:49
        _147 = &_96;                     // scope 22 at cita-jsonrpc/src/main.rs:213:18: 213:34
        _146 = <pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> as Clone>::clone(move _147) -> [return: bb89, unwind: bb164]; // scope 22 at cita-jsonrpc/src/main.rs:213:18: 213:34
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:213:27: 213:32
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>) -> pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> {<pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb89: {
        _231 = const false;              // scope 23 at cita-jsonrpc/src/main.rs:214:23: 224:10
        _232 = const false;              // scope 23 at cita-jsonrpc/src/main.rs:214:23: 224:10
        _149 = [closure@cita-jsonrpc/src/main.rs:214:23: 214:30] { ws_config: move _144, ws_responses: move _132, tx: move _146 }; // scope 23 at cita-jsonrpc/src/main.rs:214:23: 224:10
                                         // closure
                                         // + def_id: DefId(0:506 ~ cita_jsonrpc[a6db]::main::{closure#2})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (config::WsConfig, std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>),
                                         // ]
        _148 = std::thread::spawn::<[closure@cita-jsonrpc/src/main.rs:214:23: 214:30], ()>(move _149) -> [return: bb90, unwind: bb164]; // scope 23 at cita-jsonrpc/src/main.rs:214:9: 224:11
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:214:9: 214:22
                                         // + literal: Const { ty: fn([closure@cita-jsonrpc/src/main.rs:214:23: 214:30]) -> JoinHandle<()> {std::thread::spawn::<[closure@cita-jsonrpc/src/main.rs:214:23: 214:30], ()>}, val: Value(<ZST>) }
    }

    bb90: {
        drop(_148) -> [return: bb91, unwind: bb164]; // scope 23 at cita-jsonrpc/src/main.rs:224:11: 224:12
    }

    bb91: {
        _231 = const false;              // scope 21 at cita-jsonrpc/src/main.rs:225:5: 225:6
        goto -> bb92;                    // scope 21 at cita-jsonrpc/src/main.rs:211:5: 225:6
    }

    bb92: {
        _150 = ((_52.3: config::HttpConfig).0: bool); // scope 21 at cita-jsonrpc/src/main.rs:227:8: 227:33
        switchInt(move _150) -> [0: bb124, otherwise: bb93]; // scope 21 at cita-jsonrpc/src/main.rs:227:8: 227:33
    }

    bb93: {
        _152 = &(_52.3: config::HttpConfig); // scope 21 at cita-jsonrpc/src/main.rs:228:27: 228:53
        _151 = <HttpConfig as Clone>::clone(move _152) -> [return: bb94, unwind: bb139]; // scope 21 at cita-jsonrpc/src/main.rs:228:27: 228:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:228:46: 228:51
                                         // + literal: Const { ty: for<'a> fn(&'a HttpConfig) -> HttpConfig {<HttpConfig as Clone>::clone}, val: Value(<ZST>) }
    }

    bb94: {
        _230 = const true;               // scope 21 at cita-jsonrpc/src/main.rs:228:52: 228:53
        _156 = &(_151.2: std::string::String); // scope 24 at cita-jsonrpc/src/main.rs:230:13: 230:42
        _155 = <std::string::String as Clone>::clone(move _156) -> [return: bb95, unwind: bb162]; // scope 24 at cita-jsonrpc/src/main.rs:230:13: 230:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:230:35: 230:40
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> std::string::String {<std::string::String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb95: {
        _157 = const ":";                // scope 24 at cita-jsonrpc/src/main.rs:230:45: 230:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:230:45: 230:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _154 = <std::string::String as Add<&str>>::add(move _155, _157) -> [return: bb96, unwind: bb162]; // scope 24 at cita-jsonrpc/src/main.rs:230:13: 230:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:230:13: 230:48
                                         // + literal: Const { ty: fn(std::string::String, &str) -> <std::string::String as Add<&str>>::Output {<std::string::String as Add<&str>>::add}, val: Value(<ZST>) }
    }

    bb96: {
        _229 = const true;               // scope 24 at cita-jsonrpc/src/main.rs:230:47: 230:48
        _164 = &(_151.3: std::string::String); // scope 24 at cita-jsonrpc/src/main.rs:230:52: 230:83
        _163 = <std::string::String as Clone>::clone(move _164) -> [return: bb97, unwind: bb138]; // scope 24 at cita-jsonrpc/src/main.rs:230:52: 230:83
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:230:76: 230:81
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> std::string::String {<std::string::String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb97: {
        _162 = &_163;                    // scope 24 at cita-jsonrpc/src/main.rs:230:52: 230:95
        _161 = <std::string::String as ToString>::to_string(move _162) -> [return: bb98, unwind: bb136]; // scope 24 at cita-jsonrpc/src/main.rs:230:52: 230:95
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:230:84: 230:93
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> std::string::String {<std::string::String as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb98: {
        _160 = &_161;                    // scope 24 at cita-jsonrpc/src/main.rs:230:51: 230:95
        _159 = <std::string::String as Deref>::deref(_160) -> [return: bb99, unwind: bb158]; // scope 24 at cita-jsonrpc/src/main.rs:230:51: 230:95
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:230:51: 230:95
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb99: {
        _158 = _159;                     // scope 24 at cita-jsonrpc/src/main.rs:230:51: 230:95
        _229 = const false;              // scope 24 at cita-jsonrpc/src/main.rs:230:13: 230:95
        _153 = <std::string::String as Add<&str>>::add(move _154, move _158) -> [return: bb100, unwind: bb158]; // scope 24 at cita-jsonrpc/src/main.rs:230:13: 230:95
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:230:13: 230:95
                                         // + literal: Const { ty: fn(std::string::String, &str) -> <std::string::String as Add<&str>>::Output {<std::string::String as Add<&str>>::add}, val: Value(<ZST>) }
    }

    bb100: {
        _229 = const false;              // scope 24 at cita-jsonrpc/src/main.rs:230:94: 230:95
        drop(_161) -> [return: bb101, unwind: bb133]; // scope 24 at cita-jsonrpc/src/main.rs:230:95: 230:96
    }

    bb101: {
        drop(_163) -> [return: bb102, unwind: bb134]; // scope 24 at cita-jsonrpc/src/main.rs:230:95: 230:96
    }

    bb102: {
        _165 = log::Level::Info;         // scope 25 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _168 = &_165;                    // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _212 = const _;                  // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main, [], Some(promoted[2])) }
        _167 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _168, _212) -> [return: bb106, unwind: bb134]; // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb103: {
        _166 = const false;              // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb105;                   // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb104: {
        _170 = &_165;                    // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _172 = log::max_level() -> [return: bb107, unwind: bb134]; // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb105: {
        switchInt(move _166) -> [0: bb112, otherwise: bb109]; // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb106: {
        switchInt(move _167) -> [0: bb103, otherwise: bb104]; // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb107: {
        _171 = &_172;                    // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _169 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _170, move _171) -> [return: bb108, unwind: bb134]; // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb108: {
        _166 = move _169;                // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb105;                   // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb109: {
        _211 = const _;                  // scope 26 at cita-jsonrpc/src/main.rs:231:15: 231:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:231:15: 231:37
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _175 = _211 as &[&str] (Pointer(Unsize)); // scope 26 at cita-jsonrpc/src/main.rs:231:15: 231:37
        _181 = &_153;                    // scope 26 at cita-jsonrpc/src/main.rs:231:39: 231:44
        _180 = &_181;                    // scope 26 at cita-jsonrpc/src/main.rs:231:39: 231:44
        _179 = core::fmt::ArgumentV1::<'_>::new_display::<&std::string::String>(_180) -> [return: bb110, unwind: bb134]; // scope 26 at cita-jsonrpc/src/main.rs:231:39: 231:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:231:39: 231:44
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: for<'b> fn(&'b &std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&std::string::String>}, val: Value(<ZST>) }
    }

    bb110: {
        _178 = [move _179];              // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _177 = &_178;                    // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _176 = _177 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _174 = Arguments::<'_>::new_v1(move _175, move _176) -> [return: bb111, unwind: bb134]; // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb111: {
        _210 = const _;                  // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main, [], Some(promoted[0])) }
        _173 = log::__private_api_log(move _174, _165, _210) -> [return: bb191, unwind: bb134]; // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb112: {
        _183 = ((_52.3: config::HttpConfig).1: std::option::Option<usize>); // scope 25 at cita-jsonrpc/src/main.rs:233:30: 235:27
        _182 = std::option::Option::<usize>::unwrap_or_else::<fn() -> usize {num_cpus::get}>(move _183, num_cpus::get) -> [return: bb113, unwind: bb134]; // scope 25 at cita-jsonrpc/src/main.rs:233:30: 236:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:236:14: 236:28
                                         // + literal: Const { ty: fn(std::option::Option<usize>, fn() -> usize {num_cpus::get}) -> usize {std::option::Option::<usize>::unwrap_or_else::<fn() -> usize {num_cpus::get}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:236:29: 236:42
                                         // + literal: Const { ty: fn() -> usize {num_cpus::get}, val: Value(<ZST>) }
    }

    bb113: {
        _188 = &_153;                    // scope 27 at cita-jsonrpc/src/main.rs:238:20: 238:32
        _187 = <std::string::String as Deref>::deref(move _188) -> [return: bb114, unwind: bb134]; // scope 27 at cita-jsonrpc/src/main.rs:238:20: 238:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:238:20: 238:32
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb114: {
        _186 = _187;                     // scope 27 at cita-jsonrpc/src/main.rs:238:20: 238:32
        _185 = core::str::<impl str>::parse::<std::net::SocketAddr>(move _186) -> [return: bb115, unwind: bb134]; // scope 27 at cita-jsonrpc/src/main.rs:238:20: 238:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:238:25: 238:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<std::net::SocketAddr, <std::net::SocketAddr as FromStr>::Err> {core::str::<impl str>::parse::<std::net::SocketAddr>}, val: Value(<ZST>) }
    }

    bb115: {
        _184 = Result::<std::net::SocketAddr, AddrParseError>::unwrap(move _185) -> [return: bb116, unwind: bb134]; // scope 27 at cita-jsonrpc/src/main.rs:238:20: 238:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:238:33: 238:39
                                         // + literal: Const { ty: fn(Result<std::net::SocketAddr, AddrParseError>) -> std::net::SocketAddr {Result::<std::net::SocketAddr, AddrParseError>::unwrap}, val: Value(<ZST>) }
    }

    bb116: {
        _189 = (_151.4: u64);            // scope 28 at cita-jsonrpc/src/main.rs:239:23: 239:42
        _230 = const false;              // scope 29 at cita-jsonrpc/src/main.rs:240:28: 240:52
        _228 = const true;               // scope 29 at cita-jsonrpc/src/main.rs:240:28: 240:52
        _190 = move (_151.5: std::option::Option<std::string::String>); // scope 29 at cita-jsonrpc/src/main.rs:240:28: 240:52
        _194 = std::thread::Builder::new() -> [return: bb117, unwind: bb156]; // scope 30 at cita-jsonrpc/src/main.rs:241:17: 241:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:241:17: 241:37
                                         // + literal: Const { ty: fn() -> std::thread::Builder {std::thread::Builder::new}, val: Value(<ZST>) }
    }

    bb117: {
        _227 = const true;               // scope 30 at cita-jsonrpc/src/main.rs:242:19: 242:46
        _195 = <std::string::String as From<&str>>::from(const "http worker") -> [return: bb118, unwind: bb154]; // scope 30 at cita-jsonrpc/src/main.rs:242:19: 242:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:242:19: 242:31
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: fn(&str) -> std::string::String {<std::string::String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:242:32: 242:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb118: {
        _227 = const false;              // scope 30 at cita-jsonrpc/src/main.rs:241:17: 242:47
        _193 = std::thread::Builder::name(move _194, move _195) -> [return: bb119, unwind: bb154]; // scope 30 at cita-jsonrpc/src/main.rs:241:17: 242:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:242:14: 242:18
                                         // + literal: Const { ty: fn(std::thread::Builder, std::string::String) -> std::thread::Builder {std::thread::Builder::name}, val: Value(<ZST>) }
    }

    bb119: {
        _227 = const false;              // scope 30 at cita-jsonrpc/src/main.rs:242:46: 242:47
        _239 = const false;              // scope 30 at cita-jsonrpc/src/main.rs:243:20: 261:14
        _233 = const false;              // scope 30 at cita-jsonrpc/src/main.rs:243:20: 261:14
        _228 = const false;              // scope 30 at cita-jsonrpc/src/main.rs:243:20: 261:14
        _196 = [closure@cita-jsonrpc/src/main.rs:243:20: 243:27] { addr: _184, tx_relay: move _96, http_responses: move _130, timeout: _189, allow_origin: move _190, threads: _182 }; // scope 30 at cita-jsonrpc/src/main.rs:243:20: 261:14
                                         // closure
                                         // + def_id: DefId(0:507 ~ cita_jsonrpc[a6db]::main::{closure#3})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (std::net::SocketAddr, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>, u64, std::option::Option<std::string::String>, usize),
                                         // ]
        _192 = std::thread::Builder::spawn::<[closure@cita-jsonrpc/src/main.rs:243:20: 243:27], ()>(move _193, move _196) -> [return: bb120, unwind: bb156]; // scope 30 at cita-jsonrpc/src/main.rs:241:17: 261:15
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:243:14: 243:19
                                         // + literal: Const { ty: fn(std::thread::Builder, [closure@cita-jsonrpc/src/main.rs:243:20: 243:27]) -> Result<JoinHandle<()>, std::io::Error> {std::thread::Builder::spawn::<[closure@cita-jsonrpc/src/main.rs:243:20: 243:27], ()>}, val: Value(<ZST>) }
    }

    bb120: {
        _191 = Result::<JoinHandle<()>, std::io::Error>::unwrap(move _192) -> [return: bb121, unwind: bb156]; // scope 30 at cita-jsonrpc/src/main.rs:241:17: 262:22
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:262:14: 262:20
                                         // + literal: Const { ty: fn(Result<JoinHandle<()>, std::io::Error>) -> JoinHandle<()> {Result::<JoinHandle<()>, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb121: {
        drop(_191) -> [return: bb122, unwind: bb156]; // scope 30 at cita-jsonrpc/src/main.rs:262:22: 262:23
    }

    bb122: {
        _228 = const false;              // scope 29 at cita-jsonrpc/src/main.rs:263:5: 263:6
        drop(_153) -> [return: bb123, unwind: bb162]; // scope 24 at cita-jsonrpc/src/main.rs:263:5: 263:6
    }

    bb123: {
        drop((_151.2: std::string::String)) -> [return: bb152, unwind: bb150]; // scope 21 at cita-jsonrpc/src/main.rs:263:5: 263:6
    }

    bb124: {
        _201 = &_91;                     // scope 21 at cita-jsonrpc/src/main.rs:266:26: 266:39
        _200 = pubsub::crossbeam_channel::Receiver::<(std::string::String, Vec<u8>)>::recv(move _201) -> [return: bb125, unwind: bb139]; // scope 21 at cita-jsonrpc/src/main.rs:266:26: 266:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:266:33: 266:37
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) -> Result<(std::string::String, Vec<u8>), pubsub::crossbeam_channel::RecvError> {pubsub::crossbeam_channel::Receiver::<(std::string::String, Vec<u8>)>::recv}, val: Value(<ZST>) }
    }

    bb125: {
        _199 = Result::<(std::string::String, Vec<u8>), pubsub::crossbeam_channel::RecvError>::unwrap(move _200) -> [return: bb126, unwind: bb139]; // scope 21 at cita-jsonrpc/src/main.rs:266:26: 266:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:266:40: 266:46
                                         // + literal: Const { ty: fn(Result<(std::string::String, Vec<u8>), pubsub::crossbeam_channel::RecvError>) -> (std::string::String, Vec<u8>) {Result::<(std::string::String, Vec<u8>), pubsub::crossbeam_channel::RecvError>::unwrap}, val: Value(<ZST>) }
    }

    bb126: {
        _197 = move (_199.0: std::string::String); // scope 21 at cita-jsonrpc/src/main.rs:266:14: 266:17
        _198 = move (_199.1: std::vec::Vec<u8>); // scope 21 at cita-jsonrpc/src/main.rs:266:19: 266:22
        _203 = &mut _134;                // scope 32 at cita-jsonrpc/src/main.rs:267:17: 267:45
        _206 = &_197;                    // scope 32 at cita-jsonrpc/src/main.rs:267:34: 267:38
        _205 = <std::string::String as Deref>::deref(_206) -> [return: bb127, unwind: bb131]; // scope 32 at cita-jsonrpc/src/main.rs:267:34: 267:38
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:267:34: 267:38
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb127: {
        _204 = _205;                     // scope 32 at cita-jsonrpc/src/main.rs:267:34: 267:38
        _209 = &_198;                    // scope 32 at cita-jsonrpc/src/main.rs:267:40: 267:44
        _208 = <Vec<u8> as Deref>::deref(_209) -> [return: bb128, unwind: bb131]; // scope 32 at cita-jsonrpc/src/main.rs:267:40: 267:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:267:40: 267:44
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb128: {
        _207 = _208;                     // scope 32 at cita-jsonrpc/src/main.rs:267:40: 267:44
        _202 = MqHandler::handle(move _203, move _204, move _207) -> [return: bb129, unwind: bb131]; // scope 32 at cita-jsonrpc/src/main.rs:267:17: 267:45
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:267:27: 267:33
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut MqHandler, &'b str, &'c [u8]) -> Result<(), ()> {MqHandler::handle}, val: Value(<ZST>) }
    }

    bb129: {
        drop(_198) -> [return: bb130, unwind: bb132]; // scope 21 at cita-jsonrpc/src/main.rs:268:5: 268:6
    }

    bb130: {
        drop(_197) -> [return: bb124, unwind: bb139]; // scope 21 at cita-jsonrpc/src/main.rs:268:5: 268:6
    }

    bb131 (cleanup): {
        drop(_198) -> bb132;             // scope 21 at cita-jsonrpc/src/main.rs:268:5: 268:6
    }

    bb132 (cleanup): {
        drop(_197) -> bb139;             // scope 21 at cita-jsonrpc/src/main.rs:268:5: 268:6
    }

    bb133 (cleanup): {
        drop(_163) -> bb134;             // scope 24 at cita-jsonrpc/src/main.rs:230:95: 230:96
    }

    bb134 (cleanup): {
        drop(_153) -> bb162;             // scope 24 at cita-jsonrpc/src/main.rs:263:5: 263:6
    }

    bb135 (cleanup): {
        drop(_161) -> bb137;             // scope 24 at cita-jsonrpc/src/main.rs:230:95: 230:96
    }

    bb136 (cleanup): {
        drop(_154) -> bb137;             // scope 24 at cita-jsonrpc/src/main.rs:230:94: 230:95
    }

    bb137 (cleanup): {
        drop(_163) -> bb162;             // scope 24 at cita-jsonrpc/src/main.rs:230:95: 230:96
    }

    bb138 (cleanup): {
        drop(_154) -> bb162;             // scope 24 at cita-jsonrpc/src/main.rs:230:94: 230:95
    }

    bb139 (cleanup): {
        drop(_134) -> bb166;             // scope 18 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb140 (cleanup): {
        switchInt(_236) -> [0: bb141, otherwise: bb173]; // scope 11 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb141 (cleanup): {
        switchInt(_237) -> [0: bb142, otherwise: bb174]; // scope 11 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb142 (cleanup): {
        switchInt(_238) -> [0: bb143, otherwise: bb175]; // scope 10 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb143 (cleanup): {
        switchInt(_239) -> [0: bb144, otherwise: bb176]; // scope 10 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb144 (cleanup): {
        switchInt(_240) -> [0: bb145, otherwise: bb177]; // scope 9 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb145 (cleanup): {
        switchInt(_241) -> [0: bb146, otherwise: bb178]; // scope 9 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb146 (cleanup): {
        drop(_91) -> bb180;              // scope 6 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb147 (cleanup): {
        drop(_52) -> bb148;              // scope 5 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb148 (cleanup): {
        drop(_1) -> bb149;               // scope 0 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb149 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/main.rs:100:1: 269:2
    }

    bb150 (cleanup): {
        drop((_151.3: std::string::String)) -> bb139; // scope 21 at cita-jsonrpc/src/main.rs:263:5: 263:6
    }

    bb151: {
        _230 = const false;              // scope 21 at cita-jsonrpc/src/main.rs:263:5: 263:6
        goto -> bb124;                   // scope 21 at cita-jsonrpc/src/main.rs:227:5: 263:6
    }

    bb152: {
        drop((_151.3: std::string::String)) -> [return: bb151, unwind: bb139]; // scope 21 at cita-jsonrpc/src/main.rs:263:5: 263:6
    }

    bb153 (cleanup): {
        drop(_194) -> bb156;             // scope 30 at cita-jsonrpc/src/main.rs:242:46: 242:47
    }

    bb154 (cleanup): {
        switchInt(_227) -> [0: bb156, otherwise: bb153]; // scope 30 at cita-jsonrpc/src/main.rs:242:46: 242:47
    }

    bb155 (cleanup): {
        drop(_190) -> bb134;             // scope 29 at cita-jsonrpc/src/main.rs:263:5: 263:6
    }

    bb156 (cleanup): {
        switchInt(_228) -> [0: bb134, otherwise: bb155]; // scope 29 at cita-jsonrpc/src/main.rs:263:5: 263:6
    }

    bb157 (cleanup): {
        drop(_154) -> bb135;             // scope 24 at cita-jsonrpc/src/main.rs:230:94: 230:95
    }

    bb158 (cleanup): {
        switchInt(_229) -> [0: bb135, otherwise: bb157]; // scope 24 at cita-jsonrpc/src/main.rs:230:94: 230:95
    }

    bb159 (cleanup): {
        switchInt(_230) -> [0: bb139, otherwise: bb160]; // scope 21 at cita-jsonrpc/src/main.rs:263:5: 263:6
    }

    bb160 (cleanup): {
        drop((_151.5: std::option::Option<std::string::String>)) -> bb139; // scope 21 at cita-jsonrpc/src/main.rs:263:5: 263:6
    }

    bb161 (cleanup): {
        drop((_151.3: std::string::String)) -> bb159; // scope 21 at cita-jsonrpc/src/main.rs:263:5: 263:6
    }

    bb162 (cleanup): {
        drop((_151.2: std::string::String)) -> bb161; // scope 21 at cita-jsonrpc/src/main.rs:263:5: 263:6
    }

    bb163 (cleanup): {
        drop(_144) -> bb139;             // scope 21 at cita-jsonrpc/src/main.rs:225:5: 225:6
    }

    bb164 (cleanup): {
        switchInt(_231) -> [0: bb139, otherwise: bb163]; // scope 21 at cita-jsonrpc/src/main.rs:225:5: 225:6
    }

    bb165 (cleanup): {
        drop(_132) -> bb168;             // scope 17 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb166 (cleanup): {
        switchInt(_232) -> [0: bb168, otherwise: bb165]; // scope 17 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb167 (cleanup): {
        drop(_130) -> bb170;             // scope 16 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb168 (cleanup): {
        switchInt(_233) -> [0: bb170, otherwise: bb167]; // scope 16 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb169 (cleanup): {
        drop(_127) -> bb172;             // scope 15 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb170 (cleanup): {
        switchInt(_234) -> [0: bb172, otherwise: bb169]; // scope 15 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb171 (cleanup): {
        drop(_102) -> bb140;             // scope 12 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb172 (cleanup): {
        switchInt(_235) -> [0: bb140, otherwise: bb171]; // scope 12 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb173 (cleanup): {
        drop(_100) -> bb141;             // scope 11 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb174 (cleanup): {
        drop(_99) -> bb142;              // scope 11 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb175 (cleanup): {
        drop(_97) -> bb143;              // scope 10 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb176 (cleanup): {
        drop(_96) -> bb144;              // scope 10 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb177 (cleanup): {
        drop(_94) -> bb145;              // scope 9 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb178 (cleanup): {
        drop(_93) -> bb146;              // scope 9 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb179 (cleanup): {
        drop(_90) -> bb147;              // scope 6 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb180 (cleanup): {
        switchInt(_242) -> [0: bb147, otherwise: bb179]; // scope 6 at cita-jsonrpc/src/main.rs:269:1: 269:2
    }

    bb181 (cleanup): {
        drop(_6) -> bb149;               // scope 0 at cita-jsonrpc/src/main.rs:103:48: 103:49
    }

    bb182 (cleanup): {
        switchInt(_243) -> [0: bb149, otherwise: bb181]; // scope 0 at cita-jsonrpc/src/main.rs:103:48: 103:49
    }

    bb183 (cleanup): {
        drop(_7) -> bb149;               // scope 0 at cita-jsonrpc/src/main.rs:102:42: 102:43
    }

    bb184 (cleanup): {
        switchInt(_244) -> [0: bb149, otherwise: bb183]; // scope 0 at cita-jsonrpc/src/main.rs:102:42: 102:43
    }

    bb185: {
        goto -> bb18;                    // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:13: 30:64
    }

    bb186: {
        goto -> bb18;                    // scope 2 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:13: 32:62
    }

    bb187: {
        goto -> bb27;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb188: {
        goto -> bb38;                    // scope 4 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb189: {
        goto -> bb51;                    // scope 7 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb190: {
        goto -> bb64;                    // scope 8 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb191: {
        goto -> bb112;                   // scope 26 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:231:9: 231:45
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:231:9: 231:45

    bb0: {
        _3 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/main.rs"; // scope 0 at cita-jsonrpc/src/main.rs:231:9: 231:45
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:231:9: 231:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/main.rs:231:9: 231:45
        _1 = (move _2, move _4, move _6, const 231_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/main.rs:231:15: 231:37
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/main.rs:231:15: 231:37

    bb0: {
        _1 = [const "Http Listening on "]; // scope 0 at cita-jsonrpc/src/main.rs:231:15: 231:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:231:15: 231:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/main.rs:231:15: 231:37
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:231:15: 231:37
    }
}

promoted[2] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:123:9: 123:75
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:123:9: 123:75

    bb0: {
        _3 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/main.rs"; // scope 0 at cita-jsonrpc/src/main.rs:123:9: 123:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:123:9: 123:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/main.rs:123:9: 123:75
        _1 = (move _2, move _4, move _6, const 123_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/main.rs:123:16: 123:74
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/main.rs:123:16: 123:74

    bb0: {
        _1 = [const "Please at least enable one of HTTP and WebSocket server!"]; // scope 0 at cita-jsonrpc/src/main.rs:123:16: 123:74
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:123:16: 123:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/main.rs:123:16: 123:74
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:123:16: 123:74
    }
}

promoted[5] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[6] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:119:5: 119:49
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:119:5: 119:49

    bb0: {
        _3 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/main.rs"; // scope 0 at cita-jsonrpc/src/main.rs:119:5: 119:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:119:5: 119:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/main.rs:119:5: 119:49
        _1 = (move _2, move _4, move _6, const 119_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/main.rs:119:11: 119:40
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/main.rs:119:11: 119:40

    bb0: {
        _1 = [const "CITA:jsonrpc config \n "]; // scope 0 at cita-jsonrpc/src/main.rs:119:11: 119:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:119:11: 119:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/main.rs:119:11: 119:40
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:119:11: 119:40
    }
}

promoted[8] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[9] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:114:5: 114:51
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:114:5: 114:51

    bb0: {
        _3 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/main.rs"; // scope 0 at cita-jsonrpc/src/main.rs:114:5: 114:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:114:5: 114:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/main.rs:114:5: 114:51
        _1 = (move _2, move _4, move _6, const 114_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[10] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/main.rs:114:11: 114:24
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/main.rs:114:11: 114:24

    bb0: {
        _1 = [const "Version: "];        // scope 0 at cita-jsonrpc/src/main.rs:114:11: 114:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:114:11: 114:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/main.rs:114:11: 114:24
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:114:11: 114:24
    }
}

promoted[11] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[12] in main: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:113:5: 113:64
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:113:5: 113:64

    bb0: {
        _3 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/main.rs"; // scope 0 at cita-jsonrpc/src/main.rs:113:5: 113:64
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:113:5: 113:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/main.rs:113:5: 113:64
        _1 = (move _2, move _4, move _6, const 113_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[13] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/main.rs:113:41: 113:55
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/main.rs:113:41: 113:55

    bb0: {
        _1 = [const "CITA:jsonrpc"];     // scope 0 at cita-jsonrpc/src/main.rs:113:41: 113:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:113:41: 113:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/main.rs:113:41: 113:55
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:113:41: 113:55
    }
}

promoted[14] in main: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[15] in main: &LogFavour<'_> = {
    let mut _0: &logger::LogFavour<'_>;  // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:33: 32:61
    let mut _1: logger::LogFavour<'_>;   // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:34: 32:61
    let mut _2: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:113:25: 113:39
    let mut _3: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:113:25: 113:39

    bb0: {
        _3 = const "cita-jsonrpc";       // scope 0 at cita-jsonrpc/src/main.rs:113:25: 113:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:113:25: 113:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-jsonrpc/src/main.rs:113:25: 113:39
        _1 = LogFavour::<'_>::File(move _2); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:34: 32:61
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:33: 32:61
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:32:33: 32:61
    }
}

promoted[16] in main: &LogFavour<'_> = {
    let mut _0: &logger::LogFavour<'_>;  // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:33: 30:63
    let mut _1: logger::LogFavour<'_>;   // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:34: 30:63
    let mut _2: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:113:25: 113:39
    let mut _3: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:113:25: 113:39

    bb0: {
        _3 = const "cita-jsonrpc";       // scope 0 at cita-jsonrpc/src/main.rs:113:25: 113:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:113:25: 113:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at cita-jsonrpc/src/main.rs:113:25: 113:39
        _1 = LogFavour::<'_>::Stdout(move _2); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:34: 30:63
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:33: 30:63
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/util/src/init.rs:30:33: 30:63
    }
}

fn main::{closure#0}(_1: [closure@cita-jsonrpc/src/main.rs:163:19: 163:26]) -> () {
    debug rx_relay => (_1.0: pubsub::crossbeam_channel::Receiver<(std::string::String, libproto::Request)>); // in scope 0 at cita-jsonrpc/src/main.rs:136:20: 136:28
    debug tx => (_1.1: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-jsonrpc/src/main.rs:138:10: 138:12
    debug tx_pub => (_1.2: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-jsonrpc/src/main.rs:134:10: 134:16
    debug tx_flow_config => (_1.3: config::NewTxFlowConfig); // in scope 0 at cita-jsonrpc/src/main.rs:162:9: 162:23
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/main.rs:163:27: 163:27
    let mut _2: std::vec::Vec<libproto::Request>; // in scope 0 at cita-jsonrpc/src/main.rs:164:13: 164:38
    let mut _4: std::result::Result<(std::string::String, libproto::Request), pubsub::crossbeam_channel::TryRecvError>; // in scope 0 at cita-jsonrpc/src/main.rs:167:30: 167:49
    let mut _5: &pubsub::crossbeam_channel::Receiver<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/main.rs:167:30: 167:49
    let mut _6: isize;                   // in scope 0 at cita-jsonrpc/src/main.rs:167:20: 167:27
    let mut _10: libproto::router::RoutingKey; // in scope 0 at cita-jsonrpc/src/main.rs:169:23: 169:47
    let mut _11: &std::string::String;   // in scope 0 at cita-jsonrpc/src/main.rs:169:40: 169:46
    let mut _12: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _13: isize;                  // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _15: libproto::Request;      // in scope 0 at cita-jsonrpc/src/main.rs:171:45: 171:48
    let _16: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:172:25: 172:76
    let mut _17: std::result::Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, std::vec::Vec<u8>)>>; // in scope 0 at cita-jsonrpc/src/main.rs:172:25: 172:67
    let mut _18: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-jsonrpc/src/main.rs:172:25: 172:67
    let mut _19: (std::string::String, std::vec::Vec<u8>); // in scope 0 at cita-jsonrpc/src/main.rs:172:33: 172:66
    let mut _20: std::string::String;    // in scope 0 at cita-jsonrpc/src/main.rs:172:34: 172:39
    let mut _21: std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/main.rs:172:41: 172:65
    let mut _22: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-jsonrpc/src/main.rs:172:41: 172:56
    let mut _23: libproto::Message;      // in scope 0 at cita-jsonrpc/src/main.rs:172:41: 172:45
    let _24: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:175:25: 182:26
    let mut _25: std::string::String;    // in scope 0 at cita-jsonrpc/src/main.rs:176:29: 176:34
    let mut _26: libproto::Request;      // in scope 0 at cita-jsonrpc/src/main.rs:177:29: 177:32
    let mut _27: &mut std::vec::Vec<libproto::Request>; // in scope 0 at cita-jsonrpc/src/main.rs:178:29: 178:55
    let mut _28: &mut std::time::SystemTime; // in scope 0 at cita-jsonrpc/src/main.rs:179:29: 179:44
    let _29: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-jsonrpc/src/main.rs:180:29: 180:36
    let _30: &config::NewTxFlowConfig;   // in scope 0 at cita-jsonrpc/src/main.rs:181:29: 181:44
    let mut _31: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:186:20: 186:53
    let mut _32: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:186:21: 186:53
    let mut _33: &std::vec::Vec<libproto::Request>; // in scope 0 at cita-jsonrpc/src/main.rs:186:21: 186:53
    let _34: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:187:21: 187:95
    let mut _35: &mut std::vec::Vec<libproto::Request>; // in scope 0 at cita-jsonrpc/src/main.rs:187:42: 187:68
    let mut _36: &mut std::time::SystemTime; // in scope 0 at cita-jsonrpc/src/main.rs:187:70: 187:85
    let _37: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-jsonrpc/src/main.rs:187:87: 187:94
    let _38: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:189:17: 189:80
    let mut _39: std::time::Duration;    // in scope 0 at cita-jsonrpc/src/main.rs:189:31: 189:79
    let mut _40: u32;                    // in scope 0 at cita-jsonrpc/src/main.rs:189:48: 189:78
    let mut _41: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:191:9: 191:10
    let mut _42: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:185:13: 185:14
    let mut _43: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:185:13: 185:14
    let mut _44: isize;                  // in scope 0 at cita-jsonrpc/src/main.rs:191:9: 191:10
    let mut _45: isize;                  // in scope 0 at cita-jsonrpc/src/main.rs:191:9: 191:10
    scope 1 {
        debug new_tx_request_buffer => _2; // in scope 1 at cita-jsonrpc/src/main.rs:164:13: 164:38
        let mut _3: std::time::SystemTime; // in scope 1 at cita-jsonrpc/src/main.rs:165:13: 165:27
        scope 2 {
            debug time_stamp => _3;      // in scope 2 at cita-jsonrpc/src/main.rs:165:13: 165:27
            scope 3 {
                debug res => _7;         // in scope 3 at cita-jsonrpc/src/main.rs:167:23: 167:26
                let _7: (std::string::String, libproto::Request); // in scope 3 at cita-jsonrpc/src/main.rs:167:23: 167:26
                let _8: std::string::String; // in scope 3 at cita-jsonrpc/src/main.rs:168:22: 168:27
                let _9: libproto::Request; // in scope 3 at cita-jsonrpc/src/main.rs:168:29: 168:32
                scope 4 {
                    debug topic => _8;   // in scope 4 at cita-jsonrpc/src/main.rs:168:22: 168:27
                    debug req => _9;     // in scope 4 at cita-jsonrpc/src/main.rs:168:29: 168:32
                    let _14: libproto::Message; // in scope 4 at cita-jsonrpc/src/main.rs:171:29: 171:33
                    scope 5 {
                        debug data => _14; // in scope 5 at cita-jsonrpc/src/main.rs:171:29: 171:33
                    }
                }
            }
        }
    }

    bb0: {
        _41 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:164:13: 164:38
        _43 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:164:13: 164:38
        _42 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:164:13: 164:38
        _2 = Vec::<libproto::Request>::new() -> [return: bb1, unwind: bb22]; // scope 0 at cita-jsonrpc/src/main.rs:164:41: 164:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:164:41: 164:49
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<libproto::Request> {Vec::<libproto::Request>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = SystemTime::now() -> [return: bb34, unwind: bb21]; // scope 1 at cita-jsonrpc/src/main.rs:165:30: 165:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:165:30: 165:45
                                         // + literal: Const { ty: fn() -> SystemTime {SystemTime::now}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &(_1.0: pubsub::crossbeam_channel::Receiver<(std::string::String, libproto::Request)>); // scope 3 at cita-jsonrpc/src/main.rs:167:30: 167:49
        _4 = pubsub::crossbeam_channel::Receiver::<(std::string::String, libproto::Request)>::try_recv(move _5) -> [return: bb3, unwind: bb21]; // scope 3 at cita-jsonrpc/src/main.rs:167:30: 167:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:167:39: 167:47
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Receiver<(std::string::String, libproto::Request)>) -> Result<(std::string::String, libproto::Request), pubsub::crossbeam_channel::TryRecvError> {pubsub::crossbeam_channel::Receiver::<(std::string::String, libproto::Request)>::try_recv}, val: Value(<ZST>) }
    }

    bb3: {
        _41 = const true;                // scope 3 at cita-jsonrpc/src/main.rs:167:48: 167:49
        _6 = discriminant(_4);           // scope 3 at cita-jsonrpc/src/main.rs:167:20: 167:27
        switchInt(move _6) -> [0: bb4, otherwise: bb14]; // scope 3 at cita-jsonrpc/src/main.rs:167:20: 167:27
    }

    bb4: {
        _41 = const false;               // scope 3 at cita-jsonrpc/src/main.rs:167:23: 167:26
        _7 = move ((_4 as Ok).0: (std::string::String, libproto::Request)); // scope 3 at cita-jsonrpc/src/main.rs:167:23: 167:26
        _43 = const true;                // scope 3 at cita-jsonrpc/src/main.rs:168:22: 168:27
        _8 = move (_7.0: std::string::String); // scope 3 at cita-jsonrpc/src/main.rs:168:22: 168:27
        _42 = const true;                // scope 3 at cita-jsonrpc/src/main.rs:168:29: 168:32
        _9 = move (_7.1: libproto::Request); // scope 3 at cita-jsonrpc/src/main.rs:168:29: 168:32
        _11 = &_8;                       // scope 4 at cita-jsonrpc/src/main.rs:169:40: 169:46
        _10 = <RoutingKey as From<&std::string::String>>::from(move _11) -> [return: bb5, unwind: bb29]; // scope 4 at cita-jsonrpc/src/main.rs:169:23: 169:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:169:23: 169:39
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&std::string::String) -> RoutingKey {<RoutingKey as From<&std::string::String>>::from}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = discriminant((_10.0: libproto::router::SubModules)); // scope 4 at cita-jsonrpc/src/main.rs:169:23: 169:47
        switchInt(move _13) -> [0: bb6, otherwise: bb7]; // scope 4 at cita-jsonrpc/src/main.rs:169:17: 169:47
    }

    bb6: {
        _12 = discriminant((_10.1: libproto::router::MsgType)); // scope 4 at cita-jsonrpc/src/main.rs:169:23: 169:47
        switchInt(move _12) -> [32: bb8, otherwise: bb7]; // scope 4 at cita-jsonrpc/src/main.rs:169:17: 169:47
    }

    bb7: {
        _43 = const false;               // scope 4 at cita-jsonrpc/src/main.rs:176:29: 176:34
        _25 = move _8;                   // scope 4 at cita-jsonrpc/src/main.rs:176:29: 176:34
        _42 = const false;               // scope 4 at cita-jsonrpc/src/main.rs:177:29: 177:32
        _26 = move _9;                   // scope 4 at cita-jsonrpc/src/main.rs:177:29: 177:32
        _27 = &mut _2;                   // scope 4 at cita-jsonrpc/src/main.rs:178:29: 178:55
        _28 = &mut _3;                   // scope 4 at cita-jsonrpc/src/main.rs:179:29: 179:44
        _29 = &(_1.2: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 4 at cita-jsonrpc/src/main.rs:180:29: 180:36
        _30 = &(_1.3: config::NewTxFlowConfig); // scope 4 at cita-jsonrpc/src/main.rs:181:29: 181:44
        _24 = forward_service(move _25, move _26, _27, _28, _29, _30) -> [return: bb35, unwind: bb29]; // scope 4 at cita-jsonrpc/src/main.rs:175:25: 182:26
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:175:25: 175:40
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd> fn(std::string::String, libproto::Request, &'a mut Vec<libproto::Request>, &'b mut SystemTime, &'c pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, &'d NewTxFlowConfig) {forward_service}, val: Value(<ZST>) }
    }

    bb8: {
        _42 = const false;               // scope 4 at cita-jsonrpc/src/main.rs:171:45: 171:48
        _15 = move _9;                   // scope 4 at cita-jsonrpc/src/main.rs:171:45: 171:48
        _14 = <libproto::Request as Into<libproto::Message>>::into(move _15) -> [return: bb9, unwind: bb29]; // scope 4 at cita-jsonrpc/src/main.rs:171:45: 171:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:171:49: 171:53
                                         // + literal: Const { ty: fn(libproto::Request) -> libproto::Message {<libproto::Request as Into<libproto::Message>>::into}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = &(_1.1: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 5 at cita-jsonrpc/src/main.rs:172:25: 172:67
        _43 = const false;               // scope 5 at cita-jsonrpc/src/main.rs:172:34: 172:39
        _20 = move _8;                   // scope 5 at cita-jsonrpc/src/main.rs:172:34: 172:39
        _23 = move _14;                  // scope 5 at cita-jsonrpc/src/main.rs:172:41: 172:45
        _22 = <libproto::Message as libproto::TryInto<Vec<u8>>>::try_into(move _23) -> [return: bb10, unwind: bb19]; // scope 5 at cita-jsonrpc/src/main.rs:172:41: 172:56
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:172:46: 172:54
                                         // + literal: Const { ty: fn(libproto::Message) -> Result<Vec<u8>, <libproto::Message as libproto::TryInto<Vec<u8>>>::Error> {<libproto::Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _22) -> [return: bb11, unwind: bb19]; // scope 5 at cita-jsonrpc/src/main.rs:172:41: 172:65
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:172:57: 172:63
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb11: {
        _19 = (move _20, move _21);      // scope 5 at cita-jsonrpc/src/main.rs:172:33: 172:66
        _17 = pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send(move _18, move _19) -> [return: bb12, unwind: bb29]; // scope 5 at cita-jsonrpc/src/main.rs:172:25: 172:67
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:172:28: 172:32
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, (std::string::String, Vec<u8>)) -> Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>> {pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send}, val: Value(<ZST>) }
    }

    bb12: {
        _16 = Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap(move _17) -> [return: bb36, unwind: bb29]; // scope 5 at cita-jsonrpc/src/main.rs:172:25: 172:76
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:172:68: 172:74
                                         // + literal: Const { ty: fn(Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>) {Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap}, val: Value(<ZST>) }
    }

    bb13: {
        _42 = const false;               // scope 3 at cita-jsonrpc/src/main.rs:185:13: 185:14
        _43 = const false;               // scope 3 at cita-jsonrpc/src/main.rs:185:13: 185:14
        goto -> bb27;                    // scope 2 at cita-jsonrpc/src/main.rs:167:13: 190:14
    }

    bb14: {
        _33 = &_2;                       // scope 2 at cita-jsonrpc/src/main.rs:186:21: 186:53
        _32 = Vec::<libproto::Request>::is_empty(move _33) -> [return: bb15, unwind: bb33]; // scope 2 at cita-jsonrpc/src/main.rs:186:21: 186:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:186:43: 186:51
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<libproto::Request>) -> bool {Vec::<libproto::Request>::is_empty}, val: Value(<ZST>) }
    }

    bb15: {
        _31 = Not(move _32);             // scope 2 at cita-jsonrpc/src/main.rs:186:20: 186:53
        switchInt(move _31) -> [0: bb17, otherwise: bb16]; // scope 2 at cita-jsonrpc/src/main.rs:186:20: 186:53
    }

    bb16: {
        _35 = &mut _2;                   // scope 2 at cita-jsonrpc/src/main.rs:187:42: 187:68
        _36 = &mut _3;                   // scope 2 at cita-jsonrpc/src/main.rs:187:70: 187:85
        _37 = &(_1.2: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 2 at cita-jsonrpc/src/main.rs:187:87: 187:94
        _34 = batch_forward_new_tx(_35, _36, _37) -> [return: bb37, unwind: bb33]; // scope 2 at cita-jsonrpc/src/main.rs:187:21: 187:95
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:187:21: 187:41
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Vec<libproto::Request>, &'b mut SystemTime, &'c pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {batch_forward_new_tx}, val: Value(<ZST>) }
    }

    bb17: {
        _40 = ((_1.3: config::NewTxFlowConfig).1: u32); // scope 2 at cita-jsonrpc/src/main.rs:189:48: 189:78
        _39 = Duration::new(const 0_u64, move _40) -> [return: bb18, unwind: bb33]; // scope 2 at cita-jsonrpc/src/main.rs:189:31: 189:79
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:189:31: 189:44
                                         // + literal: Const { ty: fn(u64, u32) -> Duration {Duration::new}, val: Value(<ZST>) }
    }

    bb18: {
        _38 = std::thread::sleep(move _39) -> [return: bb38, unwind: bb33]; // scope 2 at cita-jsonrpc/src/main.rs:189:17: 189:80
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:189:17: 189:30
                                         // + literal: Const { ty: fn(Duration) {std::thread::sleep}, val: Value(<ZST>) }
    }

    bb19 (cleanup): {
        drop(_20) -> bb29;               // scope 5 at cita-jsonrpc/src/main.rs:172:65: 172:66
    }

    bb20 (cleanup): {
        switchInt(_43) -> [0: bb33, otherwise: bb30]; // scope 3 at cita-jsonrpc/src/main.rs:185:13: 185:14
    }

    bb21 (cleanup): {
        drop(_2) -> bb22;                // scope 0 at cita-jsonrpc/src/main.rs:192:5: 192:6
    }

    bb22 (cleanup): {
        drop(_1) -> bb23;                // scope 0 at cita-jsonrpc/src/main.rs:192:5: 192:6
    }

    bb23 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/main.rs:163:19: 192:6
    }

    bb24: {
        _41 = const false;               // scope 2 at cita-jsonrpc/src/main.rs:191:9: 191:10
        goto -> bb2;                     // scope 2 at cita-jsonrpc/src/main.rs:166:9: 191:10
    }

    bb25: {
        switchInt(_41) -> [0: bb24, otherwise: bb26]; // scope 2 at cita-jsonrpc/src/main.rs:191:9: 191:10
    }

    bb26: {
        drop(((_4 as Ok).0: (std::string::String, libproto::Request))) -> [return: bb24, unwind: bb21]; // scope 2 at cita-jsonrpc/src/main.rs:191:9: 191:10
    }

    bb27: {
        _44 = discriminant(_4);          // scope 2 at cita-jsonrpc/src/main.rs:191:9: 191:10
        switchInt(move _44) -> [0: bb25, otherwise: bb24]; // scope 2 at cita-jsonrpc/src/main.rs:191:9: 191:10
    }

    bb28 (cleanup): {
        drop(_9) -> bb20;                // scope 3 at cita-jsonrpc/src/main.rs:185:13: 185:14
    }

    bb29 (cleanup): {
        switchInt(_42) -> [0: bb20, otherwise: bb28]; // scope 3 at cita-jsonrpc/src/main.rs:185:13: 185:14
    }

    bb30 (cleanup): {
        drop(_8) -> bb33;                // scope 3 at cita-jsonrpc/src/main.rs:185:13: 185:14
    }

    bb31 (cleanup): {
        switchInt(_41) -> [0: bb21, otherwise: bb32]; // scope 2 at cita-jsonrpc/src/main.rs:191:9: 191:10
    }

    bb32 (cleanup): {
        drop(((_4 as Ok).0: (std::string::String, libproto::Request))) -> bb21; // scope 2 at cita-jsonrpc/src/main.rs:191:9: 191:10
    }

    bb33 (cleanup): {
        _45 = discriminant(_4);          // scope 2 at cita-jsonrpc/src/main.rs:191:9: 191:10
        switchInt(move _45) -> [0: bb31, otherwise: bb21]; // scope 2 at cita-jsonrpc/src/main.rs:191:9: 191:10
    }

    bb34: {
        goto -> bb2;                     // scope 1 at cita-jsonrpc/src/main.rs:165:30: 165:47
    }

    bb35: {
        goto -> bb13;                    // scope 4 at cita-jsonrpc/src/main.rs:175:25: 182:26
    }

    bb36: {
        goto -> bb13;                    // scope 5 at cita-jsonrpc/src/main.rs:172:25: 172:76
    }

    bb37: {
        goto -> bb17;                    // scope 2 at cita-jsonrpc/src/main.rs:187:21: 187:95
    }

    bb38: {
        goto -> bb27;                    // scope 2 at cita-jsonrpc/src/main.rs:189:17: 189:80
    }
}

fn main::{closure#1}(_1: [closure@cita-jsonrpc/src/main.rs:196:19: 196:26]) -> () {
    debug soli_config => (_1.0: config::Config); // in scope 0 at cita-jsonrpc/src/main.rs:195:9: 195:20
    debug rx => (_1.1: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-jsonrpc/src/main.rs:138:14: 138:16
    debug soli_resp_tx => (_1.2: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // in scope 0 at cita-jsonrpc/src/main.rs:139:9: 139:21
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/main.rs:196:27: 196:27
    let _2: soliloquy::Soliloquy;        // in scope 0 at cita-jsonrpc/src/main.rs:197:13: 197:22
    let mut _3: config::Config;          // in scope 0 at cita-jsonrpc/src/main.rs:197:40: 197:51
    let mut _4: std::result::Result<(std::string::String, std::vec::Vec<u8>), pubsub::crossbeam_channel::RecvError>; // in scope 0 at cita-jsonrpc/src/main.rs:200:41: 200:50
    let mut _5: &pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-jsonrpc/src/main.rs:200:41: 200:50
    let mut _6: isize;                   // in scope 0 at cita-jsonrpc/src/main.rs:200:20: 200:38
    let mut _9: &soliloquy::Soliloquy;   // in scope 0 at cita-jsonrpc/src/main.rs:201:32: 201:60
    let mut _10: &[u8];                  // in scope 0 at cita-jsonrpc/src/main.rs:201:49: 201:59
    let _11: &[u8];                      // in scope 0 at cita-jsonrpc/src/main.rs:201:49: 201:59
    let _12: &std::vec::Vec<u8>;         // in scope 0 at cita-jsonrpc/src/main.rs:201:49: 201:59
    let mut _13: std::result::Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, std::vec::Vec<u8>)>>; // in scope 0 at cita-jsonrpc/src/main.rs:202:25: 205:19
    let mut _14: &pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>; // in scope 0 at cita-jsonrpc/src/main.rs:202:25: 205:19
    let mut _15: (std::string::String, std::vec::Vec<u8>); // in scope 0 at cita-jsonrpc/src/main.rs:202:43: 205:18
    let mut _16: std::string::String;    // in scope 0 at cita-jsonrpc/src/main.rs:203:21: 203:61
    let mut _17: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _18: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _19: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _20: std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/main.rs:204:21: 204:49
    let mut _21: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-jsonrpc/src/main.rs:204:21: 204:40
    let mut _22: libproto::Message;      // in scope 0 at cita-jsonrpc/src/main.rs:204:21: 204:29
    let mut _23: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:207:9: 207:10
    let mut _24: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:206:13: 206:14
    let mut _25: isize;                  // in scope 0 at cita-jsonrpc/src/main.rs:207:9: 207:10
    let mut _26: isize;                  // in scope 0 at cita-jsonrpc/src/main.rs:207:9: 207:10
    scope 1 {
        debug soliloquy => _2;           // in scope 1 at cita-jsonrpc/src/main.rs:197:13: 197:22
        scope 2 {
            debug msg_bytes => _7;       // in scope 2 at cita-jsonrpc/src/main.rs:200:27: 200:36
            let _7: std::vec::Vec<u8>;   // in scope 2 at cita-jsonrpc/src/main.rs:200:27: 200:36
            let _8: libproto::Message;   // in scope 2 at cita-jsonrpc/src/main.rs:201:21: 201:29
            scope 3 {
                debug resp_msg => _8;    // in scope 3 at cita-jsonrpc/src/main.rs:201:21: 201:29
                scope 4 {
                }
            }
        }
    }

    bb0: {
        _23 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:197:13: 197:22
        _24 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:197:13: 197:22
        _3 = move (_1.0: config::Config); // scope 0 at cita-jsonrpc/src/main.rs:197:40: 197:51
        _2 = Soliloquy::new(move _3) -> [return: bb28, unwind: bb27]; // scope 0 at cita-jsonrpc/src/main.rs:197:25: 197:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:197:25: 197:39
                                         // + literal: Const { ty: fn(Config) -> Soliloquy {Soliloquy::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &(_1.1: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>); // scope 2 at cita-jsonrpc/src/main.rs:200:41: 200:50
        _4 = pubsub::crossbeam_channel::Receiver::<(std::string::String, Vec<u8>)>::recv(move _5) -> [return: bb2, unwind: bb13]; // scope 2 at cita-jsonrpc/src/main.rs:200:41: 200:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:200:44: 200:48
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Receiver<(std::string::String, Vec<u8>)>) -> Result<(std::string::String, Vec<u8>), pubsub::crossbeam_channel::RecvError> {pubsub::crossbeam_channel::Receiver::<(std::string::String, Vec<u8>)>::recv}, val: Value(<ZST>) }
    }

    bb2: {
        _23 = const true;                // scope 2 at cita-jsonrpc/src/main.rs:200:49: 200:50
        _6 = discriminant(_4);           // scope 2 at cita-jsonrpc/src/main.rs:200:20: 200:38
        switchInt(move _6) -> [0: bb3, otherwise: bb21]; // scope 2 at cita-jsonrpc/src/main.rs:200:20: 200:38
    }

    bb3: {
        _23 = const false;               // scope 2 at cita-jsonrpc/src/main.rs:200:27: 200:36
        _7 = move (((_4 as Ok).0: (std::string::String, std::vec::Vec<u8>)).1: std::vec::Vec<u8>); // scope 2 at cita-jsonrpc/src/main.rs:200:27: 200:36
        _9 = &_2;                        // scope 2 at cita-jsonrpc/src/main.rs:201:32: 201:60
        _12 = &_7;                       // scope 2 at cita-jsonrpc/src/main.rs:201:49: 201:59
        _11 = <Vec<u8> as Deref>::deref(_12) -> [return: bb4, unwind: bb12]; // scope 2 at cita-jsonrpc/src/main.rs:201:49: 201:59
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:201:49: 201:59
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = _11;                       // scope 2 at cita-jsonrpc/src/main.rs:201:49: 201:59
        _8 = Soliloquy::handle(move _9, move _10) -> [return: bb5, unwind: bb12]; // scope 2 at cita-jsonrpc/src/main.rs:201:32: 201:60
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:201:42: 201:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Soliloquy, &'b [u8]) -> libproto::Message {Soliloquy::handle}, val: Value(<ZST>) }
    }

    bb5: {
        _24 = const true;                // scope 2 at cita-jsonrpc/src/main.rs:201:59: 201:60
        _14 = &(_1.2: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>); // scope 3 at cita-jsonrpc/src/main.rs:202:25: 205:19
        _18 = const libproto::router::SubModules::Jsonrpc; // scope 3 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x00)) }
        _19 = const libproto::router::MsgType::Response; // scope 3 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x02)) }
        _17 = RoutingKey(move _18, move _19); // scope 3 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _16 = <RoutingKey as Into<std::string::String>>::into(move _17) -> [return: bb6, unwind: bb23]; // scope 3 at cita-jsonrpc/src/main.rs:203:21: 203:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:203:55: 203:59
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb6: {
        _24 = const false;               // scope 3 at cita-jsonrpc/src/main.rs:204:21: 204:29
        _22 = move _8;                   // scope 3 at cita-jsonrpc/src/main.rs:204:21: 204:29
        _21 = <libproto::Message as libproto::TryInto<Vec<u8>>>::try_into(move _22) -> [return: bb7, unwind: bb11]; // scope 3 at cita-jsonrpc/src/main.rs:204:21: 204:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:204:30: 204:38
                                         // + literal: Const { ty: fn(libproto::Message) -> Result<Vec<u8>, <libproto::Message as libproto::TryInto<Vec<u8>>>::Error> {<libproto::Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb7: {
        _20 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _21) -> [return: bb8, unwind: bb11]; // scope 3 at cita-jsonrpc/src/main.rs:204:21: 204:49
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:204:41: 204:47
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = (move _16, move _20);      // scope 3 at cita-jsonrpc/src/main.rs:202:43: 205:18
        _13 = pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send(move _14, move _15) -> [return: bb9, unwind: bb23]; // scope 3 at cita-jsonrpc/src/main.rs:202:25: 205:19
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:202:38: 202:42
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, (std::string::String, Vec<u8>)) -> Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>> {pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_13) -> [return: bb10, unwind: bb23]; // scope 3 at cita-jsonrpc/src/main.rs:205:19: 205:20
    }

    bb10: {
        _24 = const false;               // scope 2 at cita-jsonrpc/src/main.rs:206:13: 206:14
        drop(_7) -> [return: bb21, unwind: bb25]; // scope 1 at cita-jsonrpc/src/main.rs:206:13: 206:14
    }

    bb11 (cleanup): {
        drop(_16) -> bb23;               // scope 3 at cita-jsonrpc/src/main.rs:205:17: 205:18
    }

    bb12 (cleanup): {
        drop(_7) -> bb25;                // scope 1 at cita-jsonrpc/src/main.rs:206:13: 206:14
    }

    bb13 (cleanup): {
        drop(_2) -> bb27;                // scope 0 at cita-jsonrpc/src/main.rs:208:5: 208:6
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/main.rs:196:19: 208:6
    }

    bb15: {
        _23 = const false;               // scope 1 at cita-jsonrpc/src/main.rs:207:9: 207:10
        goto -> bb1;                     // scope 1 at cita-jsonrpc/src/main.rs:199:9: 207:10
    }

    bb16: {
        drop((((_4 as Ok).0: (std::string::String, std::vec::Vec<u8>)).0: std::string::String)) -> [return: bb19, unwind: bb17]; // scope 1 at cita-jsonrpc/src/main.rs:207:9: 207:10
    }

    bb17 (cleanup): {
        switchInt(_23) -> [0: bb13, otherwise: bb18]; // scope 1 at cita-jsonrpc/src/main.rs:207:9: 207:10
    }

    bb18 (cleanup): {
        drop((((_4 as Ok).0: (std::string::String, std::vec::Vec<u8>)).1: std::vec::Vec<u8>)) -> bb13; // scope 1 at cita-jsonrpc/src/main.rs:207:9: 207:10
    }

    bb19: {
        switchInt(_23) -> [0: bb15, otherwise: bb20]; // scope 1 at cita-jsonrpc/src/main.rs:207:9: 207:10
    }

    bb20: {
        drop((((_4 as Ok).0: (std::string::String, std::vec::Vec<u8>)).1: std::vec::Vec<u8>)) -> [return: bb15, unwind: bb13]; // scope 1 at cita-jsonrpc/src/main.rs:207:9: 207:10
    }

    bb21: {
        _25 = discriminant(_4);          // scope 1 at cita-jsonrpc/src/main.rs:207:9: 207:10
        switchInt(move _25) -> [0: bb16, otherwise: bb15]; // scope 1 at cita-jsonrpc/src/main.rs:207:9: 207:10
    }

    bb22 (cleanup): {
        drop(_8) -> bb12;                // scope 2 at cita-jsonrpc/src/main.rs:206:13: 206:14
    }

    bb23 (cleanup): {
        switchInt(_24) -> [0: bb12, otherwise: bb22]; // scope 2 at cita-jsonrpc/src/main.rs:206:13: 206:14
    }

    bb24 (cleanup): {
        drop((((_4 as Ok).0: (std::string::String, std::vec::Vec<u8>)).0: std::string::String)) -> bb13; // scope 1 at cita-jsonrpc/src/main.rs:207:9: 207:10
    }

    bb25 (cleanup): {
        _26 = discriminant(_4);          // scope 1 at cita-jsonrpc/src/main.rs:207:9: 207:10
        switchInt(move _26) -> [0: bb24, otherwise: bb13]; // scope 1 at cita-jsonrpc/src/main.rs:207:9: 207:10
    }

    bb26 (cleanup): {
        drop((_1.2: pubsub::crossbeam_channel::Sender<(std::string::String, std::vec::Vec<u8>)>)) -> bb14; // scope 0 at cita-jsonrpc/src/main.rs:208:5: 208:6
    }

    bb27 (cleanup): {
        drop((_1.1: pubsub::crossbeam_channel::Receiver<(std::string::String, std::vec::Vec<u8>)>)) -> bb26; // scope 0 at cita-jsonrpc/src/main.rs:208:5: 208:6
    }

    bb28: {
        goto -> bb1;                     // scope 0 at cita-jsonrpc/src/main.rs:197:25: 197:52
    }
}

fn main::{closure#2}(_1: [closure@cita-jsonrpc/src/main.rs:214:23: 214:30]) -> () {
    debug ws_config => (_1.0: config::WsConfig); // in scope 0 at cita-jsonrpc/src/main.rs:212:13: 212:22
    debug ws_responses => (_1.1: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // in scope 0 at cita-jsonrpc/src/main.rs:158:9: 158:21
    debug tx => (_1.2: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // in scope 0 at cita-jsonrpc/src/main.rs:213:13: 213:15
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/main.rs:214:31: 214:31
    let _2: std::string::String;         // in scope 0 at cita-jsonrpc/src/main.rs:215:17: 215:20
    let mut _3: std::string::String;     // in scope 0 at cita-jsonrpc/src/main.rs:216:17: 216:50
    let mut _4: std::string::String;     // in scope 0 at cita-jsonrpc/src/main.rs:216:17: 216:44
    let mut _5: &std::string::String;    // in scope 0 at cita-jsonrpc/src/main.rs:216:17: 216:44
    let _6: &str;                        // in scope 0 at cita-jsonrpc/src/main.rs:216:47: 216:50
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:216:53: 216:95
    let _8: &str;                        // in scope 0 at cita-jsonrpc/src/main.rs:216:53: 216:95
    let _9: &std::string::String;        // in scope 0 at cita-jsonrpc/src/main.rs:216:53: 216:95
    let _10: std::string::String;        // in scope 0 at cita-jsonrpc/src/main.rs:216:54: 216:95
    let mut _11: &std::string::String;   // in scope 0 at cita-jsonrpc/src/main.rs:216:54: 216:95
    let _12: std::string::String;        // in scope 0 at cita-jsonrpc/src/main.rs:216:54: 216:83
    let mut _13: &std::string::String;   // in scope 0 at cita-jsonrpc/src/main.rs:216:54: 216:83
    let mut _15: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/main.rs:218:42: 218:54
    let mut _16: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/main.rs:218:56: 218:58
    let mut _18: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _19: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _20: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _21: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _22: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _23: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _24: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _25: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _26: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _27: &[&str];                // in scope 0 at cita-jsonrpc/src/main.rs:219:19: 219:46
    let mut _28: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _29: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _30: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _31: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/main.rs:219:48: 219:51
    let _32: &std::string::String;       // in scope 0 at cita-jsonrpc/src/main.rs:219:48: 219:51
    let _34: &mut ws::Builder;           // in scope 0 at cita-jsonrpc/src/main.rs:221:13: 221:53
    let mut _35: &mut ws::Builder;       // in scope 0 at cita-jsonrpc/src/main.rs:221:13: 221:53
    let mut _36: ws::Settings;           // in scope 0 at cita-jsonrpc/src/main.rs:221:36: 221:52
    let mut _37: config::WsConfig;       // in scope 0 at cita-jsonrpc/src/main.rs:221:36: 221:45
    let mut _39: std::result::Result<ws::WebSocket<ws_handler::WsFactory>, ws::Error>; // in scope 0 at cita-jsonrpc/src/main.rs:222:29: 222:52
    let mut _40: &ws::Builder;           // in scope 0 at cita-jsonrpc/src/main.rs:222:29: 222:52
    let mut _41: ws_handler::WsFactory;  // in scope 0 at cita-jsonrpc/src/main.rs:222:44: 222:51
    let mut _42: std::result::Result<ws::WebSocket<ws_handler::WsFactory>, ws::Error>; // in scope 0 at cita-jsonrpc/src/main.rs:223:21: 223:42
    let mut _43: ws::WebSocket<ws_handler::WsFactory>; // in scope 0 at cita-jsonrpc/src/main.rs:223:21: 223:30
    let mut _44: std::string::String;    // in scope 0 at cita-jsonrpc/src/main.rs:223:38: 223:41
    let mut _48: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    let mut _49: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    let mut _50: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:216:94: 216:95
    let mut _51: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    let mut _52: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    let mut _53: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    scope 1 {
        debug url => _2;                 // in scope 1 at cita-jsonrpc/src/main.rs:215:17: 215:20
        let _14: ws_handler::WsFactory;  // in scope 1 at cita-jsonrpc/src/main.rs:218:17: 218:24
        scope 2 {
            debug factory => _14;        // in scope 2 at cita-jsonrpc/src/main.rs:218:17: 218:24
            let _17: log::Level;         // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
            let mut _33: ws::Builder;    // in scope 2 at cita-jsonrpc/src/main.rs:220:17: 220:29
            scope 3 {
                debug lvl => _17;        // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
                let mut _45: &(&str, &str, &str, u32); // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                let mut _46: &[&str; 1]; // in scope 3 at cita-jsonrpc/src/main.rs:219:19: 219:46
                let mut _47: &log::LevelFilter; // in scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
            }
            scope 4 {
                debug ws_build => _33;   // in scope 4 at cita-jsonrpc/src/main.rs:220:17: 220:29
                let _38: ws::WebSocket<ws_handler::WsFactory>; // in scope 4 at cita-jsonrpc/src/main.rs:222:17: 222:26
                scope 5 {
                    debug ws_server => _38; // in scope 5 at cita-jsonrpc/src/main.rs:222:17: 222:26
                    scope 6 {
                    }
                }
            }
        }
    }

    bb0: {
        _48 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:215:17: 215:20
        _52 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:215:17: 215:20
        _49 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:215:17: 215:20
        _53 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:215:17: 215:20
        _51 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:215:17: 215:20
        _50 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:215:17: 215:20
        _51 = const true;                // scope 0 at cita-jsonrpc/src/main.rs:215:17: 215:20
        _52 = const true;                // scope 0 at cita-jsonrpc/src/main.rs:215:17: 215:20
        _53 = const true;                // scope 0 at cita-jsonrpc/src/main.rs:215:17: 215:20
        _5 = &((_1.0: config::WsConfig).2: std::string::String); // scope 0 at cita-jsonrpc/src/main.rs:216:17: 216:44
        _4 = <std::string::String as Clone>::clone(move _5) -> [return: bb1, unwind: bb44]; // scope 0 at cita-jsonrpc/src/main.rs:216:17: 216:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:216:37: 216:42
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> std::string::String {<std::string::String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = const ":";                  // scope 0 at cita-jsonrpc/src/main.rs:216:47: 216:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:216:47: 216:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <std::string::String as Add<&str>>::add(move _4, _6) -> [return: bb2, unwind: bb44]; // scope 0 at cita-jsonrpc/src/main.rs:216:17: 216:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:216:17: 216:50
                                         // + literal: Const { ty: fn(std::string::String, &str) -> <std::string::String as Add<&str>>::Output {<std::string::String as Add<&str>>::add}, val: Value(<ZST>) }
    }

    bb2: {
        _50 = const true;                // scope 0 at cita-jsonrpc/src/main.rs:216:49: 216:50
        _13 = &((_1.0: config::WsConfig).3: std::string::String); // scope 0 at cita-jsonrpc/src/main.rs:216:54: 216:83
        _12 = <std::string::String as Clone>::clone(move _13) -> [return: bb3, unwind: bb31]; // scope 0 at cita-jsonrpc/src/main.rs:216:54: 216:83
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:216:76: 216:81
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> std::string::String {<std::string::String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = &_12;                      // scope 0 at cita-jsonrpc/src/main.rs:216:54: 216:95
        _10 = <std::string::String as ToString>::to_string(move _11) -> [return: bb4, unwind: bb29]; // scope 0 at cita-jsonrpc/src/main.rs:216:54: 216:95
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:216:84: 216:93
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> std::string::String {<std::string::String as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = &_10;                       // scope 0 at cita-jsonrpc/src/main.rs:216:53: 216:95
        _8 = <std::string::String as Deref>::deref(_9) -> [return: bb5, unwind: bb38]; // scope 0 at cita-jsonrpc/src/main.rs:216:53: 216:95
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:216:53: 216:95
                                         // + literal: Const { ty: for<'a> fn(&'a std::string::String) -> &'a <std::string::String as Deref>::Target {<std::string::String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = _8;                         // scope 0 at cita-jsonrpc/src/main.rs:216:53: 216:95
        _50 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:216:17: 216:95
        _2 = <std::string::String as Add<&str>>::add(move _3, move _7) -> [return: bb6, unwind: bb38]; // scope 0 at cita-jsonrpc/src/main.rs:216:17: 216:95
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:216:17: 216:95
                                         // + literal: Const { ty: fn(std::string::String, &str) -> <std::string::String as Add<&str>>::Output {<std::string::String as Add<&str>>::add}, val: Value(<ZST>) }
    }

    bb6: {
        _49 = const true;                // scope 0 at cita-jsonrpc/src/main.rs:216:94: 216:95
        _50 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:216:94: 216:95
        drop(_10) -> [return: bb7, unwind: bb27]; // scope 0 at cita-jsonrpc/src/main.rs:216:95: 216:96
    }

    bb7: {
        drop(_12) -> [return: bb8, unwind: bb36]; // scope 0 at cita-jsonrpc/src/main.rs:216:95: 216:96
    }

    bb8: {
        _53 = const false;               // scope 1 at cita-jsonrpc/src/main.rs:218:42: 218:54
        _15 = move (_1.1: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 1 at cita-jsonrpc/src/main.rs:218:42: 218:54
        _52 = const false;               // scope 1 at cita-jsonrpc/src/main.rs:218:56: 218:58
        _16 = move (_1.2: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // scope 1 at cita-jsonrpc/src/main.rs:218:56: 218:58
        _14 = WsFactory::new(move _15, move _16, const 0_usize) -> [return: bb9, unwind: bb36]; // scope 1 at cita-jsonrpc/src/main.rs:218:27: 218:62
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:218:27: 218:41
                                         // + literal: Const { ty: fn(Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, usize) -> WsFactory {WsFactory::new}, val: Value(<ZST>) }
    }

    bb9: {
        _48 = const true;                // scope 1 at cita-jsonrpc/src/main.rs:218:61: 218:62
        _17 = log::Level::Info;          // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:117:14: 117:33
        _20 = &_17;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _47 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(main::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _19 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _20, _47) -> [return: bb13, unwind: bb34]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb10: {
        _18 = const false;               // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb12;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        _22 = &_17;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _24 = log::max_level() -> [return: bb14, unwind: bb34]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _18) -> [0: bb19, otherwise: bb16]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        switchInt(move _19) -> [0: bb10, otherwise: bb11]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb14: {
        _23 = &_24;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _21 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _22, move _23) -> [return: bb15, unwind: bb34]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb15: {
        _18 = move _21;                  // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb12;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb16: {
        _46 = const _;                   // scope 3 at cita-jsonrpc/src/main.rs:219:19: 219:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:219:19: 219:46
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _27 = _46 as &[&str] (Pointer(Unsize)); // scope 3 at cita-jsonrpc/src/main.rs:219:19: 219:46
        _32 = &_2;                       // scope 3 at cita-jsonrpc/src/main.rs:219:48: 219:51
        _31 = core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>(_32) -> [return: bb17, unwind: bb34]; // scope 3 at cita-jsonrpc/src/main.rs:219:48: 219:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:219:48: 219:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b std::string::String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::string::String>}, val: Value(<ZST>) }
    }

    bb17: {
        _30 = [move _31];                // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _29 = &_30;                      // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _28 = _29 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _26 = Arguments::<'_>::new_v1(move _27, move _28) -> [return: bb18, unwind: bb34]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb18: {
        _45 = const _;                   // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(main::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _25 = log::__private_api_log(move _26, _17, _45) -> [return: bb45, unwind: bb34]; // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb19: {
        _33 = ws::Builder::new() -> [return: bb20, unwind: bb34]; // scope 2 at cita-jsonrpc/src/main.rs:220:32: 220:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:220:32: 220:48
                                         // + literal: Const { ty: fn() -> ws::Builder {ws::Builder::new}, val: Value(<ZST>) }
    }

    bb20: {
        _35 = &mut _33;                  // scope 4 at cita-jsonrpc/src/main.rs:221:13: 221:53
        _51 = const false;               // scope 4 at cita-jsonrpc/src/main.rs:221:36: 221:45
        _37 = move (_1.0: config::WsConfig); // scope 4 at cita-jsonrpc/src/main.rs:221:36: 221:45
        _36 = <WsConfig as Into<Settings>>::into(move _37) -> [return: bb21, unwind: bb34]; // scope 4 at cita-jsonrpc/src/main.rs:221:36: 221:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:221:46: 221:50
                                         // + literal: Const { ty: fn(WsConfig) -> Settings {<WsConfig as Into<Settings>>::into}, val: Value(<ZST>) }
    }

    bb21: {
        _34 = ws::Builder::with_settings(move _35, move _36) -> [return: bb22, unwind: bb34]; // scope 4 at cita-jsonrpc/src/main.rs:221:13: 221:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:221:22: 221:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut ws::Builder, Settings) -> &'a mut ws::Builder {ws::Builder::with_settings}, val: Value(<ZST>) }
    }

    bb22: {
        _40 = &_33;                      // scope 4 at cita-jsonrpc/src/main.rs:222:29: 222:52
        _48 = const false;               // scope 4 at cita-jsonrpc/src/main.rs:222:44: 222:51
        _41 = move _14;                  // scope 4 at cita-jsonrpc/src/main.rs:222:44: 222:51
        _39 = ws::Builder::build::<WsFactory>(move _40, move _41) -> [return: bb23, unwind: bb34]; // scope 4 at cita-jsonrpc/src/main.rs:222:29: 222:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:222:38: 222:43
                                         // + literal: Const { ty: for<'a> fn(&'a ws::Builder, WsFactory) -> Result<WebSocket<WsFactory>, ws::Error> {ws::Builder::build::<WsFactory>}, val: Value(<ZST>) }
    }

    bb23: {
        _38 = Result::<WebSocket<WsFactory>, ws::Error>::unwrap(move _39) -> [return: bb24, unwind: bb34]; // scope 4 at cita-jsonrpc/src/main.rs:222:29: 222:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:222:53: 222:59
                                         // + literal: Const { ty: fn(Result<WebSocket<WsFactory>, ws::Error>) -> WebSocket<WsFactory> {Result::<WebSocket<WsFactory>, ws::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb24: {
        _43 = move _38;                  // scope 5 at cita-jsonrpc/src/main.rs:223:21: 223:30
        _49 = const false;               // scope 5 at cita-jsonrpc/src/main.rs:223:38: 223:41
        _44 = move _2;                   // scope 5 at cita-jsonrpc/src/main.rs:223:38: 223:41
        _42 = WebSocket::<WsFactory>::listen::<std::string::String>(move _43, move _44) -> [return: bb25, unwind: bb34]; // scope 5 at cita-jsonrpc/src/main.rs:223:21: 223:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:223:31: 223:37
                                         // + literal: Const { ty: fn(WebSocket<WsFactory>, std::string::String) -> Result<WebSocket<WsFactory>, ws::Error> {WebSocket::<WsFactory>::listen::<std::string::String>}, val: Value(<ZST>) }
    }

    bb25: {
        drop(_42) -> [return: bb26, unwind: bb34]; // scope 5 at cita-jsonrpc/src/main.rs:223:42: 223:43
    }

    bb26: {
        _48 = const false;               // scope 1 at cita-jsonrpc/src/main.rs:224:9: 224:10
        _49 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:224:10: 224:10
    }

    bb27 (cleanup): {
        drop(_12) -> bb36;               // scope 0 at cita-jsonrpc/src/main.rs:216:95: 216:96
    }

    bb28 (cleanup): {
        drop(_10) -> bb30;               // scope 0 at cita-jsonrpc/src/main.rs:216:95: 216:96
    }

    bb29 (cleanup): {
        drop(_3) -> bb30;                // scope 0 at cita-jsonrpc/src/main.rs:216:94: 216:95
    }

    bb30 (cleanup): {
        drop(_12) -> bb44;               // scope 0 at cita-jsonrpc/src/main.rs:216:95: 216:96
    }

    bb31 (cleanup): {
        drop(_3) -> bb44;                // scope 0 at cita-jsonrpc/src/main.rs:216:94: 216:95
    }

    bb32 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/main.rs:214:23: 224:10
    }

    bb33 (cleanup): {
        drop(_14) -> bb36;               // scope 1 at cita-jsonrpc/src/main.rs:224:9: 224:10
    }

    bb34 (cleanup): {
        switchInt(_48) -> [0: bb36, otherwise: bb33]; // scope 1 at cita-jsonrpc/src/main.rs:224:9: 224:10
    }

    bb35 (cleanup): {
        drop(_2) -> bb44;                // scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    }

    bb36 (cleanup): {
        switchInt(_49) -> [0: bb44, otherwise: bb35]; // scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    }

    bb37 (cleanup): {
        drop(_3) -> bb28;                // scope 0 at cita-jsonrpc/src/main.rs:216:94: 216:95
    }

    bb38 (cleanup): {
        switchInt(_50) -> [0: bb28, otherwise: bb37]; // scope 0 at cita-jsonrpc/src/main.rs:216:94: 216:95
    }

    bb39 (cleanup): {
        switchInt(_52) -> [0: bb32, otherwise: bb40]; // scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    }

    bb40 (cleanup): {
        drop((_1.2: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>)) -> bb32; // scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    }

    bb41 (cleanup): {
        switchInt(_53) -> [0: bb39, otherwise: bb42]; // scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    }

    bb42 (cleanup): {
        drop((_1.1: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>)) -> bb39; // scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    }

    bb43 (cleanup): {
        drop((_1.0: config::WsConfig)) -> bb41; // scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    }

    bb44 (cleanup): {
        switchInt(_51) -> [0: bb41, otherwise: bb43]; // scope 0 at cita-jsonrpc/src/main.rs:224:9: 224:10
    }

    bb45: {
        goto -> bb19;                    // scope 3 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }
}

promoted[0] in main::{closure#2}: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:219:13: 219:52
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:219:13: 219:52

    bb0: {
        _3 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/main.rs"; // scope 0 at cita-jsonrpc/src/main.rs:219:13: 219:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:219:13: 219:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/main.rs:219:13: 219:52
        _1 = (move _2, move _4, move _6, const 219_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in main::{closure#2}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at cita-jsonrpc/src/main.rs:219:19: 219:46
    let mut _1: [&str; 1];               // in scope 0 at cita-jsonrpc/src/main.rs:219:19: 219:46

    bb0: {
        _1 = [const "WebSocket Listening on "]; // scope 0 at cita-jsonrpc/src/main.rs:219:19: 219:46
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:219:19: 219:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/main.rs:219:19: 219:46
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:219:19: 219:46
    }
}

promoted[2] in main::{closure#2}: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn main::{closure#3}(_1: [closure@cita-jsonrpc/src/main.rs:243:20: 243:27]) -> () {
    debug addr => (_1.0: std::net::SocketAddr); // in scope 0 at cita-jsonrpc/src/main.rs:238:13: 238:17
    debug tx_relay => (_1.1: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // in scope 0 at cita-jsonrpc/src/main.rs:136:10: 136:18
    debug http_responses => (_1.2: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // in scope 0 at cita-jsonrpc/src/main.rs:157:9: 157:23
    debug timeout => (_1.3: u64);        // in scope 0 at cita-jsonrpc/src/main.rs:239:13: 239:20
    debug allow_origin => (_1.4: std::option::Option<std::string::String>); // in scope 0 at cita-jsonrpc/src/main.rs:240:13: 240:25
    debug threads => (_1.5: usize);      // in scope 0 at cita-jsonrpc/src/main.rs:233:13: 233:20
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/main.rs:243:28: 243:28
    let _2: http_server::Server;         // in scope 0 at cita-jsonrpc/src/main.rs:244:21: 244:27
    let mut _3: std::result::Result<http_server::Server, std::boxed::Box<dyn std::error::Error>>; // in scope 0 at cita-jsonrpc/src/main.rs:245:21: 245:92
    let _4: &std::net::SocketAddr;       // in scope 0 at cita-jsonrpc/src/main.rs:245:36: 245:41
    let mut _5: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>; // in scope 0 at cita-jsonrpc/src/main.rs:245:43: 245:51
    let mut _6: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>; // in scope 0 at cita-jsonrpc/src/main.rs:245:53: 245:67
    let mut _7: u64;                     // in scope 0 at cita-jsonrpc/src/main.rs:245:69: 245:76
    let _8: &std::option::Option<std::string::String>; // in scope 0 at cita-jsonrpc/src/main.rs:245:78: 245:91
    let mut _10: hyper::Server<hyper::server::conn::AddrIncoming, http_server::JsonrpcMakeService>; // in scope 0 at cita-jsonrpc/src/main.rs:247:38: 248:31
    let mut _11: http_server::Server;    // in scope 0 at cita-jsonrpc/src/main.rs:247:38: 247:44
    let mut _13: std::result::Result<tokio::runtime::Runtime, std::io::Error>; // in scope 0 at cita-jsonrpc/src/main.rs:251:30: 253:29
    let mut _14: &mut tokio::runtime::Builder; // in scope 0 at cita-jsonrpc/src/main.rs:251:30: 253:29
    let mut _15: &mut tokio::runtime::Builder; // in scope 0 at cita-jsonrpc/src/main.rs:251:30: 252:43
    let mut _16: &mut tokio::runtime::Builder; // in scope 0 at cita-jsonrpc/src/main.rs:251:30: 252:43
    let mut _17: tokio::runtime::Builder; // in scope 0 at cita-jsonrpc/src/main.rs:251:30: 251:60
    let mut _18: usize;                  // in scope 0 at cita-jsonrpc/src/main.rs:252:35: 252:42
    let _19: &mut tokio::runtime::Runtime; // in scope 0 at cita-jsonrpc/src/main.rs:255:17: 255:41
    let mut _20: &mut tokio::runtime::Runtime; // in scope 0 at cita-jsonrpc/src/main.rs:255:17: 255:41
    let mut _21: futures::MapErr<hyper::Server<hyper::server::conn::AddrIncoming, http_server::JsonrpcMakeService>, [closure@cita-jsonrpc/src/main.rs:249:30: 249:35]>; // in scope 0 at cita-jsonrpc/src/main.rs:255:26: 255:40
    let _22: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:257:17: 260:30
    let mut _23: std::result::Result<(), ()>; // in scope 0 at cita-jsonrpc/src/main.rs:257:17: 259:53
    let mut _24: &mut tokio_executor::Enter; // in scope 0 at cita-jsonrpc/src/main.rs:257:17: 259:53
    let mut _25: tokio_executor::Enter;  // in scope 0 at cita-jsonrpc/src/main.rs:257:17: 258:30
    let mut _26: std::result::Result<tokio_executor::Enter, tokio_executor::EnterError>; // in scope 0 at cita-jsonrpc/src/main.rs:257:17: 257:40
    let mut _27: tokio::runtime::Shutdown; // in scope 0 at cita-jsonrpc/src/main.rs:259:31: 259:52
    let mut _28: tokio::runtime::Runtime; // in scope 0 at cita-jsonrpc/src/main.rs:259:31: 259:33
    let mut _29: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:261:13: 261:14
    let mut _30: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:261:13: 261:14
    scope 1 {
        debug server => _2;              // in scope 1 at cita-jsonrpc/src/main.rs:244:21: 244:27
        let _9: futures::MapErr<hyper::Server<hyper::server::conn::AddrIncoming, http_server::JsonrpcMakeService>, [closure@cita-jsonrpc/src/main.rs:249:30: 249:35]>; // in scope 1 at cita-jsonrpc/src/main.rs:247:21: 247:35
        scope 2 {
            debug jsonrpc_server => _9;  // in scope 2 at cita-jsonrpc/src/main.rs:247:21: 247:35
            let mut _12: tokio::runtime::Runtime; // in scope 2 at cita-jsonrpc/src/main.rs:251:21: 251:27
            scope 3 {
                debug rt => _12;         // in scope 3 at cita-jsonrpc/src/main.rs:251:21: 251:27
            }
        }
    }

    bb0: {
        _30 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:244:21: 244:27
        _29 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:244:21: 244:27
        _4 = &(_1.0: std::net::SocketAddr); // scope 0 at cita-jsonrpc/src/main.rs:245:36: 245:41
        _5 = move (_1.1: pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>); // scope 0 at cita-jsonrpc/src/main.rs:245:43: 245:51
        _6 = move (_1.2: std::sync::Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, std::collections::HashMap<std::vec::Vec<u8>, helper::TransferType>>>); // scope 0 at cita-jsonrpc/src/main.rs:245:53: 245:67
        _7 = (_1.3: u64);                // scope 0 at cita-jsonrpc/src/main.rs:245:69: 245:76
        _8 = &(_1.4: std::option::Option<std::string::String>); // scope 0 at cita-jsonrpc/src/main.rs:245:78: 245:91
        _3 = http_server::Server::create(_4, move _5, move _6, move _7, _8) -> [return: bb1, unwind: bb25]; // scope 0 at cita-jsonrpc/src/main.rs:245:21: 245:92
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:245:21: 245:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a std::net::SocketAddr, pubsub::crossbeam_channel::Sender<(std::string::String, libproto::Request)>, Arc<lock_api::mutex::Mutex<parking_lot::raw_mutex::RawMutex, HashMap<Vec<u8>, TransferType>>>, u64, &'b std::option::Option<std::string::String>) -> Result<http_server::Server, Box<(dyn std::error::Error + 'static)>> {http_server::Server::create}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Result::<http_server::Server, Box<dyn std::error::Error>>::unwrap(move _3) -> [return: bb2, unwind: bb25]; // scope 0 at cita-jsonrpc/src/main.rs:245:21: 246:34
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:246:26: 246:32
                                         // + literal: Const { ty: fn(Result<http_server::Server, Box<dyn std::error::Error>>) -> http_server::Server {Result::<http_server::Server, Box<dyn std::error::Error>>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = move _2;                   // scope 1 at cita-jsonrpc/src/main.rs:247:38: 247:44
        _10 = http_server::Server::jsonrpc(move _11) -> [return: bb3, unwind: bb25]; // scope 1 at cita-jsonrpc/src/main.rs:247:38: 248:31
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:248:22: 248:29
                                         // + literal: Const { ty: fn(http_server::Server) -> hyper::Server<AddrIncoming, JsonrpcMakeService> {http_server::Server::jsonrpc}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = <hyper::Server<AddrIncoming, JsonrpcMakeService> as futures::Future>::map_err::<[closure@cita-jsonrpc/src/main.rs:249:30: 249:35], ()>(move _10, const ZeroSized: [closure@cita-jsonrpc/src/main.rs:249:30: 249:35]) -> [return: bb4, unwind: bb25]; // scope 1 at cita-jsonrpc/src/main.rs:247:38: 249:68
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:249:22: 249:29
                                         // + literal: Const { ty: fn(hyper::Server<AddrIncoming, JsonrpcMakeService>, [closure@cita-jsonrpc/src/main.rs:249:30: 249:35]) -> futures::MapErr<hyper::Server<AddrIncoming, JsonrpcMakeService>, [closure@cita-jsonrpc/src/main.rs:249:30: 249:35]> {<hyper::Server<AddrIncoming, JsonrpcMakeService> as futures::Future>::map_err::<[closure@cita-jsonrpc/src/main.rs:249:30: 249:35], ()>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: [closure@cita-jsonrpc/src/main.rs:249:30: 249:35], val: Value(<ZST>) }
    }

    bb4: {
        _30 = const true;                // scope 1 at cita-jsonrpc/src/main.rs:249:67: 249:68
        _17 = tokio::runtime::Builder::new() -> [return: bb5, unwind: bb24]; // scope 2 at cita-jsonrpc/src/main.rs:251:30: 251:60
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:251:30: 251:58
                                         // + literal: Const { ty: fn() -> tokio::runtime::Builder {tokio::runtime::Builder::new}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = &mut _17;                  // scope 2 at cita-jsonrpc/src/main.rs:251:30: 252:43
        _18 = (_1.5: usize);             // scope 2 at cita-jsonrpc/src/main.rs:252:35: 252:42
        _15 = tokio::runtime::Builder::core_threads(move _16, move _18) -> [return: bb6, unwind: bb18]; // scope 2 at cita-jsonrpc/src/main.rs:251:30: 252:43
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:252:22: 252:34
                                         // + literal: Const { ty: for<'a> fn(&'a mut tokio::runtime::Builder, usize) -> &'a mut tokio::runtime::Builder {tokio::runtime::Builder::core_threads}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = _15;                       // scope 2 at cita-jsonrpc/src/main.rs:251:30: 253:29
        _13 = tokio::runtime::Builder::build(move _14) -> [return: bb7, unwind: bb18]; // scope 2 at cita-jsonrpc/src/main.rs:251:30: 253:29
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:253:22: 253:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut tokio::runtime::Builder) -> Result<tokio::runtime::Runtime, std::io::Error> {tokio::runtime::Builder::build}, val: Value(<ZST>) }
    }

    bb7: {
        _12 = Result::<tokio::runtime::Runtime, std::io::Error>::unwrap(move _13) -> [return: bb8, unwind: bb18]; // scope 2 at cita-jsonrpc/src/main.rs:251:30: 254:30
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:254:22: 254:28
                                         // + literal: Const { ty: fn(Result<tokio::runtime::Runtime, std::io::Error>) -> tokio::runtime::Runtime {Result::<tokio::runtime::Runtime, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb8: {
        _29 = const true;                // scope 2 at cita-jsonrpc/src/main.rs:254:29: 254:30
        drop(_17) -> [return: bb9, unwind: bb22]; // scope 2 at cita-jsonrpc/src/main.rs:254:30: 254:31
    }

    bb9: {
        _20 = &mut _12;                  // scope 3 at cita-jsonrpc/src/main.rs:255:17: 255:41
        _30 = const false;               // scope 3 at cita-jsonrpc/src/main.rs:255:26: 255:40
        _21 = move _9;                   // scope 3 at cita-jsonrpc/src/main.rs:255:26: 255:40
        _19 = tokio::runtime::Runtime::spawn::<futures::MapErr<hyper::Server<AddrIncoming, JsonrpcMakeService>, [closure@cita-jsonrpc/src/main.rs:249:30: 249:35]>>(move _20, move _21) -> [return: bb10, unwind: bb22]; // scope 3 at cita-jsonrpc/src/main.rs:255:17: 255:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:255:20: 255:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut tokio::runtime::Runtime, futures::MapErr<hyper::Server<AddrIncoming, JsonrpcMakeService>, [closure@cita-jsonrpc/src/main.rs:249:30: 249:35]>) -> &'a mut tokio::runtime::Runtime {tokio::runtime::Runtime::spawn::<futures::MapErr<hyper::Server<AddrIncoming, JsonrpcMakeService>, [closure@cita-jsonrpc/src/main.rs:249:30: 249:35]>>}, val: Value(<ZST>) }
    }

    bb10: {
        _26 = enter() -> [return: bb11, unwind: bb22]; // scope 3 at cita-jsonrpc/src/main.rs:257:17: 257:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:257:17: 257:38
                                         // + literal: Const { ty: fn() -> Result<Enter, EnterError> {enter}, val: Value(<ZST>) }
    }

    bb11: {
        _25 = Result::<Enter, EnterError>::unwrap(move _26) -> [return: bb12, unwind: bb22]; // scope 3 at cita-jsonrpc/src/main.rs:257:17: 258:30
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:258:22: 258:28
                                         // + literal: Const { ty: fn(Result<Enter, EnterError>) -> Enter {Result::<Enter, EnterError>::unwrap}, val: Value(<ZST>) }
    }

    bb12: {
        _24 = &mut _25;                  // scope 3 at cita-jsonrpc/src/main.rs:257:17: 259:53
        _29 = const false;               // scope 3 at cita-jsonrpc/src/main.rs:259:31: 259:33
        _28 = move _12;                  // scope 3 at cita-jsonrpc/src/main.rs:259:31: 259:33
        _27 = tokio::runtime::Runtime::shutdown_on_idle(move _28) -> [return: bb13, unwind: bb17]; // scope 3 at cita-jsonrpc/src/main.rs:259:31: 259:52
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:259:34: 259:50
                                         // + literal: Const { ty: fn(tokio::runtime::Runtime) -> tokio::runtime::Shutdown {tokio::runtime::Runtime::shutdown_on_idle}, val: Value(<ZST>) }
    }

    bb13: {
        _23 = Enter::block_on::<tokio::runtime::Shutdown>(move _24, move _27) -> [return: bb14, unwind: bb17]; // scope 3 at cita-jsonrpc/src/main.rs:257:17: 259:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:259:22: 259:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut Enter, tokio::runtime::Shutdown) -> Result<<tokio::runtime::Shutdown as futures::Future>::Item, <tokio::runtime::Shutdown as futures::Future>::Error> {Enter::block_on::<tokio::runtime::Shutdown>}, val: Value(<ZST>) }
    }

    bb14: {
        _22 = Result::<(), ()>::unwrap(move _23) -> [return: bb15, unwind: bb17]; // scope 3 at cita-jsonrpc/src/main.rs:257:17: 260:30
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:260:22: 260:28
                                         // + literal: Const { ty: fn(Result<(), ()>) {Result::<(), ()>::unwrap}, val: Value(<ZST>) }
    }

    bb15: {
        drop(_25) -> [return: bb16, unwind: bb22]; // scope 3 at cita-jsonrpc/src/main.rs:260:30: 260:31
    }

    bb16: {
        _29 = const false;               // scope 2 at cita-jsonrpc/src/main.rs:261:13: 261:14
        _30 = const false;               // scope 1 at cita-jsonrpc/src/main.rs:261:13: 261:14
        drop((_1.4: std::option::Option<std::string::String>)) -> bb20; // scope 0 at cita-jsonrpc/src/main.rs:261:13: 261:14
    }

    bb17 (cleanup): {
        drop(_25) -> bb22;               // scope 3 at cita-jsonrpc/src/main.rs:260:30: 260:31
    }

    bb18 (cleanup): {
        drop(_17) -> bb24;               // scope 2 at cita-jsonrpc/src/main.rs:254:30: 254:31
    }

    bb19 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/main.rs:243:20: 261:14
    }

    bb20: {
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:261:14: 261:14
    }

    bb21 (cleanup): {
        drop(_12) -> bb24;               // scope 2 at cita-jsonrpc/src/main.rs:261:13: 261:14
    }

    bb22 (cleanup): {
        switchInt(_29) -> [0: bb24, otherwise: bb21]; // scope 2 at cita-jsonrpc/src/main.rs:261:13: 261:14
    }

    bb23 (cleanup): {
        drop(_9) -> bb25;                // scope 1 at cita-jsonrpc/src/main.rs:261:13: 261:14
    }

    bb24 (cleanup): {
        switchInt(_30) -> [0: bb25, otherwise: bb23]; // scope 1 at cita-jsonrpc/src/main.rs:261:13: 261:14
    }

    bb25 (cleanup): {
        drop((_1.4: std::option::Option<std::string::String>)) -> bb19; // scope 0 at cita-jsonrpc/src/main.rs:261:13: 261:14
    }
}

fn main::{closure#3}::{closure#0}(_1: [closure@cita-jsonrpc/src/main.rs:249:30: 249:35], _2: hyper::Error) -> () {
    debug err => _2;                     // in scope 0 at cita-jsonrpc/src/main.rs:249:31: 249:34
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/main.rs:249:36: 249:36
    let _3: ();                          // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:209:9: 209:63
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:209:29: 209:62
    let mut _5: &[&str];                 // in scope 0 at cita-jsonrpc/src/main.rs:249:46: 249:61
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:209:29: 209:62
    let _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:209:29: 209:62
    let _8: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:209:29: 209:62
    let mut _9: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/main.rs:249:63: 249:66
    let _10: &hyper::Error;              // in scope 0 at cita-jsonrpc/src/main.rs:249:63: 249:66
    let mut _11: &[&str; 2];             // in scope 0 at cita-jsonrpc/src/main.rs:249:46: 249:61

    bb0: {
        _11 = const _;                   // scope 0 at cita-jsonrpc/src/main.rs:249:46: 249:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:249:46: 249:61
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#3}::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _5 = _11 as &[&str] (Pointer(Unsize)); // scope 0 at cita-jsonrpc/src/main.rs:249:46: 249:61
        _10 = &_2;                       // scope 0 at cita-jsonrpc/src/main.rs:249:63: 249:66
        _9 = core::fmt::ArgumentV1::<'_>::new_display::<hyper::Error>(_10) -> [return: bb1, unwind: bb5]; // scope 0 at cita-jsonrpc/src/main.rs:249:63: 249:66
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:249:63: 249:66
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b hyper::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<hyper::Error>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = [move _9];                  // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:209:29: 209:62
        _7 = &_8;                        // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:209:29: 209:62
        _6 = _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:209:29: 209:62
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind: bb5]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:209:29: 209:62
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:209:29: 209:62
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _eprint(move _4) -> [return: bb3, unwind: bb5]; // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:209:9: 209:63
                                         // mir::Constant
                                         // + span: /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:209:9: 209:28
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_eprint}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:210:5: 210:6
    }

    bb4: {
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:249:67: 249:67
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at /rustc/4a04d086cac54a41517d5657b59d5fe2caca2d71/library/std/src/macros.rs:210:5: 210:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/main.rs:249:30: 249:67
    }
}

promoted[0] in main::{closure#3}::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-jsonrpc/src/main.rs:249:46: 249:61
    let mut _1: [&str; 2];               // in scope 0 at cita-jsonrpc/src/main.rs:249:46: 249:61

    bb0: {
        _1 = [const "server err ", const "\n"]; // scope 0 at cita-jsonrpc/src/main.rs:249:46: 249:61
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:249:46: 249:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:249:46: 249:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/main.rs:249:46: 249:61
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:249:46: 249:61
    }
}

fn batch_forward_new_tx(_1: &mut Vec<libproto::Request>, _2: &mut SystemTime, _3: &pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) -> () {
    debug new_tx_request_buffer => _1;   // in scope 0 at cita-jsonrpc/src/main.rs:272:5: 272:26
    debug time_stamp => _2;              // in scope 0 at cita-jsonrpc/src/main.rs:273:5: 273:15
    debug tx_pub => _3;                  // in scope 0 at cita-jsonrpc/src/main.rs:274:5: 274:11
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/main.rs:275:3: 275:3
    let _4: log::Level;                  // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _5: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _6: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _7: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _8: bool;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _9: &log::Level;             // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _10: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _11: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _12: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _14: &[&str];                // in scope 0 at cita-jsonrpc/src/main.rs:277:9: 277:90
    let mut _15: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _16: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _17: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/main.rs:278:9: 278:36
    let _19: &usize;                     // in scope 0 at cita-jsonrpc/src/main.rs:278:9: 278:36
    let _20: usize;                      // in scope 0 at cita-jsonrpc/src/main.rs:278:9: 278:36
    let mut _21: &std::vec::Vec<libproto::Request>; // in scope 0 at cita-jsonrpc/src/main.rs:278:9: 278:36
    let mut _22: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/main.rs:279:9: 279:38
    let _23: &std::time::Duration;       // in scope 0 at cita-jsonrpc/src/main.rs:279:9: 279:38
    let _24: std::time::Duration;        // in scope 0 at cita-jsonrpc/src/main.rs:279:9: 279:38
    let mut _25: std::result::Result<std::time::Duration, std::time::SystemTimeError>; // in scope 0 at cita-jsonrpc/src/main.rs:279:9: 279:29
    let mut _26: &std::time::SystemTime; // in scope 0 at cita-jsonrpc/src/main.rs:279:9: 279:29
    let mut _27: libproto::BatchRequest; // in scope 0 at cita-jsonrpc/src/main.rs:281:9: 281:26
    let _28: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:282:5: 282:76
    let mut _29: &mut libproto::BatchRequest; // in scope 0 at cita-jsonrpc/src/main.rs:282:5: 282:76
    let mut _30: protobuf::repeated::RepeatedField<libproto::Request>; // in scope 0 at cita-jsonrpc/src/main.rs:282:39: 282:75
    let mut _31: std::vec::Vec<libproto::Request>; // in scope 0 at cita-jsonrpc/src/main.rs:282:39: 282:68
    let mut _32: &std::vec::Vec<libproto::Request>; // in scope 0 at cita-jsonrpc/src/main.rs:282:39: 282:68
    let mut _34: &[u8];                  // in scope 0 at cita-jsonrpc/src/main.rs:284:22: 284:56
    let mut _35: &[u8; 16];              // in scope 0 at cita-jsonrpc/src/main.rs:284:22: 284:56
    let _36: &[u8; 16];                  // in scope 0 at cita-jsonrpc/src/main.rs:284:22: 284:47
    let mut _37: &uuid::Uuid;            // in scope 0 at cita-jsonrpc/src/main.rs:284:22: 284:47
    let _38: uuid::Uuid;                 // in scope 0 at cita-jsonrpc/src/main.rs:284:22: 284:36
    let _40: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:286:5: 286:41
    let mut _41: &mut libproto::Request; // in scope 0 at cita-jsonrpc/src/main.rs:286:5: 286:41
    let mut _42: libproto::BatchRequest; // in scope 0 at cita-jsonrpc/src/main.rs:286:27: 286:40
    let _43: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:287:5: 287:39
    let mut _44: &mut libproto::Request; // in scope 0 at cita-jsonrpc/src/main.rs:287:5: 287:39
    let mut _45: std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/main.rs:287:28: 287:38
    let mut _47: libproto::Request;      // in scope 0 at cita-jsonrpc/src/main.rs:289:25: 289:32
    let _48: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:290:5: 295:18
    let mut _49: std::result::Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, std::vec::Vec<u8>)>>; // in scope 0 at cita-jsonrpc/src/main.rs:290:5: 294:11
    let mut _50: (std::string::String, std::vec::Vec<u8>); // in scope 0 at cita-jsonrpc/src/main.rs:291:15: 294:10
    let mut _51: std::string::String;    // in scope 0 at cita-jsonrpc/src/main.rs:292:13: 292:62
    let mut _52: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _53: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _54: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
    let mut _55: std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/main.rs:293:13: 293:37
    let mut _56: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-jsonrpc/src/main.rs:293:13: 293:28
    let mut _57: libproto::Message;      // in scope 0 at cita-jsonrpc/src/main.rs:293:13: 293:17
    let mut _58: std::time::SystemTime;  // in scope 0 at cita-jsonrpc/src/main.rs:296:19: 296:36
    let _59: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:297:5: 297:34
    let mut _63: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:298:1: 298:2
    let mut _64: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:298:1: 298:2
    let mut _65: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:298:1: 298:2
    let mut _66: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:298:1: 298:2
    scope 1 {
        debug lvl => _4;                 // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _60: &(&str, &str, &str, u32); // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _61: &[&str; 3];         // in scope 1 at cita-jsonrpc/src/main.rs:277:9: 277:90
        let mut _62: &log::LevelFilter;  // in scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
    scope 2 {
        debug batch_request => _27;      // in scope 2 at cita-jsonrpc/src/main.rs:281:9: 281:26
        let _33: std::vec::Vec<u8>;      // in scope 2 at cita-jsonrpc/src/main.rs:284:9: 284:19
        scope 3 {
            debug request_id => _33;     // in scope 3 at cita-jsonrpc/src/main.rs:284:9: 284:19
            let mut _39: libproto::Request; // in scope 3 at cita-jsonrpc/src/main.rs:285:9: 285:20
            scope 4 {
                debug request => _39;    // in scope 4 at cita-jsonrpc/src/main.rs:285:9: 285:20
                let _46: libproto::Message; // in scope 4 at cita-jsonrpc/src/main.rs:289:9: 289:13
                scope 5 {
                    debug data => _46;   // in scope 5 at cita-jsonrpc/src/main.rs:289:9: 289:13
                }
            }
        }
    }

    bb0: {
        _64 = const false;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _65 = const false;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _63 = const false;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _66 = const false;               // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:34:56: 43:6
        _4 = log::Level::Trace;          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _7 = &_4;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _62 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(batch_forward_new_tx, [], Some(promoted[2])) }
        _6 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _7, _62) -> bb4; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const false;                // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb2: {
        _9 = &_4;                        // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _11 = log::max_level() -> bb5;   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _5) -> [0: bb14, otherwise: bb7]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb4: {
        switchInt(move _6) -> [0: bb1, otherwise: bb2]; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb5: {
        _10 = &_11;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _8 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _9, move _10) -> bb6; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = move _8;                    // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb3;                     // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb7: {
        _61 = const _;                   // scope 1 at cita-jsonrpc/src/main.rs:277:9: 277:90
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:277:9: 277:90
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(batch_forward_new_tx, [], Some(promoted[1])) }
        _14 = _61 as &[&str] (Pointer(Unsize)); // scope 1 at cita-jsonrpc/src/main.rs:277:9: 277:90
        _21 = &(*_1);                    // scope 1 at cita-jsonrpc/src/main.rs:278:9: 278:36
        _20 = Vec::<libproto::Request>::len(move _21) -> bb8; // scope 1 at cita-jsonrpc/src/main.rs:278:9: 278:36
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:278:31: 278:34
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<libproto::Request>) -> usize {Vec::<libproto::Request>::len}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = &_20;                      // scope 1 at cita-jsonrpc/src/main.rs:278:9: 278:36
        _18 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(_19) -> bb9; // scope 1 at cita-jsonrpc/src/main.rs:278:9: 278:36
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:278:9: 278:36
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb9: {
        _26 = &(*_2);                    // scope 1 at cita-jsonrpc/src/main.rs:279:9: 279:29
        _25 = SystemTime::elapsed(move _26) -> bb10; // scope 1 at cita-jsonrpc/src/main.rs:279:9: 279:29
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:279:20: 279:27
                                         // + literal: Const { ty: for<'a> fn(&'a SystemTime) -> Result<Duration, SystemTimeError> {SystemTime::elapsed}, val: Value(<ZST>) }
    }

    bb10: {
        _24 = Result::<Duration, SystemTimeError>::unwrap(move _25) -> bb11; // scope 1 at cita-jsonrpc/src/main.rs:279:9: 279:38
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:279:30: 279:36
                                         // + literal: Const { ty: fn(Result<Duration, SystemTimeError>) -> Duration {Result::<Duration, SystemTimeError>::unwrap}, val: Value(<ZST>) }
    }

    bb11: {
        _23 = &_24;                      // scope 1 at cita-jsonrpc/src/main.rs:279:9: 279:38
        _22 = core::fmt::ArgumentV1::<'_>::new_debug::<Duration>(_23) -> bb12; // scope 1 at cita-jsonrpc/src/main.rs:279:9: 279:38
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:279:9: 279:38
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b Duration) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Duration>}, val: Value(<ZST>) }
    }

    bb12: {
        _17 = [move _18, move _22];      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _16 = &_17;                      // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _15 = _16 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> bb13; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb13: {
        _60 = const _;                   // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(batch_forward_new_tx, [], Some(promoted[0])) }
        _12 = log::__private_api_log(move _13, _4, _60) -> bb14; // scope 1 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb14: {
        _66 = const true;                // scope 0 at cita-jsonrpc/src/main.rs:281:29: 281:48
        _27 = BatchRequest::new() -> bb15; // scope 0 at cita-jsonrpc/src/main.rs:281:29: 281:48
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:281:29: 281:46
                                         // + literal: Const { ty: fn() -> BatchRequest {BatchRequest::new}, val: Value(<ZST>) }
    }

    bb15: {
        _29 = &mut _27;                  // scope 2 at cita-jsonrpc/src/main.rs:282:5: 282:76
        _32 = &(*_1);                    // scope 2 at cita-jsonrpc/src/main.rs:282:39: 282:68
        _31 = <Vec<libproto::Request> as Clone>::clone(move _32) -> [return: bb16, unwind: bb42]; // scope 2 at cita-jsonrpc/src/main.rs:282:39: 282:68
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:282:61: 282:66
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<libproto::Request>) -> Vec<libproto::Request> {<Vec<libproto::Request> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb16: {
        _30 = <Vec<libproto::Request> as Into<protobuf::repeated::RepeatedField<libproto::Request>>>::into(move _31) -> [return: bb17, unwind: bb42]; // scope 2 at cita-jsonrpc/src/main.rs:282:39: 282:75
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:282:69: 282:73
                                         // + literal: Const { ty: fn(Vec<libproto::Request>) -> protobuf::repeated::RepeatedField<libproto::Request> {<Vec<libproto::Request> as Into<protobuf::repeated::RepeatedField<libproto::Request>>>::into}, val: Value(<ZST>) }
    }

    bb17: {
        _28 = BatchRequest::set_new_tx_requests(move _29, move _30) -> [return: bb18, unwind: bb42]; // scope 2 at cita-jsonrpc/src/main.rs:282:5: 282:76
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:282:19: 282:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut BatchRequest, protobuf::repeated::RepeatedField<libproto::Request>) {BatchRequest::set_new_tx_requests}, val: Value(<ZST>) }
    }

    bb18: {
        _38 = uuid::v4::<impl Uuid>::new_v4() -> [return: bb19, unwind: bb42]; // scope 2 at cita-jsonrpc/src/main.rs:284:22: 284:36
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:284:22: 284:34
                                         // + literal: Const { ty: fn() -> Uuid {uuid::v4::<impl Uuid>::new_v4}, val: Value(<ZST>) }
    }

    bb19: {
        _37 = &_38;                      // scope 2 at cita-jsonrpc/src/main.rs:284:22: 284:47
        _36 = Uuid::as_bytes(move _37) -> [return: bb20, unwind: bb42]; // scope 2 at cita-jsonrpc/src/main.rs:284:22: 284:47
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:284:37: 284:45
                                         // + literal: Const { ty: for<'a> fn(&'a Uuid) -> &'a [u8; 16] {Uuid::as_bytes}, val: Value(<ZST>) }
    }

    bb20: {
        _35 = _36;                       // scope 2 at cita-jsonrpc/src/main.rs:284:22: 284:56
        _34 = move _35 as &[u8] (Pointer(Unsize)); // scope 2 at cita-jsonrpc/src/main.rs:284:22: 284:56
        _33 = slice::<impl [u8]>::to_vec(move _34) -> [return: bb21, unwind: bb42]; // scope 2 at cita-jsonrpc/src/main.rs:284:22: 284:56
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:284:48: 284:54
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Vec<u8> {slice::<impl [u8]>::to_vec}, val: Value(<ZST>) }
    }

    bb21: {
        _65 = const true;                // scope 2 at cita-jsonrpc/src/main.rs:284:55: 284:56
        _39 = libproto::Request::new() -> [return: bb22, unwind: bb40]; // scope 3 at cita-jsonrpc/src/main.rs:285:23: 285:45
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:285:23: 285:43
                                         // + literal: Const { ty: fn() -> libproto::Request {libproto::Request::new}, val: Value(<ZST>) }
    }

    bb22: {
        _64 = const true;                // scope 4 at cita-jsonrpc/src/main.rs:286:5: 286:41
        _41 = &mut _39;                  // scope 4 at cita-jsonrpc/src/main.rs:286:5: 286:41
        _66 = const false;               // scope 4 at cita-jsonrpc/src/main.rs:286:27: 286:40
        _42 = move _27;                  // scope 4 at cita-jsonrpc/src/main.rs:286:27: 286:40
        _40 = libproto::Request::set_batch_req(move _41, move _42) -> [return: bb23, unwind: bb38]; // scope 4 at cita-jsonrpc/src/main.rs:286:5: 286:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:286:13: 286:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Request, BatchRequest) {libproto::Request::set_batch_req}, val: Value(<ZST>) }
    }

    bb23: {
        _44 = &mut _39;                  // scope 4 at cita-jsonrpc/src/main.rs:287:5: 287:39
        _65 = const false;               // scope 4 at cita-jsonrpc/src/main.rs:287:28: 287:38
        _45 = move _33;                  // scope 4 at cita-jsonrpc/src/main.rs:287:28: 287:38
        _43 = libproto::Request::set_request_id(move _44, move _45) -> [return: bb24, unwind: bb38]; // scope 4 at cita-jsonrpc/src/main.rs:287:5: 287:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:287:13: 287:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut libproto::Request, Vec<u8>) {libproto::Request::set_request_id}, val: Value(<ZST>) }
    }

    bb24: {
        _64 = const false;               // scope 4 at cita-jsonrpc/src/main.rs:289:25: 289:32
        _47 = move _39;                  // scope 4 at cita-jsonrpc/src/main.rs:289:25: 289:32
        _46 = <libproto::Request as Into<libproto::Message>>::into(move _47) -> [return: bb25, unwind: bb38]; // scope 4 at cita-jsonrpc/src/main.rs:289:25: 289:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:289:33: 289:37
                                         // + literal: Const { ty: fn(libproto::Request) -> libproto::Message {<libproto::Request as Into<libproto::Message>>::into}, val: Value(<ZST>) }
    }

    bb25: {
        _63 = const true;                // scope 4 at cita-jsonrpc/src/main.rs:289:38: 289:39
        _53 = const libproto::router::SubModules::Jsonrpc; // scope 5 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: SubModules, val: Value(Scalar(0x00)) }
        _54 = const RequestNewTxBatch;   // scope 5 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: MsgType, val: Value(Scalar(0x1d)) }
        _52 = RoutingKey(move _53, move _54); // scope 5 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _51 = <RoutingKey as Into<std::string::String>>::into(move _52) -> [return: bb26, unwind: bb36]; // scope 5 at cita-jsonrpc/src/main.rs:292:13: 292:62
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:292:56: 292:60
                                         // + literal: Const { ty: fn(RoutingKey) -> std::string::String {<RoutingKey as Into<std::string::String>>::into}, val: Value(<ZST>) }
    }

    bb26: {
        _63 = const false;               // scope 5 at cita-jsonrpc/src/main.rs:293:13: 293:17
        _57 = move _46;                  // scope 5 at cita-jsonrpc/src/main.rs:293:13: 293:17
        _56 = <libproto::Message as libproto::TryInto<Vec<u8>>>::try_into(move _57) -> [return: bb27, unwind: bb33]; // scope 5 at cita-jsonrpc/src/main.rs:293:13: 293:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:293:18: 293:26
                                         // + literal: Const { ty: fn(libproto::Message) -> Result<Vec<u8>, <libproto::Message as libproto::TryInto<Vec<u8>>>::Error> {<libproto::Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb27: {
        _55 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _56) -> [return: bb28, unwind: bb33]; // scope 5 at cita-jsonrpc/src/main.rs:293:13: 293:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:293:29: 293:35
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb28: {
        _50 = (move _51, move _55);      // scope 5 at cita-jsonrpc/src/main.rs:291:15: 294:10
        _49 = pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send(_3, move _50) -> [return: bb29, unwind: bb36]; // scope 5 at cita-jsonrpc/src/main.rs:290:5: 294:11
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:291:10: 291:14
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, (std::string::String, Vec<u8>)) -> Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>> {pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send}, val: Value(<ZST>) }
    }

    bb29: {
        _48 = Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap(move _49) -> [return: bb30, unwind: bb36]; // scope 5 at cita-jsonrpc/src/main.rs:290:5: 295:18
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:295:10: 295:16
                                         // + literal: Const { ty: fn(Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>) {Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap}, val: Value(<ZST>) }
    }

    bb30: {
        _58 = SystemTime::now() -> [return: bb31, unwind: bb36]; // scope 5 at cita-jsonrpc/src/main.rs:296:19: 296:36
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:296:19: 296:34
                                         // + literal: Const { ty: fn() -> SystemTime {SystemTime::now}, val: Value(<ZST>) }
    }

    bb31: {
        (*_2) = move _58;                // scope 5 at cita-jsonrpc/src/main.rs:296:5: 296:36
        _59 = Vec::<libproto::Request>::clear(_1) -> [return: bb32, unwind: bb36]; // scope 5 at cita-jsonrpc/src/main.rs:297:5: 297:34
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:297:27: 297:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<libproto::Request>) {Vec::<libproto::Request>::clear}, val: Value(<ZST>) }
    }

    bb32: {
        _63 = const false;               // scope 4 at cita-jsonrpc/src/main.rs:298:1: 298:2
        _64 = const false;               // scope 3 at cita-jsonrpc/src/main.rs:298:1: 298:2
        _65 = const false;               // scope 2 at cita-jsonrpc/src/main.rs:298:1: 298:2
        _66 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:298:1: 298:2
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:298:2: 298:2
    }

    bb33 (cleanup): {
        drop(_51) -> bb36;               // scope 5 at cita-jsonrpc/src/main.rs:294:9: 294:10
    }

    bb34 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/main.rs:271:1: 298:2
    }

    bb35 (cleanup): {
        drop(_46) -> bb38;               // scope 4 at cita-jsonrpc/src/main.rs:298:1: 298:2
    }

    bb36 (cleanup): {
        switchInt(_63) -> [0: bb38, otherwise: bb35]; // scope 4 at cita-jsonrpc/src/main.rs:298:1: 298:2
    }

    bb37 (cleanup): {
        drop(_39) -> bb40;               // scope 3 at cita-jsonrpc/src/main.rs:298:1: 298:2
    }

    bb38 (cleanup): {
        switchInt(_64) -> [0: bb40, otherwise: bb37]; // scope 3 at cita-jsonrpc/src/main.rs:298:1: 298:2
    }

    bb39 (cleanup): {
        drop(_33) -> bb42;               // scope 2 at cita-jsonrpc/src/main.rs:298:1: 298:2
    }

    bb40 (cleanup): {
        switchInt(_65) -> [0: bb42, otherwise: bb39]; // scope 2 at cita-jsonrpc/src/main.rs:298:1: 298:2
    }

    bb41 (cleanup): {
        drop(_27) -> bb34;               // scope 0 at cita-jsonrpc/src/main.rs:298:1: 298:2
    }

    bb42 (cleanup): {
        switchInt(_66) -> [0: bb34, otherwise: bb41]; // scope 0 at cita-jsonrpc/src/main.rs:298:1: 298:2
    }
}

promoted[0] in batch_forward_new_tx: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:276:5: 280:6
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:276:5: 280:6

    bb0: {
        _3 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/main.rs"; // scope 0 at cita-jsonrpc/src/main.rs:276:5: 280:6
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:276:5: 280:6
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/main.rs:276:5: 280:6
        _1 = (move _2, move _4, move _6, const 276_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in batch_forward_new_tx: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at cita-jsonrpc/src/main.rs:277:9: 277:90
    let mut _1: [&str; 3];               // in scope 0 at cita-jsonrpc/src/main.rs:277:9: 277:90

    bb0: {
        _1 = [const "Going to send new tx batch to auth with ", const " new tx and buffer time cost is ", const " "]; // scope 0 at cita-jsonrpc/src/main.rs:277:9: 277:90
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:277:9: 277:90
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:277:9: 277:90
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:277:9: 277:90
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/main.rs:277:9: 277:90
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:277:9: 277:90
    }
}

promoted[2] in batch_forward_new_tx: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

fn forward_service(_1: std::string::String, _2: libproto::Request, _3: &mut Vec<libproto::Request>, _4: &mut SystemTime, _5: &pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, _6: &NewTxFlowConfig) -> () {
    debug topic => _1;                   // in scope 0 at cita-jsonrpc/src/main.rs:301:5: 301:10
    debug req => _2;                     // in scope 0 at cita-jsonrpc/src/main.rs:302:5: 302:8
    debug new_tx_request_buffer => _3;   // in scope 0 at cita-jsonrpc/src/main.rs:303:5: 303:26
    debug time_stamp => _4;              // in scope 0 at cita-jsonrpc/src/main.rs:304:5: 304:15
    debug tx_pub => _5;                  // in scope 0 at cita-jsonrpc/src/main.rs:305:5: 305:11
    debug config => _6;                  // in scope 0 at cita-jsonrpc/src/main.rs:306:5: 306:11
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/main.rs:307:3: 307:3
    let mut _7: bool;                    // in scope 0 at cita-jsonrpc/src/main.rs:308:8: 308:73
    let mut _8: &libproto::router::RoutingKey; // in scope 0 at cita-jsonrpc/src/main.rs:308:8: 308:32
    let _9: libproto::router::RoutingKey; // in scope 0 at cita-jsonrpc/src/main.rs:308:8: 308:32
    let mut _10: &std::string::String;   // in scope 0 at cita-jsonrpc/src/main.rs:308:25: 308:31
    let _11: libproto::Message;          // in scope 0 at cita-jsonrpc/src/main.rs:309:13: 309:17
    let mut _12: libproto::Request;      // in scope 0 at cita-jsonrpc/src/main.rs:309:29: 309:32
    let _13: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:310:9: 310:64
    let mut _14: std::result::Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, std::vec::Vec<u8>)>>; // in scope 0 at cita-jsonrpc/src/main.rs:310:9: 310:55
    let mut _15: (std::string::String, std::vec::Vec<u8>); // in scope 0 at cita-jsonrpc/src/main.rs:310:21: 310:54
    let mut _16: std::string::String;    // in scope 0 at cita-jsonrpc/src/main.rs:310:22: 310:27
    let mut _17: std::vec::Vec<u8>;      // in scope 0 at cita-jsonrpc/src/main.rs:310:29: 310:53
    let mut _18: std::result::Result<std::vec::Vec<u8>, libproto::TryIntoConvertError>; // in scope 0 at cita-jsonrpc/src/main.rs:310:29: 310:44
    let mut _19: libproto::Message;      // in scope 0 at cita-jsonrpc/src/main.rs:310:29: 310:33
    let _20: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:312:9: 312:40
    let mut _21: libproto::Request;      // in scope 0 at cita-jsonrpc/src/main.rs:312:36: 312:39
    let _22: log::Level;                 // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
    let mut _23: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    let mut _24: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
    let mut _25: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
    let mut _26: bool;                   // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
    let mut _27: &log::Level;            // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
    let mut _28: &log::LevelFilter;      // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _29: log::LevelFilter;           // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
    let _30: ();                         // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    let mut _31: std::fmt::Arguments<'_>; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _32: &[&str];                // in scope 0 at cita-jsonrpc/src/main.rs:314:13: 314:78
    let mut _33: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _34: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let _35: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
    let mut _36: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/main.rs:315:13: 315:40
    let _37: &usize;                     // in scope 0 at cita-jsonrpc/src/main.rs:315:13: 315:40
    let _38: usize;                      // in scope 0 at cita-jsonrpc/src/main.rs:315:13: 315:40
    let mut _39: &std::vec::Vec<libproto::Request>; // in scope 0 at cita-jsonrpc/src/main.rs:315:13: 315:40
    let mut _40: core::fmt::ArgumentV1<'_>; // in scope 0 at cita-jsonrpc/src/main.rs:316:13: 316:42
    let _41: &std::time::Duration;       // in scope 0 at cita-jsonrpc/src/main.rs:316:13: 316:42
    let _42: std::time::Duration;        // in scope 0 at cita-jsonrpc/src/main.rs:316:13: 316:42
    let mut _43: std::result::Result<std::time::Duration, std::time::SystemTimeError>; // in scope 0 at cita-jsonrpc/src/main.rs:316:13: 316:33
    let mut _44: &std::time::SystemTime; // in scope 0 at cita-jsonrpc/src/main.rs:316:13: 316:33
    let mut _45: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:318:12: 319:85
    let mut _46: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:318:12: 318:64
    let mut _47: usize;                  // in scope 0 at cita-jsonrpc/src/main.rs:318:12: 318:39
    let mut _48: &std::vec::Vec<libproto::Request>; // in scope 0 at cita-jsonrpc/src/main.rs:318:12: 318:39
    let mut _49: usize;                  // in scope 0 at cita-jsonrpc/src/main.rs:318:42: 318:64
    let mut _50: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:319:16: 319:85
    let mut _51: u32;                    // in scope 0 at cita-jsonrpc/src/main.rs:319:16: 319:60
    let mut _52: &std::time::Duration;   // in scope 0 at cita-jsonrpc/src/main.rs:319:16: 319:60
    let _53: std::time::Duration;        // in scope 0 at cita-jsonrpc/src/main.rs:319:16: 319:45
    let mut _54: std::result::Result<std::time::Duration, std::time::SystemTimeError>; // in scope 0 at cita-jsonrpc/src/main.rs:319:16: 319:36
    let mut _55: &std::time::SystemTime; // in scope 0 at cita-jsonrpc/src/main.rs:319:16: 319:36
    let mut _56: u32;                    // in scope 0 at cita-jsonrpc/src/main.rs:319:63: 319:85
    let _57: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:321:13: 321:76
    let mut _61: &libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _62: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:324:1: 324:2
    let mut _63: bool;                   // in scope 0 at cita-jsonrpc/src/main.rs:324:1: 324:2
    scope 1 {
        debug data => _11;               // in scope 1 at cita-jsonrpc/src/main.rs:309:13: 309:17
    }
    scope 2 {
        debug lvl => _22;                // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:35:13: 35:16
        let mut _58: &(&str, &str, &str, u32); // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        let mut _59: &[&str; 2];         // in scope 2 at cita-jsonrpc/src/main.rs:314:13: 314:78
        let mut _60: &log::LevelFilter;  // in scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }

    bb0: {
        _62 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:308:8: 308:73
        _63 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:308:8: 308:73
        _62 = const true;                // scope 0 at cita-jsonrpc/src/main.rs:308:8: 308:73
        _63 = const true;                // scope 0 at cita-jsonrpc/src/main.rs:308:8: 308:73
        _10 = &_1;                       // scope 0 at cita-jsonrpc/src/main.rs:308:25: 308:31
        _9 = <RoutingKey as From<&std::string::String>>::from(move _10) -> [return: bb1, unwind: bb39]; // scope 0 at cita-jsonrpc/src/main.rs:308:8: 308:32
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:308:8: 308:24
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&std::string::String) -> RoutingKey {<RoutingKey as From<&std::string::String>>::from}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_9;                        // scope 0 at cita-jsonrpc/src/main.rs:308:8: 308:32
        _61 = const _;                   // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
                                         // + literal: Const { ty: &RoutingKey, val: Unevaluated(forward_service, [], Some(promoted[3])) }
        _7 = <RoutingKey as PartialEq>::ne(move _8, _61) -> [return: bb2, unwind: bb39]; // scope 0 at cita-jsonrpc/src/main.rs:308:8: 308:73
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:308:8: 308:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RoutingKey, &'b RoutingKey) -> bool {<RoutingKey as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _7) -> [0: bb8, otherwise: bb3]; // scope 0 at cita-jsonrpc/src/main.rs:308:8: 308:73
    }

    bb3: {
        _63 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:309:29: 309:32
        _12 = move _2;                   // scope 0 at cita-jsonrpc/src/main.rs:309:29: 309:32
        _11 = <libproto::Request as Into<libproto::Message>>::into(move _12) -> [return: bb4, unwind: bb39]; // scope 0 at cita-jsonrpc/src/main.rs:309:29: 309:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:309:33: 309:37
                                         // + literal: Const { ty: fn(libproto::Request) -> libproto::Message {<libproto::Request as Into<libproto::Message>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _62 = const false;               // scope 1 at cita-jsonrpc/src/main.rs:310:22: 310:27
        _16 = move _1;                   // scope 1 at cita-jsonrpc/src/main.rs:310:22: 310:27
        _19 = move _11;                  // scope 1 at cita-jsonrpc/src/main.rs:310:29: 310:33
        _18 = <libproto::Message as libproto::TryInto<Vec<u8>>>::try_into(move _19) -> [return: bb5, unwind: bb34]; // scope 1 at cita-jsonrpc/src/main.rs:310:29: 310:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:310:34: 310:42
                                         // + literal: Const { ty: fn(libproto::Message) -> Result<Vec<u8>, <libproto::Message as libproto::TryInto<Vec<u8>>>::Error> {<libproto::Message as libproto::TryInto<Vec<u8>>>::try_into}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = Result::<Vec<u8>, TryIntoConvertError>::unwrap(move _18) -> [return: bb6, unwind: bb34]; // scope 1 at cita-jsonrpc/src/main.rs:310:29: 310:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:310:45: 310:51
                                         // + literal: Const { ty: fn(Result<Vec<u8>, TryIntoConvertError>) -> Vec<u8> {Result::<Vec<u8>, TryIntoConvertError>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = (move _16, move _17);      // scope 1 at cita-jsonrpc/src/main.rs:310:21: 310:54
        _14 = pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send(_5, move _15) -> [return: bb7, unwind: bb39]; // scope 1 at cita-jsonrpc/src/main.rs:310:9: 310:55
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:310:16: 310:20
                                         // + literal: Const { ty: for<'a> fn(&'a pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>, (std::string::String, Vec<u8>)) -> Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>> {pubsub::crossbeam_channel::Sender::<(std::string::String, Vec<u8>)>::send}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap(move _14) -> [return: bb41, unwind: bb39]; // scope 1 at cita-jsonrpc/src/main.rs:310:9: 310:64
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:310:56: 310:62
                                         // + literal: Const { ty: fn(Result<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>) {Result::<(), pubsub::crossbeam_channel::SendError<(std::string::String, Vec<u8>)>>::unwrap}, val: Value(<ZST>) }
    }

    bb8: {
        _63 = const false;               // scope 0 at cita-jsonrpc/src/main.rs:312:36: 312:39
        _21 = move _2;                   // scope 0 at cita-jsonrpc/src/main.rs:312:36: 312:39
        _20 = Vec::<libproto::Request>::push(_3, move _21) -> [return: bb9, unwind: bb39]; // scope 0 at cita-jsonrpc/src/main.rs:312:9: 312:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:312:31: 312:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<libproto::Request>, libproto::Request) {Vec::<libproto::Request>::push}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = log::Level::Trace;         // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:169:14: 169:34
        _25 = &_22;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:15
        _60 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: &log::LevelFilter, val: Unevaluated(forward_service, [], Some(promoted[2])) }
        _24 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _25, _60) -> [return: bb13, unwind: bb39]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = const false;               // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb12;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb11: {
        _27 = &_22;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:50
        _29 = log::max_level() -> [return: bb14, unwind: bb39]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:71
                                         // + literal: Const { ty: fn() -> log::LevelFilter {log::max_level}, val: Value(<ZST>) }
    }

    bb12: {
        switchInt(move _23) -> [0: bb23, otherwise: bb16]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb13: {
        switchInt(move _24) -> [0: bb10, otherwise: bb11]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb14: {
        _28 = &_29;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:54: 36:73
        _26 = <log::Level as PartialOrd<log::LevelFilter>>::le(move _27, move _28) -> [return: bb15, unwind: bb39]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:47: 36:73
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a log::Level, &'b log::LevelFilter) -> bool {<log::Level as PartialOrd<log::LevelFilter>>::le}, val: Value(<ZST>) }
    }

    bb15: {
        _23 = move _26;                  // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
        goto -> bb12;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:12: 36:73
    }

    bb16: {
        _59 = const _;                   // scope 2 at cita-jsonrpc/src/main.rs:314:13: 314:78
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:314:13: 314:78
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(forward_service, [], Some(promoted[1])) }
        _32 = _59 as &[&str] (Pointer(Unsize)); // scope 2 at cita-jsonrpc/src/main.rs:314:13: 314:78
        _39 = &(*_3);                    // scope 2 at cita-jsonrpc/src/main.rs:315:13: 315:40
        _38 = Vec::<libproto::Request>::len(move _39) -> [return: bb17, unwind: bb39]; // scope 2 at cita-jsonrpc/src/main.rs:315:13: 315:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:315:35: 315:38
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<libproto::Request>) -> usize {Vec::<libproto::Request>::len}, val: Value(<ZST>) }
    }

    bb17: {
        _37 = &_38;                      // scope 2 at cita-jsonrpc/src/main.rs:315:13: 315:40
        _36 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(_37) -> [return: bb18, unwind: bb39]; // scope 2 at cita-jsonrpc/src/main.rs:315:13: 315:40
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:315:13: 315:40
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb18: {
        _44 = &(*_4);                    // scope 2 at cita-jsonrpc/src/main.rs:316:13: 316:33
        _43 = SystemTime::elapsed(move _44) -> [return: bb19, unwind: bb39]; // scope 2 at cita-jsonrpc/src/main.rs:316:13: 316:33
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:316:24: 316:31
                                         // + literal: Const { ty: for<'a> fn(&'a SystemTime) -> Result<Duration, SystemTimeError> {SystemTime::elapsed}, val: Value(<ZST>) }
    }

    bb19: {
        _42 = Result::<Duration, SystemTimeError>::unwrap(move _43) -> [return: bb20, unwind: bb39]; // scope 2 at cita-jsonrpc/src/main.rs:316:13: 316:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:316:34: 316:40
                                         // + literal: Const { ty: fn(Result<Duration, SystemTimeError>) -> Duration {Result::<Duration, SystemTimeError>::unwrap}, val: Value(<ZST>) }
    }

    bb20: {
        _41 = &_42;                      // scope 2 at cita-jsonrpc/src/main.rs:316:13: 316:42
        _40 = core::fmt::ArgumentV1::<'_>::new_debug::<Duration>(_41) -> [return: bb21, unwind: bb39]; // scope 2 at cita-jsonrpc/src/main.rs:316:13: 316:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:316:13: 316:42
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b Duration) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Duration>}, val: Value(<ZST>) }
    }

    bb21: {
        _35 = [move _36, move _40];      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _34 = &_35;                      // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _33 = _34 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
        _31 = Arguments::<'_>::new_v1(move _32, move _33) -> [return: bb22, unwind: bb39]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:227:9: 227:32
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb22: {
        _58 = const _;                   // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
                                         // + literal: Const { ty: &(&str, &str, &str, u32), val: Unevaluated(forward_service, [], Some(promoted[0])) }
        _30 = log::__private_api_log(move _31, _22, _58) -> [return: bb42, unwind: bb39]; // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 37:38
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd, 'e> fn(Arguments<'a>, log::Level, &'b (&'c str, &'d str, &'e str, u32)) {log::__private_api_log}, val: Value(<ZST>) }
    }

    bb23: {
        _48 = &(*_3);                    // scope 0 at cita-jsonrpc/src/main.rs:318:12: 318:39
        _47 = Vec::<libproto::Request>::len(move _48) -> [return: bb27, unwind: bb39]; // scope 0 at cita-jsonrpc/src/main.rs:318:12: 318:39
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:318:34: 318:37
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<libproto::Request>) -> usize {Vec::<libproto::Request>::len}, val: Value(<ZST>) }
    }

    bb24: {
        _45 = const true;                // scope 0 at cita-jsonrpc/src/main.rs:318:12: 319:85
        goto -> bb26;                    // scope 0 at cita-jsonrpc/src/main.rs:318:12: 319:85
    }

    bb25: {
        _55 = &(*_4);                    // scope 0 at cita-jsonrpc/src/main.rs:319:16: 319:36
        _54 = SystemTime::elapsed(move _55) -> [return: bb28, unwind: bb39]; // scope 0 at cita-jsonrpc/src/main.rs:319:16: 319:36
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:319:27: 319:34
                                         // + literal: Const { ty: for<'a> fn(&'a SystemTime) -> Result<Duration, SystemTimeError> {SystemTime::elapsed}, val: Value(<ZST>) }
    }

    bb26: {
        switchInt(move _45) -> [0: bb32, otherwise: bb31]; // scope 0 at cita-jsonrpc/src/main.rs:318:12: 319:85
    }

    bb27: {
        _49 = ((*_6).0: usize);          // scope 0 at cita-jsonrpc/src/main.rs:318:42: 318:64
        _46 = Gt(move _47, move _49);    // scope 0 at cita-jsonrpc/src/main.rs:318:12: 318:64
        switchInt(move _46) -> [0: bb25, otherwise: bb24]; // scope 0 at cita-jsonrpc/src/main.rs:318:12: 319:85
    }

    bb28: {
        _53 = Result::<Duration, SystemTimeError>::unwrap(move _54) -> [return: bb29, unwind: bb39]; // scope 0 at cita-jsonrpc/src/main.rs:319:16: 319:45
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:319:37: 319:43
                                         // + literal: Const { ty: fn(Result<Duration, SystemTimeError>) -> Duration {Result::<Duration, SystemTimeError>::unwrap}, val: Value(<ZST>) }
    }

    bb29: {
        _52 = &_53;                      // scope 0 at cita-jsonrpc/src/main.rs:319:16: 319:60
        _51 = Duration::subsec_nanos(move _52) -> [return: bb30, unwind: bb39]; // scope 0 at cita-jsonrpc/src/main.rs:319:16: 319:60
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:319:46: 319:58
                                         // + literal: Const { ty: for<'a> fn(&'a Duration) -> u32 {Duration::subsec_nanos}, val: Value(<ZST>) }
    }

    bb30: {
        _56 = ((*_6).1: u32);            // scope 0 at cita-jsonrpc/src/main.rs:319:63: 319:85
        _50 = Gt(move _51, move _56);    // scope 0 at cita-jsonrpc/src/main.rs:319:16: 319:85
        _45 = move _50;                  // scope 0 at cita-jsonrpc/src/main.rs:318:12: 319:85
        goto -> bb26;                    // scope 0 at cita-jsonrpc/src/main.rs:318:12: 319:85
    }

    bb31: {
        _57 = batch_forward_new_tx(_3, _4, _5) -> [return: bb43, unwind: bb39]; // scope 0 at cita-jsonrpc/src/main.rs:321:13: 321:76
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:321:13: 321:33
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut Vec<libproto::Request>, &'b mut SystemTime, &'c pubsub::crossbeam_channel::Sender<(std::string::String, Vec<u8>)>) {batch_forward_new_tx}, val: Value(<ZST>) }
    }

    bb32: {
        switchInt(_62) -> [0: bb33, otherwise: bb37]; // scope 0 at cita-jsonrpc/src/main.rs:324:1: 324:2
    }

    bb33: {
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:324:2: 324:2
    }

    bb34 (cleanup): {
        drop(_16) -> bb39;               // scope 1 at cita-jsonrpc/src/main.rs:310:53: 310:54
    }

    bb35 (cleanup): {
        switchInt(_62) -> [0: bb36, otherwise: bb40]; // scope 0 at cita-jsonrpc/src/main.rs:324:1: 324:2
    }

    bb36 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/main.rs:300:1: 324:2
    }

    bb37: {
        drop(_1) -> bb33;                // scope 0 at cita-jsonrpc/src/main.rs:324:1: 324:2
    }

    bb38 (cleanup): {
        drop(_2) -> bb35;                // scope 0 at cita-jsonrpc/src/main.rs:324:1: 324:2
    }

    bb39 (cleanup): {
        switchInt(_63) -> [0: bb35, otherwise: bb38]; // scope 0 at cita-jsonrpc/src/main.rs:324:1: 324:2
    }

    bb40 (cleanup): {
        drop(_1) -> bb36;                // scope 0 at cita-jsonrpc/src/main.rs:324:1: 324:2
    }

    bb41: {
        goto -> bb32;                    // scope 1 at cita-jsonrpc/src/main.rs:310:9: 310:64
    }

    bb42: {
        goto -> bb23;                    // scope 2 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:37:13: 41:14
    }

    bb43: {
        goto -> bb32;                    // scope 0 at cita-jsonrpc/src/main.rs:321:13: 321:76
    }
}

promoted[0] in forward_service: &(&str, &str, &str, u32) = {
    let mut _0: &(&str, &str, &str, u32); // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    let mut _1: (&str, &str, &str, u32); // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
    let mut _2: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _3: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _4: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _5: &str;                    // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
    let mut _6: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:313:9: 317:10
    let mut _7: &str;                    // in scope 0 at cita-jsonrpc/src/main.rs:313:9: 317:10

    bb0: {
        _3 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _5 = const "cita_jsonrpc";       // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:235:9: 235:23
        _7 = const "cita-jsonrpc/src/main.rs"; // scope 0 at cita-jsonrpc/src/main.rs:313:9: 317:10
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:313:9: 317:10
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at cita-jsonrpc/src/main.rs:313:9: 317:10
        _1 = (move _2, move _4, move _6, const 313_u32); // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:18: 40:79
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:40:17: 40:79
    }
}

promoted[1] in forward_service: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at cita-jsonrpc/src/main.rs:314:13: 314:78
    let mut _1: [&str; 2];               // in scope 0 at cita-jsonrpc/src/main.rs:314:13: 314:78

    bb0: {
        _1 = [const "New tx is pushed and has ", const " new tx and buffer time cost is "]; // scope 0 at cita-jsonrpc/src/main.rs:314:13: 314:78
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:314:13: 314:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:314:13: 314:78
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at cita-jsonrpc/src/main.rs:314:13: 314:78
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:314:13: 314:78
    }
}

promoted[2] in forward_service: &log::LevelFilter = {
    let mut _0: &log::LevelFilter;       // return place in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    let mut _1: log::LevelFilter;        // in scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43

    bb0: {
        _1 = const _;                    // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // mir::Constant
                                         // + span: /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
                                         // + literal: Const { ty: log::LevelFilter, val: Unevaluated(log::STATIC_MAX_LEVEL, [], None) }
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
        return;                          // scope 0 at /home/workstation/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.6/src/macros.rs:36:19: 36:43
    }
}

promoted[3] in forward_service: &RoutingKey = {
    let mut _0: &libproto::router::RoutingKey; // return place in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _1: libproto::router::RoutingKey; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    let mut _2: libproto::router::SubModules; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
    let mut _3: libproto::router::MsgType; // in scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25

    bb0: {
        _2 = libproto::router::SubModules::Jsonrpc; // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:28:13: 28:28
        _3 = RequestNewTx;               // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:29:13: 29:25
        _1 = RoutingKey(move _2, move _3); // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        _0 = &_1;                        // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
        return;                          // scope 0 at /home/workstation/.cargo/git/checkouts/cita-common-1cdbc5a3f2d672a3/50b22af/libproto/src/router.rs:27:9: 30:10
    }
}

fn start_profile(_1: &ProfileConfig) -> () {
    debug config => _1;                  // in scope 0 at cita-jsonrpc/src/main.rs:326:18: 326:24
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/main.rs:326:42: 326:42
    let mut _2: bool;                    // in scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:86
    let mut _3: bool;                    // in scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:52
    let mut _4: bool;                    // in scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:21
    let mut _5: bool;                    // in scope 0 at cita-jsonrpc/src/main.rs:327:25: 327:52
    let mut _6: u64;                     // in scope 0 at cita-jsonrpc/src/main.rs:327:25: 327:47
    let mut _7: bool;                    // in scope 0 at cita-jsonrpc/src/main.rs:327:56: 327:86
    let mut _8: u64;                     // in scope 0 at cita-jsonrpc/src/main.rs:327:56: 327:81
    let _9: u64;                         // in scope 0 at cita-jsonrpc/src/main.rs:328:13: 328:18
    let _11: std::thread::JoinHandle<()>; // in scope 0 at cita-jsonrpc/src/main.rs:330:9: 339:11
    let mut _12: [closure@cita-jsonrpc/src/main.rs:330:23: 330:30]; // in scope 0 at cita-jsonrpc/src/main.rs:330:23: 339:10
    scope 1 {
        debug start => _9;               // in scope 1 at cita-jsonrpc/src/main.rs:328:13: 328:18
        let _10: u64;                    // in scope 1 at cita-jsonrpc/src/main.rs:329:13: 329:21
        scope 2 {
            debug duration => _10;       // in scope 2 at cita-jsonrpc/src/main.rs:329:13: 329:21
        }
    }

    bb0: {
        _4 = ((*_1).0: bool);            // scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:21
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:52
    }

    bb1: {
        _2 = const false;                // scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:86
        goto -> bb3;                     // scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:86
    }

    bb2: {
        _8 = ((*_1).2: u64);             // scope 0 at cita-jsonrpc/src/main.rs:327:56: 327:81
        _7 = Ne(move _8, const 0_u64);   // scope 0 at cita-jsonrpc/src/main.rs:327:56: 327:86
        _2 = move _7;                    // scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:86
        goto -> bb3;                     // scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:86
    }

    bb3: {
        switchInt(move _2) -> [0: bb9, otherwise: bb7]; // scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:86
    }

    bb4: {
        _3 = const false;                // scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:52
        goto -> bb6;                     // scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:52
    }

    bb5: {
        _6 = ((*_1).1: u64);             // scope 0 at cita-jsonrpc/src/main.rs:327:25: 327:47
        _5 = Ne(move _6, const 0_u64);   // scope 0 at cita-jsonrpc/src/main.rs:327:25: 327:52
        _3 = move _5;                    // scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:52
        goto -> bb6;                     // scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:52
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at cita-jsonrpc/src/main.rs:327:8: 327:86
    }

    bb7: {
        _9 = ((*_1).1: u64);             // scope 0 at cita-jsonrpc/src/main.rs:328:21: 328:43
        _10 = ((*_1).2: u64);            // scope 1 at cita-jsonrpc/src/main.rs:329:24: 329:49
        _12 = [closure@cita-jsonrpc/src/main.rs:330:23: 330:30] { start: _9, duration: _10 }; // scope 2 at cita-jsonrpc/src/main.rs:330:23: 339:10
                                         // closure
                                         // + def_id: DefId(0:512 ~ cita_jsonrpc[a6db]::start_profile::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (u64, u64),
                                         // ]
        _11 = std::thread::spawn::<[closure@cita-jsonrpc/src/main.rs:330:23: 330:30], ()>(move _12) -> bb8; // scope 2 at cita-jsonrpc/src/main.rs:330:9: 339:11
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:330:9: 330:22
                                         // + literal: Const { ty: fn([closure@cita-jsonrpc/src/main.rs:330:23: 330:30]) -> JoinHandle<()> {std::thread::spawn::<[closure@cita-jsonrpc/src/main.rs:330:23: 330:30], ()>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_11) -> bb9;                // scope 2 at cita-jsonrpc/src/main.rs:339:11: 339:12
    }

    bb9: {
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:341:2: 341:2
    }
}

fn start_profile::{closure#0}(_1: [closure@cita-jsonrpc/src/main.rs:330:23: 330:30]) -> () {
    debug start => (_1.0: u64);          // in scope 0 at cita-jsonrpc/src/main.rs:328:13: 328:18
    debug duration => (_1.1: u64);       // in scope 0 at cita-jsonrpc/src/main.rs:329:13: 329:21
    let mut _0: ();                      // return place in scope 0 at cita-jsonrpc/src/main.rs:330:31: 330:31
    let _2: ();                          // in scope 0 at cita-jsonrpc/src/main.rs:331:13: 331:51
    let mut _3: std::time::Duration;     // in scope 0 at cita-jsonrpc/src/main.rs:331:27: 331:50
    let mut _4: u64;                     // in scope 0 at cita-jsonrpc/src/main.rs:331:41: 331:46
    let _5: ();                          // in scope 0 at cita-jsonrpc/src/main.rs:332:13: 336:42
    let mut _6: std::result::Result<(), cpuprofiler::error::Error>; // in scope 0 at cita-jsonrpc/src/main.rs:332:13: 335:44
    let mut _7: &mut cpuprofiler::Profiler; // in scope 0 at cita-jsonrpc/src/main.rs:332:13: 335:44
    let mut _8: &mut cpuprofiler::Profiler; // in scope 0 at cita-jsonrpc/src/main.rs:332:13: 335:44
    let mut _9: &mut std::sync::MutexGuard<'_, cpuprofiler::Profiler>; // in scope 0 at cita-jsonrpc/src/main.rs:332:13: 335:44
    let mut _10: std::sync::MutexGuard<'_, cpuprofiler::Profiler>; // in scope 0 at cita-jsonrpc/src/main.rs:332:13: 334:26
    let mut _11: std::result::Result<std::sync::MutexGuard<'_, cpuprofiler::Profiler>, std::sync::PoisonError<std::sync::MutexGuard<'_, cpuprofiler::Profiler>>>; // in scope 0 at cita-jsonrpc/src/main.rs:332:13: 333:24
    let mut _12: &std::sync::Mutex<cpuprofiler::Profiler>; // in scope 0 at cita-jsonrpc/src/main.rs:332:13: 333:24
    let _13: &std::sync::Mutex<cpuprofiler::Profiler>; // in scope 0 at cita-jsonrpc/src/main.rs:332:13: 333:24
    let _14: &cpuprofiler::PROFILER;     // in scope 0 at cita-jsonrpc/src/main.rs:332:13: 332:21
    let _15: &str;                       // in scope 0 at cita-jsonrpc/src/main.rs:336:25: 336:41
    let _16: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:337:13: 337:54
    let mut _17: std::time::Duration;    // in scope 0 at cita-jsonrpc/src/main.rs:337:27: 337:53
    let mut _18: u64;                    // in scope 0 at cita-jsonrpc/src/main.rs:337:41: 337:49
    let _19: ();                         // in scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:53
    let mut _20: std::result::Result<(), cpuprofiler::error::Error>; // in scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:44
    let mut _21: &mut cpuprofiler::Profiler; // in scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:44
    let mut _22: &mut cpuprofiler::Profiler; // in scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:44
    let mut _23: &mut std::sync::MutexGuard<'_, cpuprofiler::Profiler>; // in scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:44
    let mut _24: std::sync::MutexGuard<'_, cpuprofiler::Profiler>; // in scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:37
    let mut _25: std::result::Result<std::sync::MutexGuard<'_, cpuprofiler::Profiler>, std::sync::PoisonError<std::sync::MutexGuard<'_, cpuprofiler::Profiler>>>; // in scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:28
    let mut _26: &std::sync::Mutex<cpuprofiler::Profiler>; // in scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:28
    let _27: &std::sync::Mutex<cpuprofiler::Profiler>; // in scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:28
    let _28: &cpuprofiler::PROFILER;     // in scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:21

    bb0: {
        _4 = (_1.0: u64);                // scope 0 at cita-jsonrpc/src/main.rs:331:41: 331:46
        _3 = Duration::new(move _4, const 0_u32) -> bb1; // scope 0 at cita-jsonrpc/src/main.rs:331:27: 331:50
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:331:27: 331:40
                                         // + literal: Const { ty: fn(u64, u32) -> Duration {Duration::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = std::thread::sleep(move _3) -> bb2; // scope 0 at cita-jsonrpc/src/main.rs:331:13: 331:51
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:331:13: 331:26
                                         // + literal: Const { ty: fn(Duration) {std::thread::sleep}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = const {alloc98: &PROFILER}; // scope 0 at cita-jsonrpc/src/main.rs:332:13: 332:21
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:332:13: 332:21
                                         // + literal: Const { ty: &PROFILER, val: Value(Scalar(alloc98)) }
        _13 = <PROFILER as Deref>::deref(_14) -> bb3; // scope 0 at cita-jsonrpc/src/main.rs:332:13: 333:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:332:13: 333:24
                                         // + literal: Const { ty: for<'a> fn(&'a PROFILER) -> &'a <PROFILER as Deref>::Target {<PROFILER as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _13;                       // scope 0 at cita-jsonrpc/src/main.rs:332:13: 333:24
        _11 = Mutex::<Profiler>::lock(move _12) -> bb4; // scope 0 at cita-jsonrpc/src/main.rs:332:13: 333:24
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:333:18: 333:22
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<Profiler>) -> Result<MutexGuard<'a, Profiler>, PoisonError<MutexGuard<'a, Profiler>>> {Mutex::<Profiler>::lock}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = Result::<MutexGuard<'_, Profiler>, PoisonError<MutexGuard<'_, Profiler>>>::unwrap(move _11) -> bb5; // scope 0 at cita-jsonrpc/src/main.rs:332:13: 334:26
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:334:18: 334:24
                                         // + literal: Const { ty: fn(Result<MutexGuard<'_, Profiler>, PoisonError<MutexGuard<'_, Profiler>>>) -> MutexGuard<'_, Profiler> {Result::<MutexGuard<'_, Profiler>, PoisonError<MutexGuard<'_, Profiler>>>::unwrap}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = &mut _10;                   // scope 0 at cita-jsonrpc/src/main.rs:332:13: 335:44
        _8 = <MutexGuard<'_, Profiler> as DerefMut>::deref_mut(move _9) -> [return: bb6, unwind: bb20]; // scope 0 at cita-jsonrpc/src/main.rs:332:13: 335:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:332:13: 335:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut MutexGuard<'_, Profiler>) -> &'a mut <MutexGuard<'_, Profiler> as Deref>::Target {<MutexGuard<'_, Profiler> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = _8;                         // scope 0 at cita-jsonrpc/src/main.rs:332:13: 335:44
        _6 = Profiler::start::<&str>(move _7, const "./jsonrpc.profile") -> [return: bb7, unwind: bb20]; // scope 0 at cita-jsonrpc/src/main.rs:332:13: 335:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:335:18: 335:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Profiler, &str) -> Result<(), cpuprofiler::error::Error> {Profiler::start::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:335:24: 335:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _15 = const "Couldn't start";    // scope 0 at cita-jsonrpc/src/main.rs:336:25: 336:41
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:336:25: 336:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = Result::<(), cpuprofiler::error::Error>::expect(move _6, _15) -> [return: bb8, unwind: bb20]; // scope 0 at cita-jsonrpc/src/main.rs:332:13: 336:42
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:336:18: 336:24
                                         // + literal: Const { ty: for<'a> fn(Result<(), cpuprofiler::error::Error>, &'a str) {Result::<(), cpuprofiler::error::Error>::expect}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_10) -> bb9;                // scope 0 at cita-jsonrpc/src/main.rs:336:42: 336:43
    }

    bb9: {
        _18 = (_1.1: u64);               // scope 0 at cita-jsonrpc/src/main.rs:337:41: 337:49
        _17 = Duration::new(move _18, const 0_u32) -> bb10; // scope 0 at cita-jsonrpc/src/main.rs:337:27: 337:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:337:27: 337:40
                                         // + literal: Const { ty: fn(u64, u32) -> Duration {Duration::new}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = std::thread::sleep(move _17) -> bb11; // scope 0 at cita-jsonrpc/src/main.rs:337:13: 337:54
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:337:13: 337:26
                                         // + literal: Const { ty: fn(Duration) {std::thread::sleep}, val: Value(<ZST>) }
    }

    bb11: {
        _28 = const {alloc98: &PROFILER}; // scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:21
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:338:13: 338:21
                                         // + literal: Const { ty: &PROFILER, val: Value(Scalar(alloc98)) }
        _27 = <PROFILER as Deref>::deref(_28) -> bb12; // scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:338:13: 338:28
                                         // + literal: Const { ty: for<'a> fn(&'a PROFILER) -> &'a <PROFILER as Deref>::Target {<PROFILER as Deref>::deref}, val: Value(<ZST>) }
    }

    bb12: {
        _26 = _27;                       // scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:28
        _25 = Mutex::<Profiler>::lock(move _26) -> bb13; // scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:28
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:338:22: 338:26
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<Profiler>) -> Result<MutexGuard<'a, Profiler>, PoisonError<MutexGuard<'a, Profiler>>> {Mutex::<Profiler>::lock}, val: Value(<ZST>) }
    }

    bb13: {
        _24 = Result::<MutexGuard<'_, Profiler>, PoisonError<MutexGuard<'_, Profiler>>>::unwrap(move _25) -> bb14; // scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:37
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:338:29: 338:35
                                         // + literal: Const { ty: fn(Result<MutexGuard<'_, Profiler>, PoisonError<MutexGuard<'_, Profiler>>>) -> MutexGuard<'_, Profiler> {Result::<MutexGuard<'_, Profiler>, PoisonError<MutexGuard<'_, Profiler>>>::unwrap}, val: Value(<ZST>) }
    }

    bb14: {
        _23 = &mut _24;                  // scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:44
        _22 = <MutexGuard<'_, Profiler> as DerefMut>::deref_mut(move _23) -> [return: bb15, unwind: bb19]; // scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:338:13: 338:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut MutexGuard<'_, Profiler>) -> &'a mut <MutexGuard<'_, Profiler> as Deref>::Target {<MutexGuard<'_, Profiler> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb15: {
        _21 = _22;                       // scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:44
        _20 = Profiler::stop(move _21) -> [return: bb16, unwind: bb19]; // scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:44
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:338:38: 338:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut Profiler) -> Result<(), cpuprofiler::error::Error> {Profiler::stop}, val: Value(<ZST>) }
    }

    bb16: {
        _19 = Result::<(), cpuprofiler::error::Error>::unwrap(move _20) -> [return: bb17, unwind: bb19]; // scope 0 at cita-jsonrpc/src/main.rs:338:13: 338:53
                                         // mir::Constant
                                         // + span: cita-jsonrpc/src/main.rs:338:45: 338:51
                                         // + literal: Const { ty: fn(Result<(), cpuprofiler::error::Error>) {Result::<(), cpuprofiler::error::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb17: {
        drop(_24) -> bb18;               // scope 0 at cita-jsonrpc/src/main.rs:338:53: 338:54
    }

    bb18: {
        return;                          // scope 0 at cita-jsonrpc/src/main.rs:339:10: 339:10
    }

    bb19 (cleanup): {
        drop(_24) -> bb21;               // scope 0 at cita-jsonrpc/src/main.rs:338:53: 338:54
    }

    bb20 (cleanup): {
        drop(_10) -> bb21;               // scope 0 at cita-jsonrpc/src/main.rs:336:42: 336:43
    }

    bb21 (cleanup): {
        resume;                          // scope 0 at cita-jsonrpc/src/main.rs:330:23: 339:10
    }
}

alloc98 (static: PROFILER, size: 0, align: 1) {}

fn TransferType::HTTP(_1: (RequestInfo, futures::Complete<jsonrpc_types::rpc_response::Output>)) -> TransferType {
    let mut _0: helper::TransferType;    // return place in scope 0 at cita-jsonrpc/src/helper.rs:28:5: 28:9

    bb0: {
        _0 = TransferType::HTTP(move _1); // scope 0 at cita-jsonrpc/src/helper.rs:28:5: 28:9
        return;                          // scope 0 at cita-jsonrpc/src/helper.rs:28:5: 28:9
    }
}

// MIR FOR CTFE
fn TransferType::HTTP(_1: (RequestInfo, futures::Complete<jsonrpc_types::rpc_response::Output>)) -> TransferType {
    let mut _0: helper::TransferType;    // return place in scope 0 at cita-jsonrpc/src/helper.rs:28:5: 28:9

    bb0: {
        _0 = TransferType::HTTP(move _1); // scope 0 at cita-jsonrpc/src/helper.rs:28:5: 28:9
        return;                          // scope 0 at cita-jsonrpc/src/helper.rs:28:5: 28:9
    }
}

fn TransferType::WEBSOCKET(_1: (RequestInfo, ws::Sender)) -> TransferType {
    let mut _0: helper::TransferType;    // return place in scope 0 at cita-jsonrpc/src/helper.rs:30:5: 30:14

    bb0: {
        _0 = TransferType::WEBSOCKET(move _1); // scope 0 at cita-jsonrpc/src/helper.rs:30:5: 30:14
        return;                          // scope 0 at cita-jsonrpc/src/helper.rs:30:5: 30:14
    }
}

// MIR FOR CTFE
fn TransferType::WEBSOCKET(_1: (RequestInfo, ws::Sender)) -> TransferType {
    let mut _0: helper::TransferType;    // return place in scope 0 at cita-jsonrpc/src/helper.rs:30:5: 30:14

    bb0: {
        _0 = TransferType::WEBSOCKET(move _1); // scope 0 at cita-jsonrpc/src/helper.rs:30:5: 30:14
        return;                          // scope 0 at cita-jsonrpc/src/helper.rs:30:5: 30:14
    }
}

fn RpcAccessLog::Single(_1: SingleRpcAccessLog) -> RpcAccessLog {
    let mut _0: http_server::RpcAccessLog; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:78:5: 78:11

    bb0: {
        _0 = RpcAccessLog::Single(move _1); // scope 0 at cita-jsonrpc/src/http_server.rs:78:5: 78:11
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:78:5: 78:11
    }
}

// MIR FOR CTFE
fn RpcAccessLog::Single(_1: SingleRpcAccessLog) -> RpcAccessLog {
    let mut _0: http_server::RpcAccessLog; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:78:5: 78:11

    bb0: {
        _0 = RpcAccessLog::Single(move _1); // scope 0 at cita-jsonrpc/src/http_server.rs:78:5: 78:11
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:78:5: 78:11
    }
}

fn RpcAccessLog::Batch(_1: BatchRpcAccessLog) -> RpcAccessLog {
    let mut _0: http_server::RpcAccessLog; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:79:5: 79:10

    bb0: {
        _0 = RpcAccessLog::Batch(move _1); // scope 0 at cita-jsonrpc/src/http_server.rs:79:5: 79:10
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:79:5: 79:10
    }
}

// MIR FOR CTFE
fn RpcAccessLog::Batch(_1: BatchRpcAccessLog) -> RpcAccessLog {
    let mut _0: http_server::RpcAccessLog; // return place in scope 0 at cita-jsonrpc/src/http_server.rs:79:5: 79:10

    bb0: {
        _0 = RpcAccessLog::Batch(move _1); // scope 0 at cita-jsonrpc/src/http_server.rs:79:5: 79:10
        return;                          // scope 0 at cita-jsonrpc/src/http_server.rs:79:5: 79:10
    }
}

fn MQRequest::Single(_1: Box<HybridRequest>) -> MQRequest {
    let mut _0: mq_publisher::MQRequest; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:40:5: 40:11

    bb0: {
        _0 = MQRequest::Single(move _1); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:40:5: 40:11
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:40:5: 40:11
    }
}

// MIR FOR CTFE
fn MQRequest::Single(_1: Box<HybridRequest>) -> MQRequest {
    let mut _0: mq_publisher::MQRequest; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:40:5: 40:11

    bb0: {
        _0 = MQRequest::Single(move _1); // scope 0 at cita-jsonrpc/src/mq_publisher.rs:40:5: 40:11
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:40:5: 40:11
    }
}

fn MQRequest::Batch(_1: Vec<HybridRequest>) -> MQRequest {
    let mut _0: mq_publisher::MQRequest; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:41:5: 41:10

    bb0: {
        _0 = MQRequest::Batch(move _1);  // scope 0 at cita-jsonrpc/src/mq_publisher.rs:41:5: 41:10
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:41:5: 41:10
    }
}

// MIR FOR CTFE
fn MQRequest::Batch(_1: Vec<HybridRequest>) -> MQRequest {
    let mut _0: mq_publisher::MQRequest; // return place in scope 0 at cita-jsonrpc/src/mq_publisher.rs:41:5: 41:10

    bb0: {
        _0 = MQRequest::Batch(move _1);  // scope 0 at cita-jsonrpc/src/mq_publisher.rs:41:5: 41:10
        return;                          // scope 0 at cita-jsonrpc/src/mq_publisher.rs:41:5: 41:10
    }
}

fn PublishFutResponse::Single(_1: SingleFutureResponse) -> PublishFutResponse {
    let mut _0: response::PublishFutResponse; // return place in scope 0 at cita-jsonrpc/src/response.rs:173:5: 173:11

    bb0: {
        _0 = PublishFutResponse::Single(move _1); // scope 0 at cita-jsonrpc/src/response.rs:173:5: 173:11
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:173:5: 173:11
    }
}

// MIR FOR CTFE
fn PublishFutResponse::Single(_1: SingleFutureResponse) -> PublishFutResponse {
    let mut _0: response::PublishFutResponse; // return place in scope 0 at cita-jsonrpc/src/response.rs:173:5: 173:11

    bb0: {
        _0 = PublishFutResponse::Single(move _1); // scope 0 at cita-jsonrpc/src/response.rs:173:5: 173:11
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:173:5: 173:11
    }
}

fn PublishFutResponse::Batch(_1: BatchFutureResponse) -> PublishFutResponse {
    let mut _0: response::PublishFutResponse; // return place in scope 0 at cita-jsonrpc/src/response.rs:174:5: 174:10

    bb0: {
        _0 = PublishFutResponse::Batch(move _1); // scope 0 at cita-jsonrpc/src/response.rs:174:5: 174:10
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:174:5: 174:10
    }
}

// MIR FOR CTFE
fn PublishFutResponse::Batch(_1: BatchFutureResponse) -> PublishFutResponse {
    let mut _0: response::PublishFutResponse; // return place in scope 0 at cita-jsonrpc/src/response.rs:174:5: 174:10

    bb0: {
        _0 = PublishFutResponse::Batch(move _1); // scope 0 at cita-jsonrpc/src/response.rs:174:5: 174:10
        return;                          // scope 0 at cita-jsonrpc/src/response.rs:174:5: 174:10
    }
}

fn ServiceError::BodyConcatError(_1: hyper::Error) -> ServiceError {
    let mut _0: service_error::ServiceError; // return place in scope 0 at cita-jsonrpc/src/service_error.rs:26:5: 26:20

    bb0: {
        _0 = ServiceError::BodyConcatError(move _1); // scope 0 at cita-jsonrpc/src/service_error.rs:26:5: 26:20
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:26:5: 26:20
    }
}

// MIR FOR CTFE
fn ServiceError::BodyConcatError(_1: hyper::Error) -> ServiceError {
    let mut _0: service_error::ServiceError; // return place in scope 0 at cita-jsonrpc/src/service_error.rs:26:5: 26:20

    bb0: {
        _0 = ServiceError::BodyConcatError(move _1); // scope 0 at cita-jsonrpc/src/service_error.rs:26:5: 26:20
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:26:5: 26:20
    }
}

fn ServiceError::JsonrpcSerdeError(_1: serde_json::Error) -> ServiceError {
    let mut _0: service_error::ServiceError; // return place in scope 0 at cita-jsonrpc/src/service_error.rs:27:5: 27:22

    bb0: {
        _0 = ServiceError::JsonrpcSerdeError(move _1); // scope 0 at cita-jsonrpc/src/service_error.rs:27:5: 27:22
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:27:5: 27:22
    }
}

// MIR FOR CTFE
fn ServiceError::JsonrpcSerdeError(_1: serde_json::Error) -> ServiceError {
    let mut _0: service_error::ServiceError; // return place in scope 0 at cita-jsonrpc/src/service_error.rs:27:5: 27:22

    bb0: {
        _0 = ServiceError::JsonrpcSerdeError(move _1); // scope 0 at cita-jsonrpc/src/service_error.rs:27:5: 27:22
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:27:5: 27:22
    }
}

fn ServiceError::JsonrpcPartCompleteError(_1: RequestInfo, _2: jsonrpc_types::Error) -> ServiceError {
    let mut _0: service_error::ServiceError; // return place in scope 0 at cita-jsonrpc/src/service_error.rs:28:5: 28:29

    bb0: {
        _0 = ServiceError::JsonrpcPartCompleteError(move _1, move _2); // scope 0 at cita-jsonrpc/src/service_error.rs:28:5: 28:29
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:28:5: 28:29
    }
}

// MIR FOR CTFE
fn ServiceError::JsonrpcPartCompleteError(_1: RequestInfo, _2: jsonrpc_types::Error) -> ServiceError {
    let mut _0: service_error::ServiceError; // return place in scope 0 at cita-jsonrpc/src/service_error.rs:28:5: 28:29

    bb0: {
        _0 = ServiceError::JsonrpcPartCompleteError(move _1, move _2); // scope 0 at cita-jsonrpc/src/service_error.rs:28:5: 28:29
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:28:5: 28:29
    }
}

fn ServiceError::MQRpcTimeout(_1: std::option::Option<RequestInfo>) -> ServiceError {
    let mut _0: service_error::ServiceError; // return place in scope 0 at cita-jsonrpc/src/service_error.rs:29:5: 29:17

    bb0: {
        _0 = ServiceError::MQRpcTimeout(move _1); // scope 0 at cita-jsonrpc/src/service_error.rs:29:5: 29:17
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:29:5: 29:17
    }
}

// MIR FOR CTFE
fn ServiceError::MQRpcTimeout(_1: std::option::Option<RequestInfo>) -> ServiceError {
    let mut _0: service_error::ServiceError; // return place in scope 0 at cita-jsonrpc/src/service_error.rs:29:5: 29:17

    bb0: {
        _0 = ServiceError::MQRpcTimeout(move _1); // scope 0 at cita-jsonrpc/src/service_error.rs:29:5: 29:17
        return;                          // scope 0 at cita-jsonrpc/src/service_error.rs:29:5: 29:17
    }
}
