// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn common::Platform::cpu_load_aggregate(_1: &Self) -> Result<data::DelayedMeasurement<data::CPULoad>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<data::DelayedMeasurement<data::CPULoad>, std::io::Error>;
    let _2: data::DelayedMeasurement<std::vec::Vec<data::CPULoad>>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, data::DelayedMeasurement<std::vec::Vec<data::CPULoad>>>;
    let mut _4: std::result::Result<data::DelayedMeasurement<std::vec::Vec<data::CPULoad>>, std::io::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _7: data::DelayedMeasurement<std::vec::Vec<data::CPULoad>>;
    let mut _8: data::DelayedMeasurement<data::CPULoad>;
    let mut _9: std::boxed::Box<dyn std::ops::Fn() -> std::result::Result<data::CPULoad, std::io::Error> + std::marker::Send>;
    let mut _10: std::boxed::Box<{closure@src/platform/common.rs:24:26: 24:33}>;
    let mut _11: {closure@src/platform/common.rs:24:26: 24:33};
    let mut _12: bool;
    scope 1 {
        debug measurement => _2;
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _12 = const false;
        _4 = <Self as common::Platform>::cpu_load(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <Result<data::DelayedMeasurement<Vec<data::CPULoad>>, std::io::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Continue).0: data::DelayedMeasurement<std::vec::Vec<data::CPULoad>>);
        _12 = const true;
        _2 = move _7;
        _12 = const false;
        _11 = {closure@src/platform/common.rs:24:26: 24:33} { measurement: move _2 };
        _10 = Box::<{closure@src/platform/common.rs:24:26: 24:33}>::new(move _11) -> [return: bb7, unwind: bb12];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::DelayedMeasurement<data::CPULoad>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        _12 = const false;
        goto -> bb9;
    }

    bb7: {
        _9 = move _10 as std::boxed::Box<dyn std::ops::Fn() -> std::result::Result<data::CPULoad, std::io::Error> + std::marker::Send> (PointerCoercion(Unsize));
        _8 = data::DelayedMeasurement::<data::CPULoad>::new(move _9) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _0 = Result::<data::DelayedMeasurement<data::CPULoad>, std::io::Error>::Ok(move _8);
        _12 = const false;
        goto -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_12) -> [0: bb10, otherwise: bb11];
    }
}

fn common::Platform::cpu_load_aggregate::{closure#0}(_1: &{closure@src/platform/common.rs:24:26: 24:33}) -> Result<data::CPULoad, std::io::Error> {
    debug measurement => ((*_1).0: data::DelayedMeasurement<std::vec::Vec<data::CPULoad>>);
    let mut _0: std::result::Result<data::CPULoad, std::io::Error>;
    let mut _2: std::result::Result<std::vec::Vec<data::CPULoad>, std::io::Error>;
    let mut _3: &data::DelayedMeasurement<std::vec::Vec<data::CPULoad>>;

    bb0: {
        _3 = &((*_1).0: data::DelayedMeasurement<std::vec::Vec<data::CPULoad>>);
        _2 = data::DelayedMeasurement::<Vec<data::CPULoad>>::done(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<Vec<data::CPULoad>, std::io::Error>::map::<data::CPULoad, {closure@src/platform/common.rs:24:57: 24:61}>(move _2, const ZeroSized: {closure@src/platform/common.rs:24:57: 24:61}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn common::Platform::cpu_load_aggregate::{closure#0}::{closure#0}(_1: {closure@src/platform/common.rs:24:57: 24:61}, _2: Vec<data::CPULoad>) -> data::CPULoad {
    debug ls => _2;
    let mut _0: data::CPULoad;
    let mut _3: std::slice::Iter<'_, data::CPULoad>;
    let _4: &[data::CPULoad];
    let mut _5: &std::vec::Vec<data::CPULoad>;
    let _7: &data::CPULoad;
    let mut _8: std::option::Option<&data::CPULoad>;
    let mut _9: &mut std::slice::Iter<'_, data::CPULoad>;
    let mut _10: std::slice::Iter<'_, data::CPULoad>;
    scope 1 {
        debug it => _3;
        let _6: data::CPULoad;
        scope 2 {
            debug first => _6;
        }
    }

    bb0: {
        _5 = &_2;
        _4 = <Vec<data::CPULoad> as Deref>::deref(move _5) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _3 = core::slice::<impl [data::CPULoad]>::iter(_4) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _9 = &mut _3;
        _8 = <std::slice::Iter<'_, data::CPULoad> as Iterator>::next(move _9) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _7 = Option::<&data::CPULoad>::unwrap(move _8) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _6 = <data::CPULoad as Clone>::clone(_7) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _10 = move _3;
        _0 = <std::slice::Iter<'_, data::CPULoad> as Iterator>::fold::<data::CPULoad, {closure@src/platform/common.rs:27:36: 27:44}>(move _10, move _6, const ZeroSized: {closure@src/platform/common.rs:27:36: 27:44}) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn common::Platform::cpu_load_aggregate::{closure#0}::{closure#0}::{closure#0}(_1: &mut {closure@src/platform/common.rs:27:36: 27:44}, _2: data::CPULoad, _3: &data::CPULoad) -> data::CPULoad {
    debug acc => _2;
    debug l => _3;
    let mut _0: data::CPULoad;

    bb0: {
        _0 = data::CPULoad::avg_add(move _2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn common::Platform::uptime(_1: &Self) -> Result<std::time::Duration, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::time::Duration, std::io::Error>;
    let mut _2: std::result::Result<chrono::DateTime<chrono::Utc>, std::io::Error>;

    bb0: {
        _2 = <Self as common::Platform>::boot_time(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<chrono::DateTime<chrono::Utc>, std::io::Error>::and_then::<std::time::Duration, {closure@src/platform/common.rs:39:35: 39:39}>(move _2, const ZeroSized: {closure@src/platform/common.rs:39:35: 39:39}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn common::Platform::uptime::{closure#0}(_1: {closure@src/platform/common.rs:39:35: 39:39}, _2: chrono::DateTime<chrono::Utc>) -> Result<std::time::Duration, std::io::Error> {
    debug bt => _2;
    let mut _0: std::result::Result<std::time::Duration, std::io::Error>;
    let mut _3: std::result::Result<std::time::Duration, time::OutOfRangeError>;
    let _4: &time::Duration;
    let _5: time::Duration;
    let mut _6: chrono::DateTime<chrono::Utc>;

    bb0: {
        _6 = chrono::Utc::now() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = chrono::DateTime::<chrono::Utc>::signed_duration_since::<chrono::Utc>(move _6, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_5;
        _3 = time::Duration::to_std(_4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = Result::<std::time::Duration, OutOfRangeError>::map_err::<std::io::Error, {closure@src/platform/common.rs:41:26: 41:29}>(move _3, const ZeroSized: {closure@src/platform/common.rs:41:26: 41:29}) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn common::Platform::uptime::{closure#0}::{closure#0}(_1: {closure@src/platform/common.rs:41:26: 41:29}, _2: OutOfRangeError) -> std::io::Error {
    let mut _0: std::io::Error;
    let mut _3: std::io::ErrorKind;

    bb0: {
        _3 = Other;
        _0 = std::io::Error::new::<&str>(move _3, const "Could not process time") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn common::Platform::boot_time(_1: &Self) -> Result<chrono::DateTime<chrono::Utc>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<chrono::DateTime<chrono::Utc>, std::io::Error>;
    let mut _2: std::result::Result<std::time::Duration, std::io::Error>;

    bb0: {
        _2 = <Self as common::Platform>::uptime(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<std::time::Duration, std::io::Error>::and_then::<chrono::DateTime<chrono::Utc>, {closure@src/platform/common.rs:47:32: 47:36}>(move _2, const ZeroSized: {closure@src/platform/common.rs:47:32: 47:36}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn common::Platform::boot_time::{closure#0}(_1: {closure@src/platform/common.rs:47:32: 47:36}, _2: std::time::Duration) -> Result<chrono::DateTime<chrono::Utc>, std::io::Error> {
    debug ut => _2;
    let mut _0: std::result::Result<chrono::DateTime<chrono::Utc>, std::io::Error>;
    let mut _3: chrono::DateTime<chrono::Utc>;
    let mut _4: chrono::DateTime<chrono::Utc>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, time::Duration>;
    let mut _6: std::result::Result<time::Duration, std::io::Error>;
    let mut _7: std::result::Result<time::Duration, time::OutOfRangeError>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _10: time::Duration;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _10;
        scope 4 {
        }
    }

    bb0: {
        _4 = chrono::Utc::now() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = time::Duration::from_std(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Result::<time::Duration, OutOfRangeError>::map_err::<std::io::Error, {closure@src/platform/common.rs:49:26: 49:29}>(move _7, const ZeroSized: {closure@src/platform/common.rs:49:26: 49:29}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = <Result<time::Duration, std::io::Error> as Try>::branch(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _10 = ((_5 as Continue).0: time::Duration);
        _3 = <chrono::DateTime<chrono::Utc> as Sub<time::Duration>>::sub(move _4, _10) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<chrono::DateTime<chrono::Utc>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _9) -> [return: bb9, unwind continue];
    }

    bb8: {
        _0 = Result::<chrono::DateTime<chrono::Utc>, std::io::Error>::Ok(move _3);
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

fn common::Platform::boot_time::{closure#0}::{closure#0}(_1: {closure@src/platform/common.rs:49:26: 49:29}, _2: OutOfRangeError) -> std::io::Error {
    let mut _0: std::io::Error;
    let mut _3: std::io::ErrorKind;

    bb0: {
        _3 = Other;
        _0 = std::io::Error::new::<&str>(move _3, const "Could not process time") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn common::Platform::mount_at(_1: &Self, _2: P) -> Result<data::Filesystem, std::io::Error> {
    debug self => _1;
    debug path => _2;
    let mut _0: std::result::Result<data::Filesystem, std::io::Error>;
    let mut _3: std::result::Result<std::vec::Vec<data::Filesystem>, std::io::Error>;
    let mut _4: {closure@src/platform/common.rs:65:23: 65:31};
    let mut _5: &P;

    bb0: {
        _3 = <Self as common::Platform>::mounts(_1) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _5 = &_2;
        _4 = {closure@src/platform/common.rs:65:23: 65:31} { path: move _5 };
        _0 = Result::<Vec<data::Filesystem>, std::io::Error>::and_then::<data::Filesystem, {closure@src/platform/common.rs:65:23: 65:31}>(move _3, move _4) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn common::Platform::mount_at::{closure#0}(_1: {closure@src/platform/common.rs:65:23: 65:31}, _2: Vec<data::Filesystem>) -> Result<data::Filesystem, std::io::Error> {
    debug mounts => _2;
    debug path => (*(_1.0: &P));
    let mut _0: std::result::Result<data::Filesystem, std::io::Error>;
    let mut _3: std::option::Option<data::Filesystem>;
    let mut _4: &mut std::vec::IntoIter<data::Filesystem>;
    let mut _5: std::vec::IntoIter<data::Filesystem>;
    let mut _6: {closure@src/platform/common.rs:68:27: 68:34};
    let mut _7: &P;

    bb0: {
        _5 = <Vec<data::Filesystem> as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = deref_copy (_1.0: &P);
        _6 = {closure@src/platform/common.rs:68:27: 68:34} { path: _7 };
        _3 = <std::vec::IntoIter<data::Filesystem> as Iterator>::find::<{closure@src/platform/common.rs:68:27: 68:34}>(move _4, move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = Option::<data::Filesystem>::ok_or_else::<std::io::Error, {closure@src/platform/common.rs:69:33: 69:35}>(move _3, const ZeroSized: {closure@src/platform/common.rs:69:33: 69:35}) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_5) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn common::Platform::mount_at::{closure#0}::{closure#0}(_1: &mut {closure@src/platform/common.rs:68:27: 68:34}, _2: &data::Filesystem) -> bool {
    debug mount => _2;
    debug path => (*((*_1).0: &P));
    let mut _0: bool;
    let mut _3: &&std::path::Path;
    let _4: &std::path::Path;
    let _5: &std::string::String;
    let mut _6: &&std::path::Path;
    let _7: &std::path::Path;
    let mut _8: &P;

    bb0: {
        _5 = &((*_2).9: std::string::String);
        _4 = Path::new::<String>(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _8 = deref_copy ((*_1).0: &P);
        _7 = <P as AsRef<Path>>::as_ref(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _0 = <&Path as PartialEq>::eq(move _3, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn common::Platform::mount_at::{closure#0}::{closure#1}(_1: {closure@src/platform/common.rs:69:33: 69:35}) -> std::io::Error {
    let mut _0: std::io::Error;
    let mut _2: std::io::ErrorKind;

    bb0: {
        _2 = NotFound;
        _0 = std::io::Error::new::<&str>(move _2, const "No such mount") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn load_average() -> Result<data::LoadAverage, std::io::Error> {
    let mut _0: std::result::Result<data::LoadAverage, std::io::Error>;
    let mut _1: [f64; 3];
    let mut _2: i32;
    let mut _3: *mut f64;
    let mut _4: &mut f64;
    let _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let mut _8: std::io::Error;
    let mut _9: std::io::ErrorKind;
    let mut _10: data::LoadAverage;
    let mut _11: f32;
    let mut _12: f64;
    let _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _16: f32;
    let mut _17: f64;
    let _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: f32;
    let mut _22: f64;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    scope 1 {
        debug loads => _1;
        scope 2 {
        }
    }

    bb0: {
        _1 = [const 0f64, const 0f64, const 0f64];
        _5 = const 0_usize;
        _6 = const 3_usize;
        _7 = Lt(_5, _6);
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _5) -> [success: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _1[_5];
        _3 = &raw mut (*_4);
        _2 = platform::unix::getloadavg(move _3, const 3_i32) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _2) -> [3: bb5, otherwise: bb3];
    }

    bb3: {
        _9 = Other;
        _8 = std::io::Error::new::<&str>(move _9, const "getloadavg() failed") -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Result::<data::LoadAverage, std::io::Error>::Err(move _8);
        goto -> bb9;
    }

    bb5: {
        _13 = const 0_usize;
        _14 = const 3_usize;
        _15 = Lt(_13, _14);
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb6, unwind continue];
    }

    bb6: {
        _12 = _1[_13];
        _11 = move _12 as f32 (FloatToFloat);
        _18 = const 1_usize;
        _19 = const 3_usize;
        _20 = Lt(_18, _19);
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb7, unwind continue];
    }

    bb7: {
        _17 = _1[_18];
        _16 = move _17 as f32 (FloatToFloat);
        _23 = const 2_usize;
        _24 = const 3_usize;
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> [success: bb8, unwind continue];
    }

    bb8: {
        _22 = _1[_23];
        _21 = move _22 as f32 (FloatToFloat);
        _10 = data::LoadAverage { one: move _11, five: move _16, fifteen: move _21 };
        _0 = Result::<data::LoadAverage, std::io::Error>::Ok(move _10);
        goto -> bb9;
    }

    bb9: {
        return;
    }
}

load_average::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn networks() -> Result<std::collections::BTreeMap<String, data::Network>, std::io::Error> {
    let mut _0: std::result::Result<std::collections::BTreeMap<std::string::String, data::Network>, std::io::Error>;
    let mut _1: *mut libc::ifaddrs;
    let mut _2: i32;
    let mut _3: *mut *mut libc::ifaddrs;
    let mut _4: &mut *mut libc::ifaddrs;
    let mut _5: std::io::Error;
    let mut _6: std::io::ErrorKind;
    let mut _9: bool;
    let mut _10: *mut libc::ifaddrs;
    let mut _11: *mut libc::ifaddrs;
    let mut _14: std::borrow::Cow<'_, str>;
    let _15: &std::ffi::CStr;
    let mut _16: *const i8;
    let mut _17: *mut i8;
    let mut _19: std::collections::btree_map::Entry<'_, std::string::String, data::Network>;
    let mut _20: &mut std::collections::BTreeMap<std::string::String, data::Network>;
    let mut _21: std::string::String;
    let mut _22: &std::string::String;
    let mut _23: data::Network;
    let mut _24: std::string::String;
    let mut _25: std::vec::Vec<data::NetworkAddrs>;
    let mut _27: *const libc::sockaddr;
    let mut _28: *mut libc::sockaddr;
    let mut _29: bool;
    let mut _30: &data::IpAddr;
    let _31: ();
    let mut _32: &mut std::vec::Vec<data::NetworkAddrs>;
    let mut _33: data::NetworkAddrs;
    let mut _34: data::IpAddr;
    let mut _35: data::IpAddr;
    let mut _36: *const libc::sockaddr;
    let mut _37: *mut libc::sockaddr;
    let mut _38: *mut libc::ifaddrs;
    let _39: ();
    let mut _40: std::collections::BTreeMap<std::string::String, data::Network>;
    let mut _42: bool;
    let mut _43: bool;
    scope 1 {
        debug ifap => _1;
        let _7: *mut libc::ifaddrs;
        scope 2 {
        }
        scope 3 {
            debug ifirst => _7;
            let mut _8: std::collections::BTreeMap<std::string::String, data::Network>;
            scope 4 {
                debug result => _8;
                let _12: libc::ifaddrs;
                scope 5 {
                    debug ifa => _12;
                    let _13: std::string::String;
                    scope 7 {
                        debug name => _13;
                        let _18: &mut data::Network;
                        scope 9 {
                            debug entry => _18;
                            let _26: data::IpAddr;
                            scope 10 {
                                debug addr => _26;
                                let mut _41: &data::IpAddr;
                                scope 11 {
                                    let mut _44: *const ();
                                    let mut _45: usize;
                                    let mut _46: usize;
                                    let mut _47: usize;
                                    let mut _48: usize;
                                    let mut _49: bool;
                                }
                            }
                        }
                    }
                    scope 8 {
                    }
                }
                scope 6 {
                    let mut _50: *const ();
                    let mut _51: usize;
                    let mut _52: usize;
                    let mut _53: usize;
                    let mut _54: usize;
                    let mut _55: bool;
                }
                scope 12 {
                }
            }
        }
    }

    bb0: {
        _43 = const false;
        _42 = const false;
        _1 = null_mut::<ifaddrs>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _1;
        _3 = &raw mut (*_4);
        _2 = getifaddrs(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _2) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        _6 = Other;
        _5 = std::io::Error::new::<&str>(move _6, const "getifaddrs() failed") -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Result::<std::collections::BTreeMap<String, data::Network>, std::io::Error>::Err(move _5);
        goto -> bb23;
    }

    bb5: {
        _7 = _1;
        _8 = std::collections::BTreeMap::<String, data::Network>::new() -> [return: bb6, unwind continue];
    }

    bb6: {
        _10 = _1;
        _11 = null_mut::<ifaddrs>() -> [return: bb7, unwind: bb25];
    }

    bb7: {
        _9 = Ne(move _10, move _11);
        switchInt(move _9) -> [0: bb21, otherwise: bb8];
    }

    bb8: {
        _50 = _1 as *const () (PtrToPtr);
        _51 = _50 as usize (Transmute);
        _52 = AlignOf(libc::ifaddrs);
        _53 = Sub(_52, const 1_usize);
        _54 = BitAnd(_51, _53);
        _55 = Eq(_54, const 0_usize);
        assert(_55, "misaligned pointer dereference: address must be a multiple of {} but is {}", _52, _51) -> [success: bb32, unwind unreachable];
    }

    bb9: {
        _14 = alloc::ffi::c_str::<impl CStr>::to_string_lossy(_15) -> [return: bb10, unwind: bb25];
    }

    bb10: {
        _13 = Cow::<'_, str>::into_owned(move _14) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _43 = const true;
        _20 = &mut _8;
        _22 = &_13;
        _21 = <String as Clone>::clone(move _22) -> [return: bb12, unwind: bb30];
    }

    bb12: {
        _19 = std::collections::BTreeMap::<String, data::Network>::entry(move _20, move _21) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        _42 = const true;
        _43 = const false;
        _24 = move _13;
        _25 = Vec::<data::NetworkAddrs>::new() -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _23 = data::Network { name: move _24, addrs: move _25 };
        _42 = const false;
        _18 = std::collections::btree_map::Entry::<'_, String, data::Network>::or_insert(move _19, move _23) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        _42 = const false;
        _28 = (_12.3: *mut libc::sockaddr);
        _27 = move _28 as *const libc::sockaddr (PointerCoercion(MutToConstPointer));
        _26 = parse_addr(move _27) -> [return: bb16, unwind: bb30];
    }

    bb16: {
        _30 = &_26;
        _41 = const _;
        _29 = <data::IpAddr as PartialEq>::ne(move _30, _41) -> [return: bb17, unwind: bb30];
    }

    bb17: {
        switchInt(move _29) -> [0: bb20, otherwise: bb18];
    }

    bb18: {
        _32 = &mut ((*_18).1: std::vec::Vec<data::NetworkAddrs>);
        _34 = move _26;
        _37 = (_12.4: *mut libc::sockaddr);
        _36 = move _37 as *const libc::sockaddr (PointerCoercion(MutToConstPointer));
        _35 = parse_addr(move _36) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _33 = data::NetworkAddrs { addr: move _34, netmask: move _35 };
        _31 = Vec::<data::NetworkAddrs>::push(move _32, move _33) -> [return: bb33, unwind: bb30];
    }

    bb20: {
        _44 = _1 as *const () (PtrToPtr);
        _45 = _44 as usize (Transmute);
        _46 = AlignOf(libc::ifaddrs);
        _47 = Sub(_46, const 1_usize);
        _48 = BitAnd(_45, _47);
        _49 = Eq(_48, const 0_usize);
        assert(_49, "misaligned pointer dereference: address must be a multiple of {} but is {}", _46, _45) -> [success: bb31, unwind unreachable];
    }

    bb21: {
        _39 = freeifaddrs(_7) -> [return: bb22, unwind: bb25];
    }

    bb22: {
        _40 = move _8;
        _0 = Result::<std::collections::BTreeMap<String, data::Network>, std::io::Error>::Ok(move _40);
        goto -> bb23;
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_24) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_8) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        drop(_19) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_42) -> [0: bb30, otherwise: bb27];
    }

    bb29 (cleanup): {
        drop(_13) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_43) -> [0: bb25, otherwise: bb29];
    }

    bb31: {
        _38 = ((*_1).0: *mut libc::ifaddrs);
        _1 = move _38;
        _43 = const false;
        goto -> bb6;
    }

    bb32: {
        _12 = (*_1);
        _17 = (_12.1: *mut i8);
        _16 = move _17 as *const i8 (PointerCoercion(MutToConstPointer));
        _15 = CStr::from_ptr::<'_>(move _16) -> [return: bb9, unwind: bb25];
    }

    bb33: {
        goto -> bb20;
    }
}

promoted[0] in networks: &data::IpAddr = {
    let mut _0: &data::IpAddr;
    let mut _1: data::IpAddr;

    bb0: {
        _1 = data::IpAddr::Unsupported;
        _0 = &_1;
        return;
    }
}

fn parse_addr(_1: *const sockaddr) -> data::IpAddr {
    debug aptr => _1;
    let mut _0: data::IpAddr;
    let mut _2: bool;
    let mut _3: *const libc::sockaddr;
    let _4: libc::sockaddr;
    let mut _5: i32;
    let mut _6: u16;
    let mut _7: std::net::Ipv4Addr;
    let mut _8: u8;
    let mut _9: i8;
    let _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _13: u8;
    let mut _14: i8;
    let _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: u8;
    let mut _19: i8;
    let _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: u8;
    let mut _24: i8;
    let _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    let mut _30: ();
    let mut _31: &mut [u8];
    let mut _32: &mut [u8; 16];
    let mut _34: [u8; 16];
    let mut _35: std::net::Ipv6Addr;
    let mut _36: u16;
    let _37: usize;
    let mut _38: usize;
    let mut _39: bool;
    let mut _40: u16;
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _44: u16;
    let _45: usize;
    let mut _46: usize;
    let mut _47: bool;
    let mut _48: u16;
    let _49: usize;
    let mut _50: usize;
    let mut _51: bool;
    let mut _52: u16;
    let _53: usize;
    let mut _54: usize;
    let mut _55: bool;
    let mut _56: u16;
    let _57: usize;
    let mut _58: usize;
    let mut _59: bool;
    let mut _60: u16;
    let _61: usize;
    let mut _62: usize;
    let mut _63: bool;
    let mut _64: u16;
    let _65: usize;
    let mut _66: usize;
    let mut _67: bool;
    scope 1 {
        debug addr => _4;
        let _28: *const libc::sockaddr_in6;
        scope 3 {
            debug addr6 => _28;
            let mut _29: [u8; 16];
            scope 5 {
                debug a => _29;
                let _33: [u16; 8];
                scope 7 {
                    debug a => _33;
                }
                scope 8 {
                }
            }
            scope 6 {
                let mut _68: *const ();
                let mut _69: usize;
                let mut _70: usize;
                let mut _71: usize;
                let mut _72: usize;
                let mut _73: bool;
            }
        }
        scope 4 {
        }
    }
    scope 2 {
        let mut _74: *const ();
        let mut _75: usize;
        let mut _76: usize;
        let mut _77: usize;
        let mut _78: usize;
        let mut _79: bool;
    }

    bb0: {
        _3 = null::<sockaddr>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Eq(_1, move _3);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = data::IpAddr::Empty;
        goto -> bb23;
    }

    bb3: {
        _74 = _1 as *const () (PtrToPtr);
        _75 = _74 as usize (Transmute);
        _76 = AlignOf(libc::sockaddr);
        _77 = Sub(_76, const 1_usize);
        _78 = BitAnd(_75, _77);
        _79 = Eq(_78, const 0_usize);
        assert(_79, "misaligned pointer dereference: address must be a multiple of {} but is {}", _76, _75) -> [success: bb25, unwind unreachable];
    }

    bb4: {
        _0 = data::IpAddr::Unsupported;
        goto -> bb23;
    }

    bb5: {
        _10 = const 2_usize;
        _11 = const 14_usize;
        _12 = Lt(_10, _11);
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> [success: bb6, unwind continue];
    }

    bb6: {
        _9 = (_4.1: [i8; 14])[_10];
        _8 = move _9 as u8 (IntToInt);
        _15 = const 3_usize;
        _16 = const 14_usize;
        _17 = Lt(_15, _16);
        assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> [success: bb7, unwind continue];
    }

    bb7: {
        _14 = (_4.1: [i8; 14])[_15];
        _13 = move _14 as u8 (IntToInt);
        _20 = const 4_usize;
        _21 = const 14_usize;
        _22 = Lt(_20, _21);
        assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb8, unwind continue];
    }

    bb8: {
        _19 = (_4.1: [i8; 14])[_20];
        _18 = move _19 as u8 (IntToInt);
        _25 = const 5_usize;
        _26 = const 14_usize;
        _27 = Lt(_25, _26);
        assert(move _27, "index out of bounds: the length is {} but the index is {}", move _26, _25) -> [success: bb9, unwind continue];
    }

    bb9: {
        _24 = (_4.1: [i8; 14])[_25];
        _23 = move _24 as u8 (IntToInt);
        _7 = std::net::Ipv4Addr::new(move _8, move _13, move _18, move _23) -> [return: bb10, unwind continue];
    }

    bb10: {
        _0 = data::IpAddr::V4(move _7);
        goto -> bb23;
    }

    bb11: {
        _28 = _1 as *const libc::sockaddr_in6 (Transmute);
        _68 = _28 as *const () (PtrToPtr);
        _69 = _68 as usize (Transmute);
        _70 = AlignOf(libc::sockaddr_in6);
        _71 = Sub(_70, const 1_usize);
        _72 = BitAnd(_69, _71);
        _73 = Eq(_72, const 0_usize);
        assert(_73, "misaligned pointer dereference: address must be a multiple of {} but is {}", _70, _69) -> [success: bb24, unwind unreachable];
    }

    bb12: {
        _30 = core::slice::<impl [u8]>::reverse(_31) -> [return: bb13, unwind continue];
    }

    bb13: {
        _34 = _29;
        _33 = move _34 as [u16; 8] (Transmute);
        _37 = const 7_usize;
        _38 = const 8_usize;
        _39 = Lt(_37, _38);
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _37) -> [success: bb14, unwind continue];
    }

    bb14: {
        _36 = _33[_37];
        _41 = const 6_usize;
        _42 = const 8_usize;
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> [success: bb15, unwind continue];
    }

    bb15: {
        _40 = _33[_41];
        _45 = const 5_usize;
        _46 = const 8_usize;
        _47 = Lt(_45, _46);
        assert(move _47, "index out of bounds: the length is {} but the index is {}", move _46, _45) -> [success: bb16, unwind continue];
    }

    bb16: {
        _44 = _33[_45];
        _49 = const 4_usize;
        _50 = const 8_usize;
        _51 = Lt(_49, _50);
        assert(move _51, "index out of bounds: the length is {} but the index is {}", move _50, _49) -> [success: bb17, unwind continue];
    }

    bb17: {
        _48 = _33[_49];
        _53 = const 3_usize;
        _54 = const 8_usize;
        _55 = Lt(_53, _54);
        assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> [success: bb18, unwind continue];
    }

    bb18: {
        _52 = _33[_53];
        _57 = const 2_usize;
        _58 = const 8_usize;
        _59 = Lt(_57, _58);
        assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _57) -> [success: bb19, unwind continue];
    }

    bb19: {
        _56 = _33[_57];
        _61 = const 1_usize;
        _62 = const 8_usize;
        _63 = Lt(_61, _62);
        assert(move _63, "index out of bounds: the length is {} but the index is {}", move _62, _61) -> [success: bb20, unwind continue];
    }

    bb20: {
        _60 = _33[_61];
        _65 = const 0_usize;
        _66 = const 8_usize;
        _67 = Lt(_65, _66);
        assert(move _67, "index out of bounds: the length is {} but the index is {}", move _66, _65) -> [success: bb21, unwind continue];
    }

    bb21: {
        _64 = _33[_65];
        _35 = std::net::Ipv6Addr::new(move _36, move _40, move _44, move _48, move _52, move _56, move _60, move _64) -> [return: bb22, unwind continue];
    }

    bb22: {
        _0 = data::IpAddr::V6(move _35);
        goto -> bb23;
    }

    bb23: {
        return;
    }

    bb24: {
        _29 = (((*_28).3: libc::in6_addr).0: [u8; 16]);
        _32 = &mut _29;
        _31 = <[u8; 16] as IndexMut<RangeFull>>::index_mut(move _32, const RangeFull) -> [return: bb12, unwind continue];
    }

    bb25: {
        _4 = (*_1);
        _6 = (_4.0: u16);
        _5 = move _6 as i32 (IntToInt);
        switchInt(_5) -> [2: bb5, 10: bb11, otherwise: bb4];
    }
}

parse_addr::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 16_usize;
        return;
    }
}

parse_addr::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}

fn read_file(_1: &str) -> Result<String, std::io::Error> {
    debug path => _1;
    let mut _0: std::result::Result<std::string::String, std::io::Error>;
    let mut _2: std::string::String;
    let mut _3: std::result::Result<usize, std::io::Error>;
    let mut _4: std::result::Result<std::fs::File, std::io::Error>;
    let mut _5: {closure@src/platform/linux.rs:23:19: 23:26};
    let mut _6: &mut std::string::String;
    let mut _7: {closure@src/platform/linux.rs:24:14: 24:17};
    let mut _8: bool;
    scope 1 {
        debug s => _2;
    }

    bb0: {
        _8 = const false;
        _8 = const true;
        _2 = String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = File::open::<&str>(_1) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _6 = &mut _2;
        _5 = {closure@src/platform/linux.rs:23:19: 23:26} { s: move _6 };
        _3 = Result::<File, std::io::Error>::and_then::<usize, {closure@src/platform/linux.rs:23:19: 23:26}>(move _4, move _5) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _8 = const false;
        _7 = {closure@src/platform/linux.rs:24:14: 24:17} { s: move _2 };
        _0 = Result::<usize, std::io::Error>::map::<String, {closure@src/platform/linux.rs:24:14: 24:17}>(move _3, move _7) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _8 = const false;
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_8) -> [0: bb5, otherwise: bb6];
    }
}

fn read_file::{closure#0}(_1: {closure@src/platform/linux.rs:23:19: 23:26}, _2: File) -> Result<usize, std::io::Error> {
    debug f => _2;
    debug s => (*(_1.0: &mut std::string::String));
    let mut _0: std::result::Result<usize, std::io::Error>;
    let mut _3: &mut std::fs::File;
    let mut _4: &mut std::string::String;

    bb0: {
        _3 = &mut _2;
        _4 = deref_copy (_1.0: &mut std::string::String);
        _0 = <File as std::io::Read>::read_to_string(move _3, _4) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn read_file::{closure#1}(_1: {closure@src/platform/linux.rs:24:14: 24:17}, _2: usize) -> String {
    debug s => (_1.0: std::string::String);
    let mut _0: std::string::String;

    bb0: {
        _0 = move (_1.0: std::string::String);
        return;
    }
}

fn value_from_file(_1: &str) -> Result<T, std::io::Error> {
    debug path => _1;
    let mut _0: std::result::Result<T, std::io::Error>;
    let mut _2: std::result::Result<T, <T as std::str::FromStr>::Err>;
    let mut _3: std::result::Result<T, <T as std::str::FromStr>::Err>;
    let _4: &str;
    let _5: &str;
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::string::String>;
    let mut _9: std::result::Result<std::string::String, std::io::Error>;
    let mut _10: &str;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _13: std::string::String;
    let mut _14: {closure@src/platform/linux.rs:32:18: 32:21};
    let mut _15: &&str;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }

    bb0: {
        _10 = _1;
        _9 = read_file(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = <Result<String, std::io::Error> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _13 = move ((_8 as Continue).0: std::string::String);
        _7 = move _13;
        _6 = &_7;
        _5 = <String as Deref>::deref(move _6) -> [return: bb6, unwind: bb12];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<T, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb11, unwind continue];
    }

    bb6: {
        _4 = core::str::<impl str>::trim_end_matches::<'_, &str>(_5, const "\n") -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _3 = core::str::<impl str>::parse::<T>(_4) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _2 = Result::<T, <T as FromStr>::Err>::and_then::<T, {closure@src/platform/linux.rs:31:19: 31:22}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:31:19: 31:22}) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        _15 = &_1;
        _14 = {closure@src/platform/linux.rs:32:18: 32:21} { path: move _15 };
        _0 = Result::<T, <T as FromStr>::Err>::or_else::<std::io::Error, {closure@src/platform/linux.rs:32:18: 32:21}>(move _2, move _14) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        drop(_7) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_7) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn value_from_file::{closure#0}(_1: {closure@src/platform/linux.rs:31:19: 31:22}, _2: T) -> Result<T, <T as FromStr>::Err> {
    debug n => _2;
    let mut _0: std::result::Result<T, <T as std::str::FromStr>::Err>;

    bb0: {
        _0 = Result::<T, <T as FromStr>::Err>::Ok(move _2);
        return;
    }
}

fn value_from_file::{closure#1}(_1: {closure@src/platform/linux.rs:32:18: 32:21}, _2: <T as FromStr>::Err) -> Result<T, std::io::Error> {
    debug path => (*(_1.0: &&str));
    let mut _0: std::result::Result<T, std::io::Error>;
    let mut _3: std::io::Error;
    let mut _4: std::io::ErrorKind;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &&&str;
    let _13: &&str;
    let mut _14: &[&str; 2];
    let mut _15: &&str;
    scope 1 {
        debug res => _5;
    }

    bb0: {
        _4 = Other;
        _14 = const _;
        _7 = _14 as &[&str] (PointerCoercion(Unsize));
        _15 = deref_copy (_1.0: &&str);
        _13 = _15;
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(_12) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _5 = std::fmt::format(move _6) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _3 = std::io::Error::new::<String>(move _4, move _5) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _0 = Result::<T, std::io::Error>::Err(move _3);
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in value_from_file::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "File: \"", const "\" doesn't contain an int value"];
        _0 = &_1;
        return;
    }
}

fn capacity(_1: i32, _2: i32) -> f32 {
    debug charge_full => _1;
    debug charge_now => _2;
    let mut _0: f32;
    let mut _3: f32;
    let mut _4: f32;

    bb0: {
        _3 = _2 as f32 (IntToFloat);
        _4 = _1 as f32 (IntToFloat);
        _0 = Div(move _3, move _4);
        return;
    }
}

fn platform::linux::time(_1: bool, _2: i32, _3: i32, _4: i32) -> std::time::Duration {
    debug on_ac => _1;
    debug charge_full => _2;
    debug charge_now => _3;
    debug current_now => _4;
    let mut _0: std::time::Duration;
    let mut _5: u64;
    let mut _6: u64;
    let mut _7: u64;
    let mut _8: i32;
    let mut _9: i32;
    let mut _10: (u64, bool);
    let mut _11: u64;
    let mut _12: bool;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: u64;
    let mut _16: (u64, bool);
    let mut _17: u64;
    let mut _18: bool;

    bb0: {
        switchInt(move _4) -> [0: bb10, otherwise: bb1];
    }

    bb1: {
        switchInt(_1) -> [0: bb7, otherwise: bb2];
    }

    bb2: {
        _9 = core::num::<impl i32>::saturating_sub(_2, _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = core::num::<impl i32>::abs(move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = move _8 as u64 (IntToInt);
        _10 = CheckedMul(_7, const 3600_u64);
        assert(!move (_10.1: bool), "attempt to compute `{} * {}`, which would overflow", move _7, const 3600_u64) -> [success: bb5, unwind continue];
    }

    bb5: {
        _6 = move (_10.0: u64);
        _11 = _4 as u64 (IntToInt);
        _12 = Eq(_11, const 0_u64);
        assert(!move _12, "attempt to divide `{}` by zero", _6) -> [success: bb6, unwind continue];
    }

    bb6: {
        _5 = Div(move _6, move _11);
        _0 = std::time::Duration::from_secs(move _5) -> [return: bb11, unwind continue];
    }

    bb7: {
        _15 = _3 as u64 (IntToInt);
        _16 = CheckedMul(_15, const 3600_u64);
        assert(!move (_16.1: bool), "attempt to compute `{} * {}`, which would overflow", move _15, const 3600_u64) -> [success: bb8, unwind continue];
    }

    bb8: {
        _14 = move (_16.0: u64);
        _17 = _4 as u64 (IntToInt);
        _18 = Eq(_17, const 0_u64);
        assert(!move _18, "attempt to divide `{}` by zero", _14) -> [success: bb9, unwind continue];
    }

    bb9: {
        _13 = Div(move _14, move _17);
        _0 = std::time::Duration::from_secs(move _13) -> [return: bb11, unwind continue];
    }

    bb10: {
        _0 = std::time::Duration::new(const 0_u64, const 0_u32) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }
}

fn ws(_1: F) -> {closure@delimited<&str, &str, O, &str, E, fn(&str) -> Result<(&str, &str), nom::Err<E>> {nom::character::complete::multispace0::<&str, E>}, F, fn(&str) -> Result<(&str, &str), nom::Err<E>> {nom::character::complete::multispace0::<&str, E>}>::{closure#0}} {
    debug inner => _1;
    let mut _0: {closure@nom::sequence::delimited<&str, &str, O, &str, E, fn(&str) -> std::result::Result<(&str, &str), nom::Err<E>> {nom::character::complete::multispace0::<&str, E>}, F, fn(&str) -> std::result::Result<(&str, &str), nom::Err<E>> {nom::character::complete::multispace0::<&str, E>}>::{closure#0}};

    bb0: {
        _0 = delimited::<&str, &str, O, &str, E, fn(&str) -> Result<(&str, &str), nom::Err<E>> {nom::character::complete::multispace0::<&str, E>}, F, fn(&str) -> Result<(&str, &str), nom::Err<E>> {nom::character::complete::multispace0::<&str, E>}>(nom::character::complete::multispace0::<&str, E>, move _1, nom::character::complete::multispace0::<&str, E>) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn usize_s(_1: &str) -> Result<(&str, usize), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, usize), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::combinator::map_res<&str, &str, usize, nom::error::Error<&str>, std::num::ParseIntError, {closure@nom::combinator::map_res<&str, &[u8], &str, nom::error::Error<&str>, std::str::Utf8Error, {closure@nom::combinator::map<&str, &str, &[u8], nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}>::{closure#0}}, for<'a> fn(&'a [u8]) -> std::result::Result<&'a str, std::str::Utf8Error> {std::str::from_utf8}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<usize, <usize as std::str::FromStr>::Err> {<usize as std::str::FromStr>::from_str}>::{closure#0}};
    let mut _3: {closure@nom::combinator::map_res<&str, &str, usize, nom::error::Error<&str>, std::num::ParseIntError, {closure@nom::combinator::map_res<&str, &[u8], &str, nom::error::Error<&str>, std::str::Utf8Error, {closure@nom::combinator::map<&str, &str, &[u8], nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}>::{closure#0}}, for<'a> fn(&'a [u8]) -> std::result::Result<&'a str, std::str::Utf8Error> {std::str::from_utf8}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<usize, <usize as std::str::FromStr>::Err> {<usize as std::str::FromStr>::from_str}>::{closure#0}};
    let mut _4: {closure@nom::combinator::map_res<&str, &[u8], &str, nom::error::Error<&str>, std::str::Utf8Error, {closure@nom::combinator::map<&str, &str, &[u8], nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}>::{closure#0}}, for<'a> fn(&'a [u8]) -> std::result::Result<&'a str, std::str::Utf8Error> {std::str::from_utf8}>::{closure#0}};
    let mut _5: {closure@nom::combinator::map<&str, &str, &[u8], nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}>::{closure#0}};
    let mut _6: {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _7: (&str,);

    bb0: {
        _6 = ws::<'_, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, &str, nom::error::Error<&str>>(nom::character::complete::digit1::<&str, nom::error::Error<&str>>) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = nom::combinator::map::<&str, &str, &[u8], nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}>(const ZeroSized: {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, core::str::<impl str>::as_bytes) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = map_res::<&str, &[u8], &str, nom::error::Error<&str>, Utf8Error, {closure@nom::combinator::map<&str, &str, &[u8], nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}>::{closure#0}}, for<'a> fn(&'a [u8]) -> Result<&'a str, Utf8Error> {from_utf8}>(const ZeroSized: {closure@nom::combinator::map<&str, &str, &[u8], nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}>::{closure#0}}, from_utf8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = map_res::<&str, &str, usize, nom::error::Error<&str>, ParseIntError, {closure@map_res<&str, &[u8], &str, nom::error::Error<&str>, Utf8Error, {closure@nom::combinator::map<&str, &str, &[u8], nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}>::{closure#0}}, for<'a> fn(&'a [u8]) -> Result<&'a str, Utf8Error> {from_utf8}>::{closure#0}}, for<'a> fn(&'a str) -> Result<usize, <usize as FromStr>::Err> {<usize as FromStr>::from_str}>(const ZeroSized: {closure@map_res<&str, &[u8], &str, nom::error::Error<&str>, Utf8Error, {closure@nom::combinator::map<&str, &str, &[u8], nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}>::{closure#0}}, for<'a> fn(&'a [u8]) -> Result<&'a str, Utf8Error> {from_utf8}>::{closure#0}}, <usize as FromStr>::from_str) -> [return: bb4, unwind continue];
    }

    bb4: {
        _2 = &mut _3;
        _7 = (_1,);
        _0 = <{closure@map_res<&str, &str, usize, nom::error::Error<&str>, ParseIntError, {closure@map_res<&str, &[u8], &str, nom::error::Error<&str>, Utf8Error, {closure@nom::combinator::map<&str, &str, &[u8], nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> &'a [u8] {core::str::<impl str>::as_bytes}>::{closure#0}}, for<'a> fn(&'a [u8]) -> Result<&'a str, Utf8Error> {from_utf8}>::{closure#0}}, for<'a> fn(&'a str) -> Result<usize, <usize as FromStr>::Err> {<usize as FromStr>::from_str}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn proc_stat_cpu_prefix(_1: &str) -> Result<(&str, ()), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, ()), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::combinator::map<&str, (&str, &str), (), nom::error::Error<&str>, {closure@nom::sequence::tuple<&str, (&str, &str), nom::error::Error<&str>, ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>})>::{closure#0}}, {closure@src/platform/linux.rs:78:38: 78:41}>::{closure#0}};
    let mut _3: {closure@nom::combinator::map<&str, (&str, &str), (), nom::error::Error<&str>, {closure@nom::sequence::tuple<&str, (&str, &str), nom::error::Error<&str>, ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>})>::{closure#0}}, {closure@src/platform/linux.rs:78:38: 78:41}>::{closure#0}};
    let mut _4: {closure@nom::sequence::tuple<&str, (&str, &str), nom::error::Error<&str>, ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>})>::{closure#0}};
    let mut _5: ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>});
    let mut _6: {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}};
    let mut _7: (&str,);

    bb0: {
        _6 = nom::bytes::complete::tag::<&str, &str, nom::error::Error<&str>>(const "cpu") -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = (move _6, nom::character::complete::digit1::<&str, nom::error::Error<&str>>);
        _4 = tuple::<&str, (&str, &str), nom::error::Error<&str>, ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>})>(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = nom::combinator::map::<&str, (&str, &str), (), nom::error::Error<&str>, {closure@tuple<&str, (&str, &str), nom::error::Error<&str>, ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>})>::{closure#0}}, {closure@src/platform/linux.rs:78:38: 78:41}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:78:38: 78:41}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = &mut _3;
        _7 = (_1,);
        _0 = <{closure@nom::combinator::map<&str, (&str, &str), (), nom::error::Error<&str>, {closure@tuple<&str, (&str, &str), nom::error::Error<&str>, ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::digit1::<&str, nom::error::Error<&str>>})>::{closure#0}}, {closure@src/platform/linux.rs:78:38: 78:41}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn proc_stat_cpu_prefix::{closure#0}(_1: &mut {closure@src/platform/linux.rs:78:38: 78:41}, _2: (&str, &str)) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn proc_stat_cpu_time(_1: &str) -> Result<(&str, data::CpuTime), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, data::CpuTime), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::combinator::map<&str, (usize, usize, usize, usize, usize, usize), data::CpuTime, nom::error::Error<&str>, {closure@nom::sequence::preceded<&str, (), (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, (), &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {platform::linux::proc_stat_cpu_prefix}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::tuple<&str, (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s})>::{closure#0}}>::{closure#0}}, {closure@src/platform/linux.rs:88:9: 88:50}>::{closure#0}};
    let mut _3: {closure@nom::combinator::map<&str, (usize, usize, usize, usize, usize, usize), data::CpuTime, nom::error::Error<&str>, {closure@nom::sequence::preceded<&str, (), (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, (), &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {platform::linux::proc_stat_cpu_prefix}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::tuple<&str, (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s})>::{closure#0}}>::{closure#0}}, {closure@src/platform/linux.rs:88:9: 88:50}>::{closure#0}};
    let mut _4: {closure@nom::sequence::preceded<&str, (), (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, (), &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {platform::linux::proc_stat_cpu_prefix}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::tuple<&str, (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s})>::{closure#0}}>::{closure#0}};
    let mut _5: {closure@nom::sequence::delimited<&str, &str, (), &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {platform::linux::proc_stat_cpu_prefix}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _6: {closure@nom::sequence::tuple<&str, (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s})>::{closure#0}};
    let mut _7: (&str,);

    bb0: {
        _5 = ws::<'_, for<'a> fn(&'a str) -> Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {proc_stat_cpu_prefix}, (), nom::error::Error<&str>>(proc_stat_cpu_prefix) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = tuple::<&str, (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s})>(const (usize_s, usize_s, usize_s, usize_s, usize_s, usize_s)) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = preceded::<&str, (), (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, {closure@delimited<&str, &str, (), &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {proc_stat_cpu_prefix}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@tuple<&str, (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s})>::{closure#0}}>(const ZeroSized: {closure@delimited<&str, &str, (), &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {proc_stat_cpu_prefix}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, const ZeroSized: {closure@tuple<&str, (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s})>::{closure#0}}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = nom::combinator::map::<&str, (usize, usize, usize, usize, usize, usize), data::CpuTime, nom::error::Error<&str>, {closure@preceded<&str, (), (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, {closure@delimited<&str, &str, (), &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {proc_stat_cpu_prefix}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@tuple<&str, (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s})>::{closure#0}}>::{closure#0}}, {closure@src/platform/linux.rs:88:9: 88:50}>(const ZeroSized: {closure@preceded<&str, (), (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, {closure@delimited<&str, &str, (), &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {proc_stat_cpu_prefix}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@tuple<&str, (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s})>::{closure#0}}>::{closure#0}}, const ZeroSized: {closure@src/platform/linux.rs:88:9: 88:50}) -> [return: bb4, unwind continue];
    }

    bb4: {
        _2 = &mut _3;
        _7 = (_1,);
        _0 = <{closure@nom::combinator::map<&str, (usize, usize, usize, usize, usize, usize), data::CpuTime, nom::error::Error<&str>, {closure@preceded<&str, (), (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, {closure@delimited<&str, &str, (), &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {proc_stat_cpu_prefix}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@tuple<&str, (usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s})>::{closure#0}}>::{closure#0}}, {closure@src/platform/linux.rs:88:9: 88:50}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn proc_stat_cpu_time::{closure#0}(_1: &mut {closure@src/platform/linux.rs:88:9: 88:50}, _2: (usize, usize, usize, usize, usize, usize)) -> data::CpuTime {
    let mut _0: data::CpuTime;
    let _3: usize;
    let _4: usize;
    let _5: usize;
    let _6: usize;
    let _7: usize;
    let _8: usize;
    scope 1 {
        debug user => _3;
        debug nice => _4;
        debug system => _5;
        debug idle => _6;
        debug iowait => _7;
        debug irq => _8;
    }

    bb0: {
        _3 = (_2.0: usize);
        _4 = (_2.1: usize);
        _5 = (_2.2: usize);
        _6 = (_2.3: usize);
        _7 = (_2.4: usize);
        _8 = (_2.5: usize);
        _0 = data::CpuTime { user: _3, nice: _4, system: _5, interrupt: _8, idle: _6, other: _7 };
        return;
    }
}

fn proc_stat_cpu_aggregate(_1: &str) -> Result<(&str, ()), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, ()), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::combinator::map<&str, (&str, &str), (), nom::error::Error<&str>, {closure@nom::sequence::tuple<&str, (&str, &str), nom::error::Error<&str>, ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::space1::<&str, nom::error::Error<&str>>})>::{closure#0}}, {closure@src/platform/linux.rs:101:38: 101:41}>::{closure#0}};
    let mut _3: {closure@nom::combinator::map<&str, (&str, &str), (), nom::error::Error<&str>, {closure@nom::sequence::tuple<&str, (&str, &str), nom::error::Error<&str>, ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::space1::<&str, nom::error::Error<&str>>})>::{closure#0}}, {closure@src/platform/linux.rs:101:38: 101:41}>::{closure#0}};
    let mut _4: {closure@nom::sequence::tuple<&str, (&str, &str), nom::error::Error<&str>, ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::space1::<&str, nom::error::Error<&str>>})>::{closure#0}};
    let mut _5: ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::space1::<&str, nom::error::Error<&str>>});
    let mut _6: {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}};
    let mut _7: (&str,);

    bb0: {
        _6 = nom::bytes::complete::tag::<&str, &str, nom::error::Error<&str>>(const "cpu") -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = (move _6, nom::character::complete::space1::<&str, nom::error::Error<&str>>);
        _4 = tuple::<&str, (&str, &str), nom::error::Error<&str>, ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::space1::<&str, nom::error::Error<&str>>})>(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = nom::combinator::map::<&str, (&str, &str), (), nom::error::Error<&str>, {closure@tuple<&str, (&str, &str), nom::error::Error<&str>, ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::space1::<&str, nom::error::Error<&str>>})>::{closure#0}}, {closure@src/platform/linux.rs:101:38: 101:41}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:101:38: 101:41}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = &mut _3;
        _7 = (_1,);
        _0 = <{closure@nom::combinator::map<&str, (&str, &str), (), nom::error::Error<&str>, {closure@tuple<&str, (&str, &str), nom::error::Error<&str>, ({closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::space1::<&str, nom::error::Error<&str>>})>::{closure#0}}, {closure@src/platform/linux.rs:101:38: 101:41}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn proc_stat_cpu_aggregate::{closure#0}(_1: &mut {closure@src/platform/linux.rs:101:38: 101:41}, _2: (&str, &str)) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn proc_stat_cpu_times(_1: &str) -> Result<(&str, Vec<data::CpuTime>), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, std::vec::Vec<data::CpuTime>), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::sequence::preceded<&str, std::result::Result<(&str, ()), nom::Err<nom::error::Error<&str>>>, std::vec::Vec<data::CpuTime>, nom::error::Error<&str>, {closure@nom::combinator::map<&str, &str, std::result::Result<(&str, ()), nom::Err<nom::error::Error<&str>>>, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {platform::linux::proc_stat_cpu_aggregate}>::{closure#0}}, {closure@nom::multi::many1<&str, data::CpuTime, nom::error::Error<&str>, {closure@nom::combinator::map_res<&str, &str, data::CpuTime, nom::error::Error<&str>, (), {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:108:44: 108:51}>::{closure#0}}>::{closure#0}}>::{closure#0}};
    let mut _3: {closure@nom::sequence::preceded<&str, std::result::Result<(&str, ()), nom::Err<nom::error::Error<&str>>>, std::vec::Vec<data::CpuTime>, nom::error::Error<&str>, {closure@nom::combinator::map<&str, &str, std::result::Result<(&str, ()), nom::Err<nom::error::Error<&str>>>, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {platform::linux::proc_stat_cpu_aggregate}>::{closure#0}}, {closure@nom::multi::many1<&str, data::CpuTime, nom::error::Error<&str>, {closure@nom::combinator::map_res<&str, &str, data::CpuTime, nom::error::Error<&str>, (), {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:108:44: 108:51}>::{closure#0}}>::{closure#0}}>::{closure#0}};
    let mut _4: {closure@nom::combinator::map<&str, &str, std::result::Result<(&str, ()), nom::Err<nom::error::Error<&str>>>, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {platform::linux::proc_stat_cpu_aggregate}>::{closure#0}};
    let mut _5: {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _6: {closure@nom::multi::many1<&str, data::CpuTime, nom::error::Error<&str>, {closure@nom::combinator::map_res<&str, &str, data::CpuTime, nom::error::Error<&str>, (), {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:108:44: 108:51}>::{closure#0}}>::{closure#0}};
    let mut _7: {closure@nom::combinator::map_res<&str, &str, data::CpuTime, nom::error::Error<&str>, (), {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:108:44: 108:51}>::{closure#0}};
    let mut _8: {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _9: (&str,);

    bb0: {
        _5 = ws::<'_, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, &str, nom::error::Error<&str>>(nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = nom::combinator::map::<&str, &str, Result<(&str, ()), nom::Err<nom::error::Error<&str>>>, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {proc_stat_cpu_aggregate}>(const ZeroSized: {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, proc_stat_cpu_aggregate) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = ws::<'_, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, &str, nom::error::Error<&str>>(nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = map_res::<&str, &str, data::CpuTime, nom::error::Error<&str>, (), {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:108:44: 108:51}>(const ZeroSized: {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, const ZeroSized: {closure@src/platform/linux.rs:108:44: 108:51}) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = many1::<&str, data::CpuTime, nom::error::Error<&str>, {closure@map_res<&str, &str, data::CpuTime, nom::error::Error<&str>, (), {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:108:44: 108:51}>::{closure#0}}>(const ZeroSized: {closure@map_res<&str, &str, data::CpuTime, nom::error::Error<&str>, (), {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:108:44: 108:51}>::{closure#0}}) -> [return: bb5, unwind continue];
    }

    bb5: {
        _3 = preceded::<&str, Result<(&str, ()), nom::Err<nom::error::Error<&str>>>, Vec<data::CpuTime>, nom::error::Error<&str>, {closure@nom::combinator::map<&str, &str, Result<(&str, ()), nom::Err<nom::error::Error<&str>>>, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {proc_stat_cpu_aggregate}>::{closure#0}}, {closure@many1<&str, data::CpuTime, nom::error::Error<&str>, {closure@map_res<&str, &str, data::CpuTime, nom::error::Error<&str>, (), {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:108:44: 108:51}>::{closure#0}}>::{closure#0}}>(const ZeroSized: {closure@nom::combinator::map<&str, &str, Result<(&str, ()), nom::Err<nom::error::Error<&str>>>, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {proc_stat_cpu_aggregate}>::{closure#0}}, const ZeroSized: {closure@many1<&str, data::CpuTime, nom::error::Error<&str>, {closure@map_res<&str, &str, data::CpuTime, nom::error::Error<&str>, (), {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:108:44: 108:51}>::{closure#0}}>::{closure#0}}) -> [return: bb6, unwind continue];
    }

    bb6: {
        _2 = &mut _3;
        _9 = (_1,);
        _0 = <{closure@preceded<&str, Result<(&str, ()), nom::Err<nom::error::Error<&str>>>, Vec<data::CpuTime>, nom::error::Error<&str>, {closure@nom::combinator::map<&str, &str, Result<(&str, ()), nom::Err<nom::error::Error<&str>>>, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, ()), nom::Err<nom::error::Error<&'a str>>> {proc_stat_cpu_aggregate}>::{closure#0}}, {closure@many1<&str, data::CpuTime, nom::error::Error<&str>, {closure@map_res<&str, &str, data::CpuTime, nom::error::Error<&str>, (), {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:108:44: 108:51}>::{closure#0}}>::{closure#0}}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn proc_stat_cpu_times::{closure#0}(_1: &mut {closure@src/platform/linux.rs:108:44: 108:51}, _2: &str) -> Result<data::CpuTime, ()> {
    debug input => _2;
    let mut _0: std::result::Result<data::CpuTime, ()>;
    let mut _3: std::result::Result<data::CpuTime, nom::Err<nom::error::Error<&str>>>;
    let mut _4: std::result::Result<(&str, data::CpuTime), nom::Err<nom::error::Error<&str>>>;

    bb0: {
        _4 = proc_stat_cpu_time(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Result::<(&str, data::CpuTime), nom::Err<nom::error::Error<&str>>>::map::<data::CpuTime, {closure@src/platform/linux.rs:110:22: 110:32}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:110:22: 110:32}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Result::<data::CpuTime, nom::Err<nom::error::Error<&str>>>::map_err::<(), {closure@src/platform/linux.rs:111:26: 111:29}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:111:26: 111:29}) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn proc_stat_cpu_times::{closure#0}::{closure#0}(_1: {closure@src/platform/linux.rs:110:22: 110:32}, _2: (&str, data::CpuTime)) -> data::CpuTime {
    let mut _0: data::CpuTime;
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _0 = (_2.1: data::CpuTime);
        return;
    }
}

fn proc_stat_cpu_times::{closure#0}::{closure#1}(_1: {closure@src/platform/linux.rs:111:26: 111:29}, _2: nom::Err<nom::error::Error<&str>>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn cpu_time() -> Result<Vec<data::CpuTime>, std::io::Error> {
    let mut _0: std::result::Result<std::vec::Vec<data::CpuTime>, std::io::Error>;
    let mut _1: std::result::Result<std::string::String, std::io::Error>;
    let _2: &str;

    bb0: {
        _2 = const "/proc/stat";
        _1 = read_file(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<String, std::io::Error>::and_then::<Vec<data::CpuTime>, {closure@src/platform/linux.rs:155:38: 155:44}>(move _1, const ZeroSized: {closure@src/platform/linux.rs:155:38: 155:44}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn cpu_time::{closure#0}(_1: {closure@src/platform/linux.rs:155:38: 155:44}, _2: String) -> Result<Vec<data::CpuTime>, std::io::Error> {
    debug data => _2;
    let mut _0: std::result::Result<std::vec::Vec<data::CpuTime>, std::io::Error>;
    let mut _3: std::result::Result<std::vec::Vec<data::CpuTime>, nom::Err<nom::error::Error<&str>>>;
    let mut _4: std::result::Result<(&str, std::vec::Vec<data::CpuTime>), nom::Err<nom::error::Error<&str>>>;
    let _5: &str;
    let _6: &std::string::String;

    bb0: {
        _6 = &_2;
        _5 = <String as Deref>::deref(_6) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = proc_stat_cpu_times(_5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = Result::<(&str, Vec<data::CpuTime>), nom::Err<nom::error::Error<&str>>>::map::<Vec<data::CpuTime>, {closure@src/platform/linux.rs:157:18: 157:28}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:157:18: 157:28}) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = Result::<Vec<data::CpuTime>, nom::Err<nom::error::Error<&str>>>::map_err::<std::io::Error, {closure@src/platform/linux.rs:158:22: 158:27}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:158:22: 158:27}) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn cpu_time::{closure#0}::{closure#0}(_1: {closure@src/platform/linux.rs:157:18: 157:28}, _2: (&str, Vec<data::CpuTime>)) -> Vec<data::CpuTime> {
    let mut _0: std::vec::Vec<data::CpuTime>;
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _0 = move (_2.1: std::vec::Vec<data::CpuTime>);
        return;
    }
}

fn cpu_time::{closure#0}::{closure#1}(_1: {closure@src/platform/linux.rs:158:22: 158:27}, _2: nom::Err<nom::error::Error<&str>>) -> std::io::Error {
    debug err => _2;
    let mut _0: std::io::Error;
    let mut _3: std::io::ErrorKind;
    let mut _4: std::string::String;
    let mut _5: &nom::Err<nom::error::Error<&str>>;

    bb0: {
        _3 = InvalidData;
        _5 = &_2;
        _4 = <nom::Err<nom::error::Error<&str>> as ToString>::to_string(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::io::Error::new::<String>(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn proc_meminfo_line(_1: &str) -> Result<(&str, (&str, bytesize::ByteSize)), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, (&str, bytesize::ByteSize)), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::combinator::complete<&str, (&str, bytesize::ByteSize), nom::error::Error<&str>, {closure@nom::combinator::map<&str, (&str, usize), (&str, bytesize::ByteSize), nom::error::Error<&str>, {closure@nom::sequence::tuple<&str, (&str, usize), nom::error::Error<&str>, ({closure@nom::bytes::complete::take_until<&str, &str, nom::error::Error<&str>>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}})>::{closure#0}}, {closure@src/platform/linux.rs:166:9: 166:23}>::{closure#0}}>::{closure#0}};
    let mut _3: {closure@nom::combinator::complete<&str, (&str, bytesize::ByteSize), nom::error::Error<&str>, {closure@nom::combinator::map<&str, (&str, usize), (&str, bytesize::ByteSize), nom::error::Error<&str>, {closure@nom::sequence::tuple<&str, (&str, usize), nom::error::Error<&str>, ({closure@nom::bytes::complete::take_until<&str, &str, nom::error::Error<&str>>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}})>::{closure#0}}, {closure@src/platform/linux.rs:166:9: 166:23}>::{closure#0}}>::{closure#0}};
    let mut _4: {closure@nom::combinator::map<&str, (&str, usize), (&str, bytesize::ByteSize), nom::error::Error<&str>, {closure@nom::sequence::tuple<&str, (&str, usize), nom::error::Error<&str>, ({closure@nom::bytes::complete::take_until<&str, &str, nom::error::Error<&str>>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}})>::{closure#0}}, {closure@src/platform/linux.rs:166:9: 166:23}>::{closure#0}};
    let mut _5: {closure@nom::sequence::tuple<&str, (&str, usize), nom::error::Error<&str>, ({closure@nom::bytes::complete::take_until<&str, &str, nom::error::Error<&str>>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}})>::{closure#0}};
    let mut _6: ({closure@nom::bytes::complete::take_until<&str, &str, nom::error::Error<&str>>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}});
    let mut _7: {closure@nom::bytes::complete::take_until<&str, &str, nom::error::Error<&str>>::{closure#0}};
    let mut _8: {closure@nom::sequence::delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}};
    let mut _9: {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}};
    let mut _10: {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _11: {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}};
    let mut _12: (&str,);

    bb0: {
        _7 = nom::bytes::complete::take_until::<&str, &str, nom::error::Error<&str>>(const ":") -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = nom::bytes::complete::tag::<&str, &str, nom::error::Error<&str>>(const ":") -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = nom::bytes::complete::tag::<&str, &str, nom::error::Error<&str>>(const "kB") -> [return: bb3, unwind continue];
    }

    bb3: {
        _10 = ws::<'_, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, &str, nom::error::Error<&str>>(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = delimited::<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>(move _9, usize_s, move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = (move _7, move _8);
        _5 = tuple::<&str, (&str, usize), nom::error::Error<&str>, ({closure@nom::bytes::complete::take_until<&str, &str, nom::error::Error<&str>>::{closure#0}}, {closure@delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}})>(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        _4 = nom::combinator::map::<&str, (&str, usize), (&str, bytesize::ByteSize), nom::error::Error<&str>, {closure@tuple<&str, (&str, usize), nom::error::Error<&str>, ({closure@nom::bytes::complete::take_until<&str, &str, nom::error::Error<&str>>::{closure#0}}, {closure@delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}})>::{closure#0}}, {closure@src/platform/linux.rs:166:9: 166:23}>(move _5, const ZeroSized: {closure@src/platform/linux.rs:166:9: 166:23}) -> [return: bb7, unwind continue];
    }

    bb7: {
        _3 = complete::<&str, (&str, bytesize::ByteSize), nom::error::Error<&str>, {closure@nom::combinator::map<&str, (&str, usize), (&str, bytesize::ByteSize), nom::error::Error<&str>, {closure@tuple<&str, (&str, usize), nom::error::Error<&str>, ({closure@nom::bytes::complete::take_until<&str, &str, nom::error::Error<&str>>::{closure#0}}, {closure@delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}})>::{closure#0}}, {closure@src/platform/linux.rs:166:9: 166:23}>::{closure#0}}>(move _4) -> [return: bb8, unwind continue];
    }

    bb8: {
        _2 = &mut _3;
        _12 = (_1,);
        _0 = <{closure@complete<&str, (&str, bytesize::ByteSize), nom::error::Error<&str>, {closure@nom::combinator::map<&str, (&str, usize), (&str, bytesize::ByteSize), nom::error::Error<&str>, {closure@tuple<&str, (&str, usize), nom::error::Error<&str>, ({closure@nom::bytes::complete::take_until<&str, &str, nom::error::Error<&str>>::{closure#0}}, {closure@delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}})>::{closure#0}}, {closure@src/platform/linux.rs:166:9: 166:23}>::{closure#0}}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _12) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

fn proc_meminfo_line::{closure#0}(_1: &mut {closure@src/platform/linux.rs:166:9: 166:23}, _2: (&str, usize)) -> (&str, bytesize::ByteSize) {
    let mut _0: (&str, bytesize::ByteSize);
    let _3: &str;
    let _4: usize;
    let mut _5: bytesize::ByteSize;
    let mut _6: u64;
    scope 1 {
        debug key => _3;
        debug value => _4;
    }

    bb0: {
        _3 = (_2.0: &str);
        _4 = (_2.1: usize);
        _6 = _4 as u64 (IntToInt);
        _5 = bytesize::ByteSize::kib(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = (_3, move _5);
        return;
    }
}

fn proc_meminfo_line_opt(_1: &str) -> Result<(&str, Option<(&str, bytesize::ByteSize)>), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, std::option::Option<(&str, bytesize::ByteSize)>), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::combinator::opt<&str, (&str, bytesize::ByteSize), nom::error::Error<&str>, for<'a> fn(&'a str) -> std::result::Result<(&'a str, (&'a str, bytesize::ByteSize)), nom::Err<nom::error::Error<&'a str>>> {platform::linux::proc_meminfo_line}>::{closure#0}};
    let mut _3: {closure@nom::combinator::opt<&str, (&str, bytesize::ByteSize), nom::error::Error<&str>, for<'a> fn(&'a str) -> std::result::Result<(&'a str, (&'a str, bytesize::ByteSize)), nom::Err<nom::error::Error<&'a str>>> {platform::linux::proc_meminfo_line}>::{closure#0}};
    let mut _4: (&str,);

    bb0: {
        _3 = opt::<&str, (&str, bytesize::ByteSize), nom::error::Error<&str>, for<'a> fn(&'a str) -> Result<(&'a str, (&'a str, bytesize::ByteSize)), nom::Err<nom::error::Error<&'a str>>> {proc_meminfo_line}>(proc_meminfo_line) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &mut _3;
        _4 = (_1,);
        _0 = <{closure@opt<&str, (&str, bytesize::ByteSize), nom::error::Error<&str>, for<'a> fn(&'a str) -> Result<(&'a str, (&'a str, bytesize::ByteSize)), nom::Err<nom::error::Error<&'a str>>> {proc_meminfo_line}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn proc_meminfo(_1: &str) -> Result<(&str, std::collections::BTreeMap<String, bytesize::ByteSize>), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, std::collections::BTreeMap<std::string::String, bytesize::ByteSize>), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::multi::fold_many0<&str, std::option::Option<(&str, bytesize::ByteSize)>, nom::error::Error<&str>, {closure@nom::combinator::map_res<&str, &str, std::option::Option<(&str, bytesize::ByteSize)>, nom::error::Error<&str>, (), {closure@nom::combinator::verify<&str, &str, str, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:179:41: 179:53}>::{closure#0}}, {closure@src/platform/linux.rs:180:13: 180:20}>::{closure#0}}, {closure@src/platform/linux.rs:187:9: 187:51}, std::collections::BTreeMap<std::string::String, bytesize::ByteSize>>::{closure#0}};
    let mut _3: {closure@nom::multi::fold_many0<&str, std::option::Option<(&str, bytesize::ByteSize)>, nom::error::Error<&str>, {closure@nom::combinator::map_res<&str, &str, std::option::Option<(&str, bytesize::ByteSize)>, nom::error::Error<&str>, (), {closure@nom::combinator::verify<&str, &str, str, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:179:41: 179:53}>::{closure#0}}, {closure@src/platform/linux.rs:180:13: 180:20}>::{closure#0}}, {closure@src/platform/linux.rs:187:9: 187:51}, std::collections::BTreeMap<std::string::String, bytesize::ByteSize>>::{closure#0}};
    let mut _4: {closure@nom::combinator::map_res<&str, &str, std::option::Option<(&str, bytesize::ByteSize)>, nom::error::Error<&str>, (), {closure@nom::combinator::verify<&str, &str, str, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:179:41: 179:53}>::{closure#0}}, {closure@src/platform/linux.rs:180:13: 180:20}>::{closure#0}};
    let mut _5: {closure@nom::combinator::verify<&str, &str, str, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:179:41: 179:53}>::{closure#0}};
    let mut _6: {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _7: std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let mut _8: (&str,);

    bb0: {
        _6 = ws::<'_, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, &str, nom::error::Error<&str>>(nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = verify::<&str, &str, str, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:179:41: 179:53}>(const ZeroSized: {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, const ZeroSized: {closure@src/platform/linux.rs:179:41: 179:53}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = map_res::<&str, &str, Option<(&str, bytesize::ByteSize)>, nom::error::Error<&str>, (), {closure@verify<&str, &str, str, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:179:41: 179:53}>::{closure#0}}, {closure@src/platform/linux.rs:180:13: 180:20}>(const ZeroSized: {closure@verify<&str, &str, str, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:179:41: 179:53}>::{closure#0}}, const ZeroSized: {closure@src/platform/linux.rs:180:13: 180:20}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = std::collections::BTreeMap::<String, bytesize::ByteSize>::new() -> [return: bb4, unwind continue];
    }

    bb4: {
        _3 = fold_many0::<&str, Option<(&str, bytesize::ByteSize)>, nom::error::Error<&str>, {closure@map_res<&str, &str, Option<(&str, bytesize::ByteSize)>, nom::error::Error<&str>, (), {closure@verify<&str, &str, str, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:179:41: 179:53}>::{closure#0}}, {closure@src/platform/linux.rs:180:13: 180:20}>::{closure#0}}, {closure@src/platform/linux.rs:187:9: 187:51}, std::collections::BTreeMap<String, bytesize::ByteSize>>(const ZeroSized: {closure@map_res<&str, &str, Option<(&str, bytesize::ByteSize)>, nom::error::Error<&str>, (), {closure@verify<&str, &str, str, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:179:41: 179:53}>::{closure#0}}, {closure@src/platform/linux.rs:180:13: 180:20}>::{closure#0}}, move _7, const ZeroSized: {closure@src/platform/linux.rs:187:9: 187:51}) -> [return: bb5, unwind continue];
    }

    bb5: {
        _2 = &mut _3;
        _8 = (_1,);
        _0 = <{closure@fold_many0<&str, Option<(&str, bytesize::ByteSize)>, nom::error::Error<&str>, {closure@map_res<&str, &str, Option<(&str, bytesize::ByteSize)>, nom::error::Error<&str>, (), {closure@verify<&str, &str, str, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:179:41: 179:53}>::{closure#0}}, {closure@src/platform/linux.rs:180:13: 180:20}>::{closure#0}}, {closure@src/platform/linux.rs:187:9: 187:51}, std::collections::BTreeMap<String, bytesize::ByteSize>>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _8) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_3) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn proc_meminfo::{closure#0}(_1: &{closure@src/platform/linux.rs:179:41: 179:53}, _2: &str) -> bool {
    debug item => _2;
    let mut _0: bool;
    let mut _3: bool;

    bb0: {
        _3 = core::str::<impl str>::is_empty(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Not(move _3);
        return;
    }
}

fn proc_meminfo::{closure#1}(_1: &mut {closure@src/platform/linux.rs:180:13: 180:20}, _2: &str) -> Result<Option<(&str, bytesize::ByteSize)>, ()> {
    debug input => _2;
    let mut _0: std::result::Result<std::option::Option<(&str, bytesize::ByteSize)>, ()>;
    let mut _3: std::result::Result<std::option::Option<(&str, bytesize::ByteSize)>, nom::Err<nom::error::Error<&str>>>;
    let mut _4: std::result::Result<(&str, std::option::Option<(&str, bytesize::ByteSize)>), nom::Err<nom::error::Error<&str>>>;

    bb0: {
        _4 = proc_meminfo_line_opt(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Result::<(&str, Option<(&str, bytesize::ByteSize)>), nom::Err<nom::error::Error<&str>>>::map::<Option<(&str, bytesize::ByteSize)>, {closure@src/platform/linux.rs:182:26: 182:36}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:182:26: 182:36}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Result::<Option<(&str, bytesize::ByteSize)>, nom::Err<nom::error::Error<&str>>>::map_err::<(), {closure@src/platform/linux.rs:183:30: 183:33}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:183:30: 183:33}) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn proc_meminfo::{closure#1}::{closure#0}(_1: {closure@src/platform/linux.rs:182:26: 182:36}, _2: (&str, Option<(&str, bytesize::ByteSize)>)) -> Option<(&str, bytesize::ByteSize)> {
    let mut _0: std::option::Option<(&str, bytesize::ByteSize)>;
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _0 = (_2.1: std::option::Option<(&str, bytesize::ByteSize)>);
        return;
    }
}

fn proc_meminfo::{closure#1}::{closure#1}(_1: {closure@src/platform/linux.rs:183:30: 183:33}, _2: nom::Err<nom::error::Error<&str>>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn proc_meminfo::{closure#2}(_1: &mut {closure@src/platform/linux.rs:187:9: 187:51}, _2: std::collections::BTreeMap<String, bytesize::ByteSize>, _3: Option<(&str, bytesize::ByteSize)>) -> std::collections::BTreeMap<String, bytesize::ByteSize> {
    debug map => _2;
    debug opt => _3;
    let mut _0: std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let mut _4: isize;
    let _7: std::option::Option<bytesize::ByteSize>;
    let mut _8: &mut std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let mut _9: std::string::String;
    scope 1 {
        debug key => _5;
        debug val => _6;
        let _5: &str;
        let _6: bytesize::ByteSize;
    }

    bb0: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        _5 = (((_3 as Some).0: (&str, bytesize::ByteSize)).0: &str);
        _6 = (((_3 as Some).0: (&str, bytesize::ByteSize)).1: bytesize::ByteSize);
        _8 = &mut _2;
        _9 = <str as ToString>::to_string(_5) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _7 = std::collections::BTreeMap::<String, bytesize::ByteSize>::insert(move _8, move _9, _6) -> [return: bb6, unwind: bb4];
    }

    bb3: {
        _0 = move _2;
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        goto -> bb3;
    }
}

fn memory_stats() -> Result<std::collections::BTreeMap<String, bytesize::ByteSize>, std::io::Error> {
    let mut _0: std::result::Result<std::collections::BTreeMap<std::string::String, bytesize::ByteSize>, std::io::Error>;
    let mut _1: std::result::Result<std::string::String, std::io::Error>;
    let _2: &str;

    bb0: {
        _2 = const "/proc/meminfo";
        _1 = read_file(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<String, std::io::Error>::and_then::<std::collections::BTreeMap<String, bytesize::ByteSize>, {closure@src/platform/linux.rs:264:41: 264:47}>(move _1, const ZeroSized: {closure@src/platform/linux.rs:264:41: 264:47}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn memory_stats::{closure#0}(_1: {closure@src/platform/linux.rs:264:41: 264:47}, _2: String) -> Result<std::collections::BTreeMap<String, bytesize::ByteSize>, std::io::Error> {
    debug data => _2;
    let mut _0: std::result::Result<std::collections::BTreeMap<std::string::String, bytesize::ByteSize>, std::io::Error>;
    let mut _3: std::result::Result<std::collections::BTreeMap<std::string::String, bytesize::ByteSize>, nom::Err<nom::error::Error<&str>>>;
    let mut _4: std::result::Result<(&str, std::collections::BTreeMap<std::string::String, bytesize::ByteSize>), nom::Err<nom::error::Error<&str>>>;
    let _5: &str;
    let _6: &std::string::String;

    bb0: {
        _6 = &_2;
        _5 = <String as Deref>::deref(_6) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = proc_meminfo(_5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = Result::<(&str, std::collections::BTreeMap<String, bytesize::ByteSize>), nom::Err<nom::error::Error<&str>>>::map::<std::collections::BTreeMap<String, bytesize::ByteSize>, {closure@src/platform/linux.rs:266:18: 266:28}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:266:18: 266:28}) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = Result::<std::collections::BTreeMap<String, bytesize::ByteSize>, nom::Err<nom::error::Error<&str>>>::map_err::<std::io::Error, {closure@src/platform/linux.rs:267:22: 267:27}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:267:22: 267:27}) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn memory_stats::{closure#0}::{closure#0}(_1: {closure@src/platform/linux.rs:266:18: 266:28}, _2: (&str, std::collections::BTreeMap<String, bytesize::ByteSize>)) -> std::collections::BTreeMap<String, bytesize::ByteSize> {
    let mut _0: std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _0 = move (_2.1: std::collections::BTreeMap<std::string::String, bytesize::ByteSize>);
        return;
    }
}

fn memory_stats::{closure#0}::{closure#1}(_1: {closure@src/platform/linux.rs:267:22: 267:27}, _2: nom::Err<nom::error::Error<&str>>) -> std::io::Error {
    debug err => _2;
    let mut _0: std::io::Error;
    let mut _3: std::io::ErrorKind;
    let mut _4: std::string::String;
    let mut _5: &nom::Err<nom::error::Error<&str>>;

    bb0: {
        _3 = InvalidData;
        _5 = &_2;
        _4 = <nom::Err<nom::error::Error<&str>> as ToString>::to_string(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::io::Error::new::<String>(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn word_s(_1: &str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &{closure@nom::bytes::complete::take_till<{closure@src/platform/linux.rs:273:15: 273:18}, &str, nom::error::Error<&str>>::{closure#0}};
    let _3: {closure@nom::bytes::complete::take_till<{closure@src/platform/linux.rs:273:15: 273:18}, &str, nom::error::Error<&str>>::{closure#0}};
    let mut _4: (&str,);

    bb0: {
        _3 = nom::bytes::complete::take_till::<{closure@src/platform/linux.rs:273:15: 273:18}, &str, nom::error::Error<&str>>(const ZeroSized: {closure@src/platform/linux.rs:273:15: 273:18}) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _4 = (_1,);
        _0 = <{closure@nom::bytes::complete::take_till<{closure@src/platform/linux.rs:273:15: 273:18}, &str, nom::error::Error<&str>>::{closure#0}} as Fn<(&str,)>>::call(move _2, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn word_s::{closure#0}(_1: &{closure@src/platform/linux.rs:273:15: 273:18}, _2: char) -> bool {
    debug c => _2;
    let mut _0: bool;
    let mut _3: u8;

    bb0: {
        _3 = _2 as u8 (IntToInt);
        _0 = is_space(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn proc_mounts_line(_1: &str) -> Result<(&str, ProcMountsData), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, platform::linux::ProcMountsData), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::combinator::map<&str, (&str, &str, &str), platform::linux::ProcMountsData, nom::error::Error<&str>, {closure@nom::sequence::tuple<&str, (&str, &str, &str), nom::error::Error<&str>, ({closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}})>::{closure#0}}, {closure@src/platform/linux.rs:287:9: 287:35}>::{closure#0}};
    let mut _3: {closure@nom::combinator::map<&str, (&str, &str, &str), platform::linux::ProcMountsData, nom::error::Error<&str>, {closure@nom::sequence::tuple<&str, (&str, &str, &str), nom::error::Error<&str>, ({closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}})>::{closure#0}}, {closure@src/platform/linux.rs:287:9: 287:35}>::{closure#0}};
    let mut _4: {closure@nom::sequence::tuple<&str, (&str, &str, &str), nom::error::Error<&str>, ({closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}})>::{closure#0}};
    let mut _5: {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _6: {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _7: {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _8: (&str,);

    bb0: {
        _5 = ws::<'_, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, &str, nom::error::Error<&str>>(word_s) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ws::<'_, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, &str, nom::error::Error<&str>>(word_s) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = ws::<'_, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, &str, nom::error::Error<&str>>(word_s) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = tuple::<&str, (&str, &str, &str), nom::error::Error<&str>, ({closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}})>(const (ZeroSized: {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, ZeroSized: {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, ZeroSized: {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}})) -> [return: bb4, unwind continue];
    }

    bb4: {
        _3 = nom::combinator::map::<&str, (&str, &str, &str), ProcMountsData, nom::error::Error<&str>, {closure@tuple<&str, (&str, &str, &str), nom::error::Error<&str>, ({closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}})>::{closure#0}}, {closure@src/platform/linux.rs:287:9: 287:35}>(const ZeroSized: {closure@tuple<&str, (&str, &str, &str), nom::error::Error<&str>, ({closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}})>::{closure#0}}, const ZeroSized: {closure@src/platform/linux.rs:287:9: 287:35}) -> [return: bb5, unwind continue];
    }

    bb5: {
        _2 = &mut _3;
        _8 = (_1,);
        _0 = <{closure@nom::combinator::map<&str, (&str, &str, &str), ProcMountsData, nom::error::Error<&str>, {closure@tuple<&str, (&str, &str, &str), nom::error::Error<&str>, ({closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}})>::{closure#0}}, {closure@src/platform/linux.rs:287:9: 287:35}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn proc_mounts_line::{closure#0}(_1: &mut {closure@src/platform/linux.rs:287:9: 287:35}, _2: (&str, &str, &str)) -> ProcMountsData {
    let mut _0: platform::linux::ProcMountsData;
    let _3: &str;
    let _4: &str;
    let _5: &str;
    let mut _6: std::string::String;
    let mut _7: std::string::String;
    let mut _8: std::string::String;
    scope 1 {
        debug source => _3;
        debug target => _4;
        debug fstype => _5;
    }

    bb0: {
        _3 = (_2.0: &str);
        _4 = (_2.1: &str);
        _5 = (_2.2: &str);
        _6 = <str as ToString>::to_string(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = <str as ToString>::to_string(_4) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _8 = <str as ToString>::to_string(_5) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = ProcMountsData { source: move _6, target: move _7, fstype: move _8 };
        return;
    }

    bb4 (cleanup): {
        drop(_7) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn proc_mounts(_1: &str) -> Result<(&str, Vec<ProcMountsData>), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, std::vec::Vec<platform::linux::ProcMountsData>), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::multi::many1<&str, platform::linux::ProcMountsData, nom::error::Error<&str>, {closure@nom::combinator::map_res<&str, &str, platform::linux::ProcMountsData, nom::error::Error<&str>, (), {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:297:40: 297:47}>::{closure#0}}>::{closure#0}};
    let mut _3: {closure@nom::multi::many1<&str, platform::linux::ProcMountsData, nom::error::Error<&str>, {closure@nom::combinator::map_res<&str, &str, platform::linux::ProcMountsData, nom::error::Error<&str>, (), {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:297:40: 297:47}>::{closure#0}}>::{closure#0}};
    let mut _4: {closure@nom::combinator::map_res<&str, &str, platform::linux::ProcMountsData, nom::error::Error<&str>, (), {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:297:40: 297:47}>::{closure#0}};
    let mut _5: {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _6: (&str,);

    bb0: {
        _5 = ws::<'_, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, &str, nom::error::Error<&str>>(nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = map_res::<&str, &str, ProcMountsData, nom::error::Error<&str>, (), {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:297:40: 297:47}>(const ZeroSized: {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, const ZeroSized: {closure@src/platform/linux.rs:297:40: 297:47}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = many1::<&str, ProcMountsData, nom::error::Error<&str>, {closure@map_res<&str, &str, ProcMountsData, nom::error::Error<&str>, (), {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:297:40: 297:47}>::{closure#0}}>(const ZeroSized: {closure@map_res<&str, &str, ProcMountsData, nom::error::Error<&str>, (), {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:297:40: 297:47}>::{closure#0}}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = &mut _3;
        _6 = (_1,);
        _0 = <{closure@many1<&str, ProcMountsData, nom::error::Error<&str>, {closure@map_res<&str, &str, ProcMountsData, nom::error::Error<&str>, (), {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:297:40: 297:47}>::{closure#0}}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn proc_mounts::{closure#0}(_1: &mut {closure@src/platform/linux.rs:297:40: 297:47}, _2: &str) -> Result<ProcMountsData, ()> {
    debug input => _2;
    let mut _0: std::result::Result<platform::linux::ProcMountsData, ()>;
    let mut _3: bool;
    let mut _4: std::result::Result<platform::linux::ProcMountsData, nom::Err<nom::error::Error<&str>>>;
    let mut _5: std::result::Result<(&str, platform::linux::ProcMountsData), nom::Err<nom::error::Error<&str>>>;

    bb0: {
        _3 = core::str::<impl str>::is_empty(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = Result::<ProcMountsData, ()>::Err(const ());
        goto -> bb6;
    }

    bb3: {
        _5 = proc_mounts_line(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = Result::<(&str, ProcMountsData), nom::Err<nom::error::Error<&str>>>::map::<ProcMountsData, {closure@src/platform/linux.rs:301:41: 301:51}>(move _5, const ZeroSized: {closure@src/platform/linux.rs:301:41: 301:51}) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = Result::<ProcMountsData, nom::Err<nom::error::Error<&str>>>::map_err::<(), {closure@src/platform/linux.rs:301:65: 301:68}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:301:65: 301:68}) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn proc_mounts::{closure#0}::{closure#0}(_1: {closure@src/platform/linux.rs:301:41: 301:51}, _2: (&str, ProcMountsData)) -> ProcMountsData {
    let mut _0: platform::linux::ProcMountsData;
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _0 = move (_2.1: platform::linux::ProcMountsData);
        return;
    }
}

fn proc_mounts::{closure#0}::{closure#1}(_1: {closure@src/platform/linux.rs:301:65: 301:68}, _2: nom::Err<nom::error::Error<&str>>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn proc_net_sockstat(_1: &str) -> Result<(&str, ProcNetSockStat), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, platform::linux::ProcNetSockStat), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::combinator::map<&str, (usize, usize, usize), platform::linux::ProcNetSockStat, nom::error::Error<&str>, {closure@nom::sequence::preceded<&str, &str, (usize, usize, usize), nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@nom::sequence::tuple<&str, (usize, usize, usize), nom::error::Error<&str>, ({closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}})>::{closure#0}}>::{closure#0}}, {closure@src/platform/linux.rs:371:9: 371:49}>::{closure#0}};
    let mut _3: {closure@nom::combinator::map<&str, (usize, usize, usize), platform::linux::ProcNetSockStat, nom::error::Error<&str>, {closure@nom::sequence::preceded<&str, &str, (usize, usize, usize), nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@nom::sequence::tuple<&str, (usize, usize, usize), nom::error::Error<&str>, ({closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}})>::{closure#0}}>::{closure#0}}, {closure@src/platform/linux.rs:371:9: 371:49}>::{closure#0}};
    let mut _4: {closure@nom::sequence::preceded<&str, &str, (usize, usize, usize), nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@nom::sequence::tuple<&str, (usize, usize, usize), nom::error::Error<&str>, ({closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}})>::{closure#0}}>::{closure#0}};
    let mut _5: {closure@nom::sequence::tuple<&str, (usize, usize, usize), nom::error::Error<&str>, ({closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}})>::{closure#0}};
    let mut _6: ({closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}}, {closure@nom::sequence::delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}});
    let mut _7: {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}};
    let mut _8: {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _9: {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}};
    let mut _10: {closure@nom::sequence::delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _11: {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _12: {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}};
    let mut _13: {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}};
    let mut _14: {closure@nom::sequence::delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _15: {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}};
    let mut _16: (&str,);

    bb0: {
        _9 = nom::bytes::complete::tag::<&str, &str, nom::error::Error<&str>>(const "TCP: inuse") -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = ws::<'_, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, &str, nom::error::Error<&str>>(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = preceded::<&str, &str, usize, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>(move _8, usize_s) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = nom::bytes::complete::tag::<&str, &str, nom::error::Error<&str>>(const "orphan") -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = ws::<'_, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, &str, nom::error::Error<&str>>(move _12) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = delimited::<&str, &str, usize, &str, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}>(move _11, usize_s, nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = nom::bytes::complete::tag::<&str, &str, nom::error::Error<&str>>(const "UDP: inuse") -> [return: bb7, unwind continue];
    }

    bb7: {
        _14 = ws::<'_, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, &str, nom::error::Error<&str>>(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        _13 = preceded::<&str, &str, usize, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>(move _14, usize_s) -> [return: bb9, unwind continue];
    }

    bb9: {
        _6 = (move _7, move _10, move _13);
        _5 = tuple::<&str, (usize, usize, usize), nom::error::Error<&str>, ({closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}}, {closure@delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}})>(move _6) -> [return: bb10, unwind continue];
    }

    bb10: {
        _4 = preceded::<&str, &str, (usize, usize, usize), nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@tuple<&str, (usize, usize, usize), nom::error::Error<&str>, ({closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}}, {closure@delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}})>::{closure#0}}>(nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>, move _5) -> [return: bb11, unwind continue];
    }

    bb11: {
        _3 = nom::combinator::map::<&str, (usize, usize, usize), ProcNetSockStat, nom::error::Error<&str>, {closure@preceded<&str, &str, (usize, usize, usize), nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@tuple<&str, (usize, usize, usize), nom::error::Error<&str>, ({closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}}, {closure@delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}})>::{closure#0}}>::{closure#0}}, {closure@src/platform/linux.rs:371:9: 371:49}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:371:9: 371:49}) -> [return: bb12, unwind continue];
    }

    bb12: {
        _2 = &mut _3;
        _16 = (_1,);
        _0 = <{closure@nom::combinator::map<&str, (usize, usize, usize), ProcNetSockStat, nom::error::Error<&str>, {closure@preceded<&str, &str, (usize, usize, usize), nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@tuple<&str, (usize, usize, usize), nom::error::Error<&str>, ({closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}}, {closure@delimited<&str, &str, usize, &str, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@delimited<&str, &str, &str, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}})>::{closure#0}}>::{closure#0}}, {closure@src/platform/linux.rs:371:9: 371:49}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _16) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }
}

fn proc_net_sockstat::{closure#0}(_1: &mut {closure@src/platform/linux.rs:371:9: 371:49}, _2: (usize, usize, usize)) -> ProcNetSockStat {
    let mut _0: platform::linux::ProcNetSockStat;
    let _3: usize;
    let _4: usize;
    let _5: usize;
    scope 1 {
        debug tcp_in_use => _3;
        debug tcp_orphaned => _4;
        debug udp_in_use => _5;
    }

    bb0: {
        _3 = (_2.0: usize);
        _4 = (_2.1: usize);
        _5 = (_2.2: usize);
        _0 = ProcNetSockStat { tcp_in_use: _3, tcp_orphaned: _4, udp_in_use: _5 };
        return;
    }
}

fn proc_net_sockstat6(_1: &str) -> Result<(&str, ProcNetSockStat6), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, platform::linux::ProcNetSockStat6), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::combinator::map<&str, (usize, usize), platform::linux::ProcNetSockStat6, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, (usize, usize), &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::sequence::tuple<&str, (usize, usize), nom::error::Error<&str>, ({closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}}, {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}})>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:407:9: 407:35}>::{closure#0}};
    let mut _3: {closure@nom::combinator::map<&str, (usize, usize), platform::linux::ProcNetSockStat6, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, (usize, usize), &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::sequence::tuple<&str, (usize, usize), nom::error::Error<&str>, ({closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}}, {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}})>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:407:9: 407:35}>::{closure#0}};
    let mut _4: {closure@nom::sequence::delimited<&str, &str, (usize, usize), &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::sequence::tuple<&str, (usize, usize), nom::error::Error<&str>, ({closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}}, {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}})>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _5: {closure@nom::sequence::tuple<&str, (usize, usize), nom::error::Error<&str>, ({closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}}, {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}})>::{closure#0}};
    let mut _6: ({closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}}, {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}});
    let mut _7: {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}};
    let mut _8: {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}};
    let mut _9: {closure@nom::sequence::preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}>::{closure#0}};
    let mut _10: {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}};
    let mut _11: (&str,);

    bb0: {
        _8 = nom::bytes::complete::tag::<&str, &str, nom::error::Error<&str>>(const "TCP6: inuse") -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = preceded::<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>(move _8, usize_s) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = nom::bytes::complete::tag::<&str, &str, nom::error::Error<&str>>(const "UDP6: inuse") -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = preceded::<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>(move _10, usize_s) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = (move _7, move _9);
        _5 = tuple::<&str, (usize, usize), nom::error::Error<&str>, ({closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}}, {closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}})>(move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        _4 = ws::<'_, {closure@tuple<&str, (usize, usize), nom::error::Error<&str>, ({closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}}, {closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}})>::{closure#0}}, (usize, usize), nom::error::Error<&str>>(move _5) -> [return: bb6, unwind continue];
    }

    bb6: {
        _3 = nom::combinator::map::<&str, (usize, usize), ProcNetSockStat6, nom::error::Error<&str>, {closure@delimited<&str, &str, (usize, usize), &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@tuple<&str, (usize, usize), nom::error::Error<&str>, ({closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}}, {closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}})>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:407:9: 407:35}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:407:9: 407:35}) -> [return: bb7, unwind continue];
    }

    bb7: {
        _2 = &mut _3;
        _11 = (_1,);
        _0 = <{closure@nom::combinator::map<&str, (usize, usize), ProcNetSockStat6, nom::error::Error<&str>, {closure@delimited<&str, &str, (usize, usize), &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@tuple<&str, (usize, usize), nom::error::Error<&str>, ({closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}}, {closure@preceded<&str, &str, usize, nom::error::Error<&str>, {closure@nom::bytes::complete::tag<&str, &str, nom::error::Error<&str>>::{closure#0}}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}>::{closure#0}})>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:407:9: 407:35}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _11) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn proc_net_sockstat6::{closure#0}(_1: &mut {closure@src/platform/linux.rs:407:9: 407:35}, _2: (usize, usize)) -> ProcNetSockStat6 {
    let mut _0: platform::linux::ProcNetSockStat6;
    let _3: usize;
    let _4: usize;
    scope 1 {
        debug tcp_in_use => _3;
        debug udp_in_use => _4;
    }

    bb0: {
        _3 = (_2.0: usize);
        _4 = (_2.1: usize);
        _0 = ProcNetSockStat6 { tcp_in_use: _3, udp_in_use: _4 };
        return;
    }
}

fn stat_mount(_1: ProcMountsData) -> Result<data::Filesystem, std::io::Error> {
    debug mount => _1;
    let mut _0: std::result::Result<data::Filesystem, std::io::Error>;
    let mut _2: libc::statvfs;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::string::String;
    let mut _13: *const i8;
    let mut _14: *const u8;
    let _15: &str;
    let mut _16: &std::string::String;
    let mut _17: *mut libc::statvfs;
    let mut _18: &mut libc::statvfs;
    let mut _19: data::Filesystem;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: u64;
    let mut _23: usize;
    let mut _24: u64;
    let mut _25: usize;
    let mut _26: u64;
    let mut _27: usize;
    let mut _28: u64;
    let mut _29: bytesize::ByteSize;
    let mut _30: u64;
    let mut _31: u64;
    let mut _32: u64;
    let mut _33: (u64, bool);
    let mut _34: bytesize::ByteSize;
    let mut _35: u64;
    let mut _36: u64;
    let mut _37: u64;
    let mut _38: (u64, bool);
    let mut _39: bytesize::ByteSize;
    let mut _40: u64;
    let mut _41: u64;
    let mut _42: u64;
    let mut _43: (u64, bool);
    let mut _44: usize;
    let mut _45: u64;
    let mut _46: std::string::String;
    let mut _47: std::string::String;
    let mut _48: std::string::String;
    let mut _49: std::io::Error;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    scope 1 {
        debug info => _2;
        let _3: std::string::String;
        let _4: std::string::String;
        let mut _50: &[&str; 2];
        scope 3 {
            debug target => _3;
            let _12: i32;
            scope 5 {
                debug result => _12;
            }
            scope 6 {
            }
        }
        scope 4 {
            debug res => _4;
        }
    }
    scope 2 {
    }

    bb0: {
        _53 = const false;
        _52 = const false;
        _51 = const false;
        _51 = const true;
        _52 = const true;
        _53 = const true;
        _2 = zeroed::<statvfs>() -> [return: bb1, unwind: bb37];
    }

    bb1: {
        _50 = const _;
        _6 = _50 as &[&str] (PointerCoercion(Unsize));
        _11 = &(_1.1: std::string::String);
        _10 = core::fmt::rt::Argument::<'_>::new_display::<String>(_11) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb3, unwind: bb37];
    }

    bb3: {
        _4 = std::fmt::format(move _5) -> [return: bb4, unwind: bb37];
    }

    bb4: {
        _3 = move _4;
        _16 = &_3;
        _15 = <String as Deref>::deref(move _16) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _14 = core::str::<impl str>::as_ptr(_15) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _13 = move _14 as *const i8 (PtrToPtr);
        _18 = &mut _2;
        _17 = &raw mut (*_18);
        _12 = statvfs(move _13, move _17) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        switchInt(_12) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _49 = std::io::Error::last_os_error() -> [return: bb17, unwind: bb20];
    }

    bb9: {
        _22 = (_2.5: u64);
        _21 = move _22 as usize (IntToInt);
        _24 = (_2.6: u64);
        _23 = move _24 as usize (IntToInt);
        _20 = core::num::<impl usize>::saturating_sub(move _21, move _23) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        _26 = (_2.5: u64);
        _25 = move _26 as usize (IntToInt);
        _28 = (_2.7: u64);
        _27 = move _28 as usize (IntToInt);
        _31 = (_2.3: u64);
        _32 = (_2.0: u64);
        _33 = CheckedMul(_31, _32);
        assert(!move (_33.1: bool), "attempt to compute `{} * {}`, which would overflow", move _31, move _32) -> [success: bb11, unwind: bb20];
    }

    bb11: {
        _30 = move (_33.0: u64);
        _29 = bytesize::ByteSize::b(move _30) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        _36 = (_2.4: u64);
        _37 = (_2.0: u64);
        _38 = CheckedMul(_36, _37);
        assert(!move (_38.1: bool), "attempt to compute `{} * {}`, which would overflow", move _36, move _37) -> [success: bb13, unwind: bb20];
    }

    bb13: {
        _35 = move (_38.0: u64);
        _34 = bytesize::ByteSize::b(move _35) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _41 = (_2.2: u64);
        _42 = (_2.0: u64);
        _43 = CheckedMul(_41, _42);
        assert(!move (_43.1: bool), "attempt to compute `{} * {}`, which would overflow", move _41, move _42) -> [success: bb15, unwind: bb20];
    }

    bb15: {
        _40 = move (_43.0: u64);
        _39 = bytesize::ByteSize::b(move _40) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        _45 = (_2.10: u64);
        _44 = move _45 as usize (IntToInt);
        _53 = const false;
        _46 = move (_1.2: std::string::String);
        _52 = const false;
        _47 = move (_1.0: std::string::String);
        _51 = const false;
        _48 = move (_1.1: std::string::String);
        _19 = data::Filesystem { files: move _20, files_total: move _25, files_avail: move _27, free: move _29, avail: move _34, total: move _39, name_max: move _44, fs_type: move _46, fs_mounted_from: move _47, fs_mounted_on: move _48 };
        _0 = Result::<data::Filesystem, std::io::Error>::Ok(move _19);
        goto -> bb18;
    }

    bb17: {
        _0 = Result::<data::Filesystem, std::io::Error>::Err(move _49);
        goto -> bb18;
    }

    bb18: {
        drop(_3) -> [return: bb19, unwind: bb37];
    }

    bb19: {
        switchInt(_52) -> [0: bb29, otherwise: bb31];
    }

    bb20 (cleanup): {
        drop(_3) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        switchInt(_53) -> [0: bb21, otherwise: bb24];
    }

    bb24 (cleanup): {
        drop((_1.2: std::string::String)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_51) -> [0: bb23, otherwise: bb26];
    }

    bb26 (cleanup): {
        drop((_1.1: std::string::String)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb27: {
        switchInt(_53) -> [0: bb22, otherwise: bb28];
    }

    bb28: {
        drop((_1.2: std::string::String)) -> [return: bb22, unwind continue];
    }

    bb29: {
        switchInt(_51) -> [0: bb27, otherwise: bb30];
    }

    bb30: {
        drop((_1.1: std::string::String)) -> [return: bb27, unwind: bb23];
    }

    bb31: {
        drop((_1.0: std::string::String)) -> [return: bb29, unwind: bb25];
    }

    bb32 (cleanup): {
        switchInt(_53) -> [0: bb21, otherwise: bb33];
    }

    bb33 (cleanup): {
        drop((_1.2: std::string::String)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        switchInt(_51) -> [0: bb32, otherwise: bb35];
    }

    bb35 (cleanup): {
        drop((_1.1: std::string::String)) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop((_1.0: std::string::String)) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_52) -> [0: bb34, otherwise: bb36];
    }
}

promoted[0] in stat_mount: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\0"];
        _0 = &_1;
        return;
    }
}

fn proc_diskstats_line(_1: &str) -> Result<(&str, data::BlockDeviceStats), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, data::BlockDeviceStats), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::combinator::map<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), data::BlockDeviceStats, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::sequence::tuple<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s})>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:456:9: 471:11}>::{closure#0}};
    let mut _3: {closure@nom::combinator::map<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), data::BlockDeviceStats, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::sequence::tuple<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s})>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:456:9: 471:11}>::{closure#0}};
    let mut _4: {closure@nom::sequence::delimited<&str, &str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::sequence::tuple<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s})>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _5: {closure@nom::sequence::tuple<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {platform::linux::word_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s}, for<'a> fn(&'a str) -> std::result::Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {platform::linux::usize_s})>::{closure#0}};
    let mut _6: (&str,);

    bb0: {
        _5 = tuple::<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s})>(const (usize_s, usize_s, word_s, usize_s, usize_s, usize_s, usize_s, usize_s, usize_s, usize_s, usize_s, usize_s, usize_s, usize_s)) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = ws::<'_, {closure@tuple<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s})>::{closure#0}}, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), nom::error::Error<&str>>(const ZeroSized: {closure@tuple<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s})>::{closure#0}}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = nom::combinator::map::<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), data::BlockDeviceStats, nom::error::Error<&str>, {closure@delimited<&str, &str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@tuple<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s})>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:456:9: 471:11}>(const ZeroSized: {closure@delimited<&str, &str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@tuple<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s})>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, const ZeroSized: {closure@src/platform/linux.rs:456:9: 471:11}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = &mut _3;
        _6 = (_1,);
        _0 = <{closure@nom::combinator::map<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), data::BlockDeviceStats, nom::error::Error<&str>, {closure@delimited<&str, &str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@tuple<&str, (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize), nom::error::Error<&str>, (for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, &'a str), nom::Err<nom::error::Error<&'a str>>> {word_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s}, for<'a> fn(&'a str) -> Result<(&'a str, usize), nom::Err<nom::error::Error<&'a str>>> {usize_s})>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}, {closure@src/platform/linux.rs:456:9: 471:11}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn proc_diskstats_line::{closure#0}(_1: &mut {closure@src/platform/linux.rs:456:9: 471:11}, _2: (usize, usize, &str, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize, usize)) -> data::BlockDeviceStats {
    let mut _0: data::BlockDeviceStats;
    let _3: usize;
    let _4: usize;
    let _5: &str;
    let _6: usize;
    let _7: usize;
    let _8: usize;
    let _9: usize;
    let _10: usize;
    let _11: usize;
    let _12: usize;
    let _13: usize;
    let _14: usize;
    let _15: usize;
    let _16: usize;
    let mut _17: std::string::String;
    scope 1 {
        debug _major_number => _3;
        debug _minor_number => _4;
        debug name => _5;
        debug read_ios => _6;
        debug read_merges => _7;
        debug read_sectors => _8;
        debug read_ticks => _9;
        debug write_ios => _10;
        debug write_merges => _11;
        debug write_sectors => _12;
        debug write_ticks => _13;
        debug in_flight => _14;
        debug io_ticks => _15;
        debug time_in_queue => _16;
    }

    bb0: {
        _3 = (_2.0: usize);
        _4 = (_2.1: usize);
        _5 = (_2.2: &str);
        _6 = (_2.3: usize);
        _7 = (_2.4: usize);
        _8 = (_2.5: usize);
        _9 = (_2.6: usize);
        _10 = (_2.7: usize);
        _11 = (_2.8: usize);
        _12 = (_2.9: usize);
        _13 = (_2.10: usize);
        _14 = (_2.11: usize);
        _15 = (_2.12: usize);
        _16 = (_2.13: usize);
        _17 = <str as ToString>::to_string(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = data::BlockDeviceStats { name: move _17, read_ios: _6, read_merges: _7, read_sectors: _8, read_ticks: _9, write_ios: _10, write_merges: _11, write_sectors: _12, write_ticks: _13, in_flight: _14, io_ticks: _15, time_in_queue: _16 };
        return;
    }
}

fn proc_diskstats(_1: &str) -> Result<(&str, Vec<data::BlockDeviceStats>), nom::Err<nom::error::Error<&str>>> {
    debug input => _1;
    let mut _0: std::result::Result<(&str, std::vec::Vec<data::BlockDeviceStats>), nom::Err<nom::error::Error<&str>>>;
    let mut _2: &mut {closure@nom::multi::many0<&str, data::BlockDeviceStats, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, data::BlockDeviceStats, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::combinator::map_res<&str, &str, data::BlockDeviceStats, nom::error::Error<&str>, (), fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@src/platform/linux.rs:490:39: 490:46}>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}};
    let mut _3: {closure@nom::multi::many0<&str, data::BlockDeviceStats, nom::error::Error<&str>, {closure@nom::sequence::delimited<&str, &str, data::BlockDeviceStats, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::combinator::map_res<&str, &str, data::BlockDeviceStats, nom::error::Error<&str>, (), fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@src/platform/linux.rs:490:39: 490:46}>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}};
    let mut _4: {closure@nom::sequence::delimited<&str, &str, data::BlockDeviceStats, &str, nom::error::Error<&str>, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@nom::combinator::map_res<&str, &str, data::BlockDeviceStats, nom::error::Error<&str>, (), fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@src/platform/linux.rs:490:39: 490:46}>::{closure#0}}, fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}};
    let mut _5: {closure@nom::combinator::map_res<&str, &str, data::BlockDeviceStats, nom::error::Error<&str>, (), fn(&str) -> std::result::Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@src/platform/linux.rs:490:39: 490:46}>::{closure#0}};
    let mut _6: (&str,);

    bb0: {
        _5 = map_res::<&str, &str, data::BlockDeviceStats, nom::error::Error<&str>, (), fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@src/platform/linux.rs:490:39: 490:46}>(nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>, const ZeroSized: {closure@src/platform/linux.rs:490:39: 490:46}) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = ws::<'_, {closure@map_res<&str, &str, data::BlockDeviceStats, nom::error::Error<&str>, (), fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@src/platform/linux.rs:490:39: 490:46}>::{closure#0}}, data::BlockDeviceStats, nom::error::Error<&str>>(const ZeroSized: {closure@map_res<&str, &str, data::BlockDeviceStats, nom::error::Error<&str>, (), fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@src/platform/linux.rs:490:39: 490:46}>::{closure#0}}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = many0::<&str, data::BlockDeviceStats, nom::error::Error<&str>, {closure@delimited<&str, &str, data::BlockDeviceStats, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@map_res<&str, &str, data::BlockDeviceStats, nom::error::Error<&str>, (), fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@src/platform/linux.rs:490:39: 490:46}>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>(const ZeroSized: {closure@delimited<&str, &str, data::BlockDeviceStats, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@map_res<&str, &str, data::BlockDeviceStats, nom::error::Error<&str>, (), fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@src/platform/linux.rs:490:39: 490:46}>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = &mut _3;
        _6 = (_1,);
        _0 = <{closure@many0<&str, data::BlockDeviceStats, nom::error::Error<&str>, {closure@delimited<&str, &str, data::BlockDeviceStats, &str, nom::error::Error<&str>, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}, {closure@map_res<&str, &str, data::BlockDeviceStats, nom::error::Error<&str>, (), fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::not_line_ending::<&str, nom::error::Error<&str>>}, {closure@src/platform/linux.rs:490:39: 490:46}>::{closure#0}}, fn(&str) -> Result<(&str, &str), nom::Err<nom::error::Error<&str>>> {nom::character::complete::multispace0::<&str, nom::error::Error<&str>>}>::{closure#0}}>::{closure#0}} as FnMut<(&str,)>>::call_mut(move _2, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn proc_diskstats::{closure#0}(_1: &mut {closure@src/platform/linux.rs:490:39: 490:46}, _2: &str) -> Result<data::BlockDeviceStats, ()> {
    debug input => _2;
    let mut _0: std::result::Result<data::BlockDeviceStats, ()>;
    let mut _3: std::result::Result<data::BlockDeviceStats, nom::Err<nom::error::Error<&str>>>;
    let mut _4: std::result::Result<(&str, data::BlockDeviceStats), nom::Err<nom::error::Error<&str>>>;

    bb0: {
        _4 = proc_diskstats_line(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Result::<(&str, data::BlockDeviceStats), nom::Err<nom::error::Error<&str>>>::map::<data::BlockDeviceStats, {closure@src/platform/linux.rs:492:18: 492:28}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:492:18: 492:28}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Result::<data::BlockDeviceStats, nom::Err<nom::error::Error<&str>>>::map_err::<(), {closure@src/platform/linux.rs:493:22: 493:25}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:493:22: 493:25}) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn proc_diskstats::{closure#0}::{closure#0}(_1: {closure@src/platform/linux.rs:492:18: 492:28}, _2: (&str, data::BlockDeviceStats)) -> data::BlockDeviceStats {
    let mut _0: data::BlockDeviceStats;
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _0 = move (_2.1: data::BlockDeviceStats);
        return;
    }
}

fn proc_diskstats::{closure#0}::{closure#1}(_1: {closure@src/platform/linux.rs:493:22: 493:25}, _2: nom::Err<nom::error::Error<&str>>) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::new() -> PlatformImpl {
    let mut _0: platform::linux::PlatformImpl;

    bb0: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::cpu_load(_1: &PlatformImpl) -> Result<data::DelayedMeasurement<Vec<data::CPULoad>>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<data::DelayedMeasurement<std::vec::Vec<data::CPULoad>>, std::io::Error>;
    let mut _2: std::result::Result<std::vec::Vec<data::CpuTime>, std::io::Error>;

    bb0: {
        _2 = cpu_time() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<Vec<data::CpuTime>, std::io::Error>::map::<data::DelayedMeasurement<Vec<data::CPULoad>>, {closure@src/platform/linux.rs:522:24: 522:31}>(move _2, const ZeroSized: {closure@src/platform/linux.rs:522:24: 522:31}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::cpu_load::{closure#0}(_1: {closure@src/platform/linux.rs:522:24: 522:31}, _2: Vec<data::CpuTime>) -> data::DelayedMeasurement<Vec<data::CPULoad>> {
    debug times => _2;
    let mut _0: data::DelayedMeasurement<std::vec::Vec<data::CPULoad>>;
    let mut _3: std::boxed::Box<dyn std::ops::Fn() -> std::result::Result<std::vec::Vec<data::CPULoad>, std::io::Error> + std::marker::Send>;
    let mut _4: std::boxed::Box<{closure@src/platform/linux.rs:523:46: 523:53}>;
    let mut _5: {closure@src/platform/linux.rs:523:46: 523:53};

    bb0: {
        _5 = {closure@src/platform/linux.rs:523:46: 523:53} { times: move _2 };
        _4 = Box::<{closure@src/platform/linux.rs:523:46: 523:53}>::new(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = move _4 as std::boxed::Box<dyn std::ops::Fn() -> std::result::Result<std::vec::Vec<data::CPULoad>, std::io::Error> + std::marker::Send> (PointerCoercion(Unsize));
        _0 = data::DelayedMeasurement::<Vec<data::CPULoad>>::new(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::cpu_load::{closure#0}::{closure#0}(_1: &{closure@src/platform/linux.rs:523:46: 523:53}) -> Result<Vec<data::CPULoad>, std::io::Error> {
    debug times => ((*_1).0: std::vec::Vec<data::CpuTime>);
    let mut _0: std::result::Result<std::vec::Vec<data::CPULoad>, std::io::Error>;
    let mut _2: std::result::Result<std::vec::Vec<data::CpuTime>, std::io::Error>;
    let mut _3: {closure@src/platform/linux.rs:524:32: 524:45};
    let mut _4: &std::vec::Vec<data::CpuTime>;

    bb0: {
        _2 = cpu_time() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &((*_1).0: std::vec::Vec<data::CpuTime>);
        _3 = {closure@src/platform/linux.rs:524:32: 524:45} { times: move _4 };
        _0 = Result::<Vec<data::CpuTime>, std::io::Error>::map::<Vec<data::CPULoad>, {closure@src/platform/linux.rs:524:32: 524:45}>(move _2, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::cpu_load::{closure#0}::{closure#0}::{closure#0}(_1: {closure@src/platform/linux.rs:524:32: 524:45}, _2: Vec<data::CpuTime>) -> Vec<data::CPULoad> {
    debug delay_times => _2;
    debug times => (*(_1.0: &std::vec::Vec<data::CpuTime>));
    let mut _0: std::vec::Vec<data::CPULoad>;
    let mut _3: std::iter::Map<std::iter::Zip<std::slice::Iter<'_, data::CpuTime>, std::slice::Iter<'_, data::CpuTime>>, {closure@src/platform/linux.rs:528:30: 528:43}>;
    let mut _4: std::iter::Zip<std::slice::Iter<'_, data::CpuTime>, std::slice::Iter<'_, data::CpuTime>>;
    let mut _5: std::slice::Iter<'_, data::CpuTime>;
    let _6: &[data::CpuTime];
    let mut _7: &std::vec::Vec<data::CpuTime>;
    let mut _8: std::slice::Iter<'_, data::CpuTime>;
    let _9: &[data::CpuTime];
    let mut _10: &std::vec::Vec<data::CpuTime>;

    bb0: {
        _7 = &_2;
        _6 = <Vec<data::CpuTime> as Deref>::deref(move _7) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _5 = core::slice::<impl [data::CpuTime]>::iter(_6) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _10 = deref_copy (_1.0: &std::vec::Vec<data::CpuTime>);
        _9 = <Vec<data::CpuTime> as Deref>::deref(_10) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _8 = core::slice::<impl [data::CpuTime]>::iter(_9) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _4 = <std::slice::Iter<'_, data::CpuTime> as Iterator>::zip::<std::slice::Iter<'_, data::CpuTime>>(move _5, move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _3 = <Zip<std::slice::Iter<'_, data::CpuTime>, std::slice::Iter<'_, data::CpuTime>> as Iterator>::map::<data::CPULoad, {closure@src/platform/linux.rs:528:30: 528:43}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:528:30: 528:43}) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _0 = <std::iter::Map<Zip<std::slice::Iter<'_, data::CpuTime>, std::slice::Iter<'_, data::CpuTime>>, {closure@src/platform/linux.rs:528:30: 528:43}> as Iterator>::collect::<Vec<data::CPULoad>>(move _3) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        drop(_2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::cpu_load::{closure#0}::{closure#0}::{closure#0}::{closure#0}(_1: &mut {closure@src/platform/linux.rs:528:30: 528:43}, _2: (&data::CpuTime, &data::CpuTime)) -> data::CPULoad {
    let mut _0: data::CPULoad;
    let _3: &data::CpuTime;
    let _4: &data::CpuTime;
    let mut _5: &data::CpuTime;
    let _6: data::CpuTime;
    let mut _7: data::CpuTime;
    scope 1 {
        debug now => _3;
        debug prev => _4;
    }

    bb0: {
        _3 = (_2.0: &data::CpuTime);
        _4 = (_2.1: &data::CpuTime);
        _7 = (*_3);
        _6 = <data::CpuTime as Sub<&data::CpuTime>>::sub(move _7, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _0 = data::CpuTime::to_cpuload(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::load_average(_1: &PlatformImpl) -> Result<data::LoadAverage, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<data::LoadAverage, std::io::Error>;

    bb0: {
        _0 = load_average() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::memory(_1: &PlatformImpl) -> Result<data::Memory, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<data::Memory, std::io::Error>;
    let mut _2: std::result::Result<std::collections::BTreeMap<std::string::String, bytesize::ByteSize>, std::io::Error>;
    let mut _3: std::result::Result<std::collections::BTreeMap<std::string::String, bytesize::ByteSize>, std::io::Error>;

    bb0: {
        _3 = memory_stats() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Result::<std::collections::BTreeMap<String, bytesize::ByteSize>, std::io::Error>::or_else::<std::io::Error, {closure@src/platform/linux.rs:541:22: 541:25}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:541:22: 541:25}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Result::<std::collections::BTreeMap<String, bytesize::ByteSize>, std::io::Error>::map::<data::Memory, {closure@src/platform/linux.rs:573:18: 573:27}>(move _2, const ZeroSized: {closure@src/platform/linux.rs:573:18: 573:27}) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::memory::{closure#0}(_1: {closure@src/platform/linux.rs:541:22: 541:25}, _2: std::io::Error) -> Result<std::collections::BTreeMap<String, bytesize::ByteSize>, std::io::Error> {
    let mut _0: std::result::Result<std::collections::BTreeMap<std::string::String, bytesize::ByteSize>, std::io::Error>;
    let mut _3: std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let _5: ();
    let mut _6: *mut platform::linux::sysinfo;
    let mut _7: &mut platform::linux::sysinfo;
    let mut _9: u32;
    let _10: std::option::Option<bytesize::ByteSize>;
    let mut _11: &mut std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let mut _12: std::string::String;
    let _13: &str;
    let mut _14: bytesize::ByteSize;
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: (u64, bool);
    let _18: std::option::Option<bytesize::ByteSize>;
    let mut _19: &mut std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let mut _20: std::string::String;
    let _21: &str;
    let mut _22: bytesize::ByteSize;
    let mut _23: u64;
    let mut _24: u64;
    let mut _25: (u64, bool);
    let _26: std::option::Option<bytesize::ByteSize>;
    let mut _27: &mut std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let mut _28: std::string::String;
    let _29: &str;
    let mut _30: bytesize::ByteSize;
    let mut _31: u64;
    let mut _32: u64;
    let mut _33: (u64, bool);
    let _34: std::option::Option<bytesize::ByteSize>;
    let mut _35: &mut std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let mut _36: std::string::String;
    let _37: &str;
    let mut _38: bytesize::ByteSize;
    let mut _39: u64;
    let mut _40: u64;
    let mut _41: (u64, bool);
    let _42: std::option::Option<bytesize::ByteSize>;
    let mut _43: &mut std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let mut _44: std::string::String;
    let _45: &str;
    let mut _46: bytesize::ByteSize;
    let mut _47: u64;
    let mut _48: u64;
    let mut _49: (u64, bool);
    let _50: std::option::Option<bytesize::ByteSize>;
    let mut _51: &mut std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let mut _52: std::string::String;
    let _53: &str;
    let mut _54: bytesize::ByteSize;
    let mut _55: u64;
    let mut _56: u64;
    let mut _57: (u64, bool);
    let mut _58: std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    scope 1 {
        debug meminfo => _3;
        let mut _4: platform::linux::sysinfo;
        scope 2 {
            debug info => _4;
            let _8: u64;
            scope 4 {
            }
            scope 5 {
                debug unit => _8;
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _64 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const false;
        _59 = const false;
        _3 = std::collections::BTreeMap::<String, bytesize::ByteSize>::new() -> [return: bb1, unwind: bb30];
    }

    bb1: {
        _4 = zeroed::<platform::linux::sysinfo>() -> [return: bb2, unwind: bb29];
    }

    bb2: {
        _7 = &mut _4;
        _6 = &raw mut (*_7);
        _5 = platform::linux::sysinfo(move _6) -> [return: bb3, unwind: bb29];
    }

    bb3: {
        _9 = (_4.11: u32);
        _8 = move _9 as u64 (IntToInt);
        _11 = &mut _3;
        _13 = const "MemTotal";
        _12 = <str as ToOwned>::to_owned(_13) -> [return: bb4, unwind: bb29];
    }

    bb4: {
        _64 = const true;
        _16 = (_4.2: u64);
        _17 = CheckedMul(_16, _8);
        assert(!move (_17.1: bool), "attempt to compute `{} * {}`, which would overflow", move _16, _8) -> [success: bb5, unwind: bb43];
    }

    bb5: {
        _15 = move (_17.0: u64);
        _14 = bytesize::ByteSize::b(move _15) -> [return: bb6, unwind: bb43];
    }

    bb6: {
        _64 = const false;
        _10 = std::collections::BTreeMap::<String, bytesize::ByteSize>::insert(move _11, move _12, move _14) -> [return: bb7, unwind: bb43];
    }

    bb7: {
        _64 = const false;
        _19 = &mut _3;
        _21 = const "MemFree";
        _20 = <str as ToOwned>::to_owned(_21) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        _63 = const true;
        _24 = (_4.3: u64);
        _25 = CheckedMul(_24, _8);
        assert(!move (_25.1: bool), "attempt to compute `{} * {}`, which would overflow", move _24, _8) -> [success: bb9, unwind: bb41];
    }

    bb9: {
        _23 = move (_25.0: u64);
        _22 = bytesize::ByteSize::b(move _23) -> [return: bb10, unwind: bb41];
    }

    bb10: {
        _63 = const false;
        _18 = std::collections::BTreeMap::<String, bytesize::ByteSize>::insert(move _19, move _20, move _22) -> [return: bb11, unwind: bb41];
    }

    bb11: {
        _63 = const false;
        _27 = &mut _3;
        _29 = const "Shmem";
        _28 = <str as ToOwned>::to_owned(_29) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _62 = const true;
        _32 = (_4.4: u64);
        _33 = CheckedMul(_32, _8);
        assert(!move (_33.1: bool), "attempt to compute `{} * {}`, which would overflow", move _32, _8) -> [success: bb13, unwind: bb39];
    }

    bb13: {
        _31 = move (_33.0: u64);
        _30 = bytesize::ByteSize::b(move _31) -> [return: bb14, unwind: bb39];
    }

    bb14: {
        _62 = const false;
        _26 = std::collections::BTreeMap::<String, bytesize::ByteSize>::insert(move _27, move _28, move _30) -> [return: bb15, unwind: bb39];
    }

    bb15: {
        _62 = const false;
        _35 = &mut _3;
        _37 = const "Buffers";
        _36 = <str as ToOwned>::to_owned(_37) -> [return: bb16, unwind: bb29];
    }

    bb16: {
        _61 = const true;
        _40 = (_4.5: u64);
        _41 = CheckedMul(_40, _8);
        assert(!move (_41.1: bool), "attempt to compute `{} * {}`, which would overflow", move _40, _8) -> [success: bb17, unwind: bb37];
    }

    bb17: {
        _39 = move (_41.0: u64);
        _38 = bytesize::ByteSize::b(move _39) -> [return: bb18, unwind: bb37];
    }

    bb18: {
        _61 = const false;
        _34 = std::collections::BTreeMap::<String, bytesize::ByteSize>::insert(move _35, move _36, move _38) -> [return: bb19, unwind: bb37];
    }

    bb19: {
        _61 = const false;
        _43 = &mut _3;
        _45 = const "SwapTotal";
        _44 = <str as ToOwned>::to_owned(_45) -> [return: bb20, unwind: bb29];
    }

    bb20: {
        _60 = const true;
        _48 = (_4.6: u64);
        _49 = CheckedMul(_48, _8);
        assert(!move (_49.1: bool), "attempt to compute `{} * {}`, which would overflow", move _48, _8) -> [success: bb21, unwind: bb35];
    }

    bb21: {
        _47 = move (_49.0: u64);
        _46 = bytesize::ByteSize::b(move _47) -> [return: bb22, unwind: bb35];
    }

    bb22: {
        _60 = const false;
        _42 = std::collections::BTreeMap::<String, bytesize::ByteSize>::insert(move _43, move _44, move _46) -> [return: bb23, unwind: bb35];
    }

    bb23: {
        _60 = const false;
        _51 = &mut _3;
        _53 = const "SwapFree";
        _52 = <str as ToOwned>::to_owned(_53) -> [return: bb24, unwind: bb29];
    }

    bb24: {
        _59 = const true;
        _56 = (_4.7: u64);
        _57 = CheckedMul(_56, _8);
        assert(!move (_57.1: bool), "attempt to compute `{} * {}`, which would overflow", move _56, _8) -> [success: bb25, unwind: bb33];
    }

    bb25: {
        _55 = move (_57.0: u64);
        _54 = bytesize::ByteSize::b(move _55) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        _59 = const false;
        _50 = std::collections::BTreeMap::<String, bytesize::ByteSize>::insert(move _51, move _52, move _54) -> [return: bb27, unwind: bb33];
    }

    bb27: {
        _59 = const false;
        _58 = move _3;
        _0 = Result::<std::collections::BTreeMap<String, bytesize::ByteSize>, std::io::Error>::Ok(move _58);
        drop(_2) -> [return: bb28, unwind continue];
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        drop(_3) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_2) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32 (cleanup): {
        drop(_52) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_59) -> [0: bb29, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_44) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_60) -> [0: bb29, otherwise: bb34];
    }

    bb36 (cleanup): {
        drop(_36) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_61) -> [0: bb29, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_28) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_62) -> [0: bb29, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_20) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_63) -> [0: bb29, otherwise: bb40];
    }

    bb42 (cleanup): {
        drop(_12) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_64) -> [0: bb29, otherwise: bb42];
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::memory::{closure#1}(_1: {closure@src/platform/linux.rs:573:18: 573:27}, _2: std::collections::BTreeMap<String, bytesize::ByteSize>) -> data::Memory {
    debug meminfo => _2;
    let mut _0: data::Memory;
    let mut _3: bytesize::ByteSize;
    let mut _4: std::option::Option<bytesize::ByteSize>;
    let mut _5: std::option::Option<&bytesize::ByteSize>;
    let mut _6: &std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let _7: &str;
    let mut _8: bytesize::ByteSize;
    let mut _9: bytesize::ByteSize;
    let mut _10: bytesize::ByteSize;
    let mut _11: bytesize::ByteSize;
    let mut _12: bytesize::ByteSize;
    let mut _13: bytesize::ByteSize;
    let mut _14: std::option::Option<bytesize::ByteSize>;
    let mut _15: std::option::Option<&bytesize::ByteSize>;
    let mut _16: &std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let _17: &str;
    let mut _18: bytesize::ByteSize;
    let mut _19: bytesize::ByteSize;
    let mut _20: std::option::Option<bytesize::ByteSize>;
    let mut _21: std::option::Option<&bytesize::ByteSize>;
    let mut _22: &std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let _23: &str;
    let mut _24: bytesize::ByteSize;
    let mut _25: bytesize::ByteSize;
    let mut _26: std::option::Option<bytesize::ByteSize>;
    let mut _27: std::option::Option<&bytesize::ByteSize>;
    let mut _28: &std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let _29: &str;
    let mut _30: bytesize::ByteSize;
    let mut _31: bytesize::ByteSize;
    let mut _32: std::option::Option<bytesize::ByteSize>;
    let mut _33: std::option::Option<&bytesize::ByteSize>;
    let mut _34: &std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let _35: &str;
    let mut _36: bytesize::ByteSize;
    let mut _37: bytesize::ByteSize;
    let mut _38: std::option::Option<bytesize::ByteSize>;
    let mut _39: std::option::Option<&bytesize::ByteSize>;
    let mut _40: &std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let _41: &str;
    let mut _42: bytesize::ByteSize;
    let mut _43: data::PlatformMemory;
    let mut _44: std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;

    bb0: {
        _6 = &_2;
        _7 = const "MemTotal";
        _5 = std::collections::BTreeMap::<String, bytesize::ByteSize>::get::<str>(move _6, _7) -> [return: bb1, unwind: bb29];
    }

    bb1: {
        _4 = Option::<&bytesize::ByteSize>::map::<bytesize::ByteSize, {closure@src/platform/linux.rs:576:26: 576:29}>(move _5, const ZeroSized: {closure@src/platform/linux.rs:576:26: 576:29}) -> [return: bb2, unwind: bb29];
    }

    bb2: {
        _8 = bytesize::ByteSize::b(const 0_u64) -> [return: bb3, unwind: bb29];
    }

    bb3: {
        _3 = Option::<bytesize::ByteSize>::unwrap_or(move _4, move _8) -> [return: bb4, unwind: bb29];
    }

    bb4: {
        _16 = &_2;
        _17 = const "MemFree";
        _15 = std::collections::BTreeMap::<String, bytesize::ByteSize>::get::<str>(move _16, _17) -> [return: bb5, unwind: bb29];
    }

    bb5: {
        _14 = Option::<&bytesize::ByteSize>::map::<bytesize::ByteSize, {closure@src/platform/linux.rs:581:30: 581:33}>(move _15, const ZeroSized: {closure@src/platform/linux.rs:581:30: 581:33}) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        _18 = bytesize::ByteSize::b(const 0_u64) -> [return: bb7, unwind: bb29];
    }

    bb7: {
        _13 = Option::<bytesize::ByteSize>::unwrap_or(move _14, move _18) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        _22 = &_2;
        _23 = const "Buffers";
        _21 = std::collections::BTreeMap::<String, bytesize::ByteSize>::get::<str>(move _22, _23) -> [return: bb9, unwind: bb29];
    }

    bb9: {
        _20 = Option::<&bytesize::ByteSize>::map::<bytesize::ByteSize, {closure@src/platform/linux.rs:585:34: 585:37}>(move _21, const ZeroSized: {closure@src/platform/linux.rs:585:34: 585:37}) -> [return: bb10, unwind: bb29];
    }

    bb10: {
        _24 = bytesize::ByteSize::b(const 0_u64) -> [return: bb11, unwind: bb29];
    }

    bb11: {
        _19 = Option::<bytesize::ByteSize>::unwrap_or(move _20, move _24) -> [return: bb12, unwind: bb29];
    }

    bb12: {
        _12 = <bytesize::ByteSize as Add>::add(move _13, move _19) -> [return: bb13, unwind: bb29];
    }

    bb13: {
        _28 = &_2;
        _29 = const "Cached";
        _27 = std::collections::BTreeMap::<String, bytesize::ByteSize>::get::<str>(move _28, _29) -> [return: bb14, unwind: bb29];
    }

    bb14: {
        _26 = Option::<&bytesize::ByteSize>::map::<bytesize::ByteSize, {closure@src/platform/linux.rs:589:34: 589:37}>(move _27, const ZeroSized: {closure@src/platform/linux.rs:589:34: 589:37}) -> [return: bb15, unwind: bb29];
    }

    bb15: {
        _30 = bytesize::ByteSize::b(const 0_u64) -> [return: bb16, unwind: bb29];
    }

    bb16: {
        _25 = Option::<bytesize::ByteSize>::unwrap_or(move _26, move _30) -> [return: bb17, unwind: bb29];
    }

    bb17: {
        _11 = <bytesize::ByteSize as Add>::add(move _12, move _25) -> [return: bb18, unwind: bb29];
    }

    bb18: {
        _34 = &_2;
        _35 = const "SReclaimable";
        _33 = std::collections::BTreeMap::<String, bytesize::ByteSize>::get::<str>(move _34, _35) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        _32 = Option::<&bytesize::ByteSize>::map::<bytesize::ByteSize, {closure@src/platform/linux.rs:593:34: 593:37}>(move _33, const ZeroSized: {closure@src/platform/linux.rs:593:34: 593:37}) -> [return: bb20, unwind: bb29];
    }

    bb20: {
        _36 = bytesize::ByteSize::b(const 0_u64) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        _31 = Option::<bytesize::ByteSize>::unwrap_or(move _32, move _36) -> [return: bb22, unwind: bb29];
    }

    bb22: {
        _10 = <bytesize::ByteSize as Add>::add(move _11, move _31) -> [return: bb23, unwind: bb29];
    }

    bb23: {
        _40 = &_2;
        _41 = const "Shmem";
        _39 = std::collections::BTreeMap::<String, bytesize::ByteSize>::get::<str>(move _40, _41) -> [return: bb24, unwind: bb29];
    }

    bb24: {
        _38 = Option::<&bytesize::ByteSize>::map::<bytesize::ByteSize, {closure@src/platform/linux.rs:597:30: 597:33}>(move _39, const ZeroSized: {closure@src/platform/linux.rs:597:30: 597:33}) -> [return: bb25, unwind: bb29];
    }

    bb25: {
        _42 = bytesize::ByteSize::b(const 0_u64) -> [return: bb26, unwind: bb29];
    }

    bb26: {
        _37 = Option::<bytesize::ByteSize>::unwrap_or(move _38, move _42) -> [return: bb27, unwind: bb29];
    }

    bb27: {
        _9 = data::saturating_sub_bytes(move _10, move _37) -> [return: bb28, unwind: bb29];
    }

    bb28: {
        _44 = move _2;
        _43 = data::PlatformMemory { meminfo: move _44 };
        _0 = data::Memory { total: move _3, free: move _9, platform_memory: move _43 };
        return;
    }

    bb29 (cleanup): {
        drop(_2) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::memory::{closure#1}::{closure#0}(_1: {closure@src/platform/linux.rs:576:26: 576:29}, _2: &bytesize::ByteSize) -> bytesize::ByteSize {
    debug x => _2;
    let mut _0: bytesize::ByteSize;

    bb0: {
        _0 = <bytesize::ByteSize as Clone>::clone(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::memory::{closure#1}::{closure#1}(_1: {closure@src/platform/linux.rs:581:30: 581:33}, _2: &bytesize::ByteSize) -> bytesize::ByteSize {
    debug x => _2;
    let mut _0: bytesize::ByteSize;

    bb0: {
        _0 = <bytesize::ByteSize as Clone>::clone(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::memory::{closure#1}::{closure#2}(_1: {closure@src/platform/linux.rs:585:34: 585:37}, _2: &bytesize::ByteSize) -> bytesize::ByteSize {
    debug x => _2;
    let mut _0: bytesize::ByteSize;

    bb0: {
        _0 = <bytesize::ByteSize as Clone>::clone(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::memory::{closure#1}::{closure#3}(_1: {closure@src/platform/linux.rs:589:34: 589:37}, _2: &bytesize::ByteSize) -> bytesize::ByteSize {
    debug x => _2;
    let mut _0: bytesize::ByteSize;

    bb0: {
        _0 = <bytesize::ByteSize as Clone>::clone(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::memory::{closure#1}::{closure#4}(_1: {closure@src/platform/linux.rs:593:34: 593:37}, _2: &bytesize::ByteSize) -> bytesize::ByteSize {
    debug x => _2;
    let mut _0: bytesize::ByteSize;

    bb0: {
        _0 = <bytesize::ByteSize as Clone>::clone(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::memory::{closure#1}::{closure#5}(_1: {closure@src/platform/linux.rs:597:30: 597:33}, _2: &bytesize::ByteSize) -> bytesize::ByteSize {
    debug x => _2;
    let mut _0: bytesize::ByteSize;

    bb0: {
        _0 = <bytesize::ByteSize as Clone>::clone(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::uptime(_1: &PlatformImpl) -> Result<std::time::Duration, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::time::Duration, std::io::Error>;
    let mut _2: platform::linux::sysinfo;
    let _3: ();
    let mut _4: *mut platform::linux::sysinfo;
    let mut _5: &mut platform::linux::sysinfo;
    let mut _6: std::time::Duration;
    let mut _7: u64;
    let mut _8: i64;
    scope 1 {
        debug info => _2;
        scope 3 {
        }
    }
    scope 2 {
    }

    bb0: {
        _2 = zeroed::<platform::linux::sysinfo>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &mut _2;
        _4 = &raw mut (*_5);
        _3 = platform::linux::sysinfo(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = (_2.0: i64);
        _7 = move _8 as u64 (IntToInt);
        _6 = std::time::Duration::from_secs(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = Result::<std::time::Duration, std::io::Error>::Ok(move _6);
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::boot_time(_1: &PlatformImpl) -> Result<chrono::DateTime<chrono::Utc>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<chrono::DateTime<chrono::Utc>, std::io::Error>;
    let mut _2: std::result::Result<std::string::String, std::io::Error>;
    let _3: &str;

    bb0: {
        _3 = const "/proc/stat";
        _2 = read_file(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<String, std::io::Error>::and_then::<chrono::DateTime<chrono::Utc>, {closure@src/platform/linux.rs:611:42: 611:48}>(move _2, const ZeroSized: {closure@src/platform/linux.rs:611:42: 611:48}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::boot_time::{closure#0}(_1: {closure@src/platform/linux.rs:611:42: 611:48}, _2: String) -> Result<chrono::DateTime<chrono::Utc>, std::io::Error> {
    debug data => _2;
    let mut _0: std::result::Result<chrono::DateTime<chrono::Utc>, std::io::Error>;
    let mut _3: std::result::Result<&str, std::io::Error>;
    let mut _4: std::option::Option<&str>;
    let mut _5: &mut std::str::Lines<'_>;
    let mut _6: std::str::Lines<'_>;
    let _7: &str;
    let mut _8: &std::string::String;
    let mut _9: std::io::Error;
    let mut _10: std::io::ErrorKind;

    bb0: {
        _8 = &_2;
        _7 = <String as Deref>::deref(move _8) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _6 = core::str::<impl str>::lines(_7) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _5 = &mut _6;
        _4 = <std::str::Lines<'_> as Iterator>::find::<{closure@src/platform/linux.rs:613:23: 613:29}>(move _5, const ZeroSized: {closure@src/platform/linux.rs:613:23: 613:29}) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _10 = InvalidData;
        _9 = std::io::Error::new::<&str>(move _10, const "Could not find btime in /proc/stat") -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _3 = Option::<&str>::ok_or::<std::io::Error>(move _4, move _9) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _0 = Result::<&str, std::io::Error>::and_then::<chrono::DateTime<chrono::Utc>, {closure@src/platform/linux.rs:617:27: 617:33}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:617:27: 617:33}) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::boot_time::{closure#0}::{closure#0}(_1: &mut {closure@src/platform/linux.rs:613:23: 613:29}, _2: &&str) -> bool {
    debug line => _2;
    let mut _0: bool;
    let mut _3: &str;

    bb0: {
        _3 = deref_copy (*_2);
        _0 = core::str::<impl str>::starts_with::<'_, &str>(_3, const "btime ") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::boot_time::{closure#0}::{closure#1}(_1: {closure@src/platform/linux.rs:617:27: 617:33}, _2: &str) -> Result<chrono::DateTime<chrono::Utc>, std::io::Error> {
    debug line => _2;
    let mut _0: std::result::Result<chrono::DateTime<chrono::Utc>, std::io::Error>;
    let mut _3: std::result::Result<chrono::DateTime<chrono::Utc>, chrono::ParseError>;
    let _4: &str;
    let mut _5: &chrono::Utc;

    bb0: {
        _5 = const _;
        _4 = const "btime %s";
        _3 = <chrono::Utc as chrono::TimeZone>::datetime_from_str(_5, _2, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<chrono::DateTime<chrono::Utc>, chrono::ParseError>::map_err::<std::io::Error, {closure@src/platform/linux.rs:619:31: 619:36}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:619:31: 619:36}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::boot_time::{closure#0}::{closure#1}: &chrono::Utc = {
    let mut _0: &chrono::Utc;
    let mut _1: chrono::Utc;

    bb0: {
        _1 = chrono::Utc;
        _0 = &_1;
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::boot_time::{closure#0}::{closure#1}::{closure#0}(_1: {closure@src/platform/linux.rs:619:31: 619:36}, _2: chrono::ParseError) -> std::io::Error {
    debug err => _2;
    let mut _0: std::io::Error;
    let mut _3: std::io::ErrorKind;
    let mut _4: std::string::String;
    let mut _5: &chrono::ParseError;

    bb0: {
        _3 = InvalidData;
        _5 = &_2;
        _4 = <chrono::ParseError as ToString>::to_string(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::io::Error::new::<String>(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::battery_life(_1: &PlatformImpl) -> Result<data::BatteryLife, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<data::BatteryLife, std::io::Error>;
    let _2: &str;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::ReadDir>;
    let mut _5: std::result::Result<std::fs::ReadDir, std::io::Error>;
    let mut _6: &&str;
    let mut _7: isize;
    let mut _13: std::fs::ReadDir;
    let mut _14: std::fs::ReadDir;
    let mut _16: std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>;
    let mut _17: &mut std::fs::ReadDir;
    let mut _18: isize;
    let mut _21: &std::fs::DirEntry;
    let _22: std::fs::DirEntry;
    let mut _24: std::option::Option<&str>;
    let _25: &std::path::Path;
    let mut _26: &std::path::PathBuf;
    let mut _27: bool;
    let mut _28: std::result::Result<bool, std::io::Error>;
    let mut _29: std::result::Result<std::string::String, std::io::Error>;
    let _30: &str;
    let _31: &std::string::String;
    let _32: std::string::String;
    let mut _33: std::string::String;
    let mut _34: &str;
    let _35: &str;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, i32>;
    let mut _37: std::result::Result<i32, std::io::Error>;
    let mut _38: std::result::Result<i32, std::io::Error>;
    let _39: &str;
    let _40: &std::string::String;
    let _41: std::string::String;
    let mut _42: std::string::String;
    let mut _43: &str;
    let _44: &str;
    let mut _45: {closure@src/platform/linux.rs:634:34: 634:37};
    let mut _46: &&str;
    let mut _47: isize;
    let mut _50: (i32, bool);
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, i32>;
    let mut _52: std::result::Result<i32, std::io::Error>;
    let mut _53: std::result::Result<i32, std::io::Error>;
    let _54: &str;
    let _55: &std::string::String;
    let _56: std::string::String;
    let mut _57: std::string::String;
    let mut _58: &str;
    let _59: &str;
    let mut _60: {closure@src/platform/linux.rs:636:34: 636:37};
    let mut _61: &&str;
    let mut _62: isize;
    let mut _65: (i32, bool);
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, i32>;
    let mut _67: std::result::Result<i32, std::io::Error>;
    let mut _68: std::result::Result<i32, std::io::Error>;
    let _69: &str;
    let _70: &std::string::String;
    let _71: std::string::String;
    let mut _72: std::string::String;
    let mut _73: &str;
    let _74: &str;
    let mut _75: {closure@src/platform/linux.rs:638:34: 638:37};
    let mut _76: &&str;
    let mut _77: isize;
    let mut _80: (i32, bool);
    let mut _81: i32;
    let mut _83: std::result::Result<bool, std::io::Error>;
    let mut _84: isize;
    let mut _85: data::BatteryLife;
    let mut _86: f32;
    let mut _87: i32;
    let mut _88: i32;
    let mut _89: std::time::Duration;
    let mut _90: bool;
    let mut _91: i32;
    let mut _92: i32;
    let mut _93: i32;
    let mut _94: std::io::Error;
    let mut _95: std::io::ErrorKind;
    let mut _96: bool;
    let mut _97: bool;
    scope 1 {
        debug dir => const "/sys/class/power_supply";
        let _3: std::fs::ReadDir;
        let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _9: std::fs::ReadDir;
        scope 2 {
            debug entries => _3;
            let mut _10: i32;
            scope 7 {
                debug full => _10;
                let mut _11: i32;
                scope 8 {
                    debug now => _11;
                    let mut _12: i32;
                    scope 9 {
                        debug current => _12;
                        let mut _15: std::fs::ReadDir;
                        let _82: bool;
                        scope 10 {
                            debug iter => _15;
                            let _19: std::result::Result<std::fs::DirEntry, std::io::Error>;
                            scope 11 {
                                debug e => _19;
                                let _20: std::path::PathBuf;
                                scope 12 {
                                    debug p => _20;
                                    let _23: &str;
                                    scope 13 {
                                        debug s => _23;
                                        let _48: std::result::Result<std::convert::Infallible, std::io::Error>;
                                        let _49: i32;
                                        let _63: std::result::Result<std::convert::Infallible, std::io::Error>;
                                        let _64: i32;
                                        let _78: std::result::Result<std::convert::Infallible, std::io::Error>;
                                        let _79: i32;
                                        scope 14 {
                                            debug residual => _48;
                                            scope 15 {
                                            }
                                        }
                                        scope 16 {
                                            debug val => _49;
                                            scope 17 {
                                            }
                                        }
                                        scope 18 {
                                            debug residual => _63;
                                            scope 19 {
                                            }
                                        }
                                        scope 20 {
                                            debug val => _64;
                                            scope 21 {
                                            }
                                        }
                                        scope 22 {
                                            debug residual => _78;
                                            scope 23 {
                                            }
                                        }
                                        scope 24 {
                                            debug val => _79;
                                            scope 25 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 26 {
                            debug on_ac => _82;
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _8;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _9;
            scope 6 {
            }
        }
    }

    bb0: {
        _96 = const false;
        _2 = const "/sys/class/power_supply";
        _6 = &_2;
        _5 = read_dir::<&&str>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<ReadDir, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_4 as Continue).0: std::fs::ReadDir);
        _96 = const true;
        _3 = move _9;
        _10 = const 0_i32;
        _11 = const 0_i32;
        _12 = const 0_i32;
        _96 = const false;
        _14 = move _3;
        _13 = <ReadDir as IntoIterator>::into_iter(move _14) -> [return: bb6, unwind: bb84];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::BatteryLife, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb73, unwind continue];
    }

    bb6: {
        _15 = move _13;
        goto -> bb7;
    }

    bb7: {
        _17 = &mut _15;
        _16 = <ReadDir as Iterator>::next(_17) -> [return: bb8, unwind: bb81];
    }

    bb8: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb10, 1: bb9, otherwise: bb4];
    }

    bb9: {
        _19 = move ((_16 as Some).0: std::result::Result<std::fs::DirEntry, std::io::Error>);
        _22 = Result::<DirEntry, std::io::Error>::unwrap(move _19) -> [return: bb11, unwind: bb81];
    }

    bb10: {
        drop(_15) -> [return: bb59, unwind: bb84];
    }

    bb11: {
        _21 = &_22;
        _20 = DirEntry::path(move _21) -> [return: bb12, unwind: bb80];
    }

    bb12: {
        drop(_22) -> [return: bb13, unwind: bb79];
    }

    bb13: {
        _26 = &_20;
        _25 = <PathBuf as Deref>::deref(move _26) -> [return: bb14, unwind: bb79];
    }

    bb14: {
        _24 = Path::to_str(_25) -> [return: bb15, unwind: bb79];
    }

    bb15: {
        _23 = Option::<&str>::unwrap(move _24) -> [return: bb16, unwind: bb79];
    }

    bb16: {
        _34 = _23;
        _33 = <str as ToString>::to_string(move _34) -> [return: bb17, unwind: bb79];
    }

    bb17: {
        _35 = const "/type";
        _32 = <String as Add<&str>>::add(move _33, _35) -> [return: bb18, unwind: bb79];
    }

    bb18: {
        _31 = &_32;
        _30 = <String as Deref>::deref(_31) -> [return: bb19, unwind: bb78];
    }

    bb19: {
        _29 = value_from_file::<String>(_30) -> [return: bb20, unwind: bb78];
    }

    bb20: {
        _28 = Result::<String, std::io::Error>::map::<bool, {closure@src/platform/linux.rs:632:74: 632:77}>(move _29, const ZeroSized: {closure@src/platform/linux.rs:632:74: 632:77}) -> [return: bb21, unwind: bb78];
    }

    bb21: {
        _27 = Result::<bool, std::io::Error>::unwrap_or(move _28, const false) -> [return: bb22, unwind: bb78];
    }

    bb22: {
        switchInt(move _27) -> [0: bb57, otherwise: bb23];
    }

    bb23: {
        drop(_32) -> [return: bb24, unwind: bb79];
    }

    bb24: {
        _43 = _23;
        _42 = <str as ToString>::to_string(move _43) -> [return: bb25, unwind: bb79];
    }

    bb25: {
        _44 = const "/energy_full";
        _41 = <String as Add<&str>>::add(move _42, _44) -> [return: bb26, unwind: bb79];
    }

    bb26: {
        _40 = &_41;
        _39 = <String as Deref>::deref(_40) -> [return: bb27, unwind: bb77];
    }

    bb27: {
        _38 = value_from_file::<i32>(_39) -> [return: bb28, unwind: bb77];
    }

    bb28: {
        _46 = &_23;
        _45 = {closure@src/platform/linux.rs:634:34: 634:37} { s: move _46 };
        _37 = Result::<i32, std::io::Error>::or_else::<std::io::Error, {closure@src/platform/linux.rs:634:34: 634:37}>(move _38, move _45) -> [return: bb29, unwind: bb77];
    }

    bb29: {
        _36 = <Result<i32, std::io::Error> as Try>::branch(move _37) -> [return: bb30, unwind: bb77];
    }

    bb30: {
        _47 = discriminant(_36);
        switchInt(move _47) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        _49 = ((_36 as Continue).0: i32);
        _50 = CheckedAdd(_10, _49);
        assert(!move (_50.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, _49) -> [success: bb34, unwind: bb77];
    }

    bb32: {
        _48 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::BatteryLife, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _48) -> [return: bb33, unwind: bb77];
    }

    bb33: {
        drop(_41) -> [return: bb71, unwind: bb79];
    }

    bb34: {
        _10 = move (_50.0: i32);
        drop(_41) -> [return: bb35, unwind: bb79];
    }

    bb35: {
        _58 = _23;
        _57 = <str as ToString>::to_string(move _58) -> [return: bb36, unwind: bb79];
    }

    bb36: {
        _59 = const "/energy_now";
        _56 = <String as Add<&str>>::add(move _57, _59) -> [return: bb37, unwind: bb79];
    }

    bb37: {
        _55 = &_56;
        _54 = <String as Deref>::deref(_55) -> [return: bb38, unwind: bb76];
    }

    bb38: {
        _53 = value_from_file::<i32>(_54) -> [return: bb39, unwind: bb76];
    }

    bb39: {
        _61 = &_23;
        _60 = {closure@src/platform/linux.rs:636:34: 636:37} { s: move _61 };
        _52 = Result::<i32, std::io::Error>::or_else::<std::io::Error, {closure@src/platform/linux.rs:636:34: 636:37}>(move _53, move _60) -> [return: bb40, unwind: bb76];
    }

    bb40: {
        _51 = <Result<i32, std::io::Error> as Try>::branch(move _52) -> [return: bb41, unwind: bb76];
    }

    bb41: {
        _62 = discriminant(_51);
        switchInt(move _62) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        _64 = ((_51 as Continue).0: i32);
        _65 = CheckedAdd(_11, _64);
        assert(!move (_65.1: bool), "attempt to compute `{} + {}`, which would overflow", _11, _64) -> [success: bb45, unwind: bb76];
    }

    bb43: {
        _63 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::BatteryLife, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _63) -> [return: bb44, unwind: bb76];
    }

    bb44: {
        drop(_56) -> [return: bb71, unwind: bb79];
    }

    bb45: {
        _11 = move (_65.0: i32);
        drop(_56) -> [return: bb46, unwind: bb79];
    }

    bb46: {
        _73 = _23;
        _72 = <str as ToString>::to_string(move _73) -> [return: bb47, unwind: bb79];
    }

    bb47: {
        _74 = const "/power_now";
        _71 = <String as Add<&str>>::add(move _72, _74) -> [return: bb48, unwind: bb79];
    }

    bb48: {
        _70 = &_71;
        _69 = <String as Deref>::deref(_70) -> [return: bb49, unwind: bb75];
    }

    bb49: {
        _68 = value_from_file::<i32>(_69) -> [return: bb50, unwind: bb75];
    }

    bb50: {
        _76 = &_23;
        _75 = {closure@src/platform/linux.rs:638:34: 638:37} { s: move _76 };
        _67 = Result::<i32, std::io::Error>::or_else::<std::io::Error, {closure@src/platform/linux.rs:638:34: 638:37}>(move _68, move _75) -> [return: bb51, unwind: bb75];
    }

    bb51: {
        _66 = <Result<i32, std::io::Error> as Try>::branch(move _67) -> [return: bb52, unwind: bb75];
    }

    bb52: {
        _77 = discriminant(_66);
        switchInt(move _77) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        _79 = ((_66 as Continue).0: i32);
        _80 = CheckedAdd(_12, _79);
        assert(!move (_80.1: bool), "attempt to compute `{} + {}`, which would overflow", _12, _79) -> [success: bb56, unwind: bb75];
    }

    bb54: {
        _78 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::BatteryLife, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _78) -> [return: bb55, unwind: bb75];
    }

    bb55: {
        drop(_71) -> [return: bb71, unwind: bb79];
    }

    bb56: {
        _12 = move (_80.0: i32);
        drop(_71) -> [return: bb58, unwind: bb79];
    }

    bb57: {
        drop(_32) -> [return: bb58, unwind: bb79];
    }

    bb58: {
        drop(_20) -> [return: bb7, unwind: bb81];
    }

    bb59: {
        _81 = _10;
        switchInt(move _81) -> [0: bb68, otherwise: bb60];
    }

    bb60: {
        _83 = <PlatformImpl as common::Platform>::on_ac_power(_1) -> [return: bb61, unwind: bb84];
    }

    bb61: {
        _84 = discriminant(_83);
        switchInt(move _84) -> [0: bb62, otherwise: bb63];
    }

    bb62: {
        StorageLive(_97);
        _97 = ((_83 as Ok).0: bool);
        _82 = _97;
        StorageDead(_97);
        goto -> bb64;
    }

    bb63: {
        _82 = const false;
        goto -> bb64;
    }

    bb64: {
        drop(_83) -> [return: bb65, unwind: bb84];
    }

    bb65: {
        _87 = _10;
        _88 = _11;
        _86 = capacity(move _87, move _88) -> [return: bb66, unwind: bb84];
    }

    bb66: {
        _90 = _82;
        _91 = _10;
        _92 = _11;
        _93 = _12;
        _89 = platform::linux::time(move _90, move _91, move _92, move _93) -> [return: bb67, unwind: bb84];
    }

    bb67: {
        _85 = data::BatteryLife { remaining_capacity: move _86, remaining_time: move _89 };
        _0 = Result::<data::BatteryLife, std::io::Error>::Ok(move _85);
        goto -> bb70;
    }

    bb68: {
        _95 = Other;
        _94 = std::io::Error::new::<&str>(move _95, const "Missing battery information") -> [return: bb69, unwind: bb84];
    }

    bb69: {
        _0 = Result::<data::BatteryLife, std::io::Error>::Err(move _94);
        goto -> bb70;
    }

    bb70: {
        _96 = const false;
        goto -> bb74;
    }

    bb71: {
        drop(_20) -> [return: bb72, unwind: bb81];
    }

    bb72: {
        drop(_15) -> [return: bb73, unwind: bb84];
    }

    bb73: {
        _96 = const false;
        goto -> bb74;
    }

    bb74: {
        return;
    }

    bb75 (cleanup): {
        drop(_71) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_56) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_41) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_32) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_20) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_22) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_15) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        resume;
    }

    bb83 (cleanup): {
        drop(_3) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        switchInt(_96) -> [0: bb82, otherwise: bb83];
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::battery_life::{closure#0}(_1: {closure@src/platform/linux.rs:632:74: 632:77}, _2: String) -> bool {
    debug t => _2;
    let mut _0: bool;
    let mut _3: &std::string::String;
    let mut _4: &&str;

    bb0: {
        _3 = &_2;
        _4 = const _;
        _0 = <String as PartialEq<&str>>::eq(move _3, _4) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

promoted[0] in platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::battery_life::{closure#0}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Battery";
        _0 = &_1;
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::battery_life::{closure#1}(_1: {closure@src/platform/linux.rs:634:34: 634:37}, _2: std::io::Error) -> Result<i32, std::io::Error> {
    debug s => (*(_1.0: &&str));
    let mut _0: std::result::Result<i32, std::io::Error>;
    let _3: &str;
    let _4: &std::string::String;
    let _5: std::string::String;
    let mut _6: std::string::String;
    let _7: &str;
    let mut _8: &&str;
    let mut _9: &str;

    bb0: {
        _8 = deref_copy (_1.0: &&str);
        _9 = deref_copy (*_8);
        _6 = <str as ToString>::to_string(_9) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _7 = const "/charge_full";
        _5 = <String as Add<&str>>::add(move _6, _7) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _4 = &_5;
        _3 = <String as Deref>::deref(_4) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _0 = value_from_file::<i32>(_3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_5) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::battery_life::{closure#2}(_1: {closure@src/platform/linux.rs:636:34: 636:37}, _2: std::io::Error) -> Result<i32, std::io::Error> {
    debug s => (*(_1.0: &&str));
    let mut _0: std::result::Result<i32, std::io::Error>;
    let _3: &str;
    let _4: &std::string::String;
    let _5: std::string::String;
    let mut _6: std::string::String;
    let _7: &str;
    let mut _8: &&str;
    let mut _9: &str;

    bb0: {
        _8 = deref_copy (_1.0: &&str);
        _9 = deref_copy (*_8);
        _6 = <str as ToString>::to_string(_9) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _7 = const "/charge_now";
        _5 = <String as Add<&str>>::add(move _6, _7) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _4 = &_5;
        _3 = <String as Deref>::deref(_4) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _0 = value_from_file::<i32>(_3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_5) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::battery_life::{closure#3}(_1: {closure@src/platform/linux.rs:638:34: 638:37}, _2: std::io::Error) -> Result<i32, std::io::Error> {
    debug s => (*(_1.0: &&str));
    let mut _0: std::result::Result<i32, std::io::Error>;
    let _3: &str;
    let _4: &std::string::String;
    let _5: std::string::String;
    let mut _6: std::string::String;
    let _7: &str;
    let mut _8: &&str;
    let mut _9: &str;

    bb0: {
        _8 = deref_copy (_1.0: &&str);
        _9 = deref_copy (*_8);
        _6 = <str as ToString>::to_string(_9) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _7 = const "/current_now";
        _5 = <String as Add<&str>>::add(move _6, _7) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _4 = &_5;
        _3 = <String as Deref>::deref(_4) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _0 = value_from_file::<i32>(_3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_5) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::on_ac_power(_1: &PlatformImpl) -> Result<bool, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<bool, std::io::Error>;
    let _2: &str;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::fs::ReadDir>;
    let mut _5: std::result::Result<std::fs::ReadDir, std::io::Error>;
    let mut _6: &&str;
    let mut _7: isize;
    let mut _11: std::fs::ReadDir;
    let mut _12: std::fs::ReadDir;
    let mut _14: std::option::Option<std::result::Result<std::fs::DirEntry, std::io::Error>>;
    let mut _15: &mut std::fs::ReadDir;
    let mut _16: isize;
    let mut _19: &std::fs::DirEntry;
    let _20: std::fs::DirEntry;
    let mut _22: std::option::Option<&str>;
    let _23: &std::path::Path;
    let mut _24: &std::path::PathBuf;
    let mut _25: bool;
    let mut _26: std::result::Result<bool, std::io::Error>;
    let mut _27: std::result::Result<std::string::String, std::io::Error>;
    let _28: &str;
    let _29: &std::string::String;
    let _30: std::string::String;
    let mut _31: std::string::String;
    let _32: &str;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, bool>;
    let mut _34: std::result::Result<bool, std::io::Error>;
    let mut _35: std::result::Result<i32, std::io::Error>;
    let _36: &str;
    let _37: &std::string::String;
    let _38: std::string::String;
    let mut _39: std::string::String;
    let _40: &str;
    let mut _41: isize;
    let mut _44: bool;
    let mut _45: bool;
    scope 1 {
        debug dir => const "/sys/class/power_supply";
        let _3: std::fs::ReadDir;
        let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _9: std::fs::ReadDir;
        scope 2 {
            debug entries => _3;
            let mut _10: bool;
            scope 7 {
                debug on_ac => _10;
                let mut _13: std::fs::ReadDir;
                scope 8 {
                    debug iter => _13;
                    let _17: std::result::Result<std::fs::DirEntry, std::io::Error>;
                    scope 9 {
                        debug e => _17;
                        let _18: std::path::PathBuf;
                        scope 10 {
                            debug p => _18;
                            let _21: &str;
                            scope 11 {
                                debug s => _21;
                                let _42: std::result::Result<std::convert::Infallible, std::io::Error>;
                                let _43: bool;
                                scope 12 {
                                    debug residual => _42;
                                    scope 13 {
                                    }
                                }
                                scope 14 {
                                    debug val => _43;
                                    scope 15 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _8;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _9;
            scope 6 {
            }
        }
    }

    bb0: {
        _45 = const false;
        _2 = const "/sys/class/power_supply";
        _6 = &_2;
        _5 = read_dir::<&&str>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Result<ReadDir, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _9 = move ((_4 as Continue).0: std::fs::ReadDir);
        _45 = const true;
        _3 = move _9;
        _10 = const false;
        _45 = const false;
        _12 = move _3;
        _11 = <ReadDir as IntoIterator>::into_iter(move _12) -> [return: bb6, unwind: bb48];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<bool, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _8) -> [return: bb39, unwind continue];
    }

    bb6: {
        _13 = move _11;
        goto -> bb7;
    }

    bb7: {
        _15 = &mut _13;
        _14 = <ReadDir as Iterator>::next(_15) -> [return: bb8, unwind: bb45];
    }

    bb8: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb9, otherwise: bb4];
    }

    bb9: {
        _17 = move ((_14 as Some).0: std::result::Result<std::fs::DirEntry, std::io::Error>);
        _20 = Result::<DirEntry, std::io::Error>::unwrap(move _17) -> [return: bb11, unwind: bb45];
    }

    bb10: {
        drop(_13) -> [return: bb36, unwind: bb48];
    }

    bb11: {
        _19 = &_20;
        _18 = DirEntry::path(move _19) -> [return: bb12, unwind: bb44];
    }

    bb12: {
        drop(_20) -> [return: bb13, unwind: bb43];
    }

    bb13: {
        _24 = &_18;
        _23 = <PathBuf as Deref>::deref(move _24) -> [return: bb14, unwind: bb43];
    }

    bb14: {
        _22 = Path::to_str(_23) -> [return: bb15, unwind: bb43];
    }

    bb15: {
        _21 = Option::<&str>::unwrap(move _22) -> [return: bb16, unwind: bb43];
    }

    bb16: {
        _31 = <str as ToString>::to_string(_21) -> [return: bb17, unwind: bb43];
    }

    bb17: {
        _32 = const "/type";
        _30 = <String as Add<&str>>::add(move _31, _32) -> [return: bb18, unwind: bb43];
    }

    bb18: {
        _29 = &_30;
        _28 = <String as Deref>::deref(_29) -> [return: bb19, unwind: bb42];
    }

    bb19: {
        _27 = value_from_file::<String>(_28) -> [return: bb20, unwind: bb42];
    }

    bb20: {
        _26 = Result::<String, std::io::Error>::map::<bool, {closure@src/platform/linux.rs:663:74: 663:77}>(move _27, const ZeroSized: {closure@src/platform/linux.rs:663:74: 663:77}) -> [return: bb21, unwind: bb42];
    }

    bb21: {
        _25 = Result::<bool, std::io::Error>::unwrap_or(move _26, const false) -> [return: bb22, unwind: bb42];
    }

    bb22: {
        switchInt(move _25) -> [0: bb34, otherwise: bb23];
    }

    bb23: {
        drop(_30) -> [return: bb24, unwind: bb43];
    }

    bb24: {
        _39 = <str as ToString>::to_string(_21) -> [return: bb25, unwind: bb43];
    }

    bb25: {
        _40 = const "/online";
        _38 = <String as Add<&str>>::add(move _39, _40) -> [return: bb26, unwind: bb43];
    }

    bb26: {
        _37 = &_38;
        _36 = <String as Deref>::deref(_37) -> [return: bb27, unwind: bb41];
    }

    bb27: {
        _35 = value_from_file::<i32>(_36) -> [return: bb28, unwind: bb41];
    }

    bb28: {
        _34 = Result::<i32, std::io::Error>::map::<bool, {closure@src/platform/linux.rs:664:83: 664:86}>(move _35, const ZeroSized: {closure@src/platform/linux.rs:664:83: 664:86}) -> [return: bb29, unwind: bb41];
    }

    bb29: {
        _33 = <Result<bool, std::io::Error> as Try>::branch(move _34) -> [return: bb30, unwind: bb41];
    }

    bb30: {
        _41 = discriminant(_33);
        switchInt(move _41) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        _43 = ((_33 as Continue).0: bool);
        _10 = BitOr(_10, _43);
        drop(_38) -> [return: bb35, unwind: bb43];
    }

    bb32: {
        _42 = move ((_33 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<bool, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _42) -> [return: bb33, unwind: bb41];
    }

    bb33: {
        drop(_38) -> [return: bb37, unwind: bb43];
    }

    bb34: {
        drop(_30) -> [return: bb35, unwind: bb43];
    }

    bb35: {
        drop(_18) -> [return: bb7, unwind: bb45];
    }

    bb36: {
        _44 = _10;
        _0 = Result::<bool, std::io::Error>::Ok(move _44);
        _45 = const false;
        goto -> bb40;
    }

    bb37: {
        drop(_18) -> [return: bb38, unwind: bb45];
    }

    bb38: {
        drop(_13) -> [return: bb39, unwind: bb48];
    }

    bb39: {
        _45 = const false;
        goto -> bb40;
    }

    bb40: {
        return;
    }

    bb41 (cleanup): {
        drop(_38) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_30) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_18) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_20) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_13) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        resume;
    }

    bb47 (cleanup): {
        drop(_3) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        switchInt(_45) -> [0: bb46, otherwise: bb47];
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::on_ac_power::{closure#0}(_1: {closure@src/platform/linux.rs:663:74: 663:77}, _2: String) -> bool {
    debug t => _2;
    let mut _0: bool;
    let mut _3: &std::string::String;
    let mut _4: &&str;

    bb0: {
        _3 = &_2;
        _4 = const _;
        _0 = <String as PartialEq<&str>>::eq(move _3, _4) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

promoted[0] in platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::on_ac_power::{closure#0}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Mains";
        _0 = &_1;
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::on_ac_power::{closure#1}(_1: {closure@src/platform/linux.rs:664:83: 664:86}, _2: i32) -> bool {
    debug v => _2;
    let mut _0: bool;

    bb0: {
        _0 = Eq(_2, const 1_i32);
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mounts(_1: &PlatformImpl) -> Result<Vec<data::Filesystem>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::vec::Vec<data::Filesystem>, std::io::Error>;
    let mut _2: std::result::Result<std::vec::Vec<platform::linux::ProcMountsData>, std::io::Error>;
    let mut _3: std::result::Result<std::string::String, std::io::Error>;
    let _4: &str;

    bb0: {
        _4 = const "/proc/mounts";
        _3 = read_file(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Result::<String, std::io::Error>::and_then::<Vec<ProcMountsData>, {closure@src/platform/linux.rs:672:23: 672:29}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:672:23: 672:29}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Result::<Vec<ProcMountsData>, std::io::Error>::map::<Vec<data::Filesystem>, {closure@src/platform/linux.rs:677:18: 677:26}>(move _2, const ZeroSized: {closure@src/platform/linux.rs:677:18: 677:26}) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mounts::{closure#0}(_1: {closure@src/platform/linux.rs:672:23: 672:29}, _2: String) -> Result<Vec<ProcMountsData>, std::io::Error> {
    debug data => _2;
    let mut _0: std::result::Result<std::vec::Vec<platform::linux::ProcMountsData>, std::io::Error>;
    let mut _3: std::result::Result<std::vec::Vec<platform::linux::ProcMountsData>, nom::Err<nom::error::Error<&str>>>;
    let mut _4: std::result::Result<(&str, std::vec::Vec<platform::linux::ProcMountsData>), nom::Err<nom::error::Error<&str>>>;
    let _5: &str;
    let _6: &std::string::String;

    bb0: {
        _6 = &_2;
        _5 = <String as Deref>::deref(_6) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = proc_mounts(_5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = Result::<(&str, Vec<ProcMountsData>), nom::Err<nom::error::Error<&str>>>::map::<Vec<ProcMountsData>, {closure@src/platform/linux.rs:674:26: 674:36}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:674:26: 674:36}) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = Result::<Vec<ProcMountsData>, nom::Err<nom::error::Error<&str>>>::map_err::<std::io::Error, {closure@src/platform/linux.rs:675:30: 675:35}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:675:30: 675:35}) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mounts::{closure#0}::{closure#0}(_1: {closure@src/platform/linux.rs:674:26: 674:36}, _2: (&str, Vec<ProcMountsData>)) -> Vec<ProcMountsData> {
    let mut _0: std::vec::Vec<platform::linux::ProcMountsData>;
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _0 = move (_2.1: std::vec::Vec<platform::linux::ProcMountsData>);
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mounts::{closure#0}::{closure#1}(_1: {closure@src/platform/linux.rs:675:30: 675:35}, _2: nom::Err<nom::error::Error<&str>>) -> std::io::Error {
    debug err => _2;
    let mut _0: std::io::Error;
    let mut _3: std::io::ErrorKind;
    let mut _4: std::string::String;
    let mut _5: &nom::Err<nom::error::Error<&str>>;

    bb0: {
        _3 = InvalidData;
        _5 = &_2;
        _4 = <nom::Err<nom::error::Error<&str>> as ToString>::to_string(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::io::Error::new::<String>(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mounts::{closure#1}(_1: {closure@src/platform/linux.rs:677:18: 677:26}, _2: Vec<ProcMountsData>) -> Vec<data::Filesystem> {
    debug mounts => _2;
    let mut _0: std::vec::Vec<data::Filesystem>;
    let mut _3: std::iter::FilterMap<std::vec::IntoIter<platform::linux::ProcMountsData>, {closure@src/platform/linux.rs:680:33: 680:40}>;
    let mut _4: std::vec::IntoIter<platform::linux::ProcMountsData>;

    bb0: {
        _4 = <Vec<ProcMountsData> as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <std::vec::IntoIter<ProcMountsData> as Iterator>::filter_map::<data::Filesystem, {closure@src/platform/linux.rs:680:33: 680:40}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:680:33: 680:40}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <FilterMap<std::vec::IntoIter<ProcMountsData>, {closure@src/platform/linux.rs:680:33: 680:40}> as Iterator>::collect::<Vec<data::Filesystem>>(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mounts::{closure#1}::{closure#0}(_1: &mut {closure@src/platform/linux.rs:680:33: 680:40}, _2: ProcMountsData) -> Option<data::Filesystem> {
    debug mount => _2;
    let mut _0: std::option::Option<data::Filesystem>;
    let mut _3: std::result::Result<data::Filesystem, std::io::Error>;

    bb0: {
        _3 = stat_mount(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<data::Filesystem, std::io::Error>::ok(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mount_at(_1: &PlatformImpl, _2: P) -> Result<data::Filesystem, std::io::Error> {
    debug self => _1;
    debug path => _2;
    let mut _0: std::result::Result<data::Filesystem, std::io::Error>;
    let mut _3: std::result::Result<platform::linux::ProcMountsData, std::io::Error>;
    let mut _4: std::result::Result<std::vec::Vec<platform::linux::ProcMountsData>, std::io::Error>;
    let mut _5: std::result::Result<std::string::String, std::io::Error>;
    let _6: &str;
    let mut _7: {closure@src/platform/linux.rs:692:23: 692:31};
    let mut _8: &P;

    bb0: {
        _6 = const "/proc/mounts";
        _5 = read_file(_6) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = Result::<String, std::io::Error>::and_then::<Vec<ProcMountsData>, {closure@src/platform/linux.rs:687:23: 687:29}>(move _5, const ZeroSized: {closure@src/platform/linux.rs:687:23: 687:29}) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _8 = &_2;
        _7 = {closure@src/platform/linux.rs:692:23: 692:31} { path: move _8 };
        _3 = Result::<Vec<ProcMountsData>, std::io::Error>::and_then::<ProcMountsData, {closure@src/platform/linux.rs:692:23: 692:31}>(move _4, move _7) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = Result::<ProcMountsData, std::io::Error>::and_then::<data::Filesystem, fn(ProcMountsData) -> Result<data::Filesystem, std::io::Error> {stat_mount}>(move _3, stat_mount) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mount_at::{closure#0}(_1: {closure@src/platform/linux.rs:687:23: 687:29}, _2: String) -> Result<Vec<ProcMountsData>, std::io::Error> {
    debug data => _2;
    let mut _0: std::result::Result<std::vec::Vec<platform::linux::ProcMountsData>, std::io::Error>;
    let mut _3: std::result::Result<std::vec::Vec<platform::linux::ProcMountsData>, nom::Err<nom::error::Error<&str>>>;
    let mut _4: std::result::Result<(&str, std::vec::Vec<platform::linux::ProcMountsData>), nom::Err<nom::error::Error<&str>>>;
    let _5: &str;
    let _6: &std::string::String;

    bb0: {
        _6 = &_2;
        _5 = <String as Deref>::deref(_6) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = proc_mounts(_5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = Result::<(&str, Vec<ProcMountsData>), nom::Err<nom::error::Error<&str>>>::map::<Vec<ProcMountsData>, {closure@src/platform/linux.rs:689:26: 689:36}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:689:26: 689:36}) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = Result::<Vec<ProcMountsData>, nom::Err<nom::error::Error<&str>>>::map_err::<std::io::Error, {closure@src/platform/linux.rs:690:30: 690:35}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:690:30: 690:35}) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mount_at::{closure#0}::{closure#0}(_1: {closure@src/platform/linux.rs:689:26: 689:36}, _2: (&str, Vec<ProcMountsData>)) -> Vec<ProcMountsData> {
    let mut _0: std::vec::Vec<platform::linux::ProcMountsData>;
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _0 = move (_2.1: std::vec::Vec<platform::linux::ProcMountsData>);
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mount_at::{closure#0}::{closure#1}(_1: {closure@src/platform/linux.rs:690:30: 690:35}, _2: nom::Err<nom::error::Error<&str>>) -> std::io::Error {
    debug err => _2;
    let mut _0: std::io::Error;
    let mut _3: std::io::ErrorKind;
    let mut _4: std::string::String;
    let mut _5: &nom::Err<nom::error::Error<&str>>;

    bb0: {
        _3 = InvalidData;
        _5 = &_2;
        _4 = <nom::Err<nom::error::Error<&str>> as ToString>::to_string(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::io::Error::new::<String>(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mount_at::{closure#1}(_1: {closure@src/platform/linux.rs:692:23: 692:31}, _2: Vec<ProcMountsData>) -> Result<ProcMountsData, std::io::Error> {
    debug mounts => _2;
    debug path => (*(_1.0: &P));
    let mut _0: std::result::Result<platform::linux::ProcMountsData, std::io::Error>;
    let mut _3: std::option::Option<platform::linux::ProcMountsData>;
    let mut _4: &mut std::vec::IntoIter<platform::linux::ProcMountsData>;
    let mut _5: std::vec::IntoIter<platform::linux::ProcMountsData>;
    let mut _6: {closure@src/platform/linux.rs:695:27: 695:34};
    let mut _7: &P;

    bb0: {
        _5 = <Vec<ProcMountsData> as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _7 = deref_copy (_1.0: &P);
        _6 = {closure@src/platform/linux.rs:695:27: 695:34} { path: _7 };
        _3 = <std::vec::IntoIter<ProcMountsData> as Iterator>::find::<{closure@src/platform/linux.rs:695:27: 695:34}>(move _4, move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = Option::<ProcMountsData>::ok_or_else::<std::io::Error, {closure@src/platform/linux.rs:696:33: 696:35}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:696:33: 696:35}) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_5) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mount_at::{closure#1}::{closure#0}(_1: &mut {closure@src/platform/linux.rs:695:27: 695:34}, _2: &ProcMountsData) -> bool {
    debug mount => _2;
    debug path => (*((*_1).0: &P));
    let mut _0: bool;
    let mut _3: &&std::path::Path;
    let _4: &std::path::Path;
    let _5: &std::string::String;
    let mut _6: &&std::path::Path;
    let _7: &std::path::Path;
    let mut _8: &P;

    bb0: {
        _5 = &((*_2).1: std::string::String);
        _4 = Path::new::<String>(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _8 = deref_copy ((*_1).0: &P);
        _7 = <P as AsRef<Path>>::as_ref(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _0 = <&Path as PartialEq>::eq(move _3, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::mount_at::{closure#1}::{closure#1}(_1: {closure@src/platform/linux.rs:696:33: 696:35}) -> std::io::Error {
    let mut _0: std::io::Error;
    let mut _2: std::io::ErrorKind;

    bb0: {
        _2 = NotFound;
        _0 = std::io::Error::new::<&str>(move _2, const "No such mount") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::block_device_statistics(_1: &PlatformImpl) -> Result<std::collections::BTreeMap<String, data::BlockDeviceStats>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::collections::BTreeMap<std::string::String, data::BlockDeviceStats>, std::io::Error>;
    let mut _2: std::collections::BTreeMap<std::string::String, data::BlockDeviceStats>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::vec::Vec<data::BlockDeviceStats>>;
    let mut _5: std::result::Result<std::vec::Vec<data::BlockDeviceStats>, std::io::Error>;
    let mut _6: std::result::Result<std::string::String, std::io::Error>;
    let _7: &str;
    let mut _8: isize;
    let mut _11: std::vec::IntoIter<data::BlockDeviceStats>;
    let mut _12: std::vec::Vec<data::BlockDeviceStats>;
    let mut _14: std::option::Option<data::BlockDeviceStats>;
    let mut _15: &mut std::vec::IntoIter<data::BlockDeviceStats>;
    let mut _16: isize;
    let _18: &mut data::BlockDeviceStats;
    let mut _19: std::collections::btree_map::Entry<'_, std::string::String, data::BlockDeviceStats>;
    let mut _20: &mut std::collections::BTreeMap<std::string::String, data::BlockDeviceStats>;
    let mut _21: std::string::String;
    let mut _22: &std::string::String;
    let mut _23: data::BlockDeviceStats;
    let mut _24: std::collections::BTreeMap<std::string::String, data::BlockDeviceStats>;
    let mut _25: bool;
    let mut _26: bool;
    scope 1 {
        debug result => _2;
        let _3: std::vec::Vec<data::BlockDeviceStats>;
        let _9: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _10: std::vec::Vec<data::BlockDeviceStats>;
        scope 2 {
            debug stats => _3;
            let mut _13: std::vec::IntoIter<data::BlockDeviceStats>;
            scope 7 {
                debug iter => _13;
                let _17: data::BlockDeviceStats;
                scope 8 {
                    debug blkstats => _17;
                }
            }
        }
        scope 3 {
            debug residual => _9;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _10;
            scope 6 {
            }
        }
    }

    bb0: {
        _26 = const false;
        _25 = const false;
        _2 = std::collections::BTreeMap::<String, data::BlockDeviceStats>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = const "/proc/diskstats";
        _6 = read_file(_7) -> [return: bb2, unwind: bb20];
    }

    bb2: {
        _5 = Result::<String, std::io::Error>::and_then::<Vec<data::BlockDeviceStats>, {closure@src/platform/linux.rs:703:82: 703:88}>(move _6, const ZeroSized: {closure@src/platform/linux.rs:703:82: 703:88}) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _4 = <Result<Vec<data::BlockDeviceStats>, std::io::Error> as Try>::branch(move _5) -> [return: bb4, unwind: bb20];
    }

    bb4: {
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _10 = move ((_4 as Continue).0: std::vec::Vec<data::BlockDeviceStats>);
        _26 = const true;
        _3 = move _10;
        _26 = const false;
        _12 = move _3;
        _11 = <Vec<data::BlockDeviceStats> as IntoIterator>::into_iter(move _12) -> [return: bb9, unwind: bb25];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<std::collections::BTreeMap<String, data::BlockDeviceStats>, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _9) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        _26 = const false;
        drop(_2) -> [return: bb18, unwind continue];
    }

    bb9: {
        _13 = move _11;
        goto -> bb10;
    }

    bb10: {
        _15 = &mut _13;
        _14 = <std::vec::IntoIter<data::BlockDeviceStats> as Iterator>::next(_15) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb13, 1: bb12, otherwise: bb6];
    }

    bb12: {
        _25 = const true;
        _17 = move ((_14 as Some).0: data::BlockDeviceStats);
        _20 = &mut _2;
        _22 = &(_17.0: std::string::String);
        _21 = <String as Clone>::clone(move _22) -> [return: bb14, unwind: bb23];
    }

    bb13: {
        drop(_13) -> [return: bb17, unwind: bb25];
    }

    bb14: {
        _19 = std::collections::BTreeMap::<String, data::BlockDeviceStats>::entry(move _20, move _21) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        _25 = const false;
        _23 = move _17;
        _18 = std::collections::btree_map::Entry::<'_, String, data::BlockDeviceStats>::or_insert(move _19, move _23) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        _25 = const false;
        goto -> bb10;
    }

    bb17: {
        _24 = move _2;
        _0 = Result::<std::collections::BTreeMap<String, data::BlockDeviceStats>, std::io::Error>::Ok(move _24);
        _26 = const false;
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_13) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_17) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_25) -> [0: bb19, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_26) -> [0: bb20, otherwise: bb24];
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::block_device_statistics::{closure#0}(_1: {closure@src/platform/linux.rs:703:82: 703:88}, _2: String) -> Result<Vec<data::BlockDeviceStats>, std::io::Error> {
    debug data => _2;
    let mut _0: std::result::Result<std::vec::Vec<data::BlockDeviceStats>, std::io::Error>;
    let mut _3: std::result::Result<std::vec::Vec<data::BlockDeviceStats>, nom::Err<nom::error::Error<&str>>>;
    let mut _4: std::result::Result<(&str, std::vec::Vec<data::BlockDeviceStats>), nom::Err<nom::error::Error<&str>>>;
    let _5: &str;
    let _6: &std::string::String;

    bb0: {
        _6 = &_2;
        _5 = <String as Deref>::deref(_6) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = proc_diskstats(_5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = Result::<(&str, Vec<data::BlockDeviceStats>), nom::Err<nom::error::Error<&str>>>::map::<Vec<data::BlockDeviceStats>, {closure@src/platform/linux.rs:705:22: 705:32}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:705:22: 705:32}) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = Result::<Vec<data::BlockDeviceStats>, nom::Err<nom::error::Error<&str>>>::map_err::<std::io::Error, {closure@src/platform/linux.rs:706:26: 706:31}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:706:26: 706:31}) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::block_device_statistics::{closure#0}::{closure#0}(_1: {closure@src/platform/linux.rs:705:22: 705:32}, _2: (&str, Vec<data::BlockDeviceStats>)) -> Vec<data::BlockDeviceStats> {
    let mut _0: std::vec::Vec<data::BlockDeviceStats>;
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _0 = move (_2.1: std::vec::Vec<data::BlockDeviceStats>);
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::block_device_statistics::{closure#0}::{closure#1}(_1: {closure@src/platform/linux.rs:706:26: 706:31}, _2: nom::Err<nom::error::Error<&str>>) -> std::io::Error {
    debug err => _2;
    let mut _0: std::io::Error;
    let mut _3: std::io::ErrorKind;
    let mut _4: std::string::String;
    let mut _5: &nom::Err<nom::error::Error<&str>>;

    bb0: {
        _3 = InvalidData;
        _5 = &_2;
        _4 = <nom::Err<nom::error::Error<&str>> as ToString>::to_string(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::io::Error::new::<String>(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::networks(_1: &PlatformImpl) -> Result<std::collections::BTreeMap<String, data::Network>, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::collections::BTreeMap<std::string::String, data::Network>, std::io::Error>;

    bb0: {
        _0 = networks() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::network_stats(_1: &PlatformImpl, _2: &str) -> Result<data::NetworkStats, std::io::Error> {
    debug self => _1;
    debug interface => _2;
    let mut _0: std::result::Result<data::NetworkStats, std::io::Error>;
    let _3: std::string::String;
    let mut _4: std::string::String;
    let mut _5: std::string::String;
    let _6: &str;
    let _7: &str;
    let mut _9: &std::string::String;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _11: std::result::Result<u64, std::io::Error>;
    let _12: &str;
    let _13: &std::string::String;
    let _14: std::string::String;
    let mut _15: &{closure@src/platform/linux.rs:721:26: 721:38};
    let mut _16: (&str,);
    let _17: &str;
    let mut _18: isize;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _22: std::result::Result<u64, std::io::Error>;
    let _23: &str;
    let _24: &std::string::String;
    let _25: std::string::String;
    let mut _26: &{closure@src/platform/linux.rs:721:26: 721:38};
    let mut _27: (&str,);
    let _28: &str;
    let mut _29: isize;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _33: std::result::Result<u64, std::io::Error>;
    let _34: &str;
    let _35: &std::string::String;
    let _36: std::string::String;
    let mut _37: &{closure@src/platform/linux.rs:721:26: 721:38};
    let mut _38: (&str,);
    let _39: &str;
    let mut _40: isize;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _44: std::result::Result<u64, std::io::Error>;
    let _45: &str;
    let _46: &std::string::String;
    let _47: std::string::String;
    let mut _48: &{closure@src/platform/linux.rs:721:26: 721:38};
    let mut _49: (&str,);
    let _50: &str;
    let mut _51: isize;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _55: std::result::Result<u64, std::io::Error>;
    let _56: &str;
    let _57: &std::string::String;
    let _58: std::string::String;
    let mut _59: &{closure@src/platform/linux.rs:721:26: 721:38};
    let mut _60: (&str,);
    let _61: &str;
    let mut _62: isize;
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _66: std::result::Result<u64, std::io::Error>;
    let _67: &str;
    let _68: &std::string::String;
    let _69: std::string::String;
    let mut _70: &{closure@src/platform/linux.rs:721:26: 721:38};
    let mut _71: (&str,);
    let _72: &str;
    let mut _73: isize;
    let mut _76: data::NetworkStats;
    let mut _77: bytesize::ByteSize;
    let mut _78: bytesize::ByteSize;
    scope 1 {
        debug path_root => _3;
        let _8: {closure@src/platform/linux.rs:721:26: 721:38};
        scope 2 {
            debug stats_file => _8;
            let _19: std::result::Result<std::convert::Infallible, std::io::Error>;
            let _20: u64;
            scope 3 {
                debug rx_bytes => _20;
                let _30: std::result::Result<std::convert::Infallible, std::io::Error>;
                let _31: u64;
                scope 8 {
                    debug tx_bytes => _31;
                    let _41: std::result::Result<std::convert::Infallible, std::io::Error>;
                    let _42: u64;
                    scope 13 {
                        debug rx_packets => _42;
                        let _52: std::result::Result<std::convert::Infallible, std::io::Error>;
                        let _53: u64;
                        scope 18 {
                            debug tx_packets => _53;
                            let _63: std::result::Result<std::convert::Infallible, std::io::Error>;
                            let _64: u64;
                            scope 23 {
                                debug rx_errors => _64;
                                let _74: std::result::Result<std::convert::Infallible, std::io::Error>;
                                let _75: u64;
                                scope 28 {
                                    debug tx_errors => _75;
                                }
                                scope 29 {
                                    debug residual => _74;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _75;
                                    scope 32 {
                                    }
                                }
                            }
                            scope 24 {
                                debug residual => _63;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _64;
                                scope 27 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _52;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _53;
                            scope 22 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _41;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _42;
                        scope 17 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _30;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _31;
                    scope 12 {
                    }
                }
            }
            scope 4 {
                debug residual => _19;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _20;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _6 = const "/sys/class/net/";
        _5 = <str as ToString>::to_string(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <String as Add<&str>>::add(move _5, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = const "/statistics/";
        _3 = <String as Add<&str>>::add(move _4, _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = &_3;
        _8 = {closure@src/platform/linux.rs:721:26: 721:38} { path_root: move _9 };
        _15 = &_8;
        _17 = const "rx_bytes";
        _16 = (_17,);
        _14 = <{closure@src/platform/linux.rs:721:26: 721:38} as Fn<(&str,)>>::call(move _15, move _16) -> [return: bb4, unwind: bb63];
    }

    bb4: {
        _13 = &_14;
        _12 = <String as Deref>::deref(_13) -> [return: bb5, unwind: bb62];
    }

    bb5: {
        _11 = value_from_file::<u64>(_12) -> [return: bb6, unwind: bb62];
    }

    bb6: {
        _10 = <Result<u64, std::io::Error> as Try>::branch(move _11) -> [return: bb7, unwind: bb62];
    }

    bb7: {
        _18 = discriminant(_10);
        switchInt(move _18) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _20 = ((_10 as Continue).0: u64);
        drop(_14) -> [return: bb12, unwind: bb63];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _19 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::NetworkStats, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb62];
    }

    bb11: {
        drop(_14) -> [return: bb55, unwind: bb63];
    }

    bb12: {
        _26 = &_8;
        _28 = const "tx_bytes";
        _27 = (_28,);
        _25 = <{closure@src/platform/linux.rs:721:26: 721:38} as Fn<(&str,)>>::call(move _26, move _27) -> [return: bb13, unwind: bb63];
    }

    bb13: {
        _24 = &_25;
        _23 = <String as Deref>::deref(_24) -> [return: bb14, unwind: bb61];
    }

    bb14: {
        _22 = value_from_file::<u64>(_23) -> [return: bb15, unwind: bb61];
    }

    bb15: {
        _21 = <Result<u64, std::io::Error> as Try>::branch(move _22) -> [return: bb16, unwind: bb61];
    }

    bb16: {
        _29 = discriminant(_21);
        switchInt(move _29) -> [0: bb17, 1: bb18, otherwise: bb9];
    }

    bb17: {
        _31 = ((_21 as Continue).0: u64);
        drop(_25) -> [return: bb20, unwind: bb63];
    }

    bb18: {
        _30 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::NetworkStats, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _30) -> [return: bb19, unwind: bb61];
    }

    bb19: {
        drop(_25) -> [return: bb55, unwind: bb63];
    }

    bb20: {
        _37 = &_8;
        _39 = const "rx_packets";
        _38 = (_39,);
        _36 = <{closure@src/platform/linux.rs:721:26: 721:38} as Fn<(&str,)>>::call(move _37, move _38) -> [return: bb21, unwind: bb63];
    }

    bb21: {
        _35 = &_36;
        _34 = <String as Deref>::deref(_35) -> [return: bb22, unwind: bb60];
    }

    bb22: {
        _33 = value_from_file::<u64>(_34) -> [return: bb23, unwind: bb60];
    }

    bb23: {
        _32 = <Result<u64, std::io::Error> as Try>::branch(move _33) -> [return: bb24, unwind: bb60];
    }

    bb24: {
        _40 = discriminant(_32);
        switchInt(move _40) -> [0: bb25, 1: bb26, otherwise: bb9];
    }

    bb25: {
        _42 = ((_32 as Continue).0: u64);
        drop(_36) -> [return: bb28, unwind: bb63];
    }

    bb26: {
        _41 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::NetworkStats, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _41) -> [return: bb27, unwind: bb60];
    }

    bb27: {
        drop(_36) -> [return: bb55, unwind: bb63];
    }

    bb28: {
        _48 = &_8;
        _50 = const "tx_packets";
        _49 = (_50,);
        _47 = <{closure@src/platform/linux.rs:721:26: 721:38} as Fn<(&str,)>>::call(move _48, move _49) -> [return: bb29, unwind: bb63];
    }

    bb29: {
        _46 = &_47;
        _45 = <String as Deref>::deref(_46) -> [return: bb30, unwind: bb59];
    }

    bb30: {
        _44 = value_from_file::<u64>(_45) -> [return: bb31, unwind: bb59];
    }

    bb31: {
        _43 = <Result<u64, std::io::Error> as Try>::branch(move _44) -> [return: bb32, unwind: bb59];
    }

    bb32: {
        _51 = discriminant(_43);
        switchInt(move _51) -> [0: bb33, 1: bb34, otherwise: bb9];
    }

    bb33: {
        _53 = ((_43 as Continue).0: u64);
        drop(_47) -> [return: bb36, unwind: bb63];
    }

    bb34: {
        _52 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::NetworkStats, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _52) -> [return: bb35, unwind: bb59];
    }

    bb35: {
        drop(_47) -> [return: bb55, unwind: bb63];
    }

    bb36: {
        _59 = &_8;
        _61 = const "rx_errors";
        _60 = (_61,);
        _58 = <{closure@src/platform/linux.rs:721:26: 721:38} as Fn<(&str,)>>::call(move _59, move _60) -> [return: bb37, unwind: bb63];
    }

    bb37: {
        _57 = &_58;
        _56 = <String as Deref>::deref(_57) -> [return: bb38, unwind: bb58];
    }

    bb38: {
        _55 = value_from_file::<u64>(_56) -> [return: bb39, unwind: bb58];
    }

    bb39: {
        _54 = <Result<u64, std::io::Error> as Try>::branch(move _55) -> [return: bb40, unwind: bb58];
    }

    bb40: {
        _62 = discriminant(_54);
        switchInt(move _62) -> [0: bb41, 1: bb42, otherwise: bb9];
    }

    bb41: {
        _64 = ((_54 as Continue).0: u64);
        drop(_58) -> [return: bb44, unwind: bb63];
    }

    bb42: {
        _63 = move ((_54 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::NetworkStats, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _63) -> [return: bb43, unwind: bb58];
    }

    bb43: {
        drop(_58) -> [return: bb55, unwind: bb63];
    }

    bb44: {
        _70 = &_8;
        _72 = const "tx_errors";
        _71 = (_72,);
        _69 = <{closure@src/platform/linux.rs:721:26: 721:38} as Fn<(&str,)>>::call(move _70, move _71) -> [return: bb45, unwind: bb63];
    }

    bb45: {
        _68 = &_69;
        _67 = <String as Deref>::deref(_68) -> [return: bb46, unwind: bb57];
    }

    bb46: {
        _66 = value_from_file::<u64>(_67) -> [return: bb47, unwind: bb57];
    }

    bb47: {
        _65 = <Result<u64, std::io::Error> as Try>::branch(move _66) -> [return: bb48, unwind: bb57];
    }

    bb48: {
        _73 = discriminant(_65);
        switchInt(move _73) -> [0: bb49, 1: bb50, otherwise: bb9];
    }

    bb49: {
        _75 = ((_65 as Continue).0: u64);
        drop(_69) -> [return: bb52, unwind: bb63];
    }

    bb50: {
        _74 = move ((_65 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::NetworkStats, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _74) -> [return: bb51, unwind: bb57];
    }

    bb51: {
        drop(_69) -> [return: bb55, unwind: bb63];
    }

    bb52: {
        _77 = bytesize::ByteSize::b(_20) -> [return: bb53, unwind: bb63];
    }

    bb53: {
        _78 = bytesize::ByteSize::b(_31) -> [return: bb54, unwind: bb63];
    }

    bb54: {
        _76 = data::NetworkStats { rx_bytes: move _77, tx_bytes: move _78, rx_packets: _42, tx_packets: _53, rx_errors: _64, tx_errors: _75 };
        _0 = Result::<data::NetworkStats, std::io::Error>::Ok(move _76);
        drop(_3) -> [return: bb56, unwind continue];
    }

    bb55: {
        drop(_3) -> [return: bb56, unwind continue];
    }

    bb56: {
        return;
    }

    bb57 (cleanup): {
        drop(_69) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_58) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_47) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_36) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_25) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_14) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_3) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::network_stats::{closure#0}(_1: &{closure@src/platform/linux.rs:721:26: 721:38}, _2: &str) -> String {
    debug file => _2;
    debug path_root => (*((*_1).0: &std::string::String));
    let mut _0: std::string::String;
    let mut _3: std::string::String;
    let mut _4: &std::string::String;

    bb0: {
        _4 = deref_copy ((*_1).0: &std::string::String);
        _3 = <String as ToString>::to_string(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <String as Add<&str>>::add(move _3, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::cpu_temp(_1: &PlatformImpl) -> Result<f32, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<f32, std::io::Error>;
    let mut _2: std::result::Result<f32, std::io::Error>;
    let mut _3: std::result::Result<std::string::String, std::io::Error>;
    let mut _4: std::result::Result<std::string::String, std::io::Error>;
    let _5: &str;
    let mut _6: std::result::Result<std::string::String, std::io::Error>;
    let _7: &str;
    let mut _8: bool;

    bb0: {
        _8 = const false;
        _5 = const "/sys/class/thermal/thermal_zone0/temp";
        _8 = const true;
        _4 = read_file(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = const "/sys/class/hwmon/hwmon0/temp1_input";
        _6 = read_file(_7) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _8 = const false;
        _3 = Result::<String, std::io::Error>::or::<std::io::Error>(move _4, move _6) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _8 = const false;
        _2 = Result::<String, std::io::Error>::and_then::<f32, {closure@src/platform/linux.rs:743:23: 743:29}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:743:23: 743:29}) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Result::<f32, std::io::Error>::map::<f32, {closure@src/platform/linux.rs:747:18: 747:23}>(move _2, const ZeroSized: {closure@src/platform/linux.rs:747:18: 747:23}) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_8) -> [0: bb6, otherwise: bb7];
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::cpu_temp::{closure#0}(_1: {closure@src/platform/linux.rs:743:23: 743:29}, _2: String) -> Result<f32, std::io::Error> {
    debug data => _2;
    let mut _0: std::result::Result<f32, std::io::Error>;
    let mut _3: std::result::Result<f32, std::num::ParseFloatError>;
    let _4: &str;
    let _5: &str;
    let mut _6: &std::string::String;
    let mut _7: isize;
    let _8: f32;
    let mut _9: std::io::Error;
    let mut _10: std::io::ErrorKind;
    scope 1 {
        debug x => _8;
    }

    bb0: {
        _6 = &_2;
        _5 = <String as Deref>::deref(move _6) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _4 = core::str::<impl str>::trim(_5) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _3 = core::str::<impl str>::parse::<f32>(_4) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _10 = Other;
        _9 = std::io::Error::new::<&str>(move _10, const "Could not parse float") -> [return: bb7, unwind: bb10];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = ((_3 as Ok).0: f32);
        _0 = Result::<f32, std::io::Error>::Ok(_8);
        goto -> bb8;
    }

    bb7: {
        _0 = Result::<f32, std::io::Error>::Err(move _9);
        goto -> bb8;
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::cpu_temp::{closure#1}(_1: {closure@src/platform/linux.rs:747:18: 747:23}, _2: f32) -> f32 {
    debug num => _2;
    let mut _0: f32;

    bb0: {
        _0 = Div(_2, const 1000f32);
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::socket_stats(_1: &PlatformImpl) -> Result<data::SocketStats, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<data::SocketStats, std::io::Error>;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, platform::linux::ProcNetSockStat>;
    let mut _3: std::result::Result<platform::linux::ProcNetSockStat, std::io::Error>;
    let mut _4: std::result::Result<std::string::String, std::io::Error>;
    let _5: &str;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _8: platform::linux::ProcNetSockStat;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, platform::linux::ProcNetSockStat6>;
    let mut _10: std::result::Result<platform::linux::ProcNetSockStat6, std::io::Error>;
    let mut _11: std::result::Result<std::string::String, std::io::Error>;
    let _12: &str;
    let mut _13: isize;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: usize;
    scope 1 {
        debug sockstats => _8;
        let _14: std::result::Result<std::convert::Infallible, std::io::Error>;
        let _15: platform::linux::ProcNetSockStat6;
        scope 6 {
            debug sockstats6 => _15;
            let _16: data::SocketStats;
            scope 11 {
                debug result => _16;
            }
        }
        scope 7 {
            debug residual => _14;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _15;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _5 = const "/proc/net/sockstat";
        _4 = read_file(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Result::<String, std::io::Error>::and_then::<ProcNetSockStat, {closure@src/platform/linux.rs:751:83: 751:89}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:751:83: 751:89}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = <Result<ProcNetSockStat, std::io::Error> as Try>::branch(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = discriminant(_2);
        switchInt(move _6) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _8 = move ((_2 as Continue).0: platform::linux::ProcNetSockStat);
        _12 = const "/proc/net/sockstat6";
        _11 = read_file(_12) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _7 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::SocketStats, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _7) -> [return: bb12, unwind continue];
    }

    bb7: {
        _10 = Result::<String, std::io::Error>::and_then::<ProcNetSockStat6, {closure@src/platform/linux.rs:756:86: 756:92}>(move _11, const ZeroSized: {closure@src/platform/linux.rs:756:86: 756:92}) -> [return: bb8, unwind continue];
    }

    bb8: {
        _9 = <Result<ProcNetSockStat6, std::io::Error> as Try>::branch(move _10) -> [return: bb9, unwind continue];
    }

    bb9: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        _15 = move ((_9 as Continue).0: platform::linux::ProcNetSockStat6);
        _17 = (_8.0: usize);
        _18 = (_8.1: usize);
        _19 = (_8.2: usize);
        _20 = (_15.0: usize);
        _21 = (_15.1: usize);
        _16 = data::SocketStats { tcp_sockets_in_use: move _17, tcp_sockets_orphaned: move _18, udp_sockets_in_use: move _19, tcp6_sockets_in_use: move _20, udp6_sockets_in_use: move _21 };
        _0 = Result::<data::SocketStats, std::io::Error>::Ok(move _16);
        goto -> bb12;
    }

    bb11: {
        _14 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        _0 = <Result<data::SocketStats, std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _14) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::socket_stats::{closure#0}(_1: {closure@src/platform/linux.rs:751:83: 751:89}, _2: String) -> Result<ProcNetSockStat, std::io::Error> {
    debug data => _2;
    let mut _0: std::result::Result<platform::linux::ProcNetSockStat, std::io::Error>;
    let mut _3: std::result::Result<platform::linux::ProcNetSockStat, nom::Err<nom::error::Error<&str>>>;
    let mut _4: std::result::Result<(&str, platform::linux::ProcNetSockStat), nom::Err<nom::error::Error<&str>>>;
    let _5: &str;
    let _6: &std::string::String;

    bb0: {
        _6 = &_2;
        _5 = <String as Deref>::deref(_6) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = proc_net_sockstat(_5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = Result::<(&str, ProcNetSockStat), nom::Err<nom::error::Error<&str>>>::map::<ProcNetSockStat, {closure@src/platform/linux.rs:753:22: 753:32}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:753:22: 753:32}) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = Result::<ProcNetSockStat, nom::Err<nom::error::Error<&str>>>::map_err::<std::io::Error, {closure@src/platform/linux.rs:754:26: 754:31}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:754:26: 754:31}) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::socket_stats::{closure#0}::{closure#0}(_1: {closure@src/platform/linux.rs:753:22: 753:32}, _2: (&str, ProcNetSockStat)) -> ProcNetSockStat {
    let mut _0: platform::linux::ProcNetSockStat;
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _0 = move (_2.1: platform::linux::ProcNetSockStat);
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::socket_stats::{closure#0}::{closure#1}(_1: {closure@src/platform/linux.rs:754:26: 754:31}, _2: nom::Err<nom::error::Error<&str>>) -> std::io::Error {
    debug err => _2;
    let mut _0: std::io::Error;
    let mut _3: std::io::ErrorKind;
    let mut _4: std::string::String;
    let mut _5: &nom::Err<nom::error::Error<&str>>;

    bb0: {
        _3 = InvalidData;
        _5 = &_2;
        _4 = <nom::Err<nom::error::Error<&str>> as ToString>::to_string(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::io::Error::new::<String>(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::socket_stats::{closure#1}(_1: {closure@src/platform/linux.rs:756:86: 756:92}, _2: String) -> Result<ProcNetSockStat6, std::io::Error> {
    debug data => _2;
    let mut _0: std::result::Result<platform::linux::ProcNetSockStat6, std::io::Error>;
    let mut _3: std::result::Result<platform::linux::ProcNetSockStat6, nom::Err<nom::error::Error<&str>>>;
    let mut _4: std::result::Result<(&str, platform::linux::ProcNetSockStat6), nom::Err<nom::error::Error<&str>>>;
    let _5: &str;
    let _6: &std::string::String;

    bb0: {
        _6 = &_2;
        _5 = <String as Deref>::deref(_6) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _4 = proc_net_sockstat6(_5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _3 = Result::<(&str, ProcNetSockStat6), nom::Err<nom::error::Error<&str>>>::map::<ProcNetSockStat6, {closure@src/platform/linux.rs:758:22: 758:32}>(move _4, const ZeroSized: {closure@src/platform/linux.rs:758:22: 758:32}) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = Result::<ProcNetSockStat6, nom::Err<nom::error::Error<&str>>>::map_err::<std::io::Error, {closure@src/platform/linux.rs:759:26: 759:31}>(move _3, const ZeroSized: {closure@src/platform/linux.rs:759:26: 759:31}) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::socket_stats::{closure#1}::{closure#0}(_1: {closure@src/platform/linux.rs:758:22: 758:32}, _2: (&str, ProcNetSockStat6)) -> ProcNetSockStat6 {
    let mut _0: platform::linux::ProcNetSockStat6;
    scope 1 {
        debug res => _0;
    }

    bb0: {
        _0 = move (_2.1: platform::linux::ProcNetSockStat6);
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:515:1: 515:31>::socket_stats::{closure#1}::{closure#1}(_1: {closure@src/platform/linux.rs:759:26: 759:31}, _2: nom::Err<nom::error::Error<&str>>) -> std::io::Error {
    debug err => _2;
    let mut _0: std::io::Error;
    let mut _3: std::io::ErrorKind;
    let mut _4: std::string::String;
    let mut _5: &nom::Err<nom::error::Error<&str>>;

    bb0: {
        _3 = InvalidData;
        _5 = &_2;
        _4 = <nom::Err<nom::error::Error<&str>> as ToString>::to_string(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::io::Error::new::<String>(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

platform::linux::sysinfo::loads::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

platform::linux::sysinfo::padding::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}

fn platform::linux::<impl at src/platform/linux.rs:773:10: 773:15>::fmt(_1: &platform::linux::sysinfo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 13];
    let _5: [&dyn std::fmt::Debug; 13];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &i64;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &[u64; 3];
    let mut _10: &dyn std::fmt::Debug;
    let _11: &u64;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &u64;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &u64;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &u64;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &u64;
    let mut _20: &dyn std::fmt::Debug;
    let _21: &u64;
    let mut _22: &dyn std::fmt::Debug;
    let _23: &u16;
    let mut _24: &dyn std::fmt::Debug;
    let _25: &u64;
    let mut _26: &dyn std::fmt::Debug;
    let _27: &u64;
    let mut _28: &dyn std::fmt::Debug;
    let _29: &u32;
    let mut _30: &dyn std::fmt::Debug;
    let _31: &&[i8; 8];
    let _32: &[i8; 8];
    let _33: &str;
    let mut _34: &[&str];
    let mut _35: &[&str; 13];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _35 = const _;
        _7 = &((*_1).0: i64);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: [u64; 3]);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: u64);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: u64);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: u64);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: u64);
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _19 = &((*_1).6: u64);
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _21 = &((*_1).7: u64);
        _20 = _21 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _23 = &((*_1).8: u16);
        _22 = _23 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _25 = &((*_1).9: u64);
        _24 = _25 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _27 = &((*_1).10: u64);
        _26 = _27 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _29 = &((*_1).11: u32);
        _28 = _29 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _32 = &((*_1).12: [i8; 8]);
        _31 = &_32;
        _30 = _31 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28, move _30];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _33 = const "sysinfo";
        _34 = _35 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _33, move _34, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in platform::linux::<impl at src/platform/linux.rs:773:10: 773:15>::fmt: &[&str; 13] = {
    let mut _0: &[&str; 13];
    let mut _1: [&str; 13];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: &str;
    let mut _19: &str;
    let mut _20: &str;
    let mut _21: &str;
    let mut _22: &str;
    let mut _23: &str;
    let mut _24: &str;
    let mut _25: &str;

    bb0: {
        _3 = const "loads";
        _2 = &(*_3);
        _5 = const "totalram";
        _4 = &(*_5);
        _7 = const "freeram";
        _6 = &(*_7);
        _9 = const "sharedram";
        _8 = &(*_9);
        _11 = const "bufferram";
        _10 = &(*_11);
        _13 = const "totalswap";
        _12 = &(*_13);
        _15 = const "freeswap";
        _14 = &(*_15);
        _17 = const "procs";
        _16 = &(*_17);
        _19 = const "totalhigh";
        _18 = &(*_19);
        _21 = const "freehigh";
        _20 = &(*_21);
        _23 = const "mem_unit";
        _22 = &(*_23);
        _25 = const "padding";
        _24 = &(*_25);
        _1 = [const "uptime", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24];
        _0 = &_1;
        return;
    }
}

fn data::saturating_sub_bytes(_1: bytesize::ByteSize, _2: bytesize::ByteSize) -> bytesize::ByteSize {
    debug l => _1;
    debug r => _2;
    let mut _0: bytesize::ByteSize;
    let mut _3: u64;
    let mut _4: u64;
    let mut _5: &bytesize::ByteSize;
    let mut _6: u64;
    let mut _7: &bytesize::ByteSize;

    bb0: {
        _5 = &_1;
        _4 = bytesize::ByteSize::as_u64(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_2;
        _6 = bytesize::ByteSize::as_u64(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = core::num::<impl u64>::saturating_sub(move _4, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = bytesize::ByteSize::b(move _3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn data::<impl at src/data.rs:28:1: 28:30>::new(_1: Box<dyn Fn() -> Result<T, std::io::Error> + Send>) -> data::DelayedMeasurement<T> {
    debug f => _1;
    let mut _0: data::DelayedMeasurement<T>;

    bb0: {
        _0 = data::DelayedMeasurement::<T> { res: move _1 };
        return;
    }
}

fn data::<impl at src/data.rs:28:1: 28:30>::done(_1: &data::DelayedMeasurement<T>) -> Result<T, std::io::Error> {
    debug self => _1;
    let mut _0: std::result::Result<T, std::io::Error>;
    let mut _2: &std::boxed::Box<dyn std::ops::Fn() -> std::result::Result<T, std::io::Error> + std::marker::Send>;

    bb0: {
        _2 = &((*_1).0: std::boxed::Box<dyn std::ops::Fn() -> std::result::Result<T, std::io::Error> + std::marker::Send>);
        _0 = <Box<dyn Fn() -> Result<T, std::io::Error> + Send> as Fn<()>>::call(move _2, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn data::<impl at src/data.rs:47:10: 47:15>::fmt(_1: &PlatformCpuLoad, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&f32;
    let _7: &f32;

    bb0: {
        _3 = const "PlatformCpuLoad";
        _4 = const "iowait";
        _7 = &((*_1).0: f32);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn data::<impl at src/data.rs:47:17: 47:22>::clone(_1: &PlatformCpuLoad) -> PlatformCpuLoad {
    debug self => _1;
    let mut _0: data::PlatformCpuLoad;
    let mut _2: f32;
    let _3: &f32;

    bb0: {
        _3 = &((*_1).0: f32);
        _2 = (*_3);
        _0 = PlatformCpuLoad { iowait: move _2 };
        return;
    }
}

fn data::<impl at src/data.rs:52:1: 52:21>::avg_add(_1: PlatformCpuLoad, _2: &PlatformCpuLoad) -> PlatformCpuLoad {
    debug self => _1;
    debug rhs => _2;
    let mut _0: data::PlatformCpuLoad;
    let mut _3: f32;
    let mut _4: f32;
    let mut _5: f32;
    let mut _6: f32;

    bb0: {
        _5 = (_1.0: f32);
        _6 = ((*_2).0: f32);
        _4 = Add(move _5, move _6);
        _3 = Div(move _4, const 2f32);
        _0 = PlatformCpuLoad { iowait: move _3 };
        return;
    }
}

fn data::<impl at src/data.rs:52:1: 52:21>::zero() -> PlatformCpuLoad {
    let mut _0: data::PlatformCpuLoad;

    bb0: {
        _0 = PlatformCpuLoad { iowait: const 0f32 };
        return;
    }
}

fn data::<impl at src/data.rs:52:1: 52:21>::from(_1: f32) -> PlatformCpuLoad {
    debug input => _1;
    let mut _0: data::PlatformCpuLoad;

    bb0: {
        _0 = PlatformCpuLoad { iowait: _1 };
        return;
    }
}

fn data::<impl at src/data.rs:97:10: 97:15>::fmt(_1: &data::CPULoad, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 6];
    let _5: [&dyn std::fmt::Debug; 6];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &f32;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &f32;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &f32;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &f32;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &f32;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &&data::PlatformCpuLoad;
    let _18: &data::PlatformCpuLoad;
    let _19: &str;
    let mut _20: &[&str];
    let mut _21: &[&str; 6];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _21 = const _;
        _7 = &((*_1).0: f32);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: f32);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: f32);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: f32);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: f32);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _18 = &((*_1).5: data::PlatformCpuLoad);
        _17 = &_18;
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _19 = const "CPULoad";
        _20 = _21 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _19, move _20, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in data::<impl at src/data.rs:97:10: 97:15>::fmt: &[&str; 6] = {
    let mut _0: &[&str; 6];
    let mut _1: [&str; 6];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;

    bb0: {
        _3 = const "nice";
        _2 = &(*_3);
        _5 = const "system";
        _4 = &(*_5);
        _7 = const "interrupt";
        _6 = &(*_7);
        _9 = const "idle";
        _8 = &(*_9);
        _11 = const "platform";
        _10 = &(*_11);
        _1 = [const "user", move _2, move _4, move _6, move _8, move _10];
        _0 = &_1;
        return;
    }
}

fn data::<impl at src/data.rs:97:17: 97:22>::clone(_1: &data::CPULoad) -> data::CPULoad {
    debug self => _1;
    let mut _0: data::CPULoad;
    let mut _2: f32;
    let _3: &f32;
    let mut _4: f32;
    let _5: &f32;
    let mut _6: f32;
    let _7: &f32;
    let mut _8: f32;
    let _9: &f32;
    let mut _10: f32;
    let _11: &f32;
    let mut _12: data::PlatformCpuLoad;
    let _13: &data::PlatformCpuLoad;

    bb0: {
        _3 = &((*_1).0: f32);
        _2 = (*_3);
        _5 = &((*_1).1: f32);
        _4 = (*_5);
        _7 = &((*_1).2: f32);
        _6 = (*_7);
        _9 = &((*_1).3: f32);
        _8 = (*_9);
        _11 = &((*_1).4: f32);
        _10 = (*_11);
        _13 = &((*_1).5: data::PlatformCpuLoad);
        _12 = <PlatformCpuLoad as Clone>::clone(_13) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = data::CPULoad { user: move _2, nice: move _4, system: move _6, interrupt: move _8, idle: move _10, platform: move _12 };
        return;
    }
}

fn data::<impl at src/data.rs:107:1: 107:13>::avg_add(_1: data::CPULoad, _2: &data::CPULoad) -> data::CPULoad {
    debug self => _1;
    debug rhs => _2;
    let mut _0: data::CPULoad;
    let mut _3: f32;
    let mut _4: f32;
    let mut _5: f32;
    let mut _6: f32;
    let mut _7: f32;
    let mut _8: f32;
    let mut _9: f32;
    let mut _10: f32;
    let mut _11: f32;
    let mut _12: f32;
    let mut _13: f32;
    let mut _14: f32;
    let mut _15: f32;
    let mut _16: f32;
    let mut _17: f32;
    let mut _18: f32;
    let mut _19: f32;
    let mut _20: f32;
    let mut _21: f32;
    let mut _22: f32;
    let mut _23: data::PlatformCpuLoad;
    let mut _24: data::PlatformCpuLoad;
    let _25: &data::PlatformCpuLoad;

    bb0: {
        _5 = (_1.0: f32);
        _6 = ((*_2).0: f32);
        _4 = Add(move _5, move _6);
        _3 = Div(move _4, const 2f32);
        _9 = (_1.1: f32);
        _10 = ((*_2).1: f32);
        _8 = Add(move _9, move _10);
        _7 = Div(move _8, const 2f32);
        _13 = (_1.2: f32);
        _14 = ((*_2).2: f32);
        _12 = Add(move _13, move _14);
        _11 = Div(move _12, const 2f32);
        _17 = (_1.3: f32);
        _18 = ((*_2).3: f32);
        _16 = Add(move _17, move _18);
        _15 = Div(move _16, const 2f32);
        _21 = (_1.4: f32);
        _22 = ((*_2).4: f32);
        _20 = Add(move _21, move _22);
        _19 = Div(move _20, const 2f32);
        _24 = move (_1.5: data::PlatformCpuLoad);
        _25 = &((*_2).5: data::PlatformCpuLoad);
        _23 = PlatformCpuLoad::avg_add(move _24, _25) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = data::CPULoad { user: move _3, nice: move _7, system: move _11, interrupt: move _15, idle: move _19, platform: move _23 };
        return;
    }
}

fn data::<impl at src/data.rs:122:10: 122:15>::fmt(_1: &data::CpuTime, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 6];
    let _5: [&dyn std::fmt::Debug; 6];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &usize;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &usize;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &usize;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &usize;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &usize;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &&usize;
    let _18: &usize;
    let _19: &str;
    let mut _20: &[&str];
    let mut _21: &[&str; 6];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _21 = const _;
        _7 = &((*_1).0: usize);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: usize);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: usize);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: usize);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: usize);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _18 = &((*_1).5: usize);
        _17 = &_18;
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _19 = const "CpuTime";
        _20 = _21 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _19, move _20, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in data::<impl at src/data.rs:122:10: 122:15>::fmt: &[&str; 6] = {
    let mut _0: &[&str; 6];
    let mut _1: [&str; 6];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;

    bb0: {
        _3 = const "nice";
        _2 = &(*_3);
        _5 = const "system";
        _4 = &(*_5);
        _7 = const "interrupt";
        _6 = &(*_7);
        _9 = const "idle";
        _8 = &(*_9);
        _11 = const "other";
        _10 = &(*_11);
        _1 = [const "user", move _2, move _4, move _6, move _8, move _10];
        _0 = &_1;
        return;
    }
}

fn data::<impl at src/data.rs:122:17: 122:22>::clone(_1: &data::CpuTime) -> data::CpuTime {
    debug self => _1;
    let mut _0: data::CpuTime;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn data::<impl at src/data.rs:132:1: 132:38>::sub(_1: data::CpuTime, _2: &data::CpuTime) -> data::CpuTime {
    debug self => _1;
    debug rhs => _2;
    let mut _0: data::CpuTime;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;

    bb0: {
        _4 = (_1.0: usize);
        _5 = ((*_2).0: usize);
        _3 = core::num::<impl usize>::saturating_sub(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = (_1.1: usize);
        _8 = ((*_2).1: usize);
        _6 = core::num::<impl usize>::saturating_sub(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = (_1.2: usize);
        _11 = ((*_2).2: usize);
        _9 = core::num::<impl usize>::saturating_sub(move _10, move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = (_1.3: usize);
        _14 = ((*_2).3: usize);
        _12 = core::num::<impl usize>::saturating_sub(move _13, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = (_1.4: usize);
        _17 = ((*_2).4: usize);
        _15 = core::num::<impl usize>::saturating_sub(move _16, move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        _19 = (_1.5: usize);
        _20 = ((*_2).5: usize);
        _18 = core::num::<impl usize>::saturating_sub(move _19, move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = data::CpuTime { user: move _3, nice: move _6, system: move _9, interrupt: move _12, idle: move _15, other: move _18 };
        return;
    }
}

fn data::<impl at src/data.rs:148:1: 148:13>::to_cpuload(_1: &data::CpuTime) -> data::CPULoad {
    debug self => _1;
    let mut _0: data::CPULoad;
    let _2: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: (usize, bool);
    let mut _10: usize;
    let mut _11: (usize, bool);
    let mut _12: usize;
    let mut _13: (usize, bool);
    let mut _14: usize;
    let mut _15: (usize, bool);
    let mut _16: usize;
    let mut _17: (usize, bool);
    let mut _18: data::PlatformCpuLoad;
    let mut _19: f32;
    let mut _20: f32;
    let mut _21: usize;
    let mut _22: f32;
    let mut _23: f32;
    let mut _24: f32;
    let mut _25: usize;
    let mut _26: f32;
    let mut _27: f32;
    let mut _28: f32;
    let mut _29: usize;
    let mut _30: f32;
    let mut _31: f32;
    let mut _32: f32;
    let mut _33: usize;
    let mut _34: f32;
    let mut _35: f32;
    let mut _36: f32;
    let mut _37: usize;
    let mut _38: f32;
    let mut _39: data::PlatformCpuLoad;
    let mut _40: f32;
    let mut _41: f32;
    let mut _42: usize;
    let mut _43: f32;
    scope 1 {
        debug total => _2;
    }

    bb0: {
        _7 = ((*_1).0: usize);
        _8 = ((*_1).1: usize);
        _9 = CheckedAdd(_7, _8);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _8) -> [success: bb1, unwind continue];
    }

    bb1: {
        _6 = move (_9.0: usize);
        _10 = ((*_1).2: usize);
        _11 = CheckedAdd(_6, _10);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, move _10) -> [success: bb2, unwind continue];
    }

    bb2: {
        _5 = move (_11.0: usize);
        _12 = ((*_1).3: usize);
        _13 = CheckedAdd(_5, _12);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, move _12) -> [success: bb3, unwind continue];
    }

    bb3: {
        _4 = move (_13.0: usize);
        _14 = ((*_1).4: usize);
        _15 = CheckedAdd(_4, _14);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _14) -> [success: bb4, unwind continue];
    }

    bb4: {
        _3 = move (_15.0: usize);
        _16 = ((*_1).5: usize);
        _17 = CheckedAdd(_3, _16);
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _16) -> [success: bb5, unwind continue];
    }

    bb5: {
        _2 = move (_17.0: usize);
        switchInt(move _2) -> [0: bb6, otherwise: bb8];
    }

    bb6: {
        _18 = PlatformCpuLoad::zero() -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = data::CPULoad { user: const 0f32, nice: const 0f32, system: const 0f32, interrupt: const 0f32, idle: const 0f32, platform: move _18 };
        goto -> bb10;
    }

    bb8: {
        _21 = ((*_1).0: usize);
        _20 = move _21 as f32 (IntToFloat);
        _22 = _2 as f32 (IntToFloat);
        _19 = Div(move _20, move _22);
        _25 = ((*_1).1: usize);
        _24 = move _25 as f32 (IntToFloat);
        _26 = _2 as f32 (IntToFloat);
        _23 = Div(move _24, move _26);
        _29 = ((*_1).2: usize);
        _28 = move _29 as f32 (IntToFloat);
        _30 = _2 as f32 (IntToFloat);
        _27 = Div(move _28, move _30);
        _33 = ((*_1).3: usize);
        _32 = move _33 as f32 (IntToFloat);
        _34 = _2 as f32 (IntToFloat);
        _31 = Div(move _32, move _34);
        _37 = ((*_1).4: usize);
        _36 = move _37 as f32 (IntToFloat);
        _38 = _2 as f32 (IntToFloat);
        _35 = Div(move _36, move _38);
        _42 = ((*_1).5: usize);
        _41 = move _42 as f32 (IntToFloat);
        _43 = _2 as f32 (IntToFloat);
        _40 = Div(move _41, move _43);
        _39 = PlatformCpuLoad::from(move _40) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = data::CPULoad { user: move _19, nice: move _23, system: move _27, interrupt: move _31, idle: move _35, platform: move _39 };
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn data::<impl at src/data.rs:174:10: 174:15>::fmt(_1: &data::LoadAverage, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &f32;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &f32;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&f32;
    let _13: &f32;

    bb0: {
        _3 = const "LoadAverage";
        _4 = const "one";
        _6 = &((*_1).0: f32);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "five";
        _9 = &((*_1).1: f32);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "fifteen";
        _13 = &((*_1).2: f32);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn data::<impl at src/data.rs:174:17: 174:22>::clone(_1: &data::LoadAverage) -> data::LoadAverage {
    debug self => _1;
    let mut _0: data::LoadAverage;
    let mut _2: f32;
    let _3: &f32;
    let mut _4: f32;
    let _5: &f32;
    let mut _6: f32;
    let _7: &f32;

    bb0: {
        _3 = &((*_1).0: f32);
        _2 = (*_3);
        _5 = &((*_1).1: f32);
        _4 = (*_5);
        _7 = &((*_1).2: f32);
        _6 = (*_7);
        _0 = data::LoadAverage { one: move _2, five: move _4, fifteen: move _6 };
        return;
    }
}

fn data::<impl at src/data.rs:232:10: 232:15>::fmt(_1: &data::PlatformMemory, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let _7: &std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;

    bb0: {
        _3 = const "PlatformMemory";
        _4 = const "meminfo";
        _7 = &((*_1).0: std::collections::BTreeMap<std::string::String, bytesize::ByteSize>);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn data::<impl at src/data.rs:232:17: 232:22>::clone(_1: &data::PlatformMemory) -> data::PlatformMemory {
    debug self => _1;
    let mut _0: data::PlatformMemory;
    let mut _2: std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;
    let _3: &std::collections::BTreeMap<std::string::String, bytesize::ByteSize>;

    bb0: {
        _3 = &((*_1).0: std::collections::BTreeMap<std::string::String, bytesize::ByteSize>);
        _2 = <std::collections::BTreeMap<String, bytesize::ByteSize> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = data::PlatformMemory { meminfo: move _2 };
        return;
    }
}

fn data::<impl at src/data.rs:238:10: 238:15>::fmt(_1: &data::Memory, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &bytesize::ByteSize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &bytesize::ByteSize;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&data::PlatformMemory;
    let _13: &data::PlatformMemory;

    bb0: {
        _3 = const "Memory";
        _4 = const "total";
        _6 = &((*_1).0: bytesize::ByteSize);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "free";
        _9 = &((*_1).1: bytesize::ByteSize);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "platform_memory";
        _13 = &((*_1).2: data::PlatformMemory);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn data::<impl at src/data.rs:238:17: 238:22>::clone(_1: &data::Memory) -> data::Memory {
    debug self => _1;
    let mut _0: data::Memory;
    let mut _2: bytesize::ByteSize;
    let _3: &bytesize::ByteSize;
    let mut _4: bytesize::ByteSize;
    let _5: &bytesize::ByteSize;
    let mut _6: data::PlatformMemory;
    let _7: &data::PlatformMemory;

    bb0: {
        _3 = &((*_1).0: bytesize::ByteSize);
        _2 = <bytesize::ByteSize as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: bytesize::ByteSize);
        _4 = <bytesize::ByteSize as Clone>::clone(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &((*_1).2: data::PlatformMemory);
        _6 = <data::PlatformMemory as Clone>::clone(_7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = data::Memory { total: move _2, free: move _4, platform_memory: move _6 };
        return;
    }
}

fn data::<impl at src/data.rs:246:10: 246:15>::fmt(_1: &data::BatteryLife, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &f32;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::time::Duration;
    let _10: &std::time::Duration;

    bb0: {
        _3 = const "BatteryLife";
        _4 = const "remaining_capacity";
        _6 = &((*_1).0: f32);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "remaining_time";
        _10 = &((*_1).1: std::time::Duration);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn data::<impl at src/data.rs:246:17: 246:22>::clone(_1: &data::BatteryLife) -> data::BatteryLife {
    debug self => _1;
    let mut _0: data::BatteryLife;
    let mut _2: f32;
    let _3: &f32;
    let mut _4: std::time::Duration;
    let _5: &std::time::Duration;

    bb0: {
        _3 = &((*_1).0: f32);
        _2 = (*_3);
        _5 = &((*_1).1: std::time::Duration);
        _4 = <std::time::Duration as Clone>::clone(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = data::BatteryLife { remaining_capacity: move _2, remaining_time: move _4 };
        return;
    }
}

fn data::<impl at src/data.rs:253:10: 253:15>::fmt(_1: &data::Filesystem, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 10];
    let _5: [&dyn std::fmt::Debug; 10];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &usize;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &usize;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &usize;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &bytesize::ByteSize;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &bytesize::ByteSize;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &bytesize::ByteSize;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &usize;
    let mut _20: &dyn std::fmt::Debug;
    let _21: &std::string::String;
    let mut _22: &dyn std::fmt::Debug;
    let _23: &std::string::String;
    let mut _24: &dyn std::fmt::Debug;
    let _25: &&std::string::String;
    let _26: &std::string::String;
    let _27: &str;
    let mut _28: &[&str];
    let mut _29: &[&str; 10];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _29 = const _;
        _7 = &((*_1).0: usize);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: usize);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: usize);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: bytesize::ByteSize);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: bytesize::ByteSize);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: bytesize::ByteSize);
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _19 = &((*_1).6: usize);
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _21 = &((*_1).7: std::string::String);
        _20 = _21 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _23 = &((*_1).8: std::string::String);
        _22 = _23 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _26 = &((*_1).9: std::string::String);
        _25 = &_26;
        _24 = _25 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _27 = const "Filesystem";
        _28 = _29 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _27, move _28, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in data::<impl at src/data.rs:253:10: 253:15>::fmt: &[&str; 10] = {
    let mut _0: &[&str; 10];
    let mut _1: [&str; 10];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: &str;
    let mut _19: &str;

    bb0: {
        _3 = const "files_total";
        _2 = &(*_3);
        _5 = const "files_avail";
        _4 = &(*_5);
        _7 = const "free";
        _6 = &(*_7);
        _9 = const "avail";
        _8 = &(*_9);
        _11 = const "total";
        _10 = &(*_11);
        _13 = const "name_max";
        _12 = &(*_13);
        _15 = const "fs_type";
        _14 = &(*_15);
        _17 = const "fs_mounted_from";
        _16 = &(*_17);
        _19 = const "fs_mounted_on";
        _18 = &(*_19);
        _1 = [const "files", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18];
        _0 = &_1;
        return;
    }
}

fn data::<impl at src/data.rs:253:17: 253:22>::clone(_1: &data::Filesystem) -> data::Filesystem {
    debug self => _1;
    let mut _0: data::Filesystem;
    let mut _2: usize;
    let _3: &usize;
    let mut _4: usize;
    let _5: &usize;
    let mut _6: usize;
    let _7: &usize;
    let mut _8: bytesize::ByteSize;
    let _9: &bytesize::ByteSize;
    let mut _10: bytesize::ByteSize;
    let _11: &bytesize::ByteSize;
    let mut _12: bytesize::ByteSize;
    let _13: &bytesize::ByteSize;
    let mut _14: usize;
    let _15: &usize;
    let mut _16: std::string::String;
    let _17: &std::string::String;
    let mut _18: std::string::String;
    let _19: &std::string::String;
    let mut _20: std::string::String;
    let _21: &std::string::String;

    bb0: {
        _3 = &((*_1).0: usize);
        _2 = (*_3);
        _5 = &((*_1).1: usize);
        _4 = (*_5);
        _7 = &((*_1).2: usize);
        _6 = (*_7);
        _9 = &((*_1).3: bytesize::ByteSize);
        _8 = <bytesize::ByteSize as Clone>::clone(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = &((*_1).4: bytesize::ByteSize);
        _10 = <bytesize::ByteSize as Clone>::clone(_11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _13 = &((*_1).5: bytesize::ByteSize);
        _12 = <bytesize::ByteSize as Clone>::clone(_13) -> [return: bb3, unwind continue];
    }

    bb3: {
        _15 = &((*_1).6: usize);
        _14 = (*_15);
        _17 = &((*_1).7: std::string::String);
        _16 = <String as Clone>::clone(_17) -> [return: bb4, unwind continue];
    }

    bb4: {
        _19 = &((*_1).8: std::string::String);
        _18 = <String as Clone>::clone(_19) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _21 = &((*_1).9: std::string::String);
        _20 = <String as Clone>::clone(_21) -> [return: bb6, unwind: bb7];
    }

    bb6: {
        _0 = data::Filesystem { files: move _2, files_total: move _4, files_avail: move _6, free: move _8, avail: move _10, total: move _12, name_max: move _14, fs_type: move _16, fs_mounted_from: move _18, fs_mounted_on: move _20 };
        return;
    }

    bb7 (cleanup): {
        drop(_18) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_16) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn data::<impl at src/data.rs:268:10: 268:15>::fmt(_1: &data::BlockDeviceStats, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 12];
    let _5: [&dyn std::fmt::Debug; 12];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &std::string::String;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &usize;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &usize;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &usize;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &usize;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &usize;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &usize;
    let mut _20: &dyn std::fmt::Debug;
    let _21: &usize;
    let mut _22: &dyn std::fmt::Debug;
    let _23: &usize;
    let mut _24: &dyn std::fmt::Debug;
    let _25: &usize;
    let mut _26: &dyn std::fmt::Debug;
    let _27: &usize;
    let mut _28: &dyn std::fmt::Debug;
    let _29: &&usize;
    let _30: &usize;
    let _31: &str;
    let mut _32: &[&str];
    let mut _33: &[&str; 12];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _33 = const _;
        _7 = &((*_1).0: std::string::String);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: usize);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: usize);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: usize);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: usize);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &((*_1).5: usize);
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _19 = &((*_1).6: usize);
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _21 = &((*_1).7: usize);
        _20 = _21 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _23 = &((*_1).8: usize);
        _22 = _23 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _25 = &((*_1).9: usize);
        _24 = _25 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _27 = &((*_1).10: usize);
        _26 = _27 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _30 = &((*_1).11: usize);
        _29 = &_30;
        _28 = _29 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22, move _24, move _26, move _28];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _31 = const "BlockDeviceStats";
        _32 = _33 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _31, move _32, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in data::<impl at src/data.rs:268:10: 268:15>::fmt: &[&str; 12] = {
    let mut _0: &[&str; 12];
    let mut _1: [&str; 12];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;
    let mut _12: &str;
    let mut _13: &str;
    let mut _14: &str;
    let mut _15: &str;
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: &str;
    let mut _19: &str;
    let mut _20: &str;
    let mut _21: &str;
    let mut _22: &str;
    let mut _23: &str;

    bb0: {
        _3 = const "read_ios";
        _2 = &(*_3);
        _5 = const "read_merges";
        _4 = &(*_5);
        _7 = const "read_sectors";
        _6 = &(*_7);
        _9 = const "read_ticks";
        _8 = &(*_9);
        _11 = const "write_ios";
        _10 = &(*_11);
        _13 = const "write_merges";
        _12 = &(*_13);
        _15 = const "write_sectors";
        _14 = &(*_15);
        _17 = const "write_ticks";
        _16 = &(*_17);
        _19 = const "in_flight";
        _18 = &(*_19);
        _21 = const "io_ticks";
        _20 = &(*_21);
        _23 = const "time_in_queue";
        _22 = &(*_23);
        _1 = [const "name", move _2, move _4, move _6, move _8, move _10, move _12, move _14, move _16, move _18, move _20, move _22];
        _0 = &_1;
        return;
    }
}

fn data::<impl at src/data.rs:268:17: 268:22>::clone(_1: &data::BlockDeviceStats) -> data::BlockDeviceStats {
    debug self => _1;
    let mut _0: data::BlockDeviceStats;
    let mut _2: std::string::String;
    let _3: &std::string::String;
    let mut _4: usize;
    let _5: &usize;
    let mut _6: usize;
    let _7: &usize;
    let mut _8: usize;
    let _9: &usize;
    let mut _10: usize;
    let _11: &usize;
    let mut _12: usize;
    let _13: &usize;
    let mut _14: usize;
    let _15: &usize;
    let mut _16: usize;
    let _17: &usize;
    let mut _18: usize;
    let _19: &usize;
    let mut _20: usize;
    let _21: &usize;
    let mut _22: usize;
    let _23: &usize;
    let mut _24: usize;
    let _25: &usize;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _2 = <String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: usize);
        _4 = (*_5);
        _7 = &((*_1).2: usize);
        _6 = (*_7);
        _9 = &((*_1).3: usize);
        _8 = (*_9);
        _11 = &((*_1).4: usize);
        _10 = (*_11);
        _13 = &((*_1).5: usize);
        _12 = (*_13);
        _15 = &((*_1).6: usize);
        _14 = (*_15);
        _17 = &((*_1).7: usize);
        _16 = (*_17);
        _19 = &((*_1).8: usize);
        _18 = (*_19);
        _21 = &((*_1).9: usize);
        _20 = (*_21);
        _23 = &((*_1).10: usize);
        _22 = (*_23);
        _25 = &((*_1).11: usize);
        _24 = (*_25);
        _0 = data::BlockDeviceStats { name: move _2, read_ios: move _4, read_merges: move _6, read_sectors: move _8, read_ticks: move _10, write_ios: move _12, write_merges: move _14, write_sectors: move _16, write_ticks: move _18, in_flight: move _20, io_ticks: move _22, time_in_queue: move _24 };
        return;
    }
}

fn data::<impl at src/data.rs:285:10: 285:15>::fmt(_1: &data::IpAddr, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &str;
    let _5: &str;
    let _6: &std::net::Ipv4Addr;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::net::Ipv4Addr;
    let _10: &std::net::Ipv6Addr;
    let _11: &str;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &&std::net::Ipv6Addr;
    scope 1 {
        debug __self_0 => _6;
    }
    scope 2 {
        debug __self_0 => _10;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _10 = &(((*_1) as V6).0: std::net::Ipv6Addr);
        _11 = const "V6";
        _13 = &_10;
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _11, move _12) -> [return: bb6, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = const "Empty";
        _0 = Formatter::<'_>::write_str(_2, _4) -> [return: bb6, unwind continue];
    }

    bb4: {
        _5 = const "Unsupported";
        _0 = Formatter::<'_>::write_str(_2, _5) -> [return: bb6, unwind continue];
    }

    bb5: {
        _6 = &(((*_1) as V4).0: std::net::Ipv4Addr);
        _7 = const "V4";
        _9 = &_6;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _7, move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn data::<impl at src/data.rs:285:17: 285:22>::clone(_1: &data::IpAddr) -> data::IpAddr {
    debug self => _1;
    let mut _0: data::IpAddr;
    let mut _2: isize;
    let _3: &std::net::Ipv4Addr;
    let mut _4: std::net::Ipv4Addr;
    let _5: &std::net::Ipv6Addr;
    let mut _6: std::net::Ipv6Addr;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _5;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as V6).0: std::net::Ipv6Addr);
        _6 = <std::net::Ipv6Addr as Clone>::clone(_5) -> [return: bb7, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = data::IpAddr::Empty;
        goto -> bb8;
    }

    bb4: {
        _0 = data::IpAddr::Unsupported;
        goto -> bb8;
    }

    bb5: {
        _3 = &(((*_1) as V4).0: std::net::Ipv4Addr);
        _4 = <std::net::Ipv4Addr as Clone>::clone(_3) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = data::IpAddr::V4(move _4);
        goto -> bb8;
    }

    bb7: {
        _0 = data::IpAddr::V6(move _6);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn data::<impl at src/data.rs:285:24: 285:33>::eq(_1: &data::IpAddr, _2: &data::IpAddr) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&data::IpAddr, &data::IpAddr);
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _14: &data::IpAddr;
    let mut _15: &data::IpAddr;
    let mut _16: &data::IpAddr;
    let mut _17: &data::IpAddr;
    let mut _18: &data::IpAddr;
    let mut _19: &data::IpAddr;
    let mut _20: &data::IpAddr;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &std::net::Ipv4Addr;
            let _11: &std::net::Ipv4Addr;
            let _12: &std::net::Ipv6Addr;
            let _13: &std::net::Ipv6Addr;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
            scope 4 {
                debug __self_0 => _12;
                debug __arg1_0 => _13;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _14 = deref_copy (_6.0: &data::IpAddr);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [2: bb4, 3: bb5, otherwise: bb3];
    }

    bb2: {
        _0 = const false;
        goto -> bb8;
    }

    bb3: {
        _0 = const true;
        goto -> bb8;
    }

    bb4: {
        _15 = deref_copy (_6.1: &data::IpAddr);
        _7 = discriminant((*_15));
        switchInt(move _7) -> [2: bb6, otherwise: bb3];
    }

    bb5: {
        _16 = deref_copy (_6.1: &data::IpAddr);
        _8 = discriminant((*_16));
        switchInt(move _8) -> [3: bb7, otherwise: bb3];
    }

    bb6: {
        _17 = deref_copy (_6.0: &data::IpAddr);
        _10 = &(((*_17) as V4).0: std::net::Ipv4Addr);
        _18 = deref_copy (_6.1: &data::IpAddr);
        _11 = &(((*_18) as V4).0: std::net::Ipv4Addr);
        _0 = <std::net::Ipv4Addr as PartialEq>::eq(_10, _11) -> [return: bb8, unwind continue];
    }

    bb7: {
        _19 = deref_copy (_6.0: &data::IpAddr);
        _12 = &(((*_19) as V6).0: std::net::Ipv6Addr);
        _20 = deref_copy (_6.1: &data::IpAddr);
        _13 = &(((*_20) as V6).0: std::net::Ipv6Addr);
        _0 = <std::net::Ipv6Addr as PartialEq>::eq(_12, _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

fn data::<impl at src/data.rs:294:10: 294:15>::fmt(_1: &data::NetworkAddrs, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &data::IpAddr;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&data::IpAddr;
    let _10: &data::IpAddr;

    bb0: {
        _3 = const "NetworkAddrs";
        _4 = const "addr";
        _6 = &((*_1).0: data::IpAddr);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "netmask";
        _10 = &((*_1).1: data::IpAddr);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn data::<impl at src/data.rs:294:17: 294:22>::clone(_1: &data::NetworkAddrs) -> data::NetworkAddrs {
    debug self => _1;
    let mut _0: data::NetworkAddrs;
    let mut _2: data::IpAddr;
    let _3: &data::IpAddr;
    let mut _4: data::IpAddr;
    let _5: &data::IpAddr;

    bb0: {
        _3 = &((*_1).0: data::IpAddr);
        _2 = <data::IpAddr as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: data::IpAddr);
        _4 = <data::IpAddr as Clone>::clone(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = data::NetworkAddrs { addr: move _2, netmask: move _4 };
        return;
    }
}

fn data::<impl at src/data.rs:301:10: 301:15>::fmt(_1: &data::Network, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::vec::Vec<data::NetworkAddrs>;
    let _10: &std::vec::Vec<data::NetworkAddrs>;

    bb0: {
        _3 = const "Network";
        _4 = const "name";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "addrs";
        _10 = &((*_1).1: std::vec::Vec<data::NetworkAddrs>);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn data::<impl at src/data.rs:301:17: 301:22>::clone(_1: &data::Network) -> data::Network {
    debug self => _1;
    let mut _0: data::Network;
    let mut _2: std::string::String;
    let _3: &std::string::String;
    let mut _4: std::vec::Vec<data::NetworkAddrs>;
    let _5: &std::vec::Vec<data::NetworkAddrs>;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _2 = <String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::vec::Vec<data::NetworkAddrs>);
        _4 = <Vec<data::NetworkAddrs> as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = data::Network { name: move _2, addrs: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn data::<impl at src/data.rs:308:10: 308:15>::fmt(_1: &data::NetworkStats, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _4: &[&dyn std::fmt::Debug; 6];
    let _5: [&dyn std::fmt::Debug; 6];
    let mut _6: &dyn std::fmt::Debug;
    let _7: &bytesize::ByteSize;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &bytesize::ByteSize;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &u64;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &u64;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &u64;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &&u64;
    let _18: &u64;
    let _19: &str;
    let mut _20: &[&str];
    let mut _21: &[&str; 6];
    scope 1 {
        debug names => const _;
        let _3: &[&dyn std::fmt::Debug];
        scope 2 {
            debug values => _3;
        }
    }

    bb0: {
        _21 = const _;
        _7 = &((*_1).0: bytesize::ByteSize);
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _9 = &((*_1).1: bytesize::ByteSize);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _11 = &((*_1).2: u64);
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = &((*_1).3: u64);
        _12 = _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _15 = &((*_1).4: u64);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _18 = &((*_1).5: u64);
        _17 = &_18;
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _5 = [move _6, move _8, move _10, move _12, move _14, move _16];
        _4 = &_5;
        _3 = _4 as &[&dyn std::fmt::Debug] (PointerCoercion(Unsize));
        _19 = const "NetworkStats";
        _20 = _21 as &[&str] (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_fields_finish(_2, _19, move _20, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in data::<impl at src/data.rs:308:10: 308:15>::fmt: &[&str; 6] = {
    let mut _0: &[&str; 6];
    let mut _1: [&str; 6];
    let mut _2: &str;
    let mut _3: &str;
    let mut _4: &str;
    let mut _5: &str;
    let mut _6: &str;
    let mut _7: &str;
    let mut _8: &str;
    let mut _9: &str;
    let mut _10: &str;
    let mut _11: &str;

    bb0: {
        _3 = const "tx_bytes";
        _2 = &(*_3);
        _5 = const "rx_packets";
        _4 = &(*_5);
        _7 = const "tx_packets";
        _6 = &(*_7);
        _9 = const "rx_errors";
        _8 = &(*_9);
        _11 = const "tx_errors";
        _10 = &(*_11);
        _1 = [const "rx_bytes", move _2, move _4, move _6, move _8, move _10];
        _0 = &_1;
        return;
    }
}

fn data::<impl at src/data.rs:308:17: 308:22>::clone(_1: &data::NetworkStats) -> data::NetworkStats {
    debug self => _1;
    let mut _0: data::NetworkStats;
    let mut _2: bytesize::ByteSize;
    let _3: &bytesize::ByteSize;
    let mut _4: bytesize::ByteSize;
    let _5: &bytesize::ByteSize;
    let mut _6: u64;
    let _7: &u64;
    let mut _8: u64;
    let _9: &u64;
    let mut _10: u64;
    let _11: &u64;
    let mut _12: u64;
    let _13: &u64;

    bb0: {
        _3 = &((*_1).0: bytesize::ByteSize);
        _2 = <bytesize::ByteSize as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: bytesize::ByteSize);
        _4 = <bytesize::ByteSize as Clone>::clone(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &((*_1).2: u64);
        _6 = (*_7);
        _9 = &((*_1).3: u64);
        _8 = (*_9);
        _11 = &((*_1).4: u64);
        _10 = (*_11);
        _13 = &((*_1).5: u64);
        _12 = (*_13);
        _0 = data::NetworkStats { rx_bytes: move _2, tx_bytes: move _4, rx_packets: move _6, tx_packets: move _8, rx_errors: move _10, tx_errors: move _12 };
        return;
    }
}

fn data::<impl at src/data.rs:319:10: 319:15>::fmt(_1: &data::SocketStats, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &usize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &usize;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &usize;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &usize;
    let _16: &str;
    let mut _17: &dyn std::fmt::Debug;
    let _18: &&usize;
    let _19: &usize;

    bb0: {
        _3 = const "SocketStats";
        _4 = const "tcp_sockets_in_use";
        _6 = &((*_1).0: usize);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "tcp_sockets_orphaned";
        _9 = &((*_1).1: usize);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "udp_sockets_in_use";
        _12 = &((*_1).2: usize);
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = const "tcp6_sockets_in_use";
        _15 = &((*_1).3: usize);
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _16 = const "udp6_sockets_in_use";
        _19 = &((*_1).4: usize);
        _18 = &_19;
        _17 = _18 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = Formatter::<'_>::debug_struct_field5_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14, _16, move _17) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn data::<impl at src/data.rs:319:17: 319:22>::clone(_1: &data::SocketStats) -> data::SocketStats {
    debug self => _1;
    let mut _0: data::SocketStats;
    let mut _2: usize;
    let _3: &usize;
    let mut _4: usize;
    let _5: &usize;
    let mut _6: usize;
    let _7: &usize;
    let mut _8: usize;
    let _9: &usize;
    let mut _10: usize;
    let _11: &usize;

    bb0: {
        _3 = &((*_1).0: usize);
        _2 = (*_3);
        _5 = &((*_1).1: usize);
        _4 = (*_5);
        _7 = &((*_1).2: usize);
        _6 = (*_7);
        _9 = &((*_1).3: usize);
        _8 = (*_9);
        _11 = &((*_1).4: usize);
        _10 = (*_11);
        _0 = data::SocketStats { tcp_sockets_in_use: move _2, tcp_sockets_orphaned: move _4, udp_sockets_in_use: move _6, tcp6_sockets_in_use: move _8, udp6_sockets_in_use: move _10 };
        return;
    }
}

fn data::IpAddr::V4(_1: std::net::Ipv4Addr) -> data::IpAddr {
    let mut _0: data::IpAddr;

    bb0: {
        _0 = data::IpAddr::V4(move _1);
        return;
    }
}

// MIR FOR CTFE
fn data::IpAddr::V4(_1: std::net::Ipv4Addr) -> data::IpAddr {
    let mut _0: data::IpAddr;

    bb0: {
        _0 = data::IpAddr::V4(move _1);
        return;
    }
}

fn data::IpAddr::V6(_1: std::net::Ipv6Addr) -> data::IpAddr {
    let mut _0: data::IpAddr;

    bb0: {
        _0 = data::IpAddr::V6(move _1);
        return;
    }
}

// MIR FOR CTFE
fn data::IpAddr::V6(_1: std::net::Ipv6Addr) -> data::IpAddr {
    let mut _0: data::IpAddr;

    bb0: {
        _0 = data::IpAddr::V6(move _1);
        return;
    }
}
