// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static ALLOC: Jemalloc = {
    let mut _0: jemallocator::Jemalloc;

    bb0: {
        _0 = Jemalloc;
        return;
    }
}

const _: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn __rust_alloc(_1: usize, _2: usize) -> *mut u8 {
    debug size => _1;
    debug align => _2;
    let mut _0: *mut u8;
    let _3: &jemallocator::Jemalloc;
    let mut _4: std::alloc::Layout;

    bb0: {
        _3 = const {alloc1: &Jemalloc};
        _4 = Layout::from_size_align_unchecked(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Jemalloc as GlobalAlloc>::alloc(_3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc1 (static: ALLOC, size: 0, align: 1) {}

fn __rust_dealloc(_1: *mut u8, _2: usize, _3: usize) -> () {
    debug ptr => _1;
    debug size => _2;
    debug align => _3;
    let mut _0: ();
    let _4: &jemallocator::Jemalloc;
    let mut _5: std::alloc::Layout;

    bb0: {
        _4 = const {alloc1: &Jemalloc};
        _5 = Layout::from_size_align_unchecked(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Jemalloc as GlobalAlloc>::dealloc(_4, _1, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc1 (static: ALLOC, size: 0, align: 1) {}

fn __rust_realloc(_1: *mut u8, _2: usize, _3: usize, _4: usize) -> *mut u8 {
    debug ptr => _1;
    debug size => _2;
    debug align => _3;
    debug new_size => _4;
    let mut _0: *mut u8;
    let _5: &jemallocator::Jemalloc;
    let mut _6: std::alloc::Layout;

    bb0: {
        _5 = const {alloc1: &Jemalloc};
        _6 = Layout::from_size_align_unchecked(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Jemalloc as GlobalAlloc>::realloc(_5, _1, move _6, _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc1 (static: ALLOC, size: 0, align: 1) {}

fn __rust_alloc_zeroed(_1: usize, _2: usize) -> *mut u8 {
    debug size => _1;
    debug align => _2;
    let mut _0: *mut u8;
    let _3: &jemallocator::Jemalloc;
    let mut _4: std::alloc::Layout;

    bb0: {
        _3 = const {alloc1: &Jemalloc};
        _4 = Layout::from_size_align_unchecked(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Jemalloc as GlobalAlloc>::alloc_zeroed(_3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc1 (static: ALLOC, size: 0, align: 1) {}

fn main() -> () {
    let mut _0: ();
    let _1: ckb_build_info::Version;
    let mut _2: std::option::Option<ckb_app_config::exit_code::ExitCode>;
    let mut _3: std::result::Result<(), ckb_app_config::exit_code::ExitCode>;
    let mut _4: isize;
    let _6: !;
    let mut _7: i32;
    scope 1 {
        debug version => _1;
        scope 2 {
            debug exit_code => _5;
            let _5: ckb_app_config::exit_code::ExitCode;
        }
    }

    bb0: {
        _1 = get_version() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = run_app(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = Result::<(), ckb_app_config::exit_code::ExitCode>::err(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = discriminant(_2);
        switchInt(move _4) -> [1: bb4, otherwise: bb6];
    }

    bb4: {
        _5 = ((_2 as Some).0: ckb_app_config::exit_code::ExitCode);
        _7 = ckb_app_config::exit_code::ExitCode::into(_5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = exit(move _7) -> unwind continue;
    }

    bb6: {
        return;
    }
}

fn get_version() -> Version {
    let mut _0: ckb_build_info::Version;
    let _1: u8;
    let mut _2: std::result::Result<u8, std::num::ParseIntError>;
    let _3: &str;
    let _4: &str;
    let mut _6: std::result::Result<u8, std::num::ParseIntError>;
    let _7: &str;
    let _8: &str;
    let mut _10: std::result::Result<u16, std::num::ParseIntError>;
    let _11: &str;
    let _12: &str;
    let mut _15: bool;
    let mut _16: &&str;
    let mut _17: &str;
    let mut _18: std::string::String;
    let _19: &str;
    let mut _20: &str;
    let mut _22: std::option::Option<&str>;
    let mut _24: std::option::Option<&str>;
    let mut _26: std::string::String;
    let mut _27: std::option::Option<std::string::String>;
    scope 1 {
        debug major => _1;
        let _5: u8;
        scope 2 {
            debug minor => _5;
            let _9: u16;
            scope 3 {
                debug patch => _9;
                let _13: std::string::String;
                let _14: &str;
                scope 4 {
                    debug dash_pre => _13;
                    let _21: std::option::Option<std::string::String>;
                    scope 6 {
                        debug commit_describe => _21;
                        let _23: std::option::Option<std::string::String>;
                        scope 7 {
                            debug commit_date => _23;
                            let _25: std::option::Option<std::string::String>;
                            scope 8 {
                                debug code_name => _25;
                            }
                        }
                    }
                }
                scope 5 {
                    debug pre => const "pre";
                    let mut _28: &&str;
                }
            }
        }
    }

    bb0: {
        _3 = const "0";
        _2 = core::str::<impl str>::parse::<u8>(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = const "CARGO_PKG_VERSION_MAJOR parse success";
        _1 = Result::<u8, ParseIntError>::expect(move _2, _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = const "27";
        _6 = core::str::<impl str>::parse::<u8>(_7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = const "CARGO_PKG_VERSION_MINOR parse success";
        _5 = Result::<u8, ParseIntError>::expect(move _6, _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = const "0";
        _10 = core::str::<impl str>::parse::<u16>(_11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = const "CARGO_PKG_VERSION_PATCH parse success";
        _9 = Result::<u16, ParseIntError>::expect(move _10, _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _14 = const "pre";
        _16 = &_14;
        _28 = const _;
        _15 = <&str as PartialEq>::eq(move _16, _28) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _15) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _17 = _14;
        _13 = <str as ToString>::to_string(move _17) -> [return: bb11, unwind continue];
    }

    bb9: {
        _19 = const "-";
        _18 = <str as ToString>::to_string(_19) -> [return: bb10, unwind continue];
    }

    bb10: {
        _20 = _14;
        _13 = <String as Add<&str>>::add(move _18, move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        _22 = Option::<&str>::Some(const "");
        _21 = Option::<&str>::map::<String, for<'a> fn(&'a str) -> String {<str as ToString>::to_string}>(move _22, <str as ToString>::to_string) -> [return: bb12, unwind: bb15];
    }

    bb12: {
        _24 = Option::<&str>::Some(const "");
        _23 = Option::<&str>::map::<String, for<'a> fn(&'a str) -> String {<str as ToString>::to_string}>(move _24, <str as ToString>::to_string) -> [return: bb13, unwind: bb14];
    }

    bb13: {
        _25 = Option::<String>::None;
        _26 = move _13;
        _27 = move _21;
        _0 = Version { major: _1, minor: _5, patch: _9, dash_pre: move _26, code_name: move _25, commit_describe: move _27, commit_date: move _23 };
        return;
    }

    bb14 (cleanup): {
        drop(_21) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_13) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        resume;
    }
}

promoted[0] in get_version: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "";
        _0 = &_1;
        return;
    }
}
