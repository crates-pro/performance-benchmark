// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn error::<impl at sdk/client/src/error.rs:16:10: 16:15>::fmt(_1: &error::Error, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&std::boxed::Box<error::Inner>;
    let _7: &std::boxed::Box<error::Inner>;

    bb0: {
        _3 = const "Error";
        _4 = const "inner";
        _7 = &((*_1).0: std::boxed::Box<error::Inner>);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:23:10: 23:15>::fmt(_1: &Inner, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &error::Kind;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::option::Option<std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&std::option::Option<diem_json_rpc_types::errors::JsonRpcError>;
    let _13: &std::option::Option<diem_json_rpc_types::errors::JsonRpcError>;

    bb0: {
        _3 = const "Inner";
        _4 = const "kind";
        _6 = &((*_1).0: error::Kind);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "source";
        _9 = &((*_1).1: std::option::Option<std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "json_rpc_error";
        _13 = &((*_1).2: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:30:10: 30:15>::fmt(_1: &error::Kind, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &u16;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&u16;
    let _8: &str;
    let _9: &str;
    let _10: &str;
    let _11: &str;
    let _12: &str;
    let _13: &str;
    let _14: &str;
    let _15: &str;
    let _16: &str;
    let _17: &str;
    let _18: &str;
    scope 1 {
        debug __self_0 => _4;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb1, otherwise: bb2];
    }

    bb1: {
        _18 = const "Unknown";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _18) -> [return: bb14, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as HttpStatus).0: u16);
        _5 = const "HttpStatus";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb14, unwind continue];
    }

    bb4: {
        _8 = const "Timeout";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _8) -> [return: bb14, unwind continue];
    }

    bb5: {
        _9 = const "Request";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _9) -> [return: bb14, unwind continue];
    }

    bb6: {
        _10 = const "JsonRpcError";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _10) -> [return: bb14, unwind continue];
    }

    bb7: {
        _11 = const "RpcResponse";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _11) -> [return: bb14, unwind continue];
    }

    bb8: {
        _12 = const "ChainId";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _12) -> [return: bb14, unwind continue];
    }

    bb9: {
        _13 = const "StaleResponse";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _13) -> [return: bb14, unwind continue];
    }

    bb10: {
        _14 = const "Batch";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _14) -> [return: bb14, unwind continue];
    }

    bb11: {
        _15 = const "Decode";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _15) -> [return: bb14, unwind continue];
    }

    bb12: {
        _16 = const "InvalidProof";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _16) -> [return: bb14, unwind continue];
    }

    bb13: {
        _17 = const "NeedSync";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _17) -> [return: bb14, unwind continue];
    }

    bb14: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::json_rpc_error(_1: &error::Error) -> std::option::Option<&JsonRpcError> {
    debug self => _1;
    let mut _0: std::option::Option<&diem_json_rpc_types::errors::JsonRpcError>;
    let mut _2: &std::option::Option<diem_json_rpc_types::errors::JsonRpcError>;
    let mut _3: std::boxed::Box<error::Inner>;
    let mut _4: *const error::Inner;

    bb0: {
        _3 = deref_copy ((*_1).0: std::boxed::Box<error::Inner>);
        _4 = (((_3.0: std::ptr::Unique<error::Inner>).0: std::ptr::NonNull<error::Inner>).0: *const error::Inner);
        _2 = &((*_4).2: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>);
        _0 = std::option::Option::<JsonRpcError>::as_ref(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::is_retriable(_1: &error::Error) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: isize;
    let _3: u16;
    let _4: &u16;
    let mut _6: std::boxed::Box<error::Inner>;
    let mut _7: std::boxed::Box<error::Inner>;
    let mut _8: *const error::Inner;
    let mut _9: *const error::Inner;
    let mut _10: *const ();
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    scope 1 {
        debug status => _3;
        let mut _5: &std::ops::RangeInclusive<u16>;
    }

    bb0: {
        _6 = deref_copy ((*_1).0: std::boxed::Box<error::Inner>);
        _8 = (((_6.0: std::ptr::Unique<error::Inner>).0: std::ptr::NonNull<error::Inner>).0: *const error::Inner);
        _2 = discriminant(((*_8).0: error::Kind));
        switchInt(move _2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb4, 4: bb4, 5: bb4, 6: bb3, 7: bb4, 8: bb4, 9: bb4, 10: bb3, 11: bb4, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _7 = deref_copy ((*_1).0: std::boxed::Box<error::Inner>);
        _9 = (((_7.0: std::ptr::Unique<error::Inner>).0: std::ptr::NonNull<error::Inner>).0: *const error::Inner);
        _10 = _9 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(error::Inner);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb6, unwind unreachable];
    }

    bb3: {
        _0 = const true;
        goto -> bb5;
    }

    bb4: {
        _0 = const false;
        goto -> bb5;
    }

    bb5: {
        return;
    }

    bb6: {
        _3 = ((((*_9).0: error::Kind) as HttpStatus).0: u16);
        _5 = const _;
        _4 = &_3;
        _0 = RangeInclusive::<u16>::contains::<u16>(_5, _4) -> [return: bb5, unwind continue];
    }
}

promoted[0] in error::<impl at sdk/client/src/error.rs:46:1: 46:11>::is_retriable: &RangeInclusive<u16> = {
    let mut _0: &std::ops::RangeInclusive<u16>;
    let mut _1: std::ops::RangeInclusive<u16>;

    bb0: {
        _1 = RangeInclusive::<u16>::new(const 500_u16, const 599_u16) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::is_need_sync(_1: &error::Error) -> bool {
    debug self => _1;
    let mut _0: bool;
    let mut _2: isize;
    let mut _3: std::boxed::Box<error::Inner>;
    let mut _4: *const error::Inner;

    bb0: {
        _3 = deref_copy ((*_1).0: std::boxed::Box<error::Inner>);
        _4 = (((_3.0: std::ptr::Unique<error::Inner>).0: std::ptr::NonNull<error::Inner>).0: *const error::Inner);
        _2 = discriminant(((*_4).0: error::Kind));
        _0 = Eq(_2, const 10_isize);
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::new(_1: error::Kind, _2: std::option::Option<E>) -> error::Error {
    debug kind => _1;
    debug source => _2;
    let mut _0: error::Error;
    let mut _3: std::boxed::Box<error::Inner>;
    let mut _4: error::Inner;
    let mut _5: std::option::Option<std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>;
    let mut _6: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>;

    bb0: {
        _5 = std::option::Option::<E>::map::<Box<dyn StdError + std::marker::Send + Sync>, fn(E) -> Box<dyn StdError + std::marker::Send + Sync> {<E as Into<Box<dyn StdError + std::marker::Send + Sync>>>::into}>(move _2, <E as Into<Box<dyn StdError + std::marker::Send + Sync>>>::into) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = std::option::Option::<JsonRpcError>::None;
        _4 = Inner { kind: move _1, source: move _5, json_rpc_error: move _6 };
        _3 = Box::<Inner>::new(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = error::Error { inner: move _3 };
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::with_json_rpc_error(_1: error::Error, _2: JsonRpcError) -> error::Error {
    debug self => _1;
    debug json_rpc_error => _2;
    let mut _0: error::Error;
    let mut _3: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>;
    let mut _4: std::boxed::Box<error::Inner>;
    let mut _5: std::boxed::Box<error::Inner>;
    let mut _6: std::boxed::Box<error::Inner>;
    let mut _7: *const error::Inner;
    let mut _8: *const error::Inner;
    let mut _9: *const error::Inner;
    let mut _10: *const ();
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _16: *const ();
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: bool;

    bb0: {
        _3 = std::option::Option::<JsonRpcError>::Some(move _2);
        _4 = deref_copy (_1.0: std::boxed::Box<error::Inner>);
        _7 = (((_4.0: std::ptr::Unique<error::Inner>).0: std::ptr::NonNull<error::Inner>).0: *const error::Inner);
        drop(((*_7).2: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>)) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _5 = deref_copy (_1.0: std::boxed::Box<error::Inner>);
        _8 = (((_5.0: std::ptr::Unique<error::Inner>).0: std::ptr::NonNull<error::Inner>).0: *const error::Inner);
        _16 = _8 as *const () (PtrToPtr);
        _17 = _16 as usize (Transmute);
        _18 = AlignOf(error::Inner);
        _19 = Sub(_18, const 1_usize);
        _20 = BitAnd(_17, _19);
        _21 = Eq(_20, const 0_usize);
        assert(_21, "misaligned pointer dereference: address must be a multiple of {} but is {}", _18, _17) -> [success: bb5, unwind unreachable];
    }

    bb2 (cleanup): {
        _6 = deref_copy (_1.0: std::boxed::Box<error::Inner>);
        _9 = (((_6.0: std::ptr::Unique<error::Inner>).0: std::ptr::NonNull<error::Inner>).0: *const error::Inner);
        _10 = _9 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(error::Inner);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb4, unwind unreachable];
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        ((*_9).2: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>) = move _3;
        drop(_1) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb5: {
        ((*_8).2: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>) = move _3;
        _0 = move _1;
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::status(_1: u16) -> error::Error {
    debug status => _1;
    let mut _0: error::Error;
    let mut _2: error::Kind;
    let mut _3: std::option::Option<error::Error>;

    bb0: {
        _2 = error::Kind::HttpStatus(_1);
        _3 = std::option::Option::<error::Error>::None;
        _0 = error::Error::new::<error::Error>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::timeout(_1: E) -> error::Error {
    debug e => _1;
    let mut _0: error::Error;
    let mut _2: error::Kind;
    let mut _3: std::option::Option<E>;

    bb0: {
        _2 = error::Kind::Timeout;
        _3 = std::option::Option::<E>::Some(move _1);
        _0 = error::Error::new::<E>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::json_rpc(_1: JsonRpcError) -> error::Error {
    debug json_rpc_error => _1;
    let mut _0: error::Error;
    let mut _2: error::Error;
    let mut _3: error::Kind;
    let mut _4: std::option::Option<error::Error>;
    let mut _5: diem_json_rpc_types::errors::JsonRpcError;
    let mut _6: bool;

    bb0: {
        _6 = const false;
        _6 = const true;
        _3 = error::Kind::JsonRpcError;
        _4 = std::option::Option::<error::Error>::None;
        _2 = error::Error::new::<error::Error>(move _3, move _4) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = const false;
        _5 = move _1;
        _0 = error::Error::with_json_rpc_error(move _2, move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        switchInt(_6) -> [0: bb3, otherwise: bb4];
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::rpc_response(_1: E) -> error::Error {
    debug e => _1;
    let mut _0: error::Error;
    let mut _2: error::Kind;
    let mut _3: std::option::Option<E>;

    bb0: {
        _2 = error::Kind::RpcResponse;
        _3 = std::option::Option::<E>::Some(move _1);
        _0 = error::Error::new::<E>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::batch(_1: E) -> error::Error {
    debug e => _1;
    let mut _0: error::Error;
    let mut _2: error::Kind;
    let mut _3: std::option::Option<E>;

    bb0: {
        _2 = error::Kind::Batch;
        _3 = std::option::Option::<E>::Some(move _1);
        _0 = error::Error::new::<E>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::decode(_1: E) -> error::Error {
    debug e => _1;
    let mut _0: error::Error;
    let mut _2: error::Kind;
    let mut _3: std::option::Option<E>;

    bb0: {
        _2 = error::Kind::Decode;
        _3 = std::option::Option::<E>::Some(move _1);
        _0 = error::Error::new::<E>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::encode(_1: E) -> error::Error {
    debug e => _1;
    let mut _0: error::Error;
    let mut _2: error::Kind;
    let mut _3: std::option::Option<E>;

    bb0: {
        _2 = error::Kind::Decode;
        _3 = std::option::Option::<E>::Some(move _1);
        _0 = error::Error::new::<E>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::invalid_proof(_1: E) -> error::Error {
    debug e => _1;
    let mut _0: error::Error;
    let mut _2: error::Kind;
    let mut _3: std::option::Option<E>;

    bb0: {
        _2 = error::Kind::InvalidProof;
        _3 = std::option::Option::<E>::Some(move _1);
        _0 = error::Error::new::<E>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::need_sync(_1: E) -> error::Error {
    debug e => _1;
    let mut _0: error::Error;
    let mut _2: error::Kind;
    let mut _3: std::option::Option<E>;

    bb0: {
        _2 = error::Kind::NeedSync;
        _3 = std::option::Option::<E>::Some(move _1);
        _0 = error::Error::new::<E>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::unknown(_1: E) -> error::Error {
    debug e => _1;
    let mut _0: error::Error;
    let mut _2: error::Kind;
    let mut _3: std::option::Option<E>;

    bb0: {
        _2 = error::Kind::Unknown;
        _3 = std::option::Option::<E>::Some(move _1);
        _0 = error::Error::new::<E>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::request(_1: E) -> error::Error {
    debug e => _1;
    let mut _0: error::Error;
    let mut _2: error::Kind;
    let mut _3: std::option::Option<E>;

    bb0: {
        _2 = error::Kind::Request;
        _3 = std::option::Option::<E>::Some(move _1);
        _0 = error::Error::new::<E>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::chain_id(_1: u8, _2: u8) -> error::Error {
    debug expected => _1;
    debug recieved => _2;
    let mut _0: error::Error;
    let mut _3: error::Kind;
    let mut _4: std::option::Option<std::string::String>;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 2];
    let _10: [core::fmt::rt::Argument<'_>; 2];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &u8;
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &u8;
    let mut _15: &[&str; 2];
    scope 1 {
        debug res => _5;
    }

    bb0: {
        _3 = error::Kind::ChainId;
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _12 = &_1;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<u8>(_12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _14 = &_2;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<u8>(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = [move _11, move _13];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = format(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = std::option::Option::<std::string::String>::Some(move _5);
        _0 = error::Error::new::<std::string::String>(move _3, move _4) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

promoted[0] in error::<impl at sdk/client/src/error.rs:46:1: 46:11>::chain_id: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "expected: ", const " recieved: "];
        _0 = &_1;
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::stale(_1: E) -> error::Error {
    debug e => _1;
    let mut _0: error::Error;
    let mut _2: error::Kind;
    let mut _3: std::option::Option<E>;

    bb0: {
        _2 = error::Kind::StaleResponse;
        _3 = std::option::Option::<E>::Some(move _1);
        _0 = error::Error::new::<E>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:46:1: 46:11>::from_reqwest_error(_1: reqwest::Error) -> error::Error {
    debug e => _1;
    let mut _0: error::Error;
    let mut _2: bool;
    let mut _3: &reqwest::Error;
    let mut _4: reqwest::Error;
    let mut _5: bool;
    let mut _6: &reqwest::Error;
    let mut _7: reqwest::Error;
    let mut _8: bool;
    let mut _9: &reqwest::Error;
    let mut _10: reqwest::Error;
    let mut _11: reqwest::Error;
    let mut _12: bool;

    bb0: {
        _12 = const false;
        _12 = const true;
        _3 = &_1;
        _2 = reqwest::Error::is_timeout(move _3) -> [return: bb1, unwind: bb13];
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = const false;
        _4 = move _1;
        _0 = error::Error::timeout::<reqwest::Error>(move _4) -> [return: bb14, unwind: bb13];
    }

    bb3: {
        _6 = &_1;
        _5 = reqwest::Error::is_request(move _6) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        switchInt(move _5) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _12 = const false;
        _7 = move _1;
        _0 = error::Error::request::<reqwest::Error>(move _7) -> [return: bb15, unwind: bb13];
    }

    bb6: {
        _9 = &_1;
        _8 = reqwest::Error::is_decode(move _9) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        switchInt(move _8) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _12 = const false;
        _10 = move _1;
        _0 = error::Error::decode::<reqwest::Error>(move _10) -> [return: bb16, unwind: bb13];
    }

    bb9: {
        _12 = const false;
        _11 = move _1;
        _0 = error::Error::unknown::<reqwest::Error>(move _11) -> [return: bb17, unwind: bb13];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_12) -> [0: bb11, otherwise: bb12];
    }

    bb14: {
        goto -> bb10;
    }

    bb15: {
        goto -> bb10;
    }

    bb16: {
        goto -> bb10;
    }

    bb17: {
        goto -> bb10;
    }
}

fn error::<impl at sdk/client/src/error.rs:160:1: 160:33>::fmt(_1: &error::Error, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&error::Error;
    let mut _10: &[&str; 1];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (PointerCoercion(Unsize));
        _9 = &_1;
        _8 = core::fmt::rt::Argument::<'_>::new_debug::<&error::Error>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = std::fmt::Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in error::<impl at sdk/client/src/error.rs:160:1: 160:33>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:166:1: 166:33>::source(_1: &error::Error) -> std::option::Option<&dyn StdError> {
    debug self => _1;
    let mut _0: std::option::Option<&dyn std::error::Error>;
    let mut _2: std::option::Option<&std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>;
    let mut _3: &std::option::Option<std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>;
    let mut _4: std::boxed::Box<error::Inner>;
    let mut _5: *const error::Inner;

    bb0: {
        _4 = deref_copy ((*_1).0: std::boxed::Box<error::Inner>);
        _5 = (((_4.0: std::ptr::Unique<error::Inner>).0: std::ptr::NonNull<error::Inner>).0: *const error::Inner);
        _3 = &((*_5).1: std::option::Option<std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>);
        _2 = std::option::Option::<Box<dyn StdError + std::marker::Send + Sync>>::as_ref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::option::Option::<&Box<dyn StdError + std::marker::Send + Sync>>::map::<&dyn StdError, {closure@sdk/client/src/error.rs:168:40: 168:43}>(move _2, const ZeroSized: {closure@sdk/client/src/error.rs:168:40: 168:43}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:166:1: 166:33>::source::{closure#0}(_1: {closure@sdk/client/src/error.rs:168:40: 168:43}, _2: &Box<dyn StdError + std::marker::Send + Sync>) -> &dyn StdError {
    debug e => _2;
    let mut _0: &dyn std::error::Error;
    let _3: &dyn std::error::Error + std::marker::Send + std::marker::Sync;
    let mut _4: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _5: *const dyn std::error::Error + std::marker::Send + std::marker::Sync;

    bb0: {
        _4 = deref_copy (*_2);
        _5 = (((_4.0: std::ptr::Unique<dyn std::error::Error + std::marker::Send + std::marker::Sync>).0: std::ptr::NonNull<dyn std::error::Error + std::marker::Send + std::marker::Sync>).0: *const dyn std::error::Error + std::marker::Send + std::marker::Sync);
        _3 = &(*_5);
        _0 = _3 as &dyn std::error::Error (PointerCoercion(Unsize));
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:172:1: 172:39>::from(_1: serde_json::Error) -> error::Error {
    debug e => _1;
    let mut _0: error::Error;

    bb0: {
        _0 = error::Error::decode::<serde_json::Error>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:182:14: 182:19>::fmt(_1: &StreamKind, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &u16;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&u16;
    let _8: &str;
    let _9: &str;
    let _10: &str;
    let _11: &str;
    let _12: &str;
    let _13: &str;
    let _14: &str;
    let _15: &str;
    let _16: &std::option::Option<diem_json_rpc_types::stream::response::StreamJsonRpcResponse>;
    let _17: &str;
    let mut _18: &dyn std::fmt::Debug;
    let _19: &&std::option::Option<diem_json_rpc_types::stream::response::StreamJsonRpcResponse>;
    let _20: &str;
    let _21: &str;
    let _22: &str;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _16;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb1, otherwise: bb2];
    }

    bb1: {
        _22 = const "SubscriptionOkTimeout";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _22) -> [return: bb15, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as HttpStatus).0: u16);
        _5 = const "HttpStatus";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb15, unwind continue];
    }

    bb4: {
        _8 = const "Request";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _8) -> [return: bb15, unwind continue];
    }

    bb5: {
        _9 = const "Decode";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _9) -> [return: bb15, unwind continue];
    }

    bb6: {
        _10 = const "Encode";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _10) -> [return: bb15, unwind continue];
    }

    bb7: {
        _11 = const "ConnectionClosed";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _11) -> [return: bb15, unwind continue];
    }

    bb8: {
        _12 = const "MessageTooLarge";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _12) -> [return: bb15, unwind continue];
    }

    bb9: {
        _13 = const "HttpError";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _13) -> [return: bb15, unwind continue];
    }

    bb10: {
        _14 = const "TlsError";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _14) -> [return: bb15, unwind continue];
    }

    bb11: {
        _15 = const "IdAlreadyUsed";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _15) -> [return: bb15, unwind continue];
    }

    bb12: {
        _16 = &(((*_1) as IdNotFound).0: std::option::Option<diem_json_rpc_types::stream::response::StreamJsonRpcResponse>);
        _17 = const "IdNotFound";
        _19 = &_16;
        _18 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _17, move _18) -> [return: bb15, unwind continue];
    }

    bb13: {
        _20 = const "QueueFullError";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _20) -> [return: bb15, unwind continue];
    }

    bb14: {
        _21 = const "JsonRpcError";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _21) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:199:14: 199:19>::fmt(_1: &StreamError, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&std::boxed::Box<error::StreamInner>;
    let _7: &std::boxed::Box<error::StreamInner>;

    bb0: {
        _3 = const "StreamError";
        _4 = const "inner";
        _7 = &((*_1).0: std::boxed::Box<error::StreamInner>);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:204:14: 204:19>::fmt(_1: &StreamInner, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &error::StreamKind;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &std::option::Option<std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&std::option::Option<diem_json_rpc_types::errors::JsonRpcError>;
    let _13: &std::option::Option<diem_json_rpc_types::errors::JsonRpcError>;

    bb0: {
        _3 = const "StreamInner";
        _4 = const "kind";
        _6 = &((*_1).0: error::StreamKind);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "source";
        _9 = &((*_1).1: std::option::Option<std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "json_rpc_error";
        _13 = &((*_1).2: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:211:5: 211:21>::json_rpc_error(_1: &StreamError) -> std::option::Option<&JsonRpcError> {
    debug self => _1;
    let mut _0: std::option::Option<&diem_json_rpc_types::errors::JsonRpcError>;
    let mut _2: &std::option::Option<diem_json_rpc_types::errors::JsonRpcError>;
    let mut _3: std::boxed::Box<error::StreamInner>;
    let mut _4: *const error::StreamInner;

    bb0: {
        _3 = deref_copy ((*_1).0: std::boxed::Box<error::StreamInner>);
        _4 = (((_3.0: std::ptr::Unique<error::StreamInner>).0: std::ptr::NonNull<error::StreamInner>).0: *const error::StreamInner);
        _2 = &((*_4).2: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>);
        _0 = std::option::Option::<JsonRpcError>::as_ref(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:211:5: 211:21>::from_tungstenite_error(_1: tokio_tungstenite::tungstenite::Error) -> StreamError {
    debug e => _1;
    let mut _0: error::StreamError;
    let mut _2: isize;
    let mut _3: std::option::Option<error::StreamError>;
    let mut _4: std::option::Option<error::StreamError>;
    let _5: std::io::Error;
    let mut _6: std::option::Option<std::io::Error>;
    let _7: tokio_tungstenite::tungstenite::error::CapacityError;
    let mut _8: error::StreamKind;
    let mut _9: std::option::Option<tokio_tungstenite::tungstenite::error::CapacityError>;
    let _10: tokio_tungstenite::tungstenite::error::ProtocolError;
    let mut _11: std::option::Option<tokio_tungstenite::tungstenite::error::ProtocolError>;
    let mut _12: error::StreamKind;
    let mut _13: std::option::Option<error::StreamError>;
    let mut _14: tokio_tungstenite::tungstenite::Error;
    let _15: tokio_tungstenite::tungstenite::error::UrlError;
    let mut _16: error::StreamKind;
    let mut _17: std::option::Option<tokio_tungstenite::tungstenite::error::UrlError>;
    let _18: tokio_tungstenite::tungstenite::http::Response<std::option::Option<std::string::String>>;
    let mut _19: error::StreamKind;
    let mut _20: u16;
    let mut _21: &reqwest::StatusCode;
    let _22: reqwest::StatusCode;
    let mut _23: &tokio_tungstenite::tungstenite::http::Response<std::option::Option<std::string::String>>;
    let mut _24: std::option::Option<error::StreamError>;
    let _25: tokio_tungstenite::tungstenite::http::Error;
    let mut _26: error::StreamKind;
    let mut _27: std::option::Option<tokio_tungstenite::tungstenite::http::Error>;
    let mut _28: bool;
    let mut _29: isize;
    let mut _30: isize;
    scope 1 {
        debug e => _5;
    }
    scope 2 {
        debug e => const ZeroSized: tokio_tungstenite::tungstenite::error::TlsError;
    }
    scope 3 {
        debug e => _7;
    }
    scope 4 {
        debug e => _10;
    }
    scope 5 {
        debug e => _15;
    }
    scope 6 {
        debug e => _18;
    }
    scope 7 {
        debug e => _25;
    }

    bb0: {
        _28 = const false;
        _28 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, 9: bb11, 10: bb1, otherwise: bb2];
    }

    bb1: {
        _25 = move ((_1 as HttpFormat).0: tokio_tungstenite::tungstenite::http::Error);
        _26 = StreamKind::HttpError;
        _27 = std::option::Option::<tokio_tungstenite::tungstenite::http::Error>::Some(move _25);
        _0 = StreamError::new::<tokio_tungstenite::tungstenite::http::Error>(move _26, move _27) -> [return: bb24, unwind: bb23];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = std::option::Option::<StreamError>::None;
        _0 = StreamError::connection_closed::<StreamError>(move _3) -> [return: bb25, unwind: bb23];
    }

    bb4: {
        _4 = std::option::Option::<StreamError>::None;
        _0 = StreamError::connection_closed::<StreamError>(move _4) -> [return: bb26, unwind: bb23];
    }

    bb5: {
        _5 = move ((_1 as Io).0: std::io::Error);
        _6 = std::option::Option::<std::io::Error>::Some(move _5);
        _0 = StreamError::connection_closed::<std::io::Error>(move _6) -> [return: bb27, unwind: bb23];
    }

    bb6: {
        _7 = ((_1 as Capacity).0: tokio_tungstenite::tungstenite::error::CapacityError);
        _8 = StreamKind::MessageTooLarge;
        _9 = std::option::Option::<CapacityError>::Some(_7);
        _0 = StreamError::new::<CapacityError>(move _8, move _9) -> [return: bb28, unwind: bb23];
    }

    bb7: {
        _10 = ((_1 as Protocol).0: tokio_tungstenite::tungstenite::error::ProtocolError);
        _11 = std::option::Option::<ProtocolError>::Some(_10);
        _0 = StreamError::connection_closed::<ProtocolError>(move _11) -> [return: bb29, unwind: bb23];
    }

    bb8: {
        _12 = StreamKind::QueueFullError;
        _13 = std::option::Option::<StreamError>::None;
        _0 = StreamError::new::<StreamError>(move _12, move _13) -> [return: bb30, unwind: bb23];
    }

    bb9: {
        _28 = const false;
        _14 = move _1;
        _0 = StreamError::encode::<tokio_tungstenite::tungstenite::Error>(move _14) -> [return: bb31, unwind: bb23];
    }

    bb10: {
        _15 = move ((_1 as Url).0: tokio_tungstenite::tungstenite::error::UrlError);
        _16 = StreamKind::Request;
        _17 = std::option::Option::<UrlError>::Some(move _15);
        _0 = StreamError::new::<UrlError>(move _16, move _17) -> [return: bb32, unwind: bb23];
    }

    bb11: {
        _18 = move ((_1 as Http).0: tokio_tungstenite::tungstenite::http::Response<std::option::Option<std::string::String>>);
        _23 = &_18;
        _22 = tokio_tungstenite::tungstenite::http::Response::<std::option::Option<std::string::String>>::status(move _23) -> [return: bb12, unwind: bb15];
    }

    bb12: {
        _21 = &_22;
        _20 = reqwest::StatusCode::as_u16(move _21) -> [return: bb13, unwind: bb15];
    }

    bb13: {
        _19 = StreamKind::HttpStatus(move _20);
        _24 = std::option::Option::<StreamError>::None;
        _0 = StreamError::new::<StreamError>(move _19, move _24) -> [return: bb14, unwind: bb15];
    }

    bb14: {
        drop(_18) -> [return: bb20, unwind: bb23];
    }

    bb15 (cleanup): {
        drop(_18) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        _28 = const false;
        return;
    }

    bb18: {
        drop(_1) -> [return: bb17, unwind continue];
    }

    bb19: {
        _29 = discriminant(_1);
        switchInt(move _29) -> [2: bb17, 3: bb2, 8: bb17, 9: bb17, 10: bb17, otherwise: bb18];
    }

    bb20: {
        switchInt(_28) -> [0: bb17, otherwise: bb19];
    }

    bb21 (cleanup): {
        drop(_1) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        _30 = discriminant(_1);
        switchInt(move _30) -> [2: bb16, 3: bb16, 8: bb16, 9: bb16, 10: bb16, otherwise: bb21];
    }

    bb23 (cleanup): {
        switchInt(_28) -> [0: bb16, otherwise: bb22];
    }

    bb24: {
        goto -> bb20;
    }

    bb25: {
        goto -> bb20;
    }

    bb26: {
        goto -> bb20;
    }

    bb27: {
        goto -> bb20;
    }

    bb28: {
        goto -> bb20;
    }

    bb29: {
        goto -> bb20;
    }

    bb30: {
        goto -> bb20;
    }

    bb31: {
        goto -> bb20;
    }

    bb32: {
        goto -> bb20;
    }
}

fn error::<impl at sdk/client/src/error.rs:211:5: 211:21>::decode(_1: E) -> StreamError {
    debug e => _1;
    let mut _0: error::StreamError;
    let mut _2: error::StreamKind;
    let mut _3: std::option::Option<E>;

    bb0: {
        _2 = StreamKind::Decode;
        _3 = std::option::Option::<E>::Some(move _1);
        _0 = StreamError::new::<E>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:211:5: 211:21>::encode(_1: E) -> StreamError {
    debug e => _1;
    let mut _0: error::StreamError;
    let mut _2: error::StreamKind;
    let mut _3: std::option::Option<E>;

    bb0: {
        _2 = StreamKind::Encode;
        _3 = std::option::Option::<E>::Some(move _1);
        _0 = StreamError::new::<E>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:211:5: 211:21>::from_http_error(_1: tokio_tungstenite::tungstenite::http::Error) -> StreamError {
    debug e => _1;
    let mut _0: error::StreamError;
    let mut _2: error::StreamKind;
    let mut _3: std::option::Option<tokio_tungstenite::tungstenite::http::Error>;

    bb0: {
        _2 = StreamKind::HttpError;
        _3 = std::option::Option::<tokio_tungstenite::tungstenite::http::Error>::Some(move _1);
        _0 = StreamError::new::<tokio_tungstenite::tungstenite::http::Error>(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:211:5: 211:21>::connection_closed(_1: std::option::Option<E>) -> StreamError {
    debug e => _1;
    let mut _0: error::StreamError;
    let mut _2: error::StreamKind;

    bb0: {
        _2 = StreamKind::ConnectionClosed;
        _0 = StreamError::new::<E>(move _2, move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:211:5: 211:21>::subscription_id_already_used(_1: std::option::Option<E>) -> StreamError {
    debug e => _1;
    let mut _0: error::StreamError;
    let mut _2: error::StreamKind;

    bb0: {
        _2 = StreamKind::IdAlreadyUsed;
        _0 = StreamError::new::<E>(move _2, move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:211:5: 211:21>::subscription_ok_timeout() -> StreamError {
    let mut _0: error::StreamError;
    let mut _1: error::StreamKind;
    let mut _2: std::option::Option<error::StreamError>;

    bb0: {
        _1 = StreamKind::SubscriptionOkTimeout;
        _2 = std::option::Option::<StreamError>::None;
        _0 = StreamError::new::<StreamError>(move _1, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:211:5: 211:21>::subscription_json_rpc_error(_1: JsonRpcError) -> StreamError {
    debug error => _1;
    let mut _0: error::StreamError;
    let mut _2: std::boxed::Box<error::StreamInner>;
    let mut _3: error::StreamInner;
    let mut _4: error::StreamKind;
    let mut _5: std::option::Option<std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>;
    let mut _6: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>;

    bb0: {
        _4 = StreamKind::JsonRpcError;
        _5 = std::option::Option::<Box<dyn StdError + std::marker::Send + Sync>>::None;
        _6 = std::option::Option::<JsonRpcError>::Some(move _1);
        _3 = StreamInner { kind: move _4, source: move _5, json_rpc_error: move _6 };
        _2 = Box::<StreamInner>::new(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = StreamError { inner: move _2 };
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:211:5: 211:21>::new(_1: StreamKind, _2: std::option::Option<E>) -> StreamError {
    debug kind => _1;
    debug source => _2;
    let mut _0: error::StreamError;
    let mut _3: std::boxed::Box<error::StreamInner>;
    let mut _4: error::StreamInner;
    let mut _5: error::StreamKind;
    let mut _6: std::option::Option<std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>;
    let mut _7: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>;

    bb0: {
        _5 = move _1;
        _6 = std::option::Option::<E>::map::<Box<dyn StdError + std::marker::Send + Sync>, fn(E) -> Box<dyn StdError + std::marker::Send + Sync> {<E as Into<Box<dyn StdError + std::marker::Send + Sync>>>::into}>(move _2, <E as Into<Box<dyn StdError + std::marker::Send + Sync>>>::into) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        _7 = std::option::Option::<JsonRpcError>::None;
        _4 = StreamInner { kind: move _5, source: move _6, json_rpc_error: move _7 };
        _3 = Box::<StreamInner>::new(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = StreamError { inner: move _3 };
        return;
    }

    bb3 (cleanup): {
        drop(_5) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn error::<impl at sdk/client/src/error.rs:281:5: 281:49>::from(_1: serde_json::Error) -> StreamError {
    debug e => _1;
    let mut _0: error::StreamError;

    bb0: {
        _0 = StreamError::decode::<serde_json::Error>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:287:5: 287:43>::fmt(_1: &StreamError, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&error::StreamError;
    let mut _10: &[&str; 1];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (PointerCoercion(Unsize));
        _9 = &_1;
        _8 = core::fmt::rt::Argument::<'_>::new_debug::<&StreamError>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = std::fmt::Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in error::<impl at sdk/client/src/error.rs:287:5: 287:43>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:293:5: 293:43>::source(_1: &StreamError) -> std::option::Option<&dyn StdError> {
    debug self => _1;
    let mut _0: std::option::Option<&dyn std::error::Error>;
    let mut _2: std::option::Option<&std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>;
    let mut _3: &std::option::Option<std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>;
    let mut _4: std::boxed::Box<error::StreamInner>;
    let mut _5: *const error::StreamInner;

    bb0: {
        _4 = deref_copy ((*_1).0: std::boxed::Box<error::StreamInner>);
        _5 = (((_4.0: std::ptr::Unique<error::StreamInner>).0: std::ptr::NonNull<error::StreamInner>).0: *const error::StreamInner);
        _3 = &((*_5).1: std::option::Option<std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>>);
        _2 = std::option::Option::<Box<dyn StdError + std::marker::Send + Sync>>::as_ref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::option::Option::<&Box<dyn StdError + std::marker::Send + Sync>>::map::<&dyn StdError, {closure@sdk/client/src/error.rs:295:44: 295:47}>(move _2, const ZeroSized: {closure@sdk/client/src/error.rs:295:44: 295:47}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:293:5: 293:43>::source::{closure#0}(_1: {closure@sdk/client/src/error.rs:295:44: 295:47}, _2: &Box<dyn StdError + std::marker::Send + Sync>) -> &dyn StdError {
    debug e => _2;
    let mut _0: &dyn std::error::Error;
    let _3: &dyn std::error::Error + std::marker::Send + std::marker::Sync;
    let mut _4: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>;
    let mut _5: *const dyn std::error::Error + std::marker::Send + std::marker::Sync;

    bb0: {
        _4 = deref_copy (*_2);
        _5 = (((_4.0: std::ptr::Unique<dyn std::error::Error + std::marker::Send + std::marker::Sync>).0: std::ptr::NonNull<dyn std::error::Error + std::marker::Send + std::marker::Sync>).0: *const dyn std::error::Error + std::marker::Send + std::marker::Sync);
        _3 = &(*_5);
        _0 = _3 as &dyn std::error::Error (PointerCoercion(Unsize));
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:302:10: 302:15>::fmt(_1: &WaitForTransactionError, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &error::Error;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&error::Error;
    let _8: &diem_json_rpc_types::views::TransactionView;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&diem_json_rpc_types::views::TransactionView;
    let _12: &diem_json_rpc_types::views::TransactionView;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&diem_json_rpc_types::views::TransactionView;
    let _16: &str;
    let _17: &str;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }
    scope 3 {
        debug __self_0 => _12;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb1, otherwise: bb2];
    }

    bb1: {
        _17 = const "TransactionExpired";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _17) -> [return: bb7, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as GetTransactionError).0: error::Error);
        _5 = const "GetTransactionError";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb7, unwind continue];
    }

    bb4: {
        _8 = &(((*_1) as TransactionHashMismatchError).0: diem_json_rpc_types::views::TransactionView);
        _9 = const "TransactionHashMismatchError";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb7, unwind continue];
    }

    bb5: {
        _12 = &(((*_1) as TransactionExecutionFailed).0: diem_json_rpc_types::views::TransactionView);
        _13 = const "TransactionExecutionFailed";
        _15 = &_12;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _13, move _14) -> [return: bb7, unwind continue];
    }

    bb6: {
        _16 = const "Timeout";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:317:1: 317:51>::fmt(_1: &WaitForTransactionError, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&error::WaitForTransactionError;
    let mut _10: &[core::fmt::rt::Placeholder];
    let _11: &[core::fmt::rt::Placeholder; 1];
    let _12: [core::fmt::rt::Placeholder; 1];
    let mut _13: core::fmt::rt::Placeholder;
    let mut _14: core::fmt::rt::Alignment;
    let mut _15: core::fmt::rt::Count;
    let mut _16: core::fmt::rt::Count;
    let mut _17: core::fmt::rt::UnsafeArg;
    let mut _18: &[&str; 1];
    scope 1 {
    }

    bb0: {
        _18 = const _;
        _4 = _18 as &[&str] (PointerCoercion(Unsize));
        _9 = &_1;
        _8 = core::fmt::rt::Argument::<'_>::new_debug::<&WaitForTransactionError>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _14 = core::fmt::rt::Alignment::Unknown;
        _15 = core::fmt::rt::Count::Implied;
        _16 = core::fmt::rt::Count::Implied;
        _13 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _14, const 4_u32, move _15, move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _17 = core::fmt::rt::UnsafeArg::new() -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = Arguments::<'_>::new_v1_formatted(move _4, move _5, move _10, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = std::fmt::Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

promoted[0] in error::<impl at sdk/client/src/error.rs:317:1: 317:51>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn error::<impl at sdk/client/src/error.rs:323:1: 323:51>::source(_1: &WaitForTransactionError) -> std::option::Option<&dyn StdError> {
    debug self => _1;
    let mut _0: std::option::Option<&dyn std::error::Error>;
    let mut _2: isize;
    let _3: &error::Error;
    let mut _4: &dyn std::error::Error;
    scope 1 {
        debug e => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = std::option::Option::<&dyn StdError>::None;
        goto -> bb3;
    }

    bb2: {
        _3 = &(((*_1) as GetTransactionError).0: error::Error);
        _4 = _3 as &dyn std::error::Error (PointerCoercion(Unsize));
        _0 = std::option::Option::<&dyn StdError>::Some(move _4);
        goto -> bb3;
    }

    bb3: {
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:8:10: 8:15>::clone(_1: &Ip) -> Ip {
    debug self => _1;
    let mut _0: blocking::proxy::Ip;
    let mut _2: isize;
    let _3: &std::net::IpAddr;
    let mut _4: std::net::IpAddr;
    let _5: &ipnet::IpNet;
    let mut _6: ipnet::IpNet;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _5;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as Network).0: ipnet::IpNet);
        _6 = <IpNet as Clone>::clone(_5) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Address).0: std::net::IpAddr);
        _4 = <IpAddr as Clone>::clone(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = Ip::Address(move _4);
        goto -> bb6;
    }

    bb5: {
        _0 = Ip::Network(move _6);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:8:17: 8:22>::fmt(_1: &Ip, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &std::net::IpAddr;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&std::net::IpAddr;
    let _8: &ipnet::IpNet;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&ipnet::IpNet;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as Network).0: ipnet::IpNet);
        _9 = const "Network";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Address).0: std::net::IpAddr);
        _5 = const "Address";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:16:10: 16:15>::clone(_1: &IpMatcher) -> IpMatcher {
    debug self => _1;
    let mut _0: blocking::proxy::IpMatcher;
    let mut _2: std::vec::Vec<blocking::proxy::Ip>;
    let _3: &std::vec::Vec<blocking::proxy::Ip>;

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<blocking::proxy::Ip>);
        _2 = <Vec<Ip> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = IpMatcher(move _2);
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:16:17: 16:22>::fmt(_1: &IpMatcher, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::vec::Vec<blocking::proxy::Ip>;
    let _6: &std::vec::Vec<blocking::proxy::Ip>;

    bb0: {
        _3 = const "IpMatcher";
        _6 = &((*_1).0: std::vec::Vec<blocking::proxy::Ip>);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:16:24: 16:31>::default() -> IpMatcher {
    let mut _0: blocking::proxy::IpMatcher;
    let mut _1: std::vec::Vec<blocking::proxy::Ip>;

    bb0: {
        _1 = <Vec<Ip> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = IpMatcher(move _1);
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:21:10: 21:15>::clone(_1: &DomainMatcher) -> DomainMatcher {
    debug self => _1;
    let mut _0: blocking::proxy::DomainMatcher;
    let mut _2: std::vec::Vec<std::string::String>;
    let _3: &std::vec::Vec<std::string::String>;

    bb0: {
        _3 = &((*_1).0: std::vec::Vec<std::string::String>);
        _2 = <Vec<std::string::String> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = DomainMatcher(move _2);
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:21:17: 21:22>::fmt(_1: &DomainMatcher, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::vec::Vec<std::string::String>;
    let _6: &std::vec::Vec<std::string::String>;

    bb0: {
        _3 = const "DomainMatcher";
        _6 = &((*_1).0: std::vec::Vec<std::string::String>);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:21:24: 21:31>::default() -> DomainMatcher {
    let mut _0: blocking::proxy::DomainMatcher;
    let mut _1: std::vec::Vec<std::string::String>;

    bb0: {
        _1 = <Vec<std::string::String> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = DomainMatcher(move _1);
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:25:10: 25:15>::clone(_1: &NoProxy) -> NoProxy {
    debug self => _1;
    let mut _0: blocking::proxy::NoProxy;
    let mut _2: blocking::proxy::IpMatcher;
    let _3: &blocking::proxy::IpMatcher;
    let mut _4: blocking::proxy::DomainMatcher;
    let _5: &blocking::proxy::DomainMatcher;

    bb0: {
        _3 = &((*_1).0: blocking::proxy::IpMatcher);
        _2 = <IpMatcher as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: blocking::proxy::DomainMatcher);
        _4 = <DomainMatcher as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = NoProxy { ips: move _2, domains: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:25:17: 25:22>::fmt(_1: &NoProxy, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &blocking::proxy::IpMatcher;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&blocking::proxy::DomainMatcher;
    let _10: &blocking::proxy::DomainMatcher;

    bb0: {
        _3 = const "NoProxy";
        _4 = const "ips";
        _6 = &((*_1).0: blocking::proxy::IpMatcher);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "domains";
        _10 = &((*_1).1: blocking::proxy::DomainMatcher);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:25:24: 25:31>::default() -> NoProxy {
    let mut _0: blocking::proxy::NoProxy;
    let mut _1: blocking::proxy::IpMatcher;
    let mut _2: blocking::proxy::DomainMatcher;

    bb0: {
        _1 = <IpMatcher as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <DomainMatcher as Default>::default() -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = NoProxy { ips: move _1, domains: move _2 };
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:37:1: 37:11>::new() -> proxy::Proxy {
    let mut _0: blocking::proxy::Proxy;
    let _1: std::option::Option<std::string::String>;
    let mut _2: std::result::Result<std::string::String, std::env::VarError>;
    let mut _3: std::result::Result<std::string::String, std::env::VarError>;
    let mut _5: std::result::Result<std::string::String, std::env::VarError>;
    let mut _6: std::result::Result<std::string::String, std::env::VarError>;
    let mut _8: std::option::Option<std::string::String>;
    let mut _9: std::option::Option<std::string::String>;
    scope 1 {
        debug http_proxy => _1;
        let _4: std::option::Option<std::string::String>;
        scope 2 {
            debug https_proxy => _4;
            let _7: std::option::Option<blocking::proxy::NoProxy>;
            scope 3 {
                debug no_proxy => _7;
            }
        }
    }

    bb0: {
        _3 = var::<&str>(const "http_proxy") -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = std::result::Result::<std::string::String, VarError>::or_else::<VarError, {closure@sdk/client/src/proxy.rs:40:22: 40:25}>(move _3, const ZeroSized: {closure@sdk/client/src/proxy.rs:40:22: 40:25}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = std::result::Result::<std::string::String, VarError>::ok(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = var::<&str>(const "https_proxy") -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _5 = std::result::Result::<std::string::String, VarError>::or_else::<VarError, {closure@sdk/client/src/proxy.rs:43:22: 43:25}>(move _6, const ZeroSized: {closure@sdk/client/src/proxy.rs:43:22: 43:25}) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _4 = std::result::Result::<std::string::String, VarError>::ok(move _5) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _7 = NoProxy::new() -> [return: bb7, unwind: bb8];
    }

    bb7: {
        _8 = move _1;
        _9 = move _4;
        _0 = proxy::Proxy { http_proxy: move _8, https_proxy: move _9, no_proxy: move _7 };
        return;
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:37:1: 37:11>::new::{closure#0}(_1: {closure@sdk/client/src/proxy.rs:40:22: 40:25}, _2: VarError) -> std::result::Result<std::string::String, VarError> {
    let mut _0: std::result::Result<std::string::String, std::env::VarError>;

    bb0: {
        _0 = var::<&str>(const "HTTP_PROXY") -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:37:1: 37:11>::new::{closure#1}(_1: {closure@sdk/client/src/proxy.rs:43:22: 43:25}, _2: VarError) -> std::result::Result<std::string::String, VarError> {
    let mut _0: std::result::Result<std::string::String, std::env::VarError>;

    bb0: {
        _0 = var::<&str>(const "HTTPS_PROXY") -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:37:1: 37:11>::http(_1: &proxy::Proxy, _2: &str) -> std::option::Option<&str> {
    debug self => _1;
    debug host => _2;
    let mut _0: std::option::Option<&str>;
    let mut _3: &std::option::Option<blocking::proxy::NoProxy>;
    let mut _4: isize;
    let mut _6: bool;
    let mut _7: &std::option::Option<std::string::String>;
    scope 1 {
        debug no_proxy => _5;
        let _5: &blocking::proxy::NoProxy;
    }

    bb0: {
        _3 = &((*_1).2: std::option::Option<blocking::proxy::NoProxy>);
        _4 = discriminant((*_3));
        switchInt(move _4) -> [1: bb1, otherwise: bb4];
    }

    bb1: {
        _5 = &(((*_3) as Some).0: blocking::proxy::NoProxy);
        _6 = NoProxy::contains(_5, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = std::option::Option::<&str>::None;
        goto -> bb5;
    }

    bb4: {
        _7 = &((*_1).0: std::option::Option<std::string::String>);
        _0 = std::option::Option::<std::string::String>::as_deref(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:37:1: 37:11>::https(_1: &proxy::Proxy, _2: &str) -> std::option::Option<&str> {
    debug self => _1;
    debug host => _2;
    let mut _0: std::option::Option<&str>;
    let mut _3: &std::option::Option<blocking::proxy::NoProxy>;
    let mut _4: isize;
    let mut _6: bool;
    let mut _7: &std::option::Option<std::string::String>;
    scope 1 {
        debug no_proxy => _5;
        let _5: &blocking::proxy::NoProxy;
    }

    bb0: {
        _3 = &((*_1).2: std::option::Option<blocking::proxy::NoProxy>);
        _4 = discriminant((*_3));
        switchInt(move _4) -> [1: bb1, otherwise: bb4];
    }

    bb1: {
        _5 = &(((*_3) as Some).0: blocking::proxy::NoProxy);
        _6 = NoProxy::contains(_5, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = std::option::Option::<&str>::None;
        goto -> bb5;
    }

    bb4: {
        _7 = &((*_1).1: std::option::Option<std::string::String>);
        _0 = std::option::Option::<std::string::String>::as_deref(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:73:1: 73:13>::new() -> std::option::Option<NoProxy> {
    let mut _0: std::option::Option<blocking::proxy::NoProxy>;
    let _1: std::string::String;
    let mut _2: std::result::Result<std::string::String, std::env::VarError>;
    let mut _3: std::result::Result<std::string::String, std::env::VarError>;
    let mut _4: bool;
    let mut _5: &std::string::String;
    let _9: &str;
    let mut _10: &std::string::String;
    let mut _11: std::str::Split<'_, char>;
    let _13: ();
    let mut _14: std::option::Option<&str>;
    let mut _15: &mut std::str::Split<'_, char>;
    let mut _16: isize;
    let mut _18: std::result::Result<ipnet::IpNet, ipnet::AddrParseError>;
    let mut _19: isize;
    let mut _21: &mut std::vec::Vec<blocking::proxy::Ip>;
    let mut _22: blocking::proxy::Ip;
    let mut _23: std::result::Result<std::net::IpAddr, std::net::AddrParseError>;
    let mut _24: isize;
    let mut _26: &mut std::vec::Vec<blocking::proxy::Ip>;
    let mut _27: blocking::proxy::Ip;
    let mut _28: &mut std::vec::Vec<std::string::String>;
    let mut _29: std::string::String;
    let mut _30: blocking::proxy::NoProxy;
    let mut _31: blocking::proxy::IpMatcher;
    let mut _32: std::vec::Vec<blocking::proxy::Ip>;
    let mut _33: blocking::proxy::DomainMatcher;
    let mut _34: std::vec::Vec<std::string::String>;
    scope 1 {
        debug raw => _1;
        let mut _6: std::vec::Vec<blocking::proxy::Ip>;
        scope 2 {
            debug ips => _6;
            let mut _7: std::vec::Vec<std::string::String>;
            scope 3 {
                debug domains => _7;
                let _8: std::str::Split<'_, char>;
                scope 4 {
                    debug parts => _8;
                    let mut _12: std::str::Split<'_, char>;
                    scope 5 {
                        debug iter => _12;
                        let _17: &str;
                        scope 6 {
                            debug part => _17;
                            let _20: ipnet::IpNet;
                            let _25: std::net::IpAddr;
                            scope 7 {
                                debug ip => _20;
                            }
                            scope 8 {
                                debug addr => _25;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = var::<&str>(const "no_proxy") -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = std::result::Result::<std::string::String, VarError>::or_else::<VarError, {closure@sdk/client/src/proxy.rs:78:22: 78:25}>(move _3, const ZeroSized: {closure@sdk/client/src/proxy.rs:78:22: 78:25}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = std::result::Result::<std::string::String, VarError>::unwrap_or_default(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = &_1;
        _4 = std::string::String::is_empty(move _5) -> [return: bb4, unwind: bb27];
    }

    bb4: {
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _0 = std::option::Option::<NoProxy>::None;
        drop(_1) -> [return: bb24, unwind continue];
    }

    bb6: {
        _6 = Vec::<Ip>::new() -> [return: bb7, unwind: bb27];
    }

    bb7: {
        _7 = Vec::<std::string::String>::new() -> [return: bb8, unwind: bb26];
    }

    bb8: {
        _10 = &_1;
        _9 = <std::string::String as Deref>::deref(move _10) -> [return: bb9, unwind: bb25];
    }

    bb9: {
        _8 = core::str::<impl str>::split::<'_, char>(_9, const ',') -> [return: bb10, unwind: bb25];
    }

    bb10: {
        _11 = <std::str::Split<'_, char> as IntoIterator>::into_iter(move _8) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _12 = move _11;
        goto -> bb12;
    }

    bb12: {
        _15 = &mut _12;
        _14 = <std::str::Split<'_, char> as Iterator>::next(_15) -> [return: bb13, unwind: bb25];
    }

    bb13: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb16, 1: bb14, otherwise: bb15];
    }

    bb14: {
        _17 = ((_14 as Some).0: &str);
        _18 = core::str::<impl str>::parse::<IpNet>(_17) -> [return: bb17, unwind: bb25];
    }

    bb15: {
        unreachable;
    }

    bb16: {
        _32 = move _6;
        _31 = IpMatcher(move _32);
        _34 = move _7;
        _33 = DomainMatcher(move _34);
        _30 = NoProxy { ips: move _31, domains: move _33 };
        _0 = std::option::Option::<NoProxy>::Some(move _30);
        drop(_1) -> [return: bb24, unwind continue];
    }

    bb17: {
        _19 = discriminant(_18);
        switchInt(move _19) -> [0: bb19, 1: bb18, otherwise: bb15];
    }

    bb18: {
        _23 = core::str::<impl str>::parse::<IpAddr>(_17) -> [return: bb20, unwind: bb25];
    }

    bb19: {
        _20 = ((_18 as Ok).0: ipnet::IpNet);
        _21 = &mut _6;
        _22 = Ip::Network(_20);
        _13 = Vec::<Ip>::push(move _21, move _22) -> [return: bb29, unwind: bb25];
    }

    bb20: {
        _24 = discriminant(_23);
        switchInt(move _24) -> [0: bb22, 1: bb21, otherwise: bb15];
    }

    bb21: {
        _28 = &mut _7;
        _29 = <str as ToOwned>::to_owned(_17) -> [return: bb23, unwind: bb25];
    }

    bb22: {
        _25 = ((_23 as Ok).0: std::net::IpAddr);
        _26 = &mut _6;
        _27 = Ip::Address(_25);
        _13 = Vec::<Ip>::push(move _26, move _27) -> [return: bb30, unwind: bb25];
    }

    bb23: {
        _13 = Vec::<std::string::String>::push(move _28, move _29) -> [return: bb31, unwind: bb25];
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_7) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_6) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_1) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        resume;
    }

    bb29: {
        goto -> bb12;
    }

    bb30: {
        goto -> bb12;
    }

    bb31: {
        goto -> bb12;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:73:1: 73:13>::new::{closure#0}(_1: {closure@sdk/client/src/proxy.rs:78:22: 78:25}, _2: VarError) -> std::result::Result<std::string::String, VarError> {
    let mut _0: std::result::Result<std::string::String, std::env::VarError>;

    bb0: {
        _0 = var::<&str>(const "NO_PROXY") -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:73:1: 73:13>::contains(_1: &NoProxy, _2: &str) -> bool {
    debug self => _1;
    debug host => _2;
    let mut _0: bool;
    let _3: &str;
    let mut _4: bool;
    let _5: &[char];
    let mut _6: std::result::Result<std::net::IpAddr, std::net::AddrParseError>;
    let mut _7: &str;
    let mut _8: isize;
    let mut _10: &blocking::proxy::IpMatcher;
    let mut _11: &blocking::proxy::DomainMatcher;
    let mut _12: &str;
    let mut _13: &[char; 2];
    scope 1 {
        debug host => _3;
        let _9: std::net::IpAddr;
        scope 3 {
            debug ip => _9;
        }
    }
    scope 2 {
        debug x => _5;
    }

    bb0: {
        _4 = core::str::<impl str>::starts_with::<'_, char>(_2, const '[') -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = const _;
        _5 = _13 as &[char] (PointerCoercion(Unsize));
        _3 = core::str::<impl str>::trim_matches::<'_, &[char]>(_2, _5) -> [return: bb4, unwind continue];
    }

    bb3: {
        _3 = _2;
        goto -> bb4;
    }

    bb4: {
        _7 = _3;
        _6 = core::str::<impl str>::parse::<IpAddr>(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _11 = &((*_1).1: blocking::proxy::DomainMatcher);
        _12 = _3;
        _0 = DomainMatcher::contains(move _11, move _12) -> [return: bb9, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _9 = ((_6 as Ok).0: std::net::IpAddr);
        _10 = &((*_1).0: blocking::proxy::IpMatcher);
        _0 = IpMatcher::contains(move _10, _9) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

promoted[0] in proxy::<impl at sdk/client/src/proxy.rs:73:1: 73:13>::contains: &[char; 2] = {
    let mut _0: &[char; 2];
    let mut _1: [char; 2];

    bb0: {
        _1 = [const '[', const ']'];
        _0 = &_1;
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:119:1: 119:15>::contains(_1: &IpMatcher, _2: IpAddr) -> bool {
    debug self => _1;
    debug addr => _2;
    let mut _0: bool;
    let mut _3: std::slice::Iter<'_, blocking::proxy::Ip>;
    let mut _4: std::slice::Iter<'_, blocking::proxy::Ip>;
    let _5: &[blocking::proxy::Ip];
    let mut _6: &std::vec::Vec<blocking::proxy::Ip>;
    let mut _7: std::slice::Iter<'_, blocking::proxy::Ip>;
    let mut _8: std::option::Option<&blocking::proxy::Ip>;
    let mut _9: &mut std::slice::Iter<'_, blocking::proxy::Ip>;
    let mut _10: isize;
    let mut _12: isize;
    let mut _14: bool;
    let mut _15: &&std::net::IpAddr;
    let _16: &std::net::IpAddr;
    let mut _17: &&std::net::IpAddr;
    let mut _19: bool;
    let mut _20: &std::net::IpAddr;
    scope 1 {
        debug iter => _7;
        let _11: &blocking::proxy::Ip;
        scope 2 {
            debug ip => _11;
            let _13: &std::net::IpAddr;
            let _18: &ipnet::IpNet;
            scope 3 {
                debug address => _13;
            }
            scope 4 {
                debug net => _18;
            }
        }
    }

    bb0: {
        _6 = &((*_1).0: std::vec::Vec<blocking::proxy::Ip>);
        _5 = <Vec<Ip> as Deref>::deref(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = core::slice::<impl [Ip]>::iter(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <std::slice::Iter<'_, Ip> as IntoIterator>::into_iter(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = move _3;
        goto -> bb4;
    }

    bb4: {
        _9 = &mut _7;
        _8 = <std::slice::Iter<'_, Ip> as Iterator>::next(_9) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _11 = ((_8 as Some).0: &blocking::proxy::Ip);
        _12 = discriminant((*_11));
        switchInt(move _12) -> [0: bb10, 1: bb9, otherwise: bb7];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _0 = const false;
        goto -> bb15;
    }

    bb9: {
        _18 = &(((*_11) as Network).0: ipnet::IpNet);
        _20 = &_2;
        _19 = IpNet::contains::<&IpAddr>(_18, move _20) -> [return: bb13, unwind continue];
    }

    bb10: {
        _13 = &(((*_11) as Address).0: std::net::IpAddr);
        _16 = &_2;
        _15 = &_16;
        _17 = &_13;
        _14 = <&IpAddr as PartialEq>::eq(move _15, move _17) -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _14) -> [0: bb4, otherwise: bb12];
    }

    bb12: {
        _0 = const true;
        goto -> bb15;
    }

    bb13: {
        switchInt(move _19) -> [0: bb4, otherwise: bb14];
    }

    bb14: {
        _0 = const true;
        goto -> bb15;
    }

    bb15: {
        return;
    }
}

fn proxy::<impl at sdk/client/src/proxy.rs:139:1: 139:19>::contains(_1: &DomainMatcher, _2: &str) -> bool {
    debug self => _1;
    debug domain => _2;
    let mut _0: bool;
    let mut _3: std::slice::Iter<'_, std::string::String>;
    let mut _4: std::slice::Iter<'_, std::string::String>;
    let _5: &[std::string::String];
    let mut _6: &std::vec::Vec<std::string::String>;
    let mut _7: std::slice::Iter<'_, std::string::String>;
    let mut _8: std::option::Option<&std::string::String>;
    let mut _9: &mut std::slice::Iter<'_, std::string::String>;
    let mut _10: isize;
    let mut _12: bool;
    let _13: &str;
    let mut _14: &std::string::String;
    let mut _15: bool;
    let mut _16: &str;
    let mut _17: &str;
    let mut _18: std::option::Option<&str>;
    let _19: &str;
    let mut _20: &std::string::String;
    let mut _21: std::ops::RangeFrom<usize>;
    let mut _22: bool;
    let mut _23: &&std::string::String;
    let mut _24: &&str;
    scope 1 {
        debug iter => _7;
        let _11: &std::string::String;
        scope 2 {
            debug d => _11;
        }
    }

    bb0: {
        _6 = &((*_1).0: std::vec::Vec<std::string::String>);
        _5 = <Vec<std::string::String> as Deref>::deref(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = core::slice::<impl [std::string::String]>::iter(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <std::slice::Iter<'_, std::string::String> as IntoIterator>::into_iter(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = move _3;
        goto -> bb4;
    }

    bb4: {
        _9 = &mut _7;
        _8 = <std::slice::Iter<'_, std::string::String> as Iterator>::next(_9) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _11 = ((_8 as Some).0: &std::string::String);
        _14 = _11;
        _13 = <std::string::String as Deref>::deref(move _14) -> [return: bb9, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _0 = const false;
        goto -> bb19;
    }

    bb9: {
        _12 = core::str::<impl str>::starts_with::<'_, char>(_13, const '.') -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _12) -> [0: bb16, otherwise: bb11];
    }

    bb11: {
        _16 = _2;
        _20 = _11;
        _19 = <std::string::String as Deref>::deref(move _20) -> [return: bb12, unwind continue];
    }

    bb12: {
        _21 = RangeFrom::<usize> { start: const 1_usize };
        _18 = core::str::<impl str>::get::<RangeFrom<usize>>(_19, move _21) -> [return: bb13, unwind continue];
    }

    bb13: {
        _17 = std::option::Option::<&str>::unwrap_or_default(move _18) -> [return: bb14, unwind continue];
    }

    bb14: {
        _15 = core::str::<impl str>::ends_with::<'_, &str>(move _16, move _17) -> [return: bb15, unwind continue];
    }

    bb15: {
        switchInt(move _15) -> [0: bb16, otherwise: bb18];
    }

    bb16: {
        _23 = &_11;
        _24 = &_2;
        _22 = <&std::string::String as PartialEq<&str>>::eq(move _23, move _24) -> [return: bb17, unwind continue];
    }

    bb17: {
        switchInt(move _22) -> [0: bb4, otherwise: bb18];
    }

    bb18: {
        _0 = const true;
        goto -> bb19;
    }

    bb19: {
        return;
    }
}

const REQUEST_TIMEOUT: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const 10000_u64;
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:39:10: 39:15>::clone(_1: &BlockingClient) -> BlockingClient {
    debug self => _1;
    let mut _0: blocking::BlockingClient;
    let mut _2: std::string::String;
    let _3: &std::string::String;
    let mut _4: state::StateManager;
    let _5: &state::StateManager;
    let mut _6: retry::Retry;
    let _7: &retry::Retry;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _2 = <std::string::String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: state::StateManager);
        _4 = <StateManager as Clone>::clone(_5) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _7 = &((*_1).2: retry::Retry);
        _6 = <retry::Retry as Clone>::clone(_7) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = BlockingClient { url: move _2, state: move _4, retry: move _6 };
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:39:17: 39:22>::fmt(_1: &BlockingClient, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &state::StateManager;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&retry::Retry;
    let _13: &retry::Retry;

    bb0: {
        _3 = const "BlockingClient";
        _4 = const "url";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "state";
        _9 = &((*_1).1: state::StateManager);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "retry";
        _13 = &((*_1).2: retry::Retry);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::new(_1: T) -> BlockingClient {
    debug url => _1;
    let mut _0: blocking::BlockingClient;
    let mut _2: std::string::String;
    let mut _3: state::StateManager;
    let mut _4: retry::Retry;

    bb0: {
        _2 = <T as Into<std::string::String>>::into(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = StateManager::new() -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _4 = <retry::Retry as Default>::default() -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = BlockingClient { url: move _2, state: move _3, retry: move _4 };
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::last_known_state(_1: &BlockingClient) -> std::option::Option<state::State> {
    debug self => _1;
    let mut _0: std::option::Option<state::State>;
    let mut _2: &state::StateManager;

    bb0: {
        _2 = &((*_1).1: state::StateManager);
        _0 = StateManager::last_known_state(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::wait_for_signed_transaction(_1: &BlockingClient, _2: &SignedTransaction, _3: std::option::Option<Duration>, _4: std::option::Option<Duration>) -> std::result::Result<response::Response<TransactionView>, WaitForTransactionError> {
    debug self => _1;
    debug txn => _2;
    debug timeout => _3;
    debug delay => _4;
    let mut _0: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>;
    let _5: response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::WaitForTransactionError>, response::Response<diem_json_rpc_types::views::TransactionView>>;
    let mut _7: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>;
    let mut _8: diem_types::PeerId;
    let mut _9: u64;
    let mut _10: u64;
    let mut _11: diem_crypto::HashValue;
    let mut _12: &diem_types::transaction::Transaction;
    let _13: diem_types::transaction::Transaction;
    let mut _14: diem_types::transaction::SignedTransaction;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::WaitForTransactionError>;
    let _17: response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _18: bool;
    let mut _19: &diem_json_rpc_types::views::VMStatusView;
    let _20: &diem_json_rpc_types::views::TransactionView;
    let mut _21: &response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _22: error::WaitForTransactionError;
    let mut _23: diem_json_rpc_types::views::TransactionView;
    let mut _24: response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _25: response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _26: bool;
    scope 1 {
        debug response => _5;
    }
    scope 2 {
        debug residual => _16;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }

    bb0: {
        _26 = const false;
        _8 = SignedTransaction::sender(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = SignedTransaction::sequence_number(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = SignedTransaction::expiration_timestamp_secs(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _14 = <SignedTransaction as Clone>::clone(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = diem_types::transaction::Transaction::UserTransaction(move _14);
        _12 = &_13;
        _11 = <diem_types::transaction::Transaction as CryptoHash>::hash(move _12) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _7 = BlockingClient::wait_for_transaction(_1, move _8, move _9, move _10, move _11, _3, _4) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _6 = <std::result::Result<response::Response<TransactionView>, WaitForTransactionError> as Try>::branch(move _7) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        _15 = discriminant(_6);
        switchInt(move _15) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        _17 = move ((_6 as Continue).0: response::Response<diem_json_rpc_types::views::TransactionView>);
        _26 = const true;
        _5 = move _17;
        drop(_13) -> [return: bb12, unwind: bb23];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _16 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::WaitForTransactionError>);
        _0 = <std::result::Result<response::Response<TransactionView>, WaitForTransactionError> as FromResidual<std::result::Result<Infallible, WaitForTransactionError>>>::from_residual(move _16) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        drop(_13) -> [return: bb18, unwind continue];
    }

    bb12: {
        _21 = &_5;
        _20 = response::Response::<TransactionView>::inner(move _21) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        _19 = &((*_20).5: diem_json_rpc_types::views::VMStatusView);
        _18 = VMStatusView::is_executed(move _19) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        switchInt(move _18) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _26 = const false;
        _25 = move _5;
        _0 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Ok(move _25);
        _26 = const false;
        goto -> bb19;
    }

    bb16: {
        _26 = const false;
        _24 = move _5;
        _23 = response::Response::<TransactionView>::into_inner(move _24) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _22 = WaitForTransactionError::TransactionExecutionFailed(move _23);
        _0 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Err(move _22);
        goto -> bb18;
    }

    bb18: {
        _26 = const false;
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_13) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_5) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_26) -> [0: bb21, otherwise: bb22];
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::wait_for_transaction(_1: &BlockingClient, _2: AccountAddress, _3: u64, _4: u64, _5: HashValue, _6: std::option::Option<Duration>, _7: std::option::Option<Duration>) -> std::result::Result<response::Response<TransactionView>, WaitForTransactionError> {
    debug self => _1;
    debug address => _2;
    debug seq => _3;
    debug expiration_time_secs => _4;
    debug txn_hash => _5;
    debug timeout => _6;
    debug delay => _7;
    let mut _0: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>;
    let _8: std::time::Instant;
    let mut _9: bool;
    let mut _10: &std::time::Duration;
    let _11: std::time::Duration;
    let mut _12: &std::time::Instant;
    let mut _13: &std::time::Duration;
    let _14: std::time::Duration;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::WaitForTransactionError>, response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>>;
    let mut _17: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::WaitForTransactionError>;
    let mut _18: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>;
    let mut _19: isize;
    let mut _22: (std::option::Option<diem_json_rpc_types::views::TransactionView>, state::State);
    let mut _23: response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>;
    let mut _24: isize;
    let mut _27: bool;
    let mut _28: &diem_crypto::HashValue;
    let mut _29: &diem_crypto::HashValue;
    let mut _30: error::WaitForTransactionError;
    let mut _31: diem_json_rpc_types::views::TransactionView;
    let mut _32: response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _33: diem_json_rpc_types::views::TransactionView;
    let mut _34: std::option::Option<state::State>;
    let mut _35: isize;
    let mut _37: bool;
    let mut _38: u64;
    let mut _39: u64;
    let mut _40: bool;
    let mut _41: error::WaitForTransactionError;
    let _42: ();
    let mut _43: std::time::Duration;
    let mut _44: error::WaitForTransactionError;
    let mut _45: bool;
    let mut _46: bool;
    scope 1 {
        debug start => _8;
        let _15: response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>;
        let _20: std::result::Result<std::convert::Infallible, error::WaitForTransactionError>;
        let _21: response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>;
        scope 2 {
            debug txn_resp => _15;
            scope 7 {
                debug txn => _25;
                debug state => _26;
                let _25: diem_json_rpc_types::views::TransactionView;
                let _26: state::State;
            }
            scope 8 {
                debug state => _36;
                let _36: state::State;
            }
        }
        scope 3 {
            debug residual => _20;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _21;
            scope 6 {
            }
        }
    }

    bb0: {
        _46 = const false;
        _45 = const false;
        _8 = std::time::Instant::now() -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = &_8;
        _11 = std::time::Instant::elapsed(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = &_11;
        _14 = std::option::Option::<Duration>::unwrap_or(_6, const _) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = &_14;
        _9 = <Duration as PartialOrd>::lt(move _10, move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _9) -> [0: bb27, otherwise: bb5];
    }

    bb5: {
        _18 = BlockingClient::get_account_transaction(_1, _2, _3, const true) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = std::result::Result::<response::Response<std::option::Option<TransactionView>>, error::Error>::map_err::<WaitForTransactionError, fn(error::Error) -> WaitForTransactionError {WaitForTransactionError::GetTransactionError}>(move _18, WaitForTransactionError::GetTransactionError) -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = <std::result::Result<response::Response<std::option::Option<TransactionView>>, WaitForTransactionError> as Try>::branch(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        _21 = move ((_16 as Continue).0: response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>);
        _46 = const true;
        _15 = move _21;
        _46 = const false;
        _23 = move _15;
        _22 = response::Response::<std::option::Option<TransactionView>>::into_parts(move _23) -> [return: bb12, unwind: bb35];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::WaitForTransactionError>);
        _0 = <std::result::Result<response::Response<TransactionView>, WaitForTransactionError> as FromResidual<std::result::Result<Infallible, WaitForTransactionError>>>::from_residual(move _20) -> [return: bb29, unwind continue];
    }

    bb12: {
        _24 = discriminant((_22.0: std::option::Option<diem_json_rpc_types::views::TransactionView>));
        switchInt(move _24) -> [1: bb13, otherwise: bb18];
    }

    bb13: {
        _26 = move (_22.1: state::State);
        _45 = const true;
        _25 = move (((_22.0: std::option::Option<diem_json_rpc_types::views::TransactionView>) as Some).0: diem_json_rpc_types::views::TransactionView);
        _28 = &(_25.2: diem_crypto::HashValue);
        _29 = &_5;
        _27 = <HashValue as PartialEq>::ne(move _28, move _29) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        switchInt(move _27) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _45 = const false;
        _31 = move _25;
        _30 = WaitForTransactionError::TransactionHashMismatchError(move _31);
        _0 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Err(move _30);
        goto -> bb28;
    }

    bb16: {
        _45 = const false;
        _33 = move _25;
        _32 = response::Response::<TransactionView>::new(move _33, move _26) -> [return: bb17, unwind: bb33];
    }

    bb17: {
        _0 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Ok(move _32);
        goto -> bb28;
    }

    bb18: {
        drop(_22) -> [return: bb19, unwind: bb35];
    }

    bb19: {
        _34 = BlockingClient::last_known_state(_1) -> [return: bb20, unwind: bb35];
    }

    bb20: {
        _35 = discriminant(_34);
        switchInt(move _35) -> [1: bb21, otherwise: bb24];
    }

    bb21: {
        _36 = move ((_34 as Some).0: state::State);
        _39 = (_36.2: u64);
        _40 = Eq(const 1000000_u64, const 0_u64);
        assert(!move _40, "attempt to divide `{}` by zero", _39) -> [success: bb22, unwind: bb35];
    }

    bb22: {
        _38 = Div(move _39, const 1000000_u64);
        _37 = Le(_4, move _38);
        switchInt(move _37) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _41 = WaitForTransactionError::TransactionExpired;
        _0 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Err(move _41);
        goto -> bb29;
    }

    bb24: {
        _43 = std::option::Option::<Duration>::unwrap_or(_7, const _) -> [return: bb25, unwind: bb35];
    }

    bb25: {
        _42 = std::thread::sleep(move _43) -> [return: bb26, unwind: bb35];
    }

    bb26: {
        _46 = const false;
        goto -> bb1;
    }

    bb27: {
        _44 = WaitForTransactionError::Timeout;
        _0 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Err(move _44);
        goto -> bb30;
    }

    bb28: {
        _45 = const false;
        goto -> bb29;
    }

    bb29: {
        _46 = const false;
        goto -> bb30;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        resume;
    }

    bb32 (cleanup): {
        drop(_25) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_45) -> [0: bb35, otherwise: bb32];
    }

    bb34 (cleanup): {
        drop(_15) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        switchInt(_46) -> [0: bb31, otherwise: bb34];
    }
}

const blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::wait_for_transaction::DEFAULT_TIMEOUT: Duration = {
    let mut _0: std::time::Duration;

    bb0: {
        ConstEvalCounter;
        _0 = Duration::from_secs(const 60_u64) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::wait_for_transaction::DEFAULT_DELAY: Duration = {
    let mut _0: std::time::Duration;

    bb0: {
        ConstEvalCounter;
        _0 = Duration::from_millis(const 500_u64) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::batch(_1: &BlockingClient, _2: Vec<request::MethodRequest>) -> std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> {
    debug self => _1;
    debug requests => _2;
    let mut _0: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>;

    bb0: {
        _0 = BlockingClient::send_batch(_1, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::request(_1: &BlockingClient, _2: request::MethodRequest) -> std::result::Result<response::Response<MethodResponse>, error::Error> {
    debug self => _1;
    debug request => _2;
    let mut _0: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
    let _3: Method;
    let mut _4: &request::MethodRequest;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<serde_json::Value>>;
    let mut _7: std::result::Result<response::Response<serde_json::Value>, error::Error>;
    let mut _8: request::MethodRequest;
    let mut _9: isize;
    let mut _12: response::Response<serde_json::Value>;
    let mut _13: {closure@sdk/client/src/blocking.rs:129:23: 129:29};
    let mut _14: bool;
    let mut _15: bool;
    scope 1 {
        debug method => _3;
        let _5: response::Response<serde_json::Value>;
        let _10: std::result::Result<std::convert::Infallible, error::Error>;
        let _11: response::Response<serde_json::Value>;
        scope 2 {
            debug resp => _5;
        }
        scope 3 {
            debug residual => _10;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _11;
            scope 6 {
            }
        }
    }

    bb0: {
        _15 = const false;
        _14 = const false;
        _15 = const true;
        _4 = &_2;
        _3 = request::MethodRequest::method(move _4) -> [return: bb1, unwind: bb14];
    }

    bb1: {
        _15 = const false;
        _8 = move _2;
        _7 = BlockingClient::send::<SerdeValue>(_1, move _8) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _6 = <std::result::Result<response::Response<SerdeValue>, error::Error> as Try>::branch(move _7) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _11 = move ((_6 as Continue).0: response::Response<serde_json::Value>);
        _14 = const true;
        _5 = move _11;
        _14 = const false;
        _12 = move _5;
        _13 = {closure@sdk/client/src/blocking.rs:129:23: 129:29} { method: move _3 };
        _0 = response::Response::<SerdeValue>::and_then::<MethodResponse, error::Error, {closure@sdk/client/src/blocking.rs:129:23: 129:29}>(move _12, move _13) -> [return: bb8, unwind: bb12];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<response::Response<MethodResponse>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _10) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _14 = const false;
        goto -> bb9;
    }

    bb8: {
        _14 = const false;
        goto -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_5) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_14) -> [0: bb14, otherwise: bb11];
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_15) -> [0: bb10, otherwise: bb13];
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::request::{closure#0}(_1: {closure@sdk/client/src/blocking.rs:129:23: 129:29}, _2: SerdeValue) -> std::result::Result<MethodResponse, error::Error> {
    debug json => _2;
    debug method => (_1.0: Method);
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let mut _3: std::result::Result<response::MethodResponse, error::Error>;
    let mut _4: Method;

    bb0: {
        _4 = move (_1.0: Method);
        _3 = MethodResponse::from_json(move _4, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::result::Result::<MethodResponse, error::Error>::map_err::<error::Error, fn(error::Error) -> error::Error {error::Error::decode::<error::Error>}>(move _3, error::Error::decode::<error::Error>) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::submit(_1: &BlockingClient, _2: &SignedTransaction) -> std::result::Result<response::Response<()>, error::Error> {
    debug self => _1;
    debug txn => _2;
    let mut _0: std::result::Result<response::Response<()>, error::Error>;
    let _3: request::JsonRpcRequest;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, request::MethodRequest>;
    let mut _5: std::result::Result<request::MethodRequest, error::Error>;
    let mut _6: std::result::Result<request::MethodRequest, bcs::Error>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, error::Error>;
    let _9: request::MethodRequest;
    let _10: &request::JsonRpcRequest;
    scope 1 {
        debug request => _3;
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _6 = request::MethodRequest::submit(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = std::result::Result::<request::MethodRequest, bcs::Error>::map_err::<error::Error, fn(bcs::Error) -> error::Error {error::Error::request::<bcs::Error>}>(move _6, error::Error::request::<bcs::Error>) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = <std::result::Result<request::MethodRequest, error::Error> as Try>::branch(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_4 as Continue).0: request::MethodRequest);
        _3 = request::JsonRpcRequest::new(move _9) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<response::Response<()>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _8) -> [return: bb9, unwind continue];
    }

    bb7: {
        _10 = &_3;
        _0 = BlockingClient::send_without_retry::<()>(_1, _10, const true) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_3) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_metadata_by_version(_1: &BlockingClient, _2: u64) -> std::result::Result<response::Response<MetadataView>, error::Error> {
    debug self => _1;
    debug version => _2;
    let mut _0: std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>;
    let mut _3: request::MethodRequest;

    bb0: {
        _3 = request::MethodRequest::get_metadata_by_version(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<MetadataView>(_1, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_metadata(_1: &BlockingClient) -> std::result::Result<response::Response<MetadataView>, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>;
    let mut _2: request::MethodRequest;

    bb0: {
        _2 = request::MethodRequest::get_metadata() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<MetadataView>(_1, move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_account(_1: &BlockingClient, _2: AccountAddress) -> std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error> {
    debug self => _1;
    debug address => _2;
    let mut _0: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>;
    let mut _3: request::MethodRequest;

    bb0: {
        _3 = request::MethodRequest::get_account(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<std::option::Option<AccountView>>(_1, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_account_by_version(_1: &BlockingClient, _2: AccountAddress, _3: u64) -> std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error> {
    debug self => _1;
    debug address => _2;
    debug version => _3;
    let mut _0: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>;
    let mut _4: request::MethodRequest;

    bb0: {
        _4 = request::MethodRequest::get_account_by_version(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<std::option::Option<AccountView>>(_1, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_transactions(_1: &BlockingClient, _2: u64, _3: u64, _4: bool) -> std::result::Result<response::Response<Vec<TransactionView>>, error::Error> {
    debug self => _1;
    debug start_seq => _2;
    debug limit => _3;
    debug include_events => _4;
    let mut _0: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>;
    let mut _5: request::MethodRequest;

    bb0: {
        _5 = request::MethodRequest::get_transactions(_2, _3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<Vec<TransactionView>>(_1, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_account_transaction(_1: &BlockingClient, _2: AccountAddress, _3: u64, _4: bool) -> std::result::Result<response::Response<std::option::Option<TransactionView>>, error::Error> {
    debug self => _1;
    debug address => _2;
    debug seq => _3;
    debug include_events => _4;
    let mut _0: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>;
    let mut _5: request::MethodRequest;

    bb0: {
        _5 = request::MethodRequest::get_account_transaction(_2, _3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<std::option::Option<TransactionView>>(_1, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_account_transactions(_1: &BlockingClient, _2: AccountAddress, _3: u64, _4: u64, _5: bool) -> std::result::Result<response::Response<Vec<TransactionView>>, error::Error> {
    debug self => _1;
    debug address => _2;
    debug start_seq => _3;
    debug limit => _4;
    debug include_events => _5;
    let mut _0: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>;
    let mut _6: request::MethodRequest;

    bb0: {
        _6 = request::MethodRequest::get_account_transactions(_2, _3, _4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<Vec<TransactionView>>(_1, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_events(_1: &BlockingClient, _2: EventKey, _3: u64, _4: u64) -> std::result::Result<response::Response<Vec<EventView>>, error::Error> {
    debug self => _1;
    debug key => _2;
    debug start_seq => _3;
    debug limit => _4;
    let mut _0: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventView>>, error::Error>;
    let mut _5: request::MethodRequest;

    bb0: {
        _5 = request::MethodRequest::get_events(_2, _3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<Vec<EventView>>(_1, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_currencies(_1: &BlockingClient) -> std::result::Result<response::Response<Vec<CurrencyInfoView>>, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>>, error::Error>;
    let mut _2: request::MethodRequest;

    bb0: {
        _2 = request::MethodRequest::get_currencies() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<Vec<CurrencyInfoView>>(_1, move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_network_status(_1: &BlockingClient) -> std::result::Result<response::Response<u64>, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<response::Response<u64>, error::Error>;
    let mut _2: request::MethodRequest;

    bb0: {
        _2 = request::MethodRequest::get_network_status() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<u64>(_1, move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_state_proof(_1: &BlockingClient, _2: u64) -> std::result::Result<response::Response<StateProofView>, error::Error> {
    debug self => _1;
    debug from_version => _2;
    let mut _0: std::result::Result<response::Response<diem_json_rpc_types::views::StateProofView>, error::Error>;
    let mut _3: request::MethodRequest;

    bb0: {
        _3 = request::MethodRequest::get_state_proof(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<StateProofView>(_1, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_accumulator_consistency_proof(_1: &BlockingClient, _2: std::option::Option<u64>, _3: std::option::Option<u64>) -> std::result::Result<response::Response<AccumulatorConsistencyProofView>, error::Error> {
    debug self => _1;
    debug client_known_version => _2;
    debug ledger_version => _3;
    let mut _0: std::result::Result<response::Response<diem_json_rpc_types::views::AccumulatorConsistencyProofView>, error::Error>;
    let mut _4: request::MethodRequest;

    bb0: {
        _4 = request::MethodRequest::get_accumulator_consistency_proof(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<AccumulatorConsistencyProofView>(_1, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_account_state_with_proof(_1: &BlockingClient, _2: AccountAddress, _3: std::option::Option<u64>, _4: std::option::Option<u64>) -> std::result::Result<response::Response<AccountStateWithProofView>, error::Error> {
    debug self => _1;
    debug address => _2;
    debug from_version => _3;
    debug to_version => _4;
    let mut _0: std::result::Result<response::Response<diem_json_rpc_types::views::AccountStateWithProofView>, error::Error>;
    let mut _5: request::MethodRequest;

    bb0: {
        _5 = request::MethodRequest::get_account_state_with_proof(_2, _3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<AccountStateWithProofView>(_1, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_transactions_with_proofs(_1: &BlockingClient, _2: u64, _3: u64, _4: bool) -> std::result::Result<response::Response<std::option::Option<TransactionsWithProofsView>>, error::Error> {
    debug self => _1;
    debug start_version => _2;
    debug limit => _3;
    debug include_events => _4;
    let mut _0: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>>, error::Error>;
    let mut _5: request::MethodRequest;

    bb0: {
        _5 = request::MethodRequest::get_transactions_with_proofs(_2, _3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<std::option::Option<TransactionsWithProofsView>>(_1, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_account_transactions_with_proofs(_1: &BlockingClient, _2: AccountAddress, _3: u64, _4: u64, _5: bool, _6: std::option::Option<u64>) -> std::result::Result<response::Response<AccountTransactionsWithProofView>, error::Error> {
    debug self => _1;
    debug address => _2;
    debug start_seq => _3;
    debug limit => _4;
    debug include_events => _5;
    debug ledger_version => _6;
    let mut _0: std::result::Result<response::Response<diem_json_rpc_types::views::AccountTransactionsWithProofView>, error::Error>;
    let mut _7: request::MethodRequest;

    bb0: {
        _7 = request::MethodRequest::get_account_transactions_with_proofs(_2, _3, _4, _5, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<AccountTransactionsWithProofView>(_1, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_events_with_proofs(_1: &BlockingClient, _2: EventKey, _3: u64, _4: u64) -> std::result::Result<response::Response<Vec<EventWithProofView>>, error::Error> {
    debug self => _1;
    debug key => _2;
    debug start_seq => _3;
    debug limit => _4;
    let mut _0: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>, error::Error>;
    let mut _5: request::MethodRequest;

    bb0: {
        _5 = request::MethodRequest::get_events_with_proofs(_2, _3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<Vec<EventWithProofView>>(_1, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_event_by_version_with_proof(_1: &BlockingClient, _2: EventKey, _3: std::option::Option<u64>) -> std::result::Result<response::Response<EventByVersionWithProofView>, error::Error> {
    debug self => _1;
    debug key => _2;
    debug version => _3;
    let mut _0: std::result::Result<response::Response<diem_json_rpc_types::views::EventByVersionWithProofView>, error::Error>;
    let mut _4: request::MethodRequest;

    bb0: {
        _4 = request::MethodRequest::get_event_by_version_with_proof(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = BlockingClient::send::<EventByVersionWithProofView>(_1, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_deserialized_events(_1: &BlockingClient, _2: &EventKey, _3: u64, _4: u64) -> std::result::Result<response::Response<Vec<move_deserialize::Event<T>>>, error::Error> {
    debug self => _1;
    debug event_key => _2;
    debug start_seq => _3;
    debug limit => _4;
    let mut _0: std::result::Result<response::Response<std::vec::Vec<move_deserialize::Event<T>>>, error::Error>;
    let _5: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>;
    let _6: state::State;
    let mut _7: (std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>, state::State);
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>>;
    let mut _9: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>, error::Error>;
    let mut _10: diem_types::event::EventKey;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::Error>;
    let _13: response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>;
    let mut _14: response::Response<std::vec::Vec<move_deserialize::Event<T>>>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<move_deserialize::Event<T>>>;
    let mut _16: std::result::Result<std::vec::Vec<move_deserialize::Event<T>>, error::Error>;
    let mut _17: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>;
    let mut _18: isize;
    let mut _21: bool;
    scope 1 {
        debug events => _5;
        debug state => _6;
        let _19: std::result::Result<std::convert::Infallible, error::Error>;
        let _20: std::vec::Vec<move_deserialize::Event<T>>;
        scope 6 {
            debug residual => _19;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _20;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        _21 = const false;
        _10 = (*_2);
        _9 = BlockingClient::get_events_with_proofs(_1, move _10, _3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = <std::result::Result<response::Response<Vec<EventWithProofView>>, error::Error> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _13 = move ((_8 as Continue).0: response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>);
        _7 = response::Response::<Vec<EventWithProofView>>::into_parts(move _13) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<response::Response<Vec<move_deserialize::Event<T>>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _12) -> [return: bb13, unwind continue];
    }

    bb6: {
        _21 = const true;
        _5 = move (_7.0: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>);
        _6 = move (_7.1: state::State);
        _21 = const false;
        _17 = move _5;
        _16 = move_deserialize::get_events::<T>(move _17) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _15 = <std::result::Result<Vec<move_deserialize::Event<T>>, error::Error> as Try>::branch(move _16) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _20 = move ((_15 as Continue).0: std::vec::Vec<move_deserialize::Event<T>>);
        _14 = response::Response::<Vec<move_deserialize::Event<T>>>::new(move _20, move _6) -> [return: bb12, unwind continue];
    }

    bb10: {
        _19 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<response::Response<Vec<move_deserialize::Event<T>>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        _21 = const false;
        goto -> bb13;
    }

    bb12: {
        _0 = std::result::Result::<response::Response<Vec<move_deserialize::Event<T>>>, error::Error>::Ok(move _14);
        _21 = const false;
        goto -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_5) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_21) -> [0: bb14, otherwise: bb15];
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::get_deserialized_resource(_1: &BlockingClient, _2: AccountAddress) -> std::result::Result<response::Response<std::option::Option<T>>, error::Error> {
    debug self => _1;
    debug address => _2;
    let mut _0: std::result::Result<response::Response<std::option::Option<T>>, error::Error>;
    let _3: diem_json_rpc_types::views::AccountStateWithProofView;
    let _4: state::State;
    let mut _5: (diem_json_rpc_types::views::AccountStateWithProofView, state::State);
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<diem_json_rpc_types::views::AccountStateWithProofView>>;
    let mut _7: std::result::Result<response::Response<diem_json_rpc_types::views::AccountStateWithProofView>, error::Error>;
    let mut _8: std::option::Option<u64>;
    let mut _9: std::option::Option<u64>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::Error>;
    let _12: response::Response<diem_json_rpc_types::views::AccountStateWithProofView>;
    let mut _13: response::Response<std::option::Option<T>>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::option::Option<T>>;
    let mut _15: std::result::Result<std::option::Option<T>, error::Error>;
    let mut _16: diem_json_rpc_types::views::AccountStateWithProofView;
    let mut _17: isize;
    let mut _20: bool;
    scope 1 {
        debug account => _3;
        debug state => _4;
        let _18: std::result::Result<std::convert::Infallible, error::Error>;
        let _19: std::option::Option<T>;
        scope 6 {
            debug residual => _18;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _19;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        _20 = const false;
        _8 = std::option::Option::<u64>::None;
        _9 = std::option::Option::<u64>::None;
        _7 = BlockingClient::get_account_state_with_proof(_1, _2, move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = <std::result::Result<response::Response<AccountStateWithProofView>, error::Error> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _12 = move ((_6 as Continue).0: response::Response<diem_json_rpc_types::views::AccountStateWithProofView>);
        _5 = response::Response::<AccountStateWithProofView>::into_parts(move _12) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<response::Response<std::option::Option<T>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _11) -> [return: bb13, unwind continue];
    }

    bb6: {
        _20 = const true;
        _3 = move (_5.0: diem_json_rpc_types::views::AccountStateWithProofView);
        _4 = move (_5.1: state::State);
        _20 = const false;
        _16 = move _3;
        _15 = get_resource::<T>(move _16) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _14 = <std::result::Result<std::option::Option<T>, error::Error> as Try>::branch(move _15) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        _19 = move ((_14 as Continue).0: std::option::Option<T>);
        _13 = response::Response::<std::option::Option<T>>::new(move _19, move _4) -> [return: bb12, unwind continue];
    }

    bb10: {
        _18 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<response::Response<std::option::Option<T>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        _20 = const false;
        goto -> bb13;
    }

    bb12: {
        _0 = std::result::Result::<response::Response<std::option::Option<T>>, error::Error>::Ok(move _13);
        _20 = const false;
        goto -> bb13;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_3) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_20) -> [0: bb14, otherwise: bb15];
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::send(_1: &BlockingClient, _2: request::MethodRequest) -> std::result::Result<response::Response<T>, error::Error> {
    debug self => _1;
    debug request => _2;
    let mut _0: std::result::Result<response::Response<T>, error::Error>;
    let _3: request::JsonRpcRequest;
    let mut _4: &retry::Retry;
    let mut _5: {closure@sdk/client/src/blocking.rs:335:20: 335:22};
    let mut _6: &&blocking::BlockingClient;
    let mut _7: &request::JsonRpcRequest;
    scope 1 {
        debug request => _3;
    }

    bb0: {
        _3 = request::JsonRpcRequest::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &((*_1).2: retry::Retry);
        _6 = &_1;
        _7 = &_3;
        _5 = {closure@sdk/client/src/blocking.rs:335:20: 335:22} { self: move _6, request: move _7 };
        _0 = retry::Retry::retry::<response::Response<T>, {closure@sdk/client/src/blocking.rs:335:20: 335:22}>(move _4, move _5) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::send::{closure#0}(_1: &{closure@sdk/client/src/blocking.rs:335:20: 335:22}) -> std::result::Result<response::Response<T>, error::Error> {
    debug self => (*((*_1).0: &&blocking::BlockingClient));
    debug request => (*((*_1).1: &request::JsonRpcRequest));
    let mut _0: std::result::Result<response::Response<T>, error::Error>;
    let mut _2: &&blocking::BlockingClient;
    let mut _3: &blocking::BlockingClient;
    let mut _4: &request::JsonRpcRequest;

    bb0: {
        _2 = deref_copy ((*_1).0: &&blocking::BlockingClient);
        _3 = deref_copy (*_2);
        _4 = deref_copy ((*_1).1: &request::JsonRpcRequest);
        _0 = BlockingClient::send_without_retry::<T>(_3, _4, const false) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::send_without_retry(_1: &BlockingClient, _2: &request::JsonRpcRequest, _3: bool) -> std::result::Result<response::Response<T>, error::Error> {
    debug self => _1;
    debug request => _2;
    debug ignore_stale => _3;
    let mut _0: std::result::Result<response::Response<T>, error::Error>;
    let _4: std::option::Option<state::State>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _7: std::result::Result<diem_json_rpc_types::response::JsonRpcResponse, error::Error>;
    let _8: &&request::JsonRpcRequest;
    let mut _9: isize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, (u64, state::State, serde_json::Value)>;
    let mut _16: std::result::Result<(u64, state::State, serde_json::Value), error::Error>;
    let _17: &state::StateManager;
    let mut _18: std::option::Option<&state::State>;
    let mut _19: &std::option::Option<state::State>;
    let _20: &diem_json_rpc_types::response::JsonRpcResponse;
    let mut _21: isize;
    let mut _24: bool;
    let mut _25: u64;
    let mut _26: &request::JsonRpcRequest;
    let mut _27: error::Error;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, T>;
    let mut _30: std::result::Result<T, error::Error>;
    let mut _31: std::result::Result<T, serde_json::Error>;
    let mut _32: serde_json::Value;
    let mut _33: isize;
    let mut _36: response::Response<T>;
    let mut _37: T;
    let mut _38: bool;
    let mut _39: bool;
    scope 1 {
        debug req_state => _4;
        let _5: diem_json_rpc_types::response::JsonRpcResponse;
        let _10: std::result::Result<std::convert::Infallible, error::Error>;
        let _11: diem_json_rpc_types::response::JsonRpcResponse;
        scope 2 {
            debug resp => _5;
            let _12: u64;
            let _13: state::State;
            let _14: serde_json::Value;
            let _22: std::result::Result<std::convert::Infallible, error::Error>;
            let _23: (u64, state::State, serde_json::Value);
            scope 7 {
                debug id => _12;
                debug state => _13;
                debug result => _14;
                let _28: T;
                let _34: std::result::Result<std::convert::Infallible, error::Error>;
                let _35: T;
                scope 12 {
                    debug inner => _28;
                }
                scope 13 {
                    debug residual => _34;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _35;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _22;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _23;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _10;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _11;
            scope 6 {
            }
        }
    }

    bb0: {
        _38 = const false;
        _39 = const false;
        _4 = BlockingClient::last_known_state(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_2;
        _7 = BlockingClient::send_impl::<&request::JsonRpcRequest, JsonRpcResponse>(_1, _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = <std::result::Result<JsonRpcResponse, error::Error> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _11 = move ((_6 as Continue).0: diem_json_rpc_types::response::JsonRpcResponse);
        _5 = move _11;
        _17 = &((*_1).1: state::StateManager);
        _19 = &_4;
        _18 = std::option::Option::<state::State>::as_ref(move _19) -> [return: bb7, unwind: bb26];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<response::Response<T>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _10) -> [return: bb25, unwind continue];
    }

    bb7: {
        _20 = &_5;
        _16 = validate(_17, move _18, _20, _3) -> [return: bb8, unwind: bb26];
    }

    bb8: {
        _15 = <std::result::Result<(u64, state::State, SerdeValue), error::Error> as Try>::branch(move _16) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        _21 = discriminant(_15);
        switchInt(move _21) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        _23 = move ((_15 as Continue).0: (u64, state::State, serde_json::Value));
        _12 = (_23.0: u64);
        _13 = move (_23.1: state::State);
        _38 = const true;
        _14 = move (_23.2: serde_json::Value);
        _26 = _2;
        _25 = request::JsonRpcRequest::id(move _26) -> [return: bb12, unwind: bb33];
    }

    bb11: {
        _22 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<response::Response<T>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _22) -> [return: bb34, unwind: bb26];
    }

    bb12: {
        _24 = Ne(move _25, _12);
        switchInt(move _24) -> [0: bb15, otherwise: bb13];
    }

    bb13: {
        _27 = error::Error::rpc_response::<&str>(const "invalid response id") -> [return: bb14, unwind: bb33];
    }

    bb14: {
        _0 = std::result::Result::<response::Response<T>, error::Error>::Err(move _27);
        goto -> bb29;
    }

    bb15: {
        _38 = const false;
        _32 = move _14;
        _31 = from_value::<T>(move _32) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        _30 = std::result::Result::<T, serde_json::Error>::map_err::<error::Error, fn(serde_json::Error) -> error::Error {error::Error::decode::<serde_json::Error>}>(move _31, error::Error::decode::<serde_json::Error>) -> [return: bb17, unwind: bb33];
    }

    bb17: {
        _29 = <std::result::Result<T, error::Error> as Try>::branch(move _30) -> [return: bb18, unwind: bb33];
    }

    bb18: {
        _33 = discriminant(_29);
        switchInt(move _33) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        _35 = move ((_29 as Continue).0: T);
        _39 = const true;
        _28 = move _35;
        _39 = const false;
        _37 = move _28;
        _36 = response::Response::<T>::new(move _37, move _13) -> [return: bb22, unwind: bb31];
    }

    bb20: {
        _34 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<response::Response<T>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _34) -> [return: bb21, unwind: bb33];
    }

    bb21: {
        _39 = const false;
        goto -> bb29;
    }

    bb22: {
        _0 = std::result::Result::<response::Response<T>, error::Error>::Ok(move _36);
        _39 = const false;
        _38 = const false;
        drop(_5) -> [return: bb25, unwind continue];
    }

    bb23: {
        _38 = const false;
        goto -> bb24;
    }

    bb24: {
        drop(_5) -> [return: bb25, unwind continue];
    }

    bb25: {
        return;
    }

    bb26 (cleanup): {
        drop(_5) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }

    bb28: {
        drop(_14) -> [return: bb23, unwind: bb26];
    }

    bb29: {
        switchInt(_38) -> [0: bb23, otherwise: bb28];
    }

    bb30 (cleanup): {
        drop(_28) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_39) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_14) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_38) -> [0: bb26, otherwise: bb32];
    }

    bb34: {
        goto -> bb24;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::send_batch(_1: &BlockingClient, _2: Vec<request::MethodRequest>) -> std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> {
    debug self => _1;
    debug requests => _2;
    let mut _0: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>;
    let _3: std::vec::Vec<request::JsonRpcRequest>;
    let mut _4: std::iter::Map<std::vec::IntoIter<request::MethodRequest>, fn(request::MethodRequest) -> request::JsonRpcRequest {request::JsonRpcRequest::new}>;
    let mut _5: std::vec::IntoIter<request::MethodRequest>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, BatchResponse>;
    let mut _9: std::result::Result<BatchResponse, error::Error>;
    let _10: &std::vec::Vec<request::JsonRpcRequest>;
    let mut _11: isize;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>>;
    let mut _16: std::result::Result<std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>, error::Error>;
    let mut _17: BatchResponse;
    let mut _18: isize;
    let _21: &state::StateManager;
    let mut _22: std::option::Option<&state::State>;
    let mut _23: &std::option::Option<state::State>;
    let _24: &[request::JsonRpcRequest];
    let _25: &std::vec::Vec<request::JsonRpcRequest>;
    let mut _26: std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _27: bool;
    let mut _28: bool;
    scope 1 {
        debug request => _3;
        let _6: std::option::Option<state::State>;
        scope 2 {
            debug req_state => _6;
            let _7: BatchResponse;
            let _12: std::result::Result<std::convert::Infallible, error::Error>;
            let _13: BatchResponse;
            scope 3 {
                debug resp => _7;
                let _14: std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
                let _19: std::result::Result<std::convert::Infallible, error::Error>;
                let _20: std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
                scope 8 {
                    debug resp => _14;
                }
                scope 9 {
                    debug residual => _19;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _20;
                    scope 12 {
                    }
                }
            }
            scope 4 {
                debug residual => _12;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _13;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _28 = const false;
        _27 = const false;
        _5 = <Vec<request::MethodRequest> as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <std::vec::IntoIter<request::MethodRequest> as Iterator>::map::<request::JsonRpcRequest, fn(request::MethodRequest) -> request::JsonRpcRequest {request::JsonRpcRequest::new}>(move _5, request::JsonRpcRequest::new) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = <std::iter::Map<std::vec::IntoIter<request::MethodRequest>, fn(request::MethodRequest) -> request::JsonRpcRequest {request::JsonRpcRequest::new}> as Iterator>::collect::<Vec<request::JsonRpcRequest>>(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = BlockingClient::last_known_state(_1) -> [return: bb4, unwind: bb20];
    }

    bb4: {
        _10 = &_3;
        _9 = BlockingClient::send_impl::<Vec<request::JsonRpcRequest>, BatchResponse>(_1, _10) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _8 = <std::result::Result<BatchResponse, error::Error> as Try>::branch(move _9) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        _13 = move ((_8 as Continue).0: BatchResponse);
        _28 = const true;
        _7 = move _13;
        _28 = const false;
        _17 = move _7;
        _16 = BatchResponse::success(move _17) -> [return: bb10, unwind: bb25];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _12 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _12) -> [return: bb26, unwind: bb20];
    }

    bb10: {
        _15 = <std::result::Result<Vec<JsonRpcResponse>, error::Error> as Try>::branch(move _16) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _18 = discriminant(_15);
        switchInt(move _18) -> [0: bb12, 1: bb13, otherwise: bb8];
    }

    bb12: {
        _20 = move ((_15 as Continue).0: std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>);
        _27 = const true;
        _14 = move _20;
        _21 = &((*_1).1: state::StateManager);
        _23 = &_6;
        _22 = std::option::Option::<state::State>::as_ref(move _23) -> [return: bb15, unwind: bb23];
    }

    bb13: {
        _19 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _19) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        _27 = const false;
        goto -> bb18;
    }

    bb15: {
        _25 = &_3;
        _24 = <Vec<request::JsonRpcRequest> as Deref>::deref(_25) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        _27 = const false;
        _26 = move _14;
        _0 = validate_batch(_21, move _22, _24, move _26) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _27 = const false;
        _28 = const false;
        drop(_3) -> [return: bb19, unwind continue];
    }

    bb18: {
        _28 = const false;
        drop(_3) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_3) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_14) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_27) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_7) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_28) -> [0: bb20, otherwise: bb24];
    }

    bb26: {
        goto -> bb18;
    }
}

fn blocking::<impl at sdk/client/src/blocking.rs:46:1: 46:20>::send_impl(_1: &BlockingClient, _2: &S) -> std::result::Result<T, error::Error> {
    debug self => _1;
    debug payload => _2;
    let mut _0: std::result::Result<T, error::Error>;
    let mut _3: ureq::Request;
    let mut _4: &ureq::Request;
    let _5: &mut ureq::Request;
    let mut _6: &mut ureq::Request;
    let mut _7: &mut ureq::Request;
    let mut _8: ureq::Request;
    let _9: &str;
    let _10: &std::string::String;
    let _11: &str;
    let _12: &str;
    let mut _15: std::result::Result<std::string::String, ureq::Error>;
    let mut _16: &ureq::Request;
    let _17: &str;
    let mut _19: std::result::Result<std::string::String, ureq::Error>;
    let mut _20: &ureq::Request;
    let _21: &str;
    let mut _23: &str;
    let mut _24: &std::string::String;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: &blocking::proxy::Proxy;
    let _28: &str;
    let _29: &std::string::String;
    let mut _30: &blocking::proxy::Proxy;
    let _31: &str;
    let _32: &std::string::String;
    let mut _33: isize;
    let _35: &mut ureq::Request;
    let mut _36: &mut ureq::Request;
    let mut _37: ureq::Proxy;
    let mut _38: std::result::Result<ureq::Proxy, ureq::Error>;
    let _39: &str;
    let mut _41: &mut ureq::Request;
    let mut _42: serde_json::Value;
    let mut _43: std::result::Result<serde_json::Value, serde_json::Error>;
    let mut _44: &&S;
    let mut _45: bool;
    let mut _46: &ureq::Response;
    let mut _48: std::option::Option<ureq::Error>;
    let mut _49: ureq::Response;
    let mut _51: &ureq::Error;
    let mut _52: isize;
    let mut _53: ureq::Error;
    let mut _55: std::io::ErrorKind;
    let mut _56: isize;
    let mut _57: ureq::Error;
    let mut _58: ureq::Error;
    let mut _59: ureq::Error;
    let mut _60: error::Error;
    let mut _61: u16;
    let mut _62: &ureq::Response;
    let mut _63: error::Error;
    let mut _64: u16;
    let mut _65: &ureq::Response;
    let mut _66: std::result::Result<T, std::io::Error>;
    let mut _67: ureq::Response;
    let mut _68: bool;
    let mut _69: bool;
    scope 1 {
        debug request => _3;
        let _13: blocking::proxy::Proxy;
        scope 2 {
            debug proxy => _13;
            let _14: std::string::String;
            scope 3 {
                debug host => _14;
                let _18: std::string::String;
                scope 4 {
                    debug scheme => _18;
                    let _22: std::option::Option<&str>;
                    scope 5 {
                        debug proxy_url => _22;
                        let _40: ureq::Response;
                        scope 6 {
                            debug proxy_url => _34;
                            let _34: &str;
                        }
                        scope 7 {
                            debug resp => _40;
                            let _47: ureq::Error;
                            scope 8 {
                                debug e => _47;
                                let _50: error::Error;
                                let _54: &std::io::Error;
                                scope 9 {
                                    debug error => _50;
                                }
                                scope 10 {
                                    debug io_error => _54;
                                    scope 11 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _68 = const false;
        _69 = const false;
        _10 = &((*_1).0: std::string::String);
        _9 = <std::string::String as Deref>::deref(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = post(_9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &mut _8;
        _6 = ureq::Request::timeout_connect(move _7, const _) -> [return: bb3, unwind: bb61];
    }

    bb3: {
        _11 = const "User-Agent";
        _12 = const _;
        _5 = ureq::Request::set(_6, _11, _12) -> [return: bb4, unwind: bb61];
    }

    bb4: {
        _4 = &(*_5);
        _3 = ureq::Request::build(move _4) -> [return: bb5, unwind: bb61];
    }

    bb5: {
        drop(_8) -> [return: bb6, unwind: bb60];
    }

    bb6: {
        _13 = proxy::Proxy::new() -> [return: bb7, unwind: bb60];
    }

    bb7: {
        _16 = &_3;
        _15 = ureq::Request::get_host(move _16) -> [return: bb8, unwind: bb59];
    }

    bb8: {
        _17 = const "unable to get the host";
        _14 = std::result::Result::<std::string::String, ureq::Error>::expect(move _15, _17) -> [return: bb9, unwind: bb59];
    }

    bb9: {
        _20 = &_3;
        _19 = ureq::Request::get_scheme(move _20) -> [return: bb10, unwind: bb58];
    }

    bb10: {
        _21 = const "Unable to get the scheme from the host";
        _18 = std::result::Result::<std::string::String, ureq::Error>::expect(move _19, _21) -> [return: bb11, unwind: bb58];
    }

    bb11: {
        _24 = &_18;
        _23 = std::string::String::as_str(move _24) -> [return: bb12, unwind: bb57];
    }

    bb12: {
        _26 = <str as PartialEq>::eq(_23, const "http") -> [return: bb18, unwind: bb57];
    }

    bb13: {
        _27 = &_13;
        _29 = &_14;
        _28 = <std::string::String as Deref>::deref(_29) -> [return: bb19, unwind: bb57];
    }

    bb14: {
        _25 = <str as PartialEq>::eq(_23, const "https") -> [return: bb17, unwind: bb57];
    }

    bb15: {
        _30 = &_13;
        _32 = &_14;
        _31 = <std::string::String as Deref>::deref(_32) -> [return: bb20, unwind: bb57];
    }

    bb16: {
        _22 = std::option::Option::<&str>::None;
        goto -> bb21;
    }

    bb17: {
        switchInt(move _25) -> [0: bb16, otherwise: bb15];
    }

    bb18: {
        switchInt(move _26) -> [0: bb14, otherwise: bb13];
    }

    bb19: {
        _22 = proxy::Proxy::http(move _27, _28) -> [return: bb68, unwind: bb57];
    }

    bb20: {
        _22 = proxy::Proxy::https(move _30, _31) -> [return: bb69, unwind: bb57];
    }

    bb21: {
        _33 = discriminant(_22);
        switchInt(move _33) -> [1: bb22, otherwise: bb25];
    }

    bb22: {
        _34 = ((_22 as Some).0: &str);
        _36 = &mut _3;
        _38 = ureq::Proxy::new::<&str>(_34) -> [return: bb23, unwind: bb57];
    }

    bb23: {
        _39 = const "Unable to parse proxy_url";
        _37 = std::result::Result::<ureq::Proxy, ureq::Error>::expect(move _38, _39) -> [return: bb24, unwind: bb57];
    }

    bb24: {
        _35 = ureq::Request::set_proxy(move _36, move _37) -> [return: bb70, unwind: bb57];
    }

    bb25: {
        _41 = &mut _3;
        _44 = &_2;
        _43 = serde_to_value::<&&S>(move _44) -> [return: bb26, unwind: bb57];
    }

    bb26: {
        _42 = std::result::Result::<SerdeValue, serde_json::Error>::unwrap(move _43) -> [return: bb27, unwind: bb57];
    }

    bb27: {
        _40 = ureq::Request::send_json(move _41, move _42) -> [return: bb28, unwind: bb57];
    }

    bb28: {
        _68 = const true;
        _46 = &_40;
        _45 = ureq::Response::synthetic(move _46) -> [return: bb29, unwind: bb67];
    }

    bb29: {
        switchInt(move _45) -> [0: bb40, otherwise: bb30];
    }

    bb30: {
        _68 = const false;
        _49 = move _40;
        _48 = ureq::Response::into_synthetic_error(move _49) -> [return: bb31, unwind: bb67];
    }

    bb31: {
        _47 = std::option::Option::<ureq::Error>::unwrap(move _48) -> [return: bb32, unwind: bb67];
    }

    bb32: {
        _69 = const true;
        _51 = &_47;
        _52 = discriminant((*_51));
        switchInt(move _52) -> [0: bb34, 1: bb34, 2: bb34, 3: bb34, 6: bb34, 7: bb35, 8: bb34, 9: bb34, 10: bb34, 11: bb34, 12: bb34, otherwise: bb33];
    }

    bb33: {
        _69 = const false;
        _59 = move _47;
        _50 = error::Error::unknown::<ureq::Error>(move _59) -> [return: bb71, unwind: bb65];
    }

    bb34: {
        _69 = const false;
        _53 = move _47;
        _50 = error::Error::request::<ureq::Error>(move _53) -> [return: bb72, unwind: bb65];
    }

    bb35: {
        _54 = &(((*_51) as Io).0: std::io::Error);
        _55 = std::io::Error::kind(_54) -> [return: bb36, unwind: bb65];
    }

    bb36: {
        _56 = discriminant(_55);
        switchInt(move _56) -> [22: bb37, otherwise: bb38];
    }

    bb37: {
        _69 = const false;
        _57 = move _47;
        _50 = error::Error::timeout::<ureq::Error>(move _57) -> [return: bb73, unwind: bb65];
    }

    bb38: {
        _69 = const false;
        _58 = move _47;
        _50 = error::Error::unknown::<ureq::Error>(move _58) -> [return: bb74, unwind: bb65];
    }

    bb39: {
        _60 = move _50;
        _0 = std::result::Result::<T, error::Error>::Err(move _60);
        _69 = const false;
        goto -> bb51;
    }

    bb40: {
        _62 = &_40;
        _61 = ureq::Response::status(move _62) -> [return: bb41, unwind: bb67];
    }

    bb41: {
        switchInt(move _61) -> [200: bb45, otherwise: bb42];
    }

    bb42: {
        _65 = &_40;
        _64 = ureq::Response::status(move _65) -> [return: bb43, unwind: bb67];
    }

    bb43: {
        _63 = error::Error::status(move _64) -> [return: bb44, unwind: bb67];
    }

    bb44: {
        _0 = std::result::Result::<T, error::Error>::Err(move _63);
        goto -> bb51;
    }

    bb45: {
        _68 = const false;
        _67 = move _40;
        _66 = ureq::Response::into_json_deserialize::<T>(move _67) -> [return: bb46, unwind: bb67];
    }

    bb46: {
        _0 = std::result::Result::<T, std::io::Error>::map_err::<error::Error, fn(std::io::Error) -> error::Error {error::Error::decode::<std::io::Error>}>(move _66, error::Error::decode::<std::io::Error>) -> [return: bb47, unwind: bb67];
    }

    bb47: {
        _68 = const false;
        drop(_18) -> [return: bb48, unwind: bb58];
    }

    bb48: {
        drop(_14) -> [return: bb49, unwind: bb59];
    }

    bb49: {
        drop(_13) -> [return: bb50, unwind: bb60];
    }

    bb50: {
        drop(_3) -> [return: bb56, unwind continue];
    }

    bb51: {
        switchInt(_68) -> [0: bb52, otherwise: bb63];
    }

    bb52: {
        _68 = const false;
        drop(_18) -> [return: bb53, unwind: bb58];
    }

    bb53: {
        drop(_14) -> [return: bb54, unwind: bb59];
    }

    bb54: {
        drop(_13) -> [return: bb55, unwind: bb60];
    }

    bb55: {
        drop(_3) -> [return: bb56, unwind continue];
    }

    bb56: {
        return;
    }

    bb57 (cleanup): {
        drop(_18) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_14) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_13) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_3) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_8) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        resume;
    }

    bb63: {
        drop(_40) -> [return: bb52, unwind: bb57];
    }

    bb64 (cleanup): {
        drop(_47) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        switchInt(_69) -> [0: bb67, otherwise: bb64];
    }

    bb66 (cleanup): {
        drop(_40) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_68) -> [0: bb57, otherwise: bb66];
    }

    bb68: {
        goto -> bb21;
    }

    bb69: {
        goto -> bb21;
    }

    bb70: {
        goto -> bb25;
    }

    bb71: {
        goto -> bb39;
    }

    bb72: {
        goto -> bb39;
    }

    bb73: {
        goto -> bb39;
    }

    bb74: {
        goto -> bb39;
    }
}

fn client::<impl at sdk/client/src/client.rs:32:10: 32:15>::clone(_1: &client::Client) -> client::Client {
    debug self => _1;
    let mut _0: client::Client;
    let mut _2: std::string::String;
    let _3: &std::string::String;
    let mut _4: reqwest::Client;
    let _5: &reqwest::Client;
    let mut _6: state::StateManager;
    let _7: &state::StateManager;
    let mut _8: retry::Retry;
    let _9: &retry::Retry;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _2 = <std::string::String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: reqwest::Client);
        _4 = <reqwest::Client as Clone>::clone(_5) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _7 = &((*_1).2: state::StateManager);
        _6 = <StateManager as Clone>::clone(_7) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _9 = &((*_1).3: retry::Retry);
        _8 = <retry::Retry as Clone>::clone(_9) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = client::Client { url: move _2, inner: move _4, state: move _6, retry: move _8 };
        return;
    }

    bb5 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn client::<impl at sdk/client/src/client.rs:32:17: 32:22>::fmt(_1: &client::Client, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &reqwest::Client;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &state::StateManager;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&retry::Retry;
    let _16: &retry::Retry;

    bb0: {
        _3 = const "Client";
        _4 = const "url";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "inner";
        _9 = &((*_1).1: reqwest::Client);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "state";
        _12 = &((*_1).2: state::StateManager);
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _13 = const "retry";
        _16 = &((*_1).3: retry::Retry);
        _15 = &_16;
        _14 = _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field4_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11, _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::new(_1: T) -> client::Client {
    debug url => _1;
    let mut _0: client::Client;
    let mut _2: T;
    let mut _3: retry::Retry;
    let mut _4: bool;

    bb0: {
        _4 = const false;
        _4 = const true;
        _2 = move _1;
        _3 = <retry::Retry as Default>::default() -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _4 = const false;
        _0 = client::Client::new_with_retry::<T>(move _2, move _3) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _4 = const false;
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        switchInt(_4) -> [0: bb3, otherwise: bb4];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::new_with_retry(_1: T, _2: retry::Retry) -> client::Client {
    debug url => _1;
    debug retry => _2;
    let mut _0: client::Client;
    let _3: reqwest::Client;
    let mut _4: std::result::Result<reqwest::Client, reqwest::Error>;
    let mut _5: reqwest::ClientBuilder;
    let mut _6: reqwest::ClientBuilder;
    let mut _7: std::time::Duration;
    let mut _8: std::string::String;
    let mut _9: T;
    let mut _10: reqwest::Client;
    let mut _11: state::StateManager;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    scope 1 {
        debug inner => _3;
    }

    bb0: {
        _14 = const false;
        _12 = const false;
        _13 = const false;
        _14 = const true;
        _6 = reqwest::Client::builder() -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _13 = const true;
        _7 = Duration::from_secs(const 10_u64) -> [return: bb2, unwind: bb14];
    }

    bb2: {
        _13 = const false;
        _5 = reqwest::ClientBuilder::timeout(move _6, move _7) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _13 = const false;
        _4 = reqwest::ClientBuilder::build(move _5) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        _3 = std::result::Result::<reqwest::Client, reqwest::Error>::unwrap(move _4) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _12 = const true;
        _14 = const false;
        _9 = move _1;
        _8 = <T as Into<std::string::String>>::into(move _9) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _12 = const false;
        _10 = move _3;
        _11 = StateManager::new() -> [return: bb7, unwind: bb8];
    }

    bb7: {
        _0 = client::Client { url: move _8, inner: move _10, state: move _11, retry: move _2 };
        _12 = const false;
        return;
    }

    bb8 (cleanup): {
        drop(_10) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_8) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_3) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_12) -> [0: bb16, otherwise: bb11];
    }

    bb13 (cleanup): {
        drop(_6) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_13) -> [0: bb16, otherwise: bb13];
    }

    bb15 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        switchInt(_14) -> [0: bb10, otherwise: bb15];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::last_known_state(_1: &client::Client) -> std::option::Option<state::State> {
    debug self => _1;
    let mut _0: std::option::Option<state::State>;
    let mut _2: &state::StateManager;

    bb0: {
        _2 = &((*_1).2: state::StateManager);
        _0 = StateManager::last_known_state(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::wait_for_signed_transaction(_1: &client::Client, _2: &SignedTransaction, _3: std::option::Option<Duration>, _4: std::option::Option<Duration>) -> {async fn body@sdk/client/src/client.rs:68:69: 87:6} {
    debug self => _1;
    debug txn => _2;
    debug timeout => _3;
    debug delay => _4;
    let mut _0: {async fn body@sdk/client/src/client.rs:68:69: 87:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:68:69: 87:6 (#0)} { self: _1, txn: _2, timeout: _3, delay: _4 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::wait_for_signed_transaction::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:68:69: 87:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>> {
    debug _task_context => _36;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6})).0: &client::Client);
    debug txn => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6})).1: &diem_types::transaction::SignedTransaction);
    debug timeout => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6})).2: std::option::Option<std::time::Duration>);
    debug delay => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6})).3: std::option::Option<std::time::Duration>);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>>;
    let _3: &client::Client;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::WaitForTransactionError>, response::Response<diem_json_rpc_types::views::TransactionView>>;
    let mut _9: {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _10: {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _11: diem_types::PeerId;
    let mut _12: u64;
    let mut _13: u64;
    let mut _14: diem_crypto::HashValue;
    let mut _15: &diem_types::transaction::Transaction;
    let mut _16: diem_types::transaction::SignedTransaction;
    let mut _17: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>>;
    let mut _18: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:97:69: 124:6}>;
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _20: &mut std::task::Context<'_>;
    let mut _21: isize;
    let mut _23: isize;
    let mut _26: bool;
    let mut _27: &diem_json_rpc_types::views::VMStatusView;
    let _28: &diem_json_rpc_types::views::TransactionView;
    let mut _29: &response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _30: error::WaitForTransactionError;
    let mut _31: diem_json_rpc_types::views::TransactionView;
    let mut _32: response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _33: response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _34: bool;
    let mut _35: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>;
    let mut _36: &mut std::task::Context<'_>;
    let mut _37: u32;
    let mut _38: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _39: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _40: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _41: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _42: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _43: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _44: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _45: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _46: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _47: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _48: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _49: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _50: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _51: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _52: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _53: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    let mut _54: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6};
    scope 1 {
        debug self => _3;
        let _4: &diem_types::transaction::SignedTransaction;
        scope 2 {
            debug txn => _4;
            let _5: std::option::Option<std::time::Duration>;
            scope 3 {
                debug timeout => _5;
                let _6: std::option::Option<std::time::Duration>;
                scope 4 {
                    debug delay => _6;
                    let _7: response::Response<diem_json_rpc_types::views::TransactionView>;
                    let _24: std::result::Result<std::convert::Infallible, error::WaitForTransactionError>;
                    let _25: response::Response<diem_json_rpc_types::views::TransactionView>;
                    scope 5 {
                        debug response => _7;
                    }
                    scope 6 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6})) as variant#3).1: {async fn body@sdk/client/src/client.rs:97:69: 124:6});
                        let _22: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>;
                        scope 7 {
                        }
                        scope 8 {
                            debug result => _22;
                        }
                    }
                    scope 9 {
                        debug residual => _24;
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => _25;
                        scope 12 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _38 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        _37 = discriminant((*_38));
        switchInt(move _37) -> [0: bb1, 1: bb35, 2: bb34, 3: bb33, otherwise: bb13];
    }

    bb1: {
        _36 = move _2;
        _34 = const false;
        _39 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        _3 = ((*_39).0: &client::Client);
        _40 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        _4 = ((*_40).1: &diem_types::transaction::SignedTransaction);
        _41 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        _5 = ((*_41).2: std::option::Option<std::time::Duration>);
        _42 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        _6 = ((*_42).3: std::option::Option<std::time::Duration>);
        _11 = SignedTransaction::sender(_4) -> [return: bb2, unwind: bb30];
    }

    bb2: {
        _12 = SignedTransaction::sequence_number(_4) -> [return: bb3, unwind: bb30];
    }

    bb3: {
        _13 = SignedTransaction::expiration_timestamp_secs(_4) -> [return: bb4, unwind: bb30];
    }

    bb4: {
        _16 = <SignedTransaction as Clone>::clone(_4) -> [return: bb5, unwind: bb30];
    }

    bb5: {
        _43 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        (((*_43) as variant#3).0: diem_types::transaction::Transaction) = diem_types::transaction::Transaction::UserTransaction(move _16);
        _44 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        _15 = &(((*_44) as variant#3).0: diem_types::transaction::Transaction);
        _14 = <diem_types::transaction::Transaction as CryptoHash>::hash(move _15) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        _10 = client::Client::wait_for_transaction(_3, move _11, move _12, move _13, move _14, _5, _6) -> [return: bb7, unwind: bb29];
    }

    bb7: {
        _9 = <{async fn body@sdk/client/src/client.rs:97:69: 124:6} as std::future::IntoFuture>::into_future(move _10) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        _45 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        (((*_45) as variant#3).1: {async fn body@sdk/client/src/client.rs:97:69: 124:6}) = move _9;
        goto -> bb9;
    }

    bb9: {
        _46 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        _19 = &mut (((*_46) as variant#3).1: {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _18 = Pin::<&mut {async fn body@sdk/client/src/client.rs:97:69: 124:6}>::new_unchecked(_19) -> [return: bb10, unwind: bb28];
    }

    bb10: {
        _20 = _36;
        _17 = <{async fn body@sdk/client/src/client.rs:97:69: 124:6} as futures::Future>::poll(move _18, _20) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb14, 1: bb12, otherwise: bb13];
    }

    bb12: {
        _0 = Poll::<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>>::Pending;
        _47 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        discriminant((*_47)) = 3;
        return;
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _22 = move ((_17 as Ready).0: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>);
        _48 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        drop((((*_48) as variant#3).1: {async fn body@sdk/client/src/client.rs:97:69: 124:6})) -> [return: bb15, unwind: bb29];
    }

    bb15: {
        _8 = <std::result::Result<response::Response<TransactionView>, WaitForTransactionError> as Try>::branch(move _22) -> [return: bb16, unwind: bb29];
    }

    bb16: {
        _23 = discriminant(_8);
        switchInt(move _23) -> [0: bb17, 1: bb18, otherwise: bb13];
    }

    bb17: {
        _25 = move ((_8 as Continue).0: response::Response<diem_json_rpc_types::views::TransactionView>);
        _34 = const true;
        _7 = move _25;
        _49 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        drop((((*_49) as variant#3).0: diem_types::transaction::Transaction)) -> [return: bb20, unwind: bb32];
    }

    bb18: {
        _24 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::WaitForTransactionError>);
        _35 = <std::result::Result<response::Response<TransactionView>, WaitForTransactionError> as FromResidual<std::result::Result<Infallible, WaitForTransactionError>>>::from_residual(move _24) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        _50 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        drop((((*_50) as variant#3).0: diem_types::transaction::Transaction)) -> [return: bb26, unwind: bb30];
    }

    bb20: {
        _29 = &_7;
        _28 = response::Response::<TransactionView>::inner(move _29) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _27 = &((*_28).5: diem_json_rpc_types::views::VMStatusView);
        _26 = VMStatusView::is_executed(move _27) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        switchInt(move _26) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _34 = const false;
        _33 = move _7;
        _35 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Ok(move _33);
        _34 = const false;
        goto -> bb27;
    }

    bb24: {
        _34 = const false;
        _32 = move _7;
        _31 = response::Response::<TransactionView>::into_inner(move _32) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        _30 = WaitForTransactionError::TransactionExecutionFailed(move _31);
        _35 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Err(move _30);
        goto -> bb26;
    }

    bb26: {
        _34 = const false;
        goto -> bb27;
    }

    bb27: {
        _0 = Poll::<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>>::Ready(move _35);
        _51 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        discriminant((*_51)) = 1;
        return;
    }

    bb28 (cleanup): {
        _52 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        drop((((*_52) as variant#3).1: {async fn body@sdk/client/src/client.rs:97:69: 124:6})) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        _53 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        drop((((*_53) as variant#3).0: diem_types::transaction::Transaction)) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        _34 = const false;
        _54 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:68:69: 87:6});
        discriminant((*_54)) = 2;
        resume;
    }

    bb31 (cleanup): {
        drop(_7) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_34) -> [0: bb30, otherwise: bb31];
    }

    bb33: {
        _36 = move _2;
        goto -> bb9;
    }

    bb34: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb34, unwind continue];
    }

    bb35: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb35, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::wait_for_transaction(_1: &client::Client, _2: AccountAddress, _3: u64, _4: u64, _5: HashValue, _6: std::option::Option<Duration>, _7: std::option::Option<Duration>) -> {async fn body@sdk/client/src/client.rs:97:69: 124:6} {
    debug self => _1;
    debug address => _2;
    debug seq => _3;
    debug expiration_time_secs => _4;
    debug txn_hash => _5;
    debug timeout => _6;
    debug delay => _7;
    let mut _0: {async fn body@sdk/client/src/client.rs:97:69: 124:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:97:69: 124:6 (#0)} { self: _1, address: _2, seq: _3, expiration_time_secs: _4, txn_hash: _5, timeout: _6, delay: _7 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::wait_for_transaction::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:97:69: 124:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>> {
    debug _task_context => _60;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})).0: &client::Client);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})).1: diem_types::PeerId);
    debug seq => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})).2: u64);
    debug expiration_time_secs => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})).3: u64);
    debug txn_hash => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})).4: diem_crypto::HashValue);
    debug timeout => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})).5: std::option::Option<std::time::Duration>);
    debug delay => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})).6: std::option::Option<std::time::Duration>);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>>;
    let mut _3: bool;
    let mut _4: &std::time::Duration;
    let _5: std::time::Duration;
    let mut _6: &std::time::Instant;
    let mut _7: &std::time::Duration;
    let _8: std::time::Duration;
    let mut _9: std::option::Option<std::time::Duration>;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::WaitForTransactionError>, response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>>;
    let mut _12: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::WaitForTransactionError>;
    let mut _13: {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _14: {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _15: diem_types::PeerId;
    let mut _16: u64;
    let mut _17: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>>;
    let mut _18: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:188:52: 195:6}>;
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _20: &mut std::task::Context<'_>;
    let mut _21: isize;
    let mut _23: isize;
    let mut _26: (std::option::Option<diem_json_rpc_types::views::TransactionView>, state::State);
    let mut _27: response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>;
    let mut _28: isize;
    let mut _31: bool;
    let mut _32: &diem_crypto::HashValue;
    let mut _33: &diem_crypto::HashValue;
    let mut _34: error::WaitForTransactionError;
    let mut _35: diem_json_rpc_types::views::TransactionView;
    let mut _36: response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _37: diem_json_rpc_types::views::TransactionView;
    let mut _38: std::option::Option<state::State>;
    let mut _39: isize;
    let mut _41: bool;
    let mut _42: u64;
    let mut _43: u64;
    let mut _44: u64;
    let mut _45: bool;
    let mut _46: error::WaitForTransactionError;
    let mut _47: tokio::time::Sleep;
    let mut _48: tokio::time::Sleep;
    let mut _49: std::time::Duration;
    let mut _50: std::option::Option<std::time::Duration>;
    let mut _51: std::task::Poll<()>;
    let mut _52: std::pin::Pin<&mut tokio::time::Sleep>;
    let mut _53: &mut tokio::time::Sleep;
    let mut _54: &mut std::task::Context<'_>;
    let mut _55: isize;
    let mut _57: error::WaitForTransactionError;
    let mut _58: bool;
    let mut _59: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>;
    let mut _60: &mut std::task::Context<'_>;
    let mut _61: u32;
    let mut _62: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _63: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _64: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _65: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _66: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _67: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _68: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _69: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _70: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _71: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _72: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _73: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _74: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _75: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _76: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _77: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _78: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _79: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _80: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _81: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _82: &client::Client;
    let mut _83: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _84: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _85: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _86: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _87: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _88: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _89: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _90: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _91: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _92: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _93: &client::Client;
    let mut _94: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _95: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _96: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _97: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _98: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _99: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _100: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _101: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _102: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _103: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _104: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _105: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _106: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    let mut _107: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})) as variant#3).0: &client::Client);
        scope 2 {
            debug address => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})) as variant#3).1: diem_types::PeerId);
            scope 3 {
                debug seq => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})) as variant#3).2: u64);
                scope 4 {
                    debug expiration_time_secs => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})) as variant#3).3: u64);
                    scope 5 {
                        debug txn_hash => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})) as variant#3).4: diem_crypto::HashValue);
                        scope 6 {
                            debug timeout => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})) as variant#3).5: std::option::Option<std::time::Duration>);
                            scope 7 {
                                debug delay => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})) as variant#3).6: std::option::Option<std::time::Duration>);
                                scope 8 {
                                    debug start => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})) as variant#3).7: std::time::Instant);
                                    let _10: response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>;
                                    let _24: std::result::Result<std::convert::Infallible, error::WaitForTransactionError>;
                                    let _25: response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>;
                                    scope 9 {
                                        debug txn_resp => _10;
                                        scope 17 {
                                            debug txn => _29;
                                            debug state => _30;
                                            let _29: diem_json_rpc_types::views::TransactionView;
                                            let _30: state::State;
                                        }
                                        scope 18 {
                                            debug state => _40;
                                            let _40: state::State;
                                        }
                                        scope 19 {
                                            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})) as variant#4).8: tokio::time::Sleep);
                                            let _56: ();
                                            scope 20 {
                                            }
                                            scope 21 {
                                                debug result => _56;
                                            }
                                        }
                                    }
                                    scope 10 {
                                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6})) as variant#3).8: {async fn body@sdk/client/src/client.rs:188:52: 195:6});
                                        let _22: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>;
                                        scope 11 {
                                        }
                                        scope 12 {
                                            debug result => _22;
                                        }
                                    }
                                    scope 13 {
                                        debug residual => _24;
                                        scope 14 {
                                        }
                                    }
                                    scope 15 {
                                        debug val => _25;
                                        scope 16 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _62 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _61 = discriminant((*_62));
        switchInt(move _61) -> [0: bb1, 1: bb58, 2: bb57, 3: bb55, 4: bb56, otherwise: bb13];
    }

    bb1: {
        _60 = move _2;
        _63 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_63) as variant#4).9: bool) = const false;
        _58 = const false;
        _64 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _65 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_64) as variant#3).0: &client::Client) = ((*_65).0: &client::Client);
        _66 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _67 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_66) as variant#3).1: diem_types::PeerId) = ((*_67).1: diem_types::PeerId);
        _68 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _69 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_68) as variant#3).2: u64) = ((*_69).2: u64);
        _70 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _71 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_70) as variant#3).3: u64) = ((*_71).3: u64);
        _72 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _73 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_72) as variant#3).4: diem_crypto::HashValue) = ((*_73).4: diem_crypto::HashValue);
        _74 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _75 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_74) as variant#3).5: std::option::Option<std::time::Duration>) = ((*_75).5: std::option::Option<std::time::Duration>);
        _76 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _77 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_76) as variant#3).6: std::option::Option<std::time::Duration>) = ((*_77).6: std::option::Option<std::time::Duration>);
        _78 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_78) as variant#3).7: std::time::Instant) = std::time::Instant::now() -> [return: bb59, unwind: bb54];
    }

    bb2: {
        _79 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _6 = &(((*_79) as variant#3).7: std::time::Instant);
        _5 = std::time::Instant::elapsed(move _6) -> [return: bb3, unwind: bb54];
    }

    bb3: {
        _4 = &_5;
        _80 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _9 = (((*_80) as variant#3).5: std::option::Option<std::time::Duration>);
        _8 = std::option::Option::<Duration>::unwrap_or(move _9, const _) -> [return: bb4, unwind: bb54];
    }

    bb4: {
        _7 = &_8;
        _3 = <Duration as PartialOrd>::lt(move _4, move _7) -> [return: bb5, unwind: bb54];
    }

    bb5: {
        switchInt(move _3) -> [0: bb42, otherwise: bb6];
    }

    bb6: {
        _81 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _82 = deref_copy (((*_81) as variant#3).0: &client::Client);
        _83 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _15 = (((*_83) as variant#3).1: diem_types::PeerId);
        _84 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _16 = (((*_84) as variant#3).2: u64);
        _14 = client::Client::get_account_transaction(_82, move _15, move _16, const true) -> [return: bb7, unwind: bb50];
    }

    bb7: {
        _13 = <{async fn body@sdk/client/src/client.rs:188:52: 195:6} as std::future::IntoFuture>::into_future(move _14) -> [return: bb8, unwind: bb50];
    }

    bb8: {
        _85 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_85) as variant#3).8: {async fn body@sdk/client/src/client.rs:188:52: 195:6}) = move _13;
        goto -> bb9;
    }

    bb9: {
        _86 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _19 = &mut (((*_86) as variant#3).8: {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        _18 = Pin::<&mut {async fn body@sdk/client/src/client.rs:188:52: 195:6}>::new_unchecked(_19) -> [return: bb10, unwind: bb49];
    }

    bb10: {
        _20 = _60;
        _17 = <{async fn body@sdk/client/src/client.rs:188:52: 195:6} as futures::Future>::poll(move _18, _20) -> [return: bb11, unwind: bb49];
    }

    bb11: {
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb14, 1: bb12, otherwise: bb13];
    }

    bb12: {
        _0 = Poll::<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>>::Pending;
        _87 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        discriminant((*_87)) = 3;
        return;
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _22 = move ((_17 as Ready).0: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>);
        _88 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        drop((((*_88) as variant#3).8: {async fn body@sdk/client/src/client.rs:188:52: 195:6})) -> [return: bb15, unwind: bb50];
    }

    bb15: {
        _12 = std::result::Result::<response::Response<std::option::Option<TransactionView>>, error::Error>::map_err::<WaitForTransactionError, fn(error::Error) -> WaitForTransactionError {WaitForTransactionError::GetTransactionError}>(move _22, WaitForTransactionError::GetTransactionError) -> [return: bb16, unwind: bb50];
    }

    bb16: {
        _11 = <std::result::Result<response::Response<std::option::Option<TransactionView>>, WaitForTransactionError> as Try>::branch(move _12) -> [return: bb17, unwind: bb50];
    }

    bb17: {
        _23 = discriminant(_11);
        switchInt(move _23) -> [0: bb18, 1: bb19, otherwise: bb13];
    }

    bb18: {
        _25 = move ((_11 as Continue).0: response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>);
        _89 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_89) as variant#4).9: bool) = const true;
        _10 = move _25;
        _90 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_90) as variant#4).9: bool) = const false;
        _27 = move _10;
        _26 = response::Response::<std::option::Option<TransactionView>>::into_parts(move _27) -> [return: bb20, unwind: bb53];
    }

    bb19: {
        _24 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::WaitForTransactionError>);
        _59 = <std::result::Result<response::Response<TransactionView>, WaitForTransactionError> as FromResidual<std::result::Result<Infallible, WaitForTransactionError>>>::from_residual(move _24) -> [return: bb60, unwind: bb50];
    }

    bb20: {
        _28 = discriminant((_26.0: std::option::Option<diem_json_rpc_types::views::TransactionView>));
        switchInt(move _28) -> [1: bb21, otherwise: bb26];
    }

    bb21: {
        _30 = move (_26.1: state::State);
        _58 = const true;
        _29 = move (((_26.0: std::option::Option<diem_json_rpc_types::views::TransactionView>) as Some).0: diem_json_rpc_types::views::TransactionView);
        _32 = &(_29.2: diem_crypto::HashValue);
        _91 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _33 = &(((*_91) as variant#3).4: diem_crypto::HashValue);
        _31 = <HashValue as PartialEq>::ne(move _32, move _33) -> [return: bb22, unwind: bb47];
    }

    bb22: {
        switchInt(move _31) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _58 = const false;
        _35 = move _29;
        _34 = WaitForTransactionError::TransactionHashMismatchError(move _35);
        _59 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Err(move _34);
        goto -> bb43;
    }

    bb24: {
        _58 = const false;
        _37 = move _29;
        _36 = response::Response::<TransactionView>::new(move _37, move _30) -> [return: bb25, unwind: bb47];
    }

    bb25: {
        _59 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Ok(move _36);
        goto -> bb43;
    }

    bb26: {
        drop(_26) -> [return: bb27, unwind: bb53];
    }

    bb27: {
        _92 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _93 = deref_copy (((*_92) as variant#3).0: &client::Client);
        _38 = client::Client::last_known_state(_93) -> [return: bb28, unwind: bb53];
    }

    bb28: {
        _39 = discriminant(_38);
        switchInt(move _39) -> [1: bb29, otherwise: bb32];
    }

    bb29: {
        _40 = move ((_38 as Some).0: state::State);
        _94 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _42 = (((*_94) as variant#3).3: u64);
        _44 = (_40.2: u64);
        _45 = Eq(const 1000000_u64, const 0_u64);
        assert(!move _45, "attempt to divide `{}` by zero", _44) -> [success: bb30, unwind: bb53];
    }

    bb30: {
        _43 = Div(move _44, const 1000000_u64);
        _41 = Le(move _42, move _43);
        switchInt(move _41) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _46 = WaitForTransactionError::TransactionExpired;
        _59 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Err(move _46);
        goto -> bb44;
    }

    bb32: {
        _95 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _50 = (((*_95) as variant#3).6: std::option::Option<std::time::Duration>);
        _49 = std::option::Option::<Duration>::unwrap_or(move _50, const _) -> [return: bb33, unwind: bb53];
    }

    bb33: {
        _48 = tokio::time::sleep(move _49) -> [return: bb34, unwind: bb53];
    }

    bb34: {
        _47 = <Sleep as std::future::IntoFuture>::into_future(move _48) -> [return: bb35, unwind: bb53];
    }

    bb35: {
        _96 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_96) as variant#4).8: tokio::time::Sleep) = move _47;
        goto -> bb36;
    }

    bb36: {
        _97 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        _53 = &mut (((*_97) as variant#4).8: tokio::time::Sleep);
        _52 = Pin::<&mut Sleep>::new_unchecked(_53) -> [return: bb37, unwind: bb46];
    }

    bb37: {
        _54 = _60;
        _51 = <Sleep as futures::Future>::poll(move _52, _54) -> [return: bb38, unwind: bb46];
    }

    bb38: {
        _55 = discriminant(_51);
        switchInt(move _55) -> [0: bb40, 1: bb39, otherwise: bb13];
    }

    bb39: {
        _0 = Poll::<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>>::Pending;
        _98 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        discriminant((*_98)) = 4;
        return;
    }

    bb40: {
        _56 = ((_51 as Ready).0: ());
        _99 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        drop((((*_99) as variant#4).8: tokio::time::Sleep)) -> [return: bb41, unwind: bb53];
    }

    bb41: {
        _100 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_100) as variant#4).9: bool) = const false;
        goto -> bb2;
    }

    bb42: {
        _57 = WaitForTransactionError::Timeout;
        _59 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Err(move _57);
        goto -> bb45;
    }

    bb43: {
        _58 = const false;
        goto -> bb44;
    }

    bb44: {
        _101 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_101) as variant#4).9: bool) = const false;
        goto -> bb45;
    }

    bb45: {
        _0 = Poll::<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>>::Ready(move _59);
        _102 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        discriminant((*_102)) = 1;
        return;
    }

    bb46 (cleanup): {
        _103 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        drop((((*_103) as variant#4).8: tokio::time::Sleep)) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_58) -> [0: bb48, otherwise: bb51];
    }

    bb48 (cleanup): {
        _58 = const false;
        goto -> bb53;
    }

    bb49 (cleanup): {
        _104 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        drop((((*_104) as variant#3).8: {async fn body@sdk/client/src/client.rs:188:52: 195:6})) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        _105 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        (((*_105) as variant#4).9: bool) = const false;
        goto -> bb54;
    }

    bb51 (cleanup): {
        drop(_29) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_10) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        _106 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        switchInt((((*_106) as variant#4).9: bool)) -> [0: bb50, otherwise: bb52];
    }

    bb54 (cleanup): {
        _107 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:97:69: 124:6});
        discriminant((*_107)) = 2;
        resume;
    }

    bb55: {
        _60 = move _2;
        goto -> bb9;
    }

    bb56: {
        _60 = move _2;
        goto -> bb36;
    }

    bb57: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb57, unwind continue];
    }

    bb58: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb58, unwind continue];
    }

    bb59: {
        goto -> bb2;
    }

    bb60: {
        goto -> bb44;
    }
}

const client::<impl at sdk/client/src/client.rs:40:1: 40:12>::wait_for_transaction::{closure#0}::DEFAULT_TIMEOUT: Duration = {
    let mut _0: std::time::Duration;

    bb0: {
        ConstEvalCounter;
        _0 = Duration::from_secs(const 60_u64) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const client::<impl at sdk/client/src/client.rs:40:1: 40:12>::wait_for_transaction::{closure#0}::DEFAULT_DELAY: Duration = {
    let mut _0: std::time::Duration;

    bb0: {
        ConstEvalCounter;
        _0 = Duration::from_millis(const 500_u64) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::batch(_1: &client::Client, _2: Vec<request::MethodRequest>) -> {async fn body@sdk/client/src/client.rs:129:56: 131:6} {
    debug self => _1;
    debug requests => _2;
    let mut _0: {async fn body@sdk/client/src/client.rs:129:56: 131:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:129:56: 131:6 (#0)} { self: _1, requests: move _2 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::batch::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:129:56: 131:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>> {
    debug _task_context => _13;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6})).0: &client::Client);
    debug requests => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6})).1: std::vec::Vec<request::MethodRequest>);
    let mut _0: std::task::Poll<std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>>;
    let _3: &client::Client;
    let mut _5: {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _6: {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _7: std::task::Poll<std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>>;
    let mut _8: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:386:56: 394:6}>;
    let mut _9: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _10: &mut std::task::Context<'_>;
    let mut _11: isize;
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: u32;
    let mut _15: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    let mut _16: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    let mut _17: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    scope 1 {
        debug self => _3;
        let _4: std::vec::Vec<request::MethodRequest>;
        scope 2 {
            debug requests => _4;
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:386:56: 394:6});
                let _12: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>;
                scope 4 {
                }
                scope 5 {
                    debug result => _12;
                }
            }
        }
    }

    bb0: {
        _15 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6});
        _14 = discriminant((*_15));
        switchInt(move _14) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb8];
    }

    bb1: {
        _13 = move _2;
        _16 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6});
        _3 = ((*_16).0: &client::Client);
        _17 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6});
        _4 = move ((*_17).1: std::vec::Vec<request::MethodRequest>);
        _6 = client::Client::send_batch(_3, move _4) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _5 = <{async fn body@sdk/client/src/client.rs:386:56: 394:6} as std::future::IntoFuture>::into_future(move _6) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6});
        (((*_18) as variant#3).0: {async fn body@sdk/client/src/client.rs:386:56: 394:6}) = move _5;
        goto -> bb4;
    }

    bb4: {
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6});
        _9 = &mut (((*_19) as variant#3).0: {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        _8 = Pin::<&mut {async fn body@sdk/client/src/client.rs:386:56: 394:6}>::new_unchecked(_9) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _10 = _13;
        _7 = <{async fn body@sdk/client/src/client.rs:386:56: 394:6} as futures::Future>::poll(move _8, _10) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>>::Pending;
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6});
        discriminant((*_20)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _12 = move ((_7 as Ready).0: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6});
        drop((((*_21) as variant#3).0: {async fn body@sdk/client/src/client.rs:386:56: 394:6})) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        _0 = Poll::<std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>>::Ready(move _12);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6});
        discriminant((*_22)) = 1;
        return;
    }

    bb11 (cleanup): {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6});
        drop((((*_23) as variant#3).0: {async fn body@sdk/client/src/client.rs:386:56: 394:6})) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6});
        discriminant((*_24)) = 2;
        resume;
    }

    bb13: {
        _13 = move _2;
        goto -> bb4;
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb14, unwind continue];
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb15, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::request(_1: &client::Client, _2: request::MethodRequest) -> {async fn body@sdk/client/src/client.rs:133:93: 137:6} {
    debug self => _1;
    debug request => _2;
    let mut _0: {async fn body@sdk/client/src/client.rs:133:93: 137:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:133:93: 137:6 (#0)} { self: _1, request: move _2 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::request::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:133:93: 137:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<MethodResponse>, error::Error>> {
    debug _task_context => _23;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6})).0: &client::Client);
    debug request => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6})).1: request::MethodRequest);
    let mut _0: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let _3: &client::Client;
    let mut _4: &request::MethodRequest;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<serde_json::Value>>;
    let mut _7: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _8: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _9: request::MethodRequest;
    let mut _10: std::task::Poll<std::result::Result<response::Response<serde_json::Value>, error::Error>>;
    let mut _11: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _12: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _16: isize;
    let mut _19: response::Response<serde_json::Value>;
    let mut _20: {closure@sdk/client/src/client.rs:136:23: 136:29};
    let mut _21: bool;
    let mut _22: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
    let mut _23: &mut std::task::Context<'_>;
    let mut _24: u32;
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _28: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _29: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _30: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _31: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _32: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _33: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _34: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _35: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _36: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _37: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _38: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _39: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _40: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _41: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _42: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _43: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _44: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _45: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _46: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    let mut _47: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6};
    scope 1 {
        debug self => _3;
        scope 2 {
            debug request => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6})) as variant#3).0: request::MethodRequest);
            scope 3 {
                debug method => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6})) as variant#3).1: Method);
                let _5: response::Response<serde_json::Value>;
                let _17: std::result::Result<std::convert::Infallible, error::Error>;
                let _18: response::Response<serde_json::Value>;
                scope 4 {
                    debug resp => _5;
                }
                scope 5 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6})) as variant#3).2: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                    let _15: std::result::Result<response::Response<serde_json::Value>, error::Error>;
                    scope 6 {
                    }
                    scope 7 {
                        debug result => _15;
                    }
                }
                scope 8 {
                    debug residual => _17;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _18;
                    scope 11 {
                    }
                }
            }
        }
    }

    bb0: {
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        _24 = discriminant((*_25));
        switchInt(move _24) -> [0: bb1, 1: bb27, 2: bb26, 3: bb25, otherwise: bb9];
    }

    bb1: {
        _23 = move _2;
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        (((*_26) as variant#3).3: bool) = const false;
        _21 = const false;
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        _3 = ((*_27).0: &client::Client);
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        (((*_28) as variant#3).3: bool) = const true;
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        (((*_29) as variant#3).0: request::MethodRequest) = move ((*_30).1: request::MethodRequest);
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        _4 = &(((*_31) as variant#3).0: request::MethodRequest);
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        (((*_32) as variant#3).1: Method) = request::MethodRequest::method(move _4) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        (((*_33) as variant#3).3: bool) = const false;
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        _9 = move (((*_34) as variant#3).0: request::MethodRequest);
        _8 = client::Client::send::<SerdeValue>(_3, move _9) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _7 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _8) -> [return: bb4, unwind: bb20];
    }

    bb4: {
        _35 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        (((*_35) as variant#3).2: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _7;
        goto -> bb5;
    }

    bb5: {
        _36 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        _12 = &mut (((*_36) as variant#3).2: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _11 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_12) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _13 = _23;
        _10 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _11, _13) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<MethodResponse>, error::Error>>::Pending;
        _37 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        discriminant((*_37)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = move ((_10 as Ready).0: std::result::Result<response::Response<serde_json::Value>, error::Error>);
        _38 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        drop((((*_38) as variant#3).2: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        _6 = <std::result::Result<response::Response<SerdeValue>, error::Error> as Try>::branch(move _15) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        _16 = discriminant(_6);
        switchInt(move _16) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _18 = move ((_6 as Continue).0: response::Response<serde_json::Value>);
        _21 = const true;
        _5 = move _18;
        _21 = const false;
        _19 = move _5;
        _39 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        _20 = {closure@sdk/client/src/client.rs:136:23: 136:29} { method: move (((*_39) as variant#3).1: Method) };
        _22 = response::Response::<SerdeValue>::and_then::<MethodResponse, error::Error, {closure@sdk/client/src/client.rs:136:23: 136:29}>(move _19, move _20) -> [return: bb16, unwind: bb18];
    }

    bb14: {
        _17 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _22 = <std::result::Result<response::Response<MethodResponse>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _17) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _21 = const false;
        _41 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        (((*_41) as variant#3).3: bool) = const false;
        goto -> bb17;
    }

    bb16: {
        _21 = const false;
        _40 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        (((*_40) as variant#3).3: bool) = const false;
        goto -> bb17;
    }

    bb17: {
        _0 = Poll::<std::result::Result<response::Response<MethodResponse>, error::Error>>::Ready(move _22);
        _42 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        discriminant((*_42)) = 1;
        return;
    }

    bb18 (cleanup): {
        switchInt(_21) -> [0: bb20, otherwise: bb22];
    }

    bb19 (cleanup): {
        _43 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        drop((((*_43) as variant#3).2: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        _21 = const false;
        goto -> bb24;
    }

    bb21 (cleanup): {
        _44 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        (((*_44) as variant#3).3: bool) = const false;
        _47 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        discriminant((*_47)) = 2;
        resume;
    }

    bb22 (cleanup): {
        drop(_5) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        _45 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        drop((((*_45) as variant#3).0: request::MethodRequest)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        _46 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:133:93: 137:6});
        switchInt((((*_46) as variant#3).3: bool)) -> [0: bb21, otherwise: bb23];
    }

    bb25: {
        _23 = move _2;
        goto -> bb5;
    }

    bb26: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb26, unwind continue];
    }

    bb27: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb27, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::request::{closure#0}::{closure#0}(_1: {closure@sdk/client/src/client.rs:136:23: 136:29}, _2: SerdeValue) -> std::result::Result<MethodResponse, error::Error> {
    debug json => _2;
    debug method => (_1.0: Method);
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let mut _3: std::result::Result<response::MethodResponse, error::Error>;
    let mut _4: Method;

    bb0: {
        _4 = move (_1.0: Method);
        _3 = MethodResponse::from_json(move _4, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::result::Result::<MethodResponse, error::Error>::map_err::<error::Error, fn(error::Error) -> error::Error {error::Error::decode::<error::Error>}>(move _3, error::Error::decode::<error::Error>) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::submit(_1: &client::Client, _2: &SignedTransaction) -> {async fn body@sdk/client/src/client.rs:139:81: 142:6} {
    debug self => _1;
    debug txn => _2;
    let mut _0: {async fn body@sdk/client/src/client.rs:139:81: 142:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:139:81: 142:6 (#0)} { self: _1, txn: _2 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::submit::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:139:81: 142:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<()>, error::Error>> {
    debug _task_context => _21;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6})).0: &client::Client);
    debug txn => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6})).1: &diem_types::transaction::SignedTransaction);
    let mut _0: std::task::Poll<std::result::Result<response::Response<()>, error::Error>>;
    let _3: &client::Client;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, request::MethodRequest>;
    let mut _6: std::result::Result<request::MethodRequest, error::Error>;
    let mut _7: std::result::Result<request::MethodRequest, bcs::Error>;
    let mut _8: isize;
    let mut _11: {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _12: {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let _13: &request::JsonRpcRequest;
    let mut _14: std::task::Poll<std::result::Result<response::Response<()>, error::Error>>;
    let mut _15: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:369:30: 381:6}>;
    let mut _16: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _17: &mut std::task::Context<'_>;
    let mut _18: isize;
    let mut _20: std::result::Result<response::Response<()>, error::Error>;
    let mut _21: &mut std::task::Context<'_>;
    let mut _22: u32;
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _28: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _29: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _30: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _31: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _32: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _33: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _34: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _35: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _36: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    let mut _37: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6};
    scope 1 {
        debug self => _3;
        let _4: &diem_types::transaction::SignedTransaction;
        scope 2 {
            debug txn => _4;
            let _9: std::result::Result<std::convert::Infallible, error::Error>;
            let _10: request::MethodRequest;
            scope 3 {
                debug request => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6})) as variant#3).0: request::JsonRpcRequest);
                scope 8 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6})) as variant#3).1: {async fn body@sdk/client/src/client.rs:369:30: 381:6});
                    let _19: std::result::Result<response::Response<()>, error::Error>;
                    scope 9 {
                    }
                    scope 10 {
                        debug result => _19;
                    }
                }
            }
            scope 4 {
                debug residual => _9;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _10;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        _22 = discriminant((*_23));
        switchInt(move _22) -> [0: bb1, 1: bb24, 2: bb23, 3: bb22, otherwise: bb6];
    }

    bb1: {
        _21 = move _2;
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        _3 = ((*_24).0: &client::Client);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        _4 = ((*_25).1: &diem_types::transaction::SignedTransaction);
        _7 = request::MethodRequest::submit(_4) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _6 = std::result::Result::<request::MethodRequest, bcs::Error>::map_err::<error::Error, fn(bcs::Error) -> error::Error {error::Error::request::<bcs::Error>}>(move _7, error::Error::request::<bcs::Error>) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _5 = <std::result::Result<request::MethodRequest, error::Error> as Try>::branch(move _6) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _10 = move ((_5 as Continue).0: request::MethodRequest);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        (((*_26) as variant#3).0: request::JsonRpcRequest) = request::JsonRpcRequest::new(move _10) -> [return: bb8, unwind: bb21];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _20 = <std::result::Result<response::Response<()>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _9) -> [return: bb25, unwind: bb21];
    }

    bb8: {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        _13 = &(((*_27) as variant#3).0: request::JsonRpcRequest);
        _12 = client::Client::send_without_retry::<()>(_3, _13, const true) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        _11 = <{async fn body@sdk/client/src/client.rs:369:30: 381:6} as std::future::IntoFuture>::into_future(move _12) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        (((*_28) as variant#3).1: {async fn body@sdk/client/src/client.rs:369:30: 381:6}) = move _11;
        goto -> bb11;
    }

    bb11: {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        _16 = &mut (((*_29) as variant#3).1: {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _15 = Pin::<&mut {async fn body@sdk/client/src/client.rs:369:30: 381:6}>::new_unchecked(_16) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        _17 = _21;
        _14 = <{async fn body@sdk/client/src/client.rs:369:30: 381:6} as futures::Future>::poll(move _15, _17) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _18 = discriminant(_14);
        switchInt(move _18) -> [0: bb15, 1: bb14, otherwise: bb6];
    }

    bb14: {
        _0 = Poll::<std::result::Result<response::Response<()>, error::Error>>::Pending;
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        discriminant((*_30)) = 3;
        return;
    }

    bb15: {
        _19 = move ((_14 as Ready).0: std::result::Result<response::Response<()>, error::Error>);
        _20 = move _19;
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        drop((((*_31) as variant#3).1: {async fn body@sdk/client/src/client.rs:369:30: 381:6})) -> [return: bb16, unwind: bb19];
    }

    bb16: {
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        drop((((*_32) as variant#3).0: request::JsonRpcRequest)) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        _0 = Poll::<std::result::Result<response::Response<()>, error::Error>>::Ready(move _20);
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        discriminant((*_33)) = 1;
        return;
    }

    bb18 (cleanup): {
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        drop((((*_34) as variant#3).1: {async fn body@sdk/client/src/client.rs:369:30: 381:6})) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        _35 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        drop((((*_35) as variant#3).0: request::JsonRpcRequest)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        _36 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        drop((((*_36) as variant#3).0: request::JsonRpcRequest)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        _37 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:139:81: 142:6});
        discriminant((*_37)) = 2;
        resume;
    }

    bb22: {
        _21 = move _2;
        goto -> bb11;
    }

    bb23: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb23, unwind continue];
    }

    bb24: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb24, unwind continue];
    }

    bb25: {
        goto -> bb17;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_metadata_by_version(_1: &client::Client, _2: u64) -> {async fn body@sdk/client/src/client.rs:144:97: 147:6} {
    debug self => _1;
    debug version => _2;
    let mut _0: {async fn body@sdk/client/src/client.rs:144:97: 147:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:144:97: 147:6 (#0)} { self: _1, version: _2 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_metadata_by_version::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:144:97: 147:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<MetadataView>, error::Error>> {
    debug _task_context => _14;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6})).0: &client::Client);
    debug version => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6})).1: u64);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>>;
    let _3: &client::Client;
    let mut _5: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _6: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _7: request::MethodRequest;
    let mut _8: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>>;
    let mut _9: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _10: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _11: &mut std::task::Context<'_>;
    let mut _12: isize;
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: u32;
    let mut _16: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6};
    let mut _17: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6};
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6};
    scope 1 {
        debug self => _3;
        let _4: u64;
        scope 2 {
            debug version => _4;
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                let _13: std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>;
                scope 4 {
                }
                scope 5 {
                    debug result => _13;
                }
            }
        }
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6});
        _15 = discriminant((*_16));
        switchInt(move _15) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _14 = move _2;
        _17 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6});
        _3 = ((*_17).0: &client::Client);
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6});
        _4 = ((*_18).1: u64);
        _7 = request::MethodRequest::get_metadata_by_version(_4) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _6 = client::Client::send::<MetadataView>(_3, move _7) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _5 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _6) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6});
        (((*_19) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _5;
        goto -> bb5;
    }

    bb5: {
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6});
        _10 = &mut (((*_20) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _9 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_10) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _11 = _14;
        _8 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _9, _11) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<MetadataView>, error::Error>>::Pending;
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6});
        discriminant((*_21)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _13 = move ((_8 as Ready).0: std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6});
        drop((((*_22) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<MetadataView>, error::Error>>::Ready(move _13);
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6});
        discriminant((*_23)) = 1;
        return;
    }

    bb12 (cleanup): {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6});
        drop((((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:144:97: 147:6});
        discriminant((*_25)) = 2;
        resume;
    }

    bb14: {
        _14 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_metadata(_1: &client::Client) -> {async fn body@sdk/client/src/client.rs:149:72: 151:6} {
    debug self => _1;
    let mut _0: {async fn body@sdk/client/src/client.rs:149:72: 151:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:149:72: 151:6 (#0)} { self: _1 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_metadata::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:149:72: 151:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<MetadataView>, error::Error>> {
    debug _task_context => _13;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6})).0: &client::Client);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>>;
    let _3: &client::Client;
    let mut _4: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _5: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _6: request::MethodRequest;
    let mut _7: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>>;
    let mut _8: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _9: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _10: &mut std::task::Context<'_>;
    let mut _11: isize;
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: u32;
    let mut _15: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6};
    let mut _16: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6};
    let mut _17: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6};
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6};
    scope 1 {
        debug self => _3;
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
            let _12: std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>;
            scope 3 {
            }
            scope 4 {
                debug result => _12;
            }
        }
    }

    bb0: {
        _15 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6});
        _14 = discriminant((*_15));
        switchInt(move _14) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _13 = move _2;
        _16 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6});
        _3 = ((*_16).0: &client::Client);
        _6 = request::MethodRequest::get_metadata() -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _5 = client::Client::send::<MetadataView>(_3, move _6) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _4 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _5) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _17 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6});
        (((*_17) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _4;
        goto -> bb5;
    }

    bb5: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6});
        _9 = &mut (((*_18) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _8 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_9) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _10 = _13;
        _7 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _8, _10) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<MetadataView>, error::Error>>::Pending;
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6});
        discriminant((*_19)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _12 = move ((_7 as Ready).0: std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6});
        drop((((*_20) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<MetadataView>, error::Error>>::Ready(move _12);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6});
        discriminant((*_21)) = 1;
        return;
    }

    bb12 (cleanup): {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6});
        drop((((*_22) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:149:72: 151:6});
        discriminant((*_23)) = 2;
        resume;
    }

    bb14: {
        _13 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_account(_1: &client::Client, _2: AccountAddress) -> {async fn body@sdk/client/src/client.rs:156:48: 158:6} {
    debug self => _1;
    debug address => _2;
    let mut _0: {async fn body@sdk/client/src/client.rs:156:48: 158:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:156:48: 158:6 (#0)} { self: _1, address: _2 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_account::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:156:48: 158:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error>> {
    debug _task_context => _14;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6})).0: &client::Client);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6})).1: diem_types::PeerId);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>>;
    let _3: &client::Client;
    let mut _5: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _6: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _7: request::MethodRequest;
    let mut _8: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>>;
    let mut _9: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _10: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _11: &mut std::task::Context<'_>;
    let mut _12: isize;
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: u32;
    let mut _16: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6};
    let mut _17: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6};
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::PeerId;
        scope 2 {
            debug address => _4;
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                let _13: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>;
                scope 4 {
                }
                scope 5 {
                    debug result => _13;
                }
            }
        }
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6});
        _15 = discriminant((*_16));
        switchInt(move _15) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _14 = move _2;
        _17 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6});
        _3 = ((*_17).0: &client::Client);
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6});
        _4 = ((*_18).1: diem_types::PeerId);
        _7 = request::MethodRequest::get_account(_4) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _6 = client::Client::send::<std::option::Option<AccountView>>(_3, move _7) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _5 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _6) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6});
        (((*_19) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _5;
        goto -> bb5;
    }

    bb5: {
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6});
        _10 = &mut (((*_20) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _9 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_10) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _11 = _14;
        _8 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _9, _11) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error>>::Pending;
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6});
        discriminant((*_21)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _13 = move ((_8 as Ready).0: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6});
        drop((((*_22) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error>>::Ready(move _13);
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6});
        discriminant((*_23)) = 1;
        return;
    }

    bb12 (cleanup): {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6});
        drop((((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:156:48: 158:6});
        discriminant((*_25)) = 2;
        resume;
    }

    bb14: {
        _14 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_account_by_version(_1: &client::Client, _2: AccountAddress, _3: u64) -> {async fn body@sdk/client/src/client.rs:164:48: 167:6} {
    debug self => _1;
    debug address => _2;
    debug version => _3;
    let mut _0: {async fn body@sdk/client/src/client.rs:164:48: 167:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:164:48: 167:6 (#0)} { self: _1, address: _2, version: _3 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_account_by_version::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:164:48: 167:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error>> {
    debug _task_context => _15;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6})).0: &client::Client);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6})).1: diem_types::PeerId);
    debug version => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6})).2: u64);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>>;
    let _3: &client::Client;
    let mut _6: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _7: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _8: request::MethodRequest;
    let mut _9: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>>;
    let mut _10: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _11: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _12: &mut std::task::Context<'_>;
    let mut _13: isize;
    let mut _15: &mut std::task::Context<'_>;
    let mut _16: u32;
    let mut _17: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6};
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::PeerId;
        scope 2 {
            debug address => _4;
            let _5: u64;
            scope 3 {
                debug version => _5;
                scope 4 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                    let _14: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>;
                    scope 5 {
                    }
                    scope 6 {
                        debug result => _14;
                    }
                }
            }
        }
    }

    bb0: {
        _17 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6});
        _16 = discriminant((*_17));
        switchInt(move _16) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _15 = move _2;
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6});
        _3 = ((*_18).0: &client::Client);
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6});
        _4 = ((*_19).1: diem_types::PeerId);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6});
        _5 = ((*_20).2: u64);
        _8 = request::MethodRequest::get_account_by_version(_4, _5) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _7 = client::Client::send::<std::option::Option<AccountView>>(_3, move _8) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _6 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _7) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6});
        (((*_21) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _6;
        goto -> bb5;
    }

    bb5: {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6});
        _11 = &mut (((*_22) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _10 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_11) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _12 = _15;
        _9 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _10, _12) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error>>::Pending;
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6});
        discriminant((*_23)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _14 = move ((_9 as Ready).0: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>);
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6});
        drop((((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error>>::Ready(move _14);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6});
        discriminant((*_25)) = 1;
        return;
    }

    bb12 (cleanup): {
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6});
        drop((((*_26) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:164:48: 167:6});
        discriminant((*_27)) = 2;
        resume;
    }

    bb14: {
        _15 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_transactions(_1: &client::Client, _2: u64, _3: u64, _4: bool) -> {async fn body@sdk/client/src/client.rs:174:49: 181:6} {
    debug self => _1;
    debug start_seq => _2;
    debug limit => _3;
    debug include_events => _4;
    let mut _0: {async fn body@sdk/client/src/client.rs:174:49: 181:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:174:49: 181:6 (#0)} { self: _1, start_seq: _2, limit: _3, include_events: _4 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_transactions::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:174:49: 181:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<Vec<TransactionView>>, error::Error>> {
    debug _task_context => _16;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6})).0: &client::Client);
    debug start_seq => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6})).1: u64);
    debug limit => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6})).2: u64);
    debug include_events => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6})).3: bool);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>>;
    let _3: &client::Client;
    let mut _7: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _8: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _9: request::MethodRequest;
    let mut _10: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>>;
    let mut _11: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _12: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: u32;
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6};
    let mut _28: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6};
    let mut _29: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6};
    scope 1 {
        debug self => _3;
        let _4: u64;
        scope 2 {
            debug start_seq => _4;
            let _5: u64;
            scope 3 {
                debug limit => _5;
                let _6: bool;
                scope 4 {
                    debug include_events => _6;
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                        let _15: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>;
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _15;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6});
        _17 = discriminant((*_18));
        switchInt(move _17) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _16 = move _2;
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6});
        _3 = ((*_19).0: &client::Client);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6});
        _4 = ((*_20).1: u64);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6});
        _5 = ((*_21).2: u64);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6});
        _6 = ((*_22).3: bool);
        _9 = request::MethodRequest::get_transactions(_4, _5, _6) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _8 = client::Client::send::<Vec<TransactionView>>(_3, move _9) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _7 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _8) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6});
        (((*_23) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _7;
        goto -> bb5;
    }

    bb5: {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6});
        _12 = &mut (((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _11 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_12) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _13 = _16;
        _10 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _11, _13) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<Vec<TransactionView>>, error::Error>>::Pending;
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6});
        discriminant((*_25)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = move ((_10 as Ready).0: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6});
        drop((((*_26) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<Vec<TransactionView>>, error::Error>>::Ready(move _15);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6});
        discriminant((*_27)) = 1;
        return;
    }

    bb12 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6});
        drop((((*_28) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:174:49: 181:6});
        discriminant((*_29)) = 2;
        resume;
    }

    bb14: {
        _16 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_account_transaction(_1: &client::Client, _2: AccountAddress, _3: u64, _4: bool) -> {async fn body@sdk/client/src/client.rs:188:52: 195:6} {
    debug self => _1;
    debug address => _2;
    debug seq => _3;
    debug include_events => _4;
    let mut _0: {async fn body@sdk/client/src/client.rs:188:52: 195:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:188:52: 195:6 (#0)} { self: _1, address: _2, seq: _3, include_events: _4 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_account_transaction::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:188:52: 195:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<std::option::Option<TransactionView>>, error::Error>> {
    debug _task_context => _16;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6})).0: &client::Client);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6})).1: diem_types::PeerId);
    debug seq => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6})).2: u64);
    debug include_events => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6})).3: bool);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>>;
    let _3: &client::Client;
    let mut _7: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _8: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _9: request::MethodRequest;
    let mut _10: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>>;
    let mut _11: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _12: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: u32;
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _28: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    let mut _29: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::PeerId;
        scope 2 {
            debug address => _4;
            let _5: u64;
            scope 3 {
                debug seq => _5;
                let _6: bool;
                scope 4 {
                    debug include_events => _6;
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                        let _15: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>;
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _15;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        _17 = discriminant((*_18));
        switchInt(move _17) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _16 = move _2;
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        _3 = ((*_19).0: &client::Client);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        _4 = ((*_20).1: diem_types::PeerId);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        _5 = ((*_21).2: u64);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        _6 = ((*_22).3: bool);
        _9 = request::MethodRequest::get_account_transaction(_4, _5, _6) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _8 = client::Client::send::<std::option::Option<TransactionView>>(_3, move _9) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _7 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _8) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        (((*_23) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _7;
        goto -> bb5;
    }

    bb5: {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        _12 = &mut (((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _11 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_12) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _13 = _16;
        _10 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _11, _13) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<TransactionView>>, error::Error>>::Pending;
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        discriminant((*_25)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = move ((_10 as Ready).0: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        drop((((*_26) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<TransactionView>>, error::Error>>::Ready(move _15);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        discriminant((*_27)) = 1;
        return;
    }

    bb12 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        drop((((*_28) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:188:52: 195:6});
        discriminant((*_29)) = 2;
        resume;
    }

    bb14: {
        _16 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_account_transactions(_1: &client::Client, _2: AccountAddress, _3: u64, _4: u64, _5: bool) -> {async fn body@sdk/client/src/client.rs:203:49: 211:6} {
    debug self => _1;
    debug address => _2;
    debug start_seq => _3;
    debug limit => _4;
    debug include_events => _5;
    let mut _0: {async fn body@sdk/client/src/client.rs:203:49: 211:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:203:49: 211:6 (#0)} { self: _1, address: _2, start_seq: _3, limit: _4, include_events: _5 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_account_transactions::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:203:49: 211:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<Vec<TransactionView>>, error::Error>> {
    debug _task_context => _17;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6})).0: &client::Client);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6})).1: diem_types::PeerId);
    debug start_seq => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6})).2: u64);
    debug limit => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6})).3: u64);
    debug include_events => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6})).4: bool);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>>;
    let _3: &client::Client;
    let mut _8: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _9: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _10: request::MethodRequest;
    let mut _11: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>>;
    let mut _12: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _13: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: isize;
    let mut _17: &mut std::task::Context<'_>;
    let mut _18: u32;
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    let mut _28: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    let mut _29: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    let mut _30: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    let mut _31: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::PeerId;
        scope 2 {
            debug address => _4;
            let _5: u64;
            scope 3 {
                debug start_seq => _5;
                let _6: u64;
                scope 4 {
                    debug limit => _6;
                    let _7: bool;
                    scope 5 {
                        debug include_events => _7;
                        scope 6 {
                            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                            let _16: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>;
                            scope 7 {
                            }
                            scope 8 {
                                debug result => _16;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        _18 = discriminant((*_19));
        switchInt(move _18) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _17 = move _2;
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        _3 = ((*_20).0: &client::Client);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        _4 = ((*_21).1: diem_types::PeerId);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        _5 = ((*_22).2: u64);
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        _6 = ((*_23).3: u64);
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        _7 = ((*_24).4: bool);
        _10 = request::MethodRequest::get_account_transactions(_4, _5, _6, _7) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _9 = client::Client::send::<Vec<TransactionView>>(_3, move _10) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _8 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _9) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        (((*_25) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _8;
        goto -> bb5;
    }

    bb5: {
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        _13 = &mut (((*_26) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _12 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_13) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _14 = _17;
        _11 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _12, _14) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<Vec<TransactionView>>, error::Error>>::Pending;
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        discriminant((*_27)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _16 = move ((_11 as Ready).0: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>);
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        drop((((*_28) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<Vec<TransactionView>>, error::Error>>::Ready(move _16);
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        discriminant((*_29)) = 1;
        return;
    }

    bb12 (cleanup): {
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        drop((((*_30) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:203:49: 211:6});
        discriminant((*_31)) = 2;
        resume;
    }

    bb14: {
        _17 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_events(_1: &client::Client, _2: EventKey, _3: u64, _4: u64) -> {async fn body@sdk/client/src/client.rs:218:43: 221:6} {
    debug self => _1;
    debug key => _2;
    debug start_seq => _3;
    debug limit => _4;
    let mut _0: {async fn body@sdk/client/src/client.rs:218:43: 221:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:218:43: 221:6 (#0)} { self: _1, key: _2, start_seq: _3, limit: _4 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_events::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:218:43: 221:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<Vec<EventView>>, error::Error>> {
    debug _task_context => _16;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6})).0: &client::Client);
    debug key => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6})).1: diem_types::event::EventKey);
    debug start_seq => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6})).2: u64);
    debug limit => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6})).3: u64);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventView>>, error::Error>>;
    let _3: &client::Client;
    let mut _7: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _8: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _9: request::MethodRequest;
    let mut _10: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventView>>, error::Error>>;
    let mut _11: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _12: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: u32;
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6};
    let mut _28: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6};
    let mut _29: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::event::EventKey;
        scope 2 {
            debug key => _4;
            let _5: u64;
            scope 3 {
                debug start_seq => _5;
                let _6: u64;
                scope 4 {
                    debug limit => _6;
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                        let _15: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventView>>, error::Error>;
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _15;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6});
        _17 = discriminant((*_18));
        switchInt(move _17) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _16 = move _2;
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6});
        _3 = ((*_19).0: &client::Client);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6});
        _4 = ((*_20).1: diem_types::event::EventKey);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6});
        _5 = ((*_21).2: u64);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6});
        _6 = ((*_22).3: u64);
        _9 = request::MethodRequest::get_events(_4, _5, _6) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _8 = client::Client::send::<Vec<EventView>>(_3, move _9) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _7 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _8) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6});
        (((*_23) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _7;
        goto -> bb5;
    }

    bb5: {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6});
        _12 = &mut (((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _11 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_12) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _13 = _16;
        _10 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _11, _13) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<Vec<EventView>>, error::Error>>::Pending;
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6});
        discriminant((*_25)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = move ((_10 as Ready).0: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventView>>, error::Error>);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6});
        drop((((*_26) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<Vec<EventView>>, error::Error>>::Ready(move _15);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6});
        discriminant((*_27)) = 1;
        return;
    }

    bb12 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6});
        drop((((*_28) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:218:43: 221:6});
        discriminant((*_29)) = 2;
        resume;
    }

    bb14: {
        _16 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_currencies(_1: &client::Client) -> {async fn body@sdk/client/src/client.rs:223:83: 225:6} {
    debug self => _1;
    let mut _0: {async fn body@sdk/client/src/client.rs:223:83: 225:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:223:83: 225:6 (#0)} { self: _1 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_currencies::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:223:83: 225:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<Vec<CurrencyInfoView>>, error::Error>> {
    debug _task_context => _13;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6})).0: &client::Client);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>>, error::Error>>;
    let _3: &client::Client;
    let mut _4: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _5: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _6: request::MethodRequest;
    let mut _7: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>>, error::Error>>;
    let mut _8: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _9: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _10: &mut std::task::Context<'_>;
    let mut _11: isize;
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: u32;
    let mut _15: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6};
    let mut _16: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6};
    let mut _17: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6};
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6};
    scope 1 {
        debug self => _3;
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
            let _12: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>>, error::Error>;
            scope 3 {
            }
            scope 4 {
                debug result => _12;
            }
        }
    }

    bb0: {
        _15 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6});
        _14 = discriminant((*_15));
        switchInt(move _14) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _13 = move _2;
        _16 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6});
        _3 = ((*_16).0: &client::Client);
        _6 = request::MethodRequest::get_currencies() -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _5 = client::Client::send::<Vec<CurrencyInfoView>>(_3, move _6) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _4 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _5) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _17 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6});
        (((*_17) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _4;
        goto -> bb5;
    }

    bb5: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6});
        _9 = &mut (((*_18) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _8 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_9) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _10 = _13;
        _7 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _8, _10) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<Vec<CurrencyInfoView>>, error::Error>>::Pending;
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6});
        discriminant((*_19)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _12 = move ((_7 as Ready).0: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>>, error::Error>);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6});
        drop((((*_20) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<Vec<CurrencyInfoView>>, error::Error>>::Ready(move _12);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6});
        discriminant((*_21)) = 1;
        return;
    }

    bb12 (cleanup): {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6});
        drop((((*_22) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:223:83: 225:6});
        discriminant((*_23)) = 2;
        resume;
    }

    bb14: {
        _13 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_network_status(_1: &client::Client) -> {async fn body@sdk/client/src/client.rs:227:69: 229:6} {
    debug self => _1;
    let mut _0: {async fn body@sdk/client/src/client.rs:227:69: 229:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:227:69: 229:6 (#0)} { self: _1 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_network_status::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:227:69: 229:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<u64>, error::Error>> {
    debug _task_context => _13;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6})).0: &client::Client);
    let mut _0: std::task::Poll<std::result::Result<response::Response<u64>, error::Error>>;
    let _3: &client::Client;
    let mut _4: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _5: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _6: request::MethodRequest;
    let mut _7: std::task::Poll<std::result::Result<response::Response<u64>, error::Error>>;
    let mut _8: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _9: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _10: &mut std::task::Context<'_>;
    let mut _11: isize;
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: u32;
    let mut _15: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6};
    let mut _16: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6};
    let mut _17: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6};
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6};
    scope 1 {
        debug self => _3;
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
            let _12: std::result::Result<response::Response<u64>, error::Error>;
            scope 3 {
            }
            scope 4 {
                debug result => _12;
            }
        }
    }

    bb0: {
        _15 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6});
        _14 = discriminant((*_15));
        switchInt(move _14) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _13 = move _2;
        _16 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6});
        _3 = ((*_16).0: &client::Client);
        _6 = request::MethodRequest::get_network_status() -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _5 = client::Client::send::<u64>(_3, move _6) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _4 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _5) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _17 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6});
        (((*_17) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _4;
        goto -> bb5;
    }

    bb5: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6});
        _9 = &mut (((*_18) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _8 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_9) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _10 = _13;
        _7 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _8, _10) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<u64>, error::Error>>::Pending;
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6});
        discriminant((*_19)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _12 = move ((_7 as Ready).0: std::result::Result<response::Response<u64>, error::Error>);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6});
        drop((((*_20) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<u64>, error::Error>>::Ready(move _12);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6});
        discriminant((*_21)) = 1;
        return;
    }

    bb12 (cleanup): {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6});
        drop((((*_22) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:227:69: 229:6});
        discriminant((*_23)) = 2;
        resume;
    }

    bb14: {
        _13 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_state_proof(_1: &client::Client, _2: u64) -> {async fn body@sdk/client/src/client.rs:235:96: 238:6} {
    debug self => _1;
    debug from_version => _2;
    let mut _0: {async fn body@sdk/client/src/client.rs:235:96: 238:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:235:96: 238:6 (#0)} { self: _1, from_version: _2 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_state_proof::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:235:96: 238:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<StateProofView>, error::Error>> {
    debug _task_context => _14;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6})).0: &client::Client);
    debug from_version => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6})).1: u64);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::StateProofView>, error::Error>>;
    let _3: &client::Client;
    let mut _5: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _6: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _7: request::MethodRequest;
    let mut _8: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::StateProofView>, error::Error>>;
    let mut _9: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _10: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _11: &mut std::task::Context<'_>;
    let mut _12: isize;
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: u32;
    let mut _16: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6};
    let mut _17: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6};
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6};
    scope 1 {
        debug self => _3;
        let _4: u64;
        scope 2 {
            debug from_version => _4;
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                let _13: std::result::Result<response::Response<diem_json_rpc_types::views::StateProofView>, error::Error>;
                scope 4 {
                }
                scope 5 {
                    debug result => _13;
                }
            }
        }
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6});
        _15 = discriminant((*_16));
        switchInt(move _15) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _14 = move _2;
        _17 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6});
        _3 = ((*_17).0: &client::Client);
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6});
        _4 = ((*_18).1: u64);
        _7 = request::MethodRequest::get_state_proof(_4) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _6 = client::Client::send::<StateProofView>(_3, move _7) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _5 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _6) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6});
        (((*_19) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _5;
        goto -> bb5;
    }

    bb5: {
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6});
        _10 = &mut (((*_20) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _9 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_10) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _11 = _14;
        _8 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _9, _11) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<StateProofView>, error::Error>>::Pending;
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6});
        discriminant((*_21)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _13 = move ((_8 as Ready).0: std::result::Result<response::Response<diem_json_rpc_types::views::StateProofView>, error::Error>);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6});
        drop((((*_22) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<StateProofView>, error::Error>>::Ready(move _13);
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6});
        discriminant((*_23)) = 1;
        return;
    }

    bb12 (cleanup): {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6});
        drop((((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:235:96: 238:6});
        discriminant((*_25)) = 2;
        resume;
    }

    bb14: {
        _14 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_accumulator_consistency_proof(_1: &client::Client, _2: std::option::Option<u64>, _3: std::option::Option<u64>) -> {async fn body@sdk/client/src/client.rs:244:60: 250:6} {
    debug self => _1;
    debug client_known_version => _2;
    debug ledger_version => _3;
    let mut _0: {async fn body@sdk/client/src/client.rs:244:60: 250:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:244:60: 250:6 (#0)} { self: _1, client_known_version: _2, ledger_version: _3 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_accumulator_consistency_proof::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:244:60: 250:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<AccumulatorConsistencyProofView>, error::Error>> {
    debug _task_context => _15;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6})).0: &client::Client);
    debug client_known_version => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6})).1: std::option::Option<u64>);
    debug ledger_version => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6})).2: std::option::Option<u64>);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::AccumulatorConsistencyProofView>, error::Error>>;
    let _3: &client::Client;
    let mut _6: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _7: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _8: request::MethodRequest;
    let mut _9: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::AccumulatorConsistencyProofView>, error::Error>>;
    let mut _10: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _11: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _12: &mut std::task::Context<'_>;
    let mut _13: isize;
    let mut _15: &mut std::task::Context<'_>;
    let mut _16: u32;
    let mut _17: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6};
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6};
    scope 1 {
        debug self => _3;
        let _4: std::option::Option<u64>;
        scope 2 {
            debug client_known_version => _4;
            let _5: std::option::Option<u64>;
            scope 3 {
                debug ledger_version => _5;
                scope 4 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                    let _14: std::result::Result<response::Response<diem_json_rpc_types::views::AccumulatorConsistencyProofView>, error::Error>;
                    scope 5 {
                    }
                    scope 6 {
                        debug result => _14;
                    }
                }
            }
        }
    }

    bb0: {
        _17 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6});
        _16 = discriminant((*_17));
        switchInt(move _16) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _15 = move _2;
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6});
        _3 = ((*_18).0: &client::Client);
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6});
        _4 = ((*_19).1: std::option::Option<u64>);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6});
        _5 = ((*_20).2: std::option::Option<u64>);
        _8 = request::MethodRequest::get_accumulator_consistency_proof(_4, _5) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _7 = client::Client::send::<AccumulatorConsistencyProofView>(_3, move _8) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _6 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _7) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6});
        (((*_21) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _6;
        goto -> bb5;
    }

    bb5: {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6});
        _11 = &mut (((*_22) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _10 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_11) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _12 = _15;
        _9 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _10, _12) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<AccumulatorConsistencyProofView>, error::Error>>::Pending;
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6});
        discriminant((*_23)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _14 = move ((_9 as Ready).0: std::result::Result<response::Response<diem_json_rpc_types::views::AccumulatorConsistencyProofView>, error::Error>);
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6});
        drop((((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<AccumulatorConsistencyProofView>, error::Error>>::Ready(move _14);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6});
        discriminant((*_25)) = 1;
        return;
    }

    bb12 (cleanup): {
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6});
        drop((((*_26) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:244:60: 250:6});
        discriminant((*_27)) = 2;
        resume;
    }

    bb14: {
        _15 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_account_state_with_proof(_1: &client::Client, _2: AccountAddress, _3: std::option::Option<u64>, _4: std::option::Option<u64>) -> {async fn body@sdk/client/src/client.rs:257:54: 264:6} {
    debug self => _1;
    debug address => _2;
    debug from_version => _3;
    debug to_version => _4;
    let mut _0: {async fn body@sdk/client/src/client.rs:257:54: 264:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:257:54: 264:6 (#0)} { self: _1, address: _2, from_version: _3, to_version: _4 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_account_state_with_proof::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:257:54: 264:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<AccountStateWithProofView>, error::Error>> {
    debug _task_context => _16;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6})).0: &client::Client);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6})).1: diem_types::PeerId);
    debug from_version => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6})).2: std::option::Option<u64>);
    debug to_version => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6})).3: std::option::Option<u64>);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::AccountStateWithProofView>, error::Error>>;
    let _3: &client::Client;
    let mut _7: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _8: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _9: request::MethodRequest;
    let mut _10: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::AccountStateWithProofView>, error::Error>>;
    let mut _11: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _12: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: u32;
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _28: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _29: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::PeerId;
        scope 2 {
            debug address => _4;
            let _5: std::option::Option<u64>;
            scope 3 {
                debug from_version => _5;
                let _6: std::option::Option<u64>;
                scope 4 {
                    debug to_version => _6;
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                        let _15: std::result::Result<response::Response<diem_json_rpc_types::views::AccountStateWithProofView>, error::Error>;
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _15;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        _17 = discriminant((*_18));
        switchInt(move _17) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _16 = move _2;
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        _3 = ((*_19).0: &client::Client);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        _4 = ((*_20).1: diem_types::PeerId);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        _5 = ((*_21).2: std::option::Option<u64>);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        _6 = ((*_22).3: std::option::Option<u64>);
        _9 = request::MethodRequest::get_account_state_with_proof(_4, _5, _6) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _8 = client::Client::send::<AccountStateWithProofView>(_3, move _9) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _7 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _8) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        (((*_23) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _7;
        goto -> bb5;
    }

    bb5: {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        _12 = &mut (((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _11 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_12) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _13 = _16;
        _10 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _11, _13) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<AccountStateWithProofView>, error::Error>>::Pending;
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        discriminant((*_25)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = move ((_10 as Ready).0: std::result::Result<response::Response<diem_json_rpc_types::views::AccountStateWithProofView>, error::Error>);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        drop((((*_26) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<AccountStateWithProofView>, error::Error>>::Ready(move _15);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        discriminant((*_27)) = 1;
        return;
    }

    bb12 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        drop((((*_28) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        discriminant((*_29)) = 2;
        resume;
    }

    bb14: {
        _16 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_transactions_with_proofs(_1: &client::Client, _2: u64, _3: u64, _4: bool) -> {async fn body@sdk/client/src/client.rs:271:63: 278:6} {
    debug self => _1;
    debug start_version => _2;
    debug limit => _3;
    debug include_events => _4;
    let mut _0: {async fn body@sdk/client/src/client.rs:271:63: 278:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:271:63: 278:6 (#0)} { self: _1, start_version: _2, limit: _3, include_events: _4 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_transactions_with_proofs::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:271:63: 278:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<std::option::Option<TransactionsWithProofsView>>, error::Error>> {
    debug _task_context => _16;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6})).0: &client::Client);
    debug start_version => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6})).1: u64);
    debug limit => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6})).2: u64);
    debug include_events => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6})).3: bool);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>>, error::Error>>;
    let _3: &client::Client;
    let mut _7: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _8: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _9: request::MethodRequest;
    let mut _10: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>>, error::Error>>;
    let mut _11: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _12: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: u32;
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6};
    let mut _28: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6};
    let mut _29: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6};
    scope 1 {
        debug self => _3;
        let _4: u64;
        scope 2 {
            debug start_version => _4;
            let _5: u64;
            scope 3 {
                debug limit => _5;
                let _6: bool;
                scope 4 {
                    debug include_events => _6;
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                        let _15: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>>, error::Error>;
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _15;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6});
        _17 = discriminant((*_18));
        switchInt(move _17) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _16 = move _2;
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6});
        _3 = ((*_19).0: &client::Client);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6});
        _4 = ((*_20).1: u64);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6});
        _5 = ((*_21).2: u64);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6});
        _6 = ((*_22).3: bool);
        _9 = request::MethodRequest::get_transactions_with_proofs(_4, _5, _6) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _8 = client::Client::send::<std::option::Option<TransactionsWithProofsView>>(_3, move _9) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _7 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _8) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6});
        (((*_23) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _7;
        goto -> bb5;
    }

    bb5: {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6});
        _12 = &mut (((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _11 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_12) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _13 = _16;
        _10 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _11, _13) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<TransactionsWithProofsView>>, error::Error>>::Pending;
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6});
        discriminant((*_25)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = move ((_10 as Ready).0: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>>, error::Error>);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6});
        drop((((*_26) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<TransactionsWithProofsView>>, error::Error>>::Ready(move _15);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6});
        discriminant((*_27)) = 1;
        return;
    }

    bb12 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6});
        drop((((*_28) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:271:63: 278:6});
        discriminant((*_29)) = 2;
        resume;
    }

    bb14: {
        _16 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_account_transactions_with_proofs(_1: &client::Client, _2: AccountAddress, _3: u64, _4: u64, _5: bool, _6: std::option::Option<u64>) -> {async fn body@sdk/client/src/client.rs:287:61: 296:6} {
    debug self => _1;
    debug address => _2;
    debug start_seq => _3;
    debug limit => _4;
    debug include_events => _5;
    debug ledger_version => _6;
    let mut _0: {async fn body@sdk/client/src/client.rs:287:61: 296:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:287:61: 296:6 (#0)} { self: _1, address: _2, start_seq: _3, limit: _4, include_events: _5, ledger_version: _6 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_account_transactions_with_proofs::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:287:61: 296:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<AccountTransactionsWithProofView>, error::Error>> {
    debug _task_context => _18;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6})).0: &client::Client);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6})).1: diem_types::PeerId);
    debug start_seq => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6})).2: u64);
    debug limit => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6})).3: u64);
    debug include_events => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6})).4: bool);
    debug ledger_version => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6})).5: std::option::Option<u64>);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::AccountTransactionsWithProofView>, error::Error>>;
    let _3: &client::Client;
    let mut _9: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _10: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _11: request::MethodRequest;
    let mut _12: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::AccountTransactionsWithProofView>, error::Error>>;
    let mut _13: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _14: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _15: &mut std::task::Context<'_>;
    let mut _16: isize;
    let mut _18: &mut std::task::Context<'_>;
    let mut _19: u32;
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _28: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _29: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _30: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _31: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _32: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    let mut _33: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::PeerId;
        scope 2 {
            debug address => _4;
            let _5: u64;
            scope 3 {
                debug start_seq => _5;
                let _6: u64;
                scope 4 {
                    debug limit => _6;
                    let _7: bool;
                    scope 5 {
                        debug include_events => _7;
                        let _8: std::option::Option<u64>;
                        scope 6 {
                            debug ledger_version => _8;
                            scope 7 {
                                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                                let _17: std::result::Result<response::Response<diem_json_rpc_types::views::AccountTransactionsWithProofView>, error::Error>;
                                scope 8 {
                                }
                                scope 9 {
                                    debug result => _17;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        _19 = discriminant((*_20));
        switchInt(move _19) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _18 = move _2;
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        _3 = ((*_21).0: &client::Client);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        _4 = ((*_22).1: diem_types::PeerId);
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        _5 = ((*_23).2: u64);
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        _6 = ((*_24).3: u64);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        _7 = ((*_25).4: bool);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        _8 = ((*_26).5: std::option::Option<u64>);
        _11 = request::MethodRequest::get_account_transactions_with_proofs(_4, _5, _6, _7, _8) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _10 = client::Client::send::<AccountTransactionsWithProofView>(_3, move _11) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _9 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _10) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        (((*_27) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _9;
        goto -> bb5;
    }

    bb5: {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        _14 = &mut (((*_28) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _13 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_14) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _15 = _18;
        _12 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _13, _15) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<AccountTransactionsWithProofView>, error::Error>>::Pending;
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        discriminant((*_29)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _17 = move ((_12 as Ready).0: std::result::Result<response::Response<diem_json_rpc_types::views::AccountTransactionsWithProofView>, error::Error>);
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        drop((((*_30) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<AccountTransactionsWithProofView>, error::Error>>::Ready(move _17);
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        discriminant((*_31)) = 1;
        return;
    }

    bb12 (cleanup): {
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        drop((((*_32) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:287:61: 296:6});
        discriminant((*_33)) = 2;
        resume;
    }

    bb14: {
        _18 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_events_with_proofs(_1: &client::Client, _2: EventKey, _3: u64, _4: u64) -> {async fn body@sdk/client/src/client.rs:303:52: 306:6} {
    debug self => _1;
    debug key => _2;
    debug start_seq => _3;
    debug limit => _4;
    let mut _0: {async fn body@sdk/client/src/client.rs:303:52: 306:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:303:52: 306:6 (#0)} { self: _1, key: _2, start_seq: _3, limit: _4 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_events_with_proofs::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:303:52: 306:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<Vec<EventWithProofView>>, error::Error>> {
    debug _task_context => _16;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6})).0: &client::Client);
    debug key => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6})).1: diem_types::event::EventKey);
    debug start_seq => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6})).2: u64);
    debug limit => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6})).3: u64);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>, error::Error>>;
    let _3: &client::Client;
    let mut _7: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _8: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _9: request::MethodRequest;
    let mut _10: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>, error::Error>>;
    let mut _11: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _12: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: u32;
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _28: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _29: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::event::EventKey;
        scope 2 {
            debug key => _4;
            let _5: u64;
            scope 3 {
                debug start_seq => _5;
                let _6: u64;
                scope 4 {
                    debug limit => _6;
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                        let _15: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>, error::Error>;
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _15;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        _17 = discriminant((*_18));
        switchInt(move _17) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _16 = move _2;
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        _3 = ((*_19).0: &client::Client);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        _4 = ((*_20).1: diem_types::event::EventKey);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        _5 = ((*_21).2: u64);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        _6 = ((*_22).3: u64);
        _9 = request::MethodRequest::get_events_with_proofs(_4, _5, _6) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _8 = client::Client::send::<Vec<EventWithProofView>>(_3, move _9) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _7 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _8) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        (((*_23) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _7;
        goto -> bb5;
    }

    bb5: {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        _12 = &mut (((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _11 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_12) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _13 = _16;
        _10 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _11, _13) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<Vec<EventWithProofView>>, error::Error>>::Pending;
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        discriminant((*_25)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = move ((_10 as Ready).0: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>, error::Error>);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        drop((((*_26) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<Vec<EventWithProofView>>, error::Error>>::Ready(move _15);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        discriminant((*_27)) = 1;
        return;
    }

    bb12 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        drop((((*_28) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        discriminant((*_29)) = 2;
        resume;
    }

    bb14: {
        _16 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_event_by_version_with_proof(_1: &client::Client, _2: EventKey, _3: std::option::Option<u64>) -> {async fn body@sdk/client/src/client.rs:312:56: 315:6} {
    debug self => _1;
    debug key => _2;
    debug version => _3;
    let mut _0: {async fn body@sdk/client/src/client.rs:312:56: 315:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:312:56: 315:6 (#0)} { self: _1, key: _2, version: _3 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_event_by_version_with_proof::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:312:56: 315:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<EventByVersionWithProofView>, error::Error>> {
    debug _task_context => _15;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6})).0: &client::Client);
    debug key => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6})).1: diem_types::event::EventKey);
    debug version => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6})).2: std::option::Option<u64>);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::EventByVersionWithProofView>, error::Error>>;
    let _3: &client::Client;
    let mut _6: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _7: {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _8: request::MethodRequest;
    let mut _9: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::EventByVersionWithProofView>, error::Error>>;
    let mut _10: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>;
    let mut _11: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _12: &mut std::task::Context<'_>;
    let mut _13: isize;
    let mut _15: &mut std::task::Context<'_>;
    let mut _16: u32;
    let mut _17: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6};
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6};
    let mut _24: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6};
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::event::EventKey;
        scope 2 {
            debug key => _4;
            let _5: std::option::Option<u64>;
            scope 3 {
                debug version => _5;
                scope 4 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
                    let _14: std::result::Result<response::Response<diem_json_rpc_types::views::EventByVersionWithProofView>, error::Error>;
                    scope 5 {
                    }
                    scope 6 {
                        debug result => _14;
                    }
                }
            }
        }
    }

    bb0: {
        _17 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6});
        _16 = discriminant((*_17));
        switchInt(move _16) -> [0: bb1, 1: bb16, 2: bb15, 3: bb14, otherwise: bb9];
    }

    bb1: {
        _15 = move _2;
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6});
        _3 = ((*_18).0: &client::Client);
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6});
        _4 = ((*_19).1: diem_types::event::EventKey);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6});
        _5 = ((*_20).2: std::option::Option<u64>);
        _8 = request::MethodRequest::get_event_by_version_with_proof(_4, _5) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _7 = client::Client::send::<EventByVersionWithProofView>(_3, move _8) -> [return: bb3, unwind: bb13];
    }

    bb3: {
        _6 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as std::future::IntoFuture>::into_future(move _7) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6});
        (((*_21) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6}) = move _6;
        goto -> bb5;
    }

    bb5: {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6});
        _11 = &mut (((*_22) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _10 = Pin::<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>::new_unchecked(_11) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _12 = _15;
        _9 = <{async fn body@sdk/client/src/client.rs:357:94: 363:6} as futures::Future>::poll(move _10, _12) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<EventByVersionWithProofView>, error::Error>>::Pending;
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6});
        discriminant((*_23)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _14 = move ((_9 as Ready).0: std::result::Result<response::Response<diem_json_rpc_types::views::EventByVersionWithProofView>, error::Error>);
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6});
        drop((((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = Poll::<std::result::Result<response::Response<EventByVersionWithProofView>, error::Error>>::Ready(move _14);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6});
        discriminant((*_25)) = 1;
        return;
    }

    bb12 (cleanup): {
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6});
        drop((((*_26) as variant#3).0: {async fn body@sdk/client/src/client.rs:357:94: 363:6})) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:312:56: 315:6});
        discriminant((*_27)) = 2;
        resume;
    }

    bb14: {
        _15 = move _2;
        goto -> bb5;
    }

    bb15: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb15, unwind continue];
    }

    bb16: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb16, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_deserialized_events(_1: &client::Client, _2: &EventKey, _3: u64, _4: u64) -> {async fn body@sdk/client/src/client.rs:326:42: 335:6} {
    debug self => _1;
    debug event_key => _2;
    debug start_seq => _3;
    debug limit => _4;
    let mut _0: {async fn body@sdk/client/src/client.rs:326:42: 335:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:326:42: 335:6 (#0)} { self: _1, event_key: _2, start_seq: _3, limit: _4 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_deserialized_events::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:326:42: 335:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<Vec<move_deserialize::Event<T>>>, error::Error>> {
    debug _task_context => _30;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6})).0: &client::Client);
    debug event_key => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6})).1: &diem_types::event::EventKey);
    debug start_seq => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6})).2: u64);
    debug limit => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6})).3: u64);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<move_deserialize::Event<T>>>, error::Error>>;
    let _3: &client::Client;
    let mut _9: (std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>, state::State);
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>>;
    let mut _11: {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _12: {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _13: diem_types::event::EventKey;
    let mut _14: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>, error::Error>>;
    let mut _15: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:303:52: 306:6}>;
    let mut _16: &mut {async fn body@sdk/client/src/client.rs:303:52: 306:6};
    let mut _17: &mut std::task::Context<'_>;
    let mut _18: isize;
    let mut _20: isize;
    let mut _23: response::Response<std::vec::Vec<move_deserialize::Event<T>>>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<move_deserialize::Event<T>>>;
    let mut _25: std::result::Result<std::vec::Vec<move_deserialize::Event<T>>, error::Error>;
    let mut _26: isize;
    let mut _29: std::result::Result<response::Response<std::vec::Vec<move_deserialize::Event<T>>>, error::Error>;
    let mut _30: &mut std::task::Context<'_>;
    let mut _31: u32;
    let mut _32: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6};
    let mut _33: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6};
    let mut _34: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6};
    let mut _35: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6};
    let mut _36: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6};
    let mut _37: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6};
    let mut _38: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6};
    let mut _39: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6};
    let mut _40: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6};
    let mut _41: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6};
    let mut _42: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6};
    let mut _43: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6};
    scope 1 {
        debug self => _3;
        let _4: &diem_types::event::EventKey;
        scope 2 {
            debug event_key => _4;
            let _5: u64;
            scope 3 {
                debug start_seq => _5;
                let _6: u64;
                scope 4 {
                    debug limit => _6;
                    let _7: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>;
                    let _8: state::State;
                    let _21: std::result::Result<std::convert::Infallible, error::Error>;
                    let _22: response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>;
                    scope 5 {
                        debug events => _7;
                        debug state => _8;
                        let _27: std::result::Result<std::convert::Infallible, error::Error>;
                        let _28: std::vec::Vec<move_deserialize::Event<T>>;
                        scope 13 {
                            debug residual => _27;
                            scope 14 {
                            }
                        }
                        scope 15 {
                            debug val => _28;
                            scope 16 {
                            }
                        }
                    }
                    scope 6 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:303:52: 306:6});
                        let _19: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>, error::Error>;
                        scope 7 {
                        }
                        scope 8 {
                            debug result => _19;
                        }
                    }
                    scope 9 {
                        debug residual => _21;
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => _22;
                        scope 12 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6});
        _31 = discriminant((*_32));
        switchInt(move _31) -> [0: bb1, 1: bb25, 2: bb24, 3: bb23, otherwise: bb8];
    }

    bb1: {
        _30 = move _2;
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6});
        _3 = ((*_33).0: &client::Client);
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6});
        _4 = ((*_34).1: &diem_types::event::EventKey);
        _35 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6});
        _5 = ((*_35).2: u64);
        _36 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6});
        _6 = ((*_36).3: u64);
        _13 = (*_4);
        _12 = client::Client::get_events_with_proofs(_3, move _13, _5, _6) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _11 = <{async fn body@sdk/client/src/client.rs:303:52: 306:6} as std::future::IntoFuture>::into_future(move _12) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _37 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6});
        (((*_37) as variant#3).0: {async fn body@sdk/client/src/client.rs:303:52: 306:6}) = move _11;
        goto -> bb4;
    }

    bb4: {
        _38 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6});
        _16 = &mut (((*_38) as variant#3).0: {async fn body@sdk/client/src/client.rs:303:52: 306:6});
        _15 = Pin::<&mut {async fn body@sdk/client/src/client.rs:303:52: 306:6}>::new_unchecked(_16) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        _17 = _30;
        _14 = <{async fn body@sdk/client/src/client.rs:303:52: 306:6} as futures::Future>::poll(move _15, _17) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _18 = discriminant(_14);
        switchInt(move _18) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<std::result::Result<response::Response<Vec<move_deserialize::Event<T>>>, error::Error>>::Pending;
        _39 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6});
        discriminant((*_39)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _19 = move ((_14 as Ready).0: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>, error::Error>);
        _40 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6});
        drop((((*_40) as variant#3).0: {async fn body@sdk/client/src/client.rs:303:52: 306:6})) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        _10 = <std::result::Result<response::Response<Vec<EventWithProofView>>, error::Error> as Try>::branch(move _19) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _20 = discriminant(_10);
        switchInt(move _20) -> [0: bb12, 1: bb13, otherwise: bb8];
    }

    bb12: {
        _22 = move ((_10 as Continue).0: response::Response<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>);
        _9 = response::Response::<Vec<EventWithProofView>>::into_parts(move _22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _21 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _29 = <std::result::Result<response::Response<Vec<move_deserialize::Event<T>>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _21) -> [return: bb26, unwind: bb22];
    }

    bb14: {
        _7 = move (_9.0: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>);
        _8 = move (_9.1: state::State);
        _25 = move_deserialize::get_events::<T>(move _7) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        _24 = <std::result::Result<Vec<move_deserialize::Event<T>>, error::Error> as Try>::branch(move _25) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb8];
    }

    bb17: {
        _28 = move ((_24 as Continue).0: std::vec::Vec<move_deserialize::Event<T>>);
        _23 = response::Response::<Vec<move_deserialize::Event<T>>>::new(move _28, move _8) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _29 = <std::result::Result<response::Response<Vec<move_deserialize::Event<T>>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _27) -> [return: bb27, unwind: bb22];
    }

    bb19: {
        _29 = std::result::Result::<response::Response<Vec<move_deserialize::Event<T>>>, error::Error>::Ok(move _23);
        goto -> bb20;
    }

    bb20: {
        _0 = Poll::<std::result::Result<response::Response<Vec<move_deserialize::Event<T>>>, error::Error>>::Ready(move _29);
        _41 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6});
        discriminant((*_41)) = 1;
        return;
    }

    bb21 (cleanup): {
        _42 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6});
        drop((((*_42) as variant#3).0: {async fn body@sdk/client/src/client.rs:303:52: 306:6})) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        _43 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:326:42: 335:6});
        discriminant((*_43)) = 2;
        resume;
    }

    bb23: {
        _30 = move _2;
        goto -> bb4;
    }

    bb24: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb24, unwind continue];
    }

    bb25: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb25, unwind continue];
    }

    bb26: {
        goto -> bb20;
    }

    bb27: {
        goto -> bb20;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_deserialized_resource(_1: &client::Client, _2: AccountAddress) -> {async fn body@sdk/client/src/client.rs:342:38: 351:6} {
    debug self => _1;
    debug address => _2;
    let mut _0: {async fn body@sdk/client/src/client.rs:342:38: 351:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:342:38: 351:6 (#0)} { self: _1, address: _2 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::get_deserialized_resource::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:342:38: 351:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<std::option::Option<T>>, error::Error>> {
    debug _task_context => _29;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6})).0: &client::Client);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6})).1: diem_types::PeerId);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::option::Option<T>>, error::Error>>;
    let _3: &client::Client;
    let mut _7: (diem_json_rpc_types::views::AccountStateWithProofView, state::State);
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<diem_json_rpc_types::views::AccountStateWithProofView>>;
    let mut _9: {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _10: {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _11: std::option::Option<u64>;
    let mut _12: std::option::Option<u64>;
    let mut _13: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::AccountStateWithProofView>, error::Error>>;
    let mut _14: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:257:54: 264:6}>;
    let mut _15: &mut {async fn body@sdk/client/src/client.rs:257:54: 264:6};
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: isize;
    let mut _19: isize;
    let mut _22: response::Response<std::option::Option<T>>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::option::Option<T>>;
    let mut _24: std::result::Result<std::option::Option<T>, error::Error>;
    let mut _25: isize;
    let mut _28: std::result::Result<response::Response<std::option::Option<T>>, error::Error>;
    let mut _29: &mut std::task::Context<'_>;
    let mut _30: u32;
    let mut _31: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6};
    let mut _32: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6};
    let mut _33: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6};
    let mut _34: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6};
    let mut _35: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6};
    let mut _36: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6};
    let mut _37: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6};
    let mut _38: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6};
    let mut _39: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6};
    let mut _40: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::PeerId;
        scope 2 {
            debug address => _4;
            let _5: diem_json_rpc_types::views::AccountStateWithProofView;
            let _6: state::State;
            let _20: std::result::Result<std::convert::Infallible, error::Error>;
            let _21: response::Response<diem_json_rpc_types::views::AccountStateWithProofView>;
            scope 3 {
                debug account => _5;
                debug state => _6;
                let _26: std::result::Result<std::convert::Infallible, error::Error>;
                let _27: std::option::Option<T>;
                scope 11 {
                    debug residual => _26;
                    scope 12 {
                    }
                }
                scope 13 {
                    debug val => _27;
                    scope 14 {
                    }
                }
            }
            scope 4 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6})) as variant#3).0: {async fn body@sdk/client/src/client.rs:257:54: 264:6});
                let _18: std::result::Result<response::Response<diem_json_rpc_types::views::AccountStateWithProofView>, error::Error>;
                scope 5 {
                }
                scope 6 {
                    debug result => _18;
                }
            }
            scope 7 {
                debug residual => _20;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _21;
                scope 10 {
                }
            }
        }
    }

    bb0: {
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6});
        _30 = discriminant((*_31));
        switchInt(move _30) -> [0: bb1, 1: bb25, 2: bb24, 3: bb23, otherwise: bb8];
    }

    bb1: {
        _29 = move _2;
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6});
        _3 = ((*_32).0: &client::Client);
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6});
        _4 = ((*_33).1: diem_types::PeerId);
        _11 = std::option::Option::<u64>::None;
        _12 = std::option::Option::<u64>::None;
        _10 = client::Client::get_account_state_with_proof(_3, _4, move _11, move _12) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _9 = <{async fn body@sdk/client/src/client.rs:257:54: 264:6} as std::future::IntoFuture>::into_future(move _10) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6});
        (((*_34) as variant#3).0: {async fn body@sdk/client/src/client.rs:257:54: 264:6}) = move _9;
        goto -> bb4;
    }

    bb4: {
        _35 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6});
        _15 = &mut (((*_35) as variant#3).0: {async fn body@sdk/client/src/client.rs:257:54: 264:6});
        _14 = Pin::<&mut {async fn body@sdk/client/src/client.rs:257:54: 264:6}>::new_unchecked(_15) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        _16 = _29;
        _13 = <{async fn body@sdk/client/src/client.rs:257:54: 264:6} as futures::Future>::poll(move _14, _16) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _17 = discriminant(_13);
        switchInt(move _17) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<T>>, error::Error>>::Pending;
        _36 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6});
        discriminant((*_36)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _18 = move ((_13 as Ready).0: std::result::Result<response::Response<diem_json_rpc_types::views::AccountStateWithProofView>, error::Error>);
        _37 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6});
        drop((((*_37) as variant#3).0: {async fn body@sdk/client/src/client.rs:257:54: 264:6})) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        _8 = <std::result::Result<response::Response<AccountStateWithProofView>, error::Error> as Try>::branch(move _18) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _19 = discriminant(_8);
        switchInt(move _19) -> [0: bb12, 1: bb13, otherwise: bb8];
    }

    bb12: {
        _21 = move ((_8 as Continue).0: response::Response<diem_json_rpc_types::views::AccountStateWithProofView>);
        _7 = response::Response::<AccountStateWithProofView>::into_parts(move _21) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _20 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _28 = <std::result::Result<response::Response<std::option::Option<T>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _20) -> [return: bb26, unwind: bb22];
    }

    bb14: {
        _5 = move (_7.0: diem_json_rpc_types::views::AccountStateWithProofView);
        _6 = move (_7.1: state::State);
        _24 = get_resource::<T>(move _5) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        _23 = <std::result::Result<std::option::Option<T>, error::Error> as Try>::branch(move _24) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb17, 1: bb18, otherwise: bb8];
    }

    bb17: {
        _27 = move ((_23 as Continue).0: std::option::Option<T>);
        _22 = response::Response::<std::option::Option<T>>::new(move _27, move _6) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _26 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _28 = <std::result::Result<response::Response<std::option::Option<T>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _26) -> [return: bb27, unwind: bb22];
    }

    bb19: {
        _28 = std::result::Result::<response::Response<std::option::Option<T>>, error::Error>::Ok(move _22);
        goto -> bb20;
    }

    bb20: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<T>>, error::Error>>::Ready(move _28);
        _38 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6});
        discriminant((*_38)) = 1;
        return;
    }

    bb21 (cleanup): {
        _39 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6});
        drop((((*_39) as variant#3).0: {async fn body@sdk/client/src/client.rs:257:54: 264:6})) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        _40 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:342:38: 351:6});
        discriminant((*_40)) = 2;
        resume;
    }

    bb23: {
        _29 = move _2;
        goto -> bb4;
    }

    bb24: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb24, unwind continue];
    }

    bb25: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb25, unwind continue];
    }

    bb26: {
        goto -> bb20;
    }

    bb27: {
        goto -> bb20;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::send(_1: &client::Client, _2: request::MethodRequest) -> {async fn body@sdk/client/src/client.rs:357:94: 363:6} {
    debug self => _1;
    debug request => _2;
    let mut _0: {async fn body@sdk/client/src/client.rs:357:94: 363:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:357:94: 363:6 (#0)} { self: _1, request: move _2 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::send::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:357:94: 363:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<T>, error::Error>> {
    debug _task_context => _16;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6})).0: &client::Client);
    debug request => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6})).1: request::MethodRequest);
    let mut _0: std::task::Poll<std::result::Result<response::Response<T>, error::Error>>;
    let mut _4: {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _5: {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _6: &retry::Retry;
    let mut _7: {closure@sdk/client/src/client.rs:361:26: 361:28};
    let mut _8: &&client::Client;
    let mut _9: &request::JsonRpcRequest;
    let mut _10: std::task::Poll<std::result::Result<response::Response<T>, error::Error>>;
    let mut _11: std::pin::Pin<&mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10}>;
    let mut _12: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: u32;
    let mut _18: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _19: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _20: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _21: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _22: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _23: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _24: &client::Client;
    let mut _25: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _26: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _27: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _28: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _29: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _30: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _31: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _32: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _33: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _34: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _35: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    let mut _36: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6})) as variant#3).0: &client::Client);
        let _3: request::MethodRequest;
        scope 2 {
            debug request => _3;
            scope 3 {
                debug request => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6})) as variant#3).1: request::JsonRpcRequest);
                scope 4 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6})) as variant#3).2: {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
                    let _15: std::result::Result<response::Response<T>, error::Error>;
                    scope 5 {
                    }
                    scope 6 {
                        debug result => _15;
                    }
                }
            }
        }
    }

    bb0: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _17 = discriminant((*_18));
        switchInt(move _17) -> [0: bb1, 1: bb19, 2: bb18, 3: bb17, otherwise: bb9];
    }

    bb1: {
        _16 = move _2;
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        (((*_19) as variant#3).0: &client::Client) = ((*_20).0: &client::Client);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _3 = move ((*_21).1: request::MethodRequest);
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        (((*_22) as variant#3).1: request::JsonRpcRequest) = request::JsonRpcRequest::new(move _3) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _24 = deref_copy (((*_23) as variant#3).0: &client::Client);
        _6 = &((*_24).3: retry::Retry);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _8 = &(((*_25) as variant#3).0: &client::Client);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _9 = &(((*_26) as variant#3).1: request::JsonRpcRequest);
        _7 = {closure@sdk/client/src/client.rs:361:26: 361:28} { self: move _8, request: move _9 };
        _5 = retry::Retry::retry_async::<response::Response<T>, {closure@sdk/client/src/client.rs:361:26: 361:28}, {async block@sdk/client/src/client.rs:361:29: 361:85}>(move _6, move _7) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _4 = <{async fn body@sdk/client/src/retry.rs:65:9: 77:10} as std::future::IntoFuture>::into_future(move _5) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        (((*_27) as variant#3).2: {async fn body@sdk/client/src/retry.rs:65:9: 77:10}) = move _4;
        goto -> bb5;
    }

    bb5: {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        _12 = &mut (((*_28) as variant#3).2: {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _11 = Pin::<&mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10}>::new_unchecked(_12) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _13 = _16;
        _10 = <{async fn body@sdk/client/src/retry.rs:65:9: 77:10} as futures::Future>::poll(move _11, _13) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<T>, error::Error>>::Pending;
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        discriminant((*_29)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = move ((_10 as Ready).0: std::result::Result<response::Response<T>, error::Error>);
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        drop((((*_30) as variant#3).2: {async fn body@sdk/client/src/retry.rs:65:9: 77:10})) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        drop((((*_31) as variant#3).1: request::JsonRpcRequest)) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _0 = Poll::<std::result::Result<response::Response<T>, error::Error>>::Ready(move _15);
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        discriminant((*_32)) = 1;
        return;
    }

    bb13 (cleanup): {
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        drop((((*_33) as variant#3).2: {async fn body@sdk/client/src/retry.rs:65:9: 77:10})) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        drop((((*_34) as variant#3).1: request::JsonRpcRequest)) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        _35 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        drop((((*_35) as variant#3).1: request::JsonRpcRequest)) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        _36 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:357:94: 363:6});
        discriminant((*_36)) = 2;
        resume;
    }

    bb17: {
        _16 = move _2;
        goto -> bb5;
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb18, unwind continue];
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb19, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::send::{closure#0}::{closure#0}(_1: &{closure@sdk/client/src/client.rs:361:26: 361:28}) -> {async block@sdk/client/src/client.rs:361:29: 361:85} {
    debug self => (*((*_1).0: &&client::Client));
    debug request => (*((*_1).1: &request::JsonRpcRequest));
    let mut _0: {async block@sdk/client/src/client.rs:361:29: 361:85};
    let mut _2: &&client::Client;
    let mut _3: &request::JsonRpcRequest;

    bb0: {
        _2 = deref_copy ((*_1).0: &&client::Client);
        _3 = deref_copy ((*_1).1: &request::JsonRpcRequest);
        _0 = {coroutine@sdk/client/src/client.rs:361:29: 361:85 (#0)} { self: _2, request: _3 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::send::{closure#0}::{closure#0}::{closure#0}(_1: Pin<&mut {async block@sdk/client/src/client.rs:361:29: 361:85}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<T>, error::Error>> {
    debug _task_context => _14;
    debug self => (*((*(_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85})).0: &&client::Client));
    debug request => (*((*(_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85})).1: &request::JsonRpcRequest));
    let mut _0: std::task::Poll<std::result::Result<response::Response<T>, error::Error>>;
    let mut _3: {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _4: {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _5: std::task::Poll<std::result::Result<response::Response<T>, error::Error>>;
    let mut _6: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:369:30: 381:6}>;
    let mut _7: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _8: &mut std::task::Context<'_>;
    let mut _9: isize;
    let mut _11: &&client::Client;
    let mut _12: &client::Client;
    let mut _13: &request::JsonRpcRequest;
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: u32;
    let mut _16: &mut {async block@sdk/client/src/client.rs:361:29: 361:85};
    let mut _17: &mut {async block@sdk/client/src/client.rs:361:29: 361:85};
    let mut _18: &mut {async block@sdk/client/src/client.rs:361:29: 361:85};
    let mut _19: &mut {async block@sdk/client/src/client.rs:361:29: 361:85};
    let mut _20: &mut {async block@sdk/client/src/client.rs:361:29: 361:85};
    let mut _21: &mut {async block@sdk/client/src/client.rs:361:29: 361:85};
    let mut _22: &mut {async block@sdk/client/src/client.rs:361:29: 361:85};
    let mut _23: &mut {async block@sdk/client/src/client.rs:361:29: 361:85};
    let mut _24: &mut {async block@sdk/client/src/client.rs:361:29: 361:85};
    let mut _25: &mut {async block@sdk/client/src/client.rs:361:29: 361:85};
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85})) as variant#3).0: {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        let _10: std::result::Result<response::Response<T>, error::Error>;
        scope 2 {
        }
        scope 3 {
            debug result => _10;
        }
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85});
        _15 = discriminant((*_16));
        switchInt(move _15) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb8];
    }

    bb1: {
        _14 = move _2;
        _17 = deref_copy (_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85});
        _11 = deref_copy ((*_17).0: &&client::Client);
        _12 = deref_copy (*_11);
        _18 = deref_copy (_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85});
        _13 = deref_copy ((*_18).1: &request::JsonRpcRequest);
        _4 = client::Client::send_without_retry::<T>(_12, _13, const false) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _3 = <{async fn body@sdk/client/src/client.rs:369:30: 381:6} as std::future::IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _19 = deref_copy (_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85});
        (((*_19) as variant#3).0: {async fn body@sdk/client/src/client.rs:369:30: 381:6}) = move _3;
        goto -> bb4;
    }

    bb4: {
        _20 = deref_copy (_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85});
        _7 = &mut (((*_20) as variant#3).0: {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _6 = Pin::<&mut {async fn body@sdk/client/src/client.rs:369:30: 381:6}>::new_unchecked(_7) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _8 = _14;
        _5 = <{async fn body@sdk/client/src/client.rs:369:30: 381:6} as futures::Future>::poll(move _6, _8) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<std::result::Result<response::Response<T>, error::Error>>::Pending;
        _21 = deref_copy (_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85});
        discriminant((*_21)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _10 = move ((_5 as Ready).0: std::result::Result<response::Response<T>, error::Error>);
        _22 = deref_copy (_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85});
        drop((((*_22) as variant#3).0: {async fn body@sdk/client/src/client.rs:369:30: 381:6})) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        _0 = Poll::<std::result::Result<response::Response<T>, error::Error>>::Ready(move _10);
        _23 = deref_copy (_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85});
        discriminant((*_23)) = 1;
        return;
    }

    bb11 (cleanup): {
        _24 = deref_copy (_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85});
        drop((((*_24) as variant#3).0: {async fn body@sdk/client/src/client.rs:369:30: 381:6})) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        _25 = deref_copy (_1.0: &mut {async block@sdk/client/src/client.rs:361:29: 361:85});
        discriminant((*_25)) = 2;
        resume;
    }

    bb13: {
        _14 = move _2;
        goto -> bb4;
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb14, unwind continue];
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb15, unwind continue];
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::send_without_retry(_1: &client::Client, _2: &request::JsonRpcRequest, _3: bool) -> {async fn body@sdk/client/src/client.rs:369:30: 381:6} {
    debug self => _1;
    debug request => _2;
    debug ignore_stale => _3;
    let mut _0: {async fn body@sdk/client/src/client.rs:369:30: 381:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:369:30: 381:6 (#0)} { self: _1, request: _2, ignore_stale: _3 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::send_without_retry::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:369:30: 381:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<T>, error::Error>> {
    debug _task_context => _46;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6})).0: &client::Client);
    debug request => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6})).1: &request::JsonRpcRequest);
    debug ignore_stale => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6})).2: bool);
    let mut _0: std::task::Poll<std::result::Result<response::Response<T>, error::Error>>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _5: {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _6: {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let _7: &&request::JsonRpcRequest;
    let mut _8: std::task::Poll<std::result::Result<diem_json_rpc_types::response::JsonRpcResponse, error::Error>>;
    let mut _9: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:396:92: 411:6}>;
    let mut _10: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _11: &mut std::task::Context<'_>;
    let mut _12: isize;
    let mut _14: isize;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, (u64, state::State, serde_json::Value)>;
    let mut _21: std::result::Result<(u64, state::State, serde_json::Value), error::Error>;
    let _22: &state::StateManager;
    let mut _23: std::option::Option<&state::State>;
    let mut _24: &std::option::Option<state::State>;
    let _25: &diem_json_rpc_types::response::JsonRpcResponse;
    let mut _26: bool;
    let mut _27: isize;
    let mut _30: bool;
    let mut _31: u64;
    let mut _32: error::Error;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, T>;
    let mut _35: std::result::Result<T, error::Error>;
    let mut _36: std::result::Result<T, serde_json::Error>;
    let mut _37: serde_json::Value;
    let mut _38: isize;
    let mut _41: response::Response<T>;
    let mut _42: T;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: std::result::Result<response::Response<T>, error::Error>;
    let mut _46: &mut std::task::Context<'_>;
    let mut _47: u32;
    let mut _48: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _49: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _50: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _51: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _52: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _53: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _54: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _55: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _56: &client::Client;
    let mut _57: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _58: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _59: &client::Client;
    let mut _60: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _61: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _62: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _63: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _64: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _65: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _66: &client::Client;
    let mut _67: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _68: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _69: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _70: &request::JsonRpcRequest;
    let mut _71: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _72: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    let mut _73: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6})) as variant#3).0: &client::Client);
        scope 2 {
            debug request => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6})) as variant#3).1: &request::JsonRpcRequest);
            scope 3 {
                debug ignore_stale => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6})) as variant#3).2: bool);
                scope 4 {
                    debug req_state => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6})) as variant#3).3: std::option::Option<state::State>);
                    let _3: diem_json_rpc_types::response::JsonRpcResponse;
                    let _15: std::result::Result<std::convert::Infallible, error::Error>;
                    let _16: diem_json_rpc_types::response::JsonRpcResponse;
                    scope 5 {
                        debug resp => _3;
                        let _17: u64;
                        let _18: state::State;
                        let _19: serde_json::Value;
                        let _28: std::result::Result<std::convert::Infallible, error::Error>;
                        let _29: (u64, state::State, serde_json::Value);
                        scope 13 {
                            debug id => _17;
                            debug state => _18;
                            debug result => _19;
                            let _33: T;
                            let _39: std::result::Result<std::convert::Infallible, error::Error>;
                            let _40: T;
                            scope 18 {
                                debug inner => _33;
                            }
                            scope 19 {
                                debug residual => _39;
                                scope 20 {
                                }
                            }
                            scope 21 {
                                debug val => _40;
                                scope 22 {
                                }
                            }
                        }
                        scope 14 {
                            debug residual => _28;
                            scope 15 {
                            }
                        }
                        scope 16 {
                            debug val => _29;
                            scope 17 {
                            }
                        }
                    }
                    scope 6 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6})) as variant#3).4: {async fn body@sdk/client/src/client.rs:396:92: 411:6});
                        let _13: std::result::Result<diem_json_rpc_types::response::JsonRpcResponse, error::Error>;
                        scope 7 {
                        }
                        scope 8 {
                            debug result => _13;
                        }
                    }
                    scope 9 {
                        debug residual => _15;
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => _16;
                        scope 12 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _48 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _47 = discriminant((*_48));
        switchInt(move _47) -> [0: bb1, 1: bb47, 2: bb46, 3: bb45, otherwise: bb9];
    }

    bb1: {
        _46 = move _2;
        _43 = const false;
        _44 = const false;
        _49 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _50 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        (((*_49) as variant#3).0: &client::Client) = ((*_50).0: &client::Client);
        _51 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _52 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        (((*_51) as variant#3).1: &request::JsonRpcRequest) = ((*_52).1: &request::JsonRpcRequest);
        _53 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _54 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        (((*_53) as variant#3).2: bool) = ((*_54).2: bool);
        _55 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _56 = deref_copy (((*_55) as variant#3).0: &client::Client);
        _57 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        (((*_57) as variant#3).3: std::option::Option<state::State>) = client::Client::last_known_state(_56) -> [return: bb2, unwind: bb44];
    }

    bb2: {
        _58 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _59 = deref_copy (((*_58) as variant#3).0: &client::Client);
        _60 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _7 = &(((*_60) as variant#3).1: &request::JsonRpcRequest);
        _6 = client::Client::send_impl::<&request::JsonRpcRequest, JsonRpcResponse>(_59, _7) -> [return: bb3, unwind: bb44];
    }

    bb3: {
        _5 = <{async fn body@sdk/client/src/client.rs:396:92: 411:6} as std::future::IntoFuture>::into_future(move _6) -> [return: bb4, unwind: bb44];
    }

    bb4: {
        _61 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        (((*_61) as variant#3).4: {async fn body@sdk/client/src/client.rs:396:92: 411:6}) = move _5;
        goto -> bb5;
    }

    bb5: {
        _62 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _10 = &mut (((*_62) as variant#3).4: {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        _9 = Pin::<&mut {async fn body@sdk/client/src/client.rs:396:92: 411:6}>::new_unchecked(_10) -> [return: bb6, unwind: bb38];
    }

    bb6: {
        _11 = _46;
        _8 = <{async fn body@sdk/client/src/client.rs:396:92: 411:6} as futures::Future>::poll(move _9, _11) -> [return: bb7, unwind: bb38];
    }

    bb7: {
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<T>, error::Error>>::Pending;
        _63 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        discriminant((*_63)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _13 = move ((_8 as Ready).0: std::result::Result<diem_json_rpc_types::response::JsonRpcResponse, error::Error>);
        _64 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        drop((((*_64) as variant#3).4: {async fn body@sdk/client/src/client.rs:396:92: 411:6})) -> [return: bb11, unwind: bb44];
    }

    bb11: {
        _4 = <std::result::Result<JsonRpcResponse, error::Error> as Try>::branch(move _13) -> [return: bb12, unwind: bb44];
    }

    bb12: {
        _14 = discriminant(_4);
        switchInt(move _14) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _16 = move ((_4 as Continue).0: diem_json_rpc_types::response::JsonRpcResponse);
        _3 = move _16;
        _65 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _66 = deref_copy (((*_65) as variant#3).0: &client::Client);
        _22 = &((*_66).2: state::StateManager);
        _67 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _24 = &(((*_67) as variant#3).3: std::option::Option<state::State>);
        _23 = std::option::Option::<state::State>::as_ref(move _24) -> [return: bb15, unwind: bb37];
    }

    bb14: {
        _15 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _45 = <std::result::Result<response::Response<T>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _15) -> [return: bb48, unwind: bb44];
    }

    bb15: {
        _25 = &_3;
        _68 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _26 = (((*_68) as variant#3).2: bool);
        _21 = validate(_22, move _23, _25, move _26) -> [return: bb16, unwind: bb37];
    }

    bb16: {
        _20 = <std::result::Result<(u64, state::State, SerdeValue), error::Error> as Try>::branch(move _21) -> [return: bb17, unwind: bb37];
    }

    bb17: {
        _27 = discriminant(_20);
        switchInt(move _27) -> [0: bb18, 1: bb19, otherwise: bb9];
    }

    bb18: {
        _29 = move ((_20 as Continue).0: (u64, state::State, serde_json::Value));
        _17 = (_29.0: u64);
        _18 = move (_29.1: state::State);
        _43 = const true;
        _19 = move (_29.2: serde_json::Value);
        _69 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        _70 = deref_copy (((*_69) as variant#3).1: &request::JsonRpcRequest);
        _31 = request::JsonRpcRequest::id(_70) -> [return: bb20, unwind: bb43];
    }

    bb19: {
        _28 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _45 = <std::result::Result<response::Response<T>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _28) -> [return: bb49, unwind: bb37];
    }

    bb20: {
        _30 = Ne(move _31, _17);
        switchInt(move _30) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        _32 = error::Error::rpc_response::<&str>(const "invalid response id") -> [return: bb22, unwind: bb43];
    }

    bb22: {
        _45 = std::result::Result::<response::Response<T>, error::Error>::Err(move _32);
        goto -> bb40;
    }

    bb23: {
        _43 = const false;
        _37 = move _19;
        _36 = from_value::<T>(move _37) -> [return: bb24, unwind: bb35];
    }

    bb24: {
        _35 = std::result::Result::<T, serde_json::Error>::map_err::<error::Error, fn(serde_json::Error) -> error::Error {error::Error::decode::<serde_json::Error>}>(move _36, error::Error::decode::<serde_json::Error>) -> [return: bb25, unwind: bb35];
    }

    bb25: {
        _34 = <std::result::Result<T, error::Error> as Try>::branch(move _35) -> [return: bb26, unwind: bb35];
    }

    bb26: {
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb27, 1: bb28, otherwise: bb9];
    }

    bb27: {
        _40 = move ((_34 as Continue).0: T);
        _44 = const true;
        _33 = move _40;
        _44 = const false;
        _42 = move _33;
        _41 = response::Response::<T>::new(move _42, move _18) -> [return: bb30, unwind: bb34];
    }

    bb28: {
        _39 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _45 = <std::result::Result<response::Response<T>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _39) -> [return: bb29, unwind: bb35];
    }

    bb29: {
        _44 = const false;
        goto -> bb40;
    }

    bb30: {
        _45 = std::result::Result::<response::Response<T>, error::Error>::Ok(move _41);
        _44 = const false;
        _43 = const false;
        drop(_3) -> [return: bb33, unwind: bb44];
    }

    bb31: {
        _43 = const false;
        goto -> bb32;
    }

    bb32: {
        drop(_3) -> [return: bb33, unwind: bb44];
    }

    bb33: {
        _0 = Poll::<std::result::Result<response::Response<T>, error::Error>>::Ready(move _45);
        _71 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        discriminant((*_71)) = 1;
        return;
    }

    bb34 (cleanup): {
        switchInt(_44) -> [0: bb35, otherwise: bb41];
    }

    bb35 (cleanup): {
        _44 = const false;
        goto -> bb43;
    }

    bb36 (cleanup): {
        _43 = const false;
        goto -> bb37;
    }

    bb37 (cleanup): {
        drop(_3) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        _72 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        drop((((*_72) as variant#3).4: {async fn body@sdk/client/src/client.rs:396:92: 411:6})) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb39: {
        drop(_19) -> [return: bb31, unwind: bb36];
    }

    bb40: {
        switchInt(_43) -> [0: bb31, otherwise: bb39];
    }

    bb41 (cleanup): {
        drop(_33) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_19) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        switchInt(_43) -> [0: bb36, otherwise: bb42];
    }

    bb44 (cleanup): {
        _73 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:369:30: 381:6});
        discriminant((*_73)) = 2;
        resume;
    }

    bb45: {
        _46 = move _2;
        goto -> bb5;
    }

    bb46: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb46, unwind continue];
    }

    bb47: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb47, unwind continue];
    }

    bb48: {
        goto -> bb33;
    }

    bb49: {
        goto -> bb32;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::send_batch(_1: &client::Client, _2: Vec<request::MethodRequest>) -> {async fn body@sdk/client/src/client.rs:386:56: 394:6} {
    debug self => _1;
    debug requests => _2;
    let mut _0: {async fn body@sdk/client/src/client.rs:386:56: 394:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:386:56: 394:6 (#0)} { self: _1, requests: move _2 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::send_batch::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:386:56: 394:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>> {
    debug _task_context => _36;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6})).0: &client::Client);
    debug requests => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6})).1: std::vec::Vec<request::MethodRequest>);
    let mut _0: std::task::Poll<std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>>;
    let mut _4: std::iter::Map<std::vec::IntoIter<request::MethodRequest>, fn(request::MethodRequest) -> request::JsonRpcRequest {request::JsonRpcRequest::new}>;
    let mut _5: std::vec::IntoIter<request::MethodRequest>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, BatchResponse>;
    let mut _8: {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _9: {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let _10: &std::vec::Vec<request::JsonRpcRequest>;
    let mut _11: std::task::Poll<std::result::Result<BatchResponse, error::Error>>;
    let mut _12: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:396:92: 411:6}>;
    let mut _13: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: isize;
    let mut _17: isize;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>>;
    let mut _22: std::result::Result<std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>, error::Error>;
    let mut _23: BatchResponse;
    let mut _24: isize;
    let _27: &state::StateManager;
    let mut _28: std::option::Option<&state::State>;
    let mut _29: &std::option::Option<state::State>;
    let _30: &[request::JsonRpcRequest];
    let _31: &std::vec::Vec<request::JsonRpcRequest>;
    let mut _32: std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>;
    let mut _36: &mut std::task::Context<'_>;
    let mut _37: u32;
    let mut _38: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _39: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _40: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _41: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _42: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _43: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _44: &client::Client;
    let mut _45: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _46: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _47: &client::Client;
    let mut _48: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _49: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _50: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _51: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _52: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _53: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _54: &client::Client;
    let mut _55: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _56: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _57: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _58: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _59: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _60: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _61: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _62: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _63: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    let mut _64: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6})) as variant#3).0: &client::Client);
        let _3: std::vec::Vec<request::MethodRequest>;
        scope 2 {
            debug requests => _3;
            scope 3 {
                debug request => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6})) as variant#3).1: std::vec::Vec<request::JsonRpcRequest>);
                scope 4 {
                    debug req_state => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6})) as variant#3).2: std::option::Option<state::State>);
                    let _6: BatchResponse;
                    let _18: std::result::Result<std::convert::Infallible, error::Error>;
                    let _19: BatchResponse;
                    scope 5 {
                        debug resp => _6;
                        let _20: std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
                        let _25: std::result::Result<std::convert::Infallible, error::Error>;
                        let _26: std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
                        scope 13 {
                            debug resp => _20;
                        }
                        scope 14 {
                            debug residual => _25;
                            scope 15 {
                            }
                        }
                        scope 16 {
                            debug val => _26;
                            scope 17 {
                            }
                        }
                    }
                    scope 6 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6})) as variant#3).3: {async fn body@sdk/client/src/client.rs:396:92: 411:6});
                        let _16: std::result::Result<BatchResponse, error::Error>;
                        scope 7 {
                        }
                        scope 8 {
                            debug result => _16;
                        }
                    }
                    scope 9 {
                        debug residual => _18;
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => _19;
                        scope 12 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _38 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        _37 = discriminant((*_38));
        switchInt(move _37) -> [0: bb1, 1: bb41, 2: bb40, 3: bb39, otherwise: bb12];
    }

    bb1: {
        _36 = move _2;
        _34 = const false;
        _33 = const false;
        _39 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        _40 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        (((*_39) as variant#3).0: &client::Client) = ((*_40).0: &client::Client);
        _41 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        _3 = move ((*_41).1: std::vec::Vec<request::MethodRequest>);
        _5 = <Vec<request::MethodRequest> as IntoIterator>::into_iter(move _3) -> [return: bb2, unwind: bb36];
    }

    bb2: {
        _4 = <std::vec::IntoIter<request::MethodRequest> as Iterator>::map::<request::JsonRpcRequest, fn(request::MethodRequest) -> request::JsonRpcRequest {request::JsonRpcRequest::new}>(move _5, request::JsonRpcRequest::new) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        _42 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        (((*_42) as variant#3).1: std::vec::Vec<request::JsonRpcRequest>) = <std::iter::Map<std::vec::IntoIter<request::MethodRequest>, fn(request::MethodRequest) -> request::JsonRpcRequest {request::JsonRpcRequest::new}> as Iterator>::collect::<Vec<request::JsonRpcRequest>>(move _4) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        _43 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        _44 = deref_copy (((*_43) as variant#3).0: &client::Client);
        _45 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        (((*_45) as variant#3).2: std::option::Option<state::State>) = client::Client::last_known_state(_44) -> [return: bb5, unwind: bb35];
    }

    bb5: {
        _46 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        _47 = deref_copy (((*_46) as variant#3).0: &client::Client);
        _48 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        _10 = &(((*_48) as variant#3).1: std::vec::Vec<request::JsonRpcRequest>);
        _9 = client::Client::send_impl::<Vec<request::JsonRpcRequest>, BatchResponse>(_47, _10) -> [return: bb6, unwind: bb34];
    }

    bb6: {
        _8 = <{async fn body@sdk/client/src/client.rs:396:92: 411:6} as std::future::IntoFuture>::into_future(move _9) -> [return: bb7, unwind: bb34];
    }

    bb7: {
        _49 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        (((*_49) as variant#3).3: {async fn body@sdk/client/src/client.rs:396:92: 411:6}) = move _8;
        goto -> bb8;
    }

    bb8: {
        _50 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        _13 = &mut (((*_50) as variant#3).3: {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        _12 = Pin::<&mut {async fn body@sdk/client/src/client.rs:396:92: 411:6}>::new_unchecked(_13) -> [return: bb9, unwind: bb33];
    }

    bb9: {
        _14 = _36;
        _11 = <{async fn body@sdk/client/src/client.rs:396:92: 411:6} as futures::Future>::poll(move _12, _14) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb13, 1: bb11, otherwise: bb12];
    }

    bb11: {
        _0 = Poll::<std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>>::Pending;
        _51 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        discriminant((*_51)) = 3;
        return;
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _16 = move ((_11 as Ready).0: std::result::Result<BatchResponse, error::Error>);
        _52 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        drop((((*_52) as variant#3).3: {async fn body@sdk/client/src/client.rs:396:92: 411:6})) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        _7 = <std::result::Result<BatchResponse, error::Error> as Try>::branch(move _16) -> [return: bb15, unwind: bb34];
    }

    bb15: {
        _17 = discriminant(_7);
        switchInt(move _17) -> [0: bb16, 1: bb17, otherwise: bb12];
    }

    bb16: {
        _19 = move ((_7 as Continue).0: BatchResponse);
        _34 = const true;
        _6 = move _19;
        _34 = const false;
        _23 = move _6;
        _22 = BatchResponse::success(move _23) -> [return: bb18, unwind: bb32];
    }

    bb17: {
        _18 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _35 = <std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _18) -> [return: bb42, unwind: bb34];
    }

    bb18: {
        _21 = <std::result::Result<Vec<JsonRpcResponse>, error::Error> as Try>::branch(move _22) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        _24 = discriminant(_21);
        switchInt(move _24) -> [0: bb20, 1: bb21, otherwise: bb12];
    }

    bb20: {
        _26 = move ((_21 as Continue).0: std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>);
        _33 = const true;
        _20 = move _26;
        _53 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        _54 = deref_copy (((*_53) as variant#3).0: &client::Client);
        _27 = &((*_54).2: state::StateManager);
        _55 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        _29 = &(((*_55) as variant#3).2: std::option::Option<state::State>);
        _28 = std::option::Option::<state::State>::as_ref(move _29) -> [return: bb23, unwind: bb30];
    }

    bb21: {
        _25 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _35 = <std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _25) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        _33 = const false;
        goto -> bb26;
    }

    bb23: {
        _56 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        _31 = &(((*_56) as variant#3).1: std::vec::Vec<request::JsonRpcRequest>);
        _30 = <Vec<request::JsonRpcRequest> as Deref>::deref(_31) -> [return: bb24, unwind: bb28];
    }

    bb24: {
        _33 = const false;
        _32 = move _20;
        _35 = validate_batch(_27, move _28, _30, move _32) -> [return: bb25, unwind: bb28];
    }

    bb25: {
        _33 = const false;
        _34 = const false;
        _57 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        drop((((*_57) as variant#3).1: std::vec::Vec<request::JsonRpcRequest>)) -> [return: bb27, unwind: bb36];
    }

    bb26: {
        _34 = const false;
        _58 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        drop((((*_58) as variant#3).1: std::vec::Vec<request::JsonRpcRequest>)) -> [return: bb27, unwind: bb36];
    }

    bb27: {
        _0 = Poll::<std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>>::Ready(move _35);
        _59 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        discriminant((*_59)) = 1;
        return;
    }

    bb28 (cleanup): {
        switchInt(_33) -> [0: bb29, otherwise: bb37];
    }

    bb29 (cleanup): {
        _33 = const false;
        _34 = const false;
        _60 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        drop((((*_60) as variant#3).1: std::vec::Vec<request::JsonRpcRequest>)) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_20) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        _33 = const false;
        _34 = const false;
        _61 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        drop((((*_61) as variant#3).1: std::vec::Vec<request::JsonRpcRequest>)) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        _33 = const false;
        switchInt(_34) -> [0: bb34, otherwise: bb38];
    }

    bb33 (cleanup): {
        _62 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        drop((((*_62) as variant#3).3: {async fn body@sdk/client/src/client.rs:396:92: 411:6})) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        _34 = const false;
        goto -> bb35;
    }

    bb35 (cleanup): {
        _63 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        drop((((*_63) as variant#3).1: std::vec::Vec<request::JsonRpcRequest>)) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        _64 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:386:56: 394:6});
        discriminant((*_64)) = 2;
        resume;
    }

    bb37 (cleanup): {
        drop(_20) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_6) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb39: {
        _36 = move _2;
        goto -> bb8;
    }

    bb40: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb40, unwind continue];
    }

    bb41: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb41, unwind continue];
    }

    bb42: {
        goto -> bb26;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::send_impl(_1: &client::Client, _2: &S) -> {async fn body@sdk/client/src/client.rs:396:92: 411:6} {
    debug self => _1;
    debug payload => _2;
    let mut _0: {async fn body@sdk/client/src/client.rs:396:92: 411:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/client.rs:396:92: 411:6 (#0)} { self: _1, payload: _2 };
        return;
    }
}

fn client::<impl at sdk/client/src/client.rs:40:1: 40:12>::send_impl::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/client.rs:396:92: 411:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<T, error::Error>> {
    debug _task_context => _44;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6})).0: &client::Client);
    debug payload => ((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6})).1: &S);
    let mut _0: std::task::Poll<std::result::Result<T, error::Error>>;
    let _3: &client::Client;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, reqwest::Response>;
    let mut _6: std::result::Result<reqwest::Response, error::Error>;
    let mut _7: reqwest::async_impl::client::Pending;
    let mut _8: reqwest::async_impl::client::Pending;
    let mut _9: reqwest::RequestBuilder;
    let mut _10: reqwest::RequestBuilder;
    let mut _11: reqwest::RequestBuilder;
    let mut _12: &reqwest::Client;
    let mut _13: &std::string::String;
    let mut _14: reqwest::header::HeaderName;
    let mut _15: std::task::Poll<std::result::Result<reqwest::Response, reqwest::Error>>;
    let mut _16: std::pin::Pin<&mut reqwest::async_impl::client::Pending>;
    let mut _17: &mut reqwest::async_impl::client::Pending;
    let mut _18: &mut std::task::Context<'_>;
    let mut _19: isize;
    let mut _21: isize;
    let mut _24: bool;
    let mut _25: &reqwest::StatusCode;
    let _26: reqwest::StatusCode;
    let mut _27: &reqwest::Response;
    let mut _28: error::Error;
    let mut _29: u16;
    let mut _30: &reqwest::StatusCode;
    let _31: reqwest::StatusCode;
    let mut _32: &reqwest::Response;
    let mut _33: {async fn body@reqwest::Response::json<T>::{closure#0}};
    let mut _34: {async fn body@reqwest::Response::json<T>::{closure#0}};
    let mut _35: reqwest::Response;
    let mut _36: std::task::Poll<std::result::Result<T, reqwest::Error>>;
    let mut _37: std::pin::Pin<&mut {async fn body@reqwest::Response::json<T>::{closure#0}}>;
    let mut _38: &mut {async fn body@reqwest::Response::json<T>::{closure#0}};
    let mut _39: &mut std::task::Context<'_>;
    let mut _40: isize;
    let mut _43: std::result::Result<T, error::Error>;
    let mut _44: &mut std::task::Context<'_>;
    let mut _45: u32;
    let mut _46: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _47: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _48: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _49: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _50: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _51: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _52: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _53: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _54: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _55: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _56: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _57: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _58: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _59: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _60: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _61: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _62: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _63: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _64: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _65: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    let mut _66: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6};
    scope 1 {
        debug self => _3;
        let _4: &S;
        scope 2 {
            debug payload => _4;
            let _22: std::result::Result<std::convert::Infallible, error::Error>;
            let _23: reqwest::Response;
            scope 3 {
                debug response => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6})) as variant#4).0: reqwest::Response);
                let mut _42: &u16;
                scope 11 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6})) as variant#4).1: {async fn body@reqwest::Response::json<T>::{closure#0}});
                    let _41: std::result::Result<T, reqwest::Error>;
                    scope 12 {
                    }
                    scope 13 {
                        debug result => _41;
                    }
                }
            }
            scope 4 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6})) as variant#3).0: reqwest::async_impl::client::Pending);
                let _20: std::result::Result<reqwest::Response, reqwest::Error>;
                scope 5 {
                }
                scope 6 {
                    debug result => _20;
                }
            }
            scope 7 {
                debug residual => _22;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _23;
                scope 10 {
                }
            }
        }
    }

    bb0: {
        _46 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        _45 = discriminant((*_46));
        switchInt(move _45) -> [0: bb1, 1: bb41, 2: bb40, 3: bb38, 4: bb39, otherwise: bb11];
    }

    bb1: {
        _44 = move _2;
        _47 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        _3 = ((*_47).0: &client::Client);
        _48 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        _4 = ((*_48).1: &S);
        _12 = &((*_3).1: reqwest::Client);
        _13 = &((*_3).0: std::string::String);
        _11 = reqwest::Client::post::<&std::string::String>(move _12, move _13) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        _10 = reqwest::RequestBuilder::json::<S>(move _11, _4) -> [return: bb3, unwind: bb37];
    }

    bb3: {
        _14 = const _;
        _9 = reqwest::RequestBuilder::header::<HeaderName, &str>(move _10, move _14, const _) -> [return: bb4, unwind: bb37];
    }

    bb4: {
        _8 = reqwest::RequestBuilder::send(move _9) -> [return: bb5, unwind: bb37];
    }

    bb5: {
        _7 = <reqwest::async_impl::client::Pending as std::future::IntoFuture>::into_future(move _8) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        _49 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        (((*_49) as variant#3).0: reqwest::async_impl::client::Pending) = move _7;
        goto -> bb7;
    }

    bb7: {
        _50 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        _17 = &mut (((*_50) as variant#3).0: reqwest::async_impl::client::Pending);
        _16 = Pin::<&mut reqwest::async_impl::client::Pending>::new_unchecked(_17) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        _18 = _44;
        _15 = <reqwest::async_impl::client::Pending as futures::Future>::poll(move _16, _18) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        _19 = discriminant(_15);
        switchInt(move _19) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _0 = Poll::<std::result::Result<T, error::Error>>::Pending;
        _51 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        discriminant((*_51)) = 3;
        return;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _20 = move ((_15 as Ready).0: std::result::Result<reqwest::Response, reqwest::Error>);
        _52 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        drop((((*_52) as variant#3).0: reqwest::async_impl::client::Pending)) -> [return: bb13, unwind: bb37];
    }

    bb13: {
        _6 = std::result::Result::<reqwest::Response, reqwest::Error>::map_err::<error::Error, fn(reqwest::Error) -> error::Error {error::Error::from_reqwest_error}>(move _20, error::Error::from_reqwest_error) -> [return: bb14, unwind: bb37];
    }

    bb14: {
        _5 = <std::result::Result<reqwest::Response, error::Error> as Try>::branch(move _6) -> [return: bb15, unwind: bb37];
    }

    bb15: {
        _21 = discriminant(_5);
        switchInt(move _21) -> [0: bb16, 1: bb17, otherwise: bb11];
    }

    bb16: {
        _23 = move ((_5 as Continue).0: reqwest::Response);
        _53 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        (((*_53) as variant#4).0: reqwest::Response) = move _23;
        _54 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        _27 = &(((*_54) as variant#4).0: reqwest::Response);
        _26 = reqwest::Response::status(move _27) -> [return: bb18, unwind: bb35];
    }

    bb17: {
        _22 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _43 = <std::result::Result<T, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _22) -> [return: bb42, unwind: bb37];
    }

    bb18: {
        _25 = &_26;
        _42 = const _;
        _24 = <reqwest::StatusCode as PartialEq<u16>>::ne(move _25, _42) -> [return: bb19, unwind: bb35];
    }

    bb19: {
        switchInt(move _24) -> [0: bb24, otherwise: bb20];
    }

    bb20: {
        _55 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        _32 = &(((*_55) as variant#4).0: reqwest::Response);
        _31 = reqwest::Response::status(move _32) -> [return: bb21, unwind: bb35];
    }

    bb21: {
        _30 = &_31;
        _29 = reqwest::StatusCode::as_u16(move _30) -> [return: bb22, unwind: bb35];
    }

    bb22: {
        _28 = error::Error::status(move _29) -> [return: bb23, unwind: bb35];
    }

    bb23: {
        _43 = std::result::Result::<T, error::Error>::Err(move _28);
        _56 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        drop((((*_56) as variant#4).0: reqwest::Response)) -> [return: bb33, unwind: bb37];
    }

    bb24: {
        _57 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        _35 = move (((*_57) as variant#4).0: reqwest::Response);
        _34 = reqwest::Response::json::<T>(move _35) -> [return: bb25, unwind: bb37];
    }

    bb25: {
        _33 = <{async fn body@reqwest::Response::json<T>::{closure#0}} as std::future::IntoFuture>::into_future(move _34) -> [return: bb26, unwind: bb37];
    }

    bb26: {
        _58 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        (((*_58) as variant#4).1: {async fn body@reqwest::Response::json<T>::{closure#0}}) = move _33;
        goto -> bb27;
    }

    bb27: {
        _59 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        _38 = &mut (((*_59) as variant#4).1: {async fn body@reqwest::Response::json<T>::{closure#0}});
        _37 = Pin::<&mut {async fn body@reqwest::Response::json<T>::{closure#0}}>::new_unchecked(_38) -> [return: bb28, unwind: bb34];
    }

    bb28: {
        _39 = _44;
        _36 = <{async fn body@reqwest::Response::json<T>::{closure#0}} as futures::Future>::poll(move _37, _39) -> [return: bb29, unwind: bb34];
    }

    bb29: {
        _40 = discriminant(_36);
        switchInt(move _40) -> [0: bb31, 1: bb30, otherwise: bb11];
    }

    bb30: {
        _0 = Poll::<std::result::Result<T, error::Error>>::Pending;
        _60 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        discriminant((*_60)) = 4;
        return;
    }

    bb31: {
        _41 = move ((_36 as Ready).0: std::result::Result<T, reqwest::Error>);
        _61 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        drop((((*_61) as variant#4).1: {async fn body@reqwest::Response::json<T>::{closure#0}})) -> [return: bb32, unwind: bb37];
    }

    bb32: {
        _43 = std::result::Result::<T, reqwest::Error>::map_err::<error::Error, fn(reqwest::Error) -> error::Error {error::Error::from_reqwest_error}>(move _41, error::Error::from_reqwest_error) -> [return: bb43, unwind: bb37];
    }

    bb33: {
        _0 = Poll::<std::result::Result<T, error::Error>>::Ready(move _43);
        _62 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        discriminant((*_62)) = 1;
        return;
    }

    bb34 (cleanup): {
        _63 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        drop((((*_63) as variant#4).1: {async fn body@reqwest::Response::json<T>::{closure#0}})) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        _64 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        drop((((*_64) as variant#4).0: reqwest::Response)) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        _65 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        drop((((*_65) as variant#3).0: reqwest::async_impl::client::Pending)) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        _66 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/client.rs:396:92: 411:6});
        discriminant((*_66)) = 2;
        resume;
    }

    bb38: {
        _44 = move _2;
        goto -> bb7;
    }

    bb39: {
        _44 = move _2;
        goto -> bb27;
    }

    bb40: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb40, unwind continue];
    }

    bb41: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb41, unwind continue];
    }

    bb42: {
        goto -> bb33;
    }

    bb43: {
        goto -> bb33;
    }
}

promoted[0] in client::<impl at sdk/client/src/client.rs:40:1: 40:12>::send_impl::{closure#0}: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 200_u16;
        _0 = &_1;
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:63:10: 63:15>::fmt(_1: &VerifyingClient<S>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &client::Client;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>;
    let _10: &std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>;

    bb0: {
        _3 = const "VerifyingClient";
        _4 = const "inner";
        _6 = &((*_1).0: client::Client);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "trusted_state_store";
        _10 = &((*_1).1: std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::new(_1: client::Client, _2: S) -> std::result::Result<VerifyingClient<S>, error::Error> {
    debug inner => _1;
    debug storage => _2;
    let mut _0: std::result::Result<verifying_client::client::VerifyingClient<S>, error::Error>;
    let _3: verifying_client::state_store::TrustedStateStore<S>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, verifying_client::state_store::TrustedStateStore<S>>;
    let mut _5: std::result::Result<verifying_client::state_store::TrustedStateStore<S>, error::Error>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, error::Error>;
    let _8: verifying_client::state_store::TrustedStateStore<S>;
    let mut _9: verifying_client::client::VerifyingClient<S>;
    let mut _10: client::Client;
    let mut _11: std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>;
    let mut _12: std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>;
    let mut _13: verifying_client::state_store::TrustedStateStore<S>;
    let mut _14: bool;
    let mut _15: bool;
    scope 1 {
        debug trusted_state_store => _3;
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _8;
        scope 5 {
        }
    }

    bb0: {
        _15 = const false;
        _14 = const false;
        _15 = const true;
        _5 = TrustedStateStore::<S>::new(move _2) -> [return: bb1, unwind: bb15];
    }

    bb1: {
        _4 = <std::result::Result<TrustedStateStore<S>, error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _8 = move ((_4 as Continue).0: verifying_client::state_store::TrustedStateStore<S>);
        _14 = const true;
        _3 = move _8;
        _15 = const false;
        _10 = move _1;
        _14 = const false;
        _13 = move _3;
        _12 = std::sync::RwLock::<TrustedStateStore<S>>::new(move _13) -> [return: bb7, unwind: bb10];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<VerifyingClient<S>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _7) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        _14 = const false;
        drop(_1) -> [return: bb9, unwind continue];
    }

    bb7: {
        _11 = Arc::<std::sync::RwLock<TrustedStateStore<S>>>::new(move _12) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _9 = VerifyingClient::<S> { inner: move _10, trusted_state_store: move _11 };
        _0 = std::result::Result::<VerifyingClient<S>, error::Error>::Ok(move _9);
        _14 = const false;
        goto -> bb9;
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_10) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        drop(_3) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_14) -> [0: bb15, otherwise: bb12];
    }

    bb14 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        switchInt(_15) -> [0: bb11, otherwise: bb14];
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::new_with_state(_1: client::Client, _2: TrustedState, _3: S) -> VerifyingClient<S> {
    debug inner => _1;
    debug trusted_state => _2;
    debug storage => _3;
    let mut _0: verifying_client::client::VerifyingClient<S>;
    let _4: verifying_client::state_store::TrustedStateStore<S>;
    let mut _5: client::Client;
    let mut _6: std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>;
    let mut _7: std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>;
    let mut _8: bool;
    scope 1 {
        debug trusted_state_store => _4;
    }

    bb0: {
        _8 = const false;
        _8 = const true;
        _4 = TrustedStateStore::<S>::new_with_state(move _2, move _3) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _8 = const false;
        _5 = move _1;
        _7 = std::sync::RwLock::<TrustedStateStore<S>>::new(move _4) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _6 = Arc::<std::sync::RwLock<TrustedStateStore<S>>>::new(move _7) -> [return: bb3, unwind: bb4];
    }

    bb3: {
        _0 = VerifyingClient::<S> { inner: move _5, trusted_state_store: move _6 };
        return;
    }

    bb4 (cleanup): {
        drop(_5) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_8) -> [0: bb5, otherwise: bb6];
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::version(_1: &VerifyingClient<S>) -> u64 {
    debug self => _1;
    let mut _0: u64;
    let _2: &verifying_client::state_store::TrustedStateStore<S>;
    let mut _3: &std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>;
    let _4: std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>;
    let mut _5: std::result::Result<std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>>>;
    let _6: &std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>;
    let mut _7: &std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>;

    bb0: {
        _7 = &((*_1).1: std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>);
        _6 = <Arc<std::sync::RwLock<TrustedStateStore<S>>> as Deref>::deref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = std::sync::RwLock::<TrustedStateStore<S>>::read(_6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = std::result::Result::<std::sync::RwLockReadGuard<'_, TrustedStateStore<S>>, PoisonError<std::sync::RwLockReadGuard<'_, TrustedStateStore<S>>>>::unwrap(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = &_4;
        _2 = <std::sync::RwLockReadGuard<'_, TrustedStateStore<S>> as Deref>::deref(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _0 = TrustedStateStore::<S>::version(_2) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::waypoint(_1: &VerifyingClient<S>) -> Waypoint {
    debug self => _1;
    let mut _0: diem_types::waypoint::Waypoint;
    let _2: &verifying_client::state_store::TrustedStateStore<S>;
    let mut _3: &std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>;
    let _4: std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>;
    let mut _5: std::result::Result<std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>>>;
    let _6: &std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>;
    let mut _7: &std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>;

    bb0: {
        _7 = &((*_1).1: std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>);
        _6 = <Arc<std::sync::RwLock<TrustedStateStore<S>>> as Deref>::deref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = std::sync::RwLock::<TrustedStateStore<S>>::read(_6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = std::result::Result::<std::sync::RwLockReadGuard<'_, TrustedStateStore<S>>, PoisonError<std::sync::RwLockReadGuard<'_, TrustedStateStore<S>>>>::unwrap(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = &_4;
        _2 = <std::sync::RwLockReadGuard<'_, TrustedStateStore<S>> as Deref>::deref(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _0 = TrustedStateStore::<S>::waypoint(_2) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::trusted_state(_1: &VerifyingClient<S>) -> TrustedState {
    debug self => _1;
    let mut _0: diem_types::trusted_state::TrustedState;
    let _2: &diem_types::trusted_state::TrustedState;
    let _3: &verifying_client::state_store::TrustedStateStore<S>;
    let mut _4: &std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>;
    let _5: std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>;
    let mut _6: std::result::Result<std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>>>;
    let _7: &std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>;
    let mut _8: &std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>;

    bb0: {
        _8 = &((*_1).1: std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>);
        _7 = <Arc<std::sync::RwLock<TrustedStateStore<S>>> as Deref>::deref(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = std::sync::RwLock::<TrustedStateStore<S>>::read(_7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = std::result::Result::<std::sync::RwLockReadGuard<'_, TrustedStateStore<S>>, PoisonError<std::sync::RwLockReadGuard<'_, TrustedStateStore<S>>>>::unwrap(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = &_5;
        _3 = <std::sync::RwLockReadGuard<'_, TrustedStateStore<S>> as Deref>::deref(move _4) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _2 = TrustedStateStore::<S>::trusted_state(_3) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _0 = <TrustedState as Clone>::clone(_2) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        drop(_5) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::wait_for_signed_transaction(_1: &VerifyingClient<S>, _2: &SignedTransaction, _3: std::option::Option<Duration>, _4: std::option::Option<Duration>) -> {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6} {
    debug self => _1;
    debug txn => _2;
    debug timeout => _3;
    debug delay => _4;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:113:69: 132:6 (#0)} { self: _1, txn: _2, timeout: _3, delay: _4 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::wait_for_signed_transaction::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>> {
    debug _task_context => _36;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6})).0: &verifying_client::client::VerifyingClient<S>);
    debug txn => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6})).1: &diem_types::transaction::SignedTransaction);
    debug timeout => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6})).2: std::option::Option<std::time::Duration>);
    debug delay => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6})).3: std::option::Option<std::time::Duration>);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::WaitForTransactionError>, response::Response<diem_json_rpc_types::views::TransactionView>>;
    let mut _9: {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _10: {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _11: diem_types::PeerId;
    let mut _12: u64;
    let mut _13: u64;
    let mut _14: diem_crypto::HashValue;
    let mut _15: &diem_types::transaction::Transaction;
    let mut _16: diem_types::transaction::SignedTransaction;
    let mut _17: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>>;
    let mut _18: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6}>;
    let mut _19: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _20: &mut std::task::Context<'_>;
    let mut _21: isize;
    let mut _23: isize;
    let mut _26: bool;
    let mut _27: &diem_json_rpc_types::views::VMStatusView;
    let _28: &diem_json_rpc_types::views::TransactionView;
    let mut _29: &response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _30: error::WaitForTransactionError;
    let mut _31: diem_json_rpc_types::views::TransactionView;
    let mut _32: response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _33: response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _34: bool;
    let mut _35: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>;
    let mut _36: &mut std::task::Context<'_>;
    let mut _37: u32;
    let mut _38: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _39: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _40: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _41: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _42: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _43: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _44: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _45: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _46: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _47: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _48: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _49: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _50: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _51: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _52: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _53: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    let mut _54: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6};
    scope 1 {
        debug self => _3;
        let _4: &diem_types::transaction::SignedTransaction;
        scope 2 {
            debug txn => _4;
            let _5: std::option::Option<std::time::Duration>;
            scope 3 {
                debug timeout => _5;
                let _6: std::option::Option<std::time::Duration>;
                scope 4 {
                    debug delay => _6;
                    let _7: response::Response<diem_json_rpc_types::views::TransactionView>;
                    let _24: std::result::Result<std::convert::Infallible, error::WaitForTransactionError>;
                    let _25: response::Response<diem_json_rpc_types::views::TransactionView>;
                    scope 5 {
                        debug response => _7;
                    }
                    scope 6 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6})) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
                        let _22: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>;
                        scope 7 {
                        }
                        scope 8 {
                            debug result => _22;
                        }
                    }
                    scope 9 {
                        debug residual => _24;
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => _25;
                        scope 12 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _38 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        _37 = discriminant((*_38));
        switchInt(move _37) -> [0: bb1, 1: bb35, 2: bb34, 3: bb33, otherwise: bb13];
    }

    bb1: {
        _36 = move _2;
        _34 = const false;
        _39 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        _3 = ((*_39).0: &verifying_client::client::VerifyingClient<S>);
        _40 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        _4 = ((*_40).1: &diem_types::transaction::SignedTransaction);
        _41 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        _5 = ((*_41).2: std::option::Option<std::time::Duration>);
        _42 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        _6 = ((*_42).3: std::option::Option<std::time::Duration>);
        _11 = SignedTransaction::sender(_4) -> [return: bb2, unwind: bb30];
    }

    bb2: {
        _12 = SignedTransaction::sequence_number(_4) -> [return: bb3, unwind: bb30];
    }

    bb3: {
        _13 = SignedTransaction::expiration_timestamp_secs(_4) -> [return: bb4, unwind: bb30];
    }

    bb4: {
        _16 = <SignedTransaction as Clone>::clone(_4) -> [return: bb5, unwind: bb30];
    }

    bb5: {
        _43 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        (((*_43) as variant#3).0: diem_types::transaction::Transaction) = diem_types::transaction::Transaction::UserTransaction(move _16);
        _44 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        _15 = &(((*_44) as variant#3).0: diem_types::transaction::Transaction);
        _14 = <diem_types::transaction::Transaction as CryptoHash>::hash(move _15) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        _10 = VerifyingClient::<S>::wait_for_transaction(_3, move _11, move _12, move _13, move _14, _5, _6) -> [return: bb7, unwind: bb29];
    }

    bb7: {
        _9 = <{async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6} as std::future::IntoFuture>::into_future(move _10) -> [return: bb8, unwind: bb29];
    }

    bb8: {
        _45 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        (((*_45) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6}) = move _9;
        goto -> bb9;
    }

    bb9: {
        _46 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        _19 = &mut (((*_46) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _18 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6}>::new_unchecked(_19) -> [return: bb10, unwind: bb28];
    }

    bb10: {
        _20 = _36;
        _17 = <{async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6} as futures::Future>::poll(move _18, _20) -> [return: bb11, unwind: bb28];
    }

    bb11: {
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb14, 1: bb12, otherwise: bb13];
    }

    bb12: {
        _0 = Poll::<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>>::Pending;
        _47 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        discriminant((*_47)) = 3;
        return;
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _22 = move ((_17 as Ready).0: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>);
        _48 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        drop((((*_48) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) -> [return: bb15, unwind: bb29];
    }

    bb15: {
        _8 = <std::result::Result<response::Response<TransactionView>, WaitForTransactionError> as Try>::branch(move _22) -> [return: bb16, unwind: bb29];
    }

    bb16: {
        _23 = discriminant(_8);
        switchInt(move _23) -> [0: bb17, 1: bb18, otherwise: bb13];
    }

    bb17: {
        _25 = move ((_8 as Continue).0: response::Response<diem_json_rpc_types::views::TransactionView>);
        _34 = const true;
        _7 = move _25;
        _49 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        drop((((*_49) as variant#3).0: diem_types::transaction::Transaction)) -> [return: bb20, unwind: bb32];
    }

    bb18: {
        _24 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::WaitForTransactionError>);
        _35 = <std::result::Result<response::Response<TransactionView>, WaitForTransactionError> as FromResidual<std::result::Result<Infallible, WaitForTransactionError>>>::from_residual(move _24) -> [return: bb19, unwind: bb29];
    }

    bb19: {
        _50 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        drop((((*_50) as variant#3).0: diem_types::transaction::Transaction)) -> [return: bb26, unwind: bb30];
    }

    bb20: {
        _29 = &_7;
        _28 = response::Response::<TransactionView>::inner(move _29) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _27 = &((*_28).5: diem_json_rpc_types::views::VMStatusView);
        _26 = VMStatusView::is_executed(move _27) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        switchInt(move _26) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _34 = const false;
        _33 = move _7;
        _35 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Ok(move _33);
        _34 = const false;
        goto -> bb27;
    }

    bb24: {
        _34 = const false;
        _32 = move _7;
        _31 = response::Response::<TransactionView>::into_inner(move _32) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        _30 = WaitForTransactionError::TransactionExecutionFailed(move _31);
        _35 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Err(move _30);
        goto -> bb26;
    }

    bb26: {
        _34 = const false;
        goto -> bb27;
    }

    bb27: {
        _0 = Poll::<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>>::Ready(move _35);
        _51 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        discriminant((*_51)) = 1;
        return;
    }

    bb28 (cleanup): {
        _52 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        drop((((*_52) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        _53 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        drop((((*_53) as variant#3).0: diem_types::transaction::Transaction)) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        _34 = const false;
        _54 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:113:69: 132:6});
        discriminant((*_54)) = 2;
        resume;
    }

    bb31 (cleanup): {
        drop(_7) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_34) -> [0: bb30, otherwise: bb31];
    }

    bb33: {
        _36 = move _2;
        goto -> bb9;
    }

    bb34: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb34, unwind continue];
    }

    bb35: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb35, unwind continue];
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::wait_for_transaction(_1: &VerifyingClient<S>, _2: AccountAddress, _3: u64, _4: u64, _5: HashValue, _6: std::option::Option<Duration>, _7: std::option::Option<Duration>) -> {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6} {
    debug self => _1;
    debug address => _2;
    debug seq => _3;
    debug expiration_time_secs => _4;
    debug txn_hash => _5;
    debug timeout => _6;
    debug delay => _7;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:142:69: 171:6 (#0)} { self: _1, address: _2, seq: _3, expiration_time_secs: _4, txn_hash: _5, timeout: _6, delay: _7 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::wait_for_transaction::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>> {
    debug _task_context => _59;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})).0: &verifying_client::client::VerifyingClient<S>);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})).1: diem_types::PeerId);
    debug seq => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})).2: u64);
    debug expiration_time_secs => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})).3: u64);
    debug txn_hash => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})).4: diem_crypto::HashValue);
    debug timeout => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})).5: std::option::Option<std::time::Duration>);
    debug delay => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})).6: std::option::Option<std::time::Duration>);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>>;
    let mut _3: bool;
    let mut _4: &std::time::Duration;
    let _5: std::time::Duration;
    let mut _6: &std::time::Instant;
    let mut _7: &std::time::Duration;
    let _8: std::time::Duration;
    let mut _9: std::option::Option<std::time::Duration>;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::WaitForTransactionError>, response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>>;
    let mut _12: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::WaitForTransactionError>;
    let mut _13: {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _14: {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _15: diem_types::PeerId;
    let mut _16: u64;
    let mut _17: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>>;
    let mut _18: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6}>;
    let mut _19: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _20: &mut std::task::Context<'_>;
    let mut _21: isize;
    let mut _23: isize;
    let mut _27: (std::option::Option<diem_json_rpc_types::views::TransactionView>, state::State);
    let mut _28: response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>;
    let mut _29: isize;
    let mut _31: bool;
    let mut _32: &diem_crypto::HashValue;
    let mut _33: &diem_crypto::HashValue;
    let mut _34: error::WaitForTransactionError;
    let mut _35: diem_json_rpc_types::views::TransactionView;
    let mut _36: response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _37: diem_json_rpc_types::views::TransactionView;
    let mut _38: bool;
    let mut _39: u64;
    let mut _40: u64;
    let mut _41: u64;
    let mut _42: bool;
    let mut _43: error::WaitForTransactionError;
    let mut _44: tokio::time::Sleep;
    let mut _45: tokio::time::Sleep;
    let mut _46: std::time::Duration;
    let mut _47: std::option::Option<std::time::Duration>;
    let mut _48: std::task::Poll<()>;
    let mut _49: std::pin::Pin<&mut tokio::time::Sleep>;
    let mut _50: &mut tokio::time::Sleep;
    let mut _51: &mut std::task::Context<'_>;
    let mut _52: isize;
    let mut _54: error::WaitForTransactionError;
    let mut _55: bool;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>;
    let mut _59: &mut std::task::Context<'_>;
    let mut _60: u32;
    let mut _61: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _62: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _63: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _64: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _65: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _66: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _67: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _68: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _69: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _70: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _71: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _72: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _73: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _74: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _75: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _76: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _77: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _78: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _79: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _80: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _81: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _82: &verifying_client::client::VerifyingClient<S>;
    let mut _83: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _84: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _85: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _86: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _87: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _88: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _89: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _90: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _91: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _92: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _93: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _94: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _95: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _96: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _97: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _98: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _99: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _100: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _101: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _102: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _103: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _104: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _105: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _106: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _107: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _108: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _109: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _110: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _111: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _112: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _113: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _114: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _115: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _116: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _117: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _118: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _119: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    let mut _120: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) as variant#3).0: &verifying_client::client::VerifyingClient<S>);
        scope 2 {
            debug address => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) as variant#3).1: diem_types::PeerId);
            scope 3 {
                debug seq => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) as variant#3).2: u64);
                scope 4 {
                    debug expiration_time_secs => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) as variant#3).3: u64);
                    scope 5 {
                        debug txn_hash => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) as variant#3).4: diem_crypto::HashValue);
                        scope 6 {
                            debug timeout => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) as variant#3).5: std::option::Option<std::time::Duration>);
                            scope 7 {
                                debug delay => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) as variant#3).6: std::option::Option<std::time::Duration>);
                                scope 8 {
                                    debug start => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) as variant#3).7: std::time::Instant);
                                    let _10: response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>;
                                    let _24: std::result::Result<std::convert::Infallible, error::WaitForTransactionError>;
                                    let _25: response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>;
                                    scope 9 {
                                        debug txn_resp => _10;
                                        let _26: state::State;
                                        scope 17 {
                                            debug maybe_txn => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) as variant#4).8: std::option::Option<diem_json_rpc_types::views::TransactionView>);
                                            debug state => _26;
                                            scope 18 {
                                                debug txn => _30;
                                                let _30: diem_json_rpc_types::views::TransactionView;
                                            }
                                            scope 19 {
                                                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) as variant#4).9: tokio::time::Sleep);
                                                let _53: ();
                                                scope 20 {
                                                }
                                                scope 21 {
                                                    debug result => _53;
                                                }
                                            }
                                        }
                                    }
                                    scope 10 {
                                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6})) as variant#3).8: {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
                                        let _22: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>;
                                        scope 11 {
                                        }
                                        scope 12 {
                                            debug result => _22;
                                        }
                                    }
                                    scope 13 {
                                        debug residual => _24;
                                        scope 14 {
                                        }
                                    }
                                    scope 15 {
                                        debug val => _25;
                                        scope 16 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _61 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _60 = discriminant((*_61));
        switchInt(move _60) -> [0: bb1, 1: bb64, 2: bb63, 3: bb61, 4: bb62, otherwise: bb13];
    }

    bb1: {
        _59 = move _2;
        _62 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_62) as variant#4).11: bool) = const false;
        _55 = const false;
        _63 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_63) as variant#4).10: bool) = const false;
        _64 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _65 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_64) as variant#3).0: &verifying_client::client::VerifyingClient<S>) = ((*_65).0: &verifying_client::client::VerifyingClient<S>);
        _66 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _67 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_66) as variant#3).1: diem_types::PeerId) = ((*_67).1: diem_types::PeerId);
        _68 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _69 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_68) as variant#3).2: u64) = ((*_69).2: u64);
        _70 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _71 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_70) as variant#3).3: u64) = ((*_71).3: u64);
        _72 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _73 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_72) as variant#3).4: diem_crypto::HashValue) = ((*_73).4: diem_crypto::HashValue);
        _74 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _75 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_74) as variant#3).5: std::option::Option<std::time::Duration>) = ((*_75).5: std::option::Option<std::time::Duration>);
        _76 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _77 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_76) as variant#3).6: std::option::Option<std::time::Duration>) = ((*_77).6: std::option::Option<std::time::Duration>);
        _78 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_78) as variant#3).7: std::time::Instant) = std::time::Instant::now() -> [return: bb65, unwind: bb60];
    }

    bb2: {
        _79 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _6 = &(((*_79) as variant#3).7: std::time::Instant);
        _5 = std::time::Instant::elapsed(move _6) -> [return: bb3, unwind: bb60];
    }

    bb3: {
        _4 = &_5;
        _80 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _9 = (((*_80) as variant#3).5: std::option::Option<std::time::Duration>);
        _8 = std::option::Option::<Duration>::unwrap_or(move _9, const _) -> [return: bb4, unwind: bb60];
    }

    bb4: {
        _7 = &_8;
        _3 = <Duration as PartialOrd>::lt(move _4, move _7) -> [return: bb5, unwind: bb60];
    }

    bb5: {
        switchInt(move _3) -> [0: bb40, otherwise: bb6];
    }

    bb6: {
        _81 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _82 = deref_copy (((*_81) as variant#3).0: &verifying_client::client::VerifyingClient<S>);
        _83 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _15 = (((*_83) as variant#3).1: diem_types::PeerId);
        _84 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _16 = (((*_84) as variant#3).2: u64);
        _14 = VerifyingClient::<S>::get_account_transaction(_82, move _15, move _16, const true) -> [return: bb7, unwind: bb51];
    }

    bb7: {
        _13 = <{async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6} as std::future::IntoFuture>::into_future(move _14) -> [return: bb8, unwind: bb51];
    }

    bb8: {
        _85 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_85) as variant#3).8: {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6}) = move _13;
        goto -> bb9;
    }

    bb9: {
        _86 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _19 = &mut (((*_86) as variant#3).8: {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        _18 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6}>::new_unchecked(_19) -> [return: bb10, unwind: bb50];
    }

    bb10: {
        _20 = _59;
        _17 = <{async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6} as futures::Future>::poll(move _18, _20) -> [return: bb11, unwind: bb50];
    }

    bb11: {
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb14, 1: bb12, otherwise: bb13];
    }

    bb12: {
        _0 = Poll::<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>>::Pending;
        _87 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        discriminant((*_87)) = 3;
        return;
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _22 = move ((_17 as Ready).0: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>);
        _88 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        drop((((*_88) as variant#3).8: {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6})) -> [return: bb15, unwind: bb51];
    }

    bb15: {
        _12 = std::result::Result::<response::Response<std::option::Option<TransactionView>>, error::Error>::map_err::<WaitForTransactionError, fn(error::Error) -> WaitForTransactionError {WaitForTransactionError::GetTransactionError}>(move _22, WaitForTransactionError::GetTransactionError) -> [return: bb16, unwind: bb51];
    }

    bb16: {
        _11 = <std::result::Result<response::Response<std::option::Option<TransactionView>>, WaitForTransactionError> as Try>::branch(move _12) -> [return: bb17, unwind: bb51];
    }

    bb17: {
        _23 = discriminant(_11);
        switchInt(move _23) -> [0: bb18, 1: bb19, otherwise: bb13];
    }

    bb18: {
        _25 = move ((_11 as Continue).0: response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>);
        _89 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_89) as variant#4).11: bool) = const true;
        _10 = move _25;
        _90 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_90) as variant#4).11: bool) = const false;
        _28 = move _10;
        _27 = response::Response::<std::option::Option<TransactionView>>::into_parts(move _28) -> [return: bb20, unwind: bb59];
    }

    bb19: {
        _24 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::WaitForTransactionError>);
        _58 = <std::result::Result<response::Response<TransactionView>, WaitForTransactionError> as FromResidual<std::result::Result<Infallible, WaitForTransactionError>>>::from_residual(move _24) -> [return: bb66, unwind: bb51];
    }

    bb20: {
        _91 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_91) as variant#4).10: bool) = const true;
        _92 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_92) as variant#4).8: std::option::Option<diem_json_rpc_types::views::TransactionView>) = move (_27.0: std::option::Option<diem_json_rpc_types::views::TransactionView>);
        _26 = move (_27.1: state::State);
        _93 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _29 = discriminant((((*_93) as variant#4).8: std::option::Option<diem_json_rpc_types::views::TransactionView>));
        switchInt(move _29) -> [1: bb21, otherwise: bb26];
    }

    bb21: {
        _94 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_94) as variant#4).10: bool) = const false;
        _55 = const true;
        _95 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _30 = move (((((*_95) as variant#4).8: std::option::Option<diem_json_rpc_types::views::TransactionView>) as Some).0: diem_json_rpc_types::views::TransactionView);
        _32 = &(_30.2: diem_crypto::HashValue);
        _96 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _33 = &(((*_96) as variant#3).4: diem_crypto::HashValue);
        _31 = <HashValue as PartialEq>::ne(move _32, move _33) -> [return: bb22, unwind: bb46];
    }

    bb22: {
        switchInt(move _31) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _55 = const false;
        _35 = move _30;
        _34 = WaitForTransactionError::TransactionHashMismatchError(move _35);
        _58 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Err(move _34);
        goto -> bb41;
    }

    bb24: {
        _55 = const false;
        _37 = move _30;
        _36 = response::Response::<TransactionView>::new(move _37, move _26) -> [return: bb25, unwind: bb46];
    }

    bb25: {
        _58 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Ok(move _36);
        goto -> bb41;
    }

    bb26: {
        _97 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _39 = (((*_97) as variant#3).3: u64);
        _41 = (_26.2: u64);
        _42 = Eq(const 1000000_u64, const 0_u64);
        assert(!move _42, "attempt to divide `{}` by zero", _41) -> [success: bb27, unwind: bb48];
    }

    bb27: {
        _40 = Div(move _41, const 1000000_u64);
        _38 = Le(move _39, move _40);
        switchInt(move _38) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _43 = WaitForTransactionError::TransactionExpired;
        _58 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Err(move _43);
        goto -> bb42;
    }

    bb29: {
        _98 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _47 = (((*_98) as variant#3).6: std::option::Option<std::time::Duration>);
        _46 = std::option::Option::<Duration>::unwrap_or(move _47, const _) -> [return: bb30, unwind: bb48];
    }

    bb30: {
        _45 = tokio::time::sleep(move _46) -> [return: bb31, unwind: bb48];
    }

    bb31: {
        _44 = <Sleep as std::future::IntoFuture>::into_future(move _45) -> [return: bb32, unwind: bb48];
    }

    bb32: {
        _99 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_99) as variant#4).9: tokio::time::Sleep) = move _44;
        goto -> bb33;
    }

    bb33: {
        _100 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _50 = &mut (((*_100) as variant#4).9: tokio::time::Sleep);
        _49 = Pin::<&mut Sleep>::new_unchecked(_50) -> [return: bb34, unwind: bb45];
    }

    bb34: {
        _51 = _59;
        _48 = <Sleep as futures::Future>::poll(move _49, _51) -> [return: bb35, unwind: bb45];
    }

    bb35: {
        _52 = discriminant(_48);
        switchInt(move _52) -> [0: bb37, 1: bb36, otherwise: bb13];
    }

    bb36: {
        _0 = Poll::<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>>::Pending;
        _101 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        discriminant((*_101)) = 4;
        return;
    }

    bb37: {
        _53 = ((_48 as Ready).0: ());
        _102 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        drop((((*_102) as variant#4).9: tokio::time::Sleep)) -> [return: bb38, unwind: bb48];
    }

    bb38: {
        _103 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        drop((((*_103) as variant#4).8: std::option::Option<diem_json_rpc_types::views::TransactionView>)) -> [return: bb39, unwind: bb49];
    }

    bb39: {
        _104 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_104) as variant#4).10: bool) = const false;
        _105 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_105) as variant#4).11: bool) = const false;
        goto -> bb2;
    }

    bb40: {
        _54 = WaitForTransactionError::Timeout;
        _58 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::Err(move _54);
        goto -> bb44;
    }

    bb41: {
        _55 = const false;
        goto -> bb42;
    }

    bb42: {
        _115 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _56 = discriminant((((*_115) as variant#4).8: std::option::Option<diem_json_rpc_types::views::TransactionView>));
        switchInt(move _56) -> [1: bb53, otherwise: bb52];
    }

    bb43: {
        _107 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_107) as variant#4).11: bool) = const false;
        goto -> bb44;
    }

    bb44: {
        _0 = Poll::<std::result::Result<response::Response<TransactionView>, WaitForTransactionError>>::Ready(move _58);
        _108 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        discriminant((*_108)) = 1;
        return;
    }

    bb45 (cleanup): {
        _109 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        drop((((*_109) as variant#4).9: tokio::time::Sleep)) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_55) -> [0: bb47, otherwise: bb55];
    }

    bb47 (cleanup): {
        _55 = const false;
        goto -> bb48;
    }

    bb48 (cleanup): {
        _118 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        _57 = discriminant((((*_118) as variant#4).8: std::option::Option<diem_json_rpc_types::views::TransactionView>));
        switchInt(move _57) -> [1: bb56, otherwise: bb49];
    }

    bb49 (cleanup): {
        _110 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_110) as variant#4).10: bool) = const false;
        goto -> bb59;
    }

    bb50 (cleanup): {
        _111 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        drop((((*_111) as variant#3).8: {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6})) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        _112 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_112) as variant#4).11: bool) = const false;
        goto -> bb60;
    }

    bb52: {
        _106 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        (((*_106) as variant#4).10: bool) = const false;
        goto -> bb43;
    }

    bb53: {
        _114 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        switchInt((((*_114) as variant#4).10: bool)) -> [0: bb52, otherwise: bb54];
    }

    bb54: {
        _113 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        drop((((((*_113) as variant#4).8: std::option::Option<diem_json_rpc_types::views::TransactionView>) as Some).0: diem_json_rpc_types::views::TransactionView)) -> [return: bb52, unwind: bb49];
    }

    bb55 (cleanup): {
        drop(_30) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        _117 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        switchInt((((*_117) as variant#4).10: bool)) -> [0: bb49, otherwise: bb57];
    }

    bb57 (cleanup): {
        _116 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        drop((((((*_116) as variant#4).8: std::option::Option<diem_json_rpc_types::views::TransactionView>) as Some).0: diem_json_rpc_types::views::TransactionView)) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_10) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        _119 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        switchInt((((*_119) as variant#4).11: bool)) -> [0: bb51, otherwise: bb58];
    }

    bb60 (cleanup): {
        _120 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:142:69: 171:6});
        discriminant((*_120)) = 2;
        resume;
    }

    bb61: {
        _59 = move _2;
        goto -> bb9;
    }

    bb62: {
        _59 = move _2;
        goto -> bb33;
    }

    bb63: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb63, unwind continue];
    }

    bb64: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb64, unwind continue];
    }

    bb65: {
        goto -> bb2;
    }

    bb66: {
        goto -> bb43;
    }
}

const verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::wait_for_transaction::{closure#0}::DEFAULT_TIMEOUT: Duration = {
    let mut _0: std::time::Duration;

    bb0: {
        ConstEvalCounter;
        _0 = Duration::from_secs(const 5_u64) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::wait_for_transaction::{closure#0}::DEFAULT_DELAY: Duration = {
    let mut _0: std::time::Duration;

    bb0: {
        ConstEvalCounter;
        _0 = Duration::from_millis(const 50_u64) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::sync(_1: &VerifyingClient<S>) -> {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6} {
    debug self => _1;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:176:44: 180:6 (#0)} { self: _1 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::sync::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<(), error::Error>> {
    debug _task_context => _17;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6})).0: &verifying_client::client::VerifyingClient<S>);
    let mut _0: std::task::Poll<std::result::Result<(), error::Error>>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, bool>;
    let mut _4: {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};
    let mut _5: {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};
    let mut _6: std::task::Poll<std::result::Result<bool, error::Error>>;
    let mut _7: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6}>;
    let mut _8: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};
    let mut _9: &mut std::task::Context<'_>;
    let mut _10: isize;
    let mut _12: isize;
    let mut _15: ();
    let mut _16: std::result::Result<(), error::Error>;
    let mut _17: &mut std::task::Context<'_>;
    let mut _18: u32;
    let mut _19: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6};
    let mut _20: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6};
    let mut _21: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6};
    let mut _22: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6};
    let mut _23: &verifying_client::client::VerifyingClient<S>;
    let mut _24: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6};
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6};
    let mut _29: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6};
    let mut _30: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6})) as variant#3).0: &verifying_client::client::VerifyingClient<S>);
        let _13: std::result::Result<std::convert::Infallible, error::Error>;
        let _14: bool;
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6})) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6});
            let _11: std::result::Result<bool, error::Error>;
            scope 3 {
            }
            scope 4 {
                debug result => _11;
            }
        }
        scope 5 {
            debug residual => _13;
            scope 6 {
            }
        }
        scope 7 {
            debug val => _14;
            scope 8 {
            }
        }
    }

    bb0: {
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6});
        _18 = discriminant((*_19));
        switchInt(move _18) -> [0: bb1, 1: bb21, 2: bb20, 3: bb19, otherwise: bb9];
    }

    bb1: {
        _17 = move _2;
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6});
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6});
        (((*_20) as variant#3).0: &verifying_client::client::VerifyingClient<S>) = ((*_21).0: &verifying_client::client::VerifyingClient<S>);
        goto -> bb2;
    }

    bb2: {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6});
        _23 = deref_copy (((*_22) as variant#3).0: &verifying_client::client::VerifyingClient<S>);
        _5 = VerifyingClient::<S>::sync_one_step(_23) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _4 = <{async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6} as std::future::IntoFuture>::into_future(move _5) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6});
        (((*_24) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6}) = move _4;
        goto -> bb5;
    }

    bb5: {
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6});
        _8 = &mut (((*_25) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6});
        _7 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6}>::new_unchecked(_8) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _9 = _17;
        _6 = <{async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6} as futures::Future>::poll(move _7, _9) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<(), error::Error>>::Pending;
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6});
        discriminant((*_26)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _11 = move ((_6 as Ready).0: std::result::Result<bool, error::Error>);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6});
        drop((((*_27) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6})) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _3 = <std::result::Result<bool, error::Error> as Try>::branch(move _11) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _12 = discriminant(_3);
        switchInt(move _12) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _14 = ((_3 as Continue).0: bool);
        switchInt(_14) -> [0: bb18, otherwise: bb2];
    }

    bb14: {
        _13 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _16 = <std::result::Result<(), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _13) -> [return: bb22, unwind: bb17];
    }

    bb15: {
        _0 = Poll::<std::result::Result<(), error::Error>>::Ready(move _16);
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6});
        discriminant((*_28)) = 1;
        return;
    }

    bb16 (cleanup): {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6});
        drop((((*_29) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:176:44: 180:6});
        discriminant((*_30)) = 2;
        resume;
    }

    bb18: {
        _15 = ();
        _16 = std::result::Result::<(), error::Error>::Ok(move _15);
        goto -> bb15;
    }

    bb19: {
        _17 = move _2;
        goto -> bb5;
    }

    bb20: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb20, unwind continue];
    }

    bb21: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb21, unwind continue];
    }

    bb22: {
        goto -> bb15;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::sync_one_step(_1: &VerifyingClient<S>) -> {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6} {
    debug self => _1;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:185:55: 197:6 (#0)} { self: _1 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::sync_one_step::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<bool, error::Error>> {
    debug _task_context => _23;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6})).0: &verifying_client::client::VerifyingClient<S>);
    let mut _0: std::task::Poll<std::result::Result<bool, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _4: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>;
    let mut _5: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _6: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _7: std::vec::Vec<request::MethodRequest>;
    let mut _8: std::task::Poll<std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>>;
    let mut _9: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6}>;
    let mut _10: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _11: &mut std::task::Context<'_>;
    let mut _12: isize;
    let mut _14: isize;
    let mut _16: bool;
    let mut _17: &error::Error;
    let mut _18: error::Error;
    let mut _19: bool;
    let mut _20: isize;
    let mut _21: isize;
    let mut _22: std::result::Result<bool, error::Error>;
    let mut _23: &mut std::task::Context<'_>;
    let mut _24: u32;
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};
    let mut _29: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};
    let mut _30: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};
    let mut _31: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};
    let mut _32: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};
    let mut _33: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6};
    scope 1 {
        debug self => _3;
        let _15: error::Error;
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6})) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
            let _13: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>;
            scope 3 {
            }
            scope 4 {
                debug result => _13;
            }
        }
        scope 5 {
            debug err => _15;
        }
    }

    bb0: {
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6});
        _24 = discriminant((*_25));
        switchInt(move _24) -> [0: bb1, 1: bb30, 2: bb29, 3: bb28, otherwise: bb9];
    }

    bb1: {
        _23 = move _2;
        _19 = const false;
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6});
        _3 = ((*_26).0: &verifying_client::client::VerifyingClient<S>);
        _7 = Vec::<request::MethodRequest>::new() -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _6 = VerifyingClient::<S>::batch(_3, move _7) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _5 = <{async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6} as std::future::IntoFuture>::into_future(move _6) -> [return: bb4, unwind: bb22];
    }

    bb4: {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6});
        (((*_27) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6}) = move _5;
        goto -> bb5;
    }

    bb5: {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6});
        _10 = &mut (((*_28) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _9 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6}>::new_unchecked(_10) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _11 = _23;
        _8 = <{async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6} as futures::Future>::poll(move _9, _11) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<bool, error::Error>>::Pending;
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6});
        discriminant((*_29)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _13 = move ((_8 as Ready).0: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>);
        _4 = move _13;
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6});
        drop((((*_30) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6})) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _14 = discriminant(_4);
        switchInt(move _14) -> [0: bb13, 1: bb12, otherwise: bb9];
    }

    bb12: {
        _19 = const true;
        _15 = move ((_4 as Err).0: error::Error);
        _17 = &_15;
        _16 = error::Error::is_need_sync(move _17) -> [return: bb14, unwind: bb19];
    }

    bb13: {
        _22 = std::result::Result::<bool, error::Error>::Ok(const false);
        goto -> bb26;
    }

    bb14: {
        switchInt(move _16) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _22 = std::result::Result::<bool, error::Error>::Ok(const true);
        goto -> bb17;
    }

    bb16: {
        _19 = const false;
        _18 = move _15;
        _22 = std::result::Result::<bool, error::Error>::Err(move _18);
        goto -> bb17;
    }

    bb17: {
        switchInt(_19) -> [0: bb18, otherwise: bb23];
    }

    bb18: {
        _19 = const false;
        goto -> bb26;
    }

    bb19 (cleanup): {
        drop(_15) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        _19 = const false;
        _21 = discriminant(_4);
        switchInt(move _21) -> [1: bb22, otherwise: bb27];
    }

    bb21 (cleanup): {
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6});
        drop((((*_32) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6})) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6});
        discriminant((*_33)) = 2;
        resume;
    }

    bb23: {
        drop(_15) -> [return: bb18, unwind: bb20];
    }

    bb24: {
        _0 = Poll::<std::result::Result<bool, error::Error>>::Ready(move _22);
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:185:55: 197:6});
        discriminant((*_31)) = 1;
        return;
    }

    bb25: {
        drop(_4) -> [return: bb24, unwind: bb22];
    }

    bb26: {
        _20 = discriminant(_4);
        switchInt(move _20) -> [1: bb24, otherwise: bb25];
    }

    bb27 (cleanup): {
        drop(_4) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb28: {
        _23 = move _2;
        goto -> bb5;
    }

    bb29: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb29, unwind continue];
    }

    bb30: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb30, unwind continue];
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::ratchet(_1: &VerifyingClient<S>, _2: std::option::Option<TrustedState>) -> std::result::Result<(), error::Error> {
    debug self => _1;
    debug new_state => _2;
    let mut _0: std::result::Result<(), error::Error>;
    let mut _3: isize;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>>;
    let mut _6: std::result::Result<(), error::Error>;
    let mut _7: &mut verifying_client::state_store::TrustedStateStore<S>;
    let mut _8: &mut std::sync::RwLockWriteGuard<'_, verifying_client::state_store::TrustedStateStore<S>>;
    let mut _9: std::sync::RwLockWriteGuard<'_, verifying_client::state_store::TrustedStateStore<S>>;
    let mut _10: std::result::Result<std::sync::RwLockWriteGuard<'_, verifying_client::state_store::TrustedStateStore<S>>, std::sync::PoisonError<std::sync::RwLockWriteGuard<'_, verifying_client::state_store::TrustedStateStore<S>>>>;
    let _11: &std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>;
    let mut _12: &std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>;
    let mut _13: diem_types::trusted_state::TrustedState;
    let mut _14: isize;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: isize;
    scope 1 {
        debug new_state => _4;
        let _4: diem_types::trusted_state::TrustedState;
        let _15: std::result::Result<std::convert::Infallible, error::Error>;
        scope 2 {
            debug residual => _15;
            scope 3 {
            }
        }
        scope 4 {
            debug val => const ();
            scope 5 {
            }
        }
    }

    bb0: {
        _17 = const false;
        _16 = const false;
        _16 = const true;
        _3 = discriminant(_2);
        switchInt(move _3) -> [1: bb1, otherwise: bb13];
    }

    bb1: {
        _16 = const false;
        _17 = const true;
        _4 = move ((_2 as Some).0: diem_types::trusted_state::TrustedState);
        _12 = &((*_1).1: std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>);
        _11 = <Arc<std::sync::RwLock<TrustedStateStore<S>>> as Deref>::deref(move _12) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _10 = std::sync::RwLock::<TrustedStateStore<S>>::write(_11) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _9 = std::result::Result::<std::sync::RwLockWriteGuard<'_, TrustedStateStore<S>>, PoisonError<std::sync::RwLockWriteGuard<'_, TrustedStateStore<S>>>>::unwrap(move _10) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _8 = &mut _9;
        _7 = <std::sync::RwLockWriteGuard<'_, TrustedStateStore<S>> as DerefMut>::deref_mut(move _8) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _17 = const false;
        _13 = move _4;
        _6 = TrustedStateStore::<S>::ratchet(_7, move _13) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _5 = <std::result::Result<(), error::Error> as Try>::branch(move _6) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _14 = discriminant(_5);
        switchInt(move _14) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        drop(_9) -> [return: bb12, unwind: bb21];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _15) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        drop(_9) -> [return: bb14, unwind: bb21];
    }

    bb12: {
        _17 = const false;
        goto -> bb13;
    }

    bb13: {
        _0 = std::result::Result::<(), error::Error>::Ok(const ());
        _18 = discriminant(_2);
        switchInt(move _18) -> [1: bb18, otherwise: bb15];
    }

    bb14: {
        _17 = const false;
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_9) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18: {
        switchInt(_16) -> [0: bb15, otherwise: bb19];
    }

    bb19: {
        drop(((_2 as Some).0: diem_types::trusted_state::TrustedState)) -> [return: bb15, unwind continue];
    }

    bb20 (cleanup): {
        drop(_4) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_17) -> [0: bb17, otherwise: bb20];
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::submit(_1: &VerifyingClient<S>, _2: &SignedTransaction) -> {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6} {
    debug self => _1;
    debug txn => _2;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:227:81: 231:6 (#0)} { self: _1, txn: _2 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::submit::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<()>, error::Error>> {
    debug _task_context => _23;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6})).0: &verifying_client::client::VerifyingClient<S>);
    debug txn => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6})).1: &diem_types::transaction::SignedTransaction);
    let mut _0: std::task::Poll<std::result::Result<response::Response<()>, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _6: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _7: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _8: std::result::Result<request::MethodRequest, error::Error>;
    let mut _9: std::result::Result<request::MethodRequest, bcs::Error>;
    let mut _10: isize;
    let mut _13: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _14: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>;
    let mut _15: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: isize;
    let mut _19: isize;
    let mut _22: std::result::Result<response::Response<()>, error::Error>;
    let mut _23: &mut std::task::Context<'_>;
    let mut _24: u32;
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _29: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _30: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _31: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _32: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _33: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _34: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _35: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _36: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _37: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    let mut _38: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6};
    scope 1 {
        debug self => _3;
        let _4: &diem_types::transaction::SignedTransaction;
        scope 2 {
            debug txn => _4;
            let _11: std::result::Result<std::convert::Infallible, error::Error>;
            let _12: request::MethodRequest;
            let _20: std::result::Result<std::convert::Infallible, error::Error>;
            let _21: response::Response<response::MethodResponse>;
            scope 3 {
                debug residual => _11;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _12;
                scope 6 {
                }
            }
            scope 7 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6})) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
                let _18: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
                scope 8 {
                }
                scope 9 {
                    debug result => _18;
                }
            }
            scope 10 {
                debug residual => _20;
                scope 11 {
                }
            }
            scope 12 {
                debug val => _21;
                scope 13 {
                }
            }
        }
    }

    bb0: {
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        _24 = discriminant((*_25));
        switchInt(move _24) -> [0: bb1, 1: bb24, 2: bb23, 3: bb22, otherwise: bb6];
    }

    bb1: {
        _23 = move _2;
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        _3 = ((*_26).0: &verifying_client::client::VerifyingClient<S>);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        _4 = ((*_27).1: &diem_types::transaction::SignedTransaction);
        _9 = request::MethodRequest::submit(_4) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _8 = std::result::Result::<request::MethodRequest, bcs::Error>::map_err::<error::Error, fn(bcs::Error) -> error::Error {error::Error::request::<bcs::Error>}>(move _9, error::Error::request::<bcs::Error>) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        (((*_28) as variant#3).0: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, request::MethodRequest>) = <std::result::Result<request::MethodRequest, error::Error> as Try>::branch(move _8) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        _10 = discriminant((((*_29) as variant#3).0: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, request::MethodRequest>));
        switchInt(move _10) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        _12 = move (((((*_30) as variant#3).0: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, request::MethodRequest>) as Continue).0: request::MethodRequest);
        _7 = VerifyingClient::<S>::request(_3, move _12) -> [return: bb8, unwind: bb21];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        _11 = move (((((*_31) as variant#3).0: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, request::MethodRequest>) as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _22 = <std::result::Result<response::Response<()>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _11) -> [return: bb25, unwind: bb21];
    }

    bb8: {
        _6 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as std::future::IntoFuture>::into_future(move _7) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        (((*_32) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}) = move _6;
        goto -> bb10;
    }

    bb10: {
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        _15 = &mut (((*_33) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _14 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>::new_unchecked(_15) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        _16 = _23;
        _13 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as futures::Future>::poll(move _14, _16) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        _17 = discriminant(_13);
        switchInt(move _17) -> [0: bb14, 1: bb13, otherwise: bb6];
    }

    bb13: {
        _0 = Poll::<std::result::Result<response::Response<()>, error::Error>>::Pending;
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        discriminant((*_34)) = 3;
        return;
    }

    bb14: {
        _18 = move ((_13 as Ready).0: std::result::Result<response::Response<response::MethodResponse>, error::Error>);
        _35 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        drop((((*_35) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        _5 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _18) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        _19 = discriminant(_5);
        switchInt(move _19) -> [0: bb17, 1: bb18, otherwise: bb6];
    }

    bb17: {
        _21 = move ((_5 as Continue).0: response::Response<response::MethodResponse>);
        _22 = response::Response::<MethodResponse>::and_then::<(), error::Error, fn(MethodResponse) -> std::result::Result<(), error::Error> {MethodResponse::try_into_submit}>(move _21, MethodResponse::try_into_submit) -> [return: bb26, unwind: bb21];
    }

    bb18: {
        _20 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _22 = <std::result::Result<response::Response<()>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _20) -> [return: bb27, unwind: bb21];
    }

    bb19: {
        _0 = Poll::<std::result::Result<response::Response<()>, error::Error>>::Ready(move _22);
        _36 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        discriminant((*_36)) = 1;
        return;
    }

    bb20 (cleanup): {
        _37 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        drop((((*_37) as variant#3).1: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        _38 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:227:81: 231:6});
        discriminant((*_38)) = 2;
        resume;
    }

    bb22: {
        _23 = move _2;
        goto -> bb10;
    }

    bb23: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb23, unwind continue];
    }

    bb24: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb24, unwind continue];
    }

    bb25: {
        goto -> bb19;
    }

    bb26: {
        goto -> bb19;
    }

    bb27: {
        goto -> bb19;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_metadata_by_version(_1: &VerifyingClient<S>, _2: u64) -> {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6} {
    debug self => _1;
    debug version => _2;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:236:41: 240:6 (#0)} { self: _1, version: _2 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_metadata_by_version::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<MetadataView>, error::Error>> {
    debug _task_context => _19;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6})).0: &verifying_client::client::VerifyingClient<S>);
    debug version => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6})).1: u64);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _6: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _7: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _8: request::MethodRequest;
    let mut _9: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _10: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>;
    let mut _11: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _12: &mut std::task::Context<'_>;
    let mut _13: isize;
    let mut _15: isize;
    let mut _18: std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>;
    let mut _19: &mut std::task::Context<'_>;
    let mut _20: u32;
    let mut _21: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6};
    let mut _22: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6};
    let mut _23: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6};
    let mut _24: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6};
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6};
    let mut _29: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6};
    let mut _30: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6};
    scope 1 {
        debug self => _3;
        let _4: u64;
        scope 2 {
            debug version => _4;
            let _16: std::result::Result<std::convert::Infallible, error::Error>;
            let _17: response::Response<response::MethodResponse>;
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6})) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
                let _14: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
                scope 4 {
                }
                scope 5 {
                    debug result => _14;
                }
            }
            scope 6 {
                debug residual => _16;
                scope 7 {
                }
            }
            scope 8 {
                debug val => _17;
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6});
        _20 = discriminant((*_21));
        switchInt(move _20) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb9];
    }

    bb1: {
        _19 = move _2;
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6});
        _3 = ((*_22).0: &verifying_client::client::VerifyingClient<S>);
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6});
        _4 = ((*_23).1: u64);
        _8 = request::MethodRequest::get_metadata_by_version(_4) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _7 = VerifyingClient::<S>::request(_3, move _8) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _6 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as std::future::IntoFuture>::into_future(move _7) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6});
        (((*_24) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}) = move _6;
        goto -> bb5;
    }

    bb5: {
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6});
        _11 = &mut (((*_25) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _10 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>::new_unchecked(_11) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _12 = _19;
        _9 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as futures::Future>::poll(move _10, _12) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<MetadataView>, error::Error>>::Pending;
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6});
        discriminant((*_26)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _14 = move ((_9 as Ready).0: std::result::Result<response::Response<response::MethodResponse>, error::Error>);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6});
        drop((((*_27) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _5 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _14) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _15 = discriminant(_5);
        switchInt(move _15) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _17 = move ((_5 as Continue).0: response::Response<response::MethodResponse>);
        _18 = response::Response::<MethodResponse>::and_then::<MetadataView, error::Error, fn(MethodResponse) -> std::result::Result<MetadataView, error::Error> {MethodResponse::try_into_get_metadata}>(move _17, MethodResponse::try_into_get_metadata) -> [return: bb21, unwind: bb17];
    }

    bb14: {
        _16 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _18 = <std::result::Result<response::Response<MetadataView>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _16) -> [return: bb22, unwind: bb17];
    }

    bb15: {
        _0 = Poll::<std::result::Result<response::Response<MetadataView>, error::Error>>::Ready(move _18);
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6});
        discriminant((*_28)) = 1;
        return;
    }

    bb16 (cleanup): {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6});
        drop((((*_29) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:236:41: 240:6});
        discriminant((*_30)) = 2;
        resume;
    }

    bb18: {
        _19 = move _2;
        goto -> bb5;
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb20, unwind continue];
    }

    bb21: {
        goto -> bb15;
    }

    bb22: {
        goto -> bb15;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_metadata(_1: &VerifyingClient<S>) -> {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6} {
    debug self => _1;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:242:72: 246:6 (#0)} { self: _1 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_metadata::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<MetadataView>, error::Error>> {
    debug _task_context => _18;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6})).0: &verifying_client::client::VerifyingClient<S>);
    let mut _0: std::task::Poll<std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _5: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _6: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _7: request::MethodRequest;
    let mut _8: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _9: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>;
    let mut _10: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _11: &mut std::task::Context<'_>;
    let mut _12: isize;
    let mut _14: isize;
    let mut _17: std::result::Result<response::Response<diem_json_rpc_types::views::MetadataView>, error::Error>;
    let mut _18: &mut std::task::Context<'_>;
    let mut _19: u32;
    let mut _20: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6};
    let mut _21: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6};
    let mut _22: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6};
    let mut _23: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6};
    let mut _24: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6};
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6};
    scope 1 {
        debug self => _3;
        let _15: std::result::Result<std::convert::Infallible, error::Error>;
        let _16: response::Response<response::MethodResponse>;
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6})) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
            let _13: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
            scope 3 {
            }
            scope 4 {
                debug result => _13;
            }
        }
        scope 5 {
            debug residual => _15;
            scope 6 {
            }
        }
        scope 7 {
            debug val => _16;
            scope 8 {
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6});
        _19 = discriminant((*_20));
        switchInt(move _19) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb9];
    }

    bb1: {
        _18 = move _2;
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6});
        _3 = ((*_21).0: &verifying_client::client::VerifyingClient<S>);
        _7 = request::MethodRequest::get_metadata() -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _6 = VerifyingClient::<S>::request(_3, move _7) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _5 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as std::future::IntoFuture>::into_future(move _6) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6});
        (((*_22) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}) = move _5;
        goto -> bb5;
    }

    bb5: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6});
        _10 = &mut (((*_23) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _9 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>::new_unchecked(_10) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _11 = _18;
        _8 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as futures::Future>::poll(move _9, _11) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<MetadataView>, error::Error>>::Pending;
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6});
        discriminant((*_24)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _13 = move ((_8 as Ready).0: std::result::Result<response::Response<response::MethodResponse>, error::Error>);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6});
        drop((((*_25) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _4 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _13) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _14 = discriminant(_4);
        switchInt(move _14) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _16 = move ((_4 as Continue).0: response::Response<response::MethodResponse>);
        _17 = response::Response::<MethodResponse>::and_then::<MetadataView, error::Error, fn(MethodResponse) -> std::result::Result<MetadataView, error::Error> {MethodResponse::try_into_get_metadata}>(move _16, MethodResponse::try_into_get_metadata) -> [return: bb21, unwind: bb17];
    }

    bb14: {
        _15 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _17 = <std::result::Result<response::Response<MetadataView>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _15) -> [return: bb22, unwind: bb17];
    }

    bb15: {
        _0 = Poll::<std::result::Result<response::Response<MetadataView>, error::Error>>::Ready(move _17);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6});
        discriminant((*_26)) = 1;
        return;
    }

    bb16 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6});
        drop((((*_27) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:242:72: 246:6});
        discriminant((*_28)) = 2;
        resume;
    }

    bb18: {
        _18 = move _2;
        goto -> bb5;
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb20, unwind continue];
    }

    bb21: {
        goto -> bb15;
    }

    bb22: {
        goto -> bb15;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_account(_1: &VerifyingClient<S>, _2: AccountAddress) -> {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6} {
    debug self => _1;
    debug address => _2;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:251:48: 255:6 (#0)} { self: _1, address: _2 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_account::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error>> {
    debug _task_context => _19;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6})).0: &verifying_client::client::VerifyingClient<S>);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6})).1: diem_types::PeerId);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _6: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _7: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _8: request::MethodRequest;
    let mut _9: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _10: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>;
    let mut _11: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _12: &mut std::task::Context<'_>;
    let mut _13: isize;
    let mut _15: isize;
    let mut _18: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>;
    let mut _19: &mut std::task::Context<'_>;
    let mut _20: u32;
    let mut _21: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6};
    let mut _22: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6};
    let mut _23: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6};
    let mut _24: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6};
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6};
    let mut _29: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6};
    let mut _30: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::PeerId;
        scope 2 {
            debug address => _4;
            let _16: std::result::Result<std::convert::Infallible, error::Error>;
            let _17: response::Response<response::MethodResponse>;
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6})) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
                let _14: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
                scope 4 {
                }
                scope 5 {
                    debug result => _14;
                }
            }
            scope 6 {
                debug residual => _16;
                scope 7 {
                }
            }
            scope 8 {
                debug val => _17;
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6});
        _20 = discriminant((*_21));
        switchInt(move _20) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb9];
    }

    bb1: {
        _19 = move _2;
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6});
        _3 = ((*_22).0: &verifying_client::client::VerifyingClient<S>);
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6});
        _4 = ((*_23).1: diem_types::PeerId);
        _8 = request::MethodRequest::get_account(_4) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _7 = VerifyingClient::<S>::request(_3, move _8) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _6 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as std::future::IntoFuture>::into_future(move _7) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6});
        (((*_24) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}) = move _6;
        goto -> bb5;
    }

    bb5: {
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6});
        _11 = &mut (((*_25) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _10 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>::new_unchecked(_11) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _12 = _19;
        _9 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as futures::Future>::poll(move _10, _12) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error>>::Pending;
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6});
        discriminant((*_26)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _14 = move ((_9 as Ready).0: std::result::Result<response::Response<response::MethodResponse>, error::Error>);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6});
        drop((((*_27) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _5 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _14) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _15 = discriminant(_5);
        switchInt(move _15) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _17 = move ((_5 as Continue).0: response::Response<response::MethodResponse>);
        _18 = response::Response::<MethodResponse>::and_then::<std::option::Option<AccountView>, error::Error, fn(MethodResponse) -> std::result::Result<std::option::Option<AccountView>, error::Error> {MethodResponse::try_into_get_account}>(move _17, MethodResponse::try_into_get_account) -> [return: bb21, unwind: bb17];
    }

    bb14: {
        _16 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _18 = <std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _16) -> [return: bb22, unwind: bb17];
    }

    bb15: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error>>::Ready(move _18);
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6});
        discriminant((*_28)) = 1;
        return;
    }

    bb16 (cleanup): {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6});
        drop((((*_29) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:251:48: 255:6});
        discriminant((*_30)) = 2;
        resume;
    }

    bb18: {
        _19 = move _2;
        goto -> bb5;
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb20, unwind continue];
    }

    bb21: {
        goto -> bb15;
    }

    bb22: {
        goto -> bb15;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_account_by_version(_1: &VerifyingClient<S>, _2: AccountAddress, _3: u64) -> {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6} {
    debug self => _1;
    debug address => _2;
    debug version => _3;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:261:48: 265:6 (#0)} { self: _1, address: _2, version: _3 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_account_by_version::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error>> {
    debug _task_context => _20;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6})).0: &verifying_client::client::VerifyingClient<S>);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6})).1: diem_types::PeerId);
    debug version => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6})).2: u64);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _7: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _8: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _9: request::MethodRequest;
    let mut _10: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _11: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>;
    let mut _12: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _16: isize;
    let mut _19: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::AccountView>>, error::Error>;
    let mut _20: &mut std::task::Context<'_>;
    let mut _21: u32;
    let mut _22: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6};
    let mut _23: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6};
    let mut _24: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6};
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6};
    let mut _29: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6};
    let mut _30: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6};
    let mut _31: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6};
    let mut _32: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::PeerId;
        scope 2 {
            debug address => _4;
            let _5: u64;
            scope 3 {
                debug version => _5;
                let _17: std::result::Result<std::convert::Infallible, error::Error>;
                let _18: response::Response<response::MethodResponse>;
                scope 4 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6})) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
                    let _15: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
                    scope 5 {
                    }
                    scope 6 {
                        debug result => _15;
                    }
                }
                scope 7 {
                    debug residual => _17;
                    scope 8 {
                    }
                }
                scope 9 {
                    debug val => _18;
                    scope 10 {
                    }
                }
            }
        }
    }

    bb0: {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6});
        _21 = discriminant((*_22));
        switchInt(move _21) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb9];
    }

    bb1: {
        _20 = move _2;
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6});
        _3 = ((*_23).0: &verifying_client::client::VerifyingClient<S>);
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6});
        _4 = ((*_24).1: diem_types::PeerId);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6});
        _5 = ((*_25).2: u64);
        _9 = request::MethodRequest::get_account_by_version(_4, _5) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _8 = VerifyingClient::<S>::request(_3, move _9) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _7 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as std::future::IntoFuture>::into_future(move _8) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6});
        (((*_26) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}) = move _7;
        goto -> bb5;
    }

    bb5: {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6});
        _12 = &mut (((*_27) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _11 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>::new_unchecked(_12) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _13 = _20;
        _10 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as futures::Future>::poll(move _11, _13) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error>>::Pending;
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6});
        discriminant((*_28)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = move ((_10 as Ready).0: std::result::Result<response::Response<response::MethodResponse>, error::Error>);
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6});
        drop((((*_29) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _6 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _15) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _16 = discriminant(_6);
        switchInt(move _16) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _18 = move ((_6 as Continue).0: response::Response<response::MethodResponse>);
        _19 = response::Response::<MethodResponse>::and_then::<std::option::Option<AccountView>, error::Error, fn(MethodResponse) -> std::result::Result<std::option::Option<AccountView>, error::Error> {MethodResponse::try_into_get_account}>(move _18, MethodResponse::try_into_get_account) -> [return: bb21, unwind: bb17];
    }

    bb14: {
        _17 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _19 = <std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _17) -> [return: bb22, unwind: bb17];
    }

    bb15: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<AccountView>>, error::Error>>::Ready(move _19);
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6});
        discriminant((*_30)) = 1;
        return;
    }

    bb16 (cleanup): {
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6});
        drop((((*_31) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:261:48: 265:6});
        discriminant((*_32)) = 2;
        resume;
    }

    bb18: {
        _20 = move _2;
        goto -> bb5;
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb20, unwind continue];
    }

    bb21: {
        goto -> bb15;
    }

    bb22: {
        goto -> bb15;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_transactions(_1: &VerifyingClient<S>, _2: u64, _3: u64, _4: bool) -> {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6} {
    debug self => _1;
    debug start_version => _2;
    debug limit => _3;
    debug include_events => _4;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:272:49: 280:6 (#0)} { self: _1, start_version: _2, limit: _3, include_events: _4 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_transactions::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<Vec<TransactionView>>, error::Error>> {
    debug _task_context => _21;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6})).0: &verifying_client::client::VerifyingClient<S>);
    debug start_version => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6})).1: u64);
    debug limit => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6})).2: u64);
    debug include_events => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6})).3: bool);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _8: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _9: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _10: request::MethodRequest;
    let mut _11: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _12: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>;
    let mut _13: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: isize;
    let mut _17: isize;
    let mut _20: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>;
    let mut _21: &mut std::task::Context<'_>;
    let mut _22: u32;
    let mut _23: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};
    let mut _24: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};
    let mut _29: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};
    let mut _30: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};
    let mut _31: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};
    let mut _32: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};
    let mut _33: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};
    let mut _34: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6};
    scope 1 {
        debug self => _3;
        let _4: u64;
        scope 2 {
            debug start_version => _4;
            let _5: u64;
            scope 3 {
                debug limit => _5;
                let _6: bool;
                scope 4 {
                    debug include_events => _6;
                    let _18: std::result::Result<std::convert::Infallible, error::Error>;
                    let _19: response::Response<response::MethodResponse>;
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6})) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
                        let _16: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _16;
                        }
                    }
                    scope 8 {
                        debug residual => _18;
                        scope 9 {
                        }
                    }
                    scope 10 {
                        debug val => _19;
                        scope 11 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6});
        _22 = discriminant((*_23));
        switchInt(move _22) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb9];
    }

    bb1: {
        _21 = move _2;
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6});
        _3 = ((*_24).0: &verifying_client::client::VerifyingClient<S>);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6});
        _4 = ((*_25).1: u64);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6});
        _5 = ((*_26).2: u64);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6});
        _6 = ((*_27).3: bool);
        _10 = request::MethodRequest::get_transactions(_4, _5, _6) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _9 = VerifyingClient::<S>::request(_3, move _10) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _8 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as std::future::IntoFuture>::into_future(move _9) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6});
        (((*_28) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}) = move _8;
        goto -> bb5;
    }

    bb5: {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6});
        _13 = &mut (((*_29) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _12 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>::new_unchecked(_13) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _14 = _21;
        _11 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as futures::Future>::poll(move _12, _14) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<Vec<TransactionView>>, error::Error>>::Pending;
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6});
        discriminant((*_30)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _16 = move ((_11 as Ready).0: std::result::Result<response::Response<response::MethodResponse>, error::Error>);
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6});
        drop((((*_31) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _7 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _16) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _17 = discriminant(_7);
        switchInt(move _17) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _19 = move ((_7 as Continue).0: response::Response<response::MethodResponse>);
        _20 = response::Response::<MethodResponse>::and_then::<Vec<TransactionView>, error::Error, fn(MethodResponse) -> std::result::Result<Vec<TransactionView>, error::Error> {MethodResponse::try_into_get_transactions}>(move _19, MethodResponse::try_into_get_transactions) -> [return: bb21, unwind: bb17];
    }

    bb14: {
        _18 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _20 = <std::result::Result<response::Response<Vec<TransactionView>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _18) -> [return: bb22, unwind: bb17];
    }

    bb15: {
        _0 = Poll::<std::result::Result<response::Response<Vec<TransactionView>>, error::Error>>::Ready(move _20);
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6});
        discriminant((*_32)) = 1;
        return;
    }

    bb16 (cleanup): {
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6});
        drop((((*_33) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:272:49: 280:6});
        discriminant((*_34)) = 2;
        resume;
    }

    bb18: {
        _21 = move _2;
        goto -> bb5;
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb20, unwind continue];
    }

    bb21: {
        goto -> bb15;
    }

    bb22: {
        goto -> bb15;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_account_transaction(_1: &VerifyingClient<S>, _2: AccountAddress, _3: u64, _4: bool) -> {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6} {
    debug self => _1;
    debug address => _2;
    debug seq_num => _3;
    debug include_events => _4;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:287:52: 295:6 (#0)} { self: _1, address: _2, seq_num: _3, include_events: _4 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_account_transaction::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<std::option::Option<TransactionView>>, error::Error>> {
    debug _task_context => _21;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6})).0: &verifying_client::client::VerifyingClient<S>);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6})).1: diem_types::PeerId);
    debug seq_num => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6})).2: u64);
    debug include_events => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6})).3: bool);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _8: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _9: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _10: request::MethodRequest;
    let mut _11: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _12: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>;
    let mut _13: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: isize;
    let mut _17: isize;
    let mut _20: std::result::Result<response::Response<std::option::Option<diem_json_rpc_types::views::TransactionView>>, error::Error>;
    let mut _21: &mut std::task::Context<'_>;
    let mut _22: u32;
    let mut _23: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _24: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _29: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _30: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _31: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _32: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _33: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    let mut _34: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::PeerId;
        scope 2 {
            debug address => _4;
            let _5: u64;
            scope 3 {
                debug seq_num => _5;
                let _6: bool;
                scope 4 {
                    debug include_events => _6;
                    let _18: std::result::Result<std::convert::Infallible, error::Error>;
                    let _19: response::Response<response::MethodResponse>;
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6})) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
                        let _16: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _16;
                        }
                    }
                    scope 8 {
                        debug residual => _18;
                        scope 9 {
                        }
                    }
                    scope 10 {
                        debug val => _19;
                        scope 11 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        _22 = discriminant((*_23));
        switchInt(move _22) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb9];
    }

    bb1: {
        _21 = move _2;
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        _3 = ((*_24).0: &verifying_client::client::VerifyingClient<S>);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        _4 = ((*_25).1: diem_types::PeerId);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        _5 = ((*_26).2: u64);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        _6 = ((*_27).3: bool);
        _10 = request::MethodRequest::get_account_transaction(_4, _5, _6) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _9 = VerifyingClient::<S>::request(_3, move _10) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _8 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as std::future::IntoFuture>::into_future(move _9) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        (((*_28) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}) = move _8;
        goto -> bb5;
    }

    bb5: {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        _13 = &mut (((*_29) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _12 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>::new_unchecked(_13) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _14 = _21;
        _11 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as futures::Future>::poll(move _12, _14) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<TransactionView>>, error::Error>>::Pending;
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        discriminant((*_30)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _16 = move ((_11 as Ready).0: std::result::Result<response::Response<response::MethodResponse>, error::Error>);
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        drop((((*_31) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _7 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _16) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _17 = discriminant(_7);
        switchInt(move _17) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _19 = move ((_7 as Continue).0: response::Response<response::MethodResponse>);
        _20 = response::Response::<MethodResponse>::and_then::<std::option::Option<TransactionView>, error::Error, fn(MethodResponse) -> std::result::Result<std::option::Option<TransactionView>, error::Error> {MethodResponse::try_into_get_account_transaction}>(move _19, MethodResponse::try_into_get_account_transaction) -> [return: bb21, unwind: bb17];
    }

    bb14: {
        _18 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _20 = <std::result::Result<response::Response<std::option::Option<TransactionView>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _18) -> [return: bb22, unwind: bb17];
    }

    bb15: {
        _0 = Poll::<std::result::Result<response::Response<std::option::Option<TransactionView>>, error::Error>>::Ready(move _20);
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        discriminant((*_32)) = 1;
        return;
    }

    bb16 (cleanup): {
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        drop((((*_33) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:287:52: 295:6});
        discriminant((*_34)) = 2;
        resume;
    }

    bb18: {
        _21 = move _2;
        goto -> bb5;
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb20, unwind continue];
    }

    bb21: {
        goto -> bb15;
    }

    bb22: {
        goto -> bb15;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_account_transactions(_1: &VerifyingClient<S>, _2: AccountAddress, _3: u64, _4: u64, _5: bool) -> {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6} {
    debug self => _1;
    debug address => _2;
    debug start_seq_num => _3;
    debug limit => _4;
    debug include_events => _5;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:303:49: 312:6 (#0)} { self: _1, address: _2, start_seq_num: _3, limit: _4, include_events: _5 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_account_transactions::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<Vec<TransactionView>>, error::Error>> {
    debug _task_context => _22;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6})).0: &verifying_client::client::VerifyingClient<S>);
    debug address => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6})).1: diem_types::PeerId);
    debug start_seq_num => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6})).2: u64);
    debug limit => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6})).3: u64);
    debug include_events => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6})).4: bool);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _9: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _10: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _11: request::MethodRequest;
    let mut _12: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _13: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>;
    let mut _14: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _15: &mut std::task::Context<'_>;
    let mut _16: isize;
    let mut _18: isize;
    let mut _21: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::TransactionView>>, error::Error>;
    let mut _22: &mut std::task::Context<'_>;
    let mut _23: u32;
    let mut _24: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    let mut _29: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    let mut _30: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    let mut _31: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    let mut _32: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    let mut _33: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    let mut _34: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    let mut _35: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    let mut _36: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::PeerId;
        scope 2 {
            debug address => _4;
            let _5: u64;
            scope 3 {
                debug start_seq_num => _5;
                let _6: u64;
                scope 4 {
                    debug limit => _6;
                    let _7: bool;
                    scope 5 {
                        debug include_events => _7;
                        let _19: std::result::Result<std::convert::Infallible, error::Error>;
                        let _20: response::Response<response::MethodResponse>;
                        scope 6 {
                            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6})) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
                            let _17: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
                            scope 7 {
                            }
                            scope 8 {
                                debug result => _17;
                            }
                        }
                        scope 9 {
                            debug residual => _19;
                            scope 10 {
                            }
                        }
                        scope 11 {
                            debug val => _20;
                            scope 12 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        _23 = discriminant((*_24));
        switchInt(move _23) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb9];
    }

    bb1: {
        _22 = move _2;
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        _3 = ((*_25).0: &verifying_client::client::VerifyingClient<S>);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        _4 = ((*_26).1: diem_types::PeerId);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        _5 = ((*_27).2: u64);
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        _6 = ((*_28).3: u64);
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        _7 = ((*_29).4: bool);
        _11 = request::MethodRequest::get_account_transactions(_4, _5, _6, _7) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _10 = VerifyingClient::<S>::request(_3, move _11) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _9 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as std::future::IntoFuture>::into_future(move _10) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        (((*_30) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}) = move _9;
        goto -> bb5;
    }

    bb5: {
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        _14 = &mut (((*_31) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _13 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>::new_unchecked(_14) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _15 = _22;
        _12 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as futures::Future>::poll(move _13, _15) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<Vec<TransactionView>>, error::Error>>::Pending;
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        discriminant((*_32)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _17 = move ((_12 as Ready).0: std::result::Result<response::Response<response::MethodResponse>, error::Error>);
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        drop((((*_33) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _8 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _17) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _18 = discriminant(_8);
        switchInt(move _18) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _20 = move ((_8 as Continue).0: response::Response<response::MethodResponse>);
        _21 = response::Response::<MethodResponse>::and_then::<Vec<TransactionView>, error::Error, fn(MethodResponse) -> std::result::Result<Vec<TransactionView>, error::Error> {MethodResponse::try_into_get_account_transactions}>(move _20, MethodResponse::try_into_get_account_transactions) -> [return: bb21, unwind: bb17];
    }

    bb14: {
        _19 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _21 = <std::result::Result<response::Response<Vec<TransactionView>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _19) -> [return: bb22, unwind: bb17];
    }

    bb15: {
        _0 = Poll::<std::result::Result<response::Response<Vec<TransactionView>>, error::Error>>::Ready(move _21);
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        discriminant((*_34)) = 1;
        return;
    }

    bb16 (cleanup): {
        _35 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        drop((((*_35) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _36 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:303:49: 312:6});
        discriminant((*_36)) = 2;
        resume;
    }

    bb18: {
        _22 = move _2;
        goto -> bb5;
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb20, unwind continue];
    }

    bb21: {
        goto -> bb15;
    }

    bb22: {
        goto -> bb15;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_events(_1: &VerifyingClient<S>, _2: EventKey, _3: u64, _4: u64) -> {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6} {
    debug self => _1;
    debug key => _2;
    debug start_seq => _3;
    debug limit => _4;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:319:43: 323:6 (#0)} { self: _1, key: _2, start_seq: _3, limit: _4 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_events::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<Vec<EventView>>, error::Error>> {
    debug _task_context => _21;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6})).0: &verifying_client::client::VerifyingClient<S>);
    debug key => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6})).1: diem_types::event::EventKey);
    debug start_seq => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6})).2: u64);
    debug limit => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6})).3: u64);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventView>>, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _8: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _9: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _10: request::MethodRequest;
    let mut _11: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _12: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>;
    let mut _13: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: isize;
    let mut _17: isize;
    let mut _20: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::EventView>>, error::Error>;
    let mut _21: &mut std::task::Context<'_>;
    let mut _22: u32;
    let mut _23: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};
    let mut _24: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};
    let mut _29: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};
    let mut _30: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};
    let mut _31: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};
    let mut _32: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};
    let mut _33: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};
    let mut _34: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::event::EventKey;
        scope 2 {
            debug key => _4;
            let _5: u64;
            scope 3 {
                debug start_seq => _5;
                let _6: u64;
                scope 4 {
                    debug limit => _6;
                    let _18: std::result::Result<std::convert::Infallible, error::Error>;
                    let _19: response::Response<response::MethodResponse>;
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6})) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
                        let _16: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _16;
                        }
                    }
                    scope 8 {
                        debug residual => _18;
                        scope 9 {
                        }
                    }
                    scope 10 {
                        debug val => _19;
                        scope 11 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6});
        _22 = discriminant((*_23));
        switchInt(move _22) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb9];
    }

    bb1: {
        _21 = move _2;
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6});
        _3 = ((*_24).0: &verifying_client::client::VerifyingClient<S>);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6});
        _4 = ((*_25).1: diem_types::event::EventKey);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6});
        _5 = ((*_26).2: u64);
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6});
        _6 = ((*_27).3: u64);
        _10 = request::MethodRequest::get_events(_4, _5, _6) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _9 = VerifyingClient::<S>::request(_3, move _10) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _8 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as std::future::IntoFuture>::into_future(move _9) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6});
        (((*_28) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}) = move _8;
        goto -> bb5;
    }

    bb5: {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6});
        _13 = &mut (((*_29) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _12 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>::new_unchecked(_13) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _14 = _21;
        _11 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as futures::Future>::poll(move _12, _14) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<Vec<EventView>>, error::Error>>::Pending;
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6});
        discriminant((*_30)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _16 = move ((_11 as Ready).0: std::result::Result<response::Response<response::MethodResponse>, error::Error>);
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6});
        drop((((*_31) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _7 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _16) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _17 = discriminant(_7);
        switchInt(move _17) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _19 = move ((_7 as Continue).0: response::Response<response::MethodResponse>);
        _20 = response::Response::<MethodResponse>::and_then::<Vec<EventView>, error::Error, fn(MethodResponse) -> std::result::Result<Vec<EventView>, error::Error> {MethodResponse::try_into_get_events}>(move _19, MethodResponse::try_into_get_events) -> [return: bb21, unwind: bb17];
    }

    bb14: {
        _18 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _20 = <std::result::Result<response::Response<Vec<EventView>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _18) -> [return: bb22, unwind: bb17];
    }

    bb15: {
        _0 = Poll::<std::result::Result<response::Response<Vec<EventView>>, error::Error>>::Ready(move _20);
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6});
        discriminant((*_32)) = 1;
        return;
    }

    bb16 (cleanup): {
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6});
        drop((((*_33) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:319:43: 323:6});
        discriminant((*_34)) = 2;
        resume;
    }

    bb18: {
        _21 = move _2;
        goto -> bb5;
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb20, unwind continue];
    }

    bb21: {
        goto -> bb15;
    }

    bb22: {
        goto -> bb15;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_currencies(_1: &VerifyingClient<S>) -> {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6} {
    debug self => _1;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:325:83: 329:6 (#0)} { self: _1 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_currencies::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<Vec<CurrencyInfoView>>, error::Error>> {
    debug _task_context => _18;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6})).0: &verifying_client::client::VerifyingClient<S>);
    let mut _0: std::task::Poll<std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>>, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _5: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _6: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _7: request::MethodRequest;
    let mut _8: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _9: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>;
    let mut _10: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _11: &mut std::task::Context<'_>;
    let mut _12: isize;
    let mut _14: isize;
    let mut _17: std::result::Result<response::Response<std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>>, error::Error>;
    let mut _18: &mut std::task::Context<'_>;
    let mut _19: u32;
    let mut _20: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6};
    let mut _21: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6};
    let mut _22: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6};
    let mut _23: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6};
    let mut _24: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6};
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6};
    scope 1 {
        debug self => _3;
        let _15: std::result::Result<std::convert::Infallible, error::Error>;
        let _16: response::Response<response::MethodResponse>;
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6})) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
            let _13: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
            scope 3 {
            }
            scope 4 {
                debug result => _13;
            }
        }
        scope 5 {
            debug residual => _15;
            scope 6 {
            }
        }
        scope 7 {
            debug val => _16;
            scope 8 {
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6});
        _19 = discriminant((*_20));
        switchInt(move _19) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb9];
    }

    bb1: {
        _18 = move _2;
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6});
        _3 = ((*_21).0: &verifying_client::client::VerifyingClient<S>);
        _7 = request::MethodRequest::get_currencies() -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _6 = VerifyingClient::<S>::request(_3, move _7) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _5 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as std::future::IntoFuture>::into_future(move _6) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6});
        (((*_22) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}) = move _5;
        goto -> bb5;
    }

    bb5: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6});
        _10 = &mut (((*_23) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _9 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>::new_unchecked(_10) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _11 = _18;
        _8 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as futures::Future>::poll(move _9, _11) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<Vec<CurrencyInfoView>>, error::Error>>::Pending;
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6});
        discriminant((*_24)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _13 = move ((_8 as Ready).0: std::result::Result<response::Response<response::MethodResponse>, error::Error>);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6});
        drop((((*_25) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _4 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _13) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _14 = discriminant(_4);
        switchInt(move _14) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _16 = move ((_4 as Continue).0: response::Response<response::MethodResponse>);
        _17 = response::Response::<MethodResponse>::and_then::<Vec<CurrencyInfoView>, error::Error, fn(MethodResponse) -> std::result::Result<Vec<CurrencyInfoView>, error::Error> {MethodResponse::try_into_get_currencies}>(move _16, MethodResponse::try_into_get_currencies) -> [return: bb21, unwind: bb17];
    }

    bb14: {
        _15 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _17 = <std::result::Result<response::Response<Vec<CurrencyInfoView>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _15) -> [return: bb22, unwind: bb17];
    }

    bb15: {
        _0 = Poll::<std::result::Result<response::Response<Vec<CurrencyInfoView>>, error::Error>>::Ready(move _17);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6});
        discriminant((*_26)) = 1;
        return;
    }

    bb16 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6});
        drop((((*_27) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:325:83: 329:6});
        discriminant((*_28)) = 2;
        resume;
    }

    bb18: {
        _18 = move _2;
        goto -> bb5;
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb20, unwind continue];
    }

    bb21: {
        goto -> bb15;
    }

    bb22: {
        goto -> bb15;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_network_status(_1: &VerifyingClient<S>) -> {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6} {
    debug self => _1;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:331:69: 335:6 (#0)} { self: _1 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::get_network_status::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<u64>, error::Error>> {
    debug _task_context => _18;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6})).0: &verifying_client::client::VerifyingClient<S>);
    let mut _0: std::task::Poll<std::result::Result<response::Response<u64>, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _5: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _6: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _7: request::MethodRequest;
    let mut _8: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _9: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>;
    let mut _10: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _11: &mut std::task::Context<'_>;
    let mut _12: isize;
    let mut _14: isize;
    let mut _17: std::result::Result<response::Response<u64>, error::Error>;
    let mut _18: &mut std::task::Context<'_>;
    let mut _19: u32;
    let mut _20: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6};
    let mut _21: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6};
    let mut _22: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6};
    let mut _23: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6};
    let mut _24: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6};
    let mut _25: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6};
    let mut _26: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6};
    let mut _27: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6};
    let mut _28: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6};
    scope 1 {
        debug self => _3;
        let _15: std::result::Result<std::convert::Infallible, error::Error>;
        let _16: response::Response<response::MethodResponse>;
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6})) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
            let _13: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
            scope 3 {
            }
            scope 4 {
                debug result => _13;
            }
        }
        scope 5 {
            debug residual => _15;
            scope 6 {
            }
        }
        scope 7 {
            debug val => _16;
            scope 8 {
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6});
        _19 = discriminant((*_20));
        switchInt(move _19) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb9];
    }

    bb1: {
        _18 = move _2;
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6});
        _3 = ((*_21).0: &verifying_client::client::VerifyingClient<S>);
        _7 = request::MethodRequest::get_network_status() -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _6 = VerifyingClient::<S>::request(_3, move _7) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _5 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as std::future::IntoFuture>::into_future(move _6) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6});
        (((*_22) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}) = move _5;
        goto -> bb5;
    }

    bb5: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6});
        _10 = &mut (((*_23) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _9 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>::new_unchecked(_10) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _11 = _18;
        _8 = <{async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} as futures::Future>::poll(move _9, _11) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<response::Response<u64>, error::Error>>::Pending;
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6});
        discriminant((*_24)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _13 = move ((_8 as Ready).0: std::result::Result<response::Response<response::MethodResponse>, error::Error>);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6});
        drop((((*_25) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _4 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _13) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _14 = discriminant(_4);
        switchInt(move _14) -> [0: bb13, 1: bb14, otherwise: bb9];
    }

    bb13: {
        _16 = move ((_4 as Continue).0: response::Response<response::MethodResponse>);
        _17 = response::Response::<MethodResponse>::and_then::<u64, error::Error, fn(MethodResponse) -> std::result::Result<u64, error::Error> {MethodResponse::try_into_get_network_status}>(move _16, MethodResponse::try_into_get_network_status) -> [return: bb21, unwind: bb17];
    }

    bb14: {
        _15 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _17 = <std::result::Result<response::Response<u64>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _15) -> [return: bb22, unwind: bb17];
    }

    bb15: {
        _0 = Poll::<std::result::Result<response::Response<u64>, error::Error>>::Ready(move _17);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6});
        discriminant((*_26)) = 1;
        return;
    }

    bb16 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6});
        drop((((*_27) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:331:69: 335:6});
        discriminant((*_28)) = 2;
        resume;
    }

    bb18: {
        _18 = move _2;
        goto -> bb5;
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb20, unwind continue];
    }

    bb21: {
        goto -> bb15;
    }

    bb22: {
        goto -> bb15;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::request(_1: &VerifyingClient<S>, _2: request::MethodRequest) -> {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6} {
    debug self => _1;
    debug request => _2;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:338:93: 343:6 (#0)} { self: _1, request: move _2 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::request::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<response::Response<MethodResponse>, error::Error>> {
    debug _task_context => _30;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})).0: &verifying_client::client::VerifyingClient<S>);
    debug request => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})).1: request::MethodRequest);
    let mut _0: std::task::Poll<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let _3: &verifying_client::client::VerifyingClient<S>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>;
    let mut _7: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _8: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _9: std::vec::Vec<request::MethodRequest>;
    let mut _10: std::boxed::Box<[request::MethodRequest]>;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: *mut u8;
    let mut _14: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _15: request::MethodRequest;
    let mut _16: std::task::Poll<std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>>;
    let mut _17: std::pin::Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6}>;
    let mut _18: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _19: &mut std::task::Context<'_>;
    let mut _20: isize;
    let mut _22: isize;
    let mut _25: std::option::Option<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _26: &mut std::vec::IntoIter<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let _27: &str;
    let mut _28: *const [request::MethodRequest; 1];
    let mut _29: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
    let mut _30: &mut std::task::Context<'_>;
    let mut _31: u32;
    let mut _32: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _33: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _34: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _35: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _36: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _37: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _38: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _39: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _40: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _41: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _42: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _43: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _44: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _45: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _46: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _47: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    let mut _48: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6};
    scope 1 {
        debug self => _3;
        let _4: request::MethodRequest;
        scope 2 {
            debug request => _4;
            let mut _5: std::vec::IntoIter<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
            let _23: std::result::Result<std::convert::Infallible, error::Error>;
            let _24: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
            let mut _49: *const ();
            let mut _50: usize;
            let mut _51: usize;
            let mut _52: usize;
            let mut _53: usize;
            let mut _54: bool;
            scope 3 {
                debug responses => _5;
            }
            scope 4 {
            }
            scope 5 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6})) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
                let _21: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>;
                scope 6 {
                }
                scope 7 {
                    debug result => _21;
                }
            }
            scope 8 {
                debug residual => _23;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _24;
                scope 11 {
                }
            }
        }
    }

    bb0: {
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _31 = discriminant((*_32));
        switchInt(move _31) -> [0: bb1, 1: bb30, 2: bb29, 3: bb28, otherwise: bb10];
    }

    bb1: {
        _30 = move _2;
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        (((*_33) as variant#3).1: bool) = const false;
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _3 = ((*_34).0: &verifying_client::client::VerifyingClient<S>);
        _35 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        (((*_35) as variant#3).1: bool) = const true;
        _36 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _4 = move ((*_36).1: request::MethodRequest);
        _11 = SizeOf([request::MethodRequest; 1]);
        _12 = AlignOf([request::MethodRequest; 1]);
        _13 = alloc::alloc::exchange_malloc(move _11, move _12) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _14 = ShallowInitBox(move _13, [request::MethodRequest; 1]);
        _37 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        (((*_37) as variant#3).1: bool) = const false;
        _15 = move _4;
        _28 = (((_14.0: std::ptr::Unique<[request::MethodRequest; 1]>).0: std::ptr::NonNull<[request::MethodRequest; 1]>).0: *const [request::MethodRequest; 1]);
        _49 = _28 as *const () (PtrToPtr);
        _50 = _49 as usize (Transmute);
        _51 = AlignOf([request::MethodRequest; 1]);
        _52 = Sub(_51, const 1_usize);
        _53 = BitAnd(_50, _52);
        _54 = Eq(_53, const 0_usize);
        assert(_54, "misaligned pointer dereference: address must be a multiple of {} but is {}", _51, _50) -> [success: bb31, unwind unreachable];
    }

    bb3: {
        _8 = VerifyingClient::<S>::batch(_3, move _9) -> [return: bb4, unwind: bb27];
    }

    bb4: {
        _7 = <{async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6} as std::future::IntoFuture>::into_future(move _8) -> [return: bb5, unwind: bb27];
    }

    bb5: {
        _38 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        (((*_38) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6}) = move _7;
        goto -> bb6;
    }

    bb6: {
        _39 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        _18 = &mut (((*_39) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _17 = Pin::<&mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6}>::new_unchecked(_18) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _19 = _30;
        _16 = <{async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6} as futures::Future>::poll(move _17, _19) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _20 = discriminant(_16);
        switchInt(move _20) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        _0 = Poll::<std::result::Result<response::Response<MethodResponse>, error::Error>>::Pending;
        _40 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        discriminant((*_40)) = 3;
        return;
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _21 = move ((_16 as Ready).0: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>);
        _41 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        drop((((*_41) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6})) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _6 = <std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> as Try>::branch(move _21) -> [return: bb13, unwind: bb27];
    }

    bb13: {
        _22 = discriminant(_6);
        switchInt(move _22) -> [0: bb14, 1: bb15, otherwise: bb10];
    }

    bb14: {
        _24 = move ((_6 as Continue).0: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>);
        _5 = <Vec<std::result::Result<response::Response<MethodResponse>, error::Error>> as IntoIterator>::into_iter(move _24) -> [return: bb17, unwind: bb27];
    }

    bb15: {
        _23 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _29 = <std::result::Result<response::Response<MethodResponse>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _23) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        _43 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        (((*_43) as variant#3).1: bool) = const false;
        goto -> bb21;
    }

    bb17: {
        _26 = &mut _5;
        _25 = <std::vec::IntoIter<std::result::Result<response::Response<MethodResponse>, error::Error>> as Iterator>::next(move _26) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        _27 = const "batch guarantees the correct number of responses";
        _29 = std::option::Option::<std::result::Result<response::Response<MethodResponse>, error::Error>>::expect(move _25, _27) -> [return: bb19, unwind: bb22];
    }

    bb19: {
        drop(_5) -> [return: bb20, unwind: bb27];
    }

    bb20: {
        _42 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        (((*_42) as variant#3).1: bool) = const false;
        goto -> bb21;
    }

    bb21: {
        _0 = Poll::<std::result::Result<response::Response<MethodResponse>, error::Error>>::Ready(move _29);
        _44 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        discriminant((*_44)) = 1;
        return;
    }

    bb22 (cleanup): {
        drop(_5) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_5) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        _45 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        drop((((*_45) as variant#3).0: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6})) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        _46 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        (((*_46) as variant#3).1: bool) = const false;
        _48 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        discriminant((*_48)) = 2;
        resume;
    }

    bb26 (cleanup): {
        drop(_4) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        _47 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:338:93: 343:6});
        switchInt((((*_47) as variant#3).1: bool)) -> [0: bb25, otherwise: bb26];
    }

    bb28: {
        _30 = move _2;
        goto -> bb6;
    }

    bb29: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb29, unwind continue];
    }

    bb30: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb30, unwind continue];
    }

    bb31: {
        (*_28) = [move _15];
        _10 = move _14 as std::boxed::Box<[request::MethodRequest]> (PointerCoercion(Unsize));
        _9 = slice::<impl [request::MethodRequest]>::into_vec::<std::alloc::Global>(move _10) -> [return: bb3, unwind: bb27];
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::actual_batch_size(_1: &VerifyingClient<S>, _2: &[request::MethodRequest]) -> usize {
    debug self => _1;
    debug requests => _2;
    let mut _0: usize;
    let mut _3: &verifying_client::methods::VerifyingBatch;
    let _4: verifying_client::methods::VerifyingBatch;
    let mut _5: std::vec::Vec<request::MethodRequest>;
    let _6: &diem_types::trusted_state::TrustedState;
    let _7: &verifying_client::state_store::TrustedStateStore<S>;
    let mut _8: &std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>;
    let _9: std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>;
    let mut _10: std::result::Result<std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, verifying_client::state_store::TrustedStateStore<S>>>>;
    let _11: &std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>;
    let mut _12: &std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>;

    bb0: {
        _5 = slice::<impl [request::MethodRequest]>::to_vec(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = VerifyingBatch::from_batch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _12 = &((*_1).1: std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>);
        _11 = <Arc<std::sync::RwLock<TrustedStateStore<S>>> as Deref>::deref(move _12) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _10 = std::sync::RwLock::<TrustedStateStore<S>>::read(_11) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _9 = std::result::Result::<std::sync::RwLockReadGuard<'_, TrustedStateStore<S>>, PoisonError<std::sync::RwLockReadGuard<'_, TrustedStateStore<S>>>>::unwrap(move _10) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _8 = &_9;
        _7 = <std::sync::RwLockReadGuard<'_, TrustedStateStore<S>> as Deref>::deref(move _8) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _6 = TrustedStateStore::<S>::trusted_state(_7) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _0 = VerifyingBatch::num_requests(move _3, _6) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        drop(_9) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        drop(_4) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_9) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::batch(_1: &VerifyingClient<S>, _2: Vec<request::MethodRequest>) -> {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6} {
    debug self => _1;
    debug requests => _2;
    let mut _0: {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/verifying_client/client.rs:353:56: 371:6 (#0)} { self: _1, requests: move _2 };
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::batch::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>> {
    debug _task_context => _49;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6})).0: &verifying_client::client::VerifyingClient<S>);
    debug requests => ((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6})).1: std::vec::Vec<request::MethodRequest>);
    let mut _0: std::task::Poll<std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>>;
    let mut _4: std::vec::Vec<request::MethodRequest>;
    let mut _6: &verifying_client::methods::VerifyingBatch;
    let _7: &diem_types::trusted_state::TrustedState;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>;
    let mut _10: {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    let mut _11: {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    let mut _12: &client::Client;
    let mut _13: std::task::Poll<std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>>;
    let mut _14: std::pin::Pin<&mut {async fn body@sdk/client/src/client.rs:129:56: 131:6}>;
    let mut _15: &mut {async fn body@sdk/client/src/client.rs:129:56: 131:6};
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: isize;
    let mut _19: isize;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, (std::option::Option<diem_types::trusted_state::TrustedState>, std::option::Option<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>)>;
    let mut _25: std::result::Result<(std::option::Option<diem_types::trusted_state::TrustedState>, std::option::Option<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>), error::Error>;
    let mut _26: verifying_client::methods::VerifyingBatch;
    let _27: &diem_types::trusted_state::TrustedState;
    let mut _28: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _29: isize;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>>;
    let mut _33: std::result::Result<(), error::Error>;
    let mut _34: std::option::Option<diem_types::trusted_state::TrustedState>;
    let mut _35: isize;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>;
    let mut _39: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>;
    let mut _40: std::option::Option<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>;
    let mut _41: {closure@sdk/client/src/verifying_client/client.rs:369:25: 369:27};
    let mut _42: isize;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>;
    let mut _49: &mut std::task::Context<'_>;
    let mut _50: u32;
    let mut _51: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _52: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _53: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _54: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _55: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _56: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _57: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _58: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _59: &verifying_client::client::VerifyingClient<S>;
    let mut _60: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _61: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _62: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _63: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _64: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _65: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _66: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _67: &verifying_client::client::VerifyingClient<S>;
    let mut _68: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _69: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _70: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _71: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _72: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _73: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _74: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _75: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _76: &verifying_client::client::VerifyingClient<S>;
    let mut _77: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _78: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _79: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _80: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _81: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _82: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _83: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _84: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _85: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _86: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _87: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _88: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _89: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _90: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _91: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _92: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    let mut _93: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6})) as variant#3).0: &verifying_client::client::VerifyingClient<S>);
        let _3: std::vec::Vec<request::MethodRequest>;
        scope 2 {
            debug requests => _3;
            scope 3 {
                debug request_trusted_state => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6})) as variant#3).1: diem_types::trusted_state::TrustedState);
                scope 4 {
                    debug batch => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6})) as variant#3).2: verifying_client::methods::VerifyingBatch);
                    let _5: std::vec::Vec<request::MethodRequest>;
                    scope 5 {
                        debug requests => _5;
                        let _8: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
                        let _20: std::result::Result<std::convert::Infallible, error::Error>;
                        let _21: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
                        scope 6 {
                            debug responses => _8;
                            let _22: std::option::Option<diem_types::trusted_state::TrustedState>;
                            let _23: std::option::Option<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>;
                            let _30: std::result::Result<std::convert::Infallible, error::Error>;
                            let _31: (std::option::Option<diem_types::trusted_state::TrustedState>, std::option::Option<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>);
                            scope 14 {
                                debug new_state => _22;
                                debug maybe_responses => _23;
                                let _36: std::result::Result<std::convert::Infallible, error::Error>;
                                let _37: ();
                                let _43: std::result::Result<std::convert::Infallible, error::Error>;
                                let _44: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
                                scope 19 {
                                    debug residual => _36;
                                    scope 20 {
                                    }
                                }
                                scope 21 {
                                    debug val => _37;
                                    scope 22 {
                                    }
                                }
                                scope 23 {
                                    debug responses => _44;
                                }
                                scope 24 {
                                    debug residual => _43;
                                    scope 25 {
                                    }
                                }
                                scope 26 {
                                    debug val => _44;
                                    scope 27 {
                                    }
                                }
                            }
                            scope 15 {
                                debug residual => _30;
                                scope 16 {
                                }
                            }
                            scope 17 {
                                debug val => _31;
                                scope 18 {
                                }
                            }
                        }
                        scope 7 {
                            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6})) as variant#3).3: {async fn body@sdk/client/src/client.rs:129:56: 131:6});
                            let _18: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>;
                            scope 8 {
                            }
                            scope 9 {
                                debug result => _18;
                            }
                        }
                        scope 10 {
                            debug residual => _20;
                            scope 11 {
                            }
                        }
                        scope 12 {
                            debug val => _21;
                            scope 13 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _51 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _50 = discriminant((*_51));
        switchInt(move _50) -> [0: bb1, 1: bb55, 2: bb54, 3: bb53, otherwise: bb11];
    }

    bb1: {
        _49 = move _2;
        _52 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_52) as variant#3).5: bool) = const false;
        _53 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_53) as variant#3).4: bool) = const false;
        _47 = const false;
        _46 = const false;
        _45 = const false;
        _54 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _55 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_54) as variant#3).0: &verifying_client::client::VerifyingClient<S>) = ((*_55).0: &verifying_client::client::VerifyingClient<S>);
        _56 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_56) as variant#3).5: bool) = const true;
        _57 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _3 = move ((*_57).1: std::vec::Vec<request::MethodRequest>);
        _58 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _59 = deref_copy (((*_58) as variant#3).0: &verifying_client::client::VerifyingClient<S>);
        _60 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_60) as variant#3).1: diem_types::trusted_state::TrustedState) = VerifyingClient::<S>::trusted_state(_59) -> [return: bb2, unwind: bb52];
    }

    bb2: {
        _61 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_61) as variant#3).5: bool) = const false;
        _4 = move _3;
        _62 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_62) as variant#3).2: verifying_client::methods::VerifyingBatch) = VerifyingBatch::from_batch(move _4) -> [return: bb3, unwind: bb40];
    }

    bb3: {
        _63 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_63) as variant#3).4: bool) = const true;
        _64 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _6 = &(((*_64) as variant#3).2: verifying_client::methods::VerifyingBatch);
        _65 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _7 = &(((*_65) as variant#3).1: diem_types::trusted_state::TrustedState);
        _5 = VerifyingBatch::collect_requests(move _6, _7) -> [return: bb4, unwind: bb39];
    }

    bb4: {
        _66 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _67 = deref_copy (((*_66) as variant#3).0: &verifying_client::client::VerifyingClient<S>);
        _12 = &((*_67).0: client::Client);
        _11 = client::Client::batch(move _12, move _5) -> [return: bb5, unwind: bb38];
    }

    bb5: {
        _10 = <{async fn body@sdk/client/src/client.rs:129:56: 131:6} as std::future::IntoFuture>::into_future(move _11) -> [return: bb6, unwind: bb38];
    }

    bb6: {
        _68 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_68) as variant#3).3: {async fn body@sdk/client/src/client.rs:129:56: 131:6}) = move _10;
        goto -> bb7;
    }

    bb7: {
        _69 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _15 = &mut (((*_69) as variant#3).3: {async fn body@sdk/client/src/client.rs:129:56: 131:6});
        _14 = Pin::<&mut {async fn body@sdk/client/src/client.rs:129:56: 131:6}>::new_unchecked(_15) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        _16 = _49;
        _13 = <{async fn body@sdk/client/src/client.rs:129:56: 131:6} as futures::Future>::poll(move _14, _16) -> [return: bb9, unwind: bb37];
    }

    bb9: {
        _17 = discriminant(_13);
        switchInt(move _17) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _0 = Poll::<std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>>::Pending;
        _70 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        discriminant((*_70)) = 3;
        return;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _18 = move ((_13 as Ready).0: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>);
        _71 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        drop((((*_71) as variant#3).3: {async fn body@sdk/client/src/client.rs:129:56: 131:6})) -> [return: bb13, unwind: bb38];
    }

    bb13: {
        _9 = <std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> as Try>::branch(move _18) -> [return: bb14, unwind: bb38];
    }

    bb14: {
        _19 = discriminant(_9);
        switchInt(move _19) -> [0: bb15, 1: bb16, otherwise: bb11];
    }

    bb15: {
        _21 = move ((_9 as Continue).0: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>);
        _47 = const true;
        _8 = move _21;
        _72 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_72) as variant#3).4: bool) = const false;
        _73 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _26 = move (((*_73) as variant#3).2: verifying_client::methods::VerifyingBatch);
        _74 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _27 = &(((*_74) as variant#3).1: diem_types::trusted_state::TrustedState);
        _47 = const false;
        _28 = move _8;
        _25 = VerifyingBatch::verify_responses(move _26, _27, move _28) -> [return: bb17, unwind: bb49];
    }

    bb16: {
        _20 = move ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _48 = <std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _20) -> [return: bb56, unwind: bb38];
    }

    bb17: {
        _24 = <std::result::Result<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error> as Try>::branch(move _25) -> [return: bb18, unwind: bb49];
    }

    bb18: {
        _29 = discriminant(_24);
        switchInt(move _29) -> [0: bb19, 1: bb20, otherwise: bb11];
    }

    bb19: {
        _31 = move ((_24 as Continue).0: (std::option::Option<diem_types::trusted_state::TrustedState>, std::option::Option<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>));
        _46 = const true;
        _22 = move (_31.0: std::option::Option<diem_types::trusted_state::TrustedState>);
        _45 = const true;
        _23 = move (_31.1: std::option::Option<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>);
        _75 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        _76 = deref_copy (((*_75) as variant#3).0: &verifying_client::client::VerifyingClient<S>);
        _46 = const false;
        _34 = move _22;
        _33 = VerifyingClient::<S>::ratchet(_76, move _34) -> [return: bb21, unwind: bb46];
    }

    bb20: {
        _30 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _48 = <std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _30) -> [return: bb57, unwind: bb49];
    }

    bb21: {
        _32 = <std::result::Result<(), error::Error> as Try>::branch(move _33) -> [return: bb22, unwind: bb46];
    }

    bb22: {
        _35 = discriminant(_32);
        switchInt(move _35) -> [0: bb23, 1: bb24, otherwise: bb11];
    }

    bb23: {
        _37 = ((_32 as Continue).0: ());
        _45 = const false;
        _40 = move _23;
        _41 = {closure@sdk/client/src/verifying_client/client.rs:369:25: 369:27};
        _39 = std::option::Option::<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>::ok_or_else::<error::Error, {closure@sdk/client/src/verifying_client/client.rs:369:25: 369:27}>(move _40, move _41) -> [return: bb25, unwind: bb46];
    }

    bb24: {
        _36 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _48 = <std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _36) -> [return: bb58, unwind: bb46];
    }

    bb25: {
        _38 = <std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> as Try>::branch(move _39) -> [return: bb26, unwind: bb46];
    }

    bb26: {
        _42 = discriminant(_38);
        switchInt(move _42) -> [0: bb27, 1: bb28, otherwise: bb11];
    }

    bb27: {
        _44 = move ((_38 as Continue).0: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>);
        _48 = std::result::Result::<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>::Ok(move _44);
        _45 = const false;
        _46 = const false;
        _47 = const false;
        _77 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_77) as variant#3).4: bool) = const false;
        _78 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        drop((((*_78) as variant#3).1: diem_types::trusted_state::TrustedState)) -> [return: bb29, unwind: bb52];
    }

    bb28: {
        _43 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _48 = <std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _43) -> [return: bb59, unwind: bb46];
    }

    bb29: {
        _79 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_79) as variant#3).5: bool) = const false;
        goto -> bb34;
    }

    bb30: {
        _45 = const false;
        _46 = const false;
        goto -> bb31;
    }

    bb31: {
        _47 = const false;
        _89 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        switchInt((((*_89) as variant#3).4: bool)) -> [0: bb32, otherwise: bb44];
    }

    bb32: {
        _80 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_80) as variant#3).4: bool) = const false;
        _81 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        drop((((*_81) as variant#3).1: diem_types::trusted_state::TrustedState)) -> [return: bb33, unwind: bb52];
    }

    bb33: {
        _82 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_82) as variant#3).5: bool) = const false;
        goto -> bb34;
    }

    bb34: {
        _0 = Poll::<std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>>::Ready(move _48);
        _83 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        discriminant((*_83)) = 1;
        return;
    }

    bb35 (cleanup): {
        _45 = const false;
        switchInt(_46) -> [0: bb36, otherwise: bb47];
    }

    bb36 (cleanup): {
        _46 = const false;
        goto -> bb49;
    }

    bb37 (cleanup): {
        _84 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        drop((((*_84) as variant#3).3: {async fn body@sdk/client/src/client.rs:129:56: 131:6})) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        _47 = const false;
        goto -> bb39;
    }

    bb39 (cleanup): {
        _91 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        switchInt((((*_91) as variant#3).4: bool)) -> [0: bb40, otherwise: bb50];
    }

    bb40 (cleanup): {
        _85 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_85) as variant#3).4: bool) = const false;
        _86 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        drop((((*_86) as variant#3).1: diem_types::trusted_state::TrustedState)) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        _87 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        (((*_87) as variant#3).5: bool) = const false;
        _93 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        discriminant((*_93)) = 2;
        resume;
    }

    bb42: {
        drop(_23) -> [return: bb30, unwind: bb35];
    }

    bb43: {
        switchInt(_45) -> [0: bb30, otherwise: bb42];
    }

    bb44: {
        _88 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        drop((((*_88) as variant#3).2: verifying_client::methods::VerifyingBatch)) -> [return: bb32, unwind: bb40];
    }

    bb45 (cleanup): {
        drop(_23) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        switchInt(_45) -> [0: bb35, otherwise: bb45];
    }

    bb47 (cleanup): {
        drop(_22) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_8) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_47) -> [0: bb38, otherwise: bb48];
    }

    bb50 (cleanup): {
        _90 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        drop((((*_90) as variant#3).2: verifying_client::methods::VerifyingBatch)) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_3) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        _92 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/verifying_client/client.rs:353:56: 371:6});
        switchInt((((*_92) as variant#3).5: bool)) -> [0: bb41, otherwise: bb51];
    }

    bb53: {
        _49 = move _2;
        goto -> bb7;
    }

    bb54: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb54, unwind continue];
    }

    bb55: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb55, unwind continue];
    }

    bb56: {
        goto -> bb31;
    }

    bb57: {
        goto -> bb31;
    }

    bb58: {
        goto -> bb43;
    }

    bb59: {
        goto -> bb43;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:69:1: 69:36>::batch::{closure#0}::{closure#0}(_1: {closure@sdk/client/src/verifying_client/client.rs:369:25: 369:27}) -> error::Error {
    let mut _0: error::Error;

    bb0: {
        _0 = error::Error::need_sync::<&str>(const "too far behind server, need to sync more") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn verifying_client::client::<impl at sdk/client/src/verifying_client/client.rs:376:1: 376:37>::clone(_1: &VerifyingClient<S>) -> VerifyingClient<S> {
    debug self => _1;
    let mut _0: verifying_client::client::VerifyingClient<S>;
    let mut _2: client::Client;
    let mut _3: &client::Client;
    let mut _4: std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>;
    let mut _5: &std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>;

    bb0: {
        _3 = &((*_1).0: client::Client);
        _2 = <client::Client as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::sync::Arc<std::sync::RwLock<verifying_client::state_store::TrustedStateStore<S>>>);
        _4 = <Arc<std::sync::RwLock<TrustedStateStore<S>>> as Clone>::clone(move _5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = VerifyingClient::<S> { inner: move _2, trusted_state_store: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:20:10: 20:15>::fmt(_1: &InMemoryStorage, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&std::collections::HashMap<std::string::String, std::vec::Vec<u8>>;
    let _7: &std::collections::HashMap<std::string::String, std::vec::Vec<u8>>;

    bb0: {
        _3 = const "InMemoryStorage";
        _4 = const "data";
        _7 = &((*_1).0: std::collections::HashMap<std::string::String, std::vec::Vec<u8>>);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:20:17: 20:24>::default() -> InMemoryStorage {
    let mut _0: verifying_client::state_store::InMemoryStorage;
    let mut _1: std::collections::HashMap<std::string::String, std::vec::Vec<u8>>;

    bb0: {
        _1 = <HashMap<std::string::String, Vec<u8>> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = InMemoryStorage { data: move _1 };
        return;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:25:1: 25:21>::new() -> InMemoryStorage {
    let mut _0: verifying_client::state_store::InMemoryStorage;
    let mut _1: std::collections::HashMap<std::string::String, std::vec::Vec<u8>>;

    bb0: {
        _1 = HashMap::<std::string::String, Vec<u8>>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = InMemoryStorage { data: move _1 };
        return;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:33:1: 33:33>::get(_1: &InMemoryStorage, _2: &str) -> std::result::Result<Vec<u8>, error::Error> {
    debug self => _1;
    debug key => _2;
    let mut _0: std::result::Result<std::vec::Vec<u8>, error::Error>;
    let mut _3: std::option::Option<std::vec::Vec<u8>>;
    let mut _4: std::option::Option<&std::vec::Vec<u8>>;
    let mut _5: &std::collections::HashMap<std::string::String, std::vec::Vec<u8>>;

    bb0: {
        _5 = &((*_1).0: std::collections::HashMap<std::string::String, std::vec::Vec<u8>>);
        _4 = HashMap::<std::string::String, Vec<u8>>::get::<str>(move _5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = std::option::Option::<&Vec<u8>>::map::<Vec<u8>, for<'a> fn(&'a Vec<u8>) -> Vec<u8> {<Vec<u8> as Clone>::clone}>(move _4, <Vec<u8> as Clone>::clone) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = std::option::Option::<Vec<u8>>::ok_or_else::<error::Error, {closure@sdk/client/src/verifying_client/state_store.rs:38:25: 38:27}>(move _3, const ZeroSized: {closure@sdk/client/src/verifying_client/state_store.rs:38:25: 38:27}) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:33:1: 33:33>::get::{closure#0}(_1: {closure@sdk/client/src/verifying_client/state_store.rs:38:25: 38:27}) -> error::Error {
    let mut _0: error::Error;

    bb0: {
        _0 = error::Error::unknown::<&str>(const "key not set") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:33:1: 33:33>::set(_1: &mut InMemoryStorage, _2: &str, _3: Vec<u8>) -> std::result::Result<(), error::Error> {
    debug self => _1;
    debug key => _2;
    debug value => _3;
    let mut _0: std::result::Result<(), error::Error>;
    let _4: std::option::Option<std::vec::Vec<u8>>;
    let mut _5: &mut std::collections::HashMap<std::string::String, std::vec::Vec<u8>>;
    let mut _6: std::string::String;
    let mut _7: std::vec::Vec<u8>;
    let mut _8: bool;

    bb0: {
        _8 = const false;
        _8 = const true;
        _5 = &mut ((*_1).0: std::collections::HashMap<std::string::String, std::vec::Vec<u8>>);
        _6 = <str as ToOwned>::to_owned(_2) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _8 = const false;
        _7 = move _3;
        _4 = HashMap::<std::string::String, Vec<u8>>::insert(move _5, move _6, move _7) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        drop(_4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = std::result::Result::<(), error::Error>::Ok(const ());
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        switchInt(_8) -> [0: bb4, otherwise: bb5];
    }
}

const TRUSTED_STATE_KEY: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "trusted_state";
        return;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:49:10: 49:15>::fmt(_1: &TrustedStateStore<S>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &diem_types::trusted_state::TrustedState;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&S;
    let _10: &S;

    bb0: {
        _3 = const "TrustedStateStore";
        _4 = const "trusted_state";
        _6 = &((*_1).0: diem_types::trusted_state::TrustedState);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "storage";
        _10 = &((*_1).1: S);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:55:1: 55:38>::new(_1: S) -> std::result::Result<TrustedStateStore<S>, error::Error> {
    debug storage => _1;
    let mut _0: std::result::Result<verifying_client::state_store::TrustedStateStore<S>, error::Error>;
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::trusted_state::TrustedState>;
    let mut _3: std::result::Result<diem_types::trusted_state::TrustedState, error::Error>;
    let mut _4: std::result::Result<std::vec::Vec<u8>, error::Error>;
    let mut _5: &S;
    let _6: &str;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, error::Error>;
    let _9: diem_types::trusted_state::TrustedState;
    let mut _10: verifying_client::state_store::TrustedStateStore<S>;
    let mut _11: S;
    scope 1 {
        debug trusted_state => _9;
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _5 = &_1;
        _6 = const _;
        _4 = <S as Storage>::get(move _5, _6) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _3 = std::result::Result::<Vec<u8>, error::Error>::and_then::<TrustedState, {closure@sdk/client/src/verifying_client/state_store.rs:59:23: 59:30}>(move _4, const ZeroSized: {closure@sdk/client/src/verifying_client/state_store.rs:59:23: 59:30}) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _2 = <std::result::Result<TrustedState, error::Error> as Try>::branch(move _3) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _7 = discriminant(_2);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _9 = move ((_2 as Continue).0: diem_types::trusted_state::TrustedState);
        _11 = move _1;
        _10 = TrustedStateStore::<S> { trusted_state: move _9, storage: move _11 };
        _0 = std::result::Result::<TrustedStateStore<S>, error::Error>::Ok(move _10);
        goto -> bb8;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _8 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<TrustedStateStore<S>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _8) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        drop(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:55:1: 55:38>::new::{closure#0}(_1: {closure@sdk/client/src/verifying_client/state_store.rs:59:23: 59:30}, _2: Vec<u8>) -> std::result::Result<TrustedState, error::Error> {
    debug bytes => _2;
    let mut _0: std::result::Result<diem_types::trusted_state::TrustedState, error::Error>;
    let mut _3: std::result::Result<diem_types::trusted_state::TrustedState, bcs::Error>;
    let _4: &[u8];
    let _5: &std::vec::Vec<u8>;

    bb0: {
        _5 = &_2;
        _4 = <Vec<u8> as Deref>::deref(_5) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _3 = bcs::from_bytes::<'_, TrustedState>(_4) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = std::result::Result::<TrustedState, bcs::Error>::map_err::<error::Error, fn(bcs::Error) -> error::Error {error::Error::decode::<bcs::Error>}>(move _3, error::Error::decode::<bcs::Error>) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:55:1: 55:38>::new_with_state(_1: TrustedState, _2: S) -> TrustedStateStore<S> {
    debug trusted_state => _1;
    debug storage => _2;
    let mut _0: verifying_client::state_store::TrustedStateStore<S>;
    let _3: std::result::Result<diem_types::trusted_state::TrustedState, error::Error>;
    let mut _4: std::result::Result<std::vec::Vec<u8>, error::Error>;
    let mut _5: &S;
    let _6: &str;
    let mut _8: isize;
    let mut _10: bool;
    let mut _11: u64;
    let mut _12: &diem_types::trusted_state::TrustedState;
    let mut _13: u64;
    let mut _14: &diem_types::trusted_state::TrustedState;
    let mut _15: diem_types::trusted_state::TrustedState;
    let mut _16: S;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: isize;
    let mut _22: isize;
    scope 1 {
        debug maybe_stored_state => _3;
        let _7: diem_types::trusted_state::TrustedState;
        scope 2 {
            debug trusted_state => _7;
        }
        scope 3 {
            debug stored_state => _9;
            let _9: diem_types::trusted_state::TrustedState;
        }
    }

    bb0: {
        _19 = const false;
        _20 = const false;
        _17 = const false;
        _18 = const false;
        _19 = const true;
        _20 = const true;
        _5 = &_2;
        _6 = const _;
        _4 = <S as Storage>::get(move _5, _6) -> [return: bb1, unwind: bb25];
    }

    bb1: {
        _3 = std::result::Result::<Vec<u8>, error::Error>::and_then::<TrustedState, {closure@sdk/client/src/verifying_client/state_store.rs:70:23: 70:30}>(move _4, const ZeroSized: {closure@sdk/client/src/verifying_client/state_store.rs:70:23: 70:30}) -> [return: bb2, unwind: bb25];
    }

    bb2: {
        _18 = const true;
        _8 = discriminant(_3);
        switchInt(move _8) -> [0: bb3, otherwise: bb9];
    }

    bb3: {
        _18 = const false;
        _17 = const true;
        _9 = move ((_3 as Ok).0: diem_types::trusted_state::TrustedState);
        _12 = &_1;
        _11 = TrustedState::version(move _12) -> [return: bb4, unwind: bb13];
    }

    bb4: {
        _14 = &_9;
        _13 = TrustedState::version(move _14) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _10 = Gt(move _11, move _13);
        switchInt(move _10) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _19 = const false;
        _7 = move _1;
        goto -> bb8;
    }

    bb7: {
        _17 = const false;
        _7 = move _9;
        goto -> bb8;
    }

    bb8: {
        switchInt(_17) -> [0: bb10, otherwise: bb16];
    }

    bb9: {
        _19 = const false;
        _7 = move _1;
        goto -> bb11;
    }

    bb10: {
        _17 = const false;
        goto -> bb11;
    }

    bb11: {
        _15 = move _7;
        _20 = const false;
        _16 = move _2;
        _0 = TrustedStateStore::<S> { trusted_state: move _15, storage: move _16 };
        _21 = discriminant(_3);
        switchInt(move _21) -> [0: bb18, otherwise: bb20];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_9) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        switchInt(_19) -> [0: bb15, otherwise: bb26];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16: {
        drop(_9) -> [return: bb10, unwind: bb23];
    }

    bb17: {
        _18 = const false;
        switchInt(_19) -> [0: bb12, otherwise: bb21];
    }

    bb18: {
        switchInt(_18) -> [0: bb17, otherwise: bb19];
    }

    bb19: {
        drop(((_3 as Ok).0: diem_types::trusted_state::TrustedState)) -> [return: bb17, unwind: bb25];
    }

    bb20: {
        drop(_3) -> [return: bb17, unwind: bb25];
    }

    bb21: {
        drop(_1) -> [return: bb12, unwind continue];
    }

    bb22 (cleanup): {
        drop(_3) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        _22 = discriminant(_3);
        switchInt(move _22) -> [0: bb25, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_20) -> [0: bb14, otherwise: bb24];
    }

    bb26 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate(cleanup)];
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:55:1: 55:38>::new_with_state::{closure#0}(_1: {closure@sdk/client/src/verifying_client/state_store.rs:70:23: 70:30}, _2: Vec<u8>) -> std::result::Result<TrustedState, error::Error> {
    debug bytes => _2;
    let mut _0: std::result::Result<diem_types::trusted_state::TrustedState, error::Error>;
    let mut _3: std::result::Result<diem_types::trusted_state::TrustedState, bcs::Error>;
    let _4: &[u8];
    let _5: &std::vec::Vec<u8>;

    bb0: {
        _5 = &_2;
        _4 = <Vec<u8> as Deref>::deref(_5) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _3 = bcs::from_bytes::<'_, TrustedState>(_4) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = std::result::Result::<TrustedState, bcs::Error>::map_err::<error::Error, fn(bcs::Error) -> error::Error {error::Error::decode::<bcs::Error>}>(move _3, error::Error::decode::<bcs::Error>) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:55:1: 55:38>::version(_1: &TrustedStateStore<S>) -> u64 {
    debug self => _1;
    let mut _0: u64;
    let mut _2: &diem_types::trusted_state::TrustedState;

    bb0: {
        _2 = &((*_1).0: diem_types::trusted_state::TrustedState);
        _0 = TrustedState::version(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:55:1: 55:38>::waypoint(_1: &TrustedStateStore<S>) -> Waypoint {
    debug self => _1;
    let mut _0: diem_types::waypoint::Waypoint;
    let mut _2: &diem_types::trusted_state::TrustedState;

    bb0: {
        _2 = &((*_1).0: diem_types::trusted_state::TrustedState);
        _0 = TrustedState::waypoint(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:55:1: 55:38>::trusted_state(_1: &TrustedStateStore<S>) -> &TrustedState {
    debug self => _1;
    let mut _0: &diem_types::trusted_state::TrustedState;

    bb0: {
        _0 = &((*_1).0: diem_types::trusted_state::TrustedState);
        return;
    }
}

fn state_store::<impl at sdk/client/src/verifying_client/state_store.rs:55:1: 55:38>::ratchet(_1: &mut TrustedStateStore<S>, _2: TrustedState) -> std::result::Result<(), error::Error> {
    debug self => _1;
    debug new_state => _2;
    let mut _0: std::result::Result<(), error::Error>;
    let mut _3: bool;
    let mut _4: u64;
    let mut _5: &diem_types::trusted_state::TrustedState;
    let mut _6: u64;
    let mut _7: &verifying_client::state_store::TrustedStateStore<S>;
    let mut _8: diem_types::trusted_state::TrustedState;
    let _9: std::vec::Vec<u8>;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<u8>>;
    let mut _11: std::result::Result<std::vec::Vec<u8>, error::Error>;
    let mut _12: std::result::Result<std::vec::Vec<u8>, bcs::Error>;
    let _13: &diem_types::trusted_state::TrustedState;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, error::Error>;
    let _16: std::vec::Vec<u8>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>>;
    let mut _18: std::result::Result<(), error::Error>;
    let mut _19: &mut S;
    let _20: &str;
    let mut _21: std::vec::Vec<u8>;
    let mut _22: isize;
    let mut _24: bool;
    let mut _25: bool;
    scope 1 {
        debug trusted_state_bytes => _9;
        let _23: std::result::Result<std::convert::Infallible, error::Error>;
        scope 6 {
            debug residual => _23;
            scope 7 {
            }
        }
        scope 8 {
            debug val => const ();
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _15;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        _24 = const false;
        _25 = const false;
        _24 = const true;
        _5 = &_2;
        _4 = TrustedState::version(move _5) -> [return: bb1, unwind: bb24];
    }

    bb1: {
        _7 = &(*_1);
        _6 = TrustedStateStore::<S>::version(move _7) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _3 = Gt(move _4, move _6);
        switchInt(move _3) -> [0: bb16, otherwise: bb3];
    }

    bb3: {
        _24 = const false;
        _8 = move _2;
        drop(((*_1).0: diem_types::trusted_state::TrustedState)) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        ((*_1).0: diem_types::trusted_state::TrustedState) = move _8;
        _13 = &((*_1).0: diem_types::trusted_state::TrustedState);
        _12 = bcs::to_bytes::<TrustedState>(_13) -> [return: bb6, unwind: bb24];
    }

    bb5 (cleanup): {
        ((*_1).0: diem_types::trusted_state::TrustedState) = move _8;
        goto -> bb24;
    }

    bb6: {
        _11 = std::result::Result::<Vec<u8>, bcs::Error>::map_err::<error::Error, fn(bcs::Error) -> error::Error {error::Error::decode::<bcs::Error>}>(move _12, error::Error::decode::<bcs::Error>) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        _10 = <std::result::Result<Vec<u8>, error::Error> as Try>::branch(move _11) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        _16 = move ((_10 as Continue).0: std::vec::Vec<u8>);
        _25 = const true;
        _9 = move _16;
        _19 = &mut ((*_1).1: S);
        _20 = const _;
        _25 = const false;
        _21 = move _9;
        _18 = <S as Storage>::set(move _19, _20, move _21) -> [return: bb12, unwind: bb22];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _15 = move ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _15) -> [return: bb25, unwind: bb24];
    }

    bb12: {
        _17 = <std::result::Result<(), error::Error> as Try>::branch(move _18) -> [return: bb13, unwind: bb22];
    }

    bb13: {
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb14, 1: bb15, otherwise: bb10];
    }

    bb14: {
        _25 = const false;
        goto -> bb16;
    }

    bb15: {
        _23 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _23) -> [return: bb26, unwind: bb22];
    }

    bb16: {
        _0 = std::result::Result::<(), error::Error>::Ok(const ());
        switchInt(_24) -> [0: bb18, otherwise: bb20];
    }

    bb17: {
        _25 = const false;
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        resume;
    }

    bb20: {
        drop(_2) -> [return: bb18, unwind continue];
    }

    bb21 (cleanup): {
        drop(_9) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_25) -> [0: bb24, otherwise: bb21];
    }

    bb23 (cleanup): {
        drop(_2) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_24) -> [0: bb19, otherwise: bb23];
    }

    bb25: {
        goto -> bb17;
    }

    bb26: {
        goto -> bb17;
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:34:1: 34:20>::from_batch(_1: Vec<request::MethodRequest>) -> VerifyingBatch {
    debug requests => _1;
    let mut _0: verifying_client::methods::VerifyingBatch;
    let mut _2: std::vec::Vec<verifying_client::methods::VerifyingRequest>;
    let mut _3: std::iter::Map<std::vec::IntoIter<request::MethodRequest>, fn(request::MethodRequest) -> verifying_client::methods::VerifyingRequest {<verifying_client::methods::VerifyingRequest as std::convert::From<request::MethodRequest>>::from}>;
    let mut _4: std::vec::IntoIter<request::MethodRequest>;

    bb0: {
        _4 = <Vec<request::MethodRequest> as IntoIterator>::into_iter(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <std::vec::IntoIter<request::MethodRequest> as Iterator>::map::<VerifyingRequest, fn(request::MethodRequest) -> VerifyingRequest {<VerifyingRequest as From<request::MethodRequest>>::from}>(move _4, <VerifyingRequest as From<request::MethodRequest>>::from) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = <std::iter::Map<std::vec::IntoIter<request::MethodRequest>, fn(request::MethodRequest) -> VerifyingRequest {<VerifyingRequest as From<request::MethodRequest>>::from}> as Iterator>::collect::<Vec<VerifyingRequest>>(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = VerifyingBatch { requests: move _2 };
        return;
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:34:1: 34:20>::num_requests(_1: &VerifyingBatch, _2: &TrustedState) -> usize {
    debug self => _1;
    debug request_trusted_state => _2;
    let mut _0: usize;
    let _3: usize;
    let mut _4: std::iter::Map<std::slice::Iter<'_, verifying_client::methods::VerifyingRequest>, {closure@sdk/client/src/verifying_client/methods.rs:45:18: 45:27}>;
    let mut _5: std::slice::Iter<'_, verifying_client::methods::VerifyingRequest>;
    let _6: &[verifying_client::methods::VerifyingRequest];
    let mut _7: &std::vec::Vec<verifying_client::methods::VerifyingRequest>;
    let mut _8: usize;
    let mut _9: (usize, bool);
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: (usize, bool);
    scope 1 {
        debug num_client_requests => _3;
    }

    bb0: {
        _7 = &((*_1).0: std::vec::Vec<verifying_client::methods::VerifyingRequest>);
        _6 = <Vec<VerifyingRequest> as Deref>::deref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = core::slice::<impl [VerifyingRequest]>::iter(_6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = <std::slice::Iter<'_, VerifyingRequest> as Iterator>::map::<usize, {closure@sdk/client/src/verifying_client/methods.rs:45:18: 45:27}>(move _5, const ZeroSized: {closure@sdk/client/src/verifying_client/methods.rs:45:18: 45:27}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = <std::iter::Map<std::slice::Iter<'_, VerifyingRequest>, {closure@sdk/client/src/verifying_client/methods.rs:45:18: 45:27}> as Iterator>::sum::<usize>(move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = CheckedAdd(_3, const 1_usize);
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_usize) -> [success: bb5, unwind continue];
    }

    bb5: {
        _8 = move (_9.0: usize);
        _11 = TrustedState::need_accumulator(_2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _10 = move _11 as usize (IntToInt);
        _12 = CheckedAdd(_8, _10);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _10) -> [success: bb7, unwind continue];
    }

    bb7: {
        _0 = move (_12.0: usize);
        return;
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:34:1: 34:20>::num_requests::{closure#0}(_1: &mut {closure@sdk/client/src/verifying_client/methods.rs:45:18: 45:27}, _2: &VerifyingRequest) -> usize {
    debug request => _2;
    let mut _0: usize;
    let mut _3: &std::vec::Vec<request::MethodRequest>;

    bb0: {
        _3 = &((*_2).1: std::vec::Vec<request::MethodRequest>);
        _0 = Vec::<request::MethodRequest>::len(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:34:1: 34:20>::collect_requests(_1: &VerifyingBatch, _2: &TrustedState) -> Vec<request::MethodRequest> {
    debug self => _1;
    debug request_trusted_state => _2;
    let mut _0: std::vec::Vec<request::MethodRequest>;
    let _3: u64;
    let mut _5: std::iter::FlatMap<std::slice::Iter<'_, verifying_client::methods::VerifyingRequest>, std::iter::Cloned<std::slice::Iter<'_, request::MethodRequest>>, {closure@sdk/client/src/verifying_client/methods.rs:60:23: 60:32}>;
    let mut _6: std::slice::Iter<'_, verifying_client::methods::VerifyingRequest>;
    let _7: &[verifying_client::methods::VerifyingRequest];
    let mut _8: &std::vec::Vec<verifying_client::methods::VerifyingRequest>;
    let mut _9: bool;
    let _10: ();
    let mut _11: &mut std::vec::Vec<request::MethodRequest>;
    let mut _12: request::MethodRequest;
    let mut _13: std::option::Option<u64>;
    let mut _14: std::option::Option<u64>;
    let _15: ();
    let mut _16: &mut std::vec::Vec<request::MethodRequest>;
    let mut _17: request::MethodRequest;
    scope 1 {
        debug request_version => _3;
        let mut _4: std::vec::Vec<request::MethodRequest>;
        scope 2 {
            debug requests => _4;
        }
    }

    bb0: {
        _3 = TrustedState::version(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &((*_1).0: std::vec::Vec<verifying_client::methods::VerifyingRequest>);
        _7 = <Vec<VerifyingRequest> as Deref>::deref(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = core::slice::<impl [VerifyingRequest]>::iter(_7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = <std::slice::Iter<'_, VerifyingRequest> as Iterator>::flat_map::<Cloned<std::slice::Iter<'_, request::MethodRequest>>, {closure@sdk/client/src/verifying_client/methods.rs:60:23: 60:32}>(move _6, const ZeroSized: {closure@sdk/client/src/verifying_client/methods.rs:60:23: 60:32}) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = <std::iter::FlatMap<std::slice::Iter<'_, VerifyingRequest>, Cloned<std::slice::Iter<'_, request::MethodRequest>>, {closure@sdk/client/src/verifying_client/methods.rs:60:23: 60:32}> as Iterator>::collect::<Vec<request::MethodRequest>>(move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = TrustedState::need_accumulator(_2) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        switchInt(move _9) -> [0: bb9, otherwise: bb7];
    }

    bb7: {
        _11 = &mut _4;
        _13 = std::option::Option::<u64>::None;
        _14 = std::option::Option::<u64>::Some(_3);
        _12 = request::MethodRequest::get_accumulator_consistency_proof(move _13, move _14) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _10 = Vec::<request::MethodRequest>::push(move _11, move _12) -> [return: bb14, unwind: bb12];
    }

    bb9: {
        _16 = &mut _4;
        _17 = request::MethodRequest::get_state_proof(_3) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        _15 = Vec::<request::MethodRequest>::push(move _16, move _17) -> [return: bb11, unwind: bb12];
    }

    bb11: {
        _0 = move _4;
        return;
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14: {
        goto -> bb9;
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:34:1: 34:20>::collect_requests::{closure#0}(_1: &mut {closure@sdk/client/src/verifying_client/methods.rs:60:23: 60:32}, _2: &VerifyingRequest) -> Cloned<std::slice::Iter<'_, request::MethodRequest>> {
    debug request => _2;
    let mut _0: std::iter::Cloned<std::slice::Iter<'_, request::MethodRequest>>;
    let mut _3: std::slice::Iter<'_, request::MethodRequest>;
    let _4: &[request::MethodRequest];
    let mut _5: &std::vec::Vec<request::MethodRequest>;

    bb0: {
        _5 = &((*_2).1: std::vec::Vec<request::MethodRequest>);
        _4 = <Vec<request::MethodRequest> as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = core::slice::<impl [request::MethodRequest]>::iter(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = <std::slice::Iter<'_, request::MethodRequest> as Iterator>::cloned::<'_, request::MethodRequest>(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:34:1: 34:20>::verify_responses(_1: VerifyingBatch, _2: &TrustedState, _3: Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>) -> std::result::Result<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error> {
    debug self => _1;
    debug request_trusted_state => _2;
    debug responses => _3;
    let mut _0: std::result::Result<(std::option::Option<diem_types::trusted_state::TrustedState>, std::option::Option<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>), error::Error>;
    let _4: u64;
    let mut _6: &verifying_client::methods::VerifyingBatch;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: &std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _11: error::Error;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 2];
    let _17: [core::fmt::rt::Argument<'_>; 2];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &usize;
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &usize;
    let _22: usize;
    let mut _23: &std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _26: (response::MethodResponse, state::State);
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _28: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
    let mut _29: std::option::Option<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _30: &mut std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _31: isize;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_json_rpc_types::views::StateProofView>;
    let mut _36: std::result::Result<diem_json_rpc_types::views::StateProofView, error::Error>;
    let mut _37: response::MethodResponse;
    let mut _38: isize;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::state_proof::StateProof>;
    let mut _43: std::result::Result<diem_types::state_proof::StateProof, error::Error>;
    let mut _44: std::result::Result<diem_types::state_proof::StateProof, diem_crypto::error::Error>;
    let mut _45: &diem_json_rpc_types::views::StateProofView;
    let mut _46: isize;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>>;
    let mut _50: std::result::Result<(), error::Error>;
    let _51: &diem_types::ledger_info::LedgerInfo;
    let mut _52: &diem_types::state_proof::StateProof;
    let _53: &state::State;
    let mut _54: isize;
    let mut _56: std::iter::Flatten<std::slice::Iter<'_, std::result::Result<response::Response<response::MethodResponse>, error::Error>>>;
    let mut _57: std::iter::Flatten<std::slice::Iter<'_, std::result::Result<response::Response<response::MethodResponse>, error::Error>>>;
    let mut _58: std::slice::Iter<'_, std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let _59: &[std::result::Result<response::Response<response::MethodResponse>, error::Error>];
    let mut _60: &std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _62: std::option::Option<&response::Response<response::MethodResponse>>;
    let mut _63: &mut std::iter::Flatten<std::slice::Iter<'_, std::result::Result<response::Response<response::MethodResponse>, error::Error>>>;
    let mut _64: isize;
    let mut _66: bool;
    let mut _67: &&state::State;
    let _68: &state::State;
    let mut _69: &&state::State;
    let _70: &state::State;
    let mut _71: error::Error;
    let mut _73: std::fmt::Arguments<'_>;
    let mut _74: &[&str];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let _76: &[core::fmt::rt::Argument<'_>; 2];
    let _77: [core::fmt::rt::Argument<'_>; 2];
    let mut _78: core::fmt::rt::Argument<'_>;
    let _79: &state::State;
    let mut _80: core::fmt::rt::Argument<'_>;
    let _81: &&state::State;
    let _82: &state::State;
    let mut _84: bool;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<response::MethodResponse>>;
    let mut _87: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
    let mut _88: std::option::Option<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _89: &mut std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _90: isize;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_json_rpc_types::views::AccumulatorConsistencyProofView>;
    let mut _95: std::result::Result<diem_json_rpc_types::views::AccumulatorConsistencyProofView, error::Error>;
    let mut _96: response::MethodResponse;
    let mut _97: isize;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::proof::AccumulatorConsistencyProof>;
    let mut _102: std::result::Result<diem_types::proof::AccumulatorConsistencyProof, error::Error>;
    let mut _103: std::result::Result<diem_types::proof::AccumulatorConsistencyProof, diem_crypto::error::Error>;
    let mut _104: &diem_json_rpc_types::views::AccumulatorConsistencyProofView;
    let mut _105: isize;
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::proof::TransactionAccumulatorSummary>;
    let mut _109: std::result::Result<diem_types::proof::TransactionAccumulatorSummary, error::Error>;
    let mut _110: std::result::Result<diem_types::proof::TransactionAccumulatorSummary, diem_crypto::error::Error>;
    let mut _111: diem_types::proof::AccumulatorConsistencyProof;
    let mut _112: isize;
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::trusted_state::TrustedStateChange<'_>>;
    let mut _117: std::result::Result<diem_types::trusted_state::TrustedStateChange<'_>, error::Error>;
    let mut _118: std::result::Result<diem_types::trusted_state::TrustedStateChange<'_>, diem_crypto::error::Error>;
    let _119: &diem_types::state_proof::StateProof;
    let mut _120: std::option::Option<&diem_types::proof::TransactionAccumulatorSummary>;
    let mut _121: &std::option::Option<diem_types::proof::TransactionAccumulatorSummary>;
    let mut _122: isize;
    let mut _125: bool;
    let mut _126: &diem_types::epoch_change::EpochChangeProof;
    let mut _127: &diem_types::state_proof::StateProof;
    let mut _128: (std::option::Option<diem_types::trusted_state::TrustedState>, std::option::Option<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>);
    let mut _129: std::option::Option<diem_types::trusted_state::TrustedState>;
    let mut _130: std::option::Option<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>;
    let mut _132: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _134: std::iter::Map<std::vec::IntoIter<verifying_client::methods::VerifyingRequest>, {closure@sdk/client/src/verifying_client/methods.rs:154:18: 154:27}>;
    let mut _135: std::vec::IntoIter<verifying_client::methods::VerifyingRequest>;
    let mut _136: std::vec::Vec<verifying_client::methods::VerifyingRequest>;
    let mut _137: {closure@sdk/client/src/verifying_client/methods.rs:154:18: 154:27};
    let mut _138: &mut std::vec::IntoIter<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _139: &state::State;
    let mut _140: &diem_types::state_proof::StateProof;
    let mut _141: (std::option::Option<diem_types::trusted_state::TrustedState>, std::option::Option<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>);
    let mut _142: std::option::Option<diem_types::trusted_state::TrustedState>;
    let mut _143: std::option::Option<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>;
    let mut _146: bool;
    let mut _147: bool;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: bool;
    let mut _151: bool;
    scope 1 {
        debug request_version => _4;
        let _5: usize;
        scope 2 {
            debug num_requests => _5;
            let _12: std::string::String;
            let _24: response::MethodResponse;
            let _25: state::State;
            let _32: std::result::Result<std::convert::Infallible, error::Error>;
            let _33: response::Response<response::MethodResponse>;
            let mut _144: &[&str; 3];
            scope 3 {
                debug res => _12;
            }
            scope 4 {
                debug state_proof_response => _24;
                debug state => _25;
                let _34: diem_json_rpc_types::views::StateProofView;
                let _39: std::result::Result<std::convert::Infallible, error::Error>;
                let _40: diem_json_rpc_types::views::StateProofView;
                scope 9 {
                    debug state_proof_view => _34;
                    let _41: diem_types::state_proof::StateProof;
                    let _47: std::result::Result<std::convert::Infallible, error::Error>;
                    let _48: diem_types::state_proof::StateProof;
                    scope 14 {
                        debug state_proof => _41;
                        let _55: std::result::Result<std::convert::Infallible, error::Error>;
                        let mut _61: std::iter::Flatten<std::slice::Iter<'_, std::result::Result<response::Response<response::MethodResponse>, error::Error>>>;
                        let _83: std::option::Option<diem_types::proof::TransactionAccumulatorSummary>;
                        let _85: response::MethodResponse;
                        let _91: std::result::Result<std::convert::Infallible, error::Error>;
                        let _92: response::Response<response::MethodResponse>;
                        scope 19 {
                            debug residual => _55;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => const ();
                            scope 22 {
                            }
                        }
                        scope 23 {
                            debug iter => _61;
                            let _65: &response::Response<response::MethodResponse>;
                            scope 24 {
                                debug response => _65;
                                let _72: std::string::String;
                                let mut _145: &[&str; 2];
                                scope 25 {
                                    debug res => _72;
                                }
                            }
                        }
                        scope 26 {
                            debug maybe_accumulator => _83;
                            let _115: std::option::Option<diem_types::trusted_state::TrustedState>;
                            let _123: std::result::Result<std::convert::Infallible, error::Error>;
                            let _124: diem_types::trusted_state::TrustedStateChange<'_>;
                            scope 47 {
                                debug new_state => _115;
                                let mut _131: std::vec::IntoIter<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
                                scope 52 {
                                    debug responses_iter => _131;
                                    let _133: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
                                    scope 53 {
                                        debug validated_responses => _133;
                                    }
                                }
                            }
                            scope 48 {
                                debug residual => _123;
                                scope 49 {
                                }
                            }
                            scope 50 {
                                debug val => _124;
                                scope 51 {
                                }
                            }
                        }
                        scope 27 {
                            debug response => _85;
                            let _93: diem_json_rpc_types::views::AccumulatorConsistencyProofView;
                            let _98: std::result::Result<std::convert::Infallible, error::Error>;
                            let _99: diem_json_rpc_types::views::AccumulatorConsistencyProofView;
                            scope 32 {
                                debug consistency_proof_view => _93;
                                let _100: diem_types::proof::AccumulatorConsistencyProof;
                                let _106: std::result::Result<std::convert::Infallible, error::Error>;
                                let _107: diem_types::proof::AccumulatorConsistencyProof;
                                scope 37 {
                                    debug consistency_proof => _100;
                                    let _113: std::result::Result<std::convert::Infallible, error::Error>;
                                    let _114: diem_types::proof::TransactionAccumulatorSummary;
                                    scope 42 {
                                        debug accumulator_summary => _114;
                                    }
                                    scope 43 {
                                        debug residual => _113;
                                        scope 44 {
                                        }
                                    }
                                    scope 45 {
                                        debug val => _114;
                                        scope 46 {
                                        }
                                    }
                                }
                                scope 38 {
                                    debug residual => _106;
                                    scope 39 {
                                    }
                                }
                                scope 40 {
                                    debug val => _107;
                                    scope 41 {
                                    }
                                }
                            }
                            scope 33 {
                                debug residual => _98;
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug val => _99;
                                scope 36 {
                                }
                            }
                        }
                        scope 28 {
                            debug residual => _91;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug val => _92;
                            scope 31 {
                            }
                        }
                    }
                    scope 15 {
                        debug residual => _47;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _48;
                        scope 18 {
                        }
                    }
                }
                scope 10 {
                    debug residual => _39;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug val => _40;
                    scope 13 {
                    }
                }
            }
            scope 5 {
                debug residual => _32;
                scope 6 {
                }
            }
            scope 7 {
                debug val => _33;
                scope 8 {
                }
            }
        }
    }

    bb0: {
        _150 = const false;
        _149 = const false;
        _148 = const false;
        _147 = const false;
        _146 = const false;
        _151 = const false;
        _151 = const true;
        _150 = const true;
        _4 = TrustedState::version(_2) -> [return: bb1, unwind: bb117];
    }

    bb1: {
        _6 = &_1;
        _5 = VerifyingBatch::num_requests(move _6, _2) -> [return: bb2, unwind: bb117];
    }

    bb2: {
        _8 = _5;
        _10 = &_3;
        _9 = Vec::<std::result::Result<response::Response<MethodResponse>, error::Error>>::len(move _10) -> [return: bb3, unwind: bb117];
    }

    bb3: {
        _7 = Ne(move _8, move _9);
        switchInt(move _7) -> [0: bb11, otherwise: bb4];
    }

    bb4: {
        _144 = const _;
        _14 = _144 as &[&str] (PointerCoercion(Unsize));
        _19 = &_5;
        _18 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_19) -> [return: bb5, unwind: bb117];
    }

    bb5: {
        _23 = &_3;
        _22 = Vec::<std::result::Result<response::Response<MethodResponse>, error::Error>>::len(move _23) -> [return: bb6, unwind: bb117];
    }

    bb6: {
        _21 = &_22;
        _20 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_21) -> [return: bb7, unwind: bb117];
    }

    bb7: {
        _17 = [move _18, move _20];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb8, unwind: bb117];
    }

    bb8: {
        _12 = format(move _13) -> [return: bb9, unwind: bb117];
    }

    bb9: {
        _11 = error::Error::rpc_response::<std::string::String>(move _12) -> [return: bb10, unwind: bb117];
    }

    bb10: {
        _0 = std::result::Result::<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error>::Err(move _11);
        goto -> bb99;
    }

    bb11: {
        _30 = &mut _3;
        _29 = Vec::<std::result::Result<response::Response<MethodResponse>, error::Error>>::pop(move _30) -> [return: bb12, unwind: bb117];
    }

    bb12: {
        _28 = std::option::Option::<std::result::Result<response::Response<MethodResponse>, error::Error>>::unwrap(move _29) -> [return: bb13, unwind: bb117];
    }

    bb13: {
        _27 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _28) -> [return: bb14, unwind: bb117];
    }

    bb14: {
        _31 = discriminant(_27);
        switchInt(move _31) -> [0: bb15, 1: bb17, otherwise: bb16];
    }

    bb15: {
        _33 = move ((_27 as Continue).0: response::Response<response::MethodResponse>);
        _26 = response::Response::<MethodResponse>::into_parts(move _33) -> [return: bb18, unwind: bb117];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        _32 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _32) -> [return: bb120, unwind: bb117];
    }

    bb18: {
        _149 = const true;
        _24 = move (_26.0: response::MethodResponse);
        _25 = move (_26.1: state::State);
        _149 = const false;
        _37 = move _24;
        _36 = MethodResponse::try_into_get_state_proof(move _37) -> [return: bb19, unwind: bb115];
    }

    bb19: {
        _35 = <std::result::Result<StateProofView, error::Error> as Try>::branch(move _36) -> [return: bb20, unwind: bb115];
    }

    bb20: {
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb21, 1: bb22, otherwise: bb16];
    }

    bb21: {
        _40 = move ((_35 as Continue).0: diem_json_rpc_types::views::StateProofView);
        _34 = move _40;
        _45 = &_34;
        _44 = <StateProof as TryFrom<&StateProofView>>::try_from(move _45) -> [return: bb23, unwind: bb106];
    }

    bb22: {
        _39 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _39) -> [return: bb121, unwind: bb115];
    }

    bb23: {
        _43 = std::result::Result::<StateProof, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _44, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb24, unwind: bb106];
    }

    bb24: {
        _42 = <std::result::Result<StateProof, error::Error> as Try>::branch(move _43) -> [return: bb25, unwind: bb106];
    }

    bb25: {
        _46 = discriminant(_42);
        switchInt(move _46) -> [0: bb26, 1: bb27, otherwise: bb16];
    }

    bb26: {
        _48 = move ((_42 as Continue).0: diem_types::state_proof::StateProof);
        _41 = move _48;
        _52 = &_41;
        _51 = StateProof::latest_ledger_info(move _52) -> [return: bb28, unwind: bb105];
    }

    bb27: {
        _47 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _47) -> [return: bb122, unwind: bb106];
    }

    bb28: {
        _53 = &_25;
        _50 = verify_latest_li_matches_state(_51, _53) -> [return: bb29, unwind: bb105];
    }

    bb29: {
        _49 = <std::result::Result<(), error::Error> as Try>::branch(move _50) -> [return: bb30, unwind: bb105];
    }

    bb30: {
        _54 = discriminant(_49);
        switchInt(move _54) -> [0: bb31, 1: bb32, otherwise: bb16];
    }

    bb31: {
        _60 = &_3;
        _59 = <Vec<std::result::Result<response::Response<MethodResponse>, error::Error>> as Deref>::deref(move _60) -> [return: bb33, unwind: bb105];
    }

    bb32: {
        _55 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _55) -> [return: bb123, unwind: bb105];
    }

    bb33: {
        _58 = core::slice::<impl [std::result::Result<response::Response<MethodResponse>, error::Error>]>::iter(_59) -> [return: bb34, unwind: bb105];
    }

    bb34: {
        _57 = <std::slice::Iter<'_, std::result::Result<response::Response<MethodResponse>, error::Error>> as Iterator>::flatten(move _58) -> [return: bb35, unwind: bb105];
    }

    bb35: {
        _56 = <std::iter::Flatten<std::slice::Iter<'_, std::result::Result<response::Response<MethodResponse>, error::Error>>> as IntoIterator>::into_iter(move _57) -> [return: bb36, unwind: bb105];
    }

    bb36: {
        _61 = move _56;
        goto -> bb37;
    }

    bb37: {
        _63 = &mut _61;
        _62 = <std::iter::Flatten<std::slice::Iter<'_, std::result::Result<response::Response<MethodResponse>, error::Error>>> as Iterator>::next(_63) -> [return: bb38, unwind: bb105];
    }

    bb38: {
        _64 = discriminant(_62);
        switchInt(move _64) -> [0: bb40, 1: bb39, otherwise: bb16];
    }

    bb39: {
        _65 = ((_62 as Some).0: &response::Response<response::MethodResponse>);
        _68 = response::Response::<MethodResponse>::state(_65) -> [return: bb41, unwind: bb105];
    }

    bb40: {
        _84 = TrustedState::need_accumulator(_2) -> [return: bb50, unwind: bb105];
    }

    bb41: {
        _67 = &_68;
        _70 = &_25;
        _69 = &_70;
        _66 = <&state::State as PartialEq>::ne(move _67, move _69) -> [return: bb42, unwind: bb105];
    }

    bb42: {
        switchInt(move _66) -> [0: bb37, otherwise: bb43];
    }

    bb43: {
        _145 = const _;
        _74 = _145 as &[&str] (PointerCoercion(Unsize));
        _79 = &_25;
        _78 = core::fmt::rt::Argument::<'_>::new_debug::<state::State>(_79) -> [return: bb44, unwind: bb105];
    }

    bb44: {
        _82 = response::Response::<MethodResponse>::state(_65) -> [return: bb45, unwind: bb105];
    }

    bb45: {
        _81 = &_82;
        _80 = core::fmt::rt::Argument::<'_>::new_debug::<&state::State>(_81) -> [return: bb46, unwind: bb105];
    }

    bb46: {
        _77 = [move _78, move _80];
        _76 = &_77;
        _75 = _76 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _73 = Arguments::<'_>::new_v1(move _74, move _75) -> [return: bb47, unwind: bb105];
    }

    bb47: {
        _72 = format(move _73) -> [return: bb48, unwind: bb105];
    }

    bb48: {
        _71 = error::Error::rpc_response::<std::string::String>(move _72) -> [return: bb49, unwind: bb105];
    }

    bb49: {
        _0 = std::result::Result::<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error>::Err(move _71);
        goto -> bb96;
    }

    bb50: {
        switchInt(move _84) -> [0: bb73, otherwise: bb51];
    }

    bb51: {
        _89 = &mut _3;
        _88 = Vec::<std::result::Result<response::Response<MethodResponse>, error::Error>>::pop(move _89) -> [return: bb52, unwind: bb105];
    }

    bb52: {
        _87 = std::option::Option::<std::result::Result<response::Response<MethodResponse>, error::Error>>::unwrap(move _88) -> [return: bb53, unwind: bb105];
    }

    bb53: {
        _86 = <std::result::Result<response::Response<MethodResponse>, error::Error> as Try>::branch(move _87) -> [return: bb54, unwind: bb105];
    }

    bb54: {
        _90 = discriminant(_86);
        switchInt(move _90) -> [0: bb55, 1: bb56, otherwise: bb16];
    }

    bb55: {
        _92 = move ((_86 as Continue).0: response::Response<response::MethodResponse>);
        _85 = response::Response::<MethodResponse>::into_inner(move _92) -> [return: bb57, unwind: bb105];
    }

    bb56: {
        _91 = move ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _91) -> [return: bb124, unwind: bb105];
    }

    bb57: {
        _148 = const true;
        _148 = const false;
        _96 = move _85;
        _95 = MethodResponse::try_into_get_accumulator_consistency_proof(move _96) -> [return: bb58, unwind: bb113];
    }

    bb58: {
        _94 = <std::result::Result<AccumulatorConsistencyProofView, error::Error> as Try>::branch(move _95) -> [return: bb59, unwind: bb113];
    }

    bb59: {
        _97 = discriminant(_94);
        switchInt(move _97) -> [0: bb60, 1: bb61, otherwise: bb16];
    }

    bb60: {
        _99 = move ((_94 as Continue).0: diem_json_rpc_types::views::AccumulatorConsistencyProofView);
        _93 = move _99;
        _104 = &_93;
        _103 = <AccumulatorConsistencyProof as TryFrom<&AccumulatorConsistencyProofView>>::try_from(move _104) -> [return: bb62, unwind: bb104];
    }

    bb61: {
        _98 = move ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _98) -> [return: bb125, unwind: bb113];
    }

    bb62: {
        _102 = std::result::Result::<AccumulatorConsistencyProof, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _103, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb63, unwind: bb104];
    }

    bb63: {
        _101 = <std::result::Result<AccumulatorConsistencyProof, error::Error> as Try>::branch(move _102) -> [return: bb64, unwind: bb104];
    }

    bb64: {
        _105 = discriminant(_101);
        switchInt(move _105) -> [0: bb65, 1: bb66, otherwise: bb16];
    }

    bb65: {
        _107 = move ((_101 as Continue).0: diem_types::proof::AccumulatorConsistencyProof);
        _147 = const true;
        _100 = move _107;
        _147 = const false;
        _111 = move _100;
        _110 = TransactionAccumulatorSummary::try_from_genesis_proof(move _111, _4) -> [return: bb67, unwind: bb111];
    }

    bb66: {
        _106 = move ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _106) -> [return: bb126, unwind: bb104];
    }

    bb67: {
        _109 = std::result::Result::<TransactionAccumulatorSummary, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::invalid_proof::<diem_crypto::error::Error>}>(move _110, error::Error::invalid_proof::<diem_crypto::error::Error>) -> [return: bb68, unwind: bb111];
    }

    bb68: {
        _108 = <std::result::Result<TransactionAccumulatorSummary, error::Error> as Try>::branch(move _109) -> [return: bb69, unwind: bb111];
    }

    bb69: {
        _112 = discriminant(_108);
        switchInt(move _112) -> [0: bb70, 1: bb71, otherwise: bb16];
    }

    bb70: {
        _114 = move ((_108 as Continue).0: diem_types::proof::TransactionAccumulatorSummary);
        _83 = std::option::Option::<TransactionAccumulatorSummary>::Some(move _114);
        _147 = const false;
        drop(_93) -> [return: bb72, unwind: bb113];
    }

    bb71: {
        _113 = move ((_108 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _113) -> [return: bb127, unwind: bb111];
    }

    bb72: {
        _148 = const false;
        goto -> bb74;
    }

    bb73: {
        _83 = std::option::Option::<TransactionAccumulatorSummary>::None;
        goto -> bb74;
    }

    bb74: {
        _119 = &_41;
        _121 = &_83;
        _120 = std::option::Option::<TransactionAccumulatorSummary>::as_ref(move _121) -> [return: bb75, unwind: bb103];
    }

    bb75: {
        _118 = TrustedState::verify_and_ratchet(_2, _119, move _120) -> [return: bb76, unwind: bb103];
    }

    bb76: {
        _117 = std::result::Result::<TrustedStateChange<'_>, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::invalid_proof::<diem_crypto::error::Error>}>(move _118, error::Error::invalid_proof::<diem_crypto::error::Error>) -> [return: bb77, unwind: bb103];
    }

    bb77: {
        _116 = <std::result::Result<TrustedStateChange<'_>, error::Error> as Try>::branch(move _117) -> [return: bb78, unwind: bb103];
    }

    bb78: {
        _122 = discriminant(_116);
        switchInt(move _122) -> [0: bb79, 1: bb80, otherwise: bb16];
    }

    bb79: {
        _124 = move ((_116 as Continue).0: diem_types::trusted_state::TrustedStateChange<'_>);
        _115 = TrustedStateChange::<'_>::new_state(move _124) -> [return: bb81, unwind: bb103];
    }

    bb80: {
        _123 = move ((_116 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _123) -> [return: bb128, unwind: bb103];
    }

    bb81: {
        _146 = const true;
        _127 = &_41;
        _126 = StateProof::epoch_changes(move _127) -> [return: bb82, unwind: bb109];
    }

    bb82: {
        _125 = ((*_126).1: bool);
        switchInt(move _125) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _146 = const false;
        _129 = move _115;
        _130 = std::option::Option::<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>::None;
        _128 = (move _129, move _130);
        _0 = std::result::Result::<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error>::Ok(move _128);
        goto -> bb93;
    }

    bb84: {
        _150 = const false;
        _132 = move _3;
        _131 = <Vec<std::result::Result<response::Response<MethodResponse>, error::Error>> as IntoIterator>::into_iter(move _132) -> [return: bb85, unwind: bb109];
    }

    bb85: {
        _151 = const false;
        _136 = move (_1.0: std::vec::Vec<verifying_client::methods::VerifyingRequest>);
        _135 = <Vec<VerifyingRequest> as IntoIterator>::into_iter(move _136) -> [return: bb86, unwind: bb102];
    }

    bb86: {
        _138 = &mut _131;
        _139 = &_25;
        _140 = &_41;
        _137 = {closure@sdk/client/src/verifying_client/methods.rs:154:18: 154:27} { responses_iter: move _138, state: move _139, state_proof: move _140 };
        _134 = <std::vec::IntoIter<VerifyingRequest> as Iterator>::map::<std::result::Result<response::Response<MethodResponse>, error::Error>, {closure@sdk/client/src/verifying_client/methods.rs:154:18: 154:27}>(move _135, move _137) -> [return: bb87, unwind: bb102];
    }

    bb87: {
        _133 = <std::iter::Map<std::vec::IntoIter<VerifyingRequest>, {closure@sdk/client/src/verifying_client/methods.rs:154:18: 154:27}> as Iterator>::collect::<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>(move _134) -> [return: bb88, unwind: bb102];
    }

    bb88: {
        _146 = const false;
        _142 = move _115;
        _143 = std::option::Option::<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>::Some(move _133);
        _141 = (move _142, move _143);
        _0 = std::result::Result::<(std::option::Option<TrustedState>, std::option::Option<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>), error::Error>::Ok(move _141);
        drop(_131) -> [return: bb89, unwind: bb109];
    }

    bb89: {
        _146 = const false;
        drop(_83) -> [return: bb90, unwind: bb105];
    }

    bb90: {
        drop(_41) -> [return: bb91, unwind: bb106];
    }

    bb91: {
        drop(_34) -> [return: bb92, unwind: bb115];
    }

    bb92: {
        _149 = const false;
        goto -> bb101;
    }

    bb93: {
        _146 = const false;
        drop(_83) -> [return: bb96, unwind: bb105];
    }

    bb94: {
        _147 = const false;
        drop(_93) -> [return: bb95, unwind: bb113];
    }

    bb95: {
        _148 = const false;
        goto -> bb96;
    }

    bb96: {
        drop(_41) -> [return: bb97, unwind: bb106];
    }

    bb97: {
        drop(_34) -> [return: bb98, unwind: bb115];
    }

    bb98: {
        _149 = const false;
        goto -> bb99;
    }

    bb99: {
        drop(_3) -> [return: bb100, unwind: bb119];
    }

    bb100: {
        drop(_1) -> [return: bb101, unwind continue];
    }

    bb101: {
        return;
    }

    bb102 (cleanup): {
        drop(_131) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_83) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_93) -> [return: bb113, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_41) -> [return: bb106, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_34) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        resume;
    }

    bb108 (cleanup): {
        drop(_115) -> [return: bb103, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        switchInt(_146) -> [0: bb103, otherwise: bb108];
    }

    bb110 (cleanup): {
        drop(_100) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        switchInt(_147) -> [0: bb104, otherwise: bb110];
    }

    bb112 (cleanup): {
        drop(_85) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        switchInt(_148) -> [0: bb105, otherwise: bb112];
    }

    bb114 (cleanup): {
        drop(_24) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        switchInt(_149) -> [0: bb117, otherwise: bb114];
    }

    bb116 (cleanup): {
        drop(_3) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        switchInt(_150) -> [0: bb119, otherwise: bb116];
    }

    bb118 (cleanup): {
        drop((_1.0: std::vec::Vec<verifying_client::methods::VerifyingRequest>)) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        switchInt(_151) -> [0: bb107, otherwise: bb118];
    }

    bb120: {
        goto -> bb99;
    }

    bb121: {
        goto -> bb98;
    }

    bb122: {
        goto -> bb97;
    }

    bb123: {
        goto -> bb96;
    }

    bb124: {
        goto -> bb95;
    }

    bb125: {
        goto -> bb95;
    }

    bb126: {
        goto -> bb94;
    }

    bb127: {
        goto -> bb94;
    }

    bb128: {
        goto -> bb93;
    }
}

promoted[0] in methods::<impl at sdk/client/src/verifying_client/methods.rs:34:1: 34:20>::verify_responses: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "expected ", const " responses, received ", const " responses in batch"];
        _0 = &_1;
        return;
    }
}

promoted[1] in methods::<impl at sdk/client/src/verifying_client/methods.rs:34:1: 34:20>::verify_responses: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "expected all responses in batch to have the same metadata: ", const ", received unexpected response metadata: "];
        _0 = &_1;
        return;
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:34:1: 34:20>::verify_responses::{closure#0}(_1: &mut {closure@sdk/client/src/verifying_client/methods.rs:154:18: 154:27}, _2: VerifyingRequest) -> std::result::Result<response::Response<MethodResponse>, error::Error> {
    debug request => _2;
    debug responses_iter => (*((*_1).0: &mut std::vec::IntoIter<std::result::Result<response::Response<response::MethodResponse>, error::Error>>));
    debug state => (*((*_1).1: &state::State));
    debug state_proof => (*((*_1).2: &diem_types::state_proof::StateProof));
    let mut _0: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
    let _3: usize;
    let mut _4: &std::vec::Vec<request::MethodRequest>;
    let mut _6: std::iter::Take<&mut std::vec::IntoIter<std::result::Result<response::Response<response::MethodResponse>, error::Error>>>;
    let mut _7: &mut std::vec::IntoIter<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _8: verifying_client::methods::VerifyingRequest;
    let mut _9: &mut std::vec::IntoIter<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _10: &state::State;
    let mut _11: &diem_types::state_proof::StateProof;
    let mut _12: bool;
    scope 1 {
        debug n => _3;
        let _5: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
        scope 2 {
            debug subresponses => _5;
        }
    }

    bb0: {
        _12 = const false;
        _12 = const true;
        _4 = &(_2.1: std::vec::Vec<request::MethodRequest>);
        _3 = Vec::<request::MethodRequest>::len(move _4) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        _9 = deref_copy ((*_1).0: &mut std::vec::IntoIter<std::result::Result<response::Response<response::MethodResponse>, error::Error>>);
        _7 = <std::vec::IntoIter<std::result::Result<response::Response<MethodResponse>, error::Error>> as Iterator>::by_ref(_9) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _6 = <&mut std::vec::IntoIter<std::result::Result<response::Response<MethodResponse>, error::Error>> as Iterator>::take(_7, _3) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _5 = <std::iter::Take<&mut std::vec::IntoIter<std::result::Result<response::Response<MethodResponse>, error::Error>>> as Iterator>::collect::<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>>(move _6) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _12 = const false;
        _8 = move _2;
        _10 = deref_copy ((*_1).1: &state::State);
        _11 = deref_copy ((*_1).2: &diem_types::state_proof::StateProof);
        _0 = VerifyingRequest::validate_subresponses(move _8, _10, _11, move _5) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_12) -> [0: bb6, otherwise: bb7];
    }
}

fn verify_latest_li_matches_state(_1: &LedgerInfo, _2: &state::State) -> std::result::Result<(), error::Error> {
    debug latest_li => _1;
    debug state => _2;
    let mut _0: std::result::Result<(), error::Error>;
    let mut _3: bool;
    let mut _4: u64;
    let mut _5: u64;
    let mut _6: error::Error;
    let _7: std::string::String;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 2];
    let _12: [core::fmt::rt::Argument<'_>; 2];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &u64;
    let _15: u64;
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &u64;
    let mut _18: bool;
    let mut _19: u64;
    let mut _20: u64;
    let mut _21: error::Error;
    let _22: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let _26: &[core::fmt::rt::Argument<'_>; 2];
    let _27: [core::fmt::rt::Argument<'_>; 2];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &u64;
    let _30: u64;
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &u64;
    let mut _33: &[&str; 3];
    let mut _34: &[&str; 3];
    scope 1 {
        debug res => _7;
    }
    scope 2 {
        debug res => _22;
    }

    bb0: {
        _4 = LedgerInfo::version(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = ((*_2).1: u64);
        _3 = Ne(move _4, move _5);
        switchInt(move _3) -> [0: bb9, otherwise: bb2];
    }

    bb2: {
        _33 = const _;
        _9 = _33 as &[&str] (PointerCoercion(Unsize));
        _15 = LedgerInfo::version(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        _14 = &_15;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_14) -> [return: bb4, unwind continue];
    }

    bb4: {
        _17 = &((*_2).1: u64);
        _16 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_17) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = [move _13, move _16];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = format(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _6 = error::Error::invalid_proof::<std::string::String>(move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = std::result::Result::<(), error::Error>::Err(move _6);
        goto -> bb19;
    }

    bb9: {
        _19 = LedgerInfo::timestamp_usecs(_1) -> [return: bb10, unwind continue];
    }

    bb10: {
        _20 = ((*_2).2: u64);
        _18 = Ne(move _19, move _20);
        switchInt(move _18) -> [0: bb18, otherwise: bb11];
    }

    bb11: {
        _34 = const _;
        _24 = _34 as &[&str] (PointerCoercion(Unsize));
        _30 = LedgerInfo::timestamp_usecs(_1) -> [return: bb12, unwind continue];
    }

    bb12: {
        _29 = &_30;
        _28 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_29) -> [return: bb13, unwind continue];
    }

    bb13: {
        _32 = &((*_2).2: u64);
        _31 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_32) -> [return: bb14, unwind continue];
    }

    bb14: {
        _27 = [move _28, move _31];
        _26 = &_27;
        _25 = _26 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _23 = Arguments::<'_>::new_v1(move _24, move _25) -> [return: bb15, unwind continue];
    }

    bb15: {
        _22 = format(move _23) -> [return: bb16, unwind continue];
    }

    bb16: {
        _21 = error::Error::invalid_proof::<std::string::String>(move _22) -> [return: bb17, unwind continue];
    }

    bb17: {
        _0 = std::result::Result::<(), error::Error>::Err(move _21);
        goto -> bb19;
    }

    bb18: {
        _0 = std::result::Result::<(), error::Error>::Ok(const ());
        goto -> bb19;
    }

    bb19: {
        return;
    }
}

promoted[0] in verify_latest_li_matches_state: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "latest LedgerInfo version (", const ") doesn't match response version (", const ")"];
        _0 = &_1;
        return;
    }
}

promoted[1] in verify_latest_li_matches_state: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "latest LedgerInfo timestamp (", const ") doesn't match response timestamp (", const ")"];
        _0 = &_1;
        return;
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:185:10: 185:15>::clone(_1: &RequestContext<'_>) -> RequestContext<'_> {
    debug self => _1;
    let mut _0: verifying_client::methods::RequestContext<'_>;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:200:1: 200:22>::new(_1: request::MethodRequest, _2: Vec<request::MethodRequest>, _3: Box<dyn for<'a, 'b> FnOnce(RequestContext<'a>, &'b [MethodResponse]) -> std::result::Result<MethodResponse, error::Error>>) -> VerifyingRequest {
    debug request => _1;
    debug subrequests => _2;
    debug callback => _3;
    let mut _0: verifying_client::methods::VerifyingRequest;

    bb0: {
        _0 = VerifyingRequest { request: move _1, subrequests: move _2, callback: move _3 };
        return;
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:200:1: 200:22>::map(_1: VerifyingRequest, _2: F) -> VerifyingRequest {
    debug self => _1;
    debug f => _2;
    let mut _0: verifying_client::methods::VerifyingRequest;
    let _3: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
    let mut _5: std::boxed::Box<{closure@sdk/client/src/verifying_client/methods.rs:218:50: 218:75}>;
    let mut _6: {closure@sdk/client/src/verifying_client/methods.rs:218:50: 218:75};
    let mut _7: request::MethodRequest;
    let mut _8: std::vec::Vec<request::MethodRequest>;
    let mut _9: bool;
    let mut _10: bool;
    scope 1 {
        debug inner => _3;
        let _4: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
        scope 2 {
            debug callback => _4;
        }
    }

    bb0: {
        _10 = const false;
        _9 = const false;
        _9 = const true;
        _10 = const true;
        _3 = move (_1.2: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>);
        _6 = {closure@sdk/client/src/verifying_client/methods.rs:218:50: 218:75} { inner: move _3, f: move _2 };
        _5 = Box::<{closure@sdk/client/src/verifying_client/methods.rs:218:50: 218:75}>::new(move _6) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _4 = move _5 as std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>> (PointerCoercion(Unsize));
        _10 = const false;
        _7 = move (_1.0: request::MethodRequest);
        _9 = const false;
        _8 = move (_1.1: std::vec::Vec<request::MethodRequest>);
        _0 = VerifyingRequest::new(move _7, move _8, move _4) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        switchInt(_9) -> [0: bb3, otherwise: bb5];
    }

    bb5 (cleanup): {
        drop((_1.1: std::vec::Vec<request::MethodRequest>)) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop((_1.0: request::MethodRequest)) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_10) -> [0: bb4, otherwise: bb6];
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:200:1: 200:22>::map::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:218:50: 218:75}, _2: RequestContext<'_>, _3: &[MethodResponse]) -> std::result::Result<MethodResponse, error::Error> {
    debug ctxt => _2;
    debug subresponses => _3;
    debug inner => (_1.0: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>);
    debug f => (_1.1: F);
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let _4: response::MethodResponse;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::MethodResponse>;
    let mut _6: std::result::Result<response::MethodResponse, error::Error>;
    let mut _7: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
    let mut _8: (verifying_client::methods::RequestContext<'_>, &[response::MethodResponse]);
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::Error>;
    let _11: response::MethodResponse;
    let mut _12: response::MethodResponse;
    let mut _13: F;
    let mut _14: (verifying_client::methods::RequestContext<'_>, response::MethodResponse);
    let mut _15: response::MethodResponse;
    let mut _16: bool;
    let mut _17: bool;
    scope 1 {
        debug response => _4;
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        _16 = const false;
        _17 = const false;
        _17 = const true;
        _7 = move (_1.0: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>);
        _8 = (_2, _3);
        _6 = <Box<dyn for<'a, 'b> FnOnce(RequestContext<'a>, &'b [MethodResponse]) -> std::result::Result<MethodResponse, error::Error>> as FnOnce<(RequestContext<'_>, &[MethodResponse])>>::call_once(move _7, move _8) -> [return: bb1, unwind: bb13];
    }

    bb1: {
        _5 = <std::result::Result<MethodResponse, error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_5 as Continue).0: response::MethodResponse);
        _16 = const true;
        _4 = move _11;
        _17 = const false;
        _13 = move (_1.1: F);
        _16 = const false;
        _15 = move _4;
        _14 = (_2, move _15);
        _12 = <F as FnOnce<(RequestContext<'_>, MethodResponse)>>::call_once(move _13, move _14) -> [return: bb7, unwind: bb11];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _16 = const false;
        drop((_1.1: F)) -> [return: bb8, unwind continue];
    }

    bb7: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Ok(move _12);
        _16 = const false;
        goto -> bb8;
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_4) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_16) -> [0: bb13, otherwise: bb10];
    }

    bb12 (cleanup): {
        drop((_1.1: F)) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_17) -> [0: bb9, otherwise: bb12];
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:200:1: 200:22>::validate_subresponses(_1: VerifyingRequest, _2: &state::State, _3: &StateProof, _4: Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>) -> std::result::Result<response::Response<MethodResponse>, error::Error> {
    debug self => _1;
    debug state => _2;
    debug state_proof => _3;
    debug subresponses => _4;
    let mut _0: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: &std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _8: usize;
    let mut _9: &std::vec::Vec<request::MethodRequest>;
    let mut _10: error::Error;
    let _11: std::string::String;
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 3];
    let _16: [core::fmt::rt::Argument<'_>; 3];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &usize;
    let _19: usize;
    let mut _20: &std::vec::Vec<request::MethodRequest>;
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &Method;
    let _23: Method;
    let mut _24: &request::MethodRequest;
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &usize;
    let _27: usize;
    let mut _28: &std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let _29: verifying_client::methods::RequestContext<'_>;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<response::MethodResponse>>;
    let mut _32: std::result::Result<std::vec::Vec<response::MethodResponse>, error::Error>;
    let mut _33: std::iter::Map<std::vec::IntoIter<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, {closure@sdk/client/src/verifying_client/methods.rs:245:18: 245:26}>;
    let mut _34: std::vec::IntoIter<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _35: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _36: isize;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::MethodResponse>;
    let mut _41: std::result::Result<response::MethodResponse, error::Error>;
    let mut _42: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
    let mut _43: (verifying_client::methods::RequestContext<'_>, &[response::MethodResponse]);
    let _44: &[response::MethodResponse];
    let mut _45: &std::vec::Vec<response::MethodResponse>;
    let mut _46: isize;
    let mut _49: response::Response<response::MethodResponse>;
    let mut _50: response::MethodResponse;
    let mut _51: state::State;
    let mut _52: &[&str; 4];
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    scope 1 {
        debug res => _11;
    }
    scope 2 {
        debug ctxt => _29;
        let _30: std::vec::Vec<response::MethodResponse>;
        let _37: std::result::Result<std::convert::Infallible, error::Error>;
        let _38: std::vec::Vec<response::MethodResponse>;
        scope 3 {
            debug subresponses_only => _30;
            let _39: response::MethodResponse;
            let _47: std::result::Result<std::convert::Infallible, error::Error>;
            let _48: response::MethodResponse;
            scope 8 {
                debug response => _39;
            }
            scope 9 {
                debug residual => _47;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _48;
                scope 12 {
                }
            }
        }
        scope 4 {
            debug residual => _37;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _38;
            scope 7 {
            }
        }
    }

    bb0: {
        _53 = const false;
        _56 = const false;
        _57 = const false;
        _55 = const false;
        _54 = const false;
        _54 = const true;
        _53 = const true;
        _7 = &_4;
        _6 = Vec::<std::result::Result<response::Response<MethodResponse>, error::Error>>::len(move _7) -> [return: bb1, unwind: bb52];
    }

    bb1: {
        _9 = &(_1.1: std::vec::Vec<request::MethodRequest>);
        _8 = Vec::<request::MethodRequest>::len(move _9) -> [return: bb2, unwind: bb52];
    }

    bb2: {
        _5 = Ne(move _6, move _8);
        switchInt(move _5) -> [0: bb13, otherwise: bb3];
    }

    bb3: {
        _52 = const _;
        _13 = _52 as &[&str] (PointerCoercion(Unsize));
        _20 = &(_1.1: std::vec::Vec<request::MethodRequest>);
        _19 = Vec::<request::MethodRequest>::len(move _20) -> [return: bb4, unwind: bb52];
    }

    bb4: {
        _18 = &_19;
        _17 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_18) -> [return: bb5, unwind: bb52];
    }

    bb5: {
        _24 = &(_1.0: request::MethodRequest);
        _23 = request::MethodRequest::method(move _24) -> [return: bb6, unwind: bb52];
    }

    bb6: {
        _22 = &_23;
        _21 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_22) -> [return: bb7, unwind: bb52];
    }

    bb7: {
        _28 = &_4;
        _27 = Vec::<std::result::Result<response::Response<MethodResponse>, error::Error>>::len(move _28) -> [return: bb8, unwind: bb52];
    }

    bb8: {
        _26 = &_27;
        _25 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_26) -> [return: bb9, unwind: bb52];
    }

    bb9: {
        _16 = [move _17, move _21, move _25];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb10, unwind: bb52];
    }

    bb10: {
        _11 = format(move _12) -> [return: bb11, unwind: bb52];
    }

    bb11: {
        _10 = error::Error::rpc_response::<std::string::String>(move _11) -> [return: bb12, unwind: bb52];
    }

    bb12: {
        _0 = std::result::Result::<response::Response<MethodResponse>, error::Error>::Err(move _10);
        goto -> bb39;
    }

    bb13: {
        _29 = RequestContext::<'_> { state: _2, state_proof: _3 };
        _53 = const false;
        _35 = move _4;
        _34 = <Vec<std::result::Result<response::Response<MethodResponse>, error::Error>> as IntoIterator>::into_iter(move _35) -> [return: bb14, unwind: bb52];
    }

    bb14: {
        _33 = <std::vec::IntoIter<std::result::Result<response::Response<MethodResponse>, error::Error>> as Iterator>::map::<std::result::Result<MethodResponse, error::Error>, {closure@sdk/client/src/verifying_client/methods.rs:245:18: 245:26}>(move _34, const ZeroSized: {closure@sdk/client/src/verifying_client/methods.rs:245:18: 245:26}) -> [return: bb15, unwind: bb52];
    }

    bb15: {
        _32 = <std::iter::Map<std::vec::IntoIter<std::result::Result<response::Response<MethodResponse>, error::Error>>, {closure@sdk/client/src/verifying_client/methods.rs:245:18: 245:26}> as Iterator>::collect::<std::result::Result<Vec<MethodResponse>, error::Error>>(move _33) -> [return: bb16, unwind: bb52];
    }

    bb16: {
        _31 = <std::result::Result<Vec<MethodResponse>, error::Error> as Try>::branch(move _32) -> [return: bb17, unwind: bb52];
    }

    bb17: {
        _36 = discriminant(_31);
        switchInt(move _36) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        _38 = move ((_31 as Continue).0: std::vec::Vec<response::MethodResponse>);
        _30 = move _38;
        _54 = const false;
        _57 = const true;
        _42 = move (_1.2: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>);
        _45 = &_30;
        _44 = Vec::<MethodResponse>::as_slice(move _45) -> [return: bb21, unwind: bb50];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        _37 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<response::Response<MethodResponse>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _37) -> [return: bb56, unwind: bb52];
    }

    bb21: {
        _43 = (_29, _44);
        _57 = const false;
        _41 = <Box<dyn for<'a, 'b> FnOnce(RequestContext<'a>, &'b [MethodResponse]) -> std::result::Result<MethodResponse, error::Error>> as FnOnce<(RequestContext<'_>, &[MethodResponse])>>::call_once(move _42, move _43) -> [return: bb22, unwind: bb50];
    }

    bb22: {
        _57 = const false;
        _40 = <std::result::Result<MethodResponse, error::Error> as Try>::branch(move _41) -> [return: bb23, unwind: bb33];
    }

    bb23: {
        _46 = discriminant(_40);
        switchInt(move _46) -> [0: bb24, 1: bb25, otherwise: bb19];
    }

    bb24: {
        _48 = move ((_40 as Continue).0: response::MethodResponse);
        _56 = const true;
        _39 = move _48;
        _56 = const false;
        _55 = const true;
        _50 = move _39;
        _51 = <state::State as Clone>::clone(_2) -> [return: bb27, unwind: bb47];
    }

    bb25: {
        _47 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<response::Response<MethodResponse>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _47) -> [return: bb26, unwind: bb33];
    }

    bb26: {
        _56 = const false;
        drop(_30) -> [return: bb39, unwind: bb52];
    }

    bb27: {
        _55 = const false;
        _49 = response::Response::<MethodResponse>::new(move _50, move _51) -> [return: bb28, unwind: bb47];
    }

    bb28: {
        _55 = const false;
        _0 = std::result::Result::<response::Response<MethodResponse>, error::Error>::Ok(move _49);
        _56 = const false;
        drop(_30) -> [return: bb29, unwind: bb52];
    }

    bb29: {
        drop((_1.0: request::MethodRequest)) -> [return: bb37, unwind: bb36];
    }

    bb30: {
        drop((_1.0: request::MethodRequest)) -> [return: bb45, unwind: bb42];
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        switchInt(_56) -> [0: bb33, otherwise: bb48];
    }

    bb33 (cleanup): {
        drop(_30) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop((_1.0: request::MethodRequest)) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }

    bb36 (cleanup): {
        drop((_1.1: std::vec::Vec<request::MethodRequest>)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb37: {
        drop((_1.1: std::vec::Vec<request::MethodRequest>)) -> [return: bb31, unwind continue];
    }

    bb38: {
        drop(_4) -> [return: bb30, unwind: bb34];
    }

    bb39: {
        switchInt(_53) -> [0: bb30, otherwise: bb38];
    }

    bb40 (cleanup): {
        switchInt(_54) -> [0: bb35, otherwise: bb41];
    }

    bb41 (cleanup): {
        drop((_1.2: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop((_1.1: std::vec::Vec<request::MethodRequest>)) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb43: {
        switchInt(_54) -> [0: bb31, otherwise: bb44];
    }

    bb44: {
        drop((_1.2: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>)) -> [return: bb31, unwind continue];
    }

    bb45: {
        drop((_1.1: std::vec::Vec<request::MethodRequest>)) -> [return: bb43, unwind: bb40];
    }

    bb46 (cleanup): {
        drop(_50) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        switchInt(_55) -> [0: bb32, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_39) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_42) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        switchInt(_57) -> [0: bb33, otherwise: bb49];
    }

    bb51 (cleanup): {
        drop(_4) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        switchInt(_53) -> [0: bb34, otherwise: bb51];
    }

    bb53 (cleanup): {
        switchInt(_54) -> [0: bb35, otherwise: bb54];
    }

    bb54 (cleanup): {
        drop((_1.2: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop((_1.1: std::vec::Vec<request::MethodRequest>)) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb56: {
        goto -> bb39;
    }
}

promoted[0] in methods::<impl at sdk/client/src/verifying_client/methods.rs:200:1: 200:22>::validate_subresponses: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "expected ", const " subresponses for our request ", const ", received ", const " subresponses in batch"];
        _0 = &_1;
        return;
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:200:1: 200:22>::validate_subresponses::{closure#0}(_1: &mut {closure@sdk/client/src/verifying_client/methods.rs:245:18: 245:26}, _2: std::result::Result<response::Response<MethodResponse>, error::Error>) -> std::result::Result<MethodResponse, error::Error> {
    debug result => _2;
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;

    bb0: {
        _0 = std::result::Result::<response::Response<MethodResponse>, error::Error>::map::<MethodResponse, fn(response::Response<MethodResponse>) -> MethodResponse {response::Response::<MethodResponse>::into_inner}>(move _2, response::Response::<MethodResponse>::into_inner) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn methods::<impl at sdk/client/src/verifying_client/methods.rs:253:1: 253:46>::from(_1: request::MethodRequest) -> VerifyingRequest {
    debug request => _1;
    let mut _0: verifying_client::methods::VerifyingRequest;
    let mut _2: isize;
    let mut _3: isize;
    let _4: std::string::String;
    let _5: u64;
    let _6: diem_types::PeerId;
    let _7: std::option::Option<u64>;
    let _8: u64;
    let _9: u64;
    let _10: bool;
    let _11: diem_types::PeerId;
    let _12: u64;
    let _13: u64;
    let _14: bool;
    let _15: diem_types::PeerId;
    let _16: u64;
    let _17: bool;
    let _18: diem_types::event::EventKey;
    let _19: u64;
    let _20: u64;
    let _21: !;
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: [core::fmt::rt::Argument<'_>; 1];
    let mut _27: core::fmt::rt::Argument<'_>;
    let _28: &Method;
    let _29: Method;
    let mut _30: &request::MethodRequest;
    let mut _31: &[&str; 1];
    let mut _32: bool;
    let mut _33: isize;
    scope 1 {
        debug txn => _4;
    }
    scope 2 {
        debug version => _5;
    }
    scope 3 {
        debug address => _6;
        debug version => _7;
    }
    scope 4 {
        debug start_version => _8;
        debug limit => _9;
        debug include_events => _10;
    }
    scope 5 {
        debug address => _11;
        debug start_seq_num => _12;
        debug limit => _13;
        debug include_events => _14;
    }
    scope 6 {
        debug address => _15;
        debug seq_num => _16;
        debug include_events => _17;
    }
    scope 7 {
        debug key => _18;
        debug start_seq => _19;
        debug limit => _20;
    }

    bb0: {
        _32 = const false;
        _32 = const true;
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb3, 1: bb1, 2: bb6, 3: bb7, 4: bb9, 5: bb8, 6: bb10, 7: bb11, 8: bb12, otherwise: bb2];
    }

    bb1: {
        _2 = discriminant((((_1 as GetMetadata).0: (std::option::Option<u64>,)).0: std::option::Option<u64>));
        switchInt(move _2) -> [0: bb4, 1: bb5, otherwise: bb21];
    }

    bb2: {
        _31 = const _;
        _23 = _31 as &[&str] (PointerCoercion(Unsize));
        _30 = &_1;
        _29 = request::MethodRequest::method(move _30) -> [return: bb13, unwind: bb20];
    }

    bb3: {
        _32 = const false;
        _4 = move (((_1 as Submit).0: (std::string::String,)).0: std::string::String);
        _0 = submit(move _4) -> [return: bb22, unwind: bb20];
    }

    bb4: {
        _0 = get_latest_metadata() -> [return: bb23, unwind: bb20];
    }

    bb5: {
        _5 = (((((_1 as GetMetadata).0: (std::option::Option<u64>,)).0: std::option::Option<u64>) as Some).0: u64);
        _0 = get_historical_metadata(_5) -> [return: bb24, unwind: bb20];
    }

    bb6: {
        _6 = ((_1 as GetAccount).0: diem_types::PeerId);
        _7 = ((_1 as GetAccount).1: std::option::Option<u64>);
        _0 = get_account(_6, _7) -> [return: bb25, unwind: bb20];
    }

    bb7: {
        _8 = ((_1 as GetTransactions).0: u64);
        _9 = ((_1 as GetTransactions).1: u64);
        _10 = ((_1 as GetTransactions).2: bool);
        _0 = get_transactions(_8, _9, _10) -> [return: bb26, unwind: bb20];
    }

    bb8: {
        _11 = ((_1 as GetAccountTransactions).0: diem_types::PeerId);
        _12 = ((_1 as GetAccountTransactions).1: u64);
        _13 = ((_1 as GetAccountTransactions).2: u64);
        _14 = ((_1 as GetAccountTransactions).3: bool);
        _0 = get_account_transactions(_11, _12, _13, _14) -> [return: bb27, unwind: bb20];
    }

    bb9: {
        _15 = ((_1 as GetAccountTransaction).0: diem_types::PeerId);
        _16 = ((_1 as GetAccountTransaction).1: u64);
        _17 = ((_1 as GetAccountTransaction).2: bool);
        _0 = get_account_transaction(_15, _16, _17) -> [return: bb28, unwind: bb20];
    }

    bb10: {
        _18 = ((_1 as GetEvents).0: diem_types::event::EventKey);
        _19 = ((_1 as GetEvents).1: u64);
        _20 = ((_1 as GetEvents).2: u64);
        _0 = methods::get_events(_18, _19, _20) -> [return: bb29, unwind: bb20];
    }

    bb11: {
        _0 = get_currencies() -> [return: bb30, unwind: bb20];
    }

    bb12: {
        _0 = get_network_status() -> [return: bb31, unwind: bb20];
    }

    bb13: {
        _28 = &_29;
        _27 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_28) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _26 = [move _27];
        _25 = &_26;
        _24 = _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _22 = Arguments::<'_>::new_v1(move _23, move _24) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _21 = panic_fmt(move _22) -> bb20;
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        switchInt(_32) -> [0: bb16, otherwise: bb19];
    }

    bb19 (cleanup): {
        drop((((_1 as Submit).0: (std::string::String,)).0: std::string::String)) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        _33 = discriminant(_1);
        switchInt(move _33) -> [0: bb18, otherwise: bb16];
    }

    bb21: {
        unreachable;
    }

    bb22: {
        goto -> bb17;
    }

    bb23: {
        goto -> bb17;
    }

    bb24: {
        goto -> bb17;
    }

    bb25: {
        goto -> bb17;
    }

    bb26: {
        goto -> bb17;
    }

    bb27: {
        goto -> bb17;
    }

    bb28: {
        goto -> bb17;
    }

    bb29: {
        goto -> bb17;
    }

    bb30: {
        goto -> bb17;
    }

    bb31: {
        goto -> bb17;
    }
}

promoted[0] in methods::<impl at sdk/client/src/verifying_client/methods.rs:253:1: 253:46>::from: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "unsupported verifying client method: "];
        _0 = &_1;
        return;
    }
}

fn submit(_1: std::string::String) -> VerifyingRequest {
    debug txn => _1;
    let mut _0: verifying_client::methods::VerifyingRequest;
    let _2: request::MethodRequest;
    let mut _3: (std::string::String,);
    let mut _5: std::boxed::Box<[request::MethodRequest]>;
    let mut _6: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: *mut u8;
    let mut _10: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _11: request::MethodRequest;
    let mut _12: &request::MethodRequest;
    let mut _14: std::boxed::Box<{closure@sdk/client/src/verifying_client/methods.rs:286:46: 286:72}>;
    let mut _15: request::MethodRequest;
    let mut _16: std::vec::Vec<request::MethodRequest>;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: &mut std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _20: ();
    let mut _21: *const [request::MethodRequest; 1];
    scope 1 {
        debug request => _2;
        let _4: std::vec::Vec<request::MethodRequest>;
        let mut _22: *const ();
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: bool;
        scope 2 {
            debug subrequests => _4;
            let _13: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
            scope 4 {
                debug callback => _13;
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _18 = const false;
        _17 = const false;
        _3 = (move _1,);
        _18 = const true;
        _2 = request::MethodRequest::Submit(move _3);
        _7 = SizeOf([request::MethodRequest; 1]);
        _8 = AlignOf([request::MethodRequest; 1]);
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _10 = ShallowInitBox(move _9, [request::MethodRequest; 1]);
        _12 = &_2;
        _11 = <request::MethodRequest as Clone>::clone(move _12) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _21 = (((_10.0: std::ptr::Unique<[request::MethodRequest; 1]>).0: std::ptr::NonNull<[request::MethodRequest; 1]>).0: *const [request::MethodRequest; 1]);
        _22 = _21 as *const () (PtrToPtr);
        _23 = _22 as usize (Transmute);
        _24 = AlignOf([request::MethodRequest; 1]);
        _25 = Sub(_24, const 1_usize);
        _26 = BitAnd(_23, _25);
        _27 = Eq(_26, const 0_usize);
        assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb12, unwind unreachable];
    }

    bb3: {
        _17 = const true;
        _14 = Box::<{closure@sdk/client/src/verifying_client/methods.rs:286:46: 286:72}>::new(const ZeroSized: {closure@sdk/client/src/verifying_client/methods.rs:286:46: 286:72}) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _13 = move _14 as std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>> (PointerCoercion(Unsize));
        _18 = const false;
        _15 = move _2;
        _17 = const false;
        _16 = move _4;
        _0 = VerifyingRequest::new(move _15, move _16, move _13) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _17 = const false;
        _18 = const false;
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_17) -> [0: bb11, otherwise: bb7];
    }

    bb9 (cleanup): {
        _19 = &mut _10;
        _20 = <Box<[request::MethodRequest; 1]> as Drop>::drop(move _19) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_18) -> [0: bb6, otherwise: bb10];
    }

    bb12: {
        (*_21) = [move _11];
        _6 = move _10;
        _5 = move _6 as std::boxed::Box<[request::MethodRequest]> (PointerCoercion(Unsize));
        _4 = slice::<impl [request::MethodRequest]>::into_vec::<std::alloc::Global>(move _5) -> [return: bb3, unwind: bb11];
    }

    bb13 (cleanup): {
        goto -> bb11;
    }
}

fn submit::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:286:46: 286:72}, _2: RequestContext<'_>, _3: &[MethodResponse]) -> std::result::Result<MethodResponse, error::Error> {
    debug _ctxt => _2;
    debug subresponses => _3;
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let mut _4: isize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _8: &[response::MethodResponse];
    let mut _9: error::Error;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &&[response::MethodResponse];
    let mut _18: response::MethodResponse;
    scope 1 {
        debug subresponses => _8;
        let _10: std::string::String;
        let mut _19: &[&str; 1];
        scope 2 {
            debug res => _10;
        }
    }

    bb0: {
        _5 = Len((*_3));
        _6 = const 1_usize;
        _7 = Eq(move _5, move _6);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = discriminant((*_3)[0 of 1]);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _8 = _3;
        _19 = const _;
        _12 = _19 as &[&str] (PointerCoercion(Unsize));
        _17 = &_8;
        _16 = core::fmt::rt::Argument::<'_>::new_debug::<&[MethodResponse]>(_17) -> [return: bb4, unwind continue];
    }

    bb3: {
        _18 = MethodResponse::Submit;
        _0 = std::result::Result::<MethodResponse, error::Error>::Ok(move _18);
        goto -> bb8;
    }

    bb4: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = format(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        _9 = error::Error::rpc_response::<std::string::String>(move _10) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _9);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

promoted[0] in submit::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected [Submit] subresponses, received: "];
        _0 = &_1;
        return;
    }
}

fn get_latest_metadata() -> VerifyingRequest {
    let mut _0: verifying_client::methods::VerifyingRequest;
    let _1: request::MethodRequest;
    let mut _2: (std::option::Option<u64>,);
    let mut _3: std::option::Option<u64>;
    let mut _5: std::boxed::Box<[request::MethodRequest]>;
    let mut _6: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: *mut u8;
    let mut _10: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _11: request::MethodRequest;
    let mut _12: diem_types::PeerId;
    let mut _13: std::option::Option<u64>;
    let mut _14: std::option::Option<u64>;
    let mut _16: std::boxed::Box<{closure@sdk/client/src/verifying_client/methods.rs:308:46: 308:71}>;
    let mut _17: request::MethodRequest;
    let mut _18: std::vec::Vec<request::MethodRequest>;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: &mut std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _22: ();
    let mut _23: *const [request::MethodRequest; 1];
    scope 1 {
        debug request => _1;
        let _4: std::vec::Vec<request::MethodRequest>;
        let mut _24: *const ();
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: usize;
        let mut _28: usize;
        let mut _29: bool;
        scope 2 {
            debug subrequests => _4;
            let _15: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
            scope 4 {
                debug callback => _15;
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _20 = const false;
        _19 = const false;
        _3 = std::option::Option::<u64>::None;
        _2 = (move _3,);
        _20 = const true;
        _1 = request::MethodRequest::GetMetadata(move _2);
        _7 = SizeOf([request::MethodRequest; 1]);
        _8 = AlignOf([request::MethodRequest; 1]);
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _10 = ShallowInitBox(move _9, [request::MethodRequest; 1]);
        _12 = diem_root_address() -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _13 = std::option::Option::<u64>::None;
        _14 = std::option::Option::<u64>::None;
        _11 = request::MethodRequest::GetAccountStateWithProof(move _12, move _13, move _14);
        _23 = (((_10.0: std::ptr::Unique<[request::MethodRequest; 1]>).0: std::ptr::NonNull<[request::MethodRequest; 1]>).0: *const [request::MethodRequest; 1]);
        _24 = _23 as *const () (PtrToPtr);
        _25 = _24 as usize (Transmute);
        _26 = AlignOf([request::MethodRequest; 1]);
        _27 = Sub(_26, const 1_usize);
        _28 = BitAnd(_25, _27);
        _29 = Eq(_28, const 0_usize);
        assert(_29, "misaligned pointer dereference: address must be a multiple of {} but is {}", _26, _25) -> [success: bb12, unwind unreachable];
    }

    bb3: {
        _19 = const true;
        _16 = Box::<{closure@sdk/client/src/verifying_client/methods.rs:308:46: 308:71}>::new(const ZeroSized: {closure@sdk/client/src/verifying_client/methods.rs:308:46: 308:71}) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _15 = move _16 as std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>> (PointerCoercion(Unsize));
        _20 = const false;
        _17 = move _1;
        _19 = const false;
        _18 = move _4;
        _0 = VerifyingRequest::new(move _17, move _18, move _15) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _19 = const false;
        _20 = const false;
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_19) -> [0: bb11, otherwise: bb7];
    }

    bb9 (cleanup): {
        _21 = &mut _10;
        _22 = <Box<[request::MethodRequest; 1]> as Drop>::drop(move _21) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_20) -> [0: bb6, otherwise: bb10];
    }

    bb12: {
        (*_23) = [move _11];
        _6 = move _10;
        _5 = move _6 as std::boxed::Box<[request::MethodRequest]> (PointerCoercion(Unsize));
        _4 = slice::<impl [request::MethodRequest]>::into_vec::<std::alloc::Global>(move _5) -> [return: bb3, unwind: bb11];
    }

    bb13 (cleanup): {
        goto -> bb11;
    }
}

fn get_latest_metadata::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:308:46: 308:71}, _2: RequestContext<'_>, _3: &[MethodResponse]) -> std::result::Result<MethodResponse, error::Error> {
    debug ctxt => _2;
    debug subresponses => _3;
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let _4: &diem_json_rpc_types::views::AccountStateWithProofView;
    let mut _5: isize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let _9: &diem_json_rpc_types::views::AccountStateWithProofView;
    let _10: &[response::MethodResponse];
    let mut _11: error::Error;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &&[response::MethodResponse];
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::account_state::AccountState>;
    let mut _23: std::result::Result<diem_types::account_state::AccountState, error::Error>;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::option::Option<diem_types::account_state::AccountState>>;
    let mut _25: std::result::Result<std::option::Option<diem_types::account_state::AccountState>, error::Error>;
    let _26: &&diem_json_rpc_types::views::AccountStateWithProofView;
    let mut _27: diem_types::PeerId;
    let mut _28: std::option::Option<u64>;
    let mut _29: isize;
    let mut _32: isize;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>>;
    let mut _41: std::result::Result<(), error::Error>;
    let mut _42: std::result::Result<(), diem_crypto::error::Error>;
    let mut _43: &mut diem_json_rpc_types::views::MetadataView;
    let _44: &diem_types::account_state::AccountState;
    let mut _45: isize;
    let mut _47: response::MethodResponse;
    let mut _48: diem_json_rpc_types::views::MetadataView;
    let mut _50: &diem_types::state_proof::StateProof;
    let mut _51: &diem_json_rpc_types::views::AccountStateWithProofView;
    let mut _52: &state::State;
    scope 1 {
        debug diem_root => _4;
        let _20: &diem_types::ledger_info::LedgerInfo;
        scope 5 {
            debug latest_li => _20;
            let _21: diem_types::account_state::AccountState;
            let _30: std::result::Result<std::convert::Infallible, error::Error>;
            let _31: std::option::Option<diem_types::account_state::AccountState>;
            let _33: std::result::Result<std::convert::Infallible, error::Error>;
            let _34: diem_types::account_state::AccountState;
            scope 6 {
                debug diem_root => _21;
                let _35: u64;
                scope 15 {
                    debug version => _35;
                    let _36: diem_crypto::HashValue;
                    scope 16 {
                        debug accumulator_root_hash => _36;
                        let _37: u64;
                        scope 17 {
                            debug timestamp => _37;
                            let _38: u8;
                            scope 18 {
                                debug chain_id => _38;
                                let mut _39: diem_json_rpc_types::views::MetadataView;
                                scope 19 {
                                    debug metadata_view => _39;
                                    let _46: std::result::Result<std::convert::Infallible, error::Error>;
                                    scope 20 {
                                        debug residual => _46;
                                        scope 21 {
                                        }
                                    }
                                    scope 22 {
                                        debug val => const ();
                                        scope 23 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            scope 7 {
                debug residual => _30;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _31;
                scope 10 {
                }
            }
            scope 11 {
                debug residual => _33;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _34;
                scope 14 {
                }
            }
        }
    }
    scope 2 {
        debug account => _9;
    }
    scope 3 {
        debug subresponses => _10;
        let _12: std::string::String;
        let mut _49: &[&str; 1];
        scope 4 {
            debug res => _12;
        }
    }

    bb0: {
        _6 = Len((*_3));
        _7 = const 1_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = discriminant((*_3)[0 of 1]);
        switchInt(move _5) -> [11: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = _3;
        _49 = const _;
        _14 = _49 as &[&str] (PointerCoercion(Unsize));
        _19 = &_10;
        _18 = core::fmt::rt::Argument::<'_>::new_debug::<&[MethodResponse]>(_19) -> [return: bb4, unwind continue];
    }

    bb3: {
        _9 = &(((*_3)[0 of 1] as GetAccountStateWithProof).0: diem_json_rpc_types::views::AccountStateWithProofView);
        _4 = _9;
        _50 = deref_copy (_2.1: &diem_types::state_proof::StateProof);
        _20 = StateProof::latest_ledger_info(_50) -> [return: bb8, unwind continue];
    }

    bb4: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = format(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _11 = error::Error::rpc_response::<std::string::String>(move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _11);
        goto -> bb30;
    }

    bb8: {
        _26 = &_4;
        _51 = deref_copy (*_26);
        _27 = diem_root_address() -> [return: bb9, unwind continue];
    }

    bb9: {
        _28 = std::option::Option::<u64>::None;
        _25 = verify_account_state(_2, _51, move _27, move _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        _24 = <std::result::Result<std::option::Option<AccountState>, error::Error> as Try>::branch(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        _29 = discriminant(_24);
        switchInt(move _29) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        _31 = move ((_24 as Continue).0: std::option::Option<diem_types::account_state::AccountState>);
        _23 = std::option::Option::<AccountState>::ok_or_else::<error::Error, {closure@sdk/client/src/verifying_client/methods.rs:321:25: 321:27}>(move _31, const ZeroSized: {closure@sdk/client/src/verifying_client/methods.rs:321:25: 321:27}) -> [return: bb15, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _30 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _30) -> [return: bb30, unwind continue];
    }

    bb15: {
        _22 = <std::result::Result<AccountState, error::Error> as Try>::branch(move _23) -> [return: bb16, unwind continue];
    }

    bb16: {
        _32 = discriminant(_22);
        switchInt(move _32) -> [0: bb17, 1: bb18, otherwise: bb13];
    }

    bb17: {
        _34 = move ((_22 as Continue).0: diem_types::account_state::AccountState);
        _21 = move _34;
        _35 = LedgerInfo::version(_20) -> [return: bb19, unwind: bb32];
    }

    bb18: {
        _33 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _33) -> [return: bb30, unwind continue];
    }

    bb19: {
        _36 = LedgerInfo::transaction_accumulator_hash(_20) -> [return: bb20, unwind: bb32];
    }

    bb20: {
        _37 = LedgerInfo::timestamp_usecs(_20) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _52 = deref_copy (_2.0: &state::State);
        _38 = ((*_52).0: u8);
        _39 = MetadataView::new(_35, _36, _37, _38) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        _43 = &mut _39;
        _44 = &_21;
        _42 = MetadataView::with_diem_root(move _43, _44) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _41 = std::result::Result::<(), diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::rpc_response::<diem_crypto::error::Error>}>(move _42, error::Error::rpc_response::<diem_crypto::error::Error>) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        _40 = <std::result::Result<(), error::Error> as Try>::branch(move _41) -> [return: bb25, unwind: bb31];
    }

    bb25: {
        _45 = discriminant(_40);
        switchInt(move _45) -> [0: bb26, 1: bb27, otherwise: bb13];
    }

    bb26: {
        _48 = move _39;
        _47 = MethodResponse::GetMetadata(move _48);
        _0 = std::result::Result::<MethodResponse, error::Error>::Ok(move _47);
        drop(_21) -> [return: bb30, unwind continue];
    }

    bb27: {
        _46 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _46) -> [return: bb28, unwind: bb31];
    }

    bb28: {
        drop(_39) -> [return: bb29, unwind: bb32];
    }

    bb29: {
        drop(_21) -> [return: bb30, unwind continue];
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_39) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_21) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }
}

promoted[0] in get_latest_metadata::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected [GetAccountStateWithProof] subresponses, received: "];
        _0 = &_1;
        return;
    }
}

fn get_latest_metadata::{closure#0}::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:321:25: 321:27}) -> error::Error {
    let mut _0: error::Error;

    bb0: {
        _0 = error::Error::rpc_response::<&str>(const "DiemRoot account is missing") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn get_historical_metadata(_1: u64) -> VerifyingRequest {
    debug version => _1;
    let mut _0: verifying_client::methods::VerifyingRequest;
    let _2: request::MethodRequest;
    let mut _3: (std::option::Option<u64>,);
    let mut _4: std::option::Option<u64>;
    let mut _6: std::boxed::Box<[request::MethodRequest]>;
    let mut _7: std::boxed::Box<[request::MethodRequest; 3]>;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: *mut u8;
    let mut _11: std::boxed::Box<[request::MethodRequest; 3]>;
    let mut _12: request::MethodRequest;
    let mut _13: std::option::Option<u64>;
    let mut _14: std::option::Option<u64>;
    let mut _15: request::MethodRequest;
    let mut _16: std::option::Option<u64>;
    let mut _17: std::option::Option<u64>;
    let mut _18: request::MethodRequest;
    let mut _19: diem_types::event::EventKey;
    let mut _20: std::option::Option<u64>;
    let mut _22: std::boxed::Box<{closure@sdk/client/src/verifying_client/methods.rs:346:46: 346:71}>;
    let mut _23: {closure@sdk/client/src/verifying_client/methods.rs:346:46: 346:71};
    let mut _24: request::MethodRequest;
    let mut _25: std::vec::Vec<request::MethodRequest>;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: &mut std::boxed::Box<[request::MethodRequest; 3]>;
    let mut _29: ();
    let mut _30: *const [request::MethodRequest; 3];
    scope 1 {
        debug request => _2;
        let _5: std::vec::Vec<request::MethodRequest>;
        let mut _31: *const ();
        let mut _32: usize;
        let mut _33: usize;
        let mut _34: usize;
        let mut _35: usize;
        let mut _36: bool;
        scope 2 {
            debug subrequests => _5;
            let _21: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
            scope 4 {
                debug callback => _21;
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _27 = const false;
        _26 = const false;
        _4 = std::option::Option::<u64>::Some(_1);
        _3 = (move _4,);
        _27 = const true;
        _2 = request::MethodRequest::GetMetadata(move _3);
        _8 = SizeOf([request::MethodRequest; 3]);
        _9 = AlignOf([request::MethodRequest; 3]);
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb1, unwind: bb13];
    }

    bb1: {
        _11 = ShallowInitBox(move _10, [request::MethodRequest; 3]);
        _13 = std::option::Option::<u64>::None;
        _14 = std::option::Option::<u64>::Some(_1);
        _12 = request::MethodRequest::GetAccumulatorConsistencyProof(move _13, move _14);
        _16 = std::option::Option::<u64>::Some(_1);
        _17 = std::option::Option::<u64>::None;
        _15 = request::MethodRequest::GetAccumulatorConsistencyProof(move _16, move _17);
        _19 = new_block_event_key() -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _20 = std::option::Option::<u64>::Some(_1);
        _18 = request::MethodRequest::GetEventByVersionWithProof(move _19, move _20);
        _30 = (((_11.0: std::ptr::Unique<[request::MethodRequest; 3]>).0: std::ptr::NonNull<[request::MethodRequest; 3]>).0: *const [request::MethodRequest; 3]);
        _31 = _30 as *const () (PtrToPtr);
        _32 = _31 as usize (Transmute);
        _33 = AlignOf([request::MethodRequest; 3]);
        _34 = Sub(_33, const 1_usize);
        _35 = BitAnd(_32, _34);
        _36 = Eq(_35, const 0_usize);
        assert(_36, "misaligned pointer dereference: address must be a multiple of {} but is {}", _33, _32) -> [success: bb14, unwind unreachable];
    }

    bb3: {
        _26 = const true;
        _23 = {closure@sdk/client/src/verifying_client/methods.rs:346:46: 346:71} { version: _1 };
        _22 = Box::<{closure@sdk/client/src/verifying_client/methods.rs:346:46: 346:71}>::new(move _23) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _21 = move _22 as std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>> (PointerCoercion(Unsize));
        _27 = const false;
        _24 = move _2;
        _26 = const false;
        _25 = move _5;
        _0 = VerifyingRequest::new(move _24, move _25, move _21) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _26 = const false;
        _27 = const false;
        return;
    }

    bb6 (cleanup): {
        drop(_15) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_12) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        drop(_5) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_26) -> [0: bb13, otherwise: bb9];
    }

    bb11 (cleanup): {
        _28 = &mut _11;
        _29 = <Box<[request::MethodRequest; 3]> as Drop>::drop(move _28) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_27) -> [0: bb8, otherwise: bb12];
    }

    bb14: {
        (*_30) = [move _12, move _15, move _18];
        _7 = move _11;
        _6 = move _7 as std::boxed::Box<[request::MethodRequest]> (PointerCoercion(Unsize));
        _5 = slice::<impl [request::MethodRequest]>::into_vec::<std::alloc::Global>(move _6) -> [return: bb3, unwind: bb13];
    }

    bb15 (cleanup): {
        goto -> bb13;
    }
}

fn get_historical_metadata::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:346:46: 346:71}, _2: RequestContext<'_>, _3: &[MethodResponse]) -> std::result::Result<MethodResponse, error::Error> {
    debug ctxt => _2;
    debug subresponses => _3;
    debug version => (_1.0: u64);
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let _4: &diem_json_rpc_types::views::AccumulatorConsistencyProofView;
    let _5: &diem_json_rpc_types::views::AccumulatorConsistencyProofView;
    let _6: &diem_json_rpc_types::views::EventByVersionWithProofView;
    let mut _7: (&diem_json_rpc_types::views::AccumulatorConsistencyProofView, &diem_json_rpc_types::views::AccumulatorConsistencyProofView, &diem_json_rpc_types::views::EventByVersionWithProofView);
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: bool;
    let _14: &diem_json_rpc_types::views::AccumulatorConsistencyProofView;
    let _15: &diem_json_rpc_types::views::AccumulatorConsistencyProofView;
    let _16: &diem_json_rpc_types::views::EventByVersionWithProofView;
    let _17: &[response::MethodResponse];
    let mut _18: error::Error;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &&[response::MethodResponse];
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::proof::AccumulatorConsistencyProof>;
    let mut _30: std::result::Result<diem_types::proof::AccumulatorConsistencyProof, error::Error>;
    let mut _31: std::result::Result<diem_types::proof::AccumulatorConsistencyProof, diem_crypto::error::Error>;
    let mut _32: isize;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::proof::AccumulatorConsistencyProof>;
    let mut _37: std::result::Result<diem_types::proof::AccumulatorConsistencyProof, error::Error>;
    let mut _38: std::result::Result<diem_types::proof::AccumulatorConsistencyProof, diem_crypto::error::Error>;
    let mut _39: isize;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::contract_event::EventByVersionWithProof>;
    let mut _44: std::result::Result<diem_types::contract_event::EventByVersionWithProof, error::Error>;
    let mut _45: std::result::Result<diem_types::contract_event::EventByVersionWithProof, diem_crypto::error::Error>;
    let mut _46: isize;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::proof::TransactionAccumulatorSummary>;
    let mut _51: std::result::Result<diem_types::proof::TransactionAccumulatorSummary, error::Error>;
    let mut _52: std::result::Result<diem_types::proof::TransactionAccumulatorSummary, diem_crypto::error::Error>;
    let mut _53: diem_types::proof::AccumulatorConsistencyProof;
    let mut _54: u64;
    let mut _55: isize;
    let mut _59: &diem_types::proof::TransactionAccumulatorSummary;
    let mut _60: diem_types::proof::TransactionAccumulatorSummary;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::proof::TransactionAccumulatorSummary>;
    let mut _62: std::result::Result<diem_types::proof::TransactionAccumulatorSummary, error::Error>;
    let mut _63: std::result::Result<diem_types::proof::TransactionAccumulatorSummary, diem_crypto::error::Error>;
    let mut _64: &diem_types::proof::TransactionAccumulatorSummary;
    let _65: &diem_types::proof::AccumulatorConsistencyProof;
    let _66: &&diem_types::ledger_info::LedgerInfo;
    let mut _67: isize;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>>;
    let mut _72: std::result::Result<(), error::Error>;
    let mut _73: std::result::Result<(), diem_crypto::error::Error>;
    let mut _74: &diem_types::contract_event::EventByVersionWithProof;
    let mut _75: &diem_types::ledger_info::LedgerInfo;
    let _76: &diem_types::event::EventKey;
    let _77: diem_types::event::EventKey;
    let mut _78: u64;
    let mut _79: isize;
    let mut _82: (std::option::Option<diem_types::contract_event::EventWithProof>, std::option::Option<diem_types::contract_event::EventWithProof>);
    let mut _83: std::option::Option<diem_types::contract_event::EventWithProof>;
    let mut _84: std::option::Option<diem_types::contract_event::EventWithProof>;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: u64;
    let mut _89: error::Error;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::account_config::NewBlockEvent>;
    let mut _93: std::result::Result<diem_types::account_config::NewBlockEvent, error::Error>;
    let mut _94: std::result::Result<diem_types::account_config::NewBlockEvent, diem_crypto::error::Error>;
    let mut _95: &diem_types::contract_event::ContractEvent;
    let mut _96: isize;
    let mut _99: &diem_types::account_config::NewBlockEvent;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::account_config::NewBlockEvent>;
    let mut _103: std::result::Result<diem_types::account_config::NewBlockEvent, error::Error>;
    let mut _104: std::result::Result<diem_types::account_config::NewBlockEvent, diem_crypto::error::Error>;
    let mut _105: &diem_types::contract_event::ContractEvent;
    let mut _106: isize;
    let mut _110: &diem_types::account_config::NewBlockEvent;
    let mut _111: bool;
    let mut _112: u64;
    let mut _113: &diem_types::account_config::NewBlockEvent;
    let mut _114: u64;
    let mut _115: &diem_types::ledger_info::LedgerInfo;
    let mut _116: bool;
    let mut _117: u64;
    let mut _118: &diem_types::ledger_info::LedgerInfo;
    let mut _119: error::Error;
    let mut _122: u64;
    let mut _123: u64;
    let mut _124: response::MethodResponse;
    let mut _126: &diem_types::state_proof::StateProof;
    let mut _127: &diem_types::ledger_info::LedgerInfo;
    let mut _128: &state::State;
    let mut _129: bool;
    let mut _130: bool;
    let mut _131: bool;
    scope 1 {
        debug consistency_pg2v => _4;
        debug consistency_v2li => _5;
        debug block_event => _6;
        let _27: &diem_types::ledger_info::LedgerInfo;
        scope 5 {
            debug latest_li => _27;
            let _28: diem_types::proof::AccumulatorConsistencyProof;
            let _33: std::result::Result<std::convert::Infallible, error::Error>;
            let _34: diem_types::proof::AccumulatorConsistencyProof;
            scope 6 {
                debug consistency_pg2v => _28;
                let _35: diem_types::proof::AccumulatorConsistencyProof;
                let _40: std::result::Result<std::convert::Infallible, error::Error>;
                let _41: diem_types::proof::AccumulatorConsistencyProof;
                scope 11 {
                    debug consistency_v2li => _35;
                    let _42: diem_types::contract_event::EventByVersionWithProof;
                    let _47: std::result::Result<std::convert::Infallible, error::Error>;
                    let _48: diem_types::contract_event::EventByVersionWithProof;
                    scope 16 {
                        debug block_event => _42;
                        let _49: diem_types::proof::TransactionAccumulatorSummary;
                        let _56: std::result::Result<std::convert::Infallible, error::Error>;
                        let _57: diem_types::proof::TransactionAccumulatorSummary;
                        scope 21 {
                            debug accumulator_summary => _49;
                            let _58: diem_crypto::HashValue;
                            scope 26 {
                                debug accumulator_root_hash => _58;
                                let _68: std::result::Result<std::convert::Infallible, error::Error>;
                                let _69: diem_types::proof::TransactionAccumulatorSummary;
                                scope 27 {
                                    let _70: std::option::Option<u64>;
                                    scope 32 {
                                        debug event_count => _70;
                                        let _80: std::result::Result<std::convert::Infallible, error::Error>;
                                        let _81: u64;
                                        let _90: diem_types::contract_event::EventWithProof;
                                        let _100: diem_types::contract_event::EventWithProof;
                                        scope 33 {
                                            debug residual => _80;
                                            scope 34 {
                                            }
                                        }
                                        scope 35 {
                                            debug val => const ();
                                            scope 36 {
                                            }
                                        }
                                        scope 37 {
                                            debug timestamp => _81;
                                            let _120: u8;
                                            scope 51 {
                                                debug chain_id => _120;
                                                let _121: diem_json_rpc_types::views::MetadataView;
                                                scope 52 {
                                                    debug metadata_view => _121;
                                                }
                                            }
                                        }
                                        scope 38 {
                                            debug block_event => _90;
                                            let _91: diem_types::account_config::NewBlockEvent;
                                            let _97: std::result::Result<std::convert::Infallible, error::Error>;
                                            let _98: diem_types::account_config::NewBlockEvent;
                                            scope 39 {
                                                debug block_event => _91;
                                            }
                                            scope 40 {
                                                debug residual => _97;
                                                scope 41 {
                                                }
                                            }
                                            scope 42 {
                                                debug val => _98;
                                                scope 43 {
                                                }
                                            }
                                        }
                                        scope 44 {
                                            debug block_event => _100;
                                            let _101: diem_types::account_config::NewBlockEvent;
                                            let _107: std::result::Result<std::convert::Infallible, error::Error>;
                                            let _108: diem_types::account_config::NewBlockEvent;
                                            scope 45 {
                                                debug block_event => _101;
                                                let _109: u64;
                                                scope 50 {
                                                    debug timestamp => _109;
                                                }
                                            }
                                            scope 46 {
                                                debug residual => _107;
                                                scope 47 {
                                                }
                                            }
                                            scope 48 {
                                                debug val => _108;
                                                scope 49 {
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 28 {
                                    debug residual => _68;
                                    scope 29 {
                                    }
                                }
                                scope 30 {
                                    debug val => _69;
                                    scope 31 {
                                    }
                                }
                            }
                        }
                        scope 22 {
                            debug residual => _56;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug val => _57;
                            scope 25 {
                            }
                        }
                    }
                    scope 17 {
                        debug residual => _47;
                        scope 18 {
                        }
                    }
                    scope 19 {
                        debug val => _48;
                        scope 20 {
                        }
                    }
                }
                scope 12 {
                    debug residual => _40;
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => _41;
                    scope 15 {
                    }
                }
            }
            scope 7 {
                debug residual => _33;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _34;
                scope 10 {
                }
            }
        }
    }
    scope 2 {
        debug c1 => _14;
        debug c2 => _15;
        debug e => _16;
    }
    scope 3 {
        debug subresponses => _17;
        let _19: std::string::String;
        let mut _125: &[&str; 1];
        scope 4 {
            debug res => _19;
        }
    }

    bb0: {
        _131 = const false;
        _130 = const false;
        _129 = const false;
        _11 = Len((*_3));
        _12 = const 3_usize;
        _13 = Eq(move _11, move _12);
        switchInt(move _13) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = discriminant((*_3)[0 of 3]);
        switchInt(move _10) -> [10: bb3, otherwise: bb2];
    }

    bb2: {
        _17 = _3;
        _125 = const _;
        _21 = _125 as &[&str] (PointerCoercion(Unsize));
        _26 = &_17;
        _25 = core::fmt::rt::Argument::<'_>::new_debug::<&[MethodResponse]>(_26) -> [return: bb6, unwind continue];
    }

    bb3: {
        _9 = discriminant((*_3)[1 of 3]);
        switchInt(move _9) -> [10: bb4, otherwise: bb2];
    }

    bb4: {
        _8 = discriminant((*_3)[2 of 3]);
        switchInt(move _8) -> [15: bb5, otherwise: bb2];
    }

    bb5: {
        _14 = &(((*_3)[0 of 3] as GetAccumulatorConsistencyProof).0: diem_json_rpc_types::views::AccumulatorConsistencyProofView);
        _15 = &(((*_3)[1 of 3] as GetAccumulatorConsistencyProof).0: diem_json_rpc_types::views::AccumulatorConsistencyProofView);
        _16 = &(((*_3)[2 of 3] as GetEventByVersionWithProof).0: diem_json_rpc_types::views::EventByVersionWithProofView);
        _7 = (_14, _15, _16);
        _4 = (_7.0: &diem_json_rpc_types::views::AccumulatorConsistencyProofView);
        _5 = (_7.1: &diem_json_rpc_types::views::AccumulatorConsistencyProofView);
        _6 = (_7.2: &diem_json_rpc_types::views::EventByVersionWithProofView);
        _126 = deref_copy (_2.1: &diem_types::state_proof::StateProof);
        _27 = StateProof::latest_ledger_info(_126) -> [return: bb10, unwind continue];
    }

    bb6: {
        _24 = [move _25];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb7, unwind continue];
    }

    bb7: {
        _19 = format(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = error::Error::rpc_response::<std::string::String>(move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _18);
        goto -> bb84;
    }

    bb10: {
        _31 = <AccumulatorConsistencyProof as TryFrom<&AccumulatorConsistencyProofView>>::try_from(_4) -> [return: bb11, unwind continue];
    }

    bb11: {
        _30 = std::result::Result::<AccumulatorConsistencyProof, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _31, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb12, unwind continue];
    }

    bb12: {
        _29 = <std::result::Result<AccumulatorConsistencyProof, error::Error> as Try>::branch(move _30) -> [return: bb13, unwind continue];
    }

    bb13: {
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb14, 1: bb16, otherwise: bb15];
    }

    bb14: {
        _34 = move ((_29 as Continue).0: diem_types::proof::AccumulatorConsistencyProof);
        _131 = const true;
        _28 = move _34;
        _38 = <AccumulatorConsistencyProof as TryFrom<&AccumulatorConsistencyProofView>>::try_from(_5) -> [return: bb17, unwind: bb107];
    }

    bb15: {
        unreachable;
    }

    bb16: {
        _33 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _33) -> [return: bb83, unwind continue];
    }

    bb17: {
        _37 = std::result::Result::<AccumulatorConsistencyProof, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _38, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb18, unwind: bb107];
    }

    bb18: {
        _36 = <std::result::Result<AccumulatorConsistencyProof, error::Error> as Try>::branch(move _37) -> [return: bb19, unwind: bb107];
    }

    bb19: {
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb20, 1: bb21, otherwise: bb15];
    }

    bb20: {
        _41 = move ((_36 as Continue).0: diem_types::proof::AccumulatorConsistencyProof);
        _35 = move _41;
        _45 = <EventByVersionWithProof as TryFrom<&EventByVersionWithProofView>>::try_from(_6) -> [return: bb22, unwind: bb90];
    }

    bb21: {
        _40 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _40) -> [return: bb108, unwind: bb107];
    }

    bb22: {
        _44 = std::result::Result::<EventByVersionWithProof, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _45, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb23, unwind: bb90];
    }

    bb23: {
        _43 = <std::result::Result<EventByVersionWithProof, error::Error> as Try>::branch(move _44) -> [return: bb24, unwind: bb90];
    }

    bb24: {
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb25, 1: bb26, otherwise: bb15];
    }

    bb25: {
        _48 = move ((_43 as Continue).0: diem_types::contract_event::EventByVersionWithProof);
        _129 = const true;
        _130 = const true;
        _42 = move _48;
        _131 = const false;
        _53 = move _28;
        _54 = (_1.0: u64);
        _52 = TransactionAccumulatorSummary::try_from_genesis_proof(move _53, move _54) -> [return: bb27, unwind: bb105];
    }

    bb26: {
        _47 = move ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _47) -> [return: bb109, unwind: bb90];
    }

    bb27: {
        _51 = std::result::Result::<TransactionAccumulatorSummary, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::invalid_proof::<diem_crypto::error::Error>}>(move _52, error::Error::invalid_proof::<diem_crypto::error::Error>) -> [return: bb28, unwind: bb105];
    }

    bb28: {
        _50 = <std::result::Result<TransactionAccumulatorSummary, error::Error> as Try>::branch(move _51) -> [return: bb29, unwind: bb105];
    }

    bb29: {
        _55 = discriminant(_50);
        switchInt(move _55) -> [0: bb30, 1: bb31, otherwise: bb15];
    }

    bb30: {
        _57 = move ((_50 as Continue).0: diem_types::proof::TransactionAccumulatorSummary);
        _49 = move _57;
        _59 = &_49;
        _58 = TransactionAccumulatorSummary::root_hash(move _59) -> [return: bb32, unwind: bb89];
    }

    bb31: {
        _56 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _56) -> [return: bb110, unwind: bb105];
    }

    bb32: {
        _64 = &_49;
        _65 = &_35;
        _66 = &_27;
        _127 = deref_copy (*_66);
        _63 = TransactionAccumulatorSummary::try_extend_with_proof(move _64, _65, _127) -> [return: bb33, unwind: bb89];
    }

    bb33: {
        _62 = std::result::Result::<TransactionAccumulatorSummary, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::invalid_proof::<diem_crypto::error::Error>}>(move _63, error::Error::invalid_proof::<diem_crypto::error::Error>) -> [return: bb34, unwind: bb89];
    }

    bb34: {
        _61 = <std::result::Result<TransactionAccumulatorSummary, error::Error> as Try>::branch(move _62) -> [return: bb35, unwind: bb89];
    }

    bb35: {
        _67 = discriminant(_61);
        switchInt(move _67) -> [0: bb36, 1: bb37, otherwise: bb15];
    }

    bb36: {
        _69 = move ((_61 as Continue).0: diem_types::proof::TransactionAccumulatorSummary);
        _60 = move _69;
        drop(_60) -> [return: bb38, unwind: bb89];
    }

    bb37: {
        _68 = move ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _68) -> [return: bb111, unwind: bb89];
    }

    bb38: {
        _70 = std::option::Option::<u64>::None;
        _74 = &_42;
        _75 = _27;
        _77 = new_block_event_key() -> [return: bb39, unwind: bb89];
    }

    bb39: {
        _76 = &_77;
        _78 = (_1.0: u64);
        _73 = EventByVersionWithProof::verify(move _74, move _75, _76, _70, move _78) -> [return: bb40, unwind: bb89];
    }

    bb40: {
        _72 = std::result::Result::<(), diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::invalid_proof::<diem_crypto::error::Error>}>(move _73, error::Error::invalid_proof::<diem_crypto::error::Error>) -> [return: bb41, unwind: bb89];
    }

    bb41: {
        _71 = <std::result::Result<(), error::Error> as Try>::branch(move _72) -> [return: bb42, unwind: bb89];
    }

    bb42: {
        _79 = discriminant(_71);
        switchInt(move _79) -> [0: bb43, 1: bb44, otherwise: bb15];
    }

    bb43: {
        _130 = const false;
        _83 = move (_42.0: std::option::Option<diem_types::contract_event::EventWithProof>);
        _129 = const false;
        _84 = move (_42.1: std::option::Option<diem_types::contract_event::EventWithProof>);
        _82 = (move _83, move _84);
        _87 = discriminant((_82.0: std::option::Option<diem_types::contract_event::EventWithProof>));
        switchInt(move _87) -> [0: bb45, 1: bb46, otherwise: bb15];
    }

    bb44: {
        _80 = move ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _80) -> [return: bb112, unwind: bb89];
    }

    bb45: {
        _85 = discriminant((_82.1: std::option::Option<diem_types::contract_event::EventWithProof>));
        switchInt(move _85) -> [0: bb48, 1: bb48, otherwise: bb15];
    }

    bb46: {
        _86 = discriminant((_82.1: std::option::Option<diem_types::contract_event::EventWithProof>));
        switchInt(move _86) -> [0: bb47, 1: bb52, otherwise: bb15];
    }

    bb47: {
        _100 = move (((_82.0: std::option::Option<diem_types::contract_event::EventWithProof>) as Some).0: diem_types::contract_event::EventWithProof);
        _105 = &(_100.2: diem_types::contract_event::ContractEvent);
        _104 = <diem_types::account_config::NewBlockEvent as TryFrom<&ContractEvent>>::try_from(move _105) -> [return: bb61, unwind: bb86];
    }

    bb48: {
        _88 = (_1.0: u64);
        switchInt(move _88) -> [0: bb49, otherwise: bb50];
    }

    bb49: {
        _81 = const 0_u64;
        goto -> bb93;
    }

    bb50: {
        _89 = error::Error::rpc_response::<&str>(const "not genesis") -> [return: bb51, unwind: bb101];
    }

    bb51: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _89);
        goto -> bb94;
    }

    bb52: {
        _90 = move (((_82.0: std::option::Option<diem_types::contract_event::EventWithProof>) as Some).0: diem_types::contract_event::EventWithProof);
        _95 = &(_90.2: diem_types::contract_event::ContractEvent);
        _94 = <diem_types::account_config::NewBlockEvent as TryFrom<&ContractEvent>>::try_from(move _95) -> [return: bb53, unwind: bb88];
    }

    bb53: {
        _93 = std::result::Result::<diem_types::account_config::NewBlockEvent, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _94, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb54, unwind: bb88];
    }

    bb54: {
        _92 = <std::result::Result<diem_types::account_config::NewBlockEvent, error::Error> as Try>::branch(move _93) -> [return: bb55, unwind: bb88];
    }

    bb55: {
        _96 = discriminant(_92);
        switchInt(move _96) -> [0: bb56, 1: bb57, otherwise: bb15];
    }

    bb56: {
        _98 = move ((_92 as Continue).0: diem_types::account_config::NewBlockEvent);
        _91 = move _98;
        _99 = &_91;
        _81 = diem_types::account_config::NewBlockEvent::proposed_time(move _99) -> [return: bb59, unwind: bb87];
    }

    bb57: {
        _97 = move ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _97) -> [return: bb58, unwind: bb88];
    }

    bb58: {
        drop(_90) -> [return: bb94, unwind: bb101];
    }

    bb59: {
        drop(_91) -> [return: bb60, unwind: bb88];
    }

    bb60: {
        drop(_90) -> [return: bb93, unwind: bb101];
    }

    bb61: {
        _103 = std::result::Result::<diem_types::account_config::NewBlockEvent, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _104, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb62, unwind: bb86];
    }

    bb62: {
        _102 = <std::result::Result<diem_types::account_config::NewBlockEvent, error::Error> as Try>::branch(move _103) -> [return: bb63, unwind: bb86];
    }

    bb63: {
        _106 = discriminant(_102);
        switchInt(move _106) -> [0: bb64, 1: bb65, otherwise: bb15];
    }

    bb64: {
        _108 = move ((_102 as Continue).0: diem_types::account_config::NewBlockEvent);
        _101 = move _108;
        _110 = &_101;
        _109 = diem_types::account_config::NewBlockEvent::proposed_time(move _110) -> [return: bb66, unwind: bb85];
    }

    bb65: {
        _107 = move ((_102 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _107) -> [return: bb113, unwind: bb86];
    }

    bb66: {
        _113 = &_101;
        _112 = diem_types::account_config::NewBlockEvent::round(move _113) -> [return: bb67, unwind: bb85];
    }

    bb67: {
        _115 = _27;
        _114 = LedgerInfo::round(move _115) -> [return: bb68, unwind: bb85];
    }

    bb68: {
        _111 = Ne(move _112, move _114);
        switchInt(move _111) -> [0: bb69, otherwise: bb71];
    }

    bb69: {
        _118 = _27;
        _117 = LedgerInfo::timestamp_usecs(move _118) -> [return: bb70, unwind: bb85];
    }

    bb70: {
        _116 = Ne(_109, move _117);
        switchInt(move _116) -> [0: bb73, otherwise: bb71];
    }

    bb71: {
        _119 = error::Error::rpc_response::<&str>(const "not latest block") -> [return: bb72, unwind: bb85];
    }

    bb72: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _119);
        drop(_101) -> [return: bb78, unwind: bb86];
    }

    bb73: {
        _81 = _109;
        drop(_101) -> [return: bb74, unwind: bb86];
    }

    bb74: {
        drop(_100) -> [return: bb93, unwind: bb101];
    }

    bb75: {
        _124 = MethodResponse::GetMetadata(move _121);
        _0 = std::result::Result::<MethodResponse, error::Error>::Ok(move _124);
        drop(_49) -> [return: bb76, unwind: bb105];
    }

    bb76: {
        _129 = const false;
        _130 = const false;
        drop(_35) -> [return: bb77, unwind: bb107];
    }

    bb77: {
        _131 = const false;
        goto -> bb84;
    }

    bb78: {
        drop(_100) -> [return: bb94, unwind: bb101];
    }

    bb79: {
        drop(_49) -> [return: bb80, unwind: bb105];
    }

    bb80: {
        switchInt(_130) -> [0: bb97, otherwise: bb99];
    }

    bb81: {
        _129 = const false;
        _130 = const false;
        drop(_35) -> [return: bb82, unwind: bb107];
    }

    bb82: {
        switchInt(_131) -> [0: bb83, otherwise: bb100];
    }

    bb83: {
        _131 = const false;
        goto -> bb84;
    }

    bb84: {
        return;
    }

    bb85 (cleanup): {
        drop(_101) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_100) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_91) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_90) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_49) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_35) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        resume;
    }

    bb92: {
        _128 = deref_copy (_2.0: &state::State);
        _120 = ((*_128).0: u8);
        _122 = (_1.0: u64);
        _123 = _81;
        _121 = MetadataView::new(move _122, _58, move _123, _120) -> [return: bb75, unwind: bb89];
    }

    bb93: {
        drop((_82.1: std::option::Option<diem_types::contract_event::EventWithProof>)) -> [return: bb92, unwind: bb89];
    }

    bb94: {
        drop((_82.1: std::option::Option<diem_types::contract_event::EventWithProof>)) -> [return: bb79, unwind: bb89];
    }

    bb95 (cleanup): {
        switchInt(_129) -> [0: bb90, otherwise: bb96];
    }

    bb96 (cleanup): {
        drop((_42.1: std::option::Option<diem_types::contract_event::EventWithProof>)) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb97: {
        switchInt(_129) -> [0: bb81, otherwise: bb98];
    }

    bb98: {
        drop((_42.1: std::option::Option<diem_types::contract_event::EventWithProof>)) -> [return: bb81, unwind: bb90];
    }

    bb99: {
        drop((_42.0: std::option::Option<diem_types::contract_event::EventWithProof>)) -> [return: bb97, unwind: bb95];
    }

    bb100: {
        drop(_28) -> [return: bb83, unwind continue];
    }

    bb101 (cleanup): {
        drop((_82.1: std::option::Option<diem_types::contract_event::EventWithProof>)) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        switchInt(_129) -> [0: bb90, otherwise: bb103];
    }

    bb103 (cleanup): {
        drop((_42.1: std::option::Option<diem_types::contract_event::EventWithProof>)) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop((_42.0: std::option::Option<diem_types::contract_event::EventWithProof>)) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        switchInt(_130) -> [0: bb102, otherwise: bb104];
    }

    bb106 (cleanup): {
        drop(_28) -> [return: bb91, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        switchInt(_131) -> [0: bb91, otherwise: bb106];
    }

    bb108: {
        goto -> bb82;
    }

    bb109: {
        goto -> bb81;
    }

    bb110: {
        goto -> bb80;
    }

    bb111: {
        goto -> bb79;
    }

    bb112: {
        goto -> bb79;
    }

    bb113: {
        goto -> bb78;
    }
}

promoted[0] in get_historical_metadata::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected [GetAccumulatorConsistencyProof, GetAccumulatorConsistencyProof, GetEventByVersionWithProof] subresponses, received: "];
        _0 = &_1;
        return;
    }
}

fn get_account(_1: AccountAddress, _2: std::option::Option<u64>) -> VerifyingRequest {
    debug address => _1;
    debug version => _2;
    let mut _0: verifying_client::methods::VerifyingRequest;
    let _3: request::MethodRequest;
    let mut _5: std::boxed::Box<[request::MethodRequest]>;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: *mut u8;
    let mut _9: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _10: request::MethodRequest;
    let mut _11: std::option::Option<u64>;
    let mut _13: std::boxed::Box<{closure@sdk/client/src/verifying_client/methods.rs:433:46: 433:71}>;
    let mut _14: {closure@sdk/client/src/verifying_client/methods.rs:433:46: 433:71};
    let mut _15: request::MethodRequest;
    let mut _16: std::vec::Vec<request::MethodRequest>;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: *const [request::MethodRequest; 1];
    scope 1 {
        debug request => _3;
        let _4: std::vec::Vec<request::MethodRequest>;
        let mut _20: *const ();
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: bool;
        scope 2 {
            debug subrequests => _4;
            let _12: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
            scope 4 {
                debug callback => _12;
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _18 = const false;
        _17 = const false;
        _18 = const true;
        _3 = request::MethodRequest::GetAccount(_1, _2);
        _6 = SizeOf([request::MethodRequest; 1]);
        _7 = AlignOf([request::MethodRequest; 1]);
        _8 = alloc::alloc::exchange_malloc(move _6, move _7) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _9 = ShallowInitBox(move _8, [request::MethodRequest; 1]);
        _11 = std::option::Option::<u64>::None;
        _10 = request::MethodRequest::GetAccountStateWithProof(_1, _2, move _11);
        _19 = (((_9.0: std::ptr::Unique<[request::MethodRequest; 1]>).0: std::ptr::NonNull<[request::MethodRequest; 1]>).0: *const [request::MethodRequest; 1]);
        _20 = _19 as *const () (PtrToPtr);
        _21 = _20 as usize (Transmute);
        _22 = AlignOf([request::MethodRequest; 1]);
        _23 = Sub(_22, const 1_usize);
        _24 = BitAnd(_21, _23);
        _25 = Eq(_24, const 0_usize);
        assert(_25, "misaligned pointer dereference: address must be a multiple of {} but is {}", _22, _21) -> [success: bb10, unwind unreachable];
    }

    bb2: {
        _17 = const true;
        _14 = {closure@sdk/client/src/verifying_client/methods.rs:433:46: 433:71} { version: _2, address: _1 };
        _13 = Box::<{closure@sdk/client/src/verifying_client/methods.rs:433:46: 433:71}>::new(move _14) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _12 = move _13 as std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>> (PointerCoercion(Unsize));
        _18 = const false;
        _15 = move _3;
        _17 = const false;
        _16 = move _4;
        _0 = VerifyingRequest::new(move _15, move _16, move _12) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _17 = const false;
        _18 = const false;
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_17) -> [0: bb9, otherwise: bb6];
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_18) -> [0: bb5, otherwise: bb8];
    }

    bb10: {
        (*_19) = [move _10];
        _5 = move _9 as std::boxed::Box<[request::MethodRequest]> (PointerCoercion(Unsize));
        _4 = slice::<impl [request::MethodRequest]>::into_vec::<std::alloc::Global>(move _5) -> [return: bb2, unwind: bb9];
    }
}

fn get_account::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:433:46: 433:71}, _2: RequestContext<'_>, _3: &[MethodResponse]) -> std::result::Result<MethodResponse, error::Error> {
    debug ctxt => _2;
    debug subresponses => _3;
    debug version => (_1.0: std::option::Option<u64>);
    debug address => (_1.1: diem_types::PeerId);
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let _4: &diem_json_rpc_types::views::AccountStateWithProofView;
    let mut _5: isize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let _9: &diem_json_rpc_types::views::AccountStateWithProofView;
    let _10: &[response::MethodResponse];
    let mut _11: error::Error;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &&[response::MethodResponse];
    let _21: &diem_types::ledger_info::LedgerInfo;
    let mut _23: std::option::Option<u64>;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::option::Option<diem_types::account_state::AccountState>>;
    let mut _26: std::result::Result<std::option::Option<diem_types::account_state::AccountState>, error::Error>;
    let _27: &&diem_json_rpc_types::views::AccountStateWithProofView;
    let mut _28: diem_types::PeerId;
    let mut _29: std::option::Option<u64>;
    let mut _30: u64;
    let mut _31: isize;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::option::Option<diem_json_rpc_types::views::AccountView>>;
    let mut _35: std::result::Result<std::option::Option<diem_json_rpc_types::views::AccountView>, error::Error>;
    let mut _36: std::option::Option<std::result::Result<diem_json_rpc_types::views::AccountView, error::Error>>;
    let mut _37: std::option::Option<diem_types::account_state::AccountState>;
    let mut _38: {closure@sdk/client/src/verifying_client/methods.rs:448:18: 448:33};
    let mut _39: &diem_types::PeerId;
    let mut _40: &u64;
    let mut _41: isize;
    let mut _44: response::MethodResponse;
    let mut _46: &diem_types::state_proof::StateProof;
    let mut _47: &diem_json_rpc_types::views::AccountStateWithProofView;
    let mut _48: bool;
    scope 1 {
        debug account => _4;
        let _20: u64;
        scope 5 {
            debug ledger_version => _20;
            let _22: u64;
            scope 6 {
                debug version => _22;
                let _24: std::option::Option<diem_types::account_state::AccountState>;
                let _32: std::result::Result<std::convert::Infallible, error::Error>;
                let _33: std::option::Option<diem_types::account_state::AccountState>;
                scope 7 {
                    debug maybe_account_state => _24;
                    let _42: std::result::Result<std::convert::Infallible, error::Error>;
                    let _43: std::option::Option<diem_json_rpc_types::views::AccountView>;
                    scope 12 {
                        debug maybe_account_view => _43;
                    }
                    scope 13 {
                        debug residual => _42;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug val => _43;
                        scope 16 {
                        }
                    }
                }
                scope 8 {
                    debug residual => _32;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _33;
                    scope 11 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug account => _9;
    }
    scope 3 {
        debug subresponses => _10;
        let _12: std::string::String;
        let mut _45: &[&str; 1];
        scope 4 {
            debug res => _12;
        }
    }

    bb0: {
        _48 = const false;
        _6 = Len((*_3));
        _7 = const 1_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = discriminant((*_3)[0 of 1]);
        switchInt(move _5) -> [11: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = _3;
        _45 = const _;
        _14 = _45 as &[&str] (PointerCoercion(Unsize));
        _19 = &_10;
        _18 = core::fmt::rt::Argument::<'_>::new_debug::<&[MethodResponse]>(_19) -> [return: bb4, unwind continue];
    }

    bb3: {
        _9 = &(((*_3)[0 of 1] as GetAccountStateWithProof).0: diem_json_rpc_types::views::AccountStateWithProofView);
        _4 = _9;
        _46 = deref_copy (_2.1: &diem_types::state_proof::StateProof);
        _21 = StateProof::latest_ledger_info(_46) -> [return: bb8, unwind continue];
    }

    bb4: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = format(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _11 = error::Error::rpc_response::<std::string::String>(move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _11);
        goto -> bb22;
    }

    bb8: {
        _20 = LedgerInfo::version(_21) -> [return: bb9, unwind continue];
    }

    bb9: {
        _23 = (_1.0: std::option::Option<u64>);
        _22 = std::option::Option::<u64>::unwrap_or(move _23, _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        _27 = &_4;
        _47 = deref_copy (*_27);
        _28 = (_1.1: diem_types::PeerId);
        _30 = _22;
        _29 = std::option::Option::<u64>::Some(move _30);
        _26 = verify_account_state(_2, _47, move _28, move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        _25 = <std::result::Result<std::option::Option<AccountState>, error::Error> as Try>::branch(move _26) -> [return: bb12, unwind continue];
    }

    bb12: {
        _31 = discriminant(_25);
        switchInt(move _31) -> [0: bb13, 1: bb15, otherwise: bb14];
    }

    bb13: {
        _33 = move ((_25 as Continue).0: std::option::Option<diem_types::account_state::AccountState>);
        _48 = const true;
        _24 = move _33;
        _48 = const false;
        _37 = move _24;
        _39 = &(_1.1: diem_types::PeerId);
        _40 = &_22;
        _38 = {closure@sdk/client/src/verifying_client/methods.rs:448:18: 448:33} { address: move _39, version: move _40 };
        _36 = std::option::Option::<AccountState>::map::<std::result::Result<AccountView, error::Error>, {closure@sdk/client/src/verifying_client/methods.rs:448:18: 448:33}>(move _37, move _38) -> [return: bb16, unwind: bb25];
    }

    bb14: {
        unreachable;
    }

    bb15: {
        _32 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _32) -> [return: bb21, unwind continue];
    }

    bb16: {
        _35 = std::option::Option::<std::result::Result<AccountView, error::Error>>::transpose(move _36) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        _34 = <std::result::Result<std::option::Option<AccountView>, error::Error> as Try>::branch(move _35) -> [return: bb18, unwind: bb25];
    }

    bb18: {
        _41 = discriminant(_34);
        switchInt(move _41) -> [0: bb19, 1: bb20, otherwise: bb14];
    }

    bb19: {
        _43 = move ((_34 as Continue).0: std::option::Option<diem_json_rpc_types::views::AccountView>);
        _44 = MethodResponse::GetAccount(move _43);
        _0 = std::result::Result::<MethodResponse, error::Error>::Ok(move _44);
        _48 = const false;
        goto -> bb22;
    }

    bb20: {
        _42 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _42) -> [return: bb26, unwind: bb25];
    }

    bb21: {
        _48 = const false;
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        resume;
    }

    bb24 (cleanup): {
        drop(_24) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_48) -> [0: bb23, otherwise: bb24];
    }

    bb26: {
        goto -> bb21;
    }
}

promoted[0] in get_account::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected [GetAccountStateWithProof] subresponses, received: "];
        _0 = &_1;
        return;
    }
}

fn get_account::{closure#0}::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:448:18: 448:33}, _2: AccountState) -> std::result::Result<AccountView, error::Error> {
    debug account_state => _2;
    debug address => (*(_1.0: &diem_types::PeerId));
    debug version => (*(_1.1: &u64));
    let mut _0: std::result::Result<diem_json_rpc_types::views::AccountView, error::Error>;
    let mut _3: std::result::Result<diem_json_rpc_types::views::AccountView, diem_crypto::error::Error>;
    let mut _4: diem_types::PeerId;
    let mut _5: u64;
    let mut _6: &diem_types::PeerId;
    let mut _7: &u64;

    bb0: {
        _6 = deref_copy (_1.0: &diem_types::PeerId);
        _4 = (*_6);
        _7 = deref_copy (_1.1: &u64);
        _5 = (*_7);
        _3 = AccountView::try_from_account_state(move _4, move _2, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = std::result::Result::<AccountView, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _3, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn get_transactions(_1: u64, _2: u64, _3: bool) -> VerifyingRequest {
    debug start_version => _1;
    debug limit => _2;
    debug include_events => _3;
    let mut _0: verifying_client::methods::VerifyingRequest;
    let _4: request::MethodRequest;
    let mut _6: std::boxed::Box<[request::MethodRequest]>;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: *mut u8;
    let mut _10: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _11: request::MethodRequest;
    let mut _13: std::boxed::Box<{closure@sdk/client/src/verifying_client/methods.rs:466:46: 466:71}>;
    let mut _14: {closure@sdk/client/src/verifying_client/methods.rs:466:46: 466:71};
    let mut _15: request::MethodRequest;
    let mut _16: std::vec::Vec<request::MethodRequest>;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: *const [request::MethodRequest; 1];
    scope 1 {
        debug request => _4;
        let _5: std::vec::Vec<request::MethodRequest>;
        let mut _20: *const ();
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: bool;
        scope 2 {
            debug subrequests => _5;
            let _12: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
            scope 4 {
                debug callback => _12;
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _18 = const false;
        _17 = const false;
        _18 = const true;
        _4 = request::MethodRequest::GetTransactions(_1, _2, _3);
        _7 = SizeOf([request::MethodRequest; 1]);
        _8 = AlignOf([request::MethodRequest; 1]);
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _10 = ShallowInitBox(move _9, [request::MethodRequest; 1]);
        _11 = request::MethodRequest::GetTransactionsWithProofs(_1, _2, _3);
        _19 = (((_10.0: std::ptr::Unique<[request::MethodRequest; 1]>).0: std::ptr::NonNull<[request::MethodRequest; 1]>).0: *const [request::MethodRequest; 1]);
        _20 = _19 as *const () (PtrToPtr);
        _21 = _20 as usize (Transmute);
        _22 = AlignOf([request::MethodRequest; 1]);
        _23 = Sub(_22, const 1_usize);
        _24 = BitAnd(_21, _23);
        _25 = Eq(_24, const 0_usize);
        assert(_25, "misaligned pointer dereference: address must be a multiple of {} but is {}", _22, _21) -> [success: bb10, unwind unreachable];
    }

    bb2: {
        _17 = const true;
        _14 = {closure@sdk/client/src/verifying_client/methods.rs:466:46: 466:71} { include_events: _3, start_version: _1 };
        _13 = Box::<{closure@sdk/client/src/verifying_client/methods.rs:466:46: 466:71}>::new(move _14) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _12 = move _13 as std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>> (PointerCoercion(Unsize));
        _18 = const false;
        _15 = move _4;
        _17 = const false;
        _16 = move _5;
        _0 = VerifyingRequest::new(move _15, move _16, move _12) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _17 = const false;
        _18 = const false;
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_17) -> [0: bb9, otherwise: bb6];
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_18) -> [0: bb5, otherwise: bb8];
    }

    bb10: {
        (*_19) = [move _11];
        _6 = move _10 as std::boxed::Box<[request::MethodRequest]> (PointerCoercion(Unsize));
        _5 = slice::<impl [request::MethodRequest]>::into_vec::<std::alloc::Global>(move _6) -> [return: bb2, unwind: bb9];
    }
}

fn get_transactions::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:466:46: 466:71}, _2: RequestContext<'_>, _3: &[MethodResponse]) -> std::result::Result<MethodResponse, error::Error> {
    debug ctxt => _2;
    debug subresponses => _3;
    debug include_events => (_1.0: bool);
    debug start_version => (_1.1: u64);
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let mut _4: isize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _8: &std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>;
    let _9: &[response::MethodResponse];
    let mut _10: error::Error;
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &&[response::MethodResponse];
    let mut _19: isize;
    let mut _21: response::MethodResponse;
    let mut _22: std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let mut _24: &std::option::Option<diem_json_rpc_types::views::BytesView>;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: error::Error;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 2];
    let _34: [core::fmt::rt::Argument<'_>; 2];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &bool;
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: &bool;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::transaction::TransactionListWithProof>;
    let mut _41: std::result::Result<diem_types::transaction::TransactionListWithProof, error::Error>;
    let mut _42: std::result::Result<diem_types::transaction::TransactionListWithProof, diem_crypto::error::Error>;
    let mut _43: u64;
    let mut _44: isize;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>>;
    let mut _49: std::result::Result<(), error::Error>;
    let mut _50: std::result::Result<(), diem_crypto::error::Error>;
    let mut _51: &diem_types::transaction::TransactionListWithProof;
    let mut _52: std::option::Option<u64>;
    let mut _53: u64;
    let mut _54: isize;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_json_rpc_types::views::TransactionListView>;
    let mut _57: std::result::Result<diem_json_rpc_types::views::TransactionListView, error::Error>;
    let mut _58: std::result::Result<diem_json_rpc_types::views::TransactionListView, diem_crypto::error::Error>;
    let mut _59: diem_types::transaction::TransactionListWithProof;
    let mut _60: isize;
    let mut _63: response::MethodResponse;
    let mut _64: std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let mut _67: &diem_types::state_proof::StateProof;
    let mut _68: bool;
    scope 1 {
        debug maybe_txs_with_proofs_view => _8;
        scope 5 {
            debug txs_with_proofs_view => _20;
            let _23: bool;
            scope 7 {
                debug has_events => _23;
                let _29: std::string::String;
                let _39: diem_types::transaction::TransactionListWithProof;
                let _45: std::result::Result<std::convert::Infallible, error::Error>;
                let _46: diem_types::transaction::TransactionListWithProof;
                let mut _66: &[&str; 2];
                scope 8 {
                    debug res => _29;
                }
                scope 9 {
                    debug txn_list_with_proof => _39;
                    let _47: &diem_types::ledger_info::LedgerInfo;
                    scope 14 {
                        debug latest_li => _47;
                        let _55: std::result::Result<std::convert::Infallible, error::Error>;
                        let _61: std::result::Result<std::convert::Infallible, error::Error>;
                        let _62: diem_json_rpc_types::views::TransactionListView;
                        scope 15 {
                            debug residual => _55;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => const ();
                            scope 18 {
                            }
                        }
                        scope 19 {
                            debug txn_list_view => _62;
                        }
                        scope 20 {
                            debug residual => _61;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug val => _62;
                            scope 23 {
                            }
                        }
                    }
                }
                scope 10 {
                    debug residual => _45;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug val => _46;
                    scope 13 {
                    }
                }
            }
        }
        scope 6 {
            debug txs_with_proofs_view => _20;
            let _20: &diem_json_rpc_types::views::TransactionsWithProofsView;
        }
    }
    scope 2 {
        debug txs => _8;
    }
    scope 3 {
        debug subresponses => _9;
        let _11: std::string::String;
        let mut _65: &[&str; 1];
        scope 4 {
            debug res => _11;
        }
    }

    bb0: {
        _68 = const false;
        _5 = Len((*_3));
        _6 = const 1_usize;
        _7 = Eq(move _5, move _6);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = discriminant((*_3)[0 of 1]);
        switchInt(move _4) -> [12: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = _3;
        _65 = const _;
        _13 = _65 as &[&str] (PointerCoercion(Unsize));
        _18 = &_9;
        _17 = core::fmt::rt::Argument::<'_>::new_debug::<&[MethodResponse]>(_18) -> [return: bb4, unwind continue];
    }

    bb3: {
        _8 = &(((*_3)[0 of 1] as GetTransactionsWithProofs).0: std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>);
        _19 = discriminant((*_8));
        switchInt(move _19) -> [1: bb9, otherwise: bb8];
    }

    bb4: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = format(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _10 = error::Error::rpc_response::<std::string::String>(move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _10);
        goto -> bb38;
    }

    bb8: {
        _22 = Vec::<TransactionView>::new() -> [return: bb10, unwind continue];
    }

    bb9: {
        _20 = &(((*_8) as Some).0: diem_json_rpc_types::views::TransactionsWithProofsView);
        _24 = &((*_20).1: std::option::Option<diem_json_rpc_types::views::BytesView>);
        _23 = std::option::Option::<BytesView>::is_some(move _24) -> [return: bb11, unwind continue];
    }

    bb10: {
        _21 = MethodResponse::GetTransactions(move _22);
        _0 = std::result::Result::<MethodResponse, error::Error>::Ok(move _21);
        goto -> bb38;
    }

    bb11: {
        _26 = (_1.0: bool);
        _27 = _23;
        _25 = Ne(move _26, move _27);
        switchInt(move _25) -> [0: bb18, otherwise: bb12];
    }

    bb12: {
        _66 = const _;
        _31 = _66 as &[&str] (PointerCoercion(Unsize));
        _36 = &(_1.0: bool);
        _35 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_36) -> [return: bb13, unwind continue];
    }

    bb13: {
        _38 = &_23;
        _37 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_38) -> [return: bb14, unwind continue];
    }

    bb14: {
        _34 = [move _35, move _37];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _30 = Arguments::<'_>::new_v1(move _31, move _32) -> [return: bb15, unwind continue];
    }

    bb15: {
        _29 = format(move _30) -> [return: bb16, unwind continue];
    }

    bb16: {
        _28 = error::Error::rpc_response::<std::string::String>(move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _28);
        goto -> bb38;
    }

    bb18: {
        _43 = (_1.1: u64);
        _42 = TransactionsWithProofsView::try_into_txn_list_with_proof(_20, move _43) -> [return: bb19, unwind continue];
    }

    bb19: {
        _41 = std::result::Result::<TransactionListWithProof, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _42, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb20, unwind continue];
    }

    bb20: {
        _40 = <std::result::Result<TransactionListWithProof, error::Error> as Try>::branch(move _41) -> [return: bb21, unwind continue];
    }

    bb21: {
        _44 = discriminant(_40);
        switchInt(move _44) -> [0: bb22, 1: bb24, otherwise: bb23];
    }

    bb22: {
        _46 = move ((_40 as Continue).0: diem_types::transaction::TransactionListWithProof);
        _68 = const true;
        _39 = move _46;
        _67 = deref_copy (_2.1: &diem_types::state_proof::StateProof);
        _47 = StateProof::latest_ledger_info(_67) -> [return: bb25, unwind: bb42];
    }

    bb23: {
        unreachable;
    }

    bb24: {
        _45 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _45) -> [return: bb37, unwind continue];
    }

    bb25: {
        _51 = &_39;
        _53 = (_1.1: u64);
        _52 = std::option::Option::<u64>::Some(move _53);
        _50 = TransactionListWithProof::verify(move _51, _47, move _52) -> [return: bb26, unwind: bb42];
    }

    bb26: {
        _49 = std::result::Result::<(), diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::invalid_proof::<diem_crypto::error::Error>}>(move _50, error::Error::invalid_proof::<diem_crypto::error::Error>) -> [return: bb27, unwind: bb42];
    }

    bb27: {
        _48 = <std::result::Result<(), error::Error> as Try>::branch(move _49) -> [return: bb28, unwind: bb42];
    }

    bb28: {
        _54 = discriminant(_48);
        switchInt(move _54) -> [0: bb29, 1: bb30, otherwise: bb23];
    }

    bb29: {
        _68 = const false;
        _59 = move _39;
        _58 = <TransactionListView as TryFrom<TransactionListWithProof>>::try_from(move _59) -> [return: bb31, unwind: bb42];
    }

    bb30: {
        _55 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _55) -> [return: bb43, unwind: bb42];
    }

    bb31: {
        _57 = std::result::Result::<TransactionListView, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _58, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb32, unwind: bb42];
    }

    bb32: {
        _56 = <std::result::Result<TransactionListView, error::Error> as Try>::branch(move _57) -> [return: bb33, unwind: bb42];
    }

    bb33: {
        _60 = discriminant(_56);
        switchInt(move _60) -> [0: bb34, 1: bb35, otherwise: bb23];
    }

    bb34: {
        _62 = move ((_56 as Continue).0: diem_json_rpc_types::views::TransactionListView);
        _64 = move (_62.0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _63 = MethodResponse::GetTransactions(move _64);
        _0 = std::result::Result::<MethodResponse, error::Error>::Ok(move _63);
        _68 = const false;
        goto -> bb38;
    }

    bb35: {
        _61 = move ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _61) -> [return: bb44, unwind: bb42];
    }

    bb36: {
        switchInt(_68) -> [0: bb37, otherwise: bb40];
    }

    bb37: {
        _68 = const false;
        goto -> bb38;
    }

    bb38: {
        return;
    }

    bb39 (cleanup): {
        resume;
    }

    bb40: {
        drop(_39) -> [return: bb37, unwind continue];
    }

    bb41 (cleanup): {
        drop(_39) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_68) -> [0: bb39, otherwise: bb41];
    }

    bb43: {
        goto -> bb36;
    }

    bb44: {
        goto -> bb36;
    }
}

promoted[0] in get_transactions::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected [GetTransactionsWithProofs] subresponses, received: "];
        _0 = &_1;
        return;
    }
}

promoted[1] in get_transactions::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "expected events: ", const ", received events: "];
        _0 = &_1;
        return;
    }
}

fn get_account_transactions(_1: AccountAddress, _2: u64, _3: u64, _4: bool) -> VerifyingRequest {
    debug address => _1;
    debug start_seq_num => _2;
    debug limit => _3;
    debug include_events => _4;
    let mut _0: verifying_client::methods::VerifyingRequest;
    let _5: request::MethodRequest;
    let mut _7: std::boxed::Box<[request::MethodRequest]>;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: *mut u8;
    let mut _11: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _12: request::MethodRequest;
    let mut _13: std::option::Option<u64>;
    let mut _15: std::boxed::Box<{closure@sdk/client/src/verifying_client/methods.rs:532:46: 532:71}>;
    let mut _16: {closure@sdk/client/src/verifying_client/methods.rs:532:46: 532:71};
    let mut _17: request::MethodRequest;
    let mut _18: std::vec::Vec<request::MethodRequest>;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: *const [request::MethodRequest; 1];
    scope 1 {
        debug request => _5;
        let _6: std::vec::Vec<request::MethodRequest>;
        let mut _22: *const ();
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: bool;
        scope 2 {
            debug subrequests => _6;
            let _14: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
            scope 4 {
                debug callback => _14;
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _20 = const false;
        _19 = const false;
        _20 = const true;
        _5 = request::MethodRequest::GetAccountTransactions(_1, _2, _3, _4);
        _8 = SizeOf([request::MethodRequest; 1]);
        _9 = AlignOf([request::MethodRequest; 1]);
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _11 = ShallowInitBox(move _10, [request::MethodRequest; 1]);
        _13 = std::option::Option::<u64>::None;
        _12 = request::MethodRequest::GetAccountTransactionsWithProofs(_1, _2, _3, _4, move _13);
        _21 = (((_11.0: std::ptr::Unique<[request::MethodRequest; 1]>).0: std::ptr::NonNull<[request::MethodRequest; 1]>).0: *const [request::MethodRequest; 1]);
        _22 = _21 as *const () (PtrToPtr);
        _23 = _22 as usize (Transmute);
        _24 = AlignOf([request::MethodRequest; 1]);
        _25 = Sub(_24, const 1_usize);
        _26 = BitAnd(_23, _25);
        _27 = Eq(_26, const 0_usize);
        assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb10, unwind unreachable];
    }

    bb2: {
        _19 = const true;
        _16 = {closure@sdk/client/src/verifying_client/methods.rs:532:46: 532:71} { address: _1, start_seq_num: _2, limit: _3, include_events: _4 };
        _15 = Box::<{closure@sdk/client/src/verifying_client/methods.rs:532:46: 532:71}>::new(move _16) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _14 = move _15 as std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>> (PointerCoercion(Unsize));
        _20 = const false;
        _17 = move _5;
        _19 = const false;
        _18 = move _6;
        _0 = VerifyingRequest::new(move _17, move _18, move _14) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _19 = const false;
        _20 = const false;
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_6) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_19) -> [0: bb9, otherwise: bb6];
    }

    bb8 (cleanup): {
        drop(_5) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_20) -> [0: bb5, otherwise: bb8];
    }

    bb10: {
        (*_21) = [move _12];
        _7 = move _11 as std::boxed::Box<[request::MethodRequest]> (PointerCoercion(Unsize));
        _6 = slice::<impl [request::MethodRequest]>::into_vec::<std::alloc::Global>(move _7) -> [return: bb2, unwind: bb9];
    }
}

fn get_account_transactions::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:532:46: 532:71}, _2: RequestContext<'_>, _3: &[MethodResponse]) -> std::result::Result<MethodResponse, error::Error> {
    debug ctxt => _2;
    debug subresponses => _3;
    debug address => (_1.0: diem_types::PeerId);
    debug start_seq_num => (_1.1: u64);
    debug limit => (_1.2: u64);
    debug include_events => (_1.3: bool);
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let mut _4: isize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _8: &diem_json_rpc_types::views::AccountTransactionsWithProofView;
    let _9: &[response::MethodResponse];
    let mut _10: error::Error;
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &&[response::MethodResponse];
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::transaction::AccountTransactionsWithProof>;
    let mut _21: std::result::Result<diem_types::transaction::AccountTransactionsWithProof, error::Error>;
    let mut _22: std::result::Result<diem_types::transaction::AccountTransactionsWithProof, diem_crypto::error::Error>;
    let mut _23: isize;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>>;
    let mut _29: std::result::Result<(), error::Error>;
    let mut _30: std::result::Result<(), diem_crypto::error::Error>;
    let mut _31: &diem_types::transaction::AccountTransactionsWithProof;
    let mut _32: diem_types::PeerId;
    let mut _33: u64;
    let mut _34: u64;
    let mut _35: bool;
    let mut _36: isize;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_json_rpc_types::views::TransactionListView>;
    let mut _39: std::result::Result<diem_json_rpc_types::views::TransactionListView, error::Error>;
    let mut _40: std::result::Result<diem_json_rpc_types::views::TransactionListView, diem_crypto::error::Error>;
    let mut _41: diem_types::transaction::AccountTransactionsWithProof;
    let mut _42: isize;
    let mut _45: response::MethodResponse;
    let mut _46: std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let mut _48: &diem_types::state_proof::StateProof;
    let mut _49: bool;
    scope 1 {
        debug acct_txns_with_proof_view => _8;
        let _19: diem_types::transaction::AccountTransactionsWithProof;
        let _24: std::result::Result<std::convert::Infallible, error::Error>;
        let _25: diem_types::transaction::AccountTransactionsWithProof;
        scope 5 {
            debug acct_txns_with_proof => _19;
            let _26: &diem_types::ledger_info::LedgerInfo;
            scope 10 {
                debug latest_li => _26;
                let _27: u64;
                scope 11 {
                    debug ledger_version => _27;
                    let _37: std::result::Result<std::convert::Infallible, error::Error>;
                    let _43: std::result::Result<std::convert::Infallible, error::Error>;
                    let _44: diem_json_rpc_types::views::TransactionListView;
                    scope 12 {
                        debug residual => _37;
                        scope 13 {
                        }
                    }
                    scope 14 {
                        debug val => const ();
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug txs => _44;
                    }
                    scope 17 {
                        debug residual => _43;
                        scope 18 {
                        }
                    }
                    scope 19 {
                        debug val => _44;
                        scope 20 {
                        }
                    }
                }
            }
        }
        scope 6 {
            debug residual => _24;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _25;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug txs => _8;
    }
    scope 3 {
        debug subresponses => _9;
        let _11: std::string::String;
        let mut _47: &[&str; 1];
        scope 4 {
            debug res => _11;
        }
    }

    bb0: {
        _49 = const false;
        _5 = Len((*_3));
        _6 = const 1_usize;
        _7 = Eq(move _5, move _6);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = discriminant((*_3)[0 of 1]);
        switchInt(move _4) -> [13: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = _3;
        _47 = const _;
        _13 = _47 as &[&str] (PointerCoercion(Unsize));
        _18 = &_9;
        _17 = core::fmt::rt::Argument::<'_>::new_debug::<&[MethodResponse]>(_18) -> [return: bb4, unwind continue];
    }

    bb3: {
        _8 = &(((*_3)[0 of 1] as GetAccountTransactionsWithProofs).0: diem_json_rpc_types::views::AccountTransactionsWithProofView);
        _22 = <AccountTransactionsWithProof as TryFrom<&AccountTransactionsWithProofView>>::try_from(_8) -> [return: bb8, unwind continue];
    }

    bb4: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = format(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _10 = error::Error::rpc_response::<std::string::String>(move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _10);
        goto -> bb28;
    }

    bb8: {
        _21 = std::result::Result::<AccountTransactionsWithProof, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _22, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb9, unwind continue];
    }

    bb9: {
        _20 = <std::result::Result<AccountTransactionsWithProof, error::Error> as Try>::branch(move _21) -> [return: bb10, unwind continue];
    }

    bb10: {
        _23 = discriminant(_20);
        switchInt(move _23) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        _25 = move ((_20 as Continue).0: diem_types::transaction::AccountTransactionsWithProof);
        _49 = const true;
        _19 = move _25;
        _48 = deref_copy (_2.1: &diem_types::state_proof::StateProof);
        _26 = StateProof::latest_ledger_info(_48) -> [return: bb14, unwind: bb32];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _24 = move ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _24) -> [return: bb27, unwind continue];
    }

    bb14: {
        _27 = LedgerInfo::version(_26) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _31 = &_19;
        _32 = (_1.0: diem_types::PeerId);
        _33 = (_1.1: u64);
        _34 = (_1.2: u64);
        _35 = (_1.3: bool);
        _30 = AccountTransactionsWithProof::verify(move _31, _26, move _32, move _33, move _34, move _35, _27) -> [return: bb16, unwind: bb32];
    }

    bb16: {
        _29 = std::result::Result::<(), diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::invalid_proof::<diem_crypto::error::Error>}>(move _30, error::Error::invalid_proof::<diem_crypto::error::Error>) -> [return: bb17, unwind: bb32];
    }

    bb17: {
        _28 = <std::result::Result<(), error::Error> as Try>::branch(move _29) -> [return: bb18, unwind: bb32];
    }

    bb18: {
        _36 = discriminant(_28);
        switchInt(move _36) -> [0: bb19, 1: bb20, otherwise: bb12];
    }

    bb19: {
        _49 = const false;
        _41 = move _19;
        _40 = <TransactionListView as TryFrom<AccountTransactionsWithProof>>::try_from(move _41) -> [return: bb21, unwind: bb32];
    }

    bb20: {
        _37 = move ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _37) -> [return: bb33, unwind: bb32];
    }

    bb21: {
        _39 = std::result::Result::<TransactionListView, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _40, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        _38 = <std::result::Result<TransactionListView, error::Error> as Try>::branch(move _39) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        _42 = discriminant(_38);
        switchInt(move _42) -> [0: bb24, 1: bb25, otherwise: bb12];
    }

    bb24: {
        _44 = move ((_38 as Continue).0: diem_json_rpc_types::views::TransactionListView);
        _46 = move (_44.0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _45 = MethodResponse::GetAccountTransactions(move _46);
        _0 = std::result::Result::<MethodResponse, error::Error>::Ok(move _45);
        _49 = const false;
        goto -> bb28;
    }

    bb25: {
        _43 = move ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _43) -> [return: bb34, unwind: bb32];
    }

    bb26: {
        switchInt(_49) -> [0: bb27, otherwise: bb30];
    }

    bb27: {
        _49 = const false;
        goto -> bb28;
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        resume;
    }

    bb30: {
        drop(_19) -> [return: bb27, unwind continue];
    }

    bb31 (cleanup): {
        drop(_19) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_49) -> [0: bb29, otherwise: bb31];
    }

    bb33: {
        goto -> bb26;
    }

    bb34: {
        goto -> bb26;
    }
}

promoted[0] in get_account_transactions::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected [GetAccountTransactionsWithProofs] subresponses, received: "];
        _0 = &_1;
        return;
    }
}

fn get_account_transaction(_1: AccountAddress, _2: u64, _3: bool) -> VerifyingRequest {
    debug address => _1;
    debug seq_num => _2;
    debug include_events => _3;
    let mut _0: verifying_client::methods::VerifyingRequest;
    let mut _4: verifying_client::methods::VerifyingRequest;

    bb0: {
        _4 = get_account_transactions(_1, _2, const 1_u64, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = VerifyingRequest::map::<{closure@sdk/client/src/verifying_client/methods.rs:573:71: 573:88}>(move _4, const ZeroSized: {closure@sdk/client/src/verifying_client/methods.rs:573:71: 573:88}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn get_account_transaction::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:573:71: 573:88}, _2: RequestContext<'_>, _3: MethodResponse) -> MethodResponse {
    debug _ctxt => _2;
    debug response => _3;
    let mut _0: response::MethodResponse;
    let mut _4: isize;
    let _5: std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let mut _6: std::option::Option<diem_json_rpc_types::views::TransactionView>;
    let mut _7: &mut std::vec::IntoIter<diem_json_rpc_types::views::TransactionView>;
    let mut _8: std::vec::IntoIter<diem_json_rpc_types::views::TransactionView>;
    let _9: response::MethodResponse;
    let _10: !;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &response::MethodResponse;
    let mut _19: bool;
    let mut _20: isize;
    let mut _21: isize;
    scope 1 {
        debug txns => _5;
    }
    scope 2 {
        debug response => _9;
        let mut _18: &[&str; 1];
    }

    bb0: {
        _19 = const false;
        _19 = const true;
        _4 = discriminant(_3);
        switchInt(move _4) -> [5: bb2, otherwise: bb1];
    }

    bb1: {
        _19 = const false;
        _9 = move _3;
        _18 = const _;
        _12 = _18 as &[&str] (PointerCoercion(Unsize));
        _17 = &_9;
        _16 = core::fmt::rt::Argument::<'_>::new_debug::<MethodResponse>(_17) -> [return: bb6, unwind: bb8];
    }

    bb2: {
        _5 = move ((_3 as GetAccountTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _8 = <Vec<TransactionView> as IntoIterator>::into_iter(move _5) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _7 = &mut _8;
        _6 = <std::vec::IntoIter<TransactionView> as Iterator>::next(move _7) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _0 = MethodResponse::GetAccountTransaction(move _6);
        drop(_8) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        _20 = discriminant(_3);
        switchInt(move _20) -> [5: bb11, otherwise: bb12];
    }

    bb6: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        _10 = panic_fmt(move _11) -> bb8;
    }

    bb8 (cleanup): {
        drop(_9) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_8) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        _19 = const false;
        return;
    }

    bb12: {
        drop(_3) -> [return: bb11, unwind continue];
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        _21 = discriminant(_3);
        switchInt(move _21) -> [5: bb10, otherwise: bb13];
    }

    bb15 (cleanup): {
        switchInt(_19) -> [0: bb10, otherwise: bb14];
    }
}

promoted[0] in get_account_transaction::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected GetAccountTransactions response, got: "];
        _0 = &_1;
        return;
    }
}

fn methods::get_events(_1: EventKey, _2: u64, _3: u64) -> VerifyingRequest {
    debug key => _1;
    debug start_seq => _2;
    debug limit => _3;
    let mut _0: verifying_client::methods::VerifyingRequest;
    let _4: request::MethodRequest;
    let mut _6: std::boxed::Box<[request::MethodRequest]>;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: *mut u8;
    let mut _10: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _11: request::MethodRequest;
    let mut _13: std::boxed::Box<{closure@sdk/client/src/verifying_client/methods.rs:590:46: 590:71}>;
    let mut _14: {closure@sdk/client/src/verifying_client/methods.rs:590:46: 590:71};
    let mut _15: request::MethodRequest;
    let mut _16: std::vec::Vec<request::MethodRequest>;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: *const [request::MethodRequest; 1];
    scope 1 {
        debug request => _4;
        let _5: std::vec::Vec<request::MethodRequest>;
        let mut _20: *const ();
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: bool;
        scope 2 {
            debug subrequests => _5;
            let _12: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
            scope 4 {
                debug callback => _12;
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _18 = const false;
        _17 = const false;
        _18 = const true;
        _4 = request::MethodRequest::GetEvents(_1, _2, _3);
        _7 = SizeOf([request::MethodRequest; 1]);
        _8 = AlignOf([request::MethodRequest; 1]);
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        _10 = ShallowInitBox(move _9, [request::MethodRequest; 1]);
        _11 = request::MethodRequest::GetEventsWithProofs(_1, _2, _3);
        _19 = (((_10.0: std::ptr::Unique<[request::MethodRequest; 1]>).0: std::ptr::NonNull<[request::MethodRequest; 1]>).0: *const [request::MethodRequest; 1]);
        _20 = _19 as *const () (PtrToPtr);
        _21 = _20 as usize (Transmute);
        _22 = AlignOf([request::MethodRequest; 1]);
        _23 = Sub(_22, const 1_usize);
        _24 = BitAnd(_21, _23);
        _25 = Eq(_24, const 0_usize);
        assert(_25, "misaligned pointer dereference: address must be a multiple of {} but is {}", _22, _21) -> [success: bb10, unwind unreachable];
    }

    bb2: {
        _17 = const true;
        _14 = {closure@sdk/client/src/verifying_client/methods.rs:590:46: 590:71} { limit: _3, key: _1, start_seq: _2 };
        _13 = Box::<{closure@sdk/client/src/verifying_client/methods.rs:590:46: 590:71}>::new(move _14) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _12 = move _13 as std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>> (PointerCoercion(Unsize));
        _18 = const false;
        _15 = move _4;
        _17 = const false;
        _16 = move _5;
        _0 = VerifyingRequest::new(move _15, move _16, move _12) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _17 = const false;
        _18 = const false;
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_5) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        switchInt(_17) -> [0: bb9, otherwise: bb6];
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_18) -> [0: bb5, otherwise: bb8];
    }

    bb10: {
        (*_19) = [move _11];
        _6 = move _10 as std::boxed::Box<[request::MethodRequest]> (PointerCoercion(Unsize));
        _5 = slice::<impl [request::MethodRequest]>::into_vec::<std::alloc::Global>(move _6) -> [return: bb2, unwind: bb9];
    }
}

fn methods::get_events::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:590:46: 590:71}, _2: RequestContext<'_>, _3: &[MethodResponse]) -> std::result::Result<MethodResponse, error::Error> {
    debug ctxt => _2;
    debug subresponses => _3;
    debug limit => (_1.0: u64);
    debug key => (_1.1: diem_types::event::EventKey);
    debug start_seq => (_1.2: u64);
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let mut _4: isize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _8: &std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>;
    let _9: &[response::MethodResponse];
    let mut _10: error::Error;
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 1];
    let _16: [core::fmt::rt::Argument<'_>; 1];
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &&[response::MethodResponse];
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: u64;
    let mut _23: u64;
    let mut _24: error::Error;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let _29: &[core::fmt::rt::Argument<'_>; 2];
    let _30: [core::fmt::rt::Argument<'_>; 2];
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &u64;
    let mut _33: core::fmt::rt::Argument<'_>;
    let _34: &u64;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<diem_json_rpc_types::views::EventView>>;
    let mut _37: std::result::Result<std::vec::Vec<diem_json_rpc_types::views::EventView>, error::Error>;
    let mut _38: std::iter::Map<std::iter::Enumerate<std::slice::Iter<'_, diem_json_rpc_types::views::EventWithProofView>>, {closure@sdk/client/src/verifying_client/methods.rs:616:18: 616:51}>;
    let mut _39: std::iter::Enumerate<std::slice::Iter<'_, diem_json_rpc_types::views::EventWithProofView>>;
    let mut _40: std::slice::Iter<'_, diem_json_rpc_types::views::EventWithProofView>;
    let _41: &[diem_json_rpc_types::views::EventWithProofView];
    let mut _42: {closure@sdk/client/src/verifying_client/methods.rs:616:18: 616:51};
    let mut _43: &&diem_types::ledger_info::LedgerInfo;
    let mut _44: &diem_types::event::EventKey;
    let mut _45: &u64;
    let mut _46: isize;
    let mut _49: response::MethodResponse;
    let mut _52: &diem_types::state_proof::StateProof;
    scope 1 {
        debug event_with_proof_views => _8;
        let _19: u64;
        scope 5 {
            debug num_received => _19;
            let _25: std::string::String;
            let _35: &diem_types::ledger_info::LedgerInfo;
            let mut _51: &[&str; 3];
            scope 6 {
                debug res => _25;
            }
            scope 7 {
                debug latest_li => _35;
                let _47: std::result::Result<std::convert::Infallible, error::Error>;
                let _48: std::vec::Vec<diem_json_rpc_types::views::EventView>;
                scope 8 {
                    debug event_views => _48;
                }
                scope 9 {
                    debug residual => _47;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _48;
                    scope 12 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug inner => _8;
    }
    scope 3 {
        debug subresponses => _9;
        let _11: std::string::String;
        let mut _50: &[&str; 1];
        scope 4 {
            debug res => _11;
        }
    }

    bb0: {
        _5 = Len((*_3));
        _6 = const 1_usize;
        _7 = Eq(move _5, move _6);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = discriminant((*_3)[0 of 1]);
        switchInt(move _4) -> [14: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = _3;
        _50 = const _;
        _13 = _50 as &[&str] (PointerCoercion(Unsize));
        _18 = &_9;
        _17 = core::fmt::rt::Argument::<'_>::new_debug::<&[MethodResponse]>(_18) -> [return: bb4, unwind continue];
    }

    bb3: {
        _8 = &(((*_3)[0 of 1] as GetEventsWithProofs).0: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>);
        _20 = Vec::<EventWithProofView>::len(_8) -> [return: bb8, unwind continue];
    }

    bb4: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = format(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _10 = error::Error::rpc_response::<std::string::String>(move _11) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _10);
        goto -> bb26;
    }

    bb8: {
        _19 = move _20 as u64 (IntToInt);
        _22 = _19;
        _23 = (_1.0: u64);
        _21 = Gt(move _22, move _23);
        switchInt(move _21) -> [0: bb15, otherwise: bb9];
    }

    bb9: {
        _51 = const _;
        _27 = _51 as &[&str] (PointerCoercion(Unsize));
        _32 = &(_1.0: u64);
        _31 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_32) -> [return: bb10, unwind continue];
    }

    bb10: {
        _34 = &_19;
        _33 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_34) -> [return: bb11, unwind continue];
    }

    bb11: {
        _30 = [move _31, move _33];
        _29 = &_30;
        _28 = _29 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _26 = Arguments::<'_>::new_v1(move _27, move _28) -> [return: bb12, unwind continue];
    }

    bb12: {
        _25 = format(move _26) -> [return: bb13, unwind continue];
    }

    bb13: {
        _24 = error::Error::rpc_response::<std::string::String>(move _25) -> [return: bb14, unwind continue];
    }

    bb14: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _24);
        goto -> bb26;
    }

    bb15: {
        _52 = deref_copy (_2.1: &diem_types::state_proof::StateProof);
        _35 = StateProof::latest_ledger_info(_52) -> [return: bb16, unwind continue];
    }

    bb16: {
        _41 = <Vec<EventWithProofView> as Deref>::deref(_8) -> [return: bb17, unwind continue];
    }

    bb17: {
        _40 = core::slice::<impl [EventWithProofView]>::iter(_41) -> [return: bb18, unwind continue];
    }

    bb18: {
        _39 = <std::slice::Iter<'_, EventWithProofView> as Iterator>::enumerate(move _40) -> [return: bb19, unwind continue];
    }

    bb19: {
        _43 = &_35;
        _44 = &(_1.1: diem_types::event::EventKey);
        _45 = &(_1.2: u64);
        _42 = {closure@sdk/client/src/verifying_client/methods.rs:616:18: 616:51} { latest_li: move _43, key: move _44, start_seq: move _45 };
        _38 = <std::iter::Enumerate<std::slice::Iter<'_, EventWithProofView>> as Iterator>::map::<std::result::Result<EventView, error::Error>, {closure@sdk/client/src/verifying_client/methods.rs:616:18: 616:51}>(move _39, move _42) -> [return: bb20, unwind continue];
    }

    bb20: {
        _37 = <std::iter::Map<std::iter::Enumerate<std::slice::Iter<'_, EventWithProofView>>, {closure@sdk/client/src/verifying_client/methods.rs:616:18: 616:51}> as Iterator>::collect::<std::result::Result<Vec<EventView>, error::Error>>(move _38) -> [return: bb21, unwind continue];
    }

    bb21: {
        _36 = <std::result::Result<Vec<EventView>, error::Error> as Try>::branch(move _37) -> [return: bb22, unwind continue];
    }

    bb22: {
        _46 = discriminant(_36);
        switchInt(move _46) -> [0: bb23, 1: bb25, otherwise: bb24];
    }

    bb23: {
        _48 = move ((_36 as Continue).0: std::vec::Vec<diem_json_rpc_types::views::EventView>);
        _49 = MethodResponse::GetEvents(move _48);
        _0 = std::result::Result::<MethodResponse, error::Error>::Ok(move _49);
        goto -> bb26;
    }

    bb24: {
        unreachable;
    }

    bb25: {
        _47 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _47) -> [return: bb26, unwind continue];
    }

    bb26: {
        return;
    }
}

promoted[0] in methods::get_events::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected [GetEventsWithProofs] subresponses, received: "];
        _0 = &_1;
        return;
    }
}

promoted[1] in methods::get_events::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "more events than limit: limit ", const " events, received ", const " events"];
        _0 = &_1;
        return;
    }
}

fn methods::get_events::{closure#0}::{closure#0}(_1: &mut {closure@sdk/client/src/verifying_client/methods.rs:616:18: 616:51}, _2: (usize, &EventWithProofView)) -> std::result::Result<EventView, error::Error> {
    debug latest_li => (*((*_1).0: &&diem_types::ledger_info::LedgerInfo));
    debug key => (*((*_1).1: &diem_types::event::EventKey));
    debug start_seq => (*((*_1).2: &u64));
    let mut _0: std::result::Result<diem_json_rpc_types::views::EventView, error::Error>;
    let _3: usize;
    let _4: &diem_json_rpc_types::views::EventWithProofView;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::contract_event::EventWithProof>;
    let mut _7: std::result::Result<diem_types::contract_event::EventWithProof, error::Error>;
    let mut _8: std::result::Result<diem_types::contract_event::EventWithProof, diem_crypto::error::Error>;
    let mut _9: isize;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>>;
    let mut _14: std::result::Result<(), error::Error>;
    let mut _15: std::result::Result<(), diem_crypto::error::Error>;
    let mut _16: &diem_types::contract_event::EventWithProof;
    let mut _17: u64;
    let mut _18: u64;
    let mut _19: u64;
    let mut _20: (u64, bool);
    let mut _21: u64;
    let mut _22: isize;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_json_rpc_types::views::EventView>;
    let mut _25: std::result::Result<diem_json_rpc_types::views::EventView, error::Error>;
    let mut _26: std::result::Result<diem_json_rpc_types::views::EventView, diem_crypto::error::Error>;
    let mut _27: (u64, diem_types::contract_event::ContractEvent);
    let mut _28: diem_types::contract_event::ContractEvent;
    let mut _29: isize;
    let mut _32: &&diem_types::ledger_info::LedgerInfo;
    let mut _33: &diem_types::ledger_info::LedgerInfo;
    let mut _34: &diem_types::event::EventKey;
    let mut _35: &u64;
    let mut _36: bool;
    scope 1 {
        debug offset => _3;
        debug event_with_proof_view => _4;
        let _5: diem_types::contract_event::EventWithProof;
        let _10: std::result::Result<std::convert::Infallible, error::Error>;
        let _11: diem_types::contract_event::EventWithProof;
        scope 2 {
            debug event_with_proof => _5;
            let _12: u64;
            scope 7 {
                debug txn_version => _12;
                let _23: std::result::Result<std::convert::Infallible, error::Error>;
                let _30: std::result::Result<std::convert::Infallible, error::Error>;
                let _31: diem_json_rpc_types::views::EventView;
                scope 8 {
                    debug residual => _23;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => const ();
                    scope 11 {
                    }
                }
                scope 12 {
                    debug event_view => _31;
                }
                scope 13 {
                    debug residual => _30;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _31;
                    scope 16 {
                    }
                }
            }
        }
        scope 3 {
            debug residual => _10;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _11;
            scope 6 {
            }
        }
    }

    bb0: {
        _36 = const false;
        _3 = (_2.0: usize);
        _4 = (_2.1: &diem_json_rpc_types::views::EventWithProofView);
        _8 = <EventWithProof as TryFrom<&EventWithProofView>>::try_from(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = std::result::Result::<EventWithProof, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _8, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = <std::result::Result<EventWithProof, error::Error> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _11 = move ((_6 as Continue).0: diem_types::contract_event::EventWithProof);
        _36 = const true;
        _5 = move _11;
        _12 = (_5.0: u64);
        _16 = &_5;
        _32 = deref_copy ((*_1).0: &&diem_types::ledger_info::LedgerInfo);
        _33 = deref_copy (*_32);
        _34 = deref_copy ((*_1).1: &diem_types::event::EventKey);
        _35 = deref_copy ((*_1).2: &u64);
        _18 = (*_35);
        _19 = _3 as u64 (IntToInt);
        _20 = CheckedAdd(_18, _19);
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", move _18, move _19) -> [success: bb7, unwind: bb28];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<EventView, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _10) -> [return: bb19, unwind continue];
    }

    bb7: {
        _17 = move (_20.0: u64);
        _21 = (_5.1: u64);
        _15 = EventWithProof::verify(move _16, _33, _34, move _17, _12, move _21) -> [return: bb8, unwind: bb28];
    }

    bb8: {
        _14 = std::result::Result::<(), diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::invalid_proof::<diem_crypto::error::Error>}>(move _15, error::Error::invalid_proof::<diem_crypto::error::Error>) -> [return: bb9, unwind: bb28];
    }

    bb9: {
        _13 = <std::result::Result<(), error::Error> as Try>::branch(move _14) -> [return: bb10, unwind: bb28];
    }

    bb10: {
        _22 = discriminant(_13);
        switchInt(move _22) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        _36 = const false;
        _28 = move (_5.2: diem_types::contract_event::ContractEvent);
        _27 = (_12, move _28);
        _26 = <EventView as TryFrom<(u64, ContractEvent)>>::try_from(move _27) -> [return: bb13, unwind: bb28];
    }

    bb12: {
        _23 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<EventView, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _23) -> [return: bb29, unwind: bb28];
    }

    bb13: {
        _25 = std::result::Result::<EventView, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _26, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb14, unwind: bb28];
    }

    bb14: {
        _24 = <std::result::Result<EventView, error::Error> as Try>::branch(move _25) -> [return: bb15, unwind: bb28];
    }

    bb15: {
        _29 = discriminant(_24);
        switchInt(move _29) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        _31 = move ((_24 as Continue).0: diem_json_rpc_types::views::EventView);
        _0 = std::result::Result::<EventView, error::Error>::Ok(move _31);
        drop((_5.3: diem_types::proof::EventProof)) -> [return: bb22, unwind continue];
    }

    bb17: {
        _30 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<EventView, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _30) -> [return: bb30, unwind: bb28];
    }

    bb18: {
        switchInt(_36) -> [0: bb24, otherwise: bb25];
    }

    bb19: {
        _36 = const false;
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22: {
        _36 = const false;
        goto -> bb20;
    }

    bb23 (cleanup): {
        drop((_5.3: diem_types::proof::EventProof)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb24: {
        drop((_5.3: diem_types::proof::EventProof)) -> [return: bb19, unwind continue];
    }

    bb25: {
        drop((_5.2: diem_types::contract_event::ContractEvent)) -> [return: bb24, unwind: bb23];
    }

    bb26 (cleanup): {
        drop((_5.3: diem_types::proof::EventProof)) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop((_5.2: diem_types::contract_event::ContractEvent)) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_36) -> [0: bb26, otherwise: bb27];
    }

    bb29: {
        goto -> bb18;
    }

    bb30: {
        goto -> bb18;
    }
}

fn get_currencies() -> VerifyingRequest {
    let mut _0: verifying_client::methods::VerifyingRequest;
    let _1: request::MethodRequest;
    let mut _3: std::boxed::Box<[request::MethodRequest]>;
    let mut _4: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: *mut u8;
    let mut _8: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _9: request::MethodRequest;
    let mut _10: diem_types::PeerId;
    let mut _11: std::option::Option<u64>;
    let mut _12: std::option::Option<u64>;
    let mut _14: std::boxed::Box<{closure@sdk/client/src/verifying_client/methods.rs:655:46: 655:66}>;
    let mut _15: request::MethodRequest;
    let mut _16: std::vec::Vec<request::MethodRequest>;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: &mut std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _20: ();
    let mut _21: *const [request::MethodRequest; 1];
    scope 1 {
        debug request => _1;
        let _2: std::vec::Vec<request::MethodRequest>;
        let mut _22: *const ();
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: bool;
        scope 2 {
            debug subrequests => _2;
            let _13: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
            scope 4 {
                debug callback => _13;
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _18 = const false;
        _17 = const false;
        _18 = const true;
        _1 = request::MethodRequest::GetCurrencies(const []);
        _5 = SizeOf([request::MethodRequest; 1]);
        _6 = AlignOf([request::MethodRequest; 1]);
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> [return: bb1, unwind: bb11];
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [request::MethodRequest; 1]);
        _10 = diem_root_address() -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _11 = std::option::Option::<u64>::None;
        _12 = std::option::Option::<u64>::None;
        _9 = request::MethodRequest::GetAccountStateWithProof(move _10, move _11, move _12);
        _21 = (((_8.0: std::ptr::Unique<[request::MethodRequest; 1]>).0: std::ptr::NonNull<[request::MethodRequest; 1]>).0: *const [request::MethodRequest; 1]);
        _22 = _21 as *const () (PtrToPtr);
        _23 = _22 as usize (Transmute);
        _24 = AlignOf([request::MethodRequest; 1]);
        _25 = Sub(_24, const 1_usize);
        _26 = BitAnd(_23, _25);
        _27 = Eq(_26, const 0_usize);
        assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb12, unwind unreachable];
    }

    bb3: {
        _17 = const true;
        _14 = Box::<{closure@sdk/client/src/verifying_client/methods.rs:655:46: 655:66}>::new(const ZeroSized: {closure@sdk/client/src/verifying_client/methods.rs:655:46: 655:66}) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _13 = move _14 as std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>> (PointerCoercion(Unsize));
        _18 = const false;
        _15 = move _1;
        _17 = const false;
        _16 = move _2;
        _0 = VerifyingRequest::new(move _15, move _16, move _13) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _17 = const false;
        _18 = const false;
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_17) -> [0: bb11, otherwise: bb7];
    }

    bb9 (cleanup): {
        _19 = &mut _8;
        _20 = <Box<[request::MethodRequest; 1]> as Drop>::drop(move _19) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        switchInt(_18) -> [0: bb6, otherwise: bb10];
    }

    bb12: {
        (*_21) = [move _9];
        _4 = move _8;
        _3 = move _4 as std::boxed::Box<[request::MethodRequest]> (PointerCoercion(Unsize));
        _2 = slice::<impl [request::MethodRequest]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb3, unwind: bb11];
    }

    bb13 (cleanup): {
        goto -> bb11;
    }
}

fn get_currencies::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:655:46: 655:66}, _2: RequestContext<'_>, _3: &[MethodResponse]) -> std::result::Result<MethodResponse, error::Error> {
    debug ctxt => _2;
    debug subresponses => _3;
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let _4: &diem_json_rpc_types::views::AccountStateWithProofView;
    let mut _5: isize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let _9: &diem_json_rpc_types::views::AccountStateWithProofView;
    let _10: &[response::MethodResponse];
    let mut _11: error::Error;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &&[response::MethodResponse];
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::account_state::AccountState>;
    let mut _22: std::result::Result<diem_types::account_state::AccountState, error::Error>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::option::Option<diem_types::account_state::AccountState>>;
    let mut _24: std::result::Result<std::option::Option<diem_types::account_state::AccountState>, error::Error>;
    let _25: &&diem_json_rpc_types::views::AccountStateWithProofView;
    let mut _26: diem_types::PeerId;
    let mut _27: std::option::Option<u64>;
    let mut _28: isize;
    let mut _31: isize;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<diem_types::account_config::CurrencyInfoResource>>;
    let mut _36: std::result::Result<std::vec::Vec<diem_types::account_config::CurrencyInfoResource>, error::Error>;
    let mut _37: std::result::Result<std::vec::Vec<diem_types::account_config::CurrencyInfoResource>, diem_crypto::error::Error>;
    let mut _38: &diem_types::account_state::AccountState;
    let mut _39: isize;
    let mut _43: std::iter::Map<std::slice::Iter<'_, diem_types::account_config::CurrencyInfoResource>, fn(&diem_types::account_config::CurrencyInfoResource) -> diem_json_rpc_types::views::CurrencyInfoView {<diem_json_rpc_types::views::CurrencyInfoView as std::convert::From<&diem_types::account_config::CurrencyInfoResource>>::from}>;
    let mut _44: std::slice::Iter<'_, diem_types::account_config::CurrencyInfoResource>;
    let _45: &[diem_types::account_config::CurrencyInfoResource];
    let mut _46: &std::vec::Vec<diem_types::account_config::CurrencyInfoResource>;
    let mut _47: response::MethodResponse;
    let mut _49: &diem_json_rpc_types::views::AccountStateWithProofView;
    scope 1 {
        debug diem_root => _4;
        let _20: diem_types::account_state::AccountState;
        let _29: std::result::Result<std::convert::Infallible, error::Error>;
        let _30: std::option::Option<diem_types::account_state::AccountState>;
        let _32: std::result::Result<std::convert::Infallible, error::Error>;
        let _33: diem_types::account_state::AccountState;
        scope 5 {
            debug diem_root => _20;
            let _34: std::vec::Vec<diem_types::account_config::CurrencyInfoResource>;
            let _40: std::result::Result<std::convert::Infallible, error::Error>;
            let _41: std::vec::Vec<diem_types::account_config::CurrencyInfoResource>;
            scope 14 {
                debug currency_infos => _34;
                let _42: std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>;
                scope 19 {
                    debug currency_views => _42;
                }
            }
            scope 15 {
                debug residual => _40;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _41;
                scope 18 {
                }
            }
        }
        scope 6 {
            debug residual => _29;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _30;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _32;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _33;
            scope 13 {
            }
        }
    }
    scope 2 {
        debug diem_root => _9;
    }
    scope 3 {
        debug subresponses => _10;
        let _12: std::string::String;
        let mut _48: &[&str; 1];
        scope 4 {
            debug res => _12;
        }
    }

    bb0: {
        _6 = Len((*_3));
        _7 = const 1_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = discriminant((*_3)[0 of 1]);
        switchInt(move _5) -> [11: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = _3;
        _48 = const _;
        _14 = _48 as &[&str] (PointerCoercion(Unsize));
        _19 = &_10;
        _18 = core::fmt::rt::Argument::<'_>::new_debug::<&[MethodResponse]>(_19) -> [return: bb4, unwind continue];
    }

    bb3: {
        _9 = &(((*_3)[0 of 1] as GetAccountStateWithProof).0: diem_json_rpc_types::views::AccountStateWithProofView);
        _4 = _9;
        _25 = &_4;
        _49 = deref_copy (*_25);
        _26 = diem_root_address() -> [return: bb8, unwind continue];
    }

    bb4: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = format(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _11 = error::Error::rpc_response::<std::string::String>(move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _11);
        goto -> bb29;
    }

    bb8: {
        _27 = std::option::Option::<u64>::None;
        _24 = verify_account_state(_2, _49, move _26, move _27) -> [return: bb9, unwind continue];
    }

    bb9: {
        _23 = <std::result::Result<std::option::Option<AccountState>, error::Error> as Try>::branch(move _24) -> [return: bb10, unwind continue];
    }

    bb10: {
        _28 = discriminant(_23);
        switchInt(move _28) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        _30 = move ((_23 as Continue).0: std::option::Option<diem_types::account_state::AccountState>);
        _22 = std::option::Option::<AccountState>::ok_or_else::<error::Error, {closure@sdk/client/src/verifying_client/methods.rs:667:25: 667:27}>(move _30, const ZeroSized: {closure@sdk/client/src/verifying_client/methods.rs:667:25: 667:27}) -> [return: bb14, unwind continue];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _29 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _29) -> [return: bb29, unwind continue];
    }

    bb14: {
        _21 = <std::result::Result<AccountState, error::Error> as Try>::branch(move _22) -> [return: bb15, unwind continue];
    }

    bb15: {
        _31 = discriminant(_21);
        switchInt(move _31) -> [0: bb16, 1: bb17, otherwise: bb12];
    }

    bb16: {
        _33 = move ((_21 as Continue).0: diem_types::account_state::AccountState);
        _20 = move _33;
        _38 = &_20;
        _37 = AccountState::get_registered_currency_info_resources(move _38) -> [return: bb18, unwind: bb31];
    }

    bb17: {
        _32 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _32) -> [return: bb29, unwind continue];
    }

    bb18: {
        _36 = std::result::Result::<Vec<CurrencyInfoResource>, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _37, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb19, unwind: bb31];
    }

    bb19: {
        _35 = <std::result::Result<Vec<CurrencyInfoResource>, error::Error> as Try>::branch(move _36) -> [return: bb20, unwind: bb31];
    }

    bb20: {
        _39 = discriminant(_35);
        switchInt(move _39) -> [0: bb21, 1: bb22, otherwise: bb12];
    }

    bb21: {
        _41 = move ((_35 as Continue).0: std::vec::Vec<diem_types::account_config::CurrencyInfoResource>);
        _34 = move _41;
        _46 = &_34;
        _45 = <Vec<CurrencyInfoResource> as Deref>::deref(move _46) -> [return: bb24, unwind: bb30];
    }

    bb22: {
        _40 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _40) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        drop(_20) -> [return: bb29, unwind continue];
    }

    bb24: {
        _44 = core::slice::<impl [CurrencyInfoResource]>::iter(_45) -> [return: bb25, unwind: bb30];
    }

    bb25: {
        _43 = <std::slice::Iter<'_, CurrencyInfoResource> as Iterator>::map::<CurrencyInfoView, fn(&CurrencyInfoResource) -> CurrencyInfoView {<CurrencyInfoView as From<&CurrencyInfoResource>>::from}>(move _44, <CurrencyInfoView as From<&CurrencyInfoResource>>::from) -> [return: bb26, unwind: bb30];
    }

    bb26: {
        _42 = <std::iter::Map<std::slice::Iter<'_, CurrencyInfoResource>, fn(&CurrencyInfoResource) -> CurrencyInfoView {<CurrencyInfoView as From<&CurrencyInfoResource>>::from}> as Iterator>::collect::<Vec<CurrencyInfoView>>(move _43) -> [return: bb27, unwind: bb30];
    }

    bb27: {
        _47 = MethodResponse::GetCurrencies(move _42);
        _0 = std::result::Result::<MethodResponse, error::Error>::Ok(move _47);
        drop(_34) -> [return: bb28, unwind: bb31];
    }

    bb28: {
        drop(_20) -> [return: bb29, unwind continue];
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_34) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_20) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        resume;
    }
}

promoted[0] in get_currencies::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected [GetAccountStateWithProof] subresponses, received: "];
        _0 = &_1;
        return;
    }
}

fn get_currencies::{closure#0}::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:667:25: 667:27}) -> error::Error {
    let mut _0: error::Error;

    bb0: {
        _0 = error::Error::rpc_response::<&str>(const "DiemRoot account is missing") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn get_network_status() -> VerifyingRequest {
    let mut _0: verifying_client::methods::VerifyingRequest;
    let _1: request::MethodRequest;
    let mut _3: std::boxed::Box<[request::MethodRequest]>;
    let mut _4: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: *mut u8;
    let mut _8: std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _9: request::MethodRequest;
    let mut _11: std::boxed::Box<{closure@sdk/client/src/verifying_client/methods.rs:681:46: 681:67}>;
    let mut _12: request::MethodRequest;
    let mut _13: std::vec::Vec<request::MethodRequest>;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: &mut std::boxed::Box<[request::MethodRequest; 1]>;
    let mut _17: ();
    let mut _18: *const [request::MethodRequest; 1];
    scope 1 {
        debug request => _1;
        let _2: std::vec::Vec<request::MethodRequest>;
        let mut _19: *const ();
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: bool;
        scope 2 {
            debug subrequests => _2;
            let _10: std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>>;
            scope 4 {
                debug callback => _10;
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _15 = const false;
        _14 = const false;
        _15 = const true;
        _1 = request::MethodRequest::get_network_status() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = SizeOf([request::MethodRequest; 1]);
        _6 = AlignOf([request::MethodRequest; 1]);
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _8 = ShallowInitBox(move _7, [request::MethodRequest; 1]);
        _9 = request::MethodRequest::get_network_status() -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _18 = (((_8.0: std::ptr::Unique<[request::MethodRequest; 1]>).0: std::ptr::NonNull<[request::MethodRequest; 1]>).0: *const [request::MethodRequest; 1]);
        _19 = _18 as *const () (PtrToPtr);
        _20 = _19 as usize (Transmute);
        _21 = AlignOf([request::MethodRequest; 1]);
        _22 = Sub(_21, const 1_usize);
        _23 = BitAnd(_20, _22);
        _24 = Eq(_23, const 0_usize);
        assert(_24, "misaligned pointer dereference: address must be a multiple of {} but is {}", _21, _20) -> [success: bb13, unwind unreachable];
    }

    bb4: {
        _14 = const true;
        _11 = Box::<{closure@sdk/client/src/verifying_client/methods.rs:681:46: 681:67}>::new(const ZeroSized: {closure@sdk/client/src/verifying_client/methods.rs:681:46: 681:67}) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _10 = move _11 as std::boxed::Box<dyn for<'a, 'b> std::ops::FnOnce(verifying_client::methods::RequestContext<'a>, &'b [response::MethodResponse]) -> std::result::Result<response::MethodResponse, error::Error>> (PointerCoercion(Unsize));
        _15 = const false;
        _12 = move _1;
        _14 = const false;
        _13 = move _2;
        _0 = VerifyingRequest::new(move _12, move _13, move _10) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _14 = const false;
        _15 = const false;
        return;
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_14) -> [0: bb12, otherwise: bb8];
    }

    bb10 (cleanup): {
        _16 = &mut _8;
        _17 = <Box<[request::MethodRequest; 1]> as Drop>::drop(move _16) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_15) -> [0: bb7, otherwise: bb11];
    }

    bb13: {
        (*_18) = [move _9];
        _4 = move _8;
        _3 = move _4 as std::boxed::Box<[request::MethodRequest]> (PointerCoercion(Unsize));
        _2 = slice::<impl [request::MethodRequest]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb4, unwind: bb12];
    }

    bb14 (cleanup): {
        goto -> bb12;
    }
}

fn get_network_status::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:681:46: 681:67}, _2: RequestContext<'_>, _3: &[MethodResponse]) -> std::result::Result<MethodResponse, error::Error> {
    debug _ctxt => _2;
    debug subresponses => _3;
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let _4: u64;
    let mut _5: isize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let _9: &u64;
    let _10: &[response::MethodResponse];
    let mut _11: error::Error;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 1];
    let _17: [core::fmt::rt::Argument<'_>; 1];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &&[response::MethodResponse];
    let mut _20: response::MethodResponse;
    scope 1 {
        debug status => _4;
    }
    scope 2 {
        debug status => _9;
    }
    scope 3 {
        debug subresponses => _10;
        let _12: std::string::String;
        let mut _21: &[&str; 1];
        scope 4 {
            debug res => _12;
        }
    }

    bb0: {
        _6 = Len((*_3));
        _7 = const 1_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = discriminant((*_3)[0 of 1]);
        switchInt(move _5) -> [8: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = _3;
        _21 = const _;
        _14 = _21 as &[&str] (PointerCoercion(Unsize));
        _19 = &_10;
        _18 = core::fmt::rt::Argument::<'_>::new_debug::<&[MethodResponse]>(_19) -> [return: bb4, unwind continue];
    }

    bb3: {
        _9 = &(((*_3)[0 of 1] as GetNetworkStatus).0: u64);
        _4 = (*_9);
        _20 = MethodResponse::GetNetworkStatus(_4);
        _0 = std::result::Result::<MethodResponse, error::Error>::Ok(move _20);
        goto -> bb8;
    }

    bb4: {
        _17 = [move _18];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = format(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _11 = error::Error::rpc_response::<std::string::String>(move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = std::result::Result::<MethodResponse, error::Error>::Err(move _11);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

promoted[0] in get_network_status::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected [GetNetworkStatus] subresponses, received: "];
        _0 = &_1;
        return;
    }
}

fn verify_account_state(_1: RequestContext<'_>, _2: &AccountStateWithProofView, _3: AccountAddress, _4: std::option::Option<u64>) -> std::result::Result<std::option::Option<AccountState>, error::Error> {
    debug ctxt => _1;
    debug view => _2;
    debug address => _3;
    debug version => _4;
    let mut _0: std::result::Result<std::option::Option<diem_types::account_state::AccountState>, error::Error>;
    let _5: diem_types::account_state_blob::AccountStateWithProof;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::account_state_blob::AccountStateWithProof>;
    let mut _7: std::result::Result<diem_types::account_state_blob::AccountStateWithProof, error::Error>;
    let mut _8: std::result::Result<diem_types::account_state_blob::AccountStateWithProof, diem_crypto::error::Error>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::Error>;
    let _11: diem_types::account_state_blob::AccountStateWithProof;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>>;
    let mut _16: std::result::Result<(), error::Error>;
    let mut _17: std::result::Result<(), diem_crypto::error::Error>;
    let mut _18: &diem_types::account_state_blob::AccountStateWithProof;
    let mut _19: isize;
    let mut _21: std::option::Option<std::result::Result<diem_types::account_state::AccountState, error::Error>>;
    let mut _22: std::option::Option<diem_types::account_state_blob::AccountStateBlob>;
    let mut _23: &diem_types::state_proof::StateProof;
    let mut _24: bool;
    scope 1 {
        debug account_state_with_proof => _5;
        let _12: &diem_types::ledger_info::LedgerInfo;
        scope 6 {
            debug latest_li => _12;
            let _13: u64;
            scope 7 {
                debug ledger_version => _13;
                let _14: u64;
                scope 8 {
                    debug version => _14;
                    let _20: std::result::Result<std::convert::Infallible, error::Error>;
                    scope 9 {
                        debug residual => _20;
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => const ();
                        scope 12 {
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        _24 = const false;
        _8 = <AccountStateWithProof as TryFrom<&AccountStateWithProofView>>::try_from(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = std::result::Result::<AccountStateWithProof, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _8, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = <std::result::Result<AccountStateWithProof, error::Error> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _11 = move ((_6 as Continue).0: diem_types::account_state_blob::AccountStateWithProof);
        _24 = const true;
        _5 = move _11;
        _23 = deref_copy (_1.1: &diem_types::state_proof::StateProof);
        _12 = StateProof::latest_ledger_info(_23) -> [return: bb7, unwind: bb24];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _10 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<std::option::Option<AccountState>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _10) -> [return: bb18, unwind continue];
    }

    bb7: {
        _13 = LedgerInfo::version(_12) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _14 = std::option::Option::<u64>::unwrap_or(_4, _13) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _18 = &_5;
        _17 = AccountStateWithProof::verify(move _18, _12, _14, _3) -> [return: bb10, unwind: bb24];
    }

    bb10: {
        _16 = std::result::Result::<(), diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::invalid_proof::<diem_crypto::error::Error>}>(move _17, error::Error::invalid_proof::<diem_crypto::error::Error>) -> [return: bb11, unwind: bb24];
    }

    bb11: {
        _15 = <std::result::Result<(), error::Error> as Try>::branch(move _16) -> [return: bb12, unwind: bb24];
    }

    bb12: {
        _19 = discriminant(_15);
        switchInt(move _19) -> [0: bb13, 1: bb14, otherwise: bb5];
    }

    bb13: {
        _24 = const false;
        _22 = move (_5.1: std::option::Option<diem_types::account_state_blob::AccountStateBlob>);
        _21 = std::option::Option::<AccountStateBlob>::map::<std::result::Result<AccountState, error::Error>, {closure@sdk/client/src/verifying_client/methods.rs:714:14: 714:20}>(move _22, const ZeroSized: {closure@sdk/client/src/verifying_client/methods.rs:714:14: 714:20}) -> [return: bb16, unwind: bb24];
    }

    bb14: {
        _20 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<std::option::Option<AccountState>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _20) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        drop(_5) -> [return: bb18, unwind continue];
    }

    bb16: {
        _0 = std::option::Option::<std::result::Result<AccountState, error::Error>>::transpose(move _21) -> [return: bb17, unwind: bb24];
    }

    bb17: {
        drop((_5.2: diem_types::proof::AccountStateProof)) -> [return: bb21, unwind continue];
    }

    bb18: {
        _24 = const false;
        goto -> bb19;
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        resume;
    }

    bb21: {
        _24 = const false;
        goto -> bb19;
    }

    bb22 (cleanup): {
        drop((_5.2: diem_types::proof::AccountStateProof)) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop((_5.1: std::option::Option<diem_types::account_state_blob::AccountStateBlob>)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        switchInt(_24) -> [0: bb22, otherwise: bb23];
    }
}

fn verify_account_state::{closure#0}(_1: {closure@sdk/client/src/verifying_client/methods.rs:714:14: 714:20}, _2: AccountStateBlob) -> std::result::Result<AccountState, error::Error> {
    debug blob => _2;
    let mut _0: std::result::Result<diem_types::account_state::AccountState, error::Error>;
    let mut _3: std::result::Result<diem_types::account_state::AccountState, diem_crypto::error::Error>;
    let mut _4: &diem_types::account_state_blob::AccountStateBlob;

    bb0: {
        _4 = &_2;
        _3 = <AccountState as TryFrom<&AccountStateBlob>>::try_from(move _4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _0 = std::result::Result::<AccountState, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _3, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn faucet::<impl at sdk/client/src/faucet.rs:12:1: 12:18>::new(_1: std::string::String, _2: std::string::String) -> FaucetClient {
    debug url => _1;
    debug json_rpc_url => _2;
    let mut _0: faucet::FaucetClient;
    let mut _3: std::string::String;
    let mut _4: blocking::BlockingClient;

    bb0: {
        _3 = move _1;
        _4 = BlockingClient::new::<std::string::String>(move _2) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _0 = FaucetClient { url: move _3, json_rpc_client: move _4 };
        return;
    }

    bb2 (cleanup): {
        drop(_3) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn faucet::<impl at sdk/client/src/faucet.rs:12:1: 12:18>::fund(_1: &FaucetClient, _2: &str, _3: AuthenticationKey, _4: u64) -> std::result::Result<(), error::Error> {
    debug self => _1;
    debug currency_code => _2;
    debug auth_key => _3;
    debug amount => _4;
    let mut _0: std::result::Result<(), error::Error>;
    let _5: reqwest::blocking::Client;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 4];
    let _12: [core::fmt::rt::Argument<'_>; 4];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &std::string::String;
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &u64;
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &diem_types::transaction::authenticator::AuthenticationKey;
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &&str;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, reqwest::blocking::Response>;
    let mut _23: std::result::Result<reqwest::blocking::Response, error::Error>;
    let mut _24: std::result::Result<reqwest::blocking::Response, reqwest::Error>;
    let mut _25: reqwest::blocking::RequestBuilder;
    let mut _26: &reqwest::blocking::Client;
    let mut _27: &std::string::String;
    let mut _28: isize;
    let mut _32: &reqwest::blocking::Response;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::string::String>;
    let mut _35: std::result::Result<std::string::String, error::Error>;
    let mut _36: std::result::Result<std::string::String, reqwest::Error>;
    let mut _37: reqwest::blocking::Response;
    let mut _38: isize;
    let mut _41: bool;
    let mut _42: &reqwest::StatusCode;
    let mut _43: error::Error;
    let mut _44: u16;
    let mut _45: &reqwest::StatusCode;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<u8>>;
    let mut _48: std::result::Result<std::vec::Vec<u8>, error::Error>;
    let mut _49: std::result::Result<std::vec::Vec<u8>, hex::FromHexError>;
    let mut _50: std::string::String;
    let mut _51: isize;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<diem_types::transaction::SignedTransaction>>;
    let mut _56: std::result::Result<std::vec::Vec<diem_types::transaction::SignedTransaction>, error::Error>;
    let mut _57: std::result::Result<std::vec::Vec<diem_types::transaction::SignedTransaction>, bcs::Error>;
    let _58: &[u8];
    let _59: &std::vec::Vec<u8>;
    let mut _60: isize;
    let mut _63: std::vec::IntoIter<diem_types::transaction::SignedTransaction>;
    let mut _64: std::vec::Vec<diem_types::transaction::SignedTransaction>;
    let mut _66: std::option::Option<diem_types::transaction::SignedTransaction>;
    let mut _67: &mut std::vec::IntoIter<diem_types::transaction::SignedTransaction>;
    let mut _68: isize;
    let _70: response::Response<diem_json_rpc_types::views::TransactionView>;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, response::Response<diem_json_rpc_types::views::TransactionView>>;
    let mut _72: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::Error>;
    let mut _73: std::result::Result<response::Response<diem_json_rpc_types::views::TransactionView>, error::WaitForTransactionError>;
    let mut _74: &blocking::BlockingClient;
    let _75: &diem_types::transaction::SignedTransaction;
    let mut _76: std::option::Option<std::time::Duration>;
    let mut _77: std::option::Option<std::time::Duration>;
    let mut _78: isize;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    scope 1 {
        debug client => _5;
        let _6: std::string::String;
        let _7: std::string::String;
        let mut _81: &[&str; 5];
        scope 2 {
            debug url => _6;
            let _21: reqwest::blocking::Response;
            let _29: std::result::Result<std::convert::Infallible, error::Error>;
            let _30: reqwest::blocking::Response;
            scope 4 {
                debug response => _21;
                let _31: reqwest::StatusCode;
                scope 9 {
                    debug status_code => _31;
                    let _33: std::string::String;
                    let _39: std::result::Result<std::convert::Infallible, error::Error>;
                    let _40: std::string::String;
                    scope 10 {
                        debug body => _33;
                        let _46: std::vec::Vec<u8>;
                        let _52: std::result::Result<std::convert::Infallible, error::Error>;
                        let _53: std::vec::Vec<u8>;
                        scope 15 {
                            debug bytes => _46;
                            let _54: std::vec::Vec<diem_types::transaction::SignedTransaction>;
                            let _61: std::result::Result<std::convert::Infallible, error::Error>;
                            let _62: std::vec::Vec<diem_types::transaction::SignedTransaction>;
                            scope 20 {
                                debug txns => _54;
                                let mut _65: std::vec::IntoIter<diem_types::transaction::SignedTransaction>;
                                scope 25 {
                                    debug iter => _65;
                                    let _69: diem_types::transaction::SignedTransaction;
                                    scope 26 {
                                        debug txn => _69;
                                        let _79: std::result::Result<std::convert::Infallible, error::Error>;
                                        let _80: response::Response<diem_json_rpc_types::views::TransactionView>;
                                        scope 27 {
                                            debug residual => _79;
                                            scope 28 {
                                            }
                                        }
                                        scope 29 {
                                            debug val => _80;
                                            scope 30 {
                                            }
                                        }
                                    }
                                }
                            }
                            scope 21 {
                                debug residual => _61;
                                scope 22 {
                                }
                            }
                            scope 23 {
                                debug val => _62;
                                scope 24 {
                                }
                            }
                        }
                        scope 16 {
                            debug residual => _52;
                            scope 17 {
                            }
                        }
                        scope 18 {
                            debug val => _53;
                            scope 19 {
                            }
                        }
                    }
                    scope 11 {
                        debug residual => _39;
                        scope 12 {
                        }
                    }
                    scope 13 {
                        debug val => _40;
                        scope 14 {
                        }
                    }
                }
            }
            scope 5 {
                debug residual => _29;
                scope 6 {
                }
            }
            scope 7 {
                debug val => _30;
                scope 8 {
                }
            }
        }
        scope 3 {
            debug res => _7;
        }
    }

    bb0: {
        _84 = const false;
        _82 = const false;
        _83 = const false;
        _5 = reqwest::blocking::Client::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _81 = const _;
        _9 = _81 as &[&str] (PointerCoercion(Unsize));
        _14 = &((*_1).0: std::string::String);
        _13 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_14) -> [return: bb2, unwind: bb62];
    }

    bb2: {
        _16 = &_4;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_16) -> [return: bb3, unwind: bb62];
    }

    bb3: {
        _18 = &_3;
        _17 = core::fmt::rt::Argument::<'_>::new_display::<AuthenticationKey>(_18) -> [return: bb4, unwind: bb62];
    }

    bb4: {
        _20 = &_2;
        _19 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_20) -> [return: bb5, unwind: bb62];
    }

    bb5: {
        _12 = [move _13, move _15, move _17, move _19];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb6, unwind: bb62];
    }

    bb6: {
        _7 = format(move _8) -> [return: bb7, unwind: bb62];
    }

    bb7: {
        _6 = move _7;
        _26 = &_5;
        _27 = &_6;
        _25 = reqwest::blocking::Client::post::<&std::string::String>(move _26, move _27) -> [return: bb8, unwind: bb61];
    }

    bb8: {
        _24 = reqwest::blocking::RequestBuilder::send(move _25) -> [return: bb9, unwind: bb61];
    }

    bb9: {
        _23 = std::result::Result::<reqwest::blocking::Response, reqwest::Error>::map_err::<error::Error, fn(reqwest::Error) -> error::Error {error::Error::request::<reqwest::Error>}>(move _24, error::Error::request::<reqwest::Error>) -> [return: bb10, unwind: bb61];
    }

    bb10: {
        _22 = <std::result::Result<reqwest::blocking::Response, error::Error> as Try>::branch(move _23) -> [return: bb11, unwind: bb61];
    }

    bb11: {
        _28 = discriminant(_22);
        switchInt(move _28) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        _30 = move ((_22 as Continue).0: reqwest::blocking::Response);
        _84 = const true;
        _21 = move _30;
        _32 = &_21;
        _31 = reqwest::blocking::Response::status(move _32) -> [return: bb15, unwind: bb71];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _29 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _29) -> [return: bb72, unwind: bb61];
    }

    bb15: {
        _84 = const false;
        _37 = move _21;
        _36 = reqwest::blocking::Response::text(move _37) -> [return: bb16, unwind: bb71];
    }

    bb16: {
        _35 = std::result::Result::<std::string::String, reqwest::Error>::map_err::<error::Error, fn(reqwest::Error) -> error::Error {error::Error::decode::<reqwest::Error>}>(move _36, error::Error::decode::<reqwest::Error>) -> [return: bb17, unwind: bb71];
    }

    bb17: {
        _34 = <std::result::Result<std::string::String, error::Error> as Try>::branch(move _35) -> [return: bb18, unwind: bb71];
    }

    bb18: {
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb19, 1: bb20, otherwise: bb13];
    }

    bb19: {
        _40 = move ((_34 as Continue).0: std::string::String);
        _82 = const true;
        _33 = move _40;
        _42 = &_31;
        _41 = reqwest::StatusCode::is_success(move _42) -> [return: bb21, unwind: bb69];
    }

    bb20: {
        _39 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _39) -> [return: bb73, unwind: bb71];
    }

    bb21: {
        switchInt(move _41) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _82 = const false;
        _50 = move _33;
        _49 = decode::<std::string::String>(move _50) -> [return: bb26, unwind: bb69];
    }

    bb23: {
        _45 = &_31;
        _44 = reqwest::StatusCode::as_u16(move _45) -> [return: bb24, unwind: bb69];
    }

    bb24: {
        _43 = error::Error::status(move _44) -> [return: bb25, unwind: bb69];
    }

    bb25: {
        _0 = std::result::Result::<(), error::Error>::Err(move _43);
        goto -> bb65;
    }

    bb26: {
        _48 = std::result::Result::<Vec<u8>, FromHexError>::map_err::<error::Error, fn(FromHexError) -> error::Error {error::Error::decode::<FromHexError>}>(move _49, error::Error::decode::<FromHexError>) -> [return: bb27, unwind: bb69];
    }

    bb27: {
        _47 = <std::result::Result<Vec<u8>, error::Error> as Try>::branch(move _48) -> [return: bb28, unwind: bb69];
    }

    bb28: {
        _51 = discriminant(_47);
        switchInt(move _51) -> [0: bb29, 1: bb30, otherwise: bb13];
    }

    bb29: {
        _53 = move ((_47 as Continue).0: std::vec::Vec<u8>);
        _46 = move _53;
        _59 = &_46;
        _58 = <Vec<u8> as Deref>::deref(_59) -> [return: bb31, unwind: bb60];
    }

    bb30: {
        _52 = move ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _52) -> [return: bb74, unwind: bb69];
    }

    bb31: {
        _57 = bcs::from_bytes::<'_, Vec<SignedTransaction>>(_58) -> [return: bb32, unwind: bb60];
    }

    bb32: {
        _56 = std::result::Result::<Vec<SignedTransaction>, bcs::Error>::map_err::<error::Error, fn(bcs::Error) -> error::Error {error::Error::decode::<bcs::Error>}>(move _57, error::Error::decode::<bcs::Error>) -> [return: bb33, unwind: bb60];
    }

    bb33: {
        _55 = <std::result::Result<Vec<SignedTransaction>, error::Error> as Try>::branch(move _56) -> [return: bb34, unwind: bb60];
    }

    bb34: {
        _60 = discriminant(_55);
        switchInt(move _60) -> [0: bb35, 1: bb36, otherwise: bb13];
    }

    bb35: {
        _62 = move ((_55 as Continue).0: std::vec::Vec<diem_types::transaction::SignedTransaction>);
        _83 = const true;
        _54 = move _62;
        _83 = const false;
        _64 = move _54;
        _63 = <Vec<SignedTransaction> as IntoIterator>::into_iter(move _64) -> [return: bb37, unwind: bb67];
    }

    bb36: {
        _61 = move ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _61) -> [return: bb75, unwind: bb60];
    }

    bb37: {
        _65 = move _63;
        goto -> bb38;
    }

    bb38: {
        _67 = &mut _65;
        _66 = <std::vec::IntoIter<SignedTransaction> as Iterator>::next(_67) -> [return: bb39, unwind: bb59];
    }

    bb39: {
        _68 = discriminant(_66);
        switchInt(move _68) -> [0: bb41, 1: bb40, otherwise: bb13];
    }

    bb40: {
        _69 = move ((_66 as Some).0: diem_types::transaction::SignedTransaction);
        _74 = &((*_1).1: blocking::BlockingClient);
        _75 = &_69;
        _76 = std::option::Option::<Duration>::None;
        _77 = std::option::Option::<Duration>::None;
        _73 = BlockingClient::wait_for_signed_transaction(move _74, _75, move _76, move _77) -> [return: bb42, unwind: bb58];
    }

    bb41: {
        drop(_65) -> [return: bb49, unwind: bb67];
    }

    bb42: {
        _72 = std::result::Result::<response::Response<TransactionView>, WaitForTransactionError>::map_err::<error::Error, fn(WaitForTransactionError) -> error::Error {error::Error::unknown::<WaitForTransactionError>}>(move _73, error::Error::unknown::<WaitForTransactionError>) -> [return: bb43, unwind: bb58];
    }

    bb43: {
        _71 = <std::result::Result<response::Response<TransactionView>, error::Error> as Try>::branch(move _72) -> [return: bb44, unwind: bb58];
    }

    bb44: {
        _78 = discriminant(_71);
        switchInt(move _78) -> [0: bb45, 1: bb46, otherwise: bb13];
    }

    bb45: {
        _80 = move ((_71 as Continue).0: response::Response<diem_json_rpc_types::views::TransactionView>);
        _70 = move _80;
        drop(_70) -> [return: bb48, unwind: bb58];
    }

    bb46: {
        _79 = move ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _79) -> [return: bb47, unwind: bb58];
    }

    bb47: {
        drop(_69) -> [return: bb52, unwind: bb59];
    }

    bb48: {
        drop(_69) -> [return: bb38, unwind: bb59];
    }

    bb49: {
        _0 = std::result::Result::<(), error::Error>::Ok(const ());
        _83 = const false;
        drop(_46) -> [return: bb50, unwind: bb69];
    }

    bb50: {
        _82 = const false;
        _84 = const false;
        drop(_6) -> [return: bb51, unwind: bb62];
    }

    bb51: {
        drop(_5) -> [return: bb57, unwind continue];
    }

    bb52: {
        drop(_65) -> [return: bb53, unwind: bb67];
    }

    bb53: {
        _83 = const false;
        drop(_46) -> [return: bb65, unwind: bb69];
    }

    bb54: {
        _82 = const false;
        goto -> bb55;
    }

    bb55: {
        _84 = const false;
        drop(_6) -> [return: bb56, unwind: bb62];
    }

    bb56: {
        drop(_5) -> [return: bb57, unwind continue];
    }

    bb57: {
        return;
    }

    bb58 (cleanup): {
        drop(_69) -> [return: bb59, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_65) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_46) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_6) -> [return: bb62, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_5) -> [return: bb63, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        resume;
    }

    bb64: {
        drop(_33) -> [return: bb54, unwind: bb71];
    }

    bb65: {
        switchInt(_82) -> [0: bb54, otherwise: bb64];
    }

    bb66 (cleanup): {
        drop(_54) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_83) -> [0: bb60, otherwise: bb66];
    }

    bb68 (cleanup): {
        drop(_33) -> [return: bb71, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_82) -> [0: bb71, otherwise: bb68];
    }

    bb70 (cleanup): {
        drop(_21) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        switchInt(_84) -> [0: bb61, otherwise: bb70];
    }

    bb72: {
        goto -> bb55;
    }

    bb73: {
        goto -> bb54;
    }

    bb74: {
        goto -> bb65;
    }

    bb75: {
        goto -> bb53;
    }
}

promoted[0] in faucet::<impl at sdk/client/src/faucet.rs:12:1: 12:18>::fund: &[&str; 5] = {
    let mut _0: &[&str; 5];
    let mut _1: [&str; 5];

    bb0: {
        _1 = [const "", const "?amount=", const "&auth_key=", const "&currency_code=", const "&return_txns=true"];
        _0 = &_1;
        return;
    }
}

request::MethodRequest::GetCurrencies::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

request::MethodRequest::GetNetworkStatus::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:11:10: 11:15>::fmt(_1: &request::MethodRequest, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &(std::string::String,);
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&(std::string::String,);
    let _8: &(std::option::Option<u64>,);
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&(std::option::Option<u64>,);
    let _12: &diem_types::PeerId;
    let _13: &std::option::Option<u64>;
    let _14: &str;
    let mut _15: &dyn std::fmt::Debug;
    let mut _16: &dyn std::fmt::Debug;
    let _17: &&std::option::Option<u64>;
    let _18: &u64;
    let _19: &u64;
    let _20: &bool;
    let _21: &str;
    let mut _22: &dyn std::fmt::Debug;
    let mut _23: &dyn std::fmt::Debug;
    let mut _24: &dyn std::fmt::Debug;
    let _25: &&bool;
    let _26: &diem_types::PeerId;
    let _27: &u64;
    let _28: &bool;
    let _29: &str;
    let mut _30: &dyn std::fmt::Debug;
    let mut _31: &dyn std::fmt::Debug;
    let mut _32: &dyn std::fmt::Debug;
    let _33: &&bool;
    let _34: &diem_types::PeerId;
    let _35: &u64;
    let _36: &u64;
    let _37: &bool;
    let _38: &str;
    let mut _39: &dyn std::fmt::Debug;
    let mut _40: &dyn std::fmt::Debug;
    let mut _41: &dyn std::fmt::Debug;
    let mut _42: &dyn std::fmt::Debug;
    let _43: &&bool;
    let _44: &diem_types::event::EventKey;
    let _45: &u64;
    let _46: &u64;
    let _47: &str;
    let mut _48: &dyn std::fmt::Debug;
    let mut _49: &dyn std::fmt::Debug;
    let mut _50: &dyn std::fmt::Debug;
    let _51: &&u64;
    let _52: &[(); 0];
    let _53: &str;
    let mut _54: &dyn std::fmt::Debug;
    let _55: &&[(); 0];
    let _56: &[(); 0];
    let _57: &str;
    let mut _58: &dyn std::fmt::Debug;
    let _59: &&[(); 0];
    let _60: &(u64,);
    let _61: &str;
    let mut _62: &dyn std::fmt::Debug;
    let _63: &&(u64,);
    let _64: &std::option::Option<u64>;
    let _65: &std::option::Option<u64>;
    let _66: &str;
    let mut _67: &dyn std::fmt::Debug;
    let mut _68: &dyn std::fmt::Debug;
    let _69: &&std::option::Option<u64>;
    let _70: &diem_types::PeerId;
    let _71: &std::option::Option<u64>;
    let _72: &std::option::Option<u64>;
    let _73: &str;
    let mut _74: &dyn std::fmt::Debug;
    let mut _75: &dyn std::fmt::Debug;
    let mut _76: &dyn std::fmt::Debug;
    let _77: &&std::option::Option<u64>;
    let _78: &u64;
    let _79: &u64;
    let _80: &bool;
    let _81: &str;
    let mut _82: &dyn std::fmt::Debug;
    let mut _83: &dyn std::fmt::Debug;
    let mut _84: &dyn std::fmt::Debug;
    let _85: &&bool;
    let _86: &diem_types::PeerId;
    let _87: &u64;
    let _88: &u64;
    let _89: &bool;
    let _90: &std::option::Option<u64>;
    let _91: &str;
    let mut _92: &dyn std::fmt::Debug;
    let mut _93: &dyn std::fmt::Debug;
    let mut _94: &dyn std::fmt::Debug;
    let mut _95: &dyn std::fmt::Debug;
    let mut _96: &dyn std::fmt::Debug;
    let _97: &&std::option::Option<u64>;
    let _98: &diem_types::event::EventKey;
    let _99: &u64;
    let _100: &u64;
    let _101: &str;
    let mut _102: &dyn std::fmt::Debug;
    let mut _103: &dyn std::fmt::Debug;
    let mut _104: &dyn std::fmt::Debug;
    let _105: &&u64;
    let _106: &diem_types::event::EventKey;
    let _107: &std::option::Option<u64>;
    let _108: &str;
    let mut _109: &dyn std::fmt::Debug;
    let mut _110: &dyn std::fmt::Debug;
    let _111: &&std::option::Option<u64>;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }
    scope 3 {
        debug __self_0 => _12;
        debug __self_1 => _13;
    }
    scope 4 {
        debug __self_0 => _18;
        debug __self_1 => _19;
        debug __self_2 => _20;
    }
    scope 5 {
        debug __self_0 => _26;
        debug __self_1 => _27;
        debug __self_2 => _28;
    }
    scope 6 {
        debug __self_0 => _34;
        debug __self_1 => _35;
        debug __self_2 => _36;
        debug __self_3 => _37;
    }
    scope 7 {
        debug __self_0 => _44;
        debug __self_1 => _45;
        debug __self_2 => _46;
    }
    scope 8 {
        debug __self_0 => _52;
    }
    scope 9 {
        debug __self_0 => _56;
    }
    scope 10 {
        debug __self_0 => _60;
    }
    scope 11 {
        debug __self_0 => _64;
        debug __self_1 => _65;
    }
    scope 12 {
        debug __self_0 => _70;
        debug __self_1 => _71;
        debug __self_2 => _72;
    }
    scope 13 {
        debug __self_0 => _78;
        debug __self_1 => _79;
        debug __self_2 => _80;
    }
    scope 14 {
        debug __self_0 => _86;
        debug __self_1 => _87;
        debug __self_2 => _88;
        debug __self_3 => _89;
        debug __self_4 => _90;
    }
    scope 15 {
        debug __self_0 => _98;
        debug __self_1 => _99;
        debug __self_2 => _100;
    }
    scope 16 {
        debug __self_0 => _106;
        debug __self_1 => _107;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb1, otherwise: bb2];
    }

    bb1: {
        _106 = &(((*_1) as GetEventByVersionWithProof).0: diem_types::event::EventKey);
        _107 = &(((*_1) as GetEventByVersionWithProof).1: std::option::Option<u64>);
        _108 = const "GetEventByVersionWithProof";
        _109 = _106 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _111 = &_107;
        _110 = _111 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field2_finish(_2, _108, move _109, move _110) -> [return: bb18, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Submit).0: (std::string::String,));
        _5 = const "Submit";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb18, unwind continue];
    }

    bb4: {
        _8 = &(((*_1) as GetMetadata).0: (std::option::Option<u64>,));
        _9 = const "GetMetadata";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb18, unwind continue];
    }

    bb5: {
        _12 = &(((*_1) as GetAccount).0: diem_types::PeerId);
        _13 = &(((*_1) as GetAccount).1: std::option::Option<u64>);
        _14 = const "GetAccount";
        _15 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _17 = &_13;
        _16 = _17 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field2_finish(_2, _14, move _15, move _16) -> [return: bb18, unwind continue];
    }

    bb6: {
        _18 = &(((*_1) as GetTransactions).0: u64);
        _19 = &(((*_1) as GetTransactions).1: u64);
        _20 = &(((*_1) as GetTransactions).2: bool);
        _21 = const "GetTransactions";
        _22 = _18 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _23 = _19 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _25 = &_20;
        _24 = _25 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field3_finish(_2, _21, move _22, move _23, move _24) -> [return: bb18, unwind continue];
    }

    bb7: {
        _26 = &(((*_1) as GetAccountTransaction).0: diem_types::PeerId);
        _27 = &(((*_1) as GetAccountTransaction).1: u64);
        _28 = &(((*_1) as GetAccountTransaction).2: bool);
        _29 = const "GetAccountTransaction";
        _30 = _26 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _31 = _27 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _33 = &_28;
        _32 = _33 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field3_finish(_2, _29, move _30, move _31, move _32) -> [return: bb18, unwind continue];
    }

    bb8: {
        _34 = &(((*_1) as GetAccountTransactions).0: diem_types::PeerId);
        _35 = &(((*_1) as GetAccountTransactions).1: u64);
        _36 = &(((*_1) as GetAccountTransactions).2: u64);
        _37 = &(((*_1) as GetAccountTransactions).3: bool);
        _38 = const "GetAccountTransactions";
        _39 = _34 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _40 = _35 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _41 = _36 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _43 = &_37;
        _42 = _43 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field4_finish(_2, _38, move _39, move _40, move _41, move _42) -> [return: bb18, unwind continue];
    }

    bb9: {
        _44 = &(((*_1) as GetEvents).0: diem_types::event::EventKey);
        _45 = &(((*_1) as GetEvents).1: u64);
        _46 = &(((*_1) as GetEvents).2: u64);
        _47 = const "GetEvents";
        _48 = _44 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _49 = _45 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _51 = &_46;
        _50 = _51 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field3_finish(_2, _47, move _48, move _49, move _50) -> [return: bb18, unwind continue];
    }

    bb10: {
        _52 = &(((*_1) as GetCurrencies).0: [(); 0]);
        _53 = const "GetCurrencies";
        _55 = &_52;
        _54 = _55 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _53, move _54) -> [return: bb18, unwind continue];
    }

    bb11: {
        _56 = &(((*_1) as GetNetworkStatus).0: [(); 0]);
        _57 = const "GetNetworkStatus";
        _59 = &_56;
        _58 = _59 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _57, move _58) -> [return: bb18, unwind continue];
    }

    bb12: {
        _60 = &(((*_1) as GetStateProof).0: (u64,));
        _61 = const "GetStateProof";
        _63 = &_60;
        _62 = _63 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _61, move _62) -> [return: bb18, unwind continue];
    }

    bb13: {
        _64 = &(((*_1) as GetAccumulatorConsistencyProof).0: std::option::Option<u64>);
        _65 = &(((*_1) as GetAccumulatorConsistencyProof).1: std::option::Option<u64>);
        _66 = const "GetAccumulatorConsistencyProof";
        _67 = _64 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _69 = &_65;
        _68 = _69 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field2_finish(_2, _66, move _67, move _68) -> [return: bb18, unwind continue];
    }

    bb14: {
        _70 = &(((*_1) as GetAccountStateWithProof).0: diem_types::PeerId);
        _71 = &(((*_1) as GetAccountStateWithProof).1: std::option::Option<u64>);
        _72 = &(((*_1) as GetAccountStateWithProof).2: std::option::Option<u64>);
        _73 = const "GetAccountStateWithProof";
        _74 = _70 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _75 = _71 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _77 = &_72;
        _76 = _77 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field3_finish(_2, _73, move _74, move _75, move _76) -> [return: bb18, unwind continue];
    }

    bb15: {
        _78 = &(((*_1) as GetTransactionsWithProofs).0: u64);
        _79 = &(((*_1) as GetTransactionsWithProofs).1: u64);
        _80 = &(((*_1) as GetTransactionsWithProofs).2: bool);
        _81 = const "GetTransactionsWithProofs";
        _82 = _78 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _83 = _79 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _85 = &_80;
        _84 = _85 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field3_finish(_2, _81, move _82, move _83, move _84) -> [return: bb18, unwind continue];
    }

    bb16: {
        _86 = &(((*_1) as GetAccountTransactionsWithProofs).0: diem_types::PeerId);
        _87 = &(((*_1) as GetAccountTransactionsWithProofs).1: u64);
        _88 = &(((*_1) as GetAccountTransactionsWithProofs).2: u64);
        _89 = &(((*_1) as GetAccountTransactionsWithProofs).3: bool);
        _90 = &(((*_1) as GetAccountTransactionsWithProofs).4: std::option::Option<u64>);
        _91 = const "GetAccountTransactionsWithProofs";
        _92 = _86 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _93 = _87 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _94 = _88 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _95 = _89 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _97 = &_90;
        _96 = _97 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field5_finish(_2, _91, move _92, move _93, move _94, move _95, move _96) -> [return: bb18, unwind continue];
    }

    bb17: {
        _98 = &(((*_1) as GetEventsWithProofs).0: diem_types::event::EventKey);
        _99 = &(((*_1) as GetEventsWithProofs).1: u64);
        _100 = &(((*_1) as GetEventsWithProofs).2: u64);
        _101 = const "GetEventsWithProofs";
        _102 = _98 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _103 = _99 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _105 = &_100;
        _104 = _105 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field3_finish(_2, _101, move _102, move _103, move _104) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }
}

const request::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize(_1: __D) -> std::result::Result<request::MethodRequest, <__D as _::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<request::MethodRequest, <__D as _::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_struct::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'_>>(move _1, const "MethodRequest", const _, const request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__FieldVisitor, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_u64(_1: request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__FieldVisitor, _2: u64) -> std::result::Result<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _4: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _5: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _6: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _7: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _8: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _9: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _10: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _11: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _12: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _13: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _14: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _15: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _16: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _17: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _18: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _19: __E;
    let mut _20: _::_serde::de::Unexpected<'_>;
    let mut _21: &dyn _::_serde::de::Expected;
    let mut _22: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, 9: bb11, 10: bb12, 11: bb13, 12: bb14, 13: bb15, 14: bb16, 15: bb17, otherwise: bb1];
    }

    bb1: {
        _20 = Unexpected::<'_>::Unsigned(_2);
        _22 = const _;
        _21 = _22 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <__E as _::_serde::de::Error>::invalid_value(move _20, move _21) -> [return: bb18, unwind continue];
    }

    bb2: {
        _3 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field0;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb19;
    }

    bb3: {
        _4 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field1;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb19;
    }

    bb4: {
        _5 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field2;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb19;
    }

    bb5: {
        _6 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field3;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb19;
    }

    bb6: {
        _7 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field4;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb19;
    }

    bb7: {
        _8 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field5;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb19;
    }

    bb8: {
        _9 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field6;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb19;
    }

    bb9: {
        _10 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field7;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb19;
    }

    bb10: {
        _11 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field8;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb19;
    }

    bb11: {
        _12 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field9;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb19;
    }

    bb12: {
        _13 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field10;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb19;
    }

    bb13: {
        _14 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field11;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb19;
    }

    bb14: {
        _15 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field12;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb19;
    }

    bb15: {
        _16 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field13;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb19;
    }

    bb16: {
        _17 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field14;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb19;
    }

    bb17: {
        _18 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field15;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb19;
    }

    bb18: {
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Err(move _19);
        goto -> bb19;
    }

    bb19: {
        return;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 16";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_str(_1: request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__FieldVisitor, _2: &str) -> std::result::Result<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _20: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _21: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _22: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _23: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _24: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _25: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _26: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _27: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _28: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _29: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _30: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _31: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _32: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _33: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _34: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _35: __E;

    bb0: {
        _18 = <str as PartialEq>::eq(_2, const "submit") -> [return: bb48, unwind continue];
    }

    bb1: {
        _19 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field0;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb50;
    }

    bb2: {
        _17 = <str as PartialEq>::eq(_2, const "get_metadata") -> [return: bb47, unwind continue];
    }

    bb3: {
        _20 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field1;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb50;
    }

    bb4: {
        _16 = <str as PartialEq>::eq(_2, const "get_account") -> [return: bb46, unwind continue];
    }

    bb5: {
        _21 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field2;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb50;
    }

    bb6: {
        _15 = <str as PartialEq>::eq(_2, const "get_transactions") -> [return: bb45, unwind continue];
    }

    bb7: {
        _22 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field3;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb50;
    }

    bb8: {
        _14 = <str as PartialEq>::eq(_2, const "get_account_transaction") -> [return: bb44, unwind continue];
    }

    bb9: {
        _23 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field4;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb50;
    }

    bb10: {
        _13 = <str as PartialEq>::eq(_2, const "get_account_transactions") -> [return: bb43, unwind continue];
    }

    bb11: {
        _24 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field5;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb50;
    }

    bb12: {
        _12 = <str as PartialEq>::eq(_2, const "get_events") -> [return: bb42, unwind continue];
    }

    bb13: {
        _25 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field6;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb50;
    }

    bb14: {
        _11 = <str as PartialEq>::eq(_2, const "get_currencies") -> [return: bb41, unwind continue];
    }

    bb15: {
        _26 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field7;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb50;
    }

    bb16: {
        _10 = <str as PartialEq>::eq(_2, const "get_network_status") -> [return: bb40, unwind continue];
    }

    bb17: {
        _27 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field8;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb50;
    }

    bb18: {
        _9 = <str as PartialEq>::eq(_2, const "get_state_proof") -> [return: bb39, unwind continue];
    }

    bb19: {
        _28 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field9;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb50;
    }

    bb20: {
        _8 = <str as PartialEq>::eq(_2, const "get_accumulator_consistency_proof") -> [return: bb38, unwind continue];
    }

    bb21: {
        _29 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field10;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb50;
    }

    bb22: {
        _7 = <str as PartialEq>::eq(_2, const "get_account_state_with_proof") -> [return: bb37, unwind continue];
    }

    bb23: {
        _30 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field11;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb50;
    }

    bb24: {
        _6 = <str as PartialEq>::eq(_2, const "get_transactions_with_proofs") -> [return: bb36, unwind continue];
    }

    bb25: {
        _31 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field12;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _31);
        goto -> bb50;
    }

    bb26: {
        _5 = <str as PartialEq>::eq(_2, const "get_account_transactions_with_proofs") -> [return: bb35, unwind continue];
    }

    bb27: {
        _32 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field13;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _32);
        goto -> bb50;
    }

    bb28: {
        _4 = <str as PartialEq>::eq(_2, const "get_events_with_proofs") -> [return: bb34, unwind continue];
    }

    bb29: {
        _33 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field14;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _33);
        goto -> bb50;
    }

    bb30: {
        _3 = <str as PartialEq>::eq(_2, const "get_event_by_version_with_proof") -> [return: bb33, unwind continue];
    }

    bb31: {
        _34 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field15;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _34);
        goto -> bb50;
    }

    bb32: {
        _35 = <__E as _::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb49, unwind continue];
    }

    bb33: {
        switchInt(move _3) -> [0: bb32, otherwise: bb31];
    }

    bb34: {
        switchInt(move _4) -> [0: bb30, otherwise: bb29];
    }

    bb35: {
        switchInt(move _5) -> [0: bb28, otherwise: bb27];
    }

    bb36: {
        switchInt(move _6) -> [0: bb26, otherwise: bb25];
    }

    bb37: {
        switchInt(move _7) -> [0: bb24, otherwise: bb23];
    }

    bb38: {
        switchInt(move _8) -> [0: bb22, otherwise: bb21];
    }

    bb39: {
        switchInt(move _9) -> [0: bb20, otherwise: bb19];
    }

    bb40: {
        switchInt(move _10) -> [0: bb18, otherwise: bb17];
    }

    bb41: {
        switchInt(move _11) -> [0: bb16, otherwise: bb15];
    }

    bb42: {
        switchInt(move _12) -> [0: bb14, otherwise: bb13];
    }

    bb43: {
        switchInt(move _13) -> [0: bb12, otherwise: bb11];
    }

    bb44: {
        switchInt(move _14) -> [0: bb10, otherwise: bb9];
    }

    bb45: {
        switchInt(move _15) -> [0: bb8, otherwise: bb7];
    }

    bb46: {
        switchInt(move _16) -> [0: bb6, otherwise: bb5];
    }

    bb47: {
        switchInt(move _17) -> [0: bb4, otherwise: bb3];
    }

    bb48: {
        switchInt(move _18) -> [0: bb2, otherwise: bb1];
    }

    bb49: {
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Err(move _35);
        goto -> bb50;
    }

    bb50: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_bytes(_1: request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__FieldVisitor, _2: &[u8]) -> std::result::Result<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let mut _30: usize;
    let mut _31: usize;
    let mut _32: bool;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: bool;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: bool;
    let mut _48: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _49: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _50: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _51: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _52: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _53: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _54: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _55: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _56: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _57: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _58: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _59: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _60: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _61: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _62: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _63: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let _64: &std::borrow::Cow<'_, str>;
    let _65: std::borrow::Cow<'_, str>;
    let mut _66: __E;
    let _67: &str;
    scope 1 {
        debug __value => _64;
    }

    bb0: {
        _45 = Len((*_2));
        _46 = const 6_usize;
        _47 = Eq(move _45, move _46);
        switchInt(move _47) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 6]) -> [115: bb2, otherwise: bb7];
    }

    bb2: {
        switchInt((*_2)[1 of 6]) -> [117: bb3, otherwise: bb7];
    }

    bb3: {
        switchInt((*_2)[2 of 6]) -> [98: bb4, otherwise: bb7];
    }

    bb4: {
        switchInt((*_2)[3 of 6]) -> [109: bb5, otherwise: bb7];
    }

    bb5: {
        switchInt((*_2)[4 of 6]) -> [105: bb6, otherwise: bb7];
    }

    bb6: {
        switchInt((*_2)[5 of 6]) -> [116: bb338, otherwise: bb7];
    }

    bb7: {
        _65 = from_utf8_lossy(_2) -> [return: bb354, unwind continue];
    }

    bb8: {
        _42 = Len((*_2));
        _43 = const 12_usize;
        _44 = Eq(move _42, move _43);
        switchInt(move _44) -> [0: bb21, otherwise: bb9];
    }

    bb9: {
        switchInt((*_2)[0 of 12]) -> [103: bb10, otherwise: bb7];
    }

    bb10: {
        switchInt((*_2)[1 of 12]) -> [101: bb11, otherwise: bb7];
    }

    bb11: {
        switchInt((*_2)[2 of 12]) -> [116: bb12, otherwise: bb7];
    }

    bb12: {
        switchInt((*_2)[3 of 12]) -> [95: bb13, otherwise: bb7];
    }

    bb13: {
        switchInt((*_2)[4 of 12]) -> [109: bb14, otherwise: bb7];
    }

    bb14: {
        switchInt((*_2)[5 of 12]) -> [101: bb15, otherwise: bb7];
    }

    bb15: {
        switchInt((*_2)[6 of 12]) -> [116: bb16, otherwise: bb7];
    }

    bb16: {
        switchInt((*_2)[7 of 12]) -> [97: bb17, otherwise: bb7];
    }

    bb17: {
        switchInt((*_2)[8 of 12]) -> [100: bb18, otherwise: bb7];
    }

    bb18: {
        switchInt((*_2)[9 of 12]) -> [97: bb19, otherwise: bb7];
    }

    bb19: {
        switchInt((*_2)[10 of 12]) -> [116: bb20, otherwise: bb7];
    }

    bb20: {
        switchInt((*_2)[11 of 12]) -> [97: bb339, otherwise: bb7];
    }

    bb21: {
        _39 = Len((*_2));
        _40 = const 11_usize;
        _41 = Eq(move _39, move _40);
        switchInt(move _41) -> [0: bb33, otherwise: bb22];
    }

    bb22: {
        switchInt((*_2)[0 of 11]) -> [103: bb23, otherwise: bb7];
    }

    bb23: {
        switchInt((*_2)[1 of 11]) -> [101: bb24, otherwise: bb7];
    }

    bb24: {
        switchInt((*_2)[2 of 11]) -> [116: bb25, otherwise: bb7];
    }

    bb25: {
        switchInt((*_2)[3 of 11]) -> [95: bb26, otherwise: bb7];
    }

    bb26: {
        switchInt((*_2)[4 of 11]) -> [97: bb27, otherwise: bb7];
    }

    bb27: {
        switchInt((*_2)[5 of 11]) -> [99: bb28, otherwise: bb7];
    }

    bb28: {
        switchInt((*_2)[6 of 11]) -> [99: bb29, otherwise: bb7];
    }

    bb29: {
        switchInt((*_2)[7 of 11]) -> [111: bb30, otherwise: bb7];
    }

    bb30: {
        switchInt((*_2)[8 of 11]) -> [117: bb31, otherwise: bb7];
    }

    bb31: {
        switchInt((*_2)[9 of 11]) -> [110: bb32, otherwise: bb7];
    }

    bb32: {
        switchInt((*_2)[10 of 11]) -> [116: bb340, otherwise: bb7];
    }

    bb33: {
        _36 = Len((*_2));
        _37 = const 16_usize;
        _38 = Eq(move _36, move _37);
        switchInt(move _38) -> [0: bb50, otherwise: bb34];
    }

    bb34: {
        switchInt((*_2)[0 of 16]) -> [103: bb35, otherwise: bb7];
    }

    bb35: {
        switchInt((*_2)[1 of 16]) -> [101: bb36, otherwise: bb7];
    }

    bb36: {
        switchInt((*_2)[2 of 16]) -> [116: bb37, otherwise: bb7];
    }

    bb37: {
        switchInt((*_2)[3 of 16]) -> [95: bb38, otherwise: bb7];
    }

    bb38: {
        switchInt((*_2)[4 of 16]) -> [116: bb39, otherwise: bb7];
    }

    bb39: {
        switchInt((*_2)[5 of 16]) -> [114: bb40, otherwise: bb7];
    }

    bb40: {
        switchInt((*_2)[6 of 16]) -> [97: bb41, otherwise: bb7];
    }

    bb41: {
        switchInt((*_2)[7 of 16]) -> [110: bb42, otherwise: bb7];
    }

    bb42: {
        switchInt((*_2)[8 of 16]) -> [115: bb43, otherwise: bb7];
    }

    bb43: {
        switchInt((*_2)[9 of 16]) -> [97: bb44, otherwise: bb7];
    }

    bb44: {
        switchInt((*_2)[10 of 16]) -> [99: bb45, otherwise: bb7];
    }

    bb45: {
        switchInt((*_2)[11 of 16]) -> [116: bb46, otherwise: bb7];
    }

    bb46: {
        switchInt((*_2)[12 of 16]) -> [105: bb47, otherwise: bb7];
    }

    bb47: {
        switchInt((*_2)[13 of 16]) -> [111: bb48, otherwise: bb7];
    }

    bb48: {
        switchInt((*_2)[14 of 16]) -> [110: bb49, otherwise: bb7];
    }

    bb49: {
        switchInt((*_2)[15 of 16]) -> [115: bb341, otherwise: bb7];
    }

    bb50: {
        _33 = Len((*_2));
        _34 = const 23_usize;
        _35 = Eq(move _33, move _34);
        switchInt(move _35) -> [0: bb74, otherwise: bb51];
    }

    bb51: {
        switchInt((*_2)[0 of 23]) -> [103: bb52, otherwise: bb7];
    }

    bb52: {
        switchInt((*_2)[1 of 23]) -> [101: bb53, otherwise: bb7];
    }

    bb53: {
        switchInt((*_2)[2 of 23]) -> [116: bb54, otherwise: bb7];
    }

    bb54: {
        switchInt((*_2)[3 of 23]) -> [95: bb55, otherwise: bb7];
    }

    bb55: {
        switchInt((*_2)[4 of 23]) -> [97: bb56, otherwise: bb7];
    }

    bb56: {
        switchInt((*_2)[5 of 23]) -> [99: bb57, otherwise: bb7];
    }

    bb57: {
        switchInt((*_2)[6 of 23]) -> [99: bb58, otherwise: bb7];
    }

    bb58: {
        switchInt((*_2)[7 of 23]) -> [111: bb59, otherwise: bb7];
    }

    bb59: {
        switchInt((*_2)[8 of 23]) -> [117: bb60, otherwise: bb7];
    }

    bb60: {
        switchInt((*_2)[9 of 23]) -> [110: bb61, otherwise: bb7];
    }

    bb61: {
        switchInt((*_2)[10 of 23]) -> [116: bb62, otherwise: bb7];
    }

    bb62: {
        switchInt((*_2)[11 of 23]) -> [95: bb63, otherwise: bb7];
    }

    bb63: {
        switchInt((*_2)[12 of 23]) -> [116: bb64, otherwise: bb7];
    }

    bb64: {
        switchInt((*_2)[13 of 23]) -> [114: bb65, otherwise: bb7];
    }

    bb65: {
        switchInt((*_2)[14 of 23]) -> [97: bb66, otherwise: bb7];
    }

    bb66: {
        switchInt((*_2)[15 of 23]) -> [110: bb67, otherwise: bb7];
    }

    bb67: {
        switchInt((*_2)[16 of 23]) -> [115: bb68, otherwise: bb7];
    }

    bb68: {
        switchInt((*_2)[17 of 23]) -> [97: bb69, otherwise: bb7];
    }

    bb69: {
        switchInt((*_2)[18 of 23]) -> [99: bb70, otherwise: bb7];
    }

    bb70: {
        switchInt((*_2)[19 of 23]) -> [116: bb71, otherwise: bb7];
    }

    bb71: {
        switchInt((*_2)[20 of 23]) -> [105: bb72, otherwise: bb7];
    }

    bb72: {
        switchInt((*_2)[21 of 23]) -> [111: bb73, otherwise: bb7];
    }

    bb73: {
        switchInt((*_2)[22 of 23]) -> [110: bb342, otherwise: bb7];
    }

    bb74: {
        _30 = Len((*_2));
        _31 = const 24_usize;
        _32 = Eq(move _30, move _31);
        switchInt(move _32) -> [0: bb99, otherwise: bb75];
    }

    bb75: {
        switchInt((*_2)[0 of 24]) -> [103: bb76, otherwise: bb7];
    }

    bb76: {
        switchInt((*_2)[1 of 24]) -> [101: bb77, otherwise: bb7];
    }

    bb77: {
        switchInt((*_2)[2 of 24]) -> [116: bb78, otherwise: bb7];
    }

    bb78: {
        switchInt((*_2)[3 of 24]) -> [95: bb79, otherwise: bb7];
    }

    bb79: {
        switchInt((*_2)[4 of 24]) -> [97: bb80, otherwise: bb7];
    }

    bb80: {
        switchInt((*_2)[5 of 24]) -> [99: bb81, otherwise: bb7];
    }

    bb81: {
        switchInt((*_2)[6 of 24]) -> [99: bb82, otherwise: bb7];
    }

    bb82: {
        switchInt((*_2)[7 of 24]) -> [111: bb83, otherwise: bb7];
    }

    bb83: {
        switchInt((*_2)[8 of 24]) -> [117: bb84, otherwise: bb7];
    }

    bb84: {
        switchInt((*_2)[9 of 24]) -> [110: bb85, otherwise: bb7];
    }

    bb85: {
        switchInt((*_2)[10 of 24]) -> [116: bb86, otherwise: bb7];
    }

    bb86: {
        switchInt((*_2)[11 of 24]) -> [95: bb87, otherwise: bb7];
    }

    bb87: {
        switchInt((*_2)[12 of 24]) -> [116: bb88, otherwise: bb7];
    }

    bb88: {
        switchInt((*_2)[13 of 24]) -> [114: bb89, otherwise: bb7];
    }

    bb89: {
        switchInt((*_2)[14 of 24]) -> [97: bb90, otherwise: bb7];
    }

    bb90: {
        switchInt((*_2)[15 of 24]) -> [110: bb91, otherwise: bb7];
    }

    bb91: {
        switchInt((*_2)[16 of 24]) -> [115: bb92, otherwise: bb7];
    }

    bb92: {
        switchInt((*_2)[17 of 24]) -> [97: bb93, otherwise: bb7];
    }

    bb93: {
        switchInt((*_2)[18 of 24]) -> [99: bb94, otherwise: bb7];
    }

    bb94: {
        switchInt((*_2)[19 of 24]) -> [116: bb95, otherwise: bb7];
    }

    bb95: {
        switchInt((*_2)[20 of 24]) -> [105: bb96, otherwise: bb7];
    }

    bb96: {
        switchInt((*_2)[21 of 24]) -> [111: bb97, otherwise: bb7];
    }

    bb97: {
        switchInt((*_2)[22 of 24]) -> [110: bb98, otherwise: bb7];
    }

    bb98: {
        switchInt((*_2)[23 of 24]) -> [115: bb343, otherwise: bb7];
    }

    bb99: {
        _27 = Len((*_2));
        _28 = const 10_usize;
        _29 = Eq(move _27, move _28);
        switchInt(move _29) -> [0: bb110, otherwise: bb100];
    }

    bb100: {
        switchInt((*_2)[0 of 10]) -> [103: bb101, otherwise: bb7];
    }

    bb101: {
        switchInt((*_2)[1 of 10]) -> [101: bb102, otherwise: bb7];
    }

    bb102: {
        switchInt((*_2)[2 of 10]) -> [116: bb103, otherwise: bb7];
    }

    bb103: {
        switchInt((*_2)[3 of 10]) -> [95: bb104, otherwise: bb7];
    }

    bb104: {
        switchInt((*_2)[4 of 10]) -> [101: bb105, otherwise: bb7];
    }

    bb105: {
        switchInt((*_2)[5 of 10]) -> [118: bb106, otherwise: bb7];
    }

    bb106: {
        switchInt((*_2)[6 of 10]) -> [101: bb107, otherwise: bb7];
    }

    bb107: {
        switchInt((*_2)[7 of 10]) -> [110: bb108, otherwise: bb7];
    }

    bb108: {
        switchInt((*_2)[8 of 10]) -> [116: bb109, otherwise: bb7];
    }

    bb109: {
        switchInt((*_2)[9 of 10]) -> [115: bb344, otherwise: bb7];
    }

    bb110: {
        _24 = Len((*_2));
        _25 = const 14_usize;
        _26 = Eq(move _24, move _25);
        switchInt(move _26) -> [0: bb125, otherwise: bb111];
    }

    bb111: {
        switchInt((*_2)[0 of 14]) -> [103: bb112, otherwise: bb7];
    }

    bb112: {
        switchInt((*_2)[1 of 14]) -> [101: bb113, otherwise: bb7];
    }

    bb113: {
        switchInt((*_2)[2 of 14]) -> [116: bb114, otherwise: bb7];
    }

    bb114: {
        switchInt((*_2)[3 of 14]) -> [95: bb115, otherwise: bb7];
    }

    bb115: {
        switchInt((*_2)[4 of 14]) -> [99: bb116, otherwise: bb7];
    }

    bb116: {
        switchInt((*_2)[5 of 14]) -> [117: bb117, otherwise: bb7];
    }

    bb117: {
        switchInt((*_2)[6 of 14]) -> [114: bb118, otherwise: bb7];
    }

    bb118: {
        switchInt((*_2)[7 of 14]) -> [114: bb119, otherwise: bb7];
    }

    bb119: {
        switchInt((*_2)[8 of 14]) -> [101: bb120, otherwise: bb7];
    }

    bb120: {
        switchInt((*_2)[9 of 14]) -> [110: bb121, otherwise: bb7];
    }

    bb121: {
        switchInt((*_2)[10 of 14]) -> [99: bb122, otherwise: bb7];
    }

    bb122: {
        switchInt((*_2)[11 of 14]) -> [105: bb123, otherwise: bb7];
    }

    bb123: {
        switchInt((*_2)[12 of 14]) -> [101: bb124, otherwise: bb7];
    }

    bb124: {
        switchInt((*_2)[13 of 14]) -> [115: bb345, otherwise: bb7];
    }

    bb125: {
        _21 = Len((*_2));
        _22 = const 18_usize;
        _23 = Eq(move _21, move _22);
        switchInt(move _23) -> [0: bb144, otherwise: bb126];
    }

    bb126: {
        switchInt((*_2)[0 of 18]) -> [103: bb127, otherwise: bb7];
    }

    bb127: {
        switchInt((*_2)[1 of 18]) -> [101: bb128, otherwise: bb7];
    }

    bb128: {
        switchInt((*_2)[2 of 18]) -> [116: bb129, otherwise: bb7];
    }

    bb129: {
        switchInt((*_2)[3 of 18]) -> [95: bb130, otherwise: bb7];
    }

    bb130: {
        switchInt((*_2)[4 of 18]) -> [110: bb131, otherwise: bb7];
    }

    bb131: {
        switchInt((*_2)[5 of 18]) -> [101: bb132, otherwise: bb7];
    }

    bb132: {
        switchInt((*_2)[6 of 18]) -> [116: bb133, otherwise: bb7];
    }

    bb133: {
        switchInt((*_2)[7 of 18]) -> [119: bb134, otherwise: bb7];
    }

    bb134: {
        switchInt((*_2)[8 of 18]) -> [111: bb135, otherwise: bb7];
    }

    bb135: {
        switchInt((*_2)[9 of 18]) -> [114: bb136, otherwise: bb7];
    }

    bb136: {
        switchInt((*_2)[10 of 18]) -> [107: bb137, otherwise: bb7];
    }

    bb137: {
        switchInt((*_2)[11 of 18]) -> [95: bb138, otherwise: bb7];
    }

    bb138: {
        switchInt((*_2)[12 of 18]) -> [115: bb139, otherwise: bb7];
    }

    bb139: {
        switchInt((*_2)[13 of 18]) -> [116: bb140, otherwise: bb7];
    }

    bb140: {
        switchInt((*_2)[14 of 18]) -> [97: bb141, otherwise: bb7];
    }

    bb141: {
        switchInt((*_2)[15 of 18]) -> [116: bb142, otherwise: bb7];
    }

    bb142: {
        switchInt((*_2)[16 of 18]) -> [117: bb143, otherwise: bb7];
    }

    bb143: {
        switchInt((*_2)[17 of 18]) -> [115: bb346, otherwise: bb7];
    }

    bb144: {
        _18 = Len((*_2));
        _19 = const 15_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb160, otherwise: bb145];
    }

    bb145: {
        switchInt((*_2)[0 of 15]) -> [103: bb146, otherwise: bb7];
    }

    bb146: {
        switchInt((*_2)[1 of 15]) -> [101: bb147, otherwise: bb7];
    }

    bb147: {
        switchInt((*_2)[2 of 15]) -> [116: bb148, otherwise: bb7];
    }

    bb148: {
        switchInt((*_2)[3 of 15]) -> [95: bb149, otherwise: bb7];
    }

    bb149: {
        switchInt((*_2)[4 of 15]) -> [115: bb150, otherwise: bb7];
    }

    bb150: {
        switchInt((*_2)[5 of 15]) -> [116: bb151, otherwise: bb7];
    }

    bb151: {
        switchInt((*_2)[6 of 15]) -> [97: bb152, otherwise: bb7];
    }

    bb152: {
        switchInt((*_2)[7 of 15]) -> [116: bb153, otherwise: bb7];
    }

    bb153: {
        switchInt((*_2)[8 of 15]) -> [101: bb154, otherwise: bb7];
    }

    bb154: {
        switchInt((*_2)[9 of 15]) -> [95: bb155, otherwise: bb7];
    }

    bb155: {
        switchInt((*_2)[10 of 15]) -> [112: bb156, otherwise: bb7];
    }

    bb156: {
        switchInt((*_2)[11 of 15]) -> [114: bb157, otherwise: bb7];
    }

    bb157: {
        switchInt((*_2)[12 of 15]) -> [111: bb158, otherwise: bb7];
    }

    bb158: {
        switchInt((*_2)[13 of 15]) -> [111: bb159, otherwise: bb7];
    }

    bb159: {
        switchInt((*_2)[14 of 15]) -> [102: bb347, otherwise: bb7];
    }

    bb160: {
        _15 = Len((*_2));
        _16 = const 33_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb194, otherwise: bb161];
    }

    bb161: {
        switchInt((*_2)[0 of 33]) -> [103: bb162, otherwise: bb7];
    }

    bb162: {
        switchInt((*_2)[1 of 33]) -> [101: bb163, otherwise: bb7];
    }

    bb163: {
        switchInt((*_2)[2 of 33]) -> [116: bb164, otherwise: bb7];
    }

    bb164: {
        switchInt((*_2)[3 of 33]) -> [95: bb165, otherwise: bb7];
    }

    bb165: {
        switchInt((*_2)[4 of 33]) -> [97: bb166, otherwise: bb7];
    }

    bb166: {
        switchInt((*_2)[5 of 33]) -> [99: bb167, otherwise: bb7];
    }

    bb167: {
        switchInt((*_2)[6 of 33]) -> [99: bb168, otherwise: bb7];
    }

    bb168: {
        switchInt((*_2)[7 of 33]) -> [117: bb169, otherwise: bb7];
    }

    bb169: {
        switchInt((*_2)[8 of 33]) -> [109: bb170, otherwise: bb7];
    }

    bb170: {
        switchInt((*_2)[9 of 33]) -> [117: bb171, otherwise: bb7];
    }

    bb171: {
        switchInt((*_2)[10 of 33]) -> [108: bb172, otherwise: bb7];
    }

    bb172: {
        switchInt((*_2)[11 of 33]) -> [97: bb173, otherwise: bb7];
    }

    bb173: {
        switchInt((*_2)[12 of 33]) -> [116: bb174, otherwise: bb7];
    }

    bb174: {
        switchInt((*_2)[13 of 33]) -> [111: bb175, otherwise: bb7];
    }

    bb175: {
        switchInt((*_2)[14 of 33]) -> [114: bb176, otherwise: bb7];
    }

    bb176: {
        switchInt((*_2)[15 of 33]) -> [95: bb177, otherwise: bb7];
    }

    bb177: {
        switchInt((*_2)[16 of 33]) -> [99: bb178, otherwise: bb7];
    }

    bb178: {
        switchInt((*_2)[17 of 33]) -> [111: bb179, otherwise: bb7];
    }

    bb179: {
        switchInt((*_2)[18 of 33]) -> [110: bb180, otherwise: bb7];
    }

    bb180: {
        switchInt((*_2)[19 of 33]) -> [115: bb181, otherwise: bb7];
    }

    bb181: {
        switchInt((*_2)[20 of 33]) -> [105: bb182, otherwise: bb7];
    }

    bb182: {
        switchInt((*_2)[21 of 33]) -> [115: bb183, otherwise: bb7];
    }

    bb183: {
        switchInt((*_2)[22 of 33]) -> [116: bb184, otherwise: bb7];
    }

    bb184: {
        switchInt((*_2)[23 of 33]) -> [101: bb185, otherwise: bb7];
    }

    bb185: {
        switchInt((*_2)[24 of 33]) -> [110: bb186, otherwise: bb7];
    }

    bb186: {
        switchInt((*_2)[25 of 33]) -> [99: bb187, otherwise: bb7];
    }

    bb187: {
        switchInt((*_2)[26 of 33]) -> [121: bb188, otherwise: bb7];
    }

    bb188: {
        switchInt((*_2)[27 of 33]) -> [95: bb189, otherwise: bb7];
    }

    bb189: {
        switchInt((*_2)[28 of 33]) -> [112: bb190, otherwise: bb7];
    }

    bb190: {
        switchInt((*_2)[29 of 33]) -> [114: bb191, otherwise: bb7];
    }

    bb191: {
        switchInt((*_2)[30 of 33]) -> [111: bb192, otherwise: bb7];
    }

    bb192: {
        switchInt((*_2)[31 of 33]) -> [111: bb193, otherwise: bb7];
    }

    bb193: {
        switchInt((*_2)[32 of 33]) -> [102: bb348, otherwise: bb7];
    }

    bb194: {
        _12 = Len((*_2));
        _13 = const 28_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb246, otherwise: bb195];
    }

    bb195: {
        switchInt((*_2)[0 of 28]) -> [103: bb196, otherwise: bb7];
    }

    bb196: {
        switchInt((*_2)[1 of 28]) -> [101: bb197, otherwise: bb7];
    }

    bb197: {
        switchInt((*_2)[2 of 28]) -> [116: bb198, otherwise: bb7];
    }

    bb198: {
        switchInt((*_2)[3 of 28]) -> [95: bb199, otherwise: bb7];
    }

    bb199: {
        switchInt((*_2)[4 of 28]) -> [97: bb200, 116: bb223, otherwise: bb7];
    }

    bb200: {
        switchInt((*_2)[5 of 28]) -> [99: bb201, otherwise: bb7];
    }

    bb201: {
        switchInt((*_2)[6 of 28]) -> [99: bb202, otherwise: bb7];
    }

    bb202: {
        switchInt((*_2)[7 of 28]) -> [111: bb203, otherwise: bb7];
    }

    bb203: {
        switchInt((*_2)[8 of 28]) -> [117: bb204, otherwise: bb7];
    }

    bb204: {
        switchInt((*_2)[9 of 28]) -> [110: bb205, otherwise: bb7];
    }

    bb205: {
        switchInt((*_2)[10 of 28]) -> [116: bb206, otherwise: bb7];
    }

    bb206: {
        switchInt((*_2)[11 of 28]) -> [95: bb207, otherwise: bb7];
    }

    bb207: {
        switchInt((*_2)[12 of 28]) -> [115: bb208, otherwise: bb7];
    }

    bb208: {
        switchInt((*_2)[13 of 28]) -> [116: bb209, otherwise: bb7];
    }

    bb209: {
        switchInt((*_2)[14 of 28]) -> [97: bb210, otherwise: bb7];
    }

    bb210: {
        switchInt((*_2)[15 of 28]) -> [116: bb211, otherwise: bb7];
    }

    bb211: {
        switchInt((*_2)[16 of 28]) -> [101: bb212, otherwise: bb7];
    }

    bb212: {
        switchInt((*_2)[17 of 28]) -> [95: bb213, otherwise: bb7];
    }

    bb213: {
        switchInt((*_2)[18 of 28]) -> [119: bb214, otherwise: bb7];
    }

    bb214: {
        switchInt((*_2)[19 of 28]) -> [105: bb215, otherwise: bb7];
    }

    bb215: {
        switchInt((*_2)[20 of 28]) -> [116: bb216, otherwise: bb7];
    }

    bb216: {
        switchInt((*_2)[21 of 28]) -> [104: bb217, otherwise: bb7];
    }

    bb217: {
        switchInt((*_2)[22 of 28]) -> [95: bb218, otherwise: bb7];
    }

    bb218: {
        switchInt((*_2)[23 of 28]) -> [112: bb219, otherwise: bb7];
    }

    bb219: {
        switchInt((*_2)[24 of 28]) -> [114: bb220, otherwise: bb7];
    }

    bb220: {
        switchInt((*_2)[25 of 28]) -> [111: bb221, otherwise: bb7];
    }

    bb221: {
        switchInt((*_2)[26 of 28]) -> [111: bb222, otherwise: bb7];
    }

    bb222: {
        switchInt((*_2)[27 of 28]) -> [102: bb349, otherwise: bb7];
    }

    bb223: {
        switchInt((*_2)[5 of 28]) -> [114: bb224, otherwise: bb7];
    }

    bb224: {
        switchInt((*_2)[6 of 28]) -> [97: bb225, otherwise: bb7];
    }

    bb225: {
        switchInt((*_2)[7 of 28]) -> [110: bb226, otherwise: bb7];
    }

    bb226: {
        switchInt((*_2)[8 of 28]) -> [115: bb227, otherwise: bb7];
    }

    bb227: {
        switchInt((*_2)[9 of 28]) -> [97: bb228, otherwise: bb7];
    }

    bb228: {
        switchInt((*_2)[10 of 28]) -> [99: bb229, otherwise: bb7];
    }

    bb229: {
        switchInt((*_2)[11 of 28]) -> [116: bb230, otherwise: bb7];
    }

    bb230: {
        switchInt((*_2)[12 of 28]) -> [105: bb231, otherwise: bb7];
    }

    bb231: {
        switchInt((*_2)[13 of 28]) -> [111: bb232, otherwise: bb7];
    }

    bb232: {
        switchInt((*_2)[14 of 28]) -> [110: bb233, otherwise: bb7];
    }

    bb233: {
        switchInt((*_2)[15 of 28]) -> [115: bb234, otherwise: bb7];
    }

    bb234: {
        switchInt((*_2)[16 of 28]) -> [95: bb235, otherwise: bb7];
    }

    bb235: {
        switchInt((*_2)[17 of 28]) -> [119: bb236, otherwise: bb7];
    }

    bb236: {
        switchInt((*_2)[18 of 28]) -> [105: bb237, otherwise: bb7];
    }

    bb237: {
        switchInt((*_2)[19 of 28]) -> [116: bb238, otherwise: bb7];
    }

    bb238: {
        switchInt((*_2)[20 of 28]) -> [104: bb239, otherwise: bb7];
    }

    bb239: {
        switchInt((*_2)[21 of 28]) -> [95: bb240, otherwise: bb7];
    }

    bb240: {
        switchInt((*_2)[22 of 28]) -> [112: bb241, otherwise: bb7];
    }

    bb241: {
        switchInt((*_2)[23 of 28]) -> [114: bb242, otherwise: bb7];
    }

    bb242: {
        switchInt((*_2)[24 of 28]) -> [111: bb243, otherwise: bb7];
    }

    bb243: {
        switchInt((*_2)[25 of 28]) -> [111: bb244, otherwise: bb7];
    }

    bb244: {
        switchInt((*_2)[26 of 28]) -> [102: bb245, otherwise: bb7];
    }

    bb245: {
        switchInt((*_2)[27 of 28]) -> [115: bb350, otherwise: bb7];
    }

    bb246: {
        _9 = Len((*_2));
        _10 = const 36_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb283, otherwise: bb247];
    }

    bb247: {
        switchInt((*_2)[0 of 36]) -> [103: bb248, otherwise: bb7];
    }

    bb248: {
        switchInt((*_2)[1 of 36]) -> [101: bb249, otherwise: bb7];
    }

    bb249: {
        switchInt((*_2)[2 of 36]) -> [116: bb250, otherwise: bb7];
    }

    bb250: {
        switchInt((*_2)[3 of 36]) -> [95: bb251, otherwise: bb7];
    }

    bb251: {
        switchInt((*_2)[4 of 36]) -> [97: bb252, otherwise: bb7];
    }

    bb252: {
        switchInt((*_2)[5 of 36]) -> [99: bb253, otherwise: bb7];
    }

    bb253: {
        switchInt((*_2)[6 of 36]) -> [99: bb254, otherwise: bb7];
    }

    bb254: {
        switchInt((*_2)[7 of 36]) -> [111: bb255, otherwise: bb7];
    }

    bb255: {
        switchInt((*_2)[8 of 36]) -> [117: bb256, otherwise: bb7];
    }

    bb256: {
        switchInt((*_2)[9 of 36]) -> [110: bb257, otherwise: bb7];
    }

    bb257: {
        switchInt((*_2)[10 of 36]) -> [116: bb258, otherwise: bb7];
    }

    bb258: {
        switchInt((*_2)[11 of 36]) -> [95: bb259, otherwise: bb7];
    }

    bb259: {
        switchInt((*_2)[12 of 36]) -> [116: bb260, otherwise: bb7];
    }

    bb260: {
        switchInt((*_2)[13 of 36]) -> [114: bb261, otherwise: bb7];
    }

    bb261: {
        switchInt((*_2)[14 of 36]) -> [97: bb262, otherwise: bb7];
    }

    bb262: {
        switchInt((*_2)[15 of 36]) -> [110: bb263, otherwise: bb7];
    }

    bb263: {
        switchInt((*_2)[16 of 36]) -> [115: bb264, otherwise: bb7];
    }

    bb264: {
        switchInt((*_2)[17 of 36]) -> [97: bb265, otherwise: bb7];
    }

    bb265: {
        switchInt((*_2)[18 of 36]) -> [99: bb266, otherwise: bb7];
    }

    bb266: {
        switchInt((*_2)[19 of 36]) -> [116: bb267, otherwise: bb7];
    }

    bb267: {
        switchInt((*_2)[20 of 36]) -> [105: bb268, otherwise: bb7];
    }

    bb268: {
        switchInt((*_2)[21 of 36]) -> [111: bb269, otherwise: bb7];
    }

    bb269: {
        switchInt((*_2)[22 of 36]) -> [110: bb270, otherwise: bb7];
    }

    bb270: {
        switchInt((*_2)[23 of 36]) -> [115: bb271, otherwise: bb7];
    }

    bb271: {
        switchInt((*_2)[24 of 36]) -> [95: bb272, otherwise: bb7];
    }

    bb272: {
        switchInt((*_2)[25 of 36]) -> [119: bb273, otherwise: bb7];
    }

    bb273: {
        switchInt((*_2)[26 of 36]) -> [105: bb274, otherwise: bb7];
    }

    bb274: {
        switchInt((*_2)[27 of 36]) -> [116: bb275, otherwise: bb7];
    }

    bb275: {
        switchInt((*_2)[28 of 36]) -> [104: bb276, otherwise: bb7];
    }

    bb276: {
        switchInt((*_2)[29 of 36]) -> [95: bb277, otherwise: bb7];
    }

    bb277: {
        switchInt((*_2)[30 of 36]) -> [112: bb278, otherwise: bb7];
    }

    bb278: {
        switchInt((*_2)[31 of 36]) -> [114: bb279, otherwise: bb7];
    }

    bb279: {
        switchInt((*_2)[32 of 36]) -> [111: bb280, otherwise: bb7];
    }

    bb280: {
        switchInt((*_2)[33 of 36]) -> [111: bb281, otherwise: bb7];
    }

    bb281: {
        switchInt((*_2)[34 of 36]) -> [102: bb282, otherwise: bb7];
    }

    bb282: {
        switchInt((*_2)[35 of 36]) -> [115: bb351, otherwise: bb7];
    }

    bb283: {
        _6 = Len((*_2));
        _7 = const 22_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb306, otherwise: bb284];
    }

    bb284: {
        switchInt((*_2)[0 of 22]) -> [103: bb285, otherwise: bb7];
    }

    bb285: {
        switchInt((*_2)[1 of 22]) -> [101: bb286, otherwise: bb7];
    }

    bb286: {
        switchInt((*_2)[2 of 22]) -> [116: bb287, otherwise: bb7];
    }

    bb287: {
        switchInt((*_2)[3 of 22]) -> [95: bb288, otherwise: bb7];
    }

    bb288: {
        switchInt((*_2)[4 of 22]) -> [101: bb289, otherwise: bb7];
    }

    bb289: {
        switchInt((*_2)[5 of 22]) -> [118: bb290, otherwise: bb7];
    }

    bb290: {
        switchInt((*_2)[6 of 22]) -> [101: bb291, otherwise: bb7];
    }

    bb291: {
        switchInt((*_2)[7 of 22]) -> [110: bb292, otherwise: bb7];
    }

    bb292: {
        switchInt((*_2)[8 of 22]) -> [116: bb293, otherwise: bb7];
    }

    bb293: {
        switchInt((*_2)[9 of 22]) -> [115: bb294, otherwise: bb7];
    }

    bb294: {
        switchInt((*_2)[10 of 22]) -> [95: bb295, otherwise: bb7];
    }

    bb295: {
        switchInt((*_2)[11 of 22]) -> [119: bb296, otherwise: bb7];
    }

    bb296: {
        switchInt((*_2)[12 of 22]) -> [105: bb297, otherwise: bb7];
    }

    bb297: {
        switchInt((*_2)[13 of 22]) -> [116: bb298, otherwise: bb7];
    }

    bb298: {
        switchInt((*_2)[14 of 22]) -> [104: bb299, otherwise: bb7];
    }

    bb299: {
        switchInt((*_2)[15 of 22]) -> [95: bb300, otherwise: bb7];
    }

    bb300: {
        switchInt((*_2)[16 of 22]) -> [112: bb301, otherwise: bb7];
    }

    bb301: {
        switchInt((*_2)[17 of 22]) -> [114: bb302, otherwise: bb7];
    }

    bb302: {
        switchInt((*_2)[18 of 22]) -> [111: bb303, otherwise: bb7];
    }

    bb303: {
        switchInt((*_2)[19 of 22]) -> [111: bb304, otherwise: bb7];
    }

    bb304: {
        switchInt((*_2)[20 of 22]) -> [102: bb305, otherwise: bb7];
    }

    bb305: {
        switchInt((*_2)[21 of 22]) -> [115: bb352, otherwise: bb7];
    }

    bb306: {
        _3 = Len((*_2));
        _4 = const 31_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb7, otherwise: bb307];
    }

    bb307: {
        switchInt((*_2)[0 of 31]) -> [103: bb308, otherwise: bb7];
    }

    bb308: {
        switchInt((*_2)[1 of 31]) -> [101: bb309, otherwise: bb7];
    }

    bb309: {
        switchInt((*_2)[2 of 31]) -> [116: bb310, otherwise: bb7];
    }

    bb310: {
        switchInt((*_2)[3 of 31]) -> [95: bb311, otherwise: bb7];
    }

    bb311: {
        switchInt((*_2)[4 of 31]) -> [101: bb312, otherwise: bb7];
    }

    bb312: {
        switchInt((*_2)[5 of 31]) -> [118: bb313, otherwise: bb7];
    }

    bb313: {
        switchInt((*_2)[6 of 31]) -> [101: bb314, otherwise: bb7];
    }

    bb314: {
        switchInt((*_2)[7 of 31]) -> [110: bb315, otherwise: bb7];
    }

    bb315: {
        switchInt((*_2)[8 of 31]) -> [116: bb316, otherwise: bb7];
    }

    bb316: {
        switchInt((*_2)[9 of 31]) -> [95: bb317, otherwise: bb7];
    }

    bb317: {
        switchInt((*_2)[10 of 31]) -> [98: bb318, otherwise: bb7];
    }

    bb318: {
        switchInt((*_2)[11 of 31]) -> [121: bb319, otherwise: bb7];
    }

    bb319: {
        switchInt((*_2)[12 of 31]) -> [95: bb320, otherwise: bb7];
    }

    bb320: {
        switchInt((*_2)[13 of 31]) -> [118: bb321, otherwise: bb7];
    }

    bb321: {
        switchInt((*_2)[14 of 31]) -> [101: bb322, otherwise: bb7];
    }

    bb322: {
        switchInt((*_2)[15 of 31]) -> [114: bb323, otherwise: bb7];
    }

    bb323: {
        switchInt((*_2)[16 of 31]) -> [115: bb324, otherwise: bb7];
    }

    bb324: {
        switchInt((*_2)[17 of 31]) -> [105: bb325, otherwise: bb7];
    }

    bb325: {
        switchInt((*_2)[18 of 31]) -> [111: bb326, otherwise: bb7];
    }

    bb326: {
        switchInt((*_2)[19 of 31]) -> [110: bb327, otherwise: bb7];
    }

    bb327: {
        switchInt((*_2)[20 of 31]) -> [95: bb328, otherwise: bb7];
    }

    bb328: {
        switchInt((*_2)[21 of 31]) -> [119: bb329, otherwise: bb7];
    }

    bb329: {
        switchInt((*_2)[22 of 31]) -> [105: bb330, otherwise: bb7];
    }

    bb330: {
        switchInt((*_2)[23 of 31]) -> [116: bb331, otherwise: bb7];
    }

    bb331: {
        switchInt((*_2)[24 of 31]) -> [104: bb332, otherwise: bb7];
    }

    bb332: {
        switchInt((*_2)[25 of 31]) -> [95: bb333, otherwise: bb7];
    }

    bb333: {
        switchInt((*_2)[26 of 31]) -> [112: bb334, otherwise: bb7];
    }

    bb334: {
        switchInt((*_2)[27 of 31]) -> [114: bb335, otherwise: bb7];
    }

    bb335: {
        switchInt((*_2)[28 of 31]) -> [111: bb336, otherwise: bb7];
    }

    bb336: {
        switchInt((*_2)[29 of 31]) -> [111: bb337, otherwise: bb7];
    }

    bb337: {
        switchInt((*_2)[30 of 31]) -> [102: bb353, otherwise: bb7];
    }

    bb338: {
        _48 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field0;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _48);
        goto -> bb357;
    }

    bb339: {
        _49 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field1;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _49);
        goto -> bb357;
    }

    bb340: {
        _50 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field2;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _50);
        goto -> bb357;
    }

    bb341: {
        _51 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field3;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _51);
        goto -> bb357;
    }

    bb342: {
        _52 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field4;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _52);
        goto -> bb357;
    }

    bb343: {
        _53 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field5;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _53);
        goto -> bb357;
    }

    bb344: {
        _54 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field6;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _54);
        goto -> bb357;
    }

    bb345: {
        _55 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field7;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _55);
        goto -> bb357;
    }

    bb346: {
        _56 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field8;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _56);
        goto -> bb357;
    }

    bb347: {
        _57 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field9;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _57);
        goto -> bb357;
    }

    bb348: {
        _58 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field10;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _58);
        goto -> bb357;
    }

    bb349: {
        _59 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field11;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _59);
        goto -> bb357;
    }

    bb350: {
        _60 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field12;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _60);
        goto -> bb357;
    }

    bb351: {
        _61 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field13;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _61);
        goto -> bb357;
    }

    bb352: {
        _62 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field14;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _62);
        goto -> bb357;
    }

    bb353: {
        _63 = request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field::__field15;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Ok(move _63);
        goto -> bb357;
    }

    bb354: {
        _64 = &_65;
        _67 = <Cow<'_, str> as Deref>::deref(_64) -> [return: bb355, unwind: bb358];
    }

    bb355: {
        _66 = <__E as _::_serde::de::Error>::unknown_variant(_67, const _) -> [return: bb356, unwind: bb358];
    }

    bb356: {
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, __E>::Err(move _66);
        drop(_65) -> [return: bb357, unwind continue];
    }

    bb357: {
        return;
    }

    bb358 (cleanup): {
        drop(_65) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb359 (cleanup): {
        resume;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize(_1: __D) -> std::result::Result<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field, <__D as _::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field, <__D as _::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_identifier::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__FieldVisitor>(move _1, const request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 16];
    let _2: &[&str; 16];
    let _3: [&str; 16];
    let mut _4: &[&str; 16];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::VARIANTS: &[&str; 16] = {
    let mut _0: &[&str; 16];
    let mut _1: [&str; 16];

    bb0: {
        _1 = [const "submit", const "get_metadata", const "get_account", const "get_transactions", const "get_account_transaction", const "get_account_transactions", const "get_events", const "get_currencies", const "get_network_status", const "get_state_proof", const "get_accumulator_consistency_proof", const "get_account_state_with_proof", const "get_transactions_with_proofs", const "get_account_transactions_with_proofs", const "get_events_with_proofs", const "get_event_by_version_with_proof"];
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize(_1: __Seed<'_>, _2: __D) -> std::result::Result<request::MethodRequest, <__D as _::_serde::Deserializer<'_>>::Error> {
    debug self => _1;
    debug __deserializer => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__D as _::_serde::Deserializer<'_>>::Error>;
    let mut _3: isize;
    let mut _4: std::result::Result<(std::string::String,), <__D as _::_serde::Deserializer<'_>>::Error>;
    let mut _5: std::result::Result<(std::option::Option<u64>,), <__D as _::_serde::Deserializer<'_>>::Error>;
    let mut _6: std::result::Result<[(); 0], <__D as _::_serde::Deserializer<'_>>::Error>;
    let mut _7: std::result::Result<[(); 0], <__D as _::_serde::Deserializer<'_>>::Error>;
    let mut _8: std::result::Result<(u64,), <__D as _::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _3 = discriminant((_1.0: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field));
        switchInt(move _3) -> [0: bb3, 1: bb5, 2: bb7, 3: bb8, 4: bb9, 5: bb10, 6: bb11, 7: bb12, 8: bb14, 9: bb16, 10: bb18, 11: bb19, 12: bb20, 13: bb21, 14: bb22, 15: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_tuple::<<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>>(move _2, const 2_usize, const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb23, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = <(std::string::String,) as Deserialize<'_>>::deserialize::<__D>(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = std::result::Result::<(std::string::String,), <__D as _::_serde::Deserializer<'_>>::Error>::map::<request::MethodRequest, fn((std::string::String,)) -> request::MethodRequest {request::MethodRequest::Submit}>(move _4, request::MethodRequest::Submit) -> [return: bb23, unwind continue];
    }

    bb5: {
        _5 = <(std::option::Option<u64>,) as Deserialize<'_>>::deserialize::<__D>(move _2) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = std::result::Result::<(std::option::Option<u64>,), <__D as _::_serde::Deserializer<'_>>::Error>::map::<request::MethodRequest, fn((std::option::Option<u64>,)) -> request::MethodRequest {request::MethodRequest::GetMetadata}>(move _5, request::MethodRequest::GetMetadata) -> [return: bb23, unwind continue];
    }

    bb7: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_tuple::<<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>>(move _2, const 2_usize, const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb23, unwind continue];
    }

    bb8: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_tuple::<<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>>(move _2, const 3_usize, const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb23, unwind continue];
    }

    bb9: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_tuple::<<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>>(move _2, const 3_usize, const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb23, unwind continue];
    }

    bb10: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_tuple::<<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>>(move _2, const 4_usize, const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb23, unwind continue];
    }

    bb11: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_tuple::<<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>>(move _2, const 3_usize, const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb23, unwind continue];
    }

    bb12: {
        _6 = <[(); 0] as Deserialize<'_>>::deserialize::<__D>(move _2) -> [return: bb13, unwind continue];
    }

    bb13: {
        _0 = std::result::Result::<[(); 0], <__D as _::_serde::Deserializer<'_>>::Error>::map::<request::MethodRequest, fn([(); 0]) -> request::MethodRequest {request::MethodRequest::GetCurrencies}>(move _6, request::MethodRequest::GetCurrencies) -> [return: bb23, unwind continue];
    }

    bb14: {
        _7 = <[(); 0] as Deserialize<'_>>::deserialize::<__D>(move _2) -> [return: bb15, unwind continue];
    }

    bb15: {
        _0 = std::result::Result::<[(); 0], <__D as _::_serde::Deserializer<'_>>::Error>::map::<request::MethodRequest, fn([(); 0]) -> request::MethodRequest {request::MethodRequest::GetNetworkStatus}>(move _7, request::MethodRequest::GetNetworkStatus) -> [return: bb23, unwind continue];
    }

    bb16: {
        _8 = <(u64,) as Deserialize<'_>>::deserialize::<__D>(move _2) -> [return: bb17, unwind continue];
    }

    bb17: {
        _0 = std::result::Result::<(u64,), <__D as _::_serde::Deserializer<'_>>::Error>::map::<request::MethodRequest, fn((u64,)) -> request::MethodRequest {request::MethodRequest::GetStateProof}>(move _8, request::MethodRequest::GetStateProof) -> [return: bb23, unwind continue];
    }

    bb18: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_tuple::<<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>>(move _2, const 2_usize, const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb23, unwind continue];
    }

    bb19: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_tuple::<<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>>(move _2, const 3_usize, const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb23, unwind continue];
    }

    bb20: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_tuple::<<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>>(move _2, const 3_usize, const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb23, unwind continue];
    }

    bb21: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_tuple::<<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>>(move _2, const 5_usize, const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb23, unwind continue];
    }

    bb22: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_tuple::<<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>>(move _2, const 3_usize, const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetAccount";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::PeerId>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::PeerId>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::PeerId;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: request::MethodRequest;
    let mut _22: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<std::option::Option<u64>>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: std::option::Option<u64>;
        let mut _23: &&str;
        scope 5 {
            debug __field1 => _18;
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<AccountAddress>(_4) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb14;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::PeerId>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _22 = const _;
        _11 = _22 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb16];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::PeerId);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_13) -> [return: bb8, unwind: bb16];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb14;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb14;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _23 = const _;
        _20 = _23 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb16];
    }

    bb12: {
        _18 = ((_15 as Some).0: std::option::Option<u64>);
        _21 = request::MethodRequest::GetAccount(_9, _18);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _21);
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb14;
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccount with 2 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccount with 2 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetTransactions";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<u64>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: u64;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<bool>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: request::MethodRequest;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<bool>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: bool;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<u64>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<u64>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: u64);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<bool>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<bool>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: bool);
        _30 = request::MethodRequest::GetTransactions(_9, _18, _27);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetTransactions with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetTransactions with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetTransactions with 3 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetAccountTransaction";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::PeerId>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::PeerId>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::PeerId;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<bool>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: request::MethodRequest;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<bool>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: bool;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<AccountAddress>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::PeerId>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::PeerId);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<bool>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<bool>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: bool);
        _30 = request::MethodRequest::GetAccountTransaction(_9, _18, _27);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransaction with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransaction with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransaction with 3 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetAccountTransactions";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::PeerId>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::PeerId>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::PeerId;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: std::result::Result<std::option::Option<bool>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _31: &mut __A;
    let mut _32: isize;
    let mut _35: isize;
    let mut _37: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _38: &dyn _::_serde::de::Expected;
    let mut _39: request::MethodRequest;
    let mut _40: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _41: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<u64>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: u64;
            let mut _42: &&str;
            scope 9 {
                debug __field2 => _27;
                let _33: std::option::Option<bool>;
                let _34: <__A as _::_serde::de::SeqAccess<'_>>::Error;
                let _36: bool;
                let mut _43: &&str;
                scope 13 {
                    debug __field3 => _36;
                }
                scope 14 {
                    debug __val => _33;
                }
                scope 15 {
                    debug __err => _34;
                }
                scope 16 {
                    debug __value => _36;
                }
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<AccountAddress>(_4) -> [return: bb1, unwind: bb28];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb26;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::PeerId>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _40 = const _;
        _11 = _40 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb28];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::PeerId);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb28];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb26;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb26;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _41 = const _;
        _20 = _41 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb28];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<u64>(_22) -> [return: bb14, unwind: bb28];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb26;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb26;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<u64>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _42 = const _;
        _29 = _42 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb28];
    }

    bb18: {
        _27 = ((_24 as Some).0: u64);
        _31 = &mut _2;
        _30 = <__A as SeqAccess<'_>>::next_element::<bool>(_31) -> [return: bb20, unwind: bb28];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb26;
    }

    bb20: {
        _32 = discriminant(_30);
        switchInt(move _32) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _34 = move ((_30 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _34);
        goto -> bb26;
    }

    bb22: {
        _33 = ((_30 as Ok).0: std::option::Option<bool>);
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _43 = const _;
        _38 = _43 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _37 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 3_usize, move _38) -> [return: bb25, unwind: bb28];
    }

    bb24: {
        _36 = ((_33 as Some).0: bool);
        _39 = request::MethodRequest::GetAccountTransactions(_9, _18, _27, _36);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _39);
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb25: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _37);
        goto -> bb26;
    }

    bb26: {
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactions with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactions with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactions with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactions with 4 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetEvents";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::event::EventKey>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::event::EventKey>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::event::EventKey;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: request::MethodRequest;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<u64>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: u64;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<EventKey>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::event::EventKey>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::event::EventKey);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<u64>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<u64>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: u64);
        _30 = request::MethodRequest::GetEvents(_9, _18, _27);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEvents with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEvents with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEvents with 3 elements";
        _0 = &_1;
        return;
    }
}

request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetAccumulatorConsistencyProof";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<std::option::Option<u64>>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: std::option::Option<u64>;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: request::MethodRequest;
    let mut _22: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<std::option::Option<u64>>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: std::option::Option<u64>;
        let mut _23: &&str;
        scope 5 {
            debug __field1 => _18;
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_4) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb14;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _22 = const _;
        _11 = _22 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb16];
    }

    bb6: {
        _9 = ((_6 as Some).0: std::option::Option<u64>);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_13) -> [return: bb8, unwind: bb16];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb14;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb14;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _23 = const _;
        _20 = _23 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb16];
    }

    bb12: {
        _18 = ((_15 as Some).0: std::option::Option<u64>);
        _21 = request::MethodRequest::GetAccumulatorConsistencyProof(_9, _18);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _21);
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb14;
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccumulatorConsistencyProof with 2 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccumulatorConsistencyProof with 2 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetAccountStateWithProof";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::PeerId>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::PeerId>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::PeerId;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: request::MethodRequest;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<std::option::Option<u64>>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: std::option::Option<u64>;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<std::option::Option<u64>>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: std::option::Option<u64>;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<AccountAddress>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::PeerId>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::PeerId);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: std::option::Option<u64>);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: std::option::Option<u64>);
        _30 = request::MethodRequest::GetAccountStateWithProof(_9, _18, _27);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountStateWithProof with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountStateWithProof with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountStateWithProof with 3 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetTransactionsWithProofs";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<u64>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: u64;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<bool>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: request::MethodRequest;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<bool>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: bool;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<u64>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<u64>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: u64);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<bool>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<bool>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: bool);
        _30 = request::MethodRequest::GetTransactionsWithProofs(_9, _18, _27);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetTransactionsWithProofs with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetTransactionsWithProofs with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetTransactionsWithProofs with 3 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetAccountTransactionsWithProofs";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::PeerId>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::PeerId>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::PeerId;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: std::result::Result<std::option::Option<bool>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _31: &mut __A;
    let mut _32: isize;
    let mut _35: isize;
    let mut _37: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _38: &dyn _::_serde::de::Expected;
    let mut _39: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _40: &mut __A;
    let mut _41: isize;
    let mut _44: isize;
    let mut _46: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _47: &dyn _::_serde::de::Expected;
    let mut _48: request::MethodRequest;
    let mut _49: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _50: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<u64>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: u64;
            let mut _51: &&str;
            scope 9 {
                debug __field2 => _27;
                let _33: std::option::Option<bool>;
                let _34: <__A as _::_serde::de::SeqAccess<'_>>::Error;
                let _36: bool;
                let mut _52: &&str;
                scope 13 {
                    debug __field3 => _36;
                    let _42: std::option::Option<std::option::Option<u64>>;
                    let _43: <__A as _::_serde::de::SeqAccess<'_>>::Error;
                    let _45: std::option::Option<u64>;
                    let mut _53: &&str;
                    scope 17 {
                        debug __field4 => _45;
                    }
                    scope 18 {
                        debug __val => _42;
                    }
                    scope 19 {
                        debug __err => _43;
                    }
                    scope 20 {
                        debug __value => _45;
                    }
                }
                scope 14 {
                    debug __val => _33;
                }
                scope 15 {
                    debug __err => _34;
                }
                scope 16 {
                    debug __value => _36;
                }
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<AccountAddress>(_4) -> [return: bb1, unwind: bb34];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb32;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::PeerId>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _49 = const _;
        _11 = _49 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb34];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::PeerId);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb34];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb32;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb32;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _50 = const _;
        _20 = _50 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb34];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<u64>(_22) -> [return: bb14, unwind: bb34];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb32;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb32;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<u64>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _51 = const _;
        _29 = _51 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb34];
    }

    bb18: {
        _27 = ((_24 as Some).0: u64);
        _31 = &mut _2;
        _30 = <__A as SeqAccess<'_>>::next_element::<bool>(_31) -> [return: bb20, unwind: bb34];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb32;
    }

    bb20: {
        _32 = discriminant(_30);
        switchInt(move _32) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _34 = move ((_30 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _34);
        goto -> bb32;
    }

    bb22: {
        _33 = ((_30 as Ok).0: std::option::Option<bool>);
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _52 = const _;
        _38 = _52 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _37 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 3_usize, move _38) -> [return: bb25, unwind: bb34];
    }

    bb24: {
        _36 = ((_33 as Some).0: bool);
        _40 = &mut _2;
        _39 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_40) -> [return: bb26, unwind: bb34];
    }

    bb25: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _37);
        goto -> bb32;
    }

    bb26: {
        _41 = discriminant(_39);
        switchInt(move _41) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _43 = move ((_39 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _43);
        goto -> bb32;
    }

    bb28: {
        _42 = ((_39 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _44 = discriminant(_42);
        switchInt(move _44) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _53 = const _;
        _47 = _53 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _46 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 4_usize, move _47) -> [return: bb31, unwind: bb34];
    }

    bb30: {
        _45 = ((_42 as Some).0: std::option::Option<u64>);
        _48 = request::MethodRequest::GetAccountTransactionsWithProofs(_9, _18, _27, _36, _45);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _48);
        drop(_2) -> [return: bb33, unwind continue];
    }

    bb31: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _46);
        goto -> bb32;
    }

    bb32: {
        drop(_2) -> [return: bb33, unwind continue];
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_2) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactionsWithProofs with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactionsWithProofs with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactionsWithProofs with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactionsWithProofs with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactionsWithProofs with 5 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetEventsWithProofs";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::event::EventKey>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::event::EventKey>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::event::EventKey;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: request::MethodRequest;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<u64>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: u64;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<EventKey>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::event::EventKey>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::event::EventKey);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<u64>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<u64>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: u64);
        _30 = request::MethodRequest::GetEventsWithProofs(_9, _18, _27);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEventsWithProofs with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEventsWithProofs with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEventsWithProofs with 3 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetEventByVersionWithProof";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <__Seed<'de> as DeserializeSeed<'de>>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::event::EventKey>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::event::EventKey>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::event::EventKey;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: request::MethodRequest;
    let mut _22: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<std::option::Option<u64>>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: std::option::Option<u64>;
        let mut _23: &&str;
        scope 5 {
            debug __field1 => _18;
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<EventKey>(_4) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb14;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::event::EventKey>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _22 = const _;
        _11 = _22 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb16];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::event::EventKey);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_13) -> [return: bb8, unwind: bb16];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb14;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb14;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _23 = const _;
        _20 = _23 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb16];
    }

    bb12: {
        _18 = ((_15 as Some).0: std::option::Option<u64>);
        _21 = request::MethodRequest::GetEventByVersionWithProof(_9, _18);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _21);
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb14;
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEventByVersionWithProof with 2 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEventByVersionWithProof with 2 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "adjacently tagged enum MethodRequest";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map(_1: request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as MapAccess<'_>>::Error> {
    debug self => const request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _4: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _5: std::result::Result<std::option::Option<_::_serde::__private::de::content::TagContentOtherField>, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _6: &mut __A;
    let mut _7: _::_serde::__private::de::content::TagContentOtherFieldVisitor;
    let mut _8: isize;
    let mut _11: isize;
    let mut _13: isize;
    let mut _14: std::result::Result<_::_serde::de::IgnoredAny, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _15: &mut __A;
    let mut _16: isize;
    let mut _18: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _19: _::_serde::__private::de::content::TagOrContentField;
    let mut _20: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _21: _::_serde::__private::de::content::TagOrContentField;
    let mut _22: isize;
    let mut _23: isize;
    let mut _24: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _25: &mut __A;
    let mut _26: isize;
    let _27: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let _28: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let mut _29: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _31: std::result::Result<std::option::Option<_::_serde::__private::de::content::TagContentOtherField>, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _32: &mut __A;
    let mut _33: _::_serde::__private::de::content::TagContentOtherFieldVisitor;
    let mut _34: isize;
    let mut _37: isize;
    let mut _39: isize;
    let mut _40: std::result::Result<_::_serde::de::IgnoredAny, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _41: &mut __A;
    let mut _42: isize;
    let mut _44: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _45: _::_serde::__private::de::content::TagOrContentField;
    let mut _46: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _47: _::_serde::__private::de::content::TagOrContentField;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let mut _52: std::result::Result<request::MethodRequest, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _53: &mut __A;
    let mut _54: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Seed<'_>;
    let mut _55: isize;
    let mut _58: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _60: std::result::Result<std::option::Option<_::_serde::__private::de::content::TagContentOtherField>, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _61: &mut __A;
    let mut _62: _::_serde::__private::de::content::TagContentOtherFieldVisitor;
    let mut _63: isize;
    let mut _66: isize;
    let mut _68: isize;
    let mut _69: std::result::Result<_::_serde::de::IgnoredAny, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _70: &mut __A;
    let mut _71: isize;
    let mut _73: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _74: _::_serde::__private::de::content::TagOrContentField;
    let mut _75: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _76: _::_serde::__private::de::content::TagOrContentField;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let mut _80: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let mut _81: request::MethodRequest;
    let mut _82: isize;
    let mut _83: std::result::Result<(std::string::String,), <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _84: std::result::Result<(std::option::Option<u64>,), <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _85: std::result::Result<[(); 0], <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _86: std::result::Result<[(); 0], <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _87: std::result::Result<(u64,), <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _88: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let _89: _::_serde::__private::de::content::Content<'_>;
    let mut _90: std::result::Result<_::_serde::__private::de::content::Content<'_>, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _91: &mut __A;
    let mut _92: isize;
    let _93: _::_serde::__private::de::content::Content<'_>;
    let _94: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let mut _95: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _97: std::result::Result<std::option::Option<_::_serde::__private::de::content::TagContentOtherField>, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _98: &mut __A;
    let mut _99: _::_serde::__private::de::content::TagContentOtherFieldVisitor;
    let mut _100: isize;
    let mut _103: isize;
    let mut _105: isize;
    let mut _106: std::result::Result<_::_serde::de::IgnoredAny, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _107: &mut __A;
    let mut _108: isize;
    let mut _110: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _111: _::_serde::__private::de::content::TagOrContentField;
    let mut _112: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _113: _::_serde::__private::de::content::TagOrContentField;
    let mut _114: isize;
    let mut _115: isize;
    let mut _117: _::_serde::__private::de::content::Content<'_>;
    let mut _119: std::result::Result<request::MethodRequest, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _120: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _121: &mut __A;
    let mut _122: isize;
    let mut _125: isize;
    let mut _126: std::result::Result<(std::string::String,), <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _127: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _128: std::result::Result<(std::option::Option<u64>,), <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _129: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _130: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _131: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _132: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _133: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _134: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _135: std::result::Result<[(); 0], <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _136: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _137: std::result::Result<[(); 0], <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _138: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _139: std::result::Result<(u64,), <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _140: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _141: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _142: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _143: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _144: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _145: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _146: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _147: isize;
    let mut _150: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _152: std::result::Result<std::option::Option<_::_serde::__private::de::content::TagContentOtherField>, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _153: &mut __A;
    let mut _154: _::_serde::__private::de::content::TagContentOtherFieldVisitor;
    let mut _155: isize;
    let mut _158: isize;
    let mut _160: isize;
    let mut _161: std::result::Result<_::_serde::de::IgnoredAny, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _162: &mut __A;
    let mut _163: isize;
    let mut _165: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _166: _::_serde::__private::de::content::TagOrContentField;
    let mut _167: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
    let mut _168: _::_serde::__private::de::content::TagOrContentField;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let mut _172: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let mut _173: request::MethodRequest;
    let mut _174: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let mut _175: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let mut _176: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: bool;
    scope 1 {
        debug __rk => _4;
        scope 2 {
            debug __k => _12;
            let _9: std::option::Option<_::_serde::__private::de::content::TagContentOtherField>;
            let _10: <__A as _::_serde::de::MapAccess<'_>>::Error;
            let _12: _::_serde::__private::de::content::TagContentOtherField;
            let _17: <__A as _::_serde::de::MapAccess<'_>>::Error;
            scope 3 {
                debug __val => _9;
            }
            scope 4 {
                debug __err => _10;
            }
            scope 5 {
                debug __val => const IgnoredAny;
            }
            scope 6 {
                debug __err => _17;
            }
        }
    }
    scope 7 {
        debug __field => _27;
        let mut _30: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
        let _51: request::MethodRequest;
        let _56: request::MethodRequest;
        let _57: <__A as _::_serde::de::MapAccess<'_>>::Error;
        scope 10 {
            debug __rk => _30;
            scope 11 {
                debug __k => _38;
                let _35: std::option::Option<_::_serde::__private::de::content::TagContentOtherField>;
                let _36: <__A as _::_serde::de::MapAccess<'_>>::Error;
                let _38: _::_serde::__private::de::content::TagContentOtherField;
                let _43: <__A as _::_serde::de::MapAccess<'_>>::Error;
                scope 12 {
                    debug __val => _35;
                }
                scope 13 {
                    debug __err => _36;
                }
                scope 14 {
                    debug __val => const IgnoredAny;
                }
                scope 15 {
                    debug __err => _43;
                }
            }
        }
        scope 16 {
            debug __ret => _51;
            let mut _59: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
            scope 19 {
                debug __rk => _59;
                scope 20 {
                    debug __k => _67;
                    let _64: std::option::Option<_::_serde::__private::de::content::TagContentOtherField>;
                    let _65: <__A as _::_serde::de::MapAccess<'_>>::Error;
                    let _67: _::_serde::__private::de::content::TagContentOtherField;
                    let _72: <__A as _::_serde::de::MapAccess<'_>>::Error;
                    scope 21 {
                        debug __val => _64;
                    }
                    scope 22 {
                        debug __err => _65;
                    }
                    scope 23 {
                        debug __val => const IgnoredAny;
                    }
                    scope 24 {
                        debug __err => _72;
                    }
                }
            }
        }
        scope 17 {
            debug __val => _56;
        }
        scope 18 {
            debug __err => _57;
        }
    }
    scope 8 {
        debug __val => _27;
    }
    scope 9 {
        debug __err => _28;
    }
    scope 25 {
        debug __content => _89;
        let mut _96: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
        let _116: _::_serde::__private::de::content::ContentDeserializer<'_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
        scope 28 {
            debug __rk => _96;
            scope 29 {
                debug __k => _104;
                let _101: std::option::Option<_::_serde::__private::de::content::TagContentOtherField>;
                let _102: <__A as _::_serde::de::MapAccess<'_>>::Error;
                let _104: _::_serde::__private::de::content::TagContentOtherField;
                let _109: <__A as _::_serde::de::MapAccess<'_>>::Error;
                scope 30 {
                    debug __val => _101;
                }
                scope 31 {
                    debug __err => _102;
                }
                scope 32 {
                    debug __val => const IgnoredAny;
                }
                scope 33 {
                    debug __err => _109;
                }
            }
        }
        scope 34 {
            debug __deserializer => _116;
            let _118: request::MethodRequest;
            let _123: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
            let _124: <__A as _::_serde::de::MapAccess<'_>>::Error;
            let _148: request::MethodRequest;
            let _149: <__A as _::_serde::de::MapAccess<'_>>::Error;
            scope 35 {
                debug __ret => _118;
                let mut _151: std::option::Option<_::_serde::__private::de::content::TagOrContentField>;
                scope 40 {
                    debug __rk => _151;
                    scope 41 {
                        debug __k => _159;
                        let _156: std::option::Option<_::_serde::__private::de::content::TagContentOtherField>;
                        let _157: <__A as _::_serde::de::MapAccess<'_>>::Error;
                        let _159: _::_serde::__private::de::content::TagContentOtherField;
                        let _164: <__A as _::_serde::de::MapAccess<'_>>::Error;
                        scope 42 {
                            debug __val => _156;
                        }
                        scope 43 {
                            debug __err => _157;
                        }
                        scope 44 {
                            debug __val => const IgnoredAny;
                        }
                        scope 45 {
                            debug __err => _164;
                        }
                    }
                }
            }
            scope 36 {
                debug __val => _123;
            }
            scope 37 {
                debug __err => _124;
            }
            scope 38 {
                debug __val => _148;
            }
            scope 39 {
                debug __err => _149;
            }
        }
    }
    scope 26 {
        debug __val => _93;
    }
    scope 27 {
        debug __err => _94;
    }

    bb0: {
        _177 = const false;
        _179 = const false;
        _180 = const false;
        _178 = const false;
        _4 = std::option::Option::<TagOrContentField>::None;
        goto -> bb1;
    }

    bb1: {
        _6 = &mut _2;
        _7 = TagContentOtherFieldVisitor { tag: const "method", content: const "params" };
        _5 = <__A as MapAccess<'_>>::next_key_seed::<TagContentOtherFieldVisitor>(_6, move _7) -> [return: bb2, unwind: bb145];
    }

    bb2: {
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _10 = move ((_5 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _10);
        goto -> bb141;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _9 = move ((_5 as Ok).0: std::option::Option<_::_serde::__private::de::content::TagContentOtherField>);
        _11 = discriminant(_9);
        switchInt(move _11) -> [1: bb6, otherwise: bb147];
    }

    bb6: {
        _12 = move ((_9 as Some).0: _::_serde::__private::de::content::TagContentOtherField);
        _13 = discriminant(_12);
        switchInt(move _13) -> [0: bb11, 1: bb7, 2: bb8, otherwise: bb4];
    }

    bb7: {
        _21 = TagOrContentField::Content;
        _20 = std::option::Option::<TagOrContentField>::Some(move _21);
        _4 = move _20;
        goto -> bb147;
    }

    bb8: {
        _15 = &mut _2;
        _14 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_15) -> [return: bb9, unwind: bb145];
    }

    bb9: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb1, 1: bb10, otherwise: bb4];
    }

    bb10: {
        _17 = move ((_14 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _17);
        goto -> bb141;
    }

    bb11: {
        _19 = TagOrContentField::Tag;
        _18 = std::option::Option::<TagOrContentField>::Some(move _19);
        _4 = move _18;
        goto -> bb147;
    }

    bb12: {
        _176 = <<__A as MapAccess<'_>>::Error as _::_serde::de::Error>::missing_field(const "method") -> [return: bb134, unwind: bb145];
    }

    bb13: {
        _22 = discriminant(((_3 as Some).0: _::_serde::__private::de::content::TagOrContentField));
        switchInt(move _22) -> [0: bb14, 1: bb66, otherwise: bb4];
    }

    bb14: {
        _25 = &mut _2;
        _24 = <__A as MapAccess<'_>>::next_value::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field>(_25) -> [return: bb15, unwind: bb145];
    }

    bb15: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb16, otherwise: bb4];
    }

    bb16: {
        _28 = move ((_24 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _28);
        goto -> bb141;
    }

    bb17: {
        _27 = move ((_24 as Ok).0: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field);
        _30 = std::option::Option::<TagOrContentField>::None;
        goto -> bb18;
    }

    bb18: {
        _32 = &mut _2;
        _33 = TagContentOtherFieldVisitor { tag: const "method", content: const "params" };
        _31 = <__A as MapAccess<'_>>::next_key_seed::<TagContentOtherFieldVisitor>(_32, move _33) -> [return: bb19, unwind: bb145];
    }

    bb19: {
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb21, 1: bb20, otherwise: bb4];
    }

    bb20: {
        _36 = move ((_31 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _36);
        goto -> bb141;
    }

    bb21: {
        _35 = move ((_31 as Ok).0: std::option::Option<_::_serde::__private::de::content::TagContentOtherField>);
        _37 = discriminant(_35);
        switchInt(move _37) -> [1: bb22, otherwise: bb148];
    }

    bb22: {
        _38 = move ((_35 as Some).0: _::_serde::__private::de::content::TagContentOtherField);
        _39 = discriminant(_38);
        switchInt(move _39) -> [0: bb27, 1: bb23, 2: bb24, otherwise: bb4];
    }

    bb23: {
        _47 = TagOrContentField::Content;
        _46 = std::option::Option::<TagOrContentField>::Some(move _47);
        _30 = move _46;
        goto -> bb148;
    }

    bb24: {
        _41 = &mut _2;
        _40 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_41) -> [return: bb25, unwind: bb145];
    }

    bb25: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb18, 1: bb26, otherwise: bb4];
    }

    bb26: {
        _43 = move ((_40 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _43);
        goto -> bb141;
    }

    bb27: {
        _45 = TagOrContentField::Tag;
        _44 = std::option::Option::<TagOrContentField>::Some(move _45);
        _30 = move _44;
        goto -> bb148;
    }

    bb28: {
        _82 = discriminant(_27);
        switchInt(move _82) -> [0: bb55, 1: bb57, 7: bb59, 8: bb61, 9: bb63, otherwise: bb54];
    }

    bb29: {
        _48 = discriminant(((_29 as Some).0: _::_serde::__private::de::content::TagOrContentField));
        switchInt(move _48) -> [0: bb30, 1: bb32, otherwise: bb4];
    }

    bb30: {
        _50 = <<__A as MapAccess<'_>>::Error as _::_serde::de::Error>::duplicate_field(const "method") -> [return: bb31, unwind: bb145];
    }

    bb31: {
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _50);
        goto -> bb135;
    }

    bb32: {
        _53 = &mut _2;
        _54 = __Seed::<'_> { field: move _27, marker: const PhantomData::<request::MethodRequest>, lifetime: const PhantomData::<&()> };
        _52 = <__A as MapAccess<'_>>::next_value_seed::<__Seed<'_>>(_53, move _54) -> [return: bb33, unwind: bb145];
    }

    bb33: {
        _55 = discriminant(_52);
        switchInt(move _55) -> [0: bb35, 1: bb34, otherwise: bb4];
    }

    bb34: {
        _57 = move ((_52 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _57);
        _177 = const false;
        goto -> bb141;
    }

    bb35: {
        _56 = move ((_52 as Ok).0: request::MethodRequest);
        _177 = const true;
        _51 = move _56;
        _59 = std::option::Option::<TagOrContentField>::None;
        goto -> bb36;
    }

    bb36: {
        _61 = &mut _2;
        _62 = TagContentOtherFieldVisitor { tag: const "method", content: const "params" };
        _60 = <__A as MapAccess<'_>>::next_key_seed::<TagContentOtherFieldVisitor>(_61, move _62) -> [return: bb37, unwind: bb144];
    }

    bb37: {
        _63 = discriminant(_60);
        switchInt(move _63) -> [0: bb39, 1: bb38, otherwise: bb4];
    }

    bb38: {
        _65 = move ((_60 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _65);
        goto -> bb159;
    }

    bb39: {
        _64 = move ((_60 as Ok).0: std::option::Option<_::_serde::__private::de::content::TagContentOtherField>);
        _66 = discriminant(_64);
        switchInt(move _66) -> [1: bb40, otherwise: bb149];
    }

    bb40: {
        _67 = move ((_64 as Some).0: _::_serde::__private::de::content::TagContentOtherField);
        _68 = discriminant(_67);
        switchInt(move _68) -> [0: bb45, 1: bb41, 2: bb42, otherwise: bb4];
    }

    bb41: {
        _76 = TagOrContentField::Content;
        _75 = std::option::Option::<TagOrContentField>::Some(move _76);
        _59 = move _75;
        goto -> bb149;
    }

    bb42: {
        _70 = &mut _2;
        _69 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_70) -> [return: bb43, unwind: bb144];
    }

    bb43: {
        _71 = discriminant(_69);
        switchInt(move _71) -> [0: bb36, 1: bb44, otherwise: bb4];
    }

    bb44: {
        _72 = move ((_69 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _72);
        goto -> bb159;
    }

    bb45: {
        _74 = TagOrContentField::Tag;
        _73 = std::option::Option::<TagOrContentField>::Some(move _74);
        _59 = move _73;
        goto -> bb149;
    }

    bb46: {
        _177 = const false;
        _81 = move _51;
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Ok(move _81);
        goto -> bb52;
    }

    bb47: {
        _77 = discriminant(((_58 as Some).0: _::_serde::__private::de::content::TagOrContentField));
        switchInt(move _77) -> [0: bb48, 1: bb50, otherwise: bb4];
    }

    bb48: {
        _79 = <<__A as MapAccess<'_>>::Error as _::_serde::de::Error>::duplicate_field(const "method") -> [return: bb49, unwind: bb144];
    }

    bb49: {
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _79);
        goto -> bb52;
    }

    bb50: {
        _80 = <<__A as MapAccess<'_>>::Error as _::_serde::de::Error>::duplicate_field(const "params") -> [return: bb51, unwind: bb144];
    }

    bb51: {
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _80);
        goto -> bb52;
    }

    bb52: {
        switchInt(_177) -> [0: bb53, otherwise: bb150];
    }

    bb53: {
        _177 = const false;
        goto -> bb135;
    }

    bb54: {
        _88 = <<__A as MapAccess<'_>>::Error as _::_serde::de::Error>::missing_field(const "params") -> [return: bb65, unwind: bb145];
    }

    bb55: {
        _83 = _::_serde::__private::de::missing_field::<'_, (std::string::String,), <__A as MapAccess<'_>>::Error>(const "params") -> [return: bb56, unwind: bb145];
    }

    bb56: {
        _0 = std::result::Result::<(std::string::String,), <__A as MapAccess<'_>>::Error>::map::<request::MethodRequest, fn((std::string::String,)) -> request::MethodRequest {request::MethodRequest::Submit}>(move _83, request::MethodRequest::Submit) -> [return: bb164, unwind: bb145];
    }

    bb57: {
        _84 = _::_serde::__private::de::missing_field::<'_, (std::option::Option<u64>,), <__A as MapAccess<'_>>::Error>(const "params") -> [return: bb58, unwind: bb145];
    }

    bb58: {
        _0 = std::result::Result::<(std::option::Option<u64>,), <__A as MapAccess<'_>>::Error>::map::<request::MethodRequest, fn((std::option::Option<u64>,)) -> request::MethodRequest {request::MethodRequest::GetMetadata}>(move _84, request::MethodRequest::GetMetadata) -> [return: bb165, unwind: bb145];
    }

    bb59: {
        _85 = _::_serde::__private::de::missing_field::<'_, [(); 0], <__A as MapAccess<'_>>::Error>(const "params") -> [return: bb60, unwind: bb145];
    }

    bb60: {
        _0 = std::result::Result::<[(); 0], <__A as MapAccess<'_>>::Error>::map::<request::MethodRequest, fn([(); 0]) -> request::MethodRequest {request::MethodRequest::GetCurrencies}>(move _85, request::MethodRequest::GetCurrencies) -> [return: bb166, unwind: bb145];
    }

    bb61: {
        _86 = _::_serde::__private::de::missing_field::<'_, [(); 0], <__A as MapAccess<'_>>::Error>(const "params") -> [return: bb62, unwind: bb145];
    }

    bb62: {
        _0 = std::result::Result::<[(); 0], <__A as MapAccess<'_>>::Error>::map::<request::MethodRequest, fn([(); 0]) -> request::MethodRequest {request::MethodRequest::GetNetworkStatus}>(move _86, request::MethodRequest::GetNetworkStatus) -> [return: bb167, unwind: bb145];
    }

    bb63: {
        _87 = _::_serde::__private::de::missing_field::<'_, (u64,), <__A as MapAccess<'_>>::Error>(const "params") -> [return: bb64, unwind: bb145];
    }

    bb64: {
        _0 = std::result::Result::<(u64,), <__A as MapAccess<'_>>::Error>::map::<request::MethodRequest, fn((u64,)) -> request::MethodRequest {request::MethodRequest::GetStateProof}>(move _87, request::MethodRequest::GetStateProof) -> [return: bb168, unwind: bb145];
    }

    bb65: {
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _88);
        goto -> bb135;
    }

    bb66: {
        _91 = &mut _2;
        _90 = <__A as MapAccess<'_>>::next_value::<_::_serde::__private::de::content::Content<'_>>(_91) -> [return: bb67, unwind: bb145];
    }

    bb67: {
        _92 = discriminant(_90);
        switchInt(move _92) -> [0: bb69, 1: bb68, otherwise: bb4];
    }

    bb68: {
        _94 = move ((_90 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _94);
        _179 = const false;
        goto -> bb141;
    }

    bb69: {
        _93 = move ((_90 as Ok).0: _::_serde::__private::de::content::Content<'_>);
        _179 = const true;
        _89 = move _93;
        _96 = std::option::Option::<TagOrContentField>::None;
        goto -> bb70;
    }

    bb70: {
        _98 = &mut _2;
        _99 = TagContentOtherFieldVisitor { tag: const "method", content: const "params" };
        _97 = <__A as MapAccess<'_>>::next_key_seed::<TagContentOtherFieldVisitor>(_98, move _99) -> [return: bb71, unwind: bb163];
    }

    bb71: {
        _100 = discriminant(_97);
        switchInt(move _100) -> [0: bb73, 1: bb72, otherwise: bb4];
    }

    bb72: {
        _102 = move ((_97 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _102);
        goto -> bb158;
    }

    bb73: {
        _101 = move ((_97 as Ok).0: std::option::Option<_::_serde::__private::de::content::TagContentOtherField>);
        _103 = discriminant(_101);
        switchInt(move _103) -> [1: bb74, otherwise: bb151];
    }

    bb74: {
        _104 = move ((_101 as Some).0: _::_serde::__private::de::content::TagContentOtherField);
        _105 = discriminant(_104);
        switchInt(move _105) -> [0: bb79, 1: bb75, 2: bb76, otherwise: bb4];
    }

    bb75: {
        _113 = TagOrContentField::Content;
        _112 = std::option::Option::<TagOrContentField>::Some(move _113);
        _96 = move _112;
        goto -> bb151;
    }

    bb76: {
        _107 = &mut _2;
        _106 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_107) -> [return: bb77, unwind: bb163];
    }

    bb77: {
        _108 = discriminant(_106);
        switchInt(move _108) -> [0: bb70, 1: bb78, otherwise: bb4];
    }

    bb78: {
        _109 = move ((_106 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _109);
        goto -> bb158;
    }

    bb79: {
        _111 = TagOrContentField::Tag;
        _110 = std::option::Option::<TagOrContentField>::Some(move _111);
        _96 = move _110;
        goto -> bb151;
    }

    bb80: {
        _175 = <<__A as MapAccess<'_>>::Error as _::_serde::de::Error>::missing_field(const "method") -> [return: bb131, unwind: bb163];
    }

    bb81: {
        _114 = discriminant(((_95 as Some).0: _::_serde::__private::de::content::TagOrContentField));
        switchInt(move _114) -> [0: bb82, 1: bb129, otherwise: bb4];
    }

    bb82: {
        _179 = const false;
        _117 = move _89;
        _116 = ContentDeserializer::<'_, <__A as MapAccess<'_>>::Error>::new(move _117) -> [return: bb83, unwind: bb163];
    }

    bb83: {
        _180 = const true;
        _121 = &mut _2;
        _120 = <__A as MapAccess<'_>>::next_value::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field>(_121) -> [return: bb84, unwind: bb161];
    }

    bb84: {
        _122 = discriminant(_120);
        switchInt(move _122) -> [0: bb86, 1: bb85, otherwise: bb4];
    }

    bb85: {
        _124 = move ((_120 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _124);
        goto -> bb137;
    }

    bb86: {
        _123 = move ((_120 as Ok).0: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field);
        _125 = discriminant(_123);
        switchInt(move _125) -> [0: bb88, 1: bb90, 2: bb92, 3: bb93, 4: bb94, 5: bb95, 6: bb96, 7: bb97, 8: bb99, 9: bb101, 10: bb103, 11: bb104, 12: bb105, 13: bb106, 14: bb107, 15: bb87, otherwise: bb4];
    }

    bb87: {
        _180 = const false;
        _146 = move _116;
        _119 = <ContentDeserializer<'_, <__A as MapAccess<'_>>::Error> as _::_serde::Deserializer<'_>>::deserialize_tuple::<<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>>(move _146, const 2_usize, const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb169, unwind: bb161];
    }

    bb88: {
        _180 = const false;
        _127 = move _116;
        _126 = <(std::string::String,) as Deserialize<'_>>::deserialize::<ContentDeserializer<'_, <__A as MapAccess<'_>>::Error>>(move _127) -> [return: bb89, unwind: bb161];
    }

    bb89: {
        _119 = std::result::Result::<(std::string::String,), <__A as MapAccess<'_>>::Error>::map::<request::MethodRequest, fn((std::string::String,)) -> request::MethodRequest {request::MethodRequest::Submit}>(move _126, request::MethodRequest::Submit) -> [return: bb170, unwind: bb161];
    }

    bb90: {
        _180 = const false;
        _129 = move _116;
        _128 = <(std::option::Option<u64>,) as Deserialize<'_>>::deserialize::<ContentDeserializer<'_, <__A as MapAccess<'_>>::Error>>(move _129) -> [return: bb91, unwind: bb161];
    }

    bb91: {
        _119 = std::result::Result::<(std::option::Option<u64>,), <__A as MapAccess<'_>>::Error>::map::<request::MethodRequest, fn((std::option::Option<u64>,)) -> request::MethodRequest {request::MethodRequest::GetMetadata}>(move _128, request::MethodRequest::GetMetadata) -> [return: bb171, unwind: bb161];
    }

    bb92: {
        _180 = const false;
        _130 = move _116;
        _119 = <ContentDeserializer<'_, <__A as MapAccess<'_>>::Error> as _::_serde::Deserializer<'_>>::deserialize_tuple::<<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>>(move _130, const 2_usize, const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb172, unwind: bb161];
    }

    bb93: {
        _180 = const false;
        _131 = move _116;
        _119 = <ContentDeserializer<'_, <__A as MapAccess<'_>>::Error> as _::_serde::Deserializer<'_>>::deserialize_tuple::<<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>>(move _131, const 3_usize, const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb173, unwind: bb161];
    }

    bb94: {
        _180 = const false;
        _132 = move _116;
        _119 = <ContentDeserializer<'_, <__A as MapAccess<'_>>::Error> as _::_serde::Deserializer<'_>>::deserialize_tuple::<<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>>(move _132, const 3_usize, const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb174, unwind: bb161];
    }

    bb95: {
        _180 = const false;
        _133 = move _116;
        _119 = <ContentDeserializer<'_, <__A as MapAccess<'_>>::Error> as _::_serde::Deserializer<'_>>::deserialize_tuple::<<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>>(move _133, const 4_usize, const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb175, unwind: bb161];
    }

    bb96: {
        _180 = const false;
        _134 = move _116;
        _119 = <ContentDeserializer<'_, <__A as MapAccess<'_>>::Error> as _::_serde::Deserializer<'_>>::deserialize_tuple::<<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>>(move _134, const 3_usize, const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb176, unwind: bb161];
    }

    bb97: {
        _180 = const false;
        _136 = move _116;
        _135 = <[(); 0] as Deserialize<'_>>::deserialize::<ContentDeserializer<'_, <__A as MapAccess<'_>>::Error>>(move _136) -> [return: bb98, unwind: bb161];
    }

    bb98: {
        _119 = std::result::Result::<[(); 0], <__A as MapAccess<'_>>::Error>::map::<request::MethodRequest, fn([(); 0]) -> request::MethodRequest {request::MethodRequest::GetCurrencies}>(move _135, request::MethodRequest::GetCurrencies) -> [return: bb177, unwind: bb161];
    }

    bb99: {
        _180 = const false;
        _138 = move _116;
        _137 = <[(); 0] as Deserialize<'_>>::deserialize::<ContentDeserializer<'_, <__A as MapAccess<'_>>::Error>>(move _138) -> [return: bb100, unwind: bb161];
    }

    bb100: {
        _119 = std::result::Result::<[(); 0], <__A as MapAccess<'_>>::Error>::map::<request::MethodRequest, fn([(); 0]) -> request::MethodRequest {request::MethodRequest::GetNetworkStatus}>(move _137, request::MethodRequest::GetNetworkStatus) -> [return: bb178, unwind: bb161];
    }

    bb101: {
        _180 = const false;
        _140 = move _116;
        _139 = <(u64,) as Deserialize<'_>>::deserialize::<ContentDeserializer<'_, <__A as MapAccess<'_>>::Error>>(move _140) -> [return: bb102, unwind: bb161];
    }

    bb102: {
        _119 = std::result::Result::<(u64,), <__A as MapAccess<'_>>::Error>::map::<request::MethodRequest, fn((u64,)) -> request::MethodRequest {request::MethodRequest::GetStateProof}>(move _139, request::MethodRequest::GetStateProof) -> [return: bb179, unwind: bb161];
    }

    bb103: {
        _180 = const false;
        _141 = move _116;
        _119 = <ContentDeserializer<'_, <__A as MapAccess<'_>>::Error> as _::_serde::Deserializer<'_>>::deserialize_tuple::<<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>>(move _141, const 2_usize, const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb180, unwind: bb161];
    }

    bb104: {
        _180 = const false;
        _142 = move _116;
        _119 = <ContentDeserializer<'_, <__A as MapAccess<'_>>::Error> as _::_serde::Deserializer<'_>>::deserialize_tuple::<<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>>(move _142, const 3_usize, const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb181, unwind: bb161];
    }

    bb105: {
        _180 = const false;
        _143 = move _116;
        _119 = <ContentDeserializer<'_, <__A as MapAccess<'_>>::Error> as _::_serde::Deserializer<'_>>::deserialize_tuple::<<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>>(move _143, const 3_usize, const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb182, unwind: bb161];
    }

    bb106: {
        _180 = const false;
        _144 = move _116;
        _119 = <ContentDeserializer<'_, <__A as MapAccess<'_>>::Error> as _::_serde::Deserializer<'_>>::deserialize_tuple::<<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>>(move _144, const 5_usize, const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb183, unwind: bb161];
    }

    bb107: {
        _180 = const false;
        _145 = move _116;
        _119 = <ContentDeserializer<'_, <__A as MapAccess<'_>>::Error> as _::_serde::Deserializer<'_>>::deserialize_tuple::<<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>>(move _145, const 3_usize, const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb184, unwind: bb161];
    }

    bb108: {
        _147 = discriminant(_119);
        switchInt(move _147) -> [0: bb110, 1: bb109, otherwise: bb4];
    }

    bb109: {
        _149 = move ((_119 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _149);
        goto -> bb137;
    }

    bb110: {
        _148 = move ((_119 as Ok).0: request::MethodRequest);
        _178 = const true;
        _118 = move _148;
        _151 = std::option::Option::<TagOrContentField>::None;
        goto -> bb111;
    }

    bb111: {
        _153 = &mut _2;
        _154 = TagContentOtherFieldVisitor { tag: const "method", content: const "params" };
        _152 = <__A as MapAccess<'_>>::next_key_seed::<TagContentOtherFieldVisitor>(_153, move _154) -> [return: bb112, unwind: bb143];
    }

    bb112: {
        _155 = discriminant(_152);
        switchInt(move _155) -> [0: bb114, 1: bb113, otherwise: bb4];
    }

    bb113: {
        _157 = move ((_152 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _157);
        goto -> bb155;
    }

    bb114: {
        _156 = move ((_152 as Ok).0: std::option::Option<_::_serde::__private::de::content::TagContentOtherField>);
        _158 = discriminant(_156);
        switchInt(move _158) -> [1: bb115, otherwise: bb152];
    }

    bb115: {
        _159 = move ((_156 as Some).0: _::_serde::__private::de::content::TagContentOtherField);
        _160 = discriminant(_159);
        switchInt(move _160) -> [0: bb120, 1: bb116, 2: bb117, otherwise: bb4];
    }

    bb116: {
        _168 = TagOrContentField::Content;
        _167 = std::option::Option::<TagOrContentField>::Some(move _168);
        _151 = move _167;
        goto -> bb152;
    }

    bb117: {
        _162 = &mut _2;
        _161 = <__A as MapAccess<'_>>::next_value::<IgnoredAny>(_162) -> [return: bb118, unwind: bb143];
    }

    bb118: {
        _163 = discriminant(_161);
        switchInt(move _163) -> [0: bb111, 1: bb119, otherwise: bb4];
    }

    bb119: {
        _164 = move ((_161 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _164);
        goto -> bb155;
    }

    bb120: {
        _166 = TagOrContentField::Tag;
        _165 = std::option::Option::<TagOrContentField>::Some(move _166);
        _151 = move _165;
        goto -> bb152;
    }

    bb121: {
        _178 = const false;
        _173 = move _118;
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Ok(move _173);
        goto -> bb127;
    }

    bb122: {
        _169 = discriminant(((_150 as Some).0: _::_serde::__private::de::content::TagOrContentField));
        switchInt(move _169) -> [0: bb123, 1: bb125, otherwise: bb4];
    }

    bb123: {
        _171 = <<__A as MapAccess<'_>>::Error as _::_serde::de::Error>::duplicate_field(const "method") -> [return: bb124, unwind: bb143];
    }

    bb124: {
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _171);
        goto -> bb127;
    }

    bb125: {
        _172 = <<__A as MapAccess<'_>>::Error as _::_serde::de::Error>::duplicate_field(const "params") -> [return: bb126, unwind: bb143];
    }

    bb126: {
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _172);
        goto -> bb127;
    }

    bb127: {
        switchInt(_178) -> [0: bb128, otherwise: bb153];
    }

    bb128: {
        _178 = const false;
        _180 = const false;
        goto -> bb132;
    }

    bb129: {
        _174 = <<__A as MapAccess<'_>>::Error as _::_serde::de::Error>::duplicate_field(const "params") -> [return: bb130, unwind: bb163];
    }

    bb130: {
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _174);
        goto -> bb132;
    }

    bb131: {
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _175);
        goto -> bb132;
    }

    bb132: {
        switchInt(_179) -> [0: bb133, otherwise: bb154];
    }

    bb133: {
        _179 = const false;
        goto -> bb135;
    }

    bb134: {
        _0 = std::result::Result::<request::MethodRequest, <__A as MapAccess<'_>>::Error>::Err(move _176);
        goto -> bb135;
    }

    bb135: {
        drop(_2) -> [return: bb142, unwind continue];
    }

    bb136: {
        _178 = const false;
        _180 = const false;
        goto -> bb158;
    }

    bb137: {
        _178 = const false;
        switchInt(_180) -> [0: bb138, otherwise: bb156];
    }

    bb138: {
        _180 = const false;
        goto -> bb158;
    }

    bb139: {
        _179 = const false;
        goto -> bb141;
    }

    bb140: {
        _177 = const false;
        goto -> bb141;
    }

    bb141: {
        drop(_2) -> [return: bb142, unwind continue];
    }

    bb142: {
        return;
    }

    bb143 (cleanup): {
        drop(_118) -> [return: bb161, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        drop(_51) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb145 (cleanup): {
        drop(_2) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        resume;
    }

    bb147: {
        _3 = move _4;
        _23 = discriminant(_3);
        switchInt(move _23) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb148: {
        _29 = move _30;
        _49 = discriminant(_29);
        switchInt(move _49) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb149: {
        _58 = move _59;
        _78 = discriminant(_58);
        switchInt(move _78) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb150: {
        drop(_51) -> [return: bb53, unwind: bb145];
    }

    bb151: {
        _95 = move _96;
        _115 = discriminant(_95);
        switchInt(move _115) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb152: {
        _150 = move _151;
        _170 = discriminant(_150);
        switchInt(move _170) -> [0: bb121, 1: bb122, otherwise: bb4];
    }

    bb153: {
        drop(_118) -> [return: bb128, unwind: bb161];
    }

    bb154: {
        drop(_89) -> [return: bb133, unwind: bb145];
    }

    bb155: {
        drop(_118) -> [return: bb136, unwind: bb161];
    }

    bb156: {
        drop(_116) -> [return: bb138, unwind: bb163];
    }

    bb157: {
        drop(_89) -> [return: bb139, unwind: bb145];
    }

    bb158: {
        switchInt(_179) -> [0: bb139, otherwise: bb157];
    }

    bb159: {
        drop(_51) -> [return: bb140, unwind: bb145];
    }

    bb160 (cleanup): {
        drop(_116) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        switchInt(_180) -> [0: bb163, otherwise: bb160];
    }

    bb162 (cleanup): {
        drop(_89) -> [return: bb145, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        switchInt(_179) -> [0: bb145, otherwise: bb162];
    }

    bb164: {
        goto -> bb135;
    }

    bb165: {
        goto -> bb135;
    }

    bb166: {
        goto -> bb135;
    }

    bb167: {
        goto -> bb135;
    }

    bb168: {
        goto -> bb135;
    }

    bb169: {
        goto -> bb108;
    }

    bb170: {
        goto -> bb108;
    }

    bb171: {
        goto -> bb108;
    }

    bb172: {
        goto -> bb108;
    }

    bb173: {
        goto -> bb108;
    }

    bb174: {
        goto -> bb108;
    }

    bb175: {
        goto -> bb108;
    }

    bb176: {
        goto -> bb108;
    }

    bb177: {
        goto -> bb108;
    }

    bb178: {
        goto -> bb108;
    }

    bb179: {
        goto -> bb108;
    }

    bb180: {
        goto -> bb108;
    }

    bb181: {
        goto -> bb108;
    }

    bb182: {
        goto -> bb108;
    }

    bb183: {
        goto -> bb108;
    }

    bb184: {
        goto -> bb108;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetAccount";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::PeerId>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::PeerId>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::PeerId;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: request::MethodRequest;
    let mut _22: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<std::option::Option<u64>>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: std::option::Option<u64>;
        let mut _23: &&str;
        scope 5 {
            debug __field1 => _18;
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<AccountAddress>(_4) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb14;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::PeerId>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _22 = const _;
        _11 = _22 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb16];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::PeerId);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_13) -> [return: bb8, unwind: bb16];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb14;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb14;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _23 = const _;
        _20 = _23 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb16];
    }

    bb12: {
        _18 = ((_15 as Some).0: std::option::Option<u64>);
        _21 = request::MethodRequest::GetAccount(_9, _18);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _21);
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb14;
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccount with 2 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccount with 2 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetTransactions";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<u64>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: u64;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<bool>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: request::MethodRequest;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<bool>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: bool;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<u64>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<u64>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: u64);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<bool>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<bool>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: bool);
        _30 = request::MethodRequest::GetTransactions(_9, _18, _27);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetTransactions with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetTransactions with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetTransactions with 3 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetAccountTransaction";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::PeerId>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::PeerId>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::PeerId;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<bool>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: request::MethodRequest;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<bool>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: bool;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<AccountAddress>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::PeerId>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::PeerId);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<bool>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<bool>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: bool);
        _30 = request::MethodRequest::GetAccountTransaction(_9, _18, _27);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransaction with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransaction with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransaction with 3 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetAccountTransactions";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::PeerId>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::PeerId>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::PeerId;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: std::result::Result<std::option::Option<bool>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _31: &mut __A;
    let mut _32: isize;
    let mut _35: isize;
    let mut _37: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _38: &dyn _::_serde::de::Expected;
    let mut _39: request::MethodRequest;
    let mut _40: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _41: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<u64>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: u64;
            let mut _42: &&str;
            scope 9 {
                debug __field2 => _27;
                let _33: std::option::Option<bool>;
                let _34: <__A as _::_serde::de::SeqAccess<'_>>::Error;
                let _36: bool;
                let mut _43: &&str;
                scope 13 {
                    debug __field3 => _36;
                }
                scope 14 {
                    debug __val => _33;
                }
                scope 15 {
                    debug __err => _34;
                }
                scope 16 {
                    debug __value => _36;
                }
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<AccountAddress>(_4) -> [return: bb1, unwind: bb28];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb26;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::PeerId>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _40 = const _;
        _11 = _40 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb28];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::PeerId);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb28];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb26;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb26;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _41 = const _;
        _20 = _41 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb28];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<u64>(_22) -> [return: bb14, unwind: bb28];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb26;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb26;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<u64>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _42 = const _;
        _29 = _42 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb28];
    }

    bb18: {
        _27 = ((_24 as Some).0: u64);
        _31 = &mut _2;
        _30 = <__A as SeqAccess<'_>>::next_element::<bool>(_31) -> [return: bb20, unwind: bb28];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb26;
    }

    bb20: {
        _32 = discriminant(_30);
        switchInt(move _32) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _34 = move ((_30 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _34);
        goto -> bb26;
    }

    bb22: {
        _33 = ((_30 as Ok).0: std::option::Option<bool>);
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _43 = const _;
        _38 = _43 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _37 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 3_usize, move _38) -> [return: bb25, unwind: bb28];
    }

    bb24: {
        _36 = ((_33 as Some).0: bool);
        _39 = request::MethodRequest::GetAccountTransactions(_9, _18, _27, _36);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _39);
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb25: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _37);
        goto -> bb26;
    }

    bb26: {
        drop(_2) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_2) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactions with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactions with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactions with 4 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactions with 4 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetEvents";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::event::EventKey>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::event::EventKey>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::event::EventKey;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: request::MethodRequest;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<u64>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: u64;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<EventKey>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::event::EventKey>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::event::EventKey);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<u64>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<u64>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: u64);
        _30 = request::MethodRequest::GetEvents(_9, _18, _27);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEvents with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEvents with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEvents with 3 elements";
        _0 = &_1;
        return;
    }
}

request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetAccumulatorConsistencyProof";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<std::option::Option<u64>>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: std::option::Option<u64>;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: request::MethodRequest;
    let mut _22: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<std::option::Option<u64>>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: std::option::Option<u64>;
        let mut _23: &&str;
        scope 5 {
            debug __field1 => _18;
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_4) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb14;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _22 = const _;
        _11 = _22 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb16];
    }

    bb6: {
        _9 = ((_6 as Some).0: std::option::Option<u64>);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_13) -> [return: bb8, unwind: bb16];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb14;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb14;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _23 = const _;
        _20 = _23 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb16];
    }

    bb12: {
        _18 = ((_15 as Some).0: std::option::Option<u64>);
        _21 = request::MethodRequest::GetAccumulatorConsistencyProof(_9, _18);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _21);
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb14;
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccumulatorConsistencyProof with 2 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccumulatorConsistencyProof with 2 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetAccountStateWithProof";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::PeerId>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::PeerId>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::PeerId;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: request::MethodRequest;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<std::option::Option<u64>>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: std::option::Option<u64>;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<std::option::Option<u64>>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: std::option::Option<u64>;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<AccountAddress>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::PeerId>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::PeerId);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: std::option::Option<u64>);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: std::option::Option<u64>);
        _30 = request::MethodRequest::GetAccountStateWithProof(_9, _18, _27);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountStateWithProof with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountStateWithProof with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountStateWithProof with 3 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetTransactionsWithProofs";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<u64>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: u64;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<bool>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: request::MethodRequest;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<bool>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: bool;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<u64>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<u64>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: u64);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<bool>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<bool>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: bool);
        _30 = request::MethodRequest::GetTransactionsWithProofs(_9, _18, _27);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetTransactionsWithProofs with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetTransactionsWithProofs with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetTransactionsWithProofs with 3 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetAccountTransactionsWithProofs";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::PeerId>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::PeerId>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::PeerId;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: std::result::Result<std::option::Option<bool>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _31: &mut __A;
    let mut _32: isize;
    let mut _35: isize;
    let mut _37: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _38: &dyn _::_serde::de::Expected;
    let mut _39: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _40: &mut __A;
    let mut _41: isize;
    let mut _44: isize;
    let mut _46: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _47: &dyn _::_serde::de::Expected;
    let mut _48: request::MethodRequest;
    let mut _49: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _50: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<u64>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: u64;
            let mut _51: &&str;
            scope 9 {
                debug __field2 => _27;
                let _33: std::option::Option<bool>;
                let _34: <__A as _::_serde::de::SeqAccess<'_>>::Error;
                let _36: bool;
                let mut _52: &&str;
                scope 13 {
                    debug __field3 => _36;
                    let _42: std::option::Option<std::option::Option<u64>>;
                    let _43: <__A as _::_serde::de::SeqAccess<'_>>::Error;
                    let _45: std::option::Option<u64>;
                    let mut _53: &&str;
                    scope 17 {
                        debug __field4 => _45;
                    }
                    scope 18 {
                        debug __val => _42;
                    }
                    scope 19 {
                        debug __err => _43;
                    }
                    scope 20 {
                        debug __value => _45;
                    }
                }
                scope 14 {
                    debug __val => _33;
                }
                scope 15 {
                    debug __err => _34;
                }
                scope 16 {
                    debug __value => _36;
                }
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<AccountAddress>(_4) -> [return: bb1, unwind: bb34];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb32;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::PeerId>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _49 = const _;
        _11 = _49 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb34];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::PeerId);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb34];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb32;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb32;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _50 = const _;
        _20 = _50 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb34];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<u64>(_22) -> [return: bb14, unwind: bb34];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb32;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb32;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<u64>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _51 = const _;
        _29 = _51 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb34];
    }

    bb18: {
        _27 = ((_24 as Some).0: u64);
        _31 = &mut _2;
        _30 = <__A as SeqAccess<'_>>::next_element::<bool>(_31) -> [return: bb20, unwind: bb34];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb32;
    }

    bb20: {
        _32 = discriminant(_30);
        switchInt(move _32) -> [0: bb22, 1: bb21, otherwise: bb3];
    }

    bb21: {
        _34 = move ((_30 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _34);
        goto -> bb32;
    }

    bb22: {
        _33 = ((_30 as Ok).0: std::option::Option<bool>);
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        _52 = const _;
        _38 = _52 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _37 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 3_usize, move _38) -> [return: bb25, unwind: bb34];
    }

    bb24: {
        _36 = ((_33 as Some).0: bool);
        _40 = &mut _2;
        _39 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_40) -> [return: bb26, unwind: bb34];
    }

    bb25: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _37);
        goto -> bb32;
    }

    bb26: {
        _41 = discriminant(_39);
        switchInt(move _41) -> [0: bb28, 1: bb27, otherwise: bb3];
    }

    bb27: {
        _43 = move ((_39 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _43);
        goto -> bb32;
    }

    bb28: {
        _42 = ((_39 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _44 = discriminant(_42);
        switchInt(move _44) -> [0: bb29, 1: bb30, otherwise: bb3];
    }

    bb29: {
        _53 = const _;
        _47 = _53 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _46 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 4_usize, move _47) -> [return: bb31, unwind: bb34];
    }

    bb30: {
        _45 = ((_42 as Some).0: std::option::Option<u64>);
        _48 = request::MethodRequest::GetAccountTransactionsWithProofs(_9, _18, _27, _36, _45);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _48);
        drop(_2) -> [return: bb33, unwind continue];
    }

    bb31: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _46);
        goto -> bb32;
    }

    bb32: {
        drop(_2) -> [return: bb33, unwind continue];
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_2) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactionsWithProofs with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactionsWithProofs with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactionsWithProofs with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[3] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactionsWithProofs with 5 elements";
        _0 = &_1;
        return;
    }
}

promoted[4] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetAccountTransactionsWithProofs with 5 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetEventsWithProofs";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::event::EventKey>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::event::EventKey>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::event::EventKey;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: std::result::Result<std::option::Option<u64>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _22: &mut __A;
    let mut _23: isize;
    let mut _26: isize;
    let mut _28: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _29: &dyn _::_serde::de::Expected;
    let mut _30: request::MethodRequest;
    let mut _31: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<u64>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: u64;
        let mut _32: &&str;
        scope 5 {
            debug __field1 => _18;
            let _24: std::option::Option<u64>;
            let _25: <__A as _::_serde::de::SeqAccess<'_>>::Error;
            let _27: u64;
            let mut _33: &&str;
            scope 9 {
                debug __field2 => _27;
            }
            scope 10 {
                debug __val => _24;
            }
            scope 11 {
                debug __err => _25;
            }
            scope 12 {
                debug __value => _27;
            }
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<EventKey>(_4) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb20;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::event::EventKey>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _31 = const _;
        _11 = _31 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb22];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::event::EventKey);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<u64>(_13) -> [return: bb8, unwind: bb22];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb20;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb20;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<u64>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _32 = const _;
        _20 = _32 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb22];
    }

    bb12: {
        _18 = ((_15 as Some).0: u64);
        _22 = &mut _2;
        _21 = <__A as SeqAccess<'_>>::next_element::<u64>(_22) -> [return: bb14, unwind: bb22];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb20;
    }

    bb14: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb16, 1: bb15, otherwise: bb3];
    }

    bb15: {
        _25 = move ((_21 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _25);
        goto -> bb20;
    }

    bb16: {
        _24 = ((_21 as Ok).0: std::option::Option<u64>);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        _33 = const _;
        _29 = _33 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _28 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 2_usize, move _29) -> [return: bb19, unwind: bb22];
    }

    bb18: {
        _27 = ((_24 as Some).0: u64);
        _30 = request::MethodRequest::GetEventsWithProofs(_9, _18, _27);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _30);
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb19: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _28);
        goto -> bb20;
    }

    bb20: {
        drop(_2) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }

    bb22 (cleanup): {
        drop(_2) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEventsWithProofs with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEventsWithProofs with 3 elements";
        _0 = &_1;
        return;
    }
}

promoted[2] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEventsWithProofs with 3 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::expecting(_1: &<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "tuple variant MethodRequest::GetEventByVersionWithProof";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const <request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'de> as Visitor<'de>>::visit_map::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<diem_types::event::EventKey>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<diem_types::event::EventKey>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: diem_types::event::EventKey;
    let mut _10: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _11: &dyn _::_serde::de::Expected;
    let mut _12: std::result::Result<std::option::Option<std::option::Option<u64>>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _13: &mut __A;
    let mut _14: isize;
    let mut _17: isize;
    let mut _19: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _20: &dyn _::_serde::de::Expected;
    let mut _21: request::MethodRequest;
    let mut _22: &&str;
    scope 1 {
        debug __field0 => _9;
        let _15: std::option::Option<std::option::Option<u64>>;
        let _16: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _18: std::option::Option<u64>;
        let mut _23: &&str;
        scope 5 {
            debug __field1 => _18;
        }
        scope 6 {
            debug __val => _15;
        }
        scope 7 {
            debug __err => _16;
        }
        scope 8 {
            debug __value => _18;
        }
    }
    scope 2 {
        debug __val => _6;
    }
    scope 3 {
        debug __err => _7;
    }
    scope 4 {
        debug __value => _9;
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<EventKey>(_4) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb14;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = ((_3 as Ok).0: std::option::Option<diem_types::event::EventKey>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _22 = const _;
        _11 = _22 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _10 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _11) -> [return: bb7, unwind: bb16];
    }

    bb6: {
        _9 = ((_6 as Some).0: diem_types::event::EventKey);
        _13 = &mut _2;
        _12 = <__A as SeqAccess<'_>>::next_element::<std::option::Option<u64>>(_13) -> [return: bb8, unwind: bb16];
    }

    bb7: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _10);
        goto -> bb14;
    }

    bb8: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _16 = move ((_12 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _16);
        goto -> bb14;
    }

    bb10: {
        _15 = ((_12 as Ok).0: std::option::Option<std::option::Option<u64>>);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb11, 1: bb12, otherwise: bb3];
    }

    bb11: {
        _23 = const _;
        _20 = _23 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _20) -> [return: bb13, unwind: bb16];
    }

    bb12: {
        _18 = ((_15 as Some).0: std::option::Option<u64>);
        _21 = request::MethodRequest::GetEventByVersionWithProof(_9, _18);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _21);
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _19);
        goto -> bb14;
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }
}

promoted[0] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEventByVersionWithProof with 2 elements";
        _0 = &_1;
        return;
    }
}

promoted[1] in request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_map::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "tuple variant MethodRequest::GetEventByVersionWithProof with 2 elements";
        _0 = &_1;
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:17: 11:28>::deserialize::<impl at sdk/client/src/request.rs:11:17: 11:28>::visit_seq(_1: request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::MethodRequest, <__A as SeqAccess<'_>>::Error> {
    debug self => const request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::MethodRequest>, lifetime: PhantomData::<&()> }};
    debug __seq => _2;
    let mut _0: std::result::Result<request::MethodRequest, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _3: std::result::Result<std::option::Option<request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _4: &mut __A;
    let mut _5: isize;
    let _6: std::option::Option<request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field>;
    let _7: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _8: isize;
    let _9: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field;
    let mut _10: std::result::Result<std::option::Option<request::MethodRequest>, <__A as _::_serde::de::SeqAccess<'_>>::Error>;
    let mut _11: &mut __A;
    let mut _12: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Seed<'_>;
    let mut _13: isize;
    let mut _16: isize;
    let mut _18: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _19: &dyn _::_serde::de::Expected;
    let _20: &request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'_>;
    let mut _21: <__A as _::_serde::de::SeqAccess<'_>>::Error;
    let mut _22: &dyn _::_serde::de::Expected;
    let _23: &request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Visitor<'_>;
    scope 1 {
        debug __val => _6;
    }
    scope 2 {
        debug __err => _7;
    }
    scope 3 {
        debug __field => _9;
        let _14: std::option::Option<request::MethodRequest>;
        let _15: <__A as _::_serde::de::SeqAccess<'_>>::Error;
        let _17: request::MethodRequest;
        scope 4 {
            debug __val => _14;
        }
        scope 5 {
            debug __err => _15;
        }
        scope 6 {
            debug __ret => _17;
        }
    }

    bb0: {
        _4 = &mut _2;
        _3 = <__A as SeqAccess<'_>>::next_element::<request::_::<impl Deserialize<'de> for request::MethodRequest>::deserialize::__Field>(_4) -> [return: bb1, unwind: bb15];
    }

    bb1: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _7 = move ((_3 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _7);
        goto -> bb18;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _6 = move ((_3 as Ok).0: std::option::Option<request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field>);
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb5, 1: bb6, otherwise: bb3];
    }

    bb5: {
        _23 = &_1;
        _22 = _23 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _21 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 0_usize, move _22) -> [return: bb13, unwind: bb15];
    }

    bb6: {
        _9 = move ((_6 as Some).0: request::_::<impl _::_serde::Deserialize<'de> for request::MethodRequest>::deserialize::__Field);
        _11 = &mut _2;
        _12 = __Seed::<'_> { field: move _9, marker: const PhantomData::<request::MethodRequest>, lifetime: const PhantomData::<&()> };
        _10 = <__A as SeqAccess<'_>>::next_element_seed::<__Seed<'_>>(_11, move _12) -> [return: bb7, unwind: bb15];
    }

    bb7: {
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _15 = move ((_10 as Err).0: <__A as _::_serde::de::SeqAccess<'_>>::Error);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _15);
        goto -> bb18;
    }

    bb9: {
        _14 = move ((_10 as Ok).0: std::option::Option<request::MethodRequest>);
        _16 = discriminant(_14);
        switchInt(move _16) -> [0: bb10, 1: bb11, otherwise: bb3];
    }

    bb10: {
        _20 = &_1;
        _19 = _20 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _18 = <<__A as SeqAccess<'_>>::Error as _::_serde::de::Error>::invalid_length(const 1_usize, move _19) -> [return: bb12, unwind: bb15];
    }

    bb11: {
        _17 = move ((_14 as Some).0: request::MethodRequest);
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Ok(move _17);
        goto -> bb17;
    }

    bb12: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _18);
        goto -> bb17;
    }

    bb13: {
        _0 = std::result::Result::<request::MethodRequest, <__A as SeqAccess<'_>>::Error>::Err(move _21);
        goto -> bb17;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_2) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        drop(_2) -> [return: bb14, unwind continue];
    }

    bb18: {
        drop(_2) -> [return: bb14, unwind continue];
    }
}

const FIELDS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 2];
    let _2: &[&str; 2];
    let _3: [&str; 2];
    let mut _4: &[&str; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in FIELDS: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "method", const "params"];
        _0 = &_1;
        return;
    }
}

const request::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize(_1: &request::MethodRequest, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _3: isize;
    let _4: &(std::string::String,);
    let mut _6: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _7: isize;
    let mut _10: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _11: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _12: &str;
    let mut _13: isize;
    let mut _15: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _16: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let mut _17: isize;
    let mut _19: <__S as _::_serde::Serializer>::SerializeStruct;
    let _20: &(std::option::Option<u64>,);
    let mut _22: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _23: isize;
    let mut _26: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _27: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _28: &str;
    let mut _29: isize;
    let mut _31: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _32: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let mut _33: isize;
    let mut _35: <__S as _::_serde::Serializer>::SerializeStruct;
    let _36: &diem_types::PeerId;
    let _37: &std::option::Option<u64>;
    let mut _39: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _40: isize;
    let mut _43: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _44: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _45: &str;
    let mut _46: isize;
    let mut _48: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _49: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _50: &request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let _51: request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let mut _52: (&diem_types::PeerId, &std::option::Option<u64>);
    let mut _53: isize;
    let mut _55: <__S as _::_serde::Serializer>::SerializeStruct;
    let _56: &u64;
    let _57: &u64;
    let _58: &bool;
    let mut _60: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _61: isize;
    let mut _64: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _65: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _66: &str;
    let mut _67: isize;
    let mut _69: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _70: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _71: &request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let _72: request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let mut _73: (&u64, &u64, &bool);
    let mut _74: isize;
    let mut _76: <__S as _::_serde::Serializer>::SerializeStruct;
    let _77: &diem_types::PeerId;
    let _78: &u64;
    let _79: &bool;
    let mut _81: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _82: isize;
    let mut _85: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _86: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _87: &str;
    let mut _88: isize;
    let mut _90: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _91: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _92: &request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let _93: request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let mut _94: (&diem_types::PeerId, &u64, &bool);
    let mut _95: isize;
    let mut _97: <__S as _::_serde::Serializer>::SerializeStruct;
    let _98: &diem_types::PeerId;
    let _99: &u64;
    let _100: &u64;
    let _101: &bool;
    let mut _103: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _104: isize;
    let mut _107: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _108: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _109: &str;
    let mut _110: isize;
    let mut _112: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _113: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _114: &request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let _115: request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let mut _116: (&diem_types::PeerId, &u64, &u64, &bool);
    let mut _117: isize;
    let mut _119: <__S as _::_serde::Serializer>::SerializeStruct;
    let _120: &diem_types::event::EventKey;
    let _121: &u64;
    let _122: &u64;
    let mut _124: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _125: isize;
    let mut _128: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _129: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _130: &str;
    let mut _131: isize;
    let mut _133: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _134: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _135: &request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let _136: request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let mut _137: (&diem_types::event::EventKey, &u64, &u64);
    let mut _138: isize;
    let mut _140: <__S as _::_serde::Serializer>::SerializeStruct;
    let _141: &[(); 0];
    let mut _143: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _144: isize;
    let mut _147: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _148: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _149: &str;
    let mut _150: isize;
    let mut _152: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _153: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let mut _154: isize;
    let mut _156: <__S as _::_serde::Serializer>::SerializeStruct;
    let _157: &[(); 0];
    let mut _159: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _160: isize;
    let mut _163: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _164: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _165: &str;
    let mut _166: isize;
    let mut _168: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _169: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let mut _170: isize;
    let mut _172: <__S as _::_serde::Serializer>::SerializeStruct;
    let _173: &(u64,);
    let mut _175: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _176: isize;
    let mut _179: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _180: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _181: &str;
    let mut _182: isize;
    let mut _184: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _185: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let mut _186: isize;
    let mut _188: <__S as _::_serde::Serializer>::SerializeStruct;
    let _189: &std::option::Option<u64>;
    let _190: &std::option::Option<u64>;
    let mut _192: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _193: isize;
    let mut _196: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _197: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _198: &str;
    let mut _199: isize;
    let mut _201: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _202: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _203: &request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let _204: request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let mut _205: (&std::option::Option<u64>, &std::option::Option<u64>);
    let mut _206: isize;
    let mut _208: <__S as _::_serde::Serializer>::SerializeStruct;
    let _209: &diem_types::PeerId;
    let _210: &std::option::Option<u64>;
    let _211: &std::option::Option<u64>;
    let mut _213: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _214: isize;
    let mut _217: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _218: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _219: &str;
    let mut _220: isize;
    let mut _222: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _223: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _224: &request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let _225: request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let mut _226: (&diem_types::PeerId, &std::option::Option<u64>, &std::option::Option<u64>);
    let mut _227: isize;
    let mut _229: <__S as _::_serde::Serializer>::SerializeStruct;
    let _230: &u64;
    let _231: &u64;
    let _232: &bool;
    let mut _234: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _235: isize;
    let mut _238: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _239: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _240: &str;
    let mut _241: isize;
    let mut _243: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _244: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _245: &request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let _246: request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let mut _247: (&u64, &u64, &bool);
    let mut _248: isize;
    let mut _250: <__S as _::_serde::Serializer>::SerializeStruct;
    let _251: &diem_types::PeerId;
    let _252: &u64;
    let _253: &u64;
    let _254: &bool;
    let _255: &std::option::Option<u64>;
    let mut _257: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _258: isize;
    let mut _261: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _262: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _263: &str;
    let mut _264: isize;
    let mut _266: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _267: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _268: &request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let _269: request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let mut _270: (&diem_types::PeerId, &u64, &u64, &bool, &std::option::Option<u64>);
    let mut _271: isize;
    let mut _273: <__S as _::_serde::Serializer>::SerializeStruct;
    let _274: &diem_types::event::EventKey;
    let _275: &u64;
    let _276: &u64;
    let mut _278: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _279: isize;
    let mut _282: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _283: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _284: &str;
    let mut _285: isize;
    let mut _287: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _288: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _289: &request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let _290: request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let mut _291: (&diem_types::event::EventKey, &u64, &u64);
    let mut _292: isize;
    let mut _294: <__S as _::_serde::Serializer>::SerializeStruct;
    let _295: &diem_types::event::EventKey;
    let _296: &std::option::Option<u64>;
    let mut _298: std::result::Result<<__S as _::_serde::Serializer>::SerializeStruct, <__S as _::_serde::Serializer>::Error>;
    let mut _299: isize;
    let mut _302: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _303: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _304: &str;
    let mut _305: isize;
    let mut _307: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _308: &mut <__S as _::_serde::Serializer>::SerializeStruct;
    let _309: &request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let _310: request::_::<impl _::_serde::Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>;
    let mut _311: (&diem_types::event::EventKey, &std::option::Option<u64>);
    let mut _312: isize;
    let mut _314: <__S as _::_serde::Serializer>::SerializeStruct;
    let mut _315: bool;
    let mut _316: bool;
    let mut _317: bool;
    let mut _318: bool;
    let mut _319: bool;
    let mut _320: bool;
    let mut _321: bool;
    let mut _322: bool;
    let mut _323: bool;
    let mut _324: bool;
    let mut _325: bool;
    let mut _326: bool;
    let mut _327: bool;
    let mut _328: bool;
    let mut _329: bool;
    let mut _330: bool;
    scope 1 {
        debug __field0 => _4;
        let mut _5: <__S as _::_serde::Serializer>::SerializeStruct;
        let _8: <__S as _::_serde::Serializer>::SerializeStruct;
        let _9: <__S as _::_serde::Serializer>::Error;
        scope 2 {
            debug __struct => _5;
            let _14: <__S as _::_serde::Serializer>::Error;
            let _18: <__S as _::_serde::Serializer>::Error;
            scope 5 {
                debug __val => const ();
            }
            scope 6 {
                debug __err => _14;
            }
            scope 7 {
                debug __val => const ();
            }
            scope 8 {
                debug __err => _18;
            }
        }
        scope 3 {
            debug __val => _8;
        }
        scope 4 {
            debug __err => _9;
        }
    }
    scope 9 {
        debug __field0 => _20;
        let mut _21: <__S as _::_serde::Serializer>::SerializeStruct;
        let _24: <__S as _::_serde::Serializer>::SerializeStruct;
        let _25: <__S as _::_serde::Serializer>::Error;
        scope 10 {
            debug __struct => _21;
            let _30: <__S as _::_serde::Serializer>::Error;
            let _34: <__S as _::_serde::Serializer>::Error;
            scope 13 {
                debug __val => const ();
            }
            scope 14 {
                debug __err => _30;
            }
            scope 15 {
                debug __val => const ();
            }
            scope 16 {
                debug __err => _34;
            }
        }
        scope 11 {
            debug __val => _24;
        }
        scope 12 {
            debug __err => _25;
        }
    }
    scope 17 {
        debug __field0 => _36;
        debug __field1 => _37;
        let mut _38: <__S as _::_serde::Serializer>::SerializeStruct;
        let _41: <__S as _::_serde::Serializer>::SerializeStruct;
        let _42: <__S as _::_serde::Serializer>::Error;
        scope 18 {
            debug __struct => _38;
            let _47: <__S as _::_serde::Serializer>::Error;
            let _54: <__S as _::_serde::Serializer>::Error;
            scope 21 {
                debug __val => const ();
            }
            scope 22 {
                debug __err => _47;
            }
            scope 23 {
                debug __val => const ();
            }
            scope 24 {
                debug __err => _54;
            }
        }
        scope 19 {
            debug __val => _41;
        }
        scope 20 {
            debug __err => _42;
        }
    }
    scope 25 {
        debug __field0 => _56;
        debug __field1 => _57;
        debug __field2 => _58;
        let mut _59: <__S as _::_serde::Serializer>::SerializeStruct;
        let _62: <__S as _::_serde::Serializer>::SerializeStruct;
        let _63: <__S as _::_serde::Serializer>::Error;
        scope 26 {
            debug __struct => _59;
            let _68: <__S as _::_serde::Serializer>::Error;
            let _75: <__S as _::_serde::Serializer>::Error;
            scope 29 {
                debug __val => const ();
            }
            scope 30 {
                debug __err => _68;
            }
            scope 31 {
                debug __val => const ();
            }
            scope 32 {
                debug __err => _75;
            }
        }
        scope 27 {
            debug __val => _62;
        }
        scope 28 {
            debug __err => _63;
        }
    }
    scope 33 {
        debug __field0 => _77;
        debug __field1 => _78;
        debug __field2 => _79;
        let mut _80: <__S as _::_serde::Serializer>::SerializeStruct;
        let _83: <__S as _::_serde::Serializer>::SerializeStruct;
        let _84: <__S as _::_serde::Serializer>::Error;
        scope 34 {
            debug __struct => _80;
            let _89: <__S as _::_serde::Serializer>::Error;
            let _96: <__S as _::_serde::Serializer>::Error;
            scope 37 {
                debug __val => const ();
            }
            scope 38 {
                debug __err => _89;
            }
            scope 39 {
                debug __val => const ();
            }
            scope 40 {
                debug __err => _96;
            }
        }
        scope 35 {
            debug __val => _83;
        }
        scope 36 {
            debug __err => _84;
        }
    }
    scope 41 {
        debug __field0 => _98;
        debug __field1 => _99;
        debug __field2 => _100;
        debug __field3 => _101;
        let mut _102: <__S as _::_serde::Serializer>::SerializeStruct;
        let _105: <__S as _::_serde::Serializer>::SerializeStruct;
        let _106: <__S as _::_serde::Serializer>::Error;
        scope 42 {
            debug __struct => _102;
            let _111: <__S as _::_serde::Serializer>::Error;
            let _118: <__S as _::_serde::Serializer>::Error;
            scope 45 {
                debug __val => const ();
            }
            scope 46 {
                debug __err => _111;
            }
            scope 47 {
                debug __val => const ();
            }
            scope 48 {
                debug __err => _118;
            }
        }
        scope 43 {
            debug __val => _105;
        }
        scope 44 {
            debug __err => _106;
        }
    }
    scope 49 {
        debug __field0 => _120;
        debug __field1 => _121;
        debug __field2 => _122;
        let mut _123: <__S as _::_serde::Serializer>::SerializeStruct;
        let _126: <__S as _::_serde::Serializer>::SerializeStruct;
        let _127: <__S as _::_serde::Serializer>::Error;
        scope 50 {
            debug __struct => _123;
            let _132: <__S as _::_serde::Serializer>::Error;
            let _139: <__S as _::_serde::Serializer>::Error;
            scope 53 {
                debug __val => const ();
            }
            scope 54 {
                debug __err => _132;
            }
            scope 55 {
                debug __val => const ();
            }
            scope 56 {
                debug __err => _139;
            }
        }
        scope 51 {
            debug __val => _126;
        }
        scope 52 {
            debug __err => _127;
        }
    }
    scope 57 {
        debug __field0 => _141;
        let mut _142: <__S as _::_serde::Serializer>::SerializeStruct;
        let _145: <__S as _::_serde::Serializer>::SerializeStruct;
        let _146: <__S as _::_serde::Serializer>::Error;
        scope 58 {
            debug __struct => _142;
            let _151: <__S as _::_serde::Serializer>::Error;
            let _155: <__S as _::_serde::Serializer>::Error;
            scope 61 {
                debug __val => const ();
            }
            scope 62 {
                debug __err => _151;
            }
            scope 63 {
                debug __val => const ();
            }
            scope 64 {
                debug __err => _155;
            }
        }
        scope 59 {
            debug __val => _145;
        }
        scope 60 {
            debug __err => _146;
        }
    }
    scope 65 {
        debug __field0 => _157;
        let mut _158: <__S as _::_serde::Serializer>::SerializeStruct;
        let _161: <__S as _::_serde::Serializer>::SerializeStruct;
        let _162: <__S as _::_serde::Serializer>::Error;
        scope 66 {
            debug __struct => _158;
            let _167: <__S as _::_serde::Serializer>::Error;
            let _171: <__S as _::_serde::Serializer>::Error;
            scope 69 {
                debug __val => const ();
            }
            scope 70 {
                debug __err => _167;
            }
            scope 71 {
                debug __val => const ();
            }
            scope 72 {
                debug __err => _171;
            }
        }
        scope 67 {
            debug __val => _161;
        }
        scope 68 {
            debug __err => _162;
        }
    }
    scope 73 {
        debug __field0 => _173;
        let mut _174: <__S as _::_serde::Serializer>::SerializeStruct;
        let _177: <__S as _::_serde::Serializer>::SerializeStruct;
        let _178: <__S as _::_serde::Serializer>::Error;
        scope 74 {
            debug __struct => _174;
            let _183: <__S as _::_serde::Serializer>::Error;
            let _187: <__S as _::_serde::Serializer>::Error;
            scope 77 {
                debug __val => const ();
            }
            scope 78 {
                debug __err => _183;
            }
            scope 79 {
                debug __val => const ();
            }
            scope 80 {
                debug __err => _187;
            }
        }
        scope 75 {
            debug __val => _177;
        }
        scope 76 {
            debug __err => _178;
        }
    }
    scope 81 {
        debug __field0 => _189;
        debug __field1 => _190;
        let mut _191: <__S as _::_serde::Serializer>::SerializeStruct;
        let _194: <__S as _::_serde::Serializer>::SerializeStruct;
        let _195: <__S as _::_serde::Serializer>::Error;
        scope 82 {
            debug __struct => _191;
            let _200: <__S as _::_serde::Serializer>::Error;
            let _207: <__S as _::_serde::Serializer>::Error;
            scope 85 {
                debug __val => const ();
            }
            scope 86 {
                debug __err => _200;
            }
            scope 87 {
                debug __val => const ();
            }
            scope 88 {
                debug __err => _207;
            }
        }
        scope 83 {
            debug __val => _194;
        }
        scope 84 {
            debug __err => _195;
        }
    }
    scope 89 {
        debug __field0 => _209;
        debug __field1 => _210;
        debug __field2 => _211;
        let mut _212: <__S as _::_serde::Serializer>::SerializeStruct;
        let _215: <__S as _::_serde::Serializer>::SerializeStruct;
        let _216: <__S as _::_serde::Serializer>::Error;
        scope 90 {
            debug __struct => _212;
            let _221: <__S as _::_serde::Serializer>::Error;
            let _228: <__S as _::_serde::Serializer>::Error;
            scope 93 {
                debug __val => const ();
            }
            scope 94 {
                debug __err => _221;
            }
            scope 95 {
                debug __val => const ();
            }
            scope 96 {
                debug __err => _228;
            }
        }
        scope 91 {
            debug __val => _215;
        }
        scope 92 {
            debug __err => _216;
        }
    }
    scope 97 {
        debug __field0 => _230;
        debug __field1 => _231;
        debug __field2 => _232;
        let mut _233: <__S as _::_serde::Serializer>::SerializeStruct;
        let _236: <__S as _::_serde::Serializer>::SerializeStruct;
        let _237: <__S as _::_serde::Serializer>::Error;
        scope 98 {
            debug __struct => _233;
            let _242: <__S as _::_serde::Serializer>::Error;
            let _249: <__S as _::_serde::Serializer>::Error;
            scope 101 {
                debug __val => const ();
            }
            scope 102 {
                debug __err => _242;
            }
            scope 103 {
                debug __val => const ();
            }
            scope 104 {
                debug __err => _249;
            }
        }
        scope 99 {
            debug __val => _236;
        }
        scope 100 {
            debug __err => _237;
        }
    }
    scope 105 {
        debug __field0 => _251;
        debug __field1 => _252;
        debug __field2 => _253;
        debug __field3 => _254;
        debug __field4 => _255;
        let mut _256: <__S as _::_serde::Serializer>::SerializeStruct;
        let _259: <__S as _::_serde::Serializer>::SerializeStruct;
        let _260: <__S as _::_serde::Serializer>::Error;
        scope 106 {
            debug __struct => _256;
            let _265: <__S as _::_serde::Serializer>::Error;
            let _272: <__S as _::_serde::Serializer>::Error;
            scope 109 {
                debug __val => const ();
            }
            scope 110 {
                debug __err => _265;
            }
            scope 111 {
                debug __val => const ();
            }
            scope 112 {
                debug __err => _272;
            }
        }
        scope 107 {
            debug __val => _259;
        }
        scope 108 {
            debug __err => _260;
        }
    }
    scope 113 {
        debug __field0 => _274;
        debug __field1 => _275;
        debug __field2 => _276;
        let mut _277: <__S as _::_serde::Serializer>::SerializeStruct;
        let _280: <__S as _::_serde::Serializer>::SerializeStruct;
        let _281: <__S as _::_serde::Serializer>::Error;
        scope 114 {
            debug __struct => _277;
            let _286: <__S as _::_serde::Serializer>::Error;
            let _293: <__S as _::_serde::Serializer>::Error;
            scope 117 {
                debug __val => const ();
            }
            scope 118 {
                debug __err => _286;
            }
            scope 119 {
                debug __val => const ();
            }
            scope 120 {
                debug __err => _293;
            }
        }
        scope 115 {
            debug __val => _280;
        }
        scope 116 {
            debug __err => _281;
        }
    }
    scope 121 {
        debug __field0 => _295;
        debug __field1 => _296;
        let mut _297: <__S as _::_serde::Serializer>::SerializeStruct;
        let _300: <__S as _::_serde::Serializer>::SerializeStruct;
        let _301: <__S as _::_serde::Serializer>::Error;
        scope 122 {
            debug __struct => _297;
            let _306: <__S as _::_serde::Serializer>::Error;
            let _313: <__S as _::_serde::Serializer>::Error;
            scope 125 {
                debug __val => const ();
            }
            scope 126 {
                debug __err => _306;
            }
            scope 127 {
                debug __val => const ();
            }
            scope 128 {
                debug __err => _313;
            }
        }
        scope 123 {
            debug __val => _300;
        }
        scope 124 {
            debug __err => _301;
        }
    }

    bb0: {
        _330 = const false;
        _329 = const false;
        _328 = const false;
        _327 = const false;
        _326 = const false;
        _325 = const false;
        _324 = const false;
        _323 = const false;
        _322 = const false;
        _321 = const false;
        _320 = const false;
        _319 = const false;
        _318 = const false;
        _317 = const false;
        _316 = const false;
        _315 = const false;
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb14, 2: bb25, 3: bb36, 4: bb47, 5: bb58, 6: bb69, 7: bb80, 8: bb91, 9: bb102, 10: bb113, 11: bb124, 12: bb135, 13: bb146, 14: bb157, 15: bb1, otherwise: bb2];
    }

    bb1: {
        _295 = &(((*_1) as GetEventByVersionWithProof).0: diem_types::event::EventKey);
        _296 = &(((*_1) as GetEventByVersionWithProof).1: std::option::Option<u64>);
        _298 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb168, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Submit).0: (std::string::String,));
        _6 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = discriminant(_6);
        switchInt(move _7) -> [0: bb6, 1: bb5, otherwise: bb2];
    }

    bb5: {
        _9 = move ((_6 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _9);
        goto -> bb209;
    }

    bb6: {
        _8 = move ((_6 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _330 = const true;
        _5 = move _8;
        _11 = &mut _5;
        _12 = const "submit";
        _10 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_11, const "method", _12) -> [return: bb7, unwind: bb243];
    }

    bb7: {
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb9, 1: bb8, otherwise: bb2];
    }

    bb8: {
        _14 = move ((_10 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _14);
        goto -> bb208;
    }

    bb9: {
        _16 = &mut _5;
        _15 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<(std::string::String,)>(_16, const "params", _4) -> [return: bb10, unwind: bb243];
    }

    bb10: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb12, 1: bb11, otherwise: bb2];
    }

    bb11: {
        _18 = move ((_15 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _18);
        goto -> bb208;
    }

    bb12: {
        _330 = const false;
        _19 = move _5;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _19) -> [return: bb13, unwind: bb243];
    }

    bb13: {
        _330 = const false;
        goto -> bb210;
    }

    bb14: {
        _20 = &(((*_1) as GetMetadata).0: (std::option::Option<u64>,));
        _22 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb15, unwind continue];
    }

    bb15: {
        _23 = discriminant(_22);
        switchInt(move _23) -> [0: bb17, 1: bb16, otherwise: bb2];
    }

    bb16: {
        _25 = move ((_22 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _25);
        goto -> bb207;
    }

    bb17: {
        _24 = move ((_22 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _329 = const true;
        _21 = move _24;
        _27 = &mut _21;
        _28 = const "get_metadata";
        _26 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_27, const "method", _28) -> [return: bb18, unwind: bb241];
    }

    bb18: {
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb20, 1: bb19, otherwise: bb2];
    }

    bb19: {
        _30 = move ((_26 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _30);
        goto -> bb206;
    }

    bb20: {
        _32 = &mut _21;
        _31 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<(std::option::Option<u64>,)>(_32, const "params", _20) -> [return: bb21, unwind: bb241];
    }

    bb21: {
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb23, 1: bb22, otherwise: bb2];
    }

    bb22: {
        _34 = move ((_31 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _34);
        goto -> bb206;
    }

    bb23: {
        _329 = const false;
        _35 = move _21;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _35) -> [return: bb24, unwind: bb241];
    }

    bb24: {
        _329 = const false;
        goto -> bb210;
    }

    bb25: {
        _36 = &(((*_1) as GetAccount).0: diem_types::PeerId);
        _37 = &(((*_1) as GetAccount).1: std::option::Option<u64>);
        _39 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb26, unwind continue];
    }

    bb26: {
        _40 = discriminant(_39);
        switchInt(move _40) -> [0: bb28, 1: bb27, otherwise: bb2];
    }

    bb27: {
        _42 = move ((_39 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _42);
        goto -> bb205;
    }

    bb28: {
        _41 = move ((_39 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _328 = const true;
        _38 = move _41;
        _44 = &mut _38;
        _45 = const "get_account";
        _43 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_44, const "method", _45) -> [return: bb29, unwind: bb239];
    }

    bb29: {
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb31, 1: bb30, otherwise: bb2];
    }

    bb30: {
        _47 = move ((_43 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _47);
        goto -> bb204;
    }

    bb31: {
        _49 = &mut _38;
        _52 = (_36, _37);
        _51 = request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged::<'_> { data: move _52, phantom: const PhantomData::<request::MethodRequest> };
        _50 = &_51;
        _48 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>>(_49, const "params", _50) -> [return: bb32, unwind: bb239];
    }

    bb32: {
        _53 = discriminant(_48);
        switchInt(move _53) -> [0: bb34, 1: bb33, otherwise: bb2];
    }

    bb33: {
        _54 = move ((_48 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _54);
        goto -> bb204;
    }

    bb34: {
        _328 = const false;
        _55 = move _38;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _55) -> [return: bb35, unwind: bb239];
    }

    bb35: {
        _328 = const false;
        goto -> bb210;
    }

    bb36: {
        _56 = &(((*_1) as GetTransactions).0: u64);
        _57 = &(((*_1) as GetTransactions).1: u64);
        _58 = &(((*_1) as GetTransactions).2: bool);
        _60 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb37, unwind continue];
    }

    bb37: {
        _61 = discriminant(_60);
        switchInt(move _61) -> [0: bb39, 1: bb38, otherwise: bb2];
    }

    bb38: {
        _63 = move ((_60 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _63);
        goto -> bb203;
    }

    bb39: {
        _62 = move ((_60 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _327 = const true;
        _59 = move _62;
        _65 = &mut _59;
        _66 = const "get_transactions";
        _64 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_65, const "method", _66) -> [return: bb40, unwind: bb237];
    }

    bb40: {
        _67 = discriminant(_64);
        switchInt(move _67) -> [0: bb42, 1: bb41, otherwise: bb2];
    }

    bb41: {
        _68 = move ((_64 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _68);
        goto -> bb202;
    }

    bb42: {
        _70 = &mut _59;
        _73 = (_56, _57, _58);
        _72 = request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged::<'_> { data: move _73, phantom: const PhantomData::<request::MethodRequest> };
        _71 = &_72;
        _69 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>>(_70, const "params", _71) -> [return: bb43, unwind: bb237];
    }

    bb43: {
        _74 = discriminant(_69);
        switchInt(move _74) -> [0: bb45, 1: bb44, otherwise: bb2];
    }

    bb44: {
        _75 = move ((_69 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _75);
        goto -> bb202;
    }

    bb45: {
        _327 = const false;
        _76 = move _59;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _76) -> [return: bb46, unwind: bb237];
    }

    bb46: {
        _327 = const false;
        goto -> bb210;
    }

    bb47: {
        _77 = &(((*_1) as GetAccountTransaction).0: diem_types::PeerId);
        _78 = &(((*_1) as GetAccountTransaction).1: u64);
        _79 = &(((*_1) as GetAccountTransaction).2: bool);
        _81 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb48, unwind continue];
    }

    bb48: {
        _82 = discriminant(_81);
        switchInt(move _82) -> [0: bb50, 1: bb49, otherwise: bb2];
    }

    bb49: {
        _84 = move ((_81 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _84);
        goto -> bb201;
    }

    bb50: {
        _83 = move ((_81 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _326 = const true;
        _80 = move _83;
        _86 = &mut _80;
        _87 = const "get_account_transaction";
        _85 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_86, const "method", _87) -> [return: bb51, unwind: bb235];
    }

    bb51: {
        _88 = discriminant(_85);
        switchInt(move _88) -> [0: bb53, 1: bb52, otherwise: bb2];
    }

    bb52: {
        _89 = move ((_85 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _89);
        goto -> bb200;
    }

    bb53: {
        _91 = &mut _80;
        _94 = (_77, _78, _79);
        _93 = request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged::<'_> { data: move _94, phantom: const PhantomData::<request::MethodRequest> };
        _92 = &_93;
        _90 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>>(_91, const "params", _92) -> [return: bb54, unwind: bb235];
    }

    bb54: {
        _95 = discriminant(_90);
        switchInt(move _95) -> [0: bb56, 1: bb55, otherwise: bb2];
    }

    bb55: {
        _96 = move ((_90 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _96);
        goto -> bb200;
    }

    bb56: {
        _326 = const false;
        _97 = move _80;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _97) -> [return: bb57, unwind: bb235];
    }

    bb57: {
        _326 = const false;
        goto -> bb210;
    }

    bb58: {
        _98 = &(((*_1) as GetAccountTransactions).0: diem_types::PeerId);
        _99 = &(((*_1) as GetAccountTransactions).1: u64);
        _100 = &(((*_1) as GetAccountTransactions).2: u64);
        _101 = &(((*_1) as GetAccountTransactions).3: bool);
        _103 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb59, unwind continue];
    }

    bb59: {
        _104 = discriminant(_103);
        switchInt(move _104) -> [0: bb61, 1: bb60, otherwise: bb2];
    }

    bb60: {
        _106 = move ((_103 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _106);
        goto -> bb199;
    }

    bb61: {
        _105 = move ((_103 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _325 = const true;
        _102 = move _105;
        _108 = &mut _102;
        _109 = const "get_account_transactions";
        _107 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_108, const "method", _109) -> [return: bb62, unwind: bb233];
    }

    bb62: {
        _110 = discriminant(_107);
        switchInt(move _110) -> [0: bb64, 1: bb63, otherwise: bb2];
    }

    bb63: {
        _111 = move ((_107 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _111);
        goto -> bb198;
    }

    bb64: {
        _113 = &mut _102;
        _116 = (_98, _99, _100, _101);
        _115 = request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged::<'_> { data: move _116, phantom: const PhantomData::<request::MethodRequest> };
        _114 = &_115;
        _112 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>>(_113, const "params", _114) -> [return: bb65, unwind: bb233];
    }

    bb65: {
        _117 = discriminant(_112);
        switchInt(move _117) -> [0: bb67, 1: bb66, otherwise: bb2];
    }

    bb66: {
        _118 = move ((_112 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _118);
        goto -> bb198;
    }

    bb67: {
        _325 = const false;
        _119 = move _102;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _119) -> [return: bb68, unwind: bb233];
    }

    bb68: {
        _325 = const false;
        goto -> bb210;
    }

    bb69: {
        _120 = &(((*_1) as GetEvents).0: diem_types::event::EventKey);
        _121 = &(((*_1) as GetEvents).1: u64);
        _122 = &(((*_1) as GetEvents).2: u64);
        _124 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb70, unwind continue];
    }

    bb70: {
        _125 = discriminant(_124);
        switchInt(move _125) -> [0: bb72, 1: bb71, otherwise: bb2];
    }

    bb71: {
        _127 = move ((_124 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _127);
        goto -> bb197;
    }

    bb72: {
        _126 = move ((_124 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _324 = const true;
        _123 = move _126;
        _129 = &mut _123;
        _130 = const "get_events";
        _128 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_129, const "method", _130) -> [return: bb73, unwind: bb231];
    }

    bb73: {
        _131 = discriminant(_128);
        switchInt(move _131) -> [0: bb75, 1: bb74, otherwise: bb2];
    }

    bb74: {
        _132 = move ((_128 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _132);
        goto -> bb196;
    }

    bb75: {
        _134 = &mut _123;
        _137 = (_120, _121, _122);
        _136 = request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged::<'_> { data: move _137, phantom: const PhantomData::<request::MethodRequest> };
        _135 = &_136;
        _133 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>>(_134, const "params", _135) -> [return: bb76, unwind: bb231];
    }

    bb76: {
        _138 = discriminant(_133);
        switchInt(move _138) -> [0: bb78, 1: bb77, otherwise: bb2];
    }

    bb77: {
        _139 = move ((_133 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _139);
        goto -> bb196;
    }

    bb78: {
        _324 = const false;
        _140 = move _123;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _140) -> [return: bb79, unwind: bb231];
    }

    bb79: {
        _324 = const false;
        goto -> bb210;
    }

    bb80: {
        _141 = &(((*_1) as GetCurrencies).0: [(); 0]);
        _143 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb81, unwind continue];
    }

    bb81: {
        _144 = discriminant(_143);
        switchInt(move _144) -> [0: bb83, 1: bb82, otherwise: bb2];
    }

    bb82: {
        _146 = move ((_143 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _146);
        goto -> bb195;
    }

    bb83: {
        _145 = move ((_143 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _323 = const true;
        _142 = move _145;
        _148 = &mut _142;
        _149 = const "get_currencies";
        _147 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_148, const "method", _149) -> [return: bb84, unwind: bb229];
    }

    bb84: {
        _150 = discriminant(_147);
        switchInt(move _150) -> [0: bb86, 1: bb85, otherwise: bb2];
    }

    bb85: {
        _151 = move ((_147 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _151);
        goto -> bb194;
    }

    bb86: {
        _153 = &mut _142;
        _152 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<[(); 0]>(_153, const "params", _141) -> [return: bb87, unwind: bb229];
    }

    bb87: {
        _154 = discriminant(_152);
        switchInt(move _154) -> [0: bb89, 1: bb88, otherwise: bb2];
    }

    bb88: {
        _155 = move ((_152 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _155);
        goto -> bb194;
    }

    bb89: {
        _323 = const false;
        _156 = move _142;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _156) -> [return: bb90, unwind: bb229];
    }

    bb90: {
        _323 = const false;
        goto -> bb210;
    }

    bb91: {
        _157 = &(((*_1) as GetNetworkStatus).0: [(); 0]);
        _159 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb92, unwind continue];
    }

    bb92: {
        _160 = discriminant(_159);
        switchInt(move _160) -> [0: bb94, 1: bb93, otherwise: bb2];
    }

    bb93: {
        _162 = move ((_159 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _162);
        goto -> bb193;
    }

    bb94: {
        _161 = move ((_159 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _322 = const true;
        _158 = move _161;
        _164 = &mut _158;
        _165 = const "get_network_status";
        _163 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_164, const "method", _165) -> [return: bb95, unwind: bb227];
    }

    bb95: {
        _166 = discriminant(_163);
        switchInt(move _166) -> [0: bb97, 1: bb96, otherwise: bb2];
    }

    bb96: {
        _167 = move ((_163 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _167);
        goto -> bb192;
    }

    bb97: {
        _169 = &mut _158;
        _168 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<[(); 0]>(_169, const "params", _157) -> [return: bb98, unwind: bb227];
    }

    bb98: {
        _170 = discriminant(_168);
        switchInt(move _170) -> [0: bb100, 1: bb99, otherwise: bb2];
    }

    bb99: {
        _171 = move ((_168 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _171);
        goto -> bb192;
    }

    bb100: {
        _322 = const false;
        _172 = move _158;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _172) -> [return: bb101, unwind: bb227];
    }

    bb101: {
        _322 = const false;
        goto -> bb210;
    }

    bb102: {
        _173 = &(((*_1) as GetStateProof).0: (u64,));
        _175 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb103, unwind continue];
    }

    bb103: {
        _176 = discriminant(_175);
        switchInt(move _176) -> [0: bb105, 1: bb104, otherwise: bb2];
    }

    bb104: {
        _178 = move ((_175 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _178);
        goto -> bb191;
    }

    bb105: {
        _177 = move ((_175 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _321 = const true;
        _174 = move _177;
        _180 = &mut _174;
        _181 = const "get_state_proof";
        _179 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_180, const "method", _181) -> [return: bb106, unwind: bb225];
    }

    bb106: {
        _182 = discriminant(_179);
        switchInt(move _182) -> [0: bb108, 1: bb107, otherwise: bb2];
    }

    bb107: {
        _183 = move ((_179 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _183);
        goto -> bb190;
    }

    bb108: {
        _185 = &mut _174;
        _184 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<(u64,)>(_185, const "params", _173) -> [return: bb109, unwind: bb225];
    }

    bb109: {
        _186 = discriminant(_184);
        switchInt(move _186) -> [0: bb111, 1: bb110, otherwise: bb2];
    }

    bb110: {
        _187 = move ((_184 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _187);
        goto -> bb190;
    }

    bb111: {
        _321 = const false;
        _188 = move _174;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _188) -> [return: bb112, unwind: bb225];
    }

    bb112: {
        _321 = const false;
        goto -> bb210;
    }

    bb113: {
        _189 = &(((*_1) as GetAccumulatorConsistencyProof).0: std::option::Option<u64>);
        _190 = &(((*_1) as GetAccumulatorConsistencyProof).1: std::option::Option<u64>);
        _192 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb114, unwind continue];
    }

    bb114: {
        _193 = discriminant(_192);
        switchInt(move _193) -> [0: bb116, 1: bb115, otherwise: bb2];
    }

    bb115: {
        _195 = move ((_192 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _195);
        goto -> bb189;
    }

    bb116: {
        _194 = move ((_192 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _320 = const true;
        _191 = move _194;
        _197 = &mut _191;
        _198 = const "get_accumulator_consistency_proof";
        _196 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_197, const "method", _198) -> [return: bb117, unwind: bb223];
    }

    bb117: {
        _199 = discriminant(_196);
        switchInt(move _199) -> [0: bb119, 1: bb118, otherwise: bb2];
    }

    bb118: {
        _200 = move ((_196 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _200);
        goto -> bb188;
    }

    bb119: {
        _202 = &mut _191;
        _205 = (_189, _190);
        _204 = request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged::<'_> { data: move _205, phantom: const PhantomData::<request::MethodRequest> };
        _203 = &_204;
        _201 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>>(_202, const "params", _203) -> [return: bb120, unwind: bb223];
    }

    bb120: {
        _206 = discriminant(_201);
        switchInt(move _206) -> [0: bb122, 1: bb121, otherwise: bb2];
    }

    bb121: {
        _207 = move ((_201 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _207);
        goto -> bb188;
    }

    bb122: {
        _320 = const false;
        _208 = move _191;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _208) -> [return: bb123, unwind: bb223];
    }

    bb123: {
        _320 = const false;
        goto -> bb210;
    }

    bb124: {
        _209 = &(((*_1) as GetAccountStateWithProof).0: diem_types::PeerId);
        _210 = &(((*_1) as GetAccountStateWithProof).1: std::option::Option<u64>);
        _211 = &(((*_1) as GetAccountStateWithProof).2: std::option::Option<u64>);
        _213 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb125, unwind continue];
    }

    bb125: {
        _214 = discriminant(_213);
        switchInt(move _214) -> [0: bb127, 1: bb126, otherwise: bb2];
    }

    bb126: {
        _216 = move ((_213 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _216);
        goto -> bb187;
    }

    bb127: {
        _215 = move ((_213 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _319 = const true;
        _212 = move _215;
        _218 = &mut _212;
        _219 = const "get_account_state_with_proof";
        _217 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_218, const "method", _219) -> [return: bb128, unwind: bb221];
    }

    bb128: {
        _220 = discriminant(_217);
        switchInt(move _220) -> [0: bb130, 1: bb129, otherwise: bb2];
    }

    bb129: {
        _221 = move ((_217 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _221);
        goto -> bb186;
    }

    bb130: {
        _223 = &mut _212;
        _226 = (_209, _210, _211);
        _225 = request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged::<'_> { data: move _226, phantom: const PhantomData::<request::MethodRequest> };
        _224 = &_225;
        _222 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>>(_223, const "params", _224) -> [return: bb131, unwind: bb221];
    }

    bb131: {
        _227 = discriminant(_222);
        switchInt(move _227) -> [0: bb133, 1: bb132, otherwise: bb2];
    }

    bb132: {
        _228 = move ((_222 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _228);
        goto -> bb186;
    }

    bb133: {
        _319 = const false;
        _229 = move _212;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _229) -> [return: bb134, unwind: bb221];
    }

    bb134: {
        _319 = const false;
        goto -> bb210;
    }

    bb135: {
        _230 = &(((*_1) as GetTransactionsWithProofs).0: u64);
        _231 = &(((*_1) as GetTransactionsWithProofs).1: u64);
        _232 = &(((*_1) as GetTransactionsWithProofs).2: bool);
        _234 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb136, unwind continue];
    }

    bb136: {
        _235 = discriminant(_234);
        switchInt(move _235) -> [0: bb138, 1: bb137, otherwise: bb2];
    }

    bb137: {
        _237 = move ((_234 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _237);
        goto -> bb185;
    }

    bb138: {
        _236 = move ((_234 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _318 = const true;
        _233 = move _236;
        _239 = &mut _233;
        _240 = const "get_transactions_with_proofs";
        _238 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_239, const "method", _240) -> [return: bb139, unwind: bb219];
    }

    bb139: {
        _241 = discriminant(_238);
        switchInt(move _241) -> [0: bb141, 1: bb140, otherwise: bb2];
    }

    bb140: {
        _242 = move ((_238 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _242);
        goto -> bb184;
    }

    bb141: {
        _244 = &mut _233;
        _247 = (_230, _231, _232);
        _246 = request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged::<'_> { data: move _247, phantom: const PhantomData::<request::MethodRequest> };
        _245 = &_246;
        _243 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>>(_244, const "params", _245) -> [return: bb142, unwind: bb219];
    }

    bb142: {
        _248 = discriminant(_243);
        switchInt(move _248) -> [0: bb144, 1: bb143, otherwise: bb2];
    }

    bb143: {
        _249 = move ((_243 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _249);
        goto -> bb184;
    }

    bb144: {
        _318 = const false;
        _250 = move _233;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _250) -> [return: bb145, unwind: bb219];
    }

    bb145: {
        _318 = const false;
        goto -> bb210;
    }

    bb146: {
        _251 = &(((*_1) as GetAccountTransactionsWithProofs).0: diem_types::PeerId);
        _252 = &(((*_1) as GetAccountTransactionsWithProofs).1: u64);
        _253 = &(((*_1) as GetAccountTransactionsWithProofs).2: u64);
        _254 = &(((*_1) as GetAccountTransactionsWithProofs).3: bool);
        _255 = &(((*_1) as GetAccountTransactionsWithProofs).4: std::option::Option<u64>);
        _257 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb147, unwind continue];
    }

    bb147: {
        _258 = discriminant(_257);
        switchInt(move _258) -> [0: bb149, 1: bb148, otherwise: bb2];
    }

    bb148: {
        _260 = move ((_257 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _260);
        goto -> bb183;
    }

    bb149: {
        _259 = move ((_257 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _317 = const true;
        _256 = move _259;
        _262 = &mut _256;
        _263 = const "get_account_transactions_with_proofs";
        _261 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_262, const "method", _263) -> [return: bb150, unwind: bb217];
    }

    bb150: {
        _264 = discriminant(_261);
        switchInt(move _264) -> [0: bb152, 1: bb151, otherwise: bb2];
    }

    bb151: {
        _265 = move ((_261 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _265);
        goto -> bb182;
    }

    bb152: {
        _267 = &mut _256;
        _270 = (_251, _252, _253, _254, _255);
        _269 = request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged::<'_> { data: move _270, phantom: const PhantomData::<request::MethodRequest> };
        _268 = &_269;
        _266 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>>(_267, const "params", _268) -> [return: bb153, unwind: bb217];
    }

    bb153: {
        _271 = discriminant(_266);
        switchInt(move _271) -> [0: bb155, 1: bb154, otherwise: bb2];
    }

    bb154: {
        _272 = move ((_266 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _272);
        goto -> bb182;
    }

    bb155: {
        _317 = const false;
        _273 = move _256;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _273) -> [return: bb156, unwind: bb217];
    }

    bb156: {
        _317 = const false;
        goto -> bb210;
    }

    bb157: {
        _274 = &(((*_1) as GetEventsWithProofs).0: diem_types::event::EventKey);
        _275 = &(((*_1) as GetEventsWithProofs).1: u64);
        _276 = &(((*_1) as GetEventsWithProofs).2: u64);
        _278 = <__S as _::_serde::Serializer>::serialize_struct(move _2, const "MethodRequest", const 2_usize) -> [return: bb158, unwind continue];
    }

    bb158: {
        _279 = discriminant(_278);
        switchInt(move _279) -> [0: bb160, 1: bb159, otherwise: bb2];
    }

    bb159: {
        _281 = move ((_278 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _281);
        goto -> bb181;
    }

    bb160: {
        _280 = move ((_278 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _316 = const true;
        _277 = move _280;
        _283 = &mut _277;
        _284 = const "get_events_with_proofs";
        _282 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_283, const "method", _284) -> [return: bb161, unwind: bb215];
    }

    bb161: {
        _285 = discriminant(_282);
        switchInt(move _285) -> [0: bb163, 1: bb162, otherwise: bb2];
    }

    bb162: {
        _286 = move ((_282 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _286);
        goto -> bb180;
    }

    bb163: {
        _288 = &mut _277;
        _291 = (_274, _275, _276);
        _290 = request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged::<'_> { data: move _291, phantom: const PhantomData::<request::MethodRequest> };
        _289 = &_290;
        _287 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>>(_288, const "params", _289) -> [return: bb164, unwind: bb215];
    }

    bb164: {
        _292 = discriminant(_287);
        switchInt(move _292) -> [0: bb166, 1: bb165, otherwise: bb2];
    }

    bb165: {
        _293 = move ((_287 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _293);
        goto -> bb180;
    }

    bb166: {
        _316 = const false;
        _294 = move _277;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _294) -> [return: bb167, unwind: bb215];
    }

    bb167: {
        _316 = const false;
        goto -> bb210;
    }

    bb168: {
        _299 = discriminant(_298);
        switchInt(move _299) -> [0: bb170, 1: bb169, otherwise: bb2];
    }

    bb169: {
        _301 = move ((_298 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _301);
        goto -> bb179;
    }

    bb170: {
        _300 = move ((_298 as Ok).0: <__S as _::_serde::Serializer>::SerializeStruct);
        _315 = const true;
        _297 = move _300;
        _303 = &mut _297;
        _304 = const "get_event_by_version_with_proof";
        _302 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<str>(_303, const "method", _304) -> [return: bb171, unwind: bb213];
    }

    bb171: {
        _305 = discriminant(_302);
        switchInt(move _305) -> [0: bb173, 1: bb172, otherwise: bb2];
    }

    bb172: {
        _306 = move ((_302 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _306);
        goto -> bb178;
    }

    bb173: {
        _308 = &mut _297;
        _311 = (_295, _296);
        _310 = request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged::<'_> { data: move _311, phantom: const PhantomData::<request::MethodRequest> };
        _309 = &_310;
        _307 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::serialize_field::<request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>>(_308, const "params", _309) -> [return: bb174, unwind: bb213];
    }

    bb174: {
        _312 = discriminant(_307);
        switchInt(move _312) -> [0: bb176, 1: bb175, otherwise: bb2];
    }

    bb175: {
        _313 = move ((_307 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _313);
        goto -> bb178;
    }

    bb176: {
        _315 = const false;
        _314 = move _297;
        _0 = <<__S as _::_serde::Serializer>::SerializeStruct as SerializeStruct>::end(move _314) -> [return: bb177, unwind: bb213];
    }

    bb177: {
        _315 = const false;
        goto -> bb210;
    }

    bb178: {
        drop(_297) -> [return: bb179, unwind continue];
    }

    bb179: {
        _315 = const false;
        goto -> bb210;
    }

    bb180: {
        drop(_277) -> [return: bb181, unwind continue];
    }

    bb181: {
        _316 = const false;
        goto -> bb210;
    }

    bb182: {
        drop(_256) -> [return: bb183, unwind continue];
    }

    bb183: {
        _317 = const false;
        goto -> bb210;
    }

    bb184: {
        drop(_233) -> [return: bb185, unwind continue];
    }

    bb185: {
        _318 = const false;
        goto -> bb210;
    }

    bb186: {
        drop(_212) -> [return: bb187, unwind continue];
    }

    bb187: {
        _319 = const false;
        goto -> bb210;
    }

    bb188: {
        drop(_191) -> [return: bb189, unwind continue];
    }

    bb189: {
        _320 = const false;
        goto -> bb210;
    }

    bb190: {
        drop(_174) -> [return: bb191, unwind continue];
    }

    bb191: {
        _321 = const false;
        goto -> bb210;
    }

    bb192: {
        drop(_158) -> [return: bb193, unwind continue];
    }

    bb193: {
        _322 = const false;
        goto -> bb210;
    }

    bb194: {
        drop(_142) -> [return: bb195, unwind continue];
    }

    bb195: {
        _323 = const false;
        goto -> bb210;
    }

    bb196: {
        drop(_123) -> [return: bb197, unwind continue];
    }

    bb197: {
        _324 = const false;
        goto -> bb210;
    }

    bb198: {
        drop(_102) -> [return: bb199, unwind continue];
    }

    bb199: {
        _325 = const false;
        goto -> bb210;
    }

    bb200: {
        drop(_80) -> [return: bb201, unwind continue];
    }

    bb201: {
        _326 = const false;
        goto -> bb210;
    }

    bb202: {
        drop(_59) -> [return: bb203, unwind continue];
    }

    bb203: {
        _327 = const false;
        goto -> bb210;
    }

    bb204: {
        drop(_38) -> [return: bb205, unwind continue];
    }

    bb205: {
        _328 = const false;
        goto -> bb210;
    }

    bb206: {
        drop(_21) -> [return: bb207, unwind continue];
    }

    bb207: {
        _329 = const false;
        goto -> bb210;
    }

    bb208: {
        drop(_5) -> [return: bb209, unwind continue];
    }

    bb209: {
        _330 = const false;
        goto -> bb210;
    }

    bb210: {
        return;
    }

    bb211 (cleanup): {
        resume;
    }

    bb212 (cleanup): {
        drop(_297) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        switchInt(_315) -> [0: bb211, otherwise: bb212];
    }

    bb214 (cleanup): {
        drop(_277) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb215 (cleanup): {
        switchInt(_316) -> [0: bb211, otherwise: bb214];
    }

    bb216 (cleanup): {
        drop(_256) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        switchInt(_317) -> [0: bb211, otherwise: bb216];
    }

    bb218 (cleanup): {
        drop(_233) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        switchInt(_318) -> [0: bb211, otherwise: bb218];
    }

    bb220 (cleanup): {
        drop(_212) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        switchInt(_319) -> [0: bb211, otherwise: bb220];
    }

    bb222 (cleanup): {
        drop(_191) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        switchInt(_320) -> [0: bb211, otherwise: bb222];
    }

    bb224 (cleanup): {
        drop(_174) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        switchInt(_321) -> [0: bb211, otherwise: bb224];
    }

    bb226 (cleanup): {
        drop(_158) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb227 (cleanup): {
        switchInt(_322) -> [0: bb211, otherwise: bb226];
    }

    bb228 (cleanup): {
        drop(_142) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb229 (cleanup): {
        switchInt(_323) -> [0: bb211, otherwise: bb228];
    }

    bb230 (cleanup): {
        drop(_123) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb231 (cleanup): {
        switchInt(_324) -> [0: bb211, otherwise: bb230];
    }

    bb232 (cleanup): {
        drop(_102) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb233 (cleanup): {
        switchInt(_325) -> [0: bb211, otherwise: bb232];
    }

    bb234 (cleanup): {
        drop(_80) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb235 (cleanup): {
        switchInt(_326) -> [0: bb211, otherwise: bb234];
    }

    bb236 (cleanup): {
        drop(_59) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        switchInt(_327) -> [0: bb211, otherwise: bb236];
    }

    bb238 (cleanup): {
        drop(_38) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb239 (cleanup): {
        switchInt(_328) -> [0: bb211, otherwise: bb238];
    }

    bb240 (cleanup): {
        drop(_21) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb241 (cleanup): {
        switchInt(_329) -> [0: bb211, otherwise: bb240];
    }

    bb242 (cleanup): {
        drop(_5) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb243 (cleanup): {
        switchInt(_330) -> [0: bb211, otherwise: bb242];
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize(_1: &request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _6: std::result::Result<<__S as _::_serde::Serializer>::SerializeTuple, <__S as _::_serde::Serializer>::Error>;
    let mut _7: __S;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: (usize, bool);
    let mut _11: (usize, bool);
    let mut _12: isize;
    let mut _15: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _16: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _17: isize;
    let mut _19: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _20: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _21: isize;
    let mut _23: <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _24: bool;
    let mut _25: bool;
    scope 1 {
        debug __field0 => _3;
        debug __field1 => _4;
        let mut _5: <__S as _::_serde::Serializer>::SerializeTuple;
        let _13: <__S as _::_serde::Serializer>::SerializeTuple;
        let _14: <__S as _::_serde::Serializer>::Error;
        scope 3 {
            debug __serde_state => _5;
            let _18: <__S as _::_serde::Serializer>::Error;
            let _22: <__S as _::_serde::Serializer>::Error;
            scope 6 {
                debug __val => const ();
            }
            scope 7 {
                debug __err => _18;
            }
            scope 8 {
                debug __val => const ();
            }
            scope 9 {
                debug __err => _22;
            }
        }
        scope 4 {
            debug __val => _13;
        }
        scope 5 {
            debug __err => _14;
        }
    }
    scope 2 {
        let _3: &diem_types::PeerId;
        let _4: &std::option::Option<u64>;
    }

    bb0: {
        _24 = const false;
        _25 = const false;
        _3 = (((*_1).0: (&diem_types::PeerId, &std::option::Option<u64>)).0: &diem_types::PeerId);
        _4 = (((*_1).0: (&diem_types::PeerId, &std::option::Option<u64>)).1: &std::option::Option<u64>);
        _25 = const true;
        _7 = move _2;
        _10 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb1, unwind: bb21];
    }

    bb1: {
        _9 = move (_10.0: usize);
        _11 = CheckedAdd(_9, const 1_usize);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_usize) -> [success: bb2, unwind: bb21];
    }

    bb2: {
        _8 = move (_11.0: usize);
        _25 = const false;
        _6 = <__S as _::_serde::Serializer>::serialize_tuple(move _7, move _8) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _25 = const false;
        _12 = discriminant(_6);
        switchInt(move _12) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _14 = move ((_6 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _14);
        goto -> bb15;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _13 = move ((_6 as Ok).0: <__S as _::_serde::Serializer>::SerializeTuple);
        _24 = const true;
        _5 = move _13;
        _16 = &mut _5;
        _15 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<AccountAddress>(_16, _3) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb8, otherwise: bb5];
    }

    bb8: {
        _18 = move ((_15 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _18);
        goto -> bb14;
    }

    bb9: {
        _20 = &mut _5;
        _19 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<std::option::Option<u64>>(_20, _4) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb12, 1: bb11, otherwise: bb5];
    }

    bb11: {
        _22 = move ((_19 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _22);
        goto -> bb14;
    }

    bb12: {
        _24 = const false;
        _23 = move _5;
        _0 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::end(move _23) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        _24 = const false;
        goto -> bb16;
    }

    bb14: {
        drop(_5) -> [return: bb15, unwind continue];
    }

    bb15: {
        _24 = const false;
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_5) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_24) -> [0: bb17, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_7) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_25) -> [0: bb17, otherwise: bb20];
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize(_1: &request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _7: std::result::Result<<__S as _::_serde::Serializer>::SerializeTuple, <__S as _::_serde::Serializer>::Error>;
    let mut _8: __S;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: (usize, bool);
    let mut _13: (usize, bool);
    let mut _14: (usize, bool);
    let mut _15: isize;
    let mut _18: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _19: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _20: isize;
    let mut _22: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _23: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _24: isize;
    let mut _26: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _27: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _28: isize;
    let mut _30: <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _31: bool;
    let mut _32: bool;
    scope 1 {
        debug __field0 => _3;
        debug __field1 => _4;
        debug __field2 => _5;
        let mut _6: <__S as _::_serde::Serializer>::SerializeTuple;
        let _16: <__S as _::_serde::Serializer>::SerializeTuple;
        let _17: <__S as _::_serde::Serializer>::Error;
        scope 3 {
            debug __serde_state => _6;
            let _21: <__S as _::_serde::Serializer>::Error;
            let _25: <__S as _::_serde::Serializer>::Error;
            let _29: <__S as _::_serde::Serializer>::Error;
            scope 6 {
                debug __val => const ();
            }
            scope 7 {
                debug __err => _21;
            }
            scope 8 {
                debug __val => const ();
            }
            scope 9 {
                debug __err => _25;
            }
            scope 10 {
                debug __val => const ();
            }
            scope 11 {
                debug __err => _29;
            }
        }
        scope 4 {
            debug __val => _16;
        }
        scope 5 {
            debug __err => _17;
        }
    }
    scope 2 {
        let _3: &u64;
        let _4: &u64;
        let _5: &bool;
    }

    bb0: {
        _31 = const false;
        _32 = const false;
        _3 = (((*_1).0: (&u64, &u64, &bool)).0: &u64);
        _4 = (((*_1).0: (&u64, &u64, &bool)).1: &u64);
        _5 = (((*_1).0: (&u64, &u64, &bool)).2: &bool);
        _32 = const true;
        _8 = move _2;
        _12 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb1, unwind: bb25];
    }

    bb1: {
        _11 = move (_12.0: usize);
        _13 = CheckedAdd(_11, const 1_usize);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb2, unwind: bb25];
    }

    bb2: {
        _10 = move (_13.0: usize);
        _14 = CheckedAdd(_10, const 1_usize);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_usize) -> [success: bb3, unwind: bb25];
    }

    bb3: {
        _9 = move (_14.0: usize);
        _32 = const false;
        _7 = <__S as _::_serde::Serializer>::serialize_tuple(move _8, move _9) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _32 = const false;
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _17 = move ((_7 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _17);
        goto -> bb19;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _16 = move ((_7 as Ok).0: <__S as _::_serde::Serializer>::SerializeTuple);
        _31 = const true;
        _6 = move _16;
        _19 = &mut _6;
        _18 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_19, _3) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb10, 1: bb9, otherwise: bb6];
    }

    bb9: {
        _21 = move ((_18 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _21);
        goto -> bb18;
    }

    bb10: {
        _23 = &mut _6;
        _22 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_23, _4) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb13, 1: bb12, otherwise: bb6];
    }

    bb12: {
        _25 = move ((_22 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _25);
        goto -> bb18;
    }

    bb13: {
        _27 = &mut _6;
        _26 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<bool>(_27, _5) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb16, 1: bb15, otherwise: bb6];
    }

    bb15: {
        _29 = move ((_26 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _29);
        goto -> bb18;
    }

    bb16: {
        _31 = const false;
        _30 = move _6;
        _0 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::end(move _30) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _31 = const false;
        goto -> bb20;
    }

    bb18: {
        drop(_6) -> [return: bb19, unwind continue];
    }

    bb19: {
        _31 = const false;
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_6) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_31) -> [0: bb21, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_8) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_32) -> [0: bb21, otherwise: bb24];
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize(_1: &request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _7: std::result::Result<<__S as _::_serde::Serializer>::SerializeTuple, <__S as _::_serde::Serializer>::Error>;
    let mut _8: __S;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: (usize, bool);
    let mut _13: (usize, bool);
    let mut _14: (usize, bool);
    let mut _15: isize;
    let mut _18: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _19: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _20: isize;
    let mut _22: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _23: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _24: isize;
    let mut _26: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _27: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _28: isize;
    let mut _30: <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _31: bool;
    let mut _32: bool;
    scope 1 {
        debug __field0 => _3;
        debug __field1 => _4;
        debug __field2 => _5;
        let mut _6: <__S as _::_serde::Serializer>::SerializeTuple;
        let _16: <__S as _::_serde::Serializer>::SerializeTuple;
        let _17: <__S as _::_serde::Serializer>::Error;
        scope 3 {
            debug __serde_state => _6;
            let _21: <__S as _::_serde::Serializer>::Error;
            let _25: <__S as _::_serde::Serializer>::Error;
            let _29: <__S as _::_serde::Serializer>::Error;
            scope 6 {
                debug __val => const ();
            }
            scope 7 {
                debug __err => _21;
            }
            scope 8 {
                debug __val => const ();
            }
            scope 9 {
                debug __err => _25;
            }
            scope 10 {
                debug __val => const ();
            }
            scope 11 {
                debug __err => _29;
            }
        }
        scope 4 {
            debug __val => _16;
        }
        scope 5 {
            debug __err => _17;
        }
    }
    scope 2 {
        let _3: &diem_types::PeerId;
        let _4: &u64;
        let _5: &bool;
    }

    bb0: {
        _31 = const false;
        _32 = const false;
        _3 = (((*_1).0: (&diem_types::PeerId, &u64, &bool)).0: &diem_types::PeerId);
        _4 = (((*_1).0: (&diem_types::PeerId, &u64, &bool)).1: &u64);
        _5 = (((*_1).0: (&diem_types::PeerId, &u64, &bool)).2: &bool);
        _32 = const true;
        _8 = move _2;
        _12 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb1, unwind: bb25];
    }

    bb1: {
        _11 = move (_12.0: usize);
        _13 = CheckedAdd(_11, const 1_usize);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb2, unwind: bb25];
    }

    bb2: {
        _10 = move (_13.0: usize);
        _14 = CheckedAdd(_10, const 1_usize);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_usize) -> [success: bb3, unwind: bb25];
    }

    bb3: {
        _9 = move (_14.0: usize);
        _32 = const false;
        _7 = <__S as _::_serde::Serializer>::serialize_tuple(move _8, move _9) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _32 = const false;
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _17 = move ((_7 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _17);
        goto -> bb19;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _16 = move ((_7 as Ok).0: <__S as _::_serde::Serializer>::SerializeTuple);
        _31 = const true;
        _6 = move _16;
        _19 = &mut _6;
        _18 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<AccountAddress>(_19, _3) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb10, 1: bb9, otherwise: bb6];
    }

    bb9: {
        _21 = move ((_18 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _21);
        goto -> bb18;
    }

    bb10: {
        _23 = &mut _6;
        _22 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_23, _4) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb13, 1: bb12, otherwise: bb6];
    }

    bb12: {
        _25 = move ((_22 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _25);
        goto -> bb18;
    }

    bb13: {
        _27 = &mut _6;
        _26 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<bool>(_27, _5) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb16, 1: bb15, otherwise: bb6];
    }

    bb15: {
        _29 = move ((_26 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _29);
        goto -> bb18;
    }

    bb16: {
        _31 = const false;
        _30 = move _6;
        _0 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::end(move _30) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _31 = const false;
        goto -> bb20;
    }

    bb18: {
        drop(_6) -> [return: bb19, unwind continue];
    }

    bb19: {
        _31 = const false;
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_6) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_31) -> [0: bb21, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_8) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_32) -> [0: bb21, otherwise: bb24];
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize(_1: &request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _8: std::result::Result<<__S as _::_serde::Serializer>::SerializeTuple, <__S as _::_serde::Serializer>::Error>;
    let mut _9: __S;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: (usize, bool);
    let mut _15: (usize, bool);
    let mut _16: (usize, bool);
    let mut _17: (usize, bool);
    let mut _18: isize;
    let mut _21: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _22: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _23: isize;
    let mut _25: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _26: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _27: isize;
    let mut _29: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _30: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _31: isize;
    let mut _33: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _34: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _35: isize;
    let mut _37: <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _38: bool;
    let mut _39: bool;
    scope 1 {
        debug __field0 => _3;
        debug __field1 => _4;
        debug __field2 => _5;
        debug __field3 => _6;
        let mut _7: <__S as _::_serde::Serializer>::SerializeTuple;
        let _19: <__S as _::_serde::Serializer>::SerializeTuple;
        let _20: <__S as _::_serde::Serializer>::Error;
        scope 3 {
            debug __serde_state => _7;
            let _24: <__S as _::_serde::Serializer>::Error;
            let _28: <__S as _::_serde::Serializer>::Error;
            let _32: <__S as _::_serde::Serializer>::Error;
            let _36: <__S as _::_serde::Serializer>::Error;
            scope 6 {
                debug __val => const ();
            }
            scope 7 {
                debug __err => _24;
            }
            scope 8 {
                debug __val => const ();
            }
            scope 9 {
                debug __err => _28;
            }
            scope 10 {
                debug __val => const ();
            }
            scope 11 {
                debug __err => _32;
            }
            scope 12 {
                debug __val => const ();
            }
            scope 13 {
                debug __err => _36;
            }
        }
        scope 4 {
            debug __val => _19;
        }
        scope 5 {
            debug __err => _20;
        }
    }
    scope 2 {
        let _3: &diem_types::PeerId;
        let _4: &u64;
        let _5: &u64;
        let _6: &bool;
    }

    bb0: {
        _38 = const false;
        _39 = const false;
        _3 = (((*_1).0: (&diem_types::PeerId, &u64, &u64, &bool)).0: &diem_types::PeerId);
        _4 = (((*_1).0: (&diem_types::PeerId, &u64, &u64, &bool)).1: &u64);
        _5 = (((*_1).0: (&diem_types::PeerId, &u64, &u64, &bool)).2: &u64);
        _6 = (((*_1).0: (&diem_types::PeerId, &u64, &u64, &bool)).3: &bool);
        _39 = const true;
        _9 = move _2;
        _14 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb1, unwind: bb29];
    }

    bb1: {
        _13 = move (_14.0: usize);
        _15 = CheckedAdd(_13, const 1_usize);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, const 1_usize) -> [success: bb2, unwind: bb29];
    }

    bb2: {
        _12 = move (_15.0: usize);
        _16 = CheckedAdd(_12, const 1_usize);
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, const 1_usize) -> [success: bb3, unwind: bb29];
    }

    bb3: {
        _11 = move (_16.0: usize);
        _17 = CheckedAdd(_11, const 1_usize);
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb4, unwind: bb29];
    }

    bb4: {
        _10 = move (_17.0: usize);
        _39 = const false;
        _8 = <__S as _::_serde::Serializer>::serialize_tuple(move _9, move _10) -> [return: bb5, unwind: bb29];
    }

    bb5: {
        _39 = const false;
        _18 = discriminant(_8);
        switchInt(move _18) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _20 = move ((_8 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _20);
        goto -> bb23;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _19 = move ((_8 as Ok).0: <__S as _::_serde::Serializer>::SerializeTuple);
        _38 = const true;
        _7 = move _19;
        _22 = &mut _7;
        _21 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<AccountAddress>(_22, _3) -> [return: bb9, unwind: bb27];
    }

    bb9: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb11, 1: bb10, otherwise: bb7];
    }

    bb10: {
        _24 = move ((_21 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _24);
        goto -> bb22;
    }

    bb11: {
        _26 = &mut _7;
        _25 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_26, _4) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb14, 1: bb13, otherwise: bb7];
    }

    bb13: {
        _28 = move ((_25 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _28);
        goto -> bb22;
    }

    bb14: {
        _30 = &mut _7;
        _29 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_30, _5) -> [return: bb15, unwind: bb27];
    }

    bb15: {
        _31 = discriminant(_29);
        switchInt(move _31) -> [0: bb17, 1: bb16, otherwise: bb7];
    }

    bb16: {
        _32 = move ((_29 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _32);
        goto -> bb22;
    }

    bb17: {
        _34 = &mut _7;
        _33 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<bool>(_34, _6) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        _35 = discriminant(_33);
        switchInt(move _35) -> [0: bb20, 1: bb19, otherwise: bb7];
    }

    bb19: {
        _36 = move ((_33 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _36);
        goto -> bb22;
    }

    bb20: {
        _38 = const false;
        _37 = move _7;
        _0 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::end(move _37) -> [return: bb21, unwind: bb27];
    }

    bb21: {
        _38 = const false;
        goto -> bb24;
    }

    bb22: {
        drop(_7) -> [return: bb23, unwind continue];
    }

    bb23: {
        _38 = const false;
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        resume;
    }

    bb26 (cleanup): {
        drop(_7) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        switchInt(_38) -> [0: bb25, otherwise: bb26];
    }

    bb28 (cleanup): {
        drop(_9) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        switchInt(_39) -> [0: bb25, otherwise: bb28];
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize(_1: &request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _7: std::result::Result<<__S as _::_serde::Serializer>::SerializeTuple, <__S as _::_serde::Serializer>::Error>;
    let mut _8: __S;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: (usize, bool);
    let mut _13: (usize, bool);
    let mut _14: (usize, bool);
    let mut _15: isize;
    let mut _18: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _19: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _20: isize;
    let mut _22: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _23: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _24: isize;
    let mut _26: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _27: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _28: isize;
    let mut _30: <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _31: bool;
    let mut _32: bool;
    scope 1 {
        debug __field0 => _3;
        debug __field1 => _4;
        debug __field2 => _5;
        let mut _6: <__S as _::_serde::Serializer>::SerializeTuple;
        let _16: <__S as _::_serde::Serializer>::SerializeTuple;
        let _17: <__S as _::_serde::Serializer>::Error;
        scope 3 {
            debug __serde_state => _6;
            let _21: <__S as _::_serde::Serializer>::Error;
            let _25: <__S as _::_serde::Serializer>::Error;
            let _29: <__S as _::_serde::Serializer>::Error;
            scope 6 {
                debug __val => const ();
            }
            scope 7 {
                debug __err => _21;
            }
            scope 8 {
                debug __val => const ();
            }
            scope 9 {
                debug __err => _25;
            }
            scope 10 {
                debug __val => const ();
            }
            scope 11 {
                debug __err => _29;
            }
        }
        scope 4 {
            debug __val => _16;
        }
        scope 5 {
            debug __err => _17;
        }
    }
    scope 2 {
        let _3: &diem_types::event::EventKey;
        let _4: &u64;
        let _5: &u64;
    }

    bb0: {
        _31 = const false;
        _32 = const false;
        _3 = (((*_1).0: (&diem_types::event::EventKey, &u64, &u64)).0: &diem_types::event::EventKey);
        _4 = (((*_1).0: (&diem_types::event::EventKey, &u64, &u64)).1: &u64);
        _5 = (((*_1).0: (&diem_types::event::EventKey, &u64, &u64)).2: &u64);
        _32 = const true;
        _8 = move _2;
        _12 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb1, unwind: bb25];
    }

    bb1: {
        _11 = move (_12.0: usize);
        _13 = CheckedAdd(_11, const 1_usize);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb2, unwind: bb25];
    }

    bb2: {
        _10 = move (_13.0: usize);
        _14 = CheckedAdd(_10, const 1_usize);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_usize) -> [success: bb3, unwind: bb25];
    }

    bb3: {
        _9 = move (_14.0: usize);
        _32 = const false;
        _7 = <__S as _::_serde::Serializer>::serialize_tuple(move _8, move _9) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _32 = const false;
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _17 = move ((_7 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _17);
        goto -> bb19;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _16 = move ((_7 as Ok).0: <__S as _::_serde::Serializer>::SerializeTuple);
        _31 = const true;
        _6 = move _16;
        _19 = &mut _6;
        _18 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<EventKey>(_19, _3) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb10, 1: bb9, otherwise: bb6];
    }

    bb9: {
        _21 = move ((_18 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _21);
        goto -> bb18;
    }

    bb10: {
        _23 = &mut _6;
        _22 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_23, _4) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb13, 1: bb12, otherwise: bb6];
    }

    bb12: {
        _25 = move ((_22 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _25);
        goto -> bb18;
    }

    bb13: {
        _27 = &mut _6;
        _26 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_27, _5) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb16, 1: bb15, otherwise: bb6];
    }

    bb15: {
        _29 = move ((_26 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _29);
        goto -> bb18;
    }

    bb16: {
        _31 = const false;
        _30 = move _6;
        _0 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::end(move _30) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _31 = const false;
        goto -> bb20;
    }

    bb18: {
        drop(_6) -> [return: bb19, unwind continue];
    }

    bb19: {
        _31 = const false;
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_6) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_31) -> [0: bb21, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_8) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_32) -> [0: bb21, otherwise: bb24];
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize(_1: &request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _6: std::result::Result<<__S as _::_serde::Serializer>::SerializeTuple, <__S as _::_serde::Serializer>::Error>;
    let mut _7: __S;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: (usize, bool);
    let mut _11: (usize, bool);
    let mut _12: isize;
    let mut _15: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _16: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _17: isize;
    let mut _19: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _20: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _21: isize;
    let mut _23: <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _24: bool;
    let mut _25: bool;
    scope 1 {
        debug __field0 => _3;
        debug __field1 => _4;
        let mut _5: <__S as _::_serde::Serializer>::SerializeTuple;
        let _13: <__S as _::_serde::Serializer>::SerializeTuple;
        let _14: <__S as _::_serde::Serializer>::Error;
        scope 3 {
            debug __serde_state => _5;
            let _18: <__S as _::_serde::Serializer>::Error;
            let _22: <__S as _::_serde::Serializer>::Error;
            scope 6 {
                debug __val => const ();
            }
            scope 7 {
                debug __err => _18;
            }
            scope 8 {
                debug __val => const ();
            }
            scope 9 {
                debug __err => _22;
            }
        }
        scope 4 {
            debug __val => _13;
        }
        scope 5 {
            debug __err => _14;
        }
    }
    scope 2 {
        let _3: &std::option::Option<u64>;
        let _4: &std::option::Option<u64>;
    }

    bb0: {
        _24 = const false;
        _25 = const false;
        _3 = (((*_1).0: (&std::option::Option<u64>, &std::option::Option<u64>)).0: &std::option::Option<u64>);
        _4 = (((*_1).0: (&std::option::Option<u64>, &std::option::Option<u64>)).1: &std::option::Option<u64>);
        _25 = const true;
        _7 = move _2;
        _10 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb1, unwind: bb21];
    }

    bb1: {
        _9 = move (_10.0: usize);
        _11 = CheckedAdd(_9, const 1_usize);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_usize) -> [success: bb2, unwind: bb21];
    }

    bb2: {
        _8 = move (_11.0: usize);
        _25 = const false;
        _6 = <__S as _::_serde::Serializer>::serialize_tuple(move _7, move _8) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _25 = const false;
        _12 = discriminant(_6);
        switchInt(move _12) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _14 = move ((_6 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _14);
        goto -> bb15;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _13 = move ((_6 as Ok).0: <__S as _::_serde::Serializer>::SerializeTuple);
        _24 = const true;
        _5 = move _13;
        _16 = &mut _5;
        _15 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<std::option::Option<u64>>(_16, _3) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb8, otherwise: bb5];
    }

    bb8: {
        _18 = move ((_15 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _18);
        goto -> bb14;
    }

    bb9: {
        _20 = &mut _5;
        _19 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<std::option::Option<u64>>(_20, _4) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb12, 1: bb11, otherwise: bb5];
    }

    bb11: {
        _22 = move ((_19 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _22);
        goto -> bb14;
    }

    bb12: {
        _24 = const false;
        _23 = move _5;
        _0 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::end(move _23) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        _24 = const false;
        goto -> bb16;
    }

    bb14: {
        drop(_5) -> [return: bb15, unwind continue];
    }

    bb15: {
        _24 = const false;
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_5) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_24) -> [0: bb17, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_7) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_25) -> [0: bb17, otherwise: bb20];
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize(_1: &request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _7: std::result::Result<<__S as _::_serde::Serializer>::SerializeTuple, <__S as _::_serde::Serializer>::Error>;
    let mut _8: __S;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: (usize, bool);
    let mut _13: (usize, bool);
    let mut _14: (usize, bool);
    let mut _15: isize;
    let mut _18: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _19: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _20: isize;
    let mut _22: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _23: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _24: isize;
    let mut _26: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _27: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _28: isize;
    let mut _30: <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _31: bool;
    let mut _32: bool;
    scope 1 {
        debug __field0 => _3;
        debug __field1 => _4;
        debug __field2 => _5;
        let mut _6: <__S as _::_serde::Serializer>::SerializeTuple;
        let _16: <__S as _::_serde::Serializer>::SerializeTuple;
        let _17: <__S as _::_serde::Serializer>::Error;
        scope 3 {
            debug __serde_state => _6;
            let _21: <__S as _::_serde::Serializer>::Error;
            let _25: <__S as _::_serde::Serializer>::Error;
            let _29: <__S as _::_serde::Serializer>::Error;
            scope 6 {
                debug __val => const ();
            }
            scope 7 {
                debug __err => _21;
            }
            scope 8 {
                debug __val => const ();
            }
            scope 9 {
                debug __err => _25;
            }
            scope 10 {
                debug __val => const ();
            }
            scope 11 {
                debug __err => _29;
            }
        }
        scope 4 {
            debug __val => _16;
        }
        scope 5 {
            debug __err => _17;
        }
    }
    scope 2 {
        let _3: &diem_types::PeerId;
        let _4: &std::option::Option<u64>;
        let _5: &std::option::Option<u64>;
    }

    bb0: {
        _31 = const false;
        _32 = const false;
        _3 = (((*_1).0: (&diem_types::PeerId, &std::option::Option<u64>, &std::option::Option<u64>)).0: &diem_types::PeerId);
        _4 = (((*_1).0: (&diem_types::PeerId, &std::option::Option<u64>, &std::option::Option<u64>)).1: &std::option::Option<u64>);
        _5 = (((*_1).0: (&diem_types::PeerId, &std::option::Option<u64>, &std::option::Option<u64>)).2: &std::option::Option<u64>);
        _32 = const true;
        _8 = move _2;
        _12 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb1, unwind: bb25];
    }

    bb1: {
        _11 = move (_12.0: usize);
        _13 = CheckedAdd(_11, const 1_usize);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb2, unwind: bb25];
    }

    bb2: {
        _10 = move (_13.0: usize);
        _14 = CheckedAdd(_10, const 1_usize);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_usize) -> [success: bb3, unwind: bb25];
    }

    bb3: {
        _9 = move (_14.0: usize);
        _32 = const false;
        _7 = <__S as _::_serde::Serializer>::serialize_tuple(move _8, move _9) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _32 = const false;
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _17 = move ((_7 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _17);
        goto -> bb19;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _16 = move ((_7 as Ok).0: <__S as _::_serde::Serializer>::SerializeTuple);
        _31 = const true;
        _6 = move _16;
        _19 = &mut _6;
        _18 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<AccountAddress>(_19, _3) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb10, 1: bb9, otherwise: bb6];
    }

    bb9: {
        _21 = move ((_18 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _21);
        goto -> bb18;
    }

    bb10: {
        _23 = &mut _6;
        _22 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<std::option::Option<u64>>(_23, _4) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb13, 1: bb12, otherwise: bb6];
    }

    bb12: {
        _25 = move ((_22 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _25);
        goto -> bb18;
    }

    bb13: {
        _27 = &mut _6;
        _26 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<std::option::Option<u64>>(_27, _5) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb16, 1: bb15, otherwise: bb6];
    }

    bb15: {
        _29 = move ((_26 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _29);
        goto -> bb18;
    }

    bb16: {
        _31 = const false;
        _30 = move _6;
        _0 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::end(move _30) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _31 = const false;
        goto -> bb20;
    }

    bb18: {
        drop(_6) -> [return: bb19, unwind continue];
    }

    bb19: {
        _31 = const false;
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_6) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_31) -> [0: bb21, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_8) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_32) -> [0: bb21, otherwise: bb24];
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize(_1: &request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _7: std::result::Result<<__S as _::_serde::Serializer>::SerializeTuple, <__S as _::_serde::Serializer>::Error>;
    let mut _8: __S;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: (usize, bool);
    let mut _13: (usize, bool);
    let mut _14: (usize, bool);
    let mut _15: isize;
    let mut _18: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _19: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _20: isize;
    let mut _22: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _23: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _24: isize;
    let mut _26: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _27: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _28: isize;
    let mut _30: <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _31: bool;
    let mut _32: bool;
    scope 1 {
        debug __field0 => _3;
        debug __field1 => _4;
        debug __field2 => _5;
        let mut _6: <__S as _::_serde::Serializer>::SerializeTuple;
        let _16: <__S as _::_serde::Serializer>::SerializeTuple;
        let _17: <__S as _::_serde::Serializer>::Error;
        scope 3 {
            debug __serde_state => _6;
            let _21: <__S as _::_serde::Serializer>::Error;
            let _25: <__S as _::_serde::Serializer>::Error;
            let _29: <__S as _::_serde::Serializer>::Error;
            scope 6 {
                debug __val => const ();
            }
            scope 7 {
                debug __err => _21;
            }
            scope 8 {
                debug __val => const ();
            }
            scope 9 {
                debug __err => _25;
            }
            scope 10 {
                debug __val => const ();
            }
            scope 11 {
                debug __err => _29;
            }
        }
        scope 4 {
            debug __val => _16;
        }
        scope 5 {
            debug __err => _17;
        }
    }
    scope 2 {
        let _3: &u64;
        let _4: &u64;
        let _5: &bool;
    }

    bb0: {
        _31 = const false;
        _32 = const false;
        _3 = (((*_1).0: (&u64, &u64, &bool)).0: &u64);
        _4 = (((*_1).0: (&u64, &u64, &bool)).1: &u64);
        _5 = (((*_1).0: (&u64, &u64, &bool)).2: &bool);
        _32 = const true;
        _8 = move _2;
        _12 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb1, unwind: bb25];
    }

    bb1: {
        _11 = move (_12.0: usize);
        _13 = CheckedAdd(_11, const 1_usize);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb2, unwind: bb25];
    }

    bb2: {
        _10 = move (_13.0: usize);
        _14 = CheckedAdd(_10, const 1_usize);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_usize) -> [success: bb3, unwind: bb25];
    }

    bb3: {
        _9 = move (_14.0: usize);
        _32 = const false;
        _7 = <__S as _::_serde::Serializer>::serialize_tuple(move _8, move _9) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _32 = const false;
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _17 = move ((_7 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _17);
        goto -> bb19;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _16 = move ((_7 as Ok).0: <__S as _::_serde::Serializer>::SerializeTuple);
        _31 = const true;
        _6 = move _16;
        _19 = &mut _6;
        _18 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_19, _3) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb10, 1: bb9, otherwise: bb6];
    }

    bb9: {
        _21 = move ((_18 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _21);
        goto -> bb18;
    }

    bb10: {
        _23 = &mut _6;
        _22 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_23, _4) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb13, 1: bb12, otherwise: bb6];
    }

    bb12: {
        _25 = move ((_22 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _25);
        goto -> bb18;
    }

    bb13: {
        _27 = &mut _6;
        _26 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<bool>(_27, _5) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb16, 1: bb15, otherwise: bb6];
    }

    bb15: {
        _29 = move ((_26 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _29);
        goto -> bb18;
    }

    bb16: {
        _31 = const false;
        _30 = move _6;
        _0 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::end(move _30) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _31 = const false;
        goto -> bb20;
    }

    bb18: {
        drop(_6) -> [return: bb19, unwind continue];
    }

    bb19: {
        _31 = const false;
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_6) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_31) -> [0: bb21, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_8) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_32) -> [0: bb21, otherwise: bb24];
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize(_1: &request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _9: std::result::Result<<__S as _::_serde::Serializer>::SerializeTuple, <__S as _::_serde::Serializer>::Error>;
    let mut _10: __S;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: (usize, bool);
    let mut _17: (usize, bool);
    let mut _18: (usize, bool);
    let mut _19: (usize, bool);
    let mut _20: (usize, bool);
    let mut _21: isize;
    let mut _24: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _25: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _26: isize;
    let mut _28: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _29: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _30: isize;
    let mut _32: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _33: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _34: isize;
    let mut _36: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _37: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _38: isize;
    let mut _40: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _41: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _42: isize;
    let mut _44: <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _45: bool;
    let mut _46: bool;
    scope 1 {
        debug __field0 => _3;
        debug __field1 => _4;
        debug __field2 => _5;
        debug __field3 => _6;
        debug __field4 => _7;
        let mut _8: <__S as _::_serde::Serializer>::SerializeTuple;
        let _22: <__S as _::_serde::Serializer>::SerializeTuple;
        let _23: <__S as _::_serde::Serializer>::Error;
        scope 3 {
            debug __serde_state => _8;
            let _27: <__S as _::_serde::Serializer>::Error;
            let _31: <__S as _::_serde::Serializer>::Error;
            let _35: <__S as _::_serde::Serializer>::Error;
            let _39: <__S as _::_serde::Serializer>::Error;
            let _43: <__S as _::_serde::Serializer>::Error;
            scope 6 {
                debug __val => const ();
            }
            scope 7 {
                debug __err => _27;
            }
            scope 8 {
                debug __val => const ();
            }
            scope 9 {
                debug __err => _31;
            }
            scope 10 {
                debug __val => const ();
            }
            scope 11 {
                debug __err => _35;
            }
            scope 12 {
                debug __val => const ();
            }
            scope 13 {
                debug __err => _39;
            }
            scope 14 {
                debug __val => const ();
            }
            scope 15 {
                debug __err => _43;
            }
        }
        scope 4 {
            debug __val => _22;
        }
        scope 5 {
            debug __err => _23;
        }
    }
    scope 2 {
        let _3: &diem_types::PeerId;
        let _4: &u64;
        let _5: &u64;
        let _6: &bool;
        let _7: &std::option::Option<u64>;
    }

    bb0: {
        _45 = const false;
        _46 = const false;
        _3 = (((*_1).0: (&diem_types::PeerId, &u64, &u64, &bool, &std::option::Option<u64>)).0: &diem_types::PeerId);
        _4 = (((*_1).0: (&diem_types::PeerId, &u64, &u64, &bool, &std::option::Option<u64>)).1: &u64);
        _5 = (((*_1).0: (&diem_types::PeerId, &u64, &u64, &bool, &std::option::Option<u64>)).2: &u64);
        _6 = (((*_1).0: (&diem_types::PeerId, &u64, &u64, &bool, &std::option::Option<u64>)).3: &bool);
        _7 = (((*_1).0: (&diem_types::PeerId, &u64, &u64, &bool, &std::option::Option<u64>)).4: &std::option::Option<u64>);
        _46 = const true;
        _10 = move _2;
        _16 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb1, unwind: bb33];
    }

    bb1: {
        _15 = move (_16.0: usize);
        _17 = CheckedAdd(_15, const 1_usize);
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 1_usize) -> [success: bb2, unwind: bb33];
    }

    bb2: {
        _14 = move (_17.0: usize);
        _18 = CheckedAdd(_14, const 1_usize);
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _14, const 1_usize) -> [success: bb3, unwind: bb33];
    }

    bb3: {
        _13 = move (_18.0: usize);
        _19 = CheckedAdd(_13, const 1_usize);
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _13, const 1_usize) -> [success: bb4, unwind: bb33];
    }

    bb4: {
        _12 = move (_19.0: usize);
        _20 = CheckedAdd(_12, const 1_usize);
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, const 1_usize) -> [success: bb5, unwind: bb33];
    }

    bb5: {
        _11 = move (_20.0: usize);
        _46 = const false;
        _9 = <__S as _::_serde::Serializer>::serialize_tuple(move _10, move _11) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _46 = const false;
        _21 = discriminant(_9);
        switchInt(move _21) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _23 = move ((_9 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _23);
        goto -> bb27;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _22 = move ((_9 as Ok).0: <__S as _::_serde::Serializer>::SerializeTuple);
        _45 = const true;
        _8 = move _22;
        _25 = &mut _8;
        _24 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<AccountAddress>(_25, _3) -> [return: bb10, unwind: bb31];
    }

    bb10: {
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb12, 1: bb11, otherwise: bb8];
    }

    bb11: {
        _27 = move ((_24 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _27);
        goto -> bb26;
    }

    bb12: {
        _29 = &mut _8;
        _28 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_29, _4) -> [return: bb13, unwind: bb31];
    }

    bb13: {
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb15, 1: bb14, otherwise: bb8];
    }

    bb14: {
        _31 = move ((_28 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _31);
        goto -> bb26;
    }

    bb15: {
        _33 = &mut _8;
        _32 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_33, _5) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _34 = discriminant(_32);
        switchInt(move _34) -> [0: bb18, 1: bb17, otherwise: bb8];
    }

    bb17: {
        _35 = move ((_32 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _35);
        goto -> bb26;
    }

    bb18: {
        _37 = &mut _8;
        _36 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<bool>(_37, _6) -> [return: bb19, unwind: bb31];
    }

    bb19: {
        _38 = discriminant(_36);
        switchInt(move _38) -> [0: bb21, 1: bb20, otherwise: bb8];
    }

    bb20: {
        _39 = move ((_36 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _39);
        goto -> bb26;
    }

    bb21: {
        _41 = &mut _8;
        _40 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<std::option::Option<u64>>(_41, _7) -> [return: bb22, unwind: bb31];
    }

    bb22: {
        _42 = discriminant(_40);
        switchInt(move _42) -> [0: bb24, 1: bb23, otherwise: bb8];
    }

    bb23: {
        _43 = move ((_40 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _43);
        goto -> bb26;
    }

    bb24: {
        _45 = const false;
        _44 = move _8;
        _0 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::end(move _44) -> [return: bb25, unwind: bb31];
    }

    bb25: {
        _45 = const false;
        goto -> bb28;
    }

    bb26: {
        drop(_8) -> [return: bb27, unwind continue];
    }

    bb27: {
        _45 = const false;
        goto -> bb28;
    }

    bb28: {
        return;
    }

    bb29 (cleanup): {
        resume;
    }

    bb30 (cleanup): {
        drop(_8) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        switchInt(_45) -> [0: bb29, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_10) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        switchInt(_46) -> [0: bb29, otherwise: bb32];
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize(_1: &request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _7: std::result::Result<<__S as _::_serde::Serializer>::SerializeTuple, <__S as _::_serde::Serializer>::Error>;
    let mut _8: __S;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: (usize, bool);
    let mut _13: (usize, bool);
    let mut _14: (usize, bool);
    let mut _15: isize;
    let mut _18: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _19: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _20: isize;
    let mut _22: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _23: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _24: isize;
    let mut _26: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _27: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _28: isize;
    let mut _30: <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _31: bool;
    let mut _32: bool;
    scope 1 {
        debug __field0 => _3;
        debug __field1 => _4;
        debug __field2 => _5;
        let mut _6: <__S as _::_serde::Serializer>::SerializeTuple;
        let _16: <__S as _::_serde::Serializer>::SerializeTuple;
        let _17: <__S as _::_serde::Serializer>::Error;
        scope 3 {
            debug __serde_state => _6;
            let _21: <__S as _::_serde::Serializer>::Error;
            let _25: <__S as _::_serde::Serializer>::Error;
            let _29: <__S as _::_serde::Serializer>::Error;
            scope 6 {
                debug __val => const ();
            }
            scope 7 {
                debug __err => _21;
            }
            scope 8 {
                debug __val => const ();
            }
            scope 9 {
                debug __err => _25;
            }
            scope 10 {
                debug __val => const ();
            }
            scope 11 {
                debug __err => _29;
            }
        }
        scope 4 {
            debug __val => _16;
        }
        scope 5 {
            debug __err => _17;
        }
    }
    scope 2 {
        let _3: &diem_types::event::EventKey;
        let _4: &u64;
        let _5: &u64;
    }

    bb0: {
        _31 = const false;
        _32 = const false;
        _3 = (((*_1).0: (&diem_types::event::EventKey, &u64, &u64)).0: &diem_types::event::EventKey);
        _4 = (((*_1).0: (&diem_types::event::EventKey, &u64, &u64)).1: &u64);
        _5 = (((*_1).0: (&diem_types::event::EventKey, &u64, &u64)).2: &u64);
        _32 = const true;
        _8 = move _2;
        _12 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb1, unwind: bb25];
    }

    bb1: {
        _11 = move (_12.0: usize);
        _13 = CheckedAdd(_11, const 1_usize);
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb2, unwind: bb25];
    }

    bb2: {
        _10 = move (_13.0: usize);
        _14 = CheckedAdd(_10, const 1_usize);
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _10, const 1_usize) -> [success: bb3, unwind: bb25];
    }

    bb3: {
        _9 = move (_14.0: usize);
        _32 = const false;
        _7 = <__S as _::_serde::Serializer>::serialize_tuple(move _8, move _9) -> [return: bb4, unwind: bb25];
    }

    bb4: {
        _32 = const false;
        _15 = discriminant(_7);
        switchInt(move _15) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _17 = move ((_7 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _17);
        goto -> bb19;
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _16 = move ((_7 as Ok).0: <__S as _::_serde::Serializer>::SerializeTuple);
        _31 = const true;
        _6 = move _16;
        _19 = &mut _6;
        _18 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<EventKey>(_19, _3) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        _20 = discriminant(_18);
        switchInt(move _20) -> [0: bb10, 1: bb9, otherwise: bb6];
    }

    bb9: {
        _21 = move ((_18 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _21);
        goto -> bb18;
    }

    bb10: {
        _23 = &mut _6;
        _22 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_23, _4) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb13, 1: bb12, otherwise: bb6];
    }

    bb12: {
        _25 = move ((_22 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _25);
        goto -> bb18;
    }

    bb13: {
        _27 = &mut _6;
        _26 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<u64>(_27, _5) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb16, 1: bb15, otherwise: bb6];
    }

    bb15: {
        _29 = move ((_26 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _29);
        goto -> bb18;
    }

    bb16: {
        _31 = const false;
        _30 = move _6;
        _0 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::end(move _30) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _31 = const false;
        goto -> bb20;
    }

    bb18: {
        drop(_6) -> [return: bb19, unwind continue];
    }

    bb19: {
        _31 = const false;
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        drop(_6) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        switchInt(_31) -> [0: bb21, otherwise: bb22];
    }

    bb24 (cleanup): {
        drop(_8) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        switchInt(_32) -> [0: bb21, otherwise: bb24];
    }
}

fn request::_::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize::<impl at sdk/client/src/request.rs:11:30: 11:39>::serialize(_1: &request::_::<impl Serialize for request::MethodRequest>::serialize::__AdjacentlyTagged<'_>, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _6: std::result::Result<<__S as _::_serde::Serializer>::SerializeTuple, <__S as _::_serde::Serializer>::Error>;
    let mut _7: __S;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: (usize, bool);
    let mut _11: (usize, bool);
    let mut _12: isize;
    let mut _15: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _16: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _17: isize;
    let mut _19: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _20: &mut <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _21: isize;
    let mut _23: <__S as _::_serde::Serializer>::SerializeTuple;
    let mut _24: bool;
    let mut _25: bool;
    scope 1 {
        debug __field0 => _3;
        debug __field1 => _4;
        let mut _5: <__S as _::_serde::Serializer>::SerializeTuple;
        let _13: <__S as _::_serde::Serializer>::SerializeTuple;
        let _14: <__S as _::_serde::Serializer>::Error;
        scope 3 {
            debug __serde_state => _5;
            let _18: <__S as _::_serde::Serializer>::Error;
            let _22: <__S as _::_serde::Serializer>::Error;
            scope 6 {
                debug __val => const ();
            }
            scope 7 {
                debug __err => _18;
            }
            scope 8 {
                debug __val => const ();
            }
            scope 9 {
                debug __err => _22;
            }
        }
        scope 4 {
            debug __val => _13;
        }
        scope 5 {
            debug __err => _14;
        }
    }
    scope 2 {
        let _3: &diem_types::event::EventKey;
        let _4: &std::option::Option<u64>;
    }

    bb0: {
        _24 = const false;
        _25 = const false;
        _3 = (((*_1).0: (&diem_types::event::EventKey, &std::option::Option<u64>)).0: &diem_types::event::EventKey);
        _4 = (((*_1).0: (&diem_types::event::EventKey, &std::option::Option<u64>)).1: &std::option::Option<u64>);
        _25 = const true;
        _7 = move _2;
        _10 = CheckedAdd(const 0_usize, const 1_usize);
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", const 0_usize, const 1_usize) -> [success: bb1, unwind: bb21];
    }

    bb1: {
        _9 = move (_10.0: usize);
        _11 = CheckedAdd(_9, const 1_usize);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, const 1_usize) -> [success: bb2, unwind: bb21];
    }

    bb2: {
        _8 = move (_11.0: usize);
        _25 = const false;
        _6 = <__S as _::_serde::Serializer>::serialize_tuple(move _7, move _8) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _25 = const false;
        _12 = discriminant(_6);
        switchInt(move _12) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _14 = move ((_6 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _14);
        goto -> bb15;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _13 = move ((_6 as Ok).0: <__S as _::_serde::Serializer>::SerializeTuple);
        _24 = const true;
        _5 = move _13;
        _16 = &mut _5;
        _15 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<EventKey>(_16, _3) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb8, otherwise: bb5];
    }

    bb8: {
        _18 = move ((_15 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _18);
        goto -> bb14;
    }

    bb9: {
        _20 = &mut _5;
        _19 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::serialize_element::<std::option::Option<u64>>(_20, _4) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb12, 1: bb11, otherwise: bb5];
    }

    bb11: {
        _22 = move ((_19 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _22);
        goto -> bb14;
    }

    bb12: {
        _24 = const false;
        _23 = move _5;
        _0 = <<__S as _::_serde::Serializer>::SerializeTuple as SerializeTuple>::end(move _23) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        _24 = const false;
        goto -> bb16;
    }

    bb14: {
        drop(_5) -> [return: bb15, unwind continue];
    }

    bb15: {
        _24 = const false;
        goto -> bb16;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_5) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        switchInt(_24) -> [0: bb17, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_7) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        switchInt(_25) -> [0: bb17, otherwise: bb20];
    }
}

fn request::<impl at sdk/client/src/request.rs:11:41: 11:46>::clone(_1: &request::MethodRequest) -> request::MethodRequest {
    debug self => _1;
    let mut _0: request::MethodRequest;
    let mut _2: isize;
    let _3: &(std::string::String,);
    let mut _4: (std::string::String,);
    let _5: &(std::option::Option<u64>,);
    let mut _6: (std::option::Option<u64>,);
    let _7: &diem_types::PeerId;
    let _8: &std::option::Option<u64>;
    let mut _9: diem_types::PeerId;
    let mut _10: std::option::Option<u64>;
    let _11: &u64;
    let _12: &u64;
    let _13: &bool;
    let mut _14: u64;
    let mut _15: u64;
    let mut _16: bool;
    let _17: &diem_types::PeerId;
    let _18: &u64;
    let _19: &bool;
    let mut _20: diem_types::PeerId;
    let mut _21: u64;
    let mut _22: bool;
    let _23: &diem_types::PeerId;
    let _24: &u64;
    let _25: &u64;
    let _26: &bool;
    let mut _27: diem_types::PeerId;
    let mut _28: u64;
    let mut _29: u64;
    let mut _30: bool;
    let _31: &diem_types::event::EventKey;
    let _32: &u64;
    let _33: &u64;
    let mut _34: diem_types::event::EventKey;
    let mut _35: u64;
    let mut _36: u64;
    let _37: &[(); 0];
    let _38: &[(); 0];
    let _39: &(u64,);
    let mut _40: (u64,);
    let _41: &std::option::Option<u64>;
    let _42: &std::option::Option<u64>;
    let mut _43: std::option::Option<u64>;
    let mut _44: std::option::Option<u64>;
    let _45: &diem_types::PeerId;
    let _46: &std::option::Option<u64>;
    let _47: &std::option::Option<u64>;
    let mut _48: diem_types::PeerId;
    let mut _49: std::option::Option<u64>;
    let mut _50: std::option::Option<u64>;
    let _51: &u64;
    let _52: &u64;
    let _53: &bool;
    let mut _54: u64;
    let mut _55: u64;
    let mut _56: bool;
    let _57: &diem_types::PeerId;
    let _58: &u64;
    let _59: &u64;
    let _60: &bool;
    let _61: &std::option::Option<u64>;
    let mut _62: diem_types::PeerId;
    let mut _63: u64;
    let mut _64: u64;
    let mut _65: bool;
    let mut _66: std::option::Option<u64>;
    let _67: &diem_types::event::EventKey;
    let _68: &u64;
    let _69: &u64;
    let mut _70: diem_types::event::EventKey;
    let mut _71: u64;
    let mut _72: u64;
    let _73: &diem_types::event::EventKey;
    let _74: &std::option::Option<u64>;
    let mut _75: diem_types::event::EventKey;
    let mut _76: std::option::Option<u64>;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _5;
    }
    scope 3 {
        debug __self_0 => _7;
        debug __self_1 => _8;
    }
    scope 4 {
        debug __self_0 => _11;
        debug __self_1 => _12;
        debug __self_2 => _13;
    }
    scope 5 {
        debug __self_0 => _17;
        debug __self_1 => _18;
        debug __self_2 => _19;
    }
    scope 6 {
        debug __self_0 => _23;
        debug __self_1 => _24;
        debug __self_2 => _25;
        debug __self_3 => _26;
    }
    scope 7 {
        debug __self_0 => _31;
        debug __self_1 => _32;
        debug __self_2 => _33;
    }
    scope 8 {
        debug __self_0 => _37;
    }
    scope 9 {
        debug __self_0 => _38;
    }
    scope 10 {
        debug __self_0 => _39;
    }
    scope 11 {
        debug __self_0 => _41;
        debug __self_1 => _42;
    }
    scope 12 {
        debug __self_0 => _45;
        debug __self_1 => _46;
        debug __self_2 => _47;
    }
    scope 13 {
        debug __self_0 => _51;
        debug __self_1 => _52;
        debug __self_2 => _53;
    }
    scope 14 {
        debug __self_0 => _57;
        debug __self_1 => _58;
        debug __self_2 => _59;
        debug __self_3 => _60;
        debug __self_4 => _61;
    }
    scope 15 {
        debug __self_0 => _67;
        debug __self_1 => _68;
        debug __self_2 => _69;
    }
    scope 16 {
        debug __self_0 => _73;
        debug __self_1 => _74;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb7, 3: bb10, 4: bb11, 5: bb13, 6: bb15, 7: bb17, 8: bb18, 9: bb19, 10: bb20, 11: bb23, 12: bb27, 13: bb28, 14: bb31, 15: bb1, otherwise: bb2];
    }

    bb1: {
        _73 = &(((*_1) as GetEventByVersionWithProof).0: diem_types::event::EventKey);
        _74 = &(((*_1) as GetEventByVersionWithProof).1: std::option::Option<u64>);
        _75 = <EventKey as Clone>::clone(_73) -> [return: bb33, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &(((*_1) as Submit).0: (std::string::String,));
        _4 = <(std::string::String,) as Clone>::clone(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = request::MethodRequest::Submit(move _4);
        goto -> bb35;
    }

    bb5: {
        _5 = &(((*_1) as GetMetadata).0: (std::option::Option<u64>,));
        _6 = <(std::option::Option<u64>,) as Clone>::clone(_5) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = request::MethodRequest::GetMetadata(move _6);
        goto -> bb35;
    }

    bb7: {
        _7 = &(((*_1) as GetAccount).0: diem_types::PeerId);
        _8 = &(((*_1) as GetAccount).1: std::option::Option<u64>);
        _9 = <AccountAddress as Clone>::clone(_7) -> [return: bb8, unwind continue];
    }

    bb8: {
        _10 = <std::option::Option<u64> as Clone>::clone(_8) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = request::MethodRequest::GetAccount(move _9, move _10);
        goto -> bb35;
    }

    bb10: {
        _11 = &(((*_1) as GetTransactions).0: u64);
        _12 = &(((*_1) as GetTransactions).1: u64);
        _13 = &(((*_1) as GetTransactions).2: bool);
        _14 = (*_11);
        _15 = (*_12);
        _16 = (*_13);
        _0 = request::MethodRequest::GetTransactions(move _14, move _15, move _16);
        goto -> bb35;
    }

    bb11: {
        _17 = &(((*_1) as GetAccountTransaction).0: diem_types::PeerId);
        _18 = &(((*_1) as GetAccountTransaction).1: u64);
        _19 = &(((*_1) as GetAccountTransaction).2: bool);
        _20 = <AccountAddress as Clone>::clone(_17) -> [return: bb12, unwind continue];
    }

    bb12: {
        _21 = (*_18);
        _22 = (*_19);
        _0 = request::MethodRequest::GetAccountTransaction(move _20, move _21, move _22);
        goto -> bb35;
    }

    bb13: {
        _23 = &(((*_1) as GetAccountTransactions).0: diem_types::PeerId);
        _24 = &(((*_1) as GetAccountTransactions).1: u64);
        _25 = &(((*_1) as GetAccountTransactions).2: u64);
        _26 = &(((*_1) as GetAccountTransactions).3: bool);
        _27 = <AccountAddress as Clone>::clone(_23) -> [return: bb14, unwind continue];
    }

    bb14: {
        _28 = (*_24);
        _29 = (*_25);
        _30 = (*_26);
        _0 = request::MethodRequest::GetAccountTransactions(move _27, move _28, move _29, move _30);
        goto -> bb35;
    }

    bb15: {
        _31 = &(((*_1) as GetEvents).0: diem_types::event::EventKey);
        _32 = &(((*_1) as GetEvents).1: u64);
        _33 = &(((*_1) as GetEvents).2: u64);
        _34 = <EventKey as Clone>::clone(_31) -> [return: bb16, unwind continue];
    }

    bb16: {
        _35 = (*_32);
        _36 = (*_33);
        _0 = request::MethodRequest::GetEvents(move _34, move _35, move _36);
        goto -> bb35;
    }

    bb17: {
        _37 = &(((*_1) as GetCurrencies).0: [(); 0]);
        _0 = request::MethodRequest::GetCurrencies(const []);
        goto -> bb35;
    }

    bb18: {
        _38 = &(((*_1) as GetNetworkStatus).0: [(); 0]);
        _0 = request::MethodRequest::GetNetworkStatus(const []);
        goto -> bb35;
    }

    bb19: {
        _39 = &(((*_1) as GetStateProof).0: (u64,));
        _40 = (*_39);
        _0 = request::MethodRequest::GetStateProof(move _40);
        goto -> bb35;
    }

    bb20: {
        _41 = &(((*_1) as GetAccumulatorConsistencyProof).0: std::option::Option<u64>);
        _42 = &(((*_1) as GetAccumulatorConsistencyProof).1: std::option::Option<u64>);
        _43 = <std::option::Option<u64> as Clone>::clone(_41) -> [return: bb21, unwind continue];
    }

    bb21: {
        _44 = <std::option::Option<u64> as Clone>::clone(_42) -> [return: bb22, unwind continue];
    }

    bb22: {
        _0 = request::MethodRequest::GetAccumulatorConsistencyProof(move _43, move _44);
        goto -> bb35;
    }

    bb23: {
        _45 = &(((*_1) as GetAccountStateWithProof).0: diem_types::PeerId);
        _46 = &(((*_1) as GetAccountStateWithProof).1: std::option::Option<u64>);
        _47 = &(((*_1) as GetAccountStateWithProof).2: std::option::Option<u64>);
        _48 = <AccountAddress as Clone>::clone(_45) -> [return: bb24, unwind continue];
    }

    bb24: {
        _49 = <std::option::Option<u64> as Clone>::clone(_46) -> [return: bb25, unwind continue];
    }

    bb25: {
        _50 = <std::option::Option<u64> as Clone>::clone(_47) -> [return: bb26, unwind continue];
    }

    bb26: {
        _0 = request::MethodRequest::GetAccountStateWithProof(move _48, move _49, move _50);
        goto -> bb35;
    }

    bb27: {
        _51 = &(((*_1) as GetTransactionsWithProofs).0: u64);
        _52 = &(((*_1) as GetTransactionsWithProofs).1: u64);
        _53 = &(((*_1) as GetTransactionsWithProofs).2: bool);
        _54 = (*_51);
        _55 = (*_52);
        _56 = (*_53);
        _0 = request::MethodRequest::GetTransactionsWithProofs(move _54, move _55, move _56);
        goto -> bb35;
    }

    bb28: {
        _57 = &(((*_1) as GetAccountTransactionsWithProofs).0: diem_types::PeerId);
        _58 = &(((*_1) as GetAccountTransactionsWithProofs).1: u64);
        _59 = &(((*_1) as GetAccountTransactionsWithProofs).2: u64);
        _60 = &(((*_1) as GetAccountTransactionsWithProofs).3: bool);
        _61 = &(((*_1) as GetAccountTransactionsWithProofs).4: std::option::Option<u64>);
        _62 = <AccountAddress as Clone>::clone(_57) -> [return: bb29, unwind continue];
    }

    bb29: {
        _63 = (*_58);
        _64 = (*_59);
        _65 = (*_60);
        _66 = <std::option::Option<u64> as Clone>::clone(_61) -> [return: bb30, unwind continue];
    }

    bb30: {
        _0 = request::MethodRequest::GetAccountTransactionsWithProofs(move _62, move _63, move _64, move _65, move _66);
        goto -> bb35;
    }

    bb31: {
        _67 = &(((*_1) as GetEventsWithProofs).0: diem_types::event::EventKey);
        _68 = &(((*_1) as GetEventsWithProofs).1: u64);
        _69 = &(((*_1) as GetEventsWithProofs).2: u64);
        _70 = <EventKey as Clone>::clone(_67) -> [return: bb32, unwind continue];
    }

    bb32: {
        _71 = (*_68);
        _72 = (*_69);
        _0 = request::MethodRequest::GetEventsWithProofs(move _70, move _71, move _72);
        goto -> bb35;
    }

    bb33: {
        _76 = <std::option::Option<u64> as Clone>::clone(_74) -> [return: bb34, unwind continue];
    }

    bb34: {
        _0 = request::MethodRequest::GetEventByVersionWithProof(move _75, move _76);
        goto -> bb35;
    }

    bb35: {
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::submit(_1: &SignedTransaction) -> std::result::Result<request::MethodRequest, bcs::Error> {
    debug txn => _1;
    let mut _0: std::result::Result<request::MethodRequest, bcs::Error>;
    let _2: std::string::String;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, bcs::Error>, std::vec::Vec<u8>>;
    let mut _4: std::result::Result<std::vec::Vec<u8>, bcs::Error>;
    let mut _5: isize;
    let _6: std::result::Result<std::convert::Infallible, bcs::Error>;
    let _7: std::vec::Vec<u8>;
    let mut _8: request::MethodRequest;
    let mut _9: (std::string::String,);
    scope 1 {
        debug txn_payload => _2;
    }
    scope 2 {
        debug residual => _6;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _7;
        scope 5 {
        }
    }

    bb0: {
        _4 = bcs::to_bytes::<SignedTransaction>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <std::result::Result<Vec<u8>, bcs::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Continue).0: std::vec::Vec<u8>);
        _2 = encode::<Vec<u8>>(move _7) -> [return: bb6, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, bcs::Error>);
        _0 = <std::result::Result<request::MethodRequest, bcs::Error> as FromResidual<std::result::Result<Infallible, bcs::Error>>>::from_residual(move _6) -> [return: bb7, unwind continue];
    }

    bb6: {
        _9 = (move _2,);
        _8 = request::MethodRequest::Submit(move _9);
        _0 = std::result::Result::<request::MethodRequest, bcs::Error>::Ok(move _8);
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_metadata_by_version(_1: u64) -> request::MethodRequest {
    debug version => _1;
    let mut _0: request::MethodRequest;
    let mut _2: (std::option::Option<u64>,);
    let mut _3: std::option::Option<u64>;

    bb0: {
        _3 = std::option::Option::<u64>::Some(_1);
        _2 = (move _3,);
        _0 = request::MethodRequest::GetMetadata(move _2);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_metadata() -> request::MethodRequest {
    let mut _0: request::MethodRequest;
    let mut _1: (std::option::Option<u64>,);
    let mut _2: std::option::Option<u64>;

    bb0: {
        _2 = std::option::Option::<u64>::None;
        _1 = (move _2,);
        _0 = request::MethodRequest::GetMetadata(move _1);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_account_by_version(_1: AccountAddress, _2: u64) -> request::MethodRequest {
    debug address => _1;
    debug version => _2;
    let mut _0: request::MethodRequest;
    let mut _3: std::option::Option<u64>;

    bb0: {
        _3 = std::option::Option::<u64>::Some(_2);
        _0 = request::MethodRequest::GetAccount(_1, move _3);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_account(_1: AccountAddress) -> request::MethodRequest {
    debug address => _1;
    let mut _0: request::MethodRequest;
    let mut _2: std::option::Option<u64>;

    bb0: {
        _2 = std::option::Option::<u64>::None;
        _0 = request::MethodRequest::GetAccount(_1, move _2);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_transactions(_1: u64, _2: u64, _3: bool) -> request::MethodRequest {
    debug start_seq => _1;
    debug limit => _2;
    debug include_events => _3;
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetTransactions(_1, _2, _3);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_account_transaction(_1: AccountAddress, _2: u64, _3: bool) -> request::MethodRequest {
    debug address => _1;
    debug seq => _2;
    debug include_events => _3;
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccountTransaction(_1, _2, _3);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_account_transactions(_1: AccountAddress, _2: u64, _3: u64, _4: bool) -> request::MethodRequest {
    debug address => _1;
    debug start_seq => _2;
    debug limit => _3;
    debug include_events => _4;
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccountTransactions(_1, _2, _3, _4);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_events(_1: EventKey, _2: u64, _3: u64) -> request::MethodRequest {
    debug key => _1;
    debug start_seq => _2;
    debug limit => _3;
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetEvents(_1, _2, _3);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_currencies() -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetCurrencies(const []);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_network_status() -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetNetworkStatus(const []);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_state_proof(_1: u64) -> request::MethodRequest {
    debug from_version => _1;
    let mut _0: request::MethodRequest;
    let mut _2: (u64,);

    bb0: {
        _2 = (_1,);
        _0 = request::MethodRequest::GetStateProof(move _2);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_accumulator_consistency_proof(_1: std::option::Option<u64>, _2: std::option::Option<u64>) -> request::MethodRequest {
    debug client_known_version => _1;
    debug ledger_version => _2;
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccumulatorConsistencyProof(_1, _2);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_account_state_with_proof(_1: AccountAddress, _2: std::option::Option<u64>, _3: std::option::Option<u64>) -> request::MethodRequest {
    debug address => _1;
    debug version => _2;
    debug ledger_version => _3;
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccountStateWithProof(_1, _2, _3);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_transactions_with_proofs(_1: u64, _2: u64, _3: bool) -> request::MethodRequest {
    debug start_version => _1;
    debug limit => _2;
    debug include_events => _3;
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetTransactionsWithProofs(_1, _2, _3);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_account_transactions_with_proofs(_1: AccountAddress, _2: u64, _3: u64, _4: bool, _5: std::option::Option<u64>) -> request::MethodRequest {
    debug address => _1;
    debug start_seq => _2;
    debug limit => _3;
    debug include_events => _4;
    debug ledger_version => _5;
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccountTransactionsWithProofs(_1, _2, _3, _4, _5);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_events_with_proofs(_1: EventKey, _2: u64, _3: u64) -> request::MethodRequest {
    debug key => _1;
    debug start_seq => _2;
    debug limit => _3;
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetEventsWithProofs(_1, _2, _3);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::get_event_by_version_with_proof(_1: EventKey, _2: std::option::Option<u64>) -> request::MethodRequest {
    debug key => _1;
    debug version => _2;
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetEventByVersionWithProof(_1, _2);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:37:1: 37:19>::method(_1: &request::MethodRequest) -> Method {
    debug self => _1;
    let mut _0: Method;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = Method::GetEventByVersionWithProof;
        goto -> bb18;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = Method::Submit;
        goto -> bb18;
    }

    bb4: {
        _0 = Method::GetMetadata;
        goto -> bb18;
    }

    bb5: {
        _0 = Method::GetAccount;
        goto -> bb18;
    }

    bb6: {
        _0 = Method::GetTransactions;
        goto -> bb18;
    }

    bb7: {
        _0 = Method::GetAccountTransaction;
        goto -> bb18;
    }

    bb8: {
        _0 = Method::GetAccountTransactions;
        goto -> bb18;
    }

    bb9: {
        _0 = Method::GetEvents;
        goto -> bb18;
    }

    bb10: {
        _0 = Method::GetCurrencies;
        goto -> bb18;
    }

    bb11: {
        _0 = Method::GetNetworkStatus;
        goto -> bb18;
    }

    bb12: {
        _0 = Method::GetStateProof;
        goto -> bb18;
    }

    bb13: {
        _0 = Method::GetAccumulatorConsistencyProof;
        goto -> bb18;
    }

    bb14: {
        _0 = Method::GetAccountStateWithProof;
        goto -> bb18;
    }

    bb15: {
        _0 = Method::GetTransactionsWithProofs;
        goto -> bb18;
    }

    bb16: {
        _0 = Method::GetAccountTransactionsWithProofs;
        goto -> bb18;
    }

    bb17: {
        _0 = Method::GetEventsWithProofs;
        goto -> bb18;
    }

    bb18: {
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:173:10: 173:15>::fmt(_1: &request::JsonRpcRequest, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &JsonRpcVersion;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &request::MethodRequest;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&u64;
    let _13: &u64;

    bb0: {
        _3 = const "JsonRpcRequest";
        _4 = const "jsonrpc";
        _6 = &((*_1).0: JsonRpcVersion);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "method_request";
        _9 = &((*_1).1: request::MethodRequest);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "id";
        _13 = &((*_1).2: u64);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const request::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize(_1: __D) -> std::result::Result<request::JsonRpcRequest, <__D as _::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<request::JsonRpcRequest, <__D as _::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_map::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Visitor<'_>>(move _1, const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::JsonRpcRequest>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::expecting(_1: &request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "field identifier";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_bool(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: bool) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _4: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _4 = _::_serde::__private::de::content::Content::<'_>::Bool(_2);
        _3 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _4);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _3);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_i8(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: i8) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _4: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _4 = _::_serde::__private::de::content::Content::<'_>::I8(_2);
        _3 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _4);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _3);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_i16(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: i16) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _4: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _4 = _::_serde::__private::de::content::Content::<'_>::I16(_2);
        _3 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _4);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _3);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_i32(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: i32) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _4: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _4 = _::_serde::__private::de::content::Content::<'_>::I32(_2);
        _3 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _4);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _3);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_i64(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: i64) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _4: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _4 = _::_serde::__private::de::content::Content::<'_>::I64(_2);
        _3 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _4);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _3);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_u8(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: u8) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _4: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _4 = _::_serde::__private::de::content::Content::<'_>::U8(_2);
        _3 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _4);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _3);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_u16(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: u16) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _4: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _4 = _::_serde::__private::de::content::Content::<'_>::U16(_2);
        _3 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _4);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _3);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_u32(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: u32) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _4: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _4 = _::_serde::__private::de::content::Content::<'_>::U32(_2);
        _3 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _4);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _3);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_u64(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: u64) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _4: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _4 = _::_serde::__private::de::content::Content::<'_>::U64(_2);
        _3 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _4);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _3);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_f32(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: f32) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _4: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _4 = _::_serde::__private::de::content::Content::<'_>::F32(_2);
        _3 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _4);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _3);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_f64(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: f64) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _4: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _4 = _::_serde::__private::de::content::Content::<'_>::F64(_2);
        _3 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _4);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _3);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_char(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: char) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _4: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _4 = _::_serde::__private::de::content::Content::<'_>::Char(_2);
        _3 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _4);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _3);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_unit(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _2: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _3: _::_serde::__private::de::content::Content<'_>;

    bb0: {
        _3 = _::_serde::__private::de::content::Content::<'_>::Unit;
        _2 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _3);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _2);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_str(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: &str) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _6: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let _7: _::_serde::__private::de::content::Content<'_>;
    let mut _8: std::string::String;
    let mut _9: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    scope 1 {
        debug __value => _7;
    }

    bb0: {
        _4 = <str as PartialEq>::eq(_2, const "jsonrpc") -> [return: bb6, unwind continue];
    }

    bb1: {
        _5 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__field0;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _5);
        goto -> bb8;
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_2, const "id") -> [return: bb5, unwind continue];
    }

    bb3: {
        _6 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__field2;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _6);
        goto -> bb8;
    }

    bb4: {
        _8 = <str as ToString>::to_string(_2) -> [return: bb7, unwind continue];
    }

    bb5: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb6: {
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb7: {
        _7 = _::_serde::__private::de::content::Content::<'_>::String(move _8);
        _9 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _7);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _9);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_bytes(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: &[u8]) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _10: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let _11: _::_serde::__private::de::content::Content<'_>;
    let mut _12: std::vec::Vec<u8>;
    let mut _13: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    scope 1 {
        debug __value => _11;
    }

    bb0: {
        _6 = Len((*_2));
        _7 = const 7_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [106: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [115: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [111: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [110: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [114: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [112: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [99: bb12, otherwise: bb8];
    }

    bb8: {
        _12 = slice::<impl [u8]>::to_vec(_2) -> [return: bb14, unwind continue];
    }

    bb9: {
        _3 = Len((*_2));
        _4 = const 2_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb10];
    }

    bb10: {
        switchInt((*_2)[0 of 2]) -> [105: bb11, otherwise: bb8];
    }

    bb11: {
        switchInt((*_2)[1 of 2]) -> [100: bb13, otherwise: bb8];
    }

    bb12: {
        _9 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__field0;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _9);
        goto -> bb15;
    }

    bb13: {
        _10 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__field2;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _10);
        goto -> bb15;
    }

    bb14: {
        _11 = _::_serde::__private::de::content::Content::<'_>::ByteBuf(move _12);
        _13 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _11);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _13);
        goto -> bb15;
    }

    bb15: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_borrowed_str(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: &str) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _6: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let _7: _::_serde::__private::de::content::Content<'_>;
    let mut _8: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    scope 1 {
        debug __value => _7;
    }

    bb0: {
        _4 = <str as PartialEq>::eq(_2, const "jsonrpc") -> [return: bb6, unwind continue];
    }

    bb1: {
        _5 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__field0;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _5);
        goto -> bb7;
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_2, const "id") -> [return: bb5, unwind continue];
    }

    bb3: {
        _6 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__field2;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _6);
        goto -> bb7;
    }

    bb4: {
        _7 = _::_serde::__private::de::content::Content::<'_>::Str(_2);
        _8 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _7);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _8);
        goto -> bb7;
    }

    bb5: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb6: {
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb7: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_borrowed_bytes(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor, _2: &[u8]) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let mut _10: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    let _11: _::_serde::__private::de::content::Content<'_>;
    let mut _12: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
    scope 1 {
        debug __value => _11;
    }

    bb0: {
        _6 = Len((*_2));
        _7 = const 7_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 7]) -> [106: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt((*_2)[1 of 7]) -> [115: bb3, otherwise: bb8];
    }

    bb3: {
        switchInt((*_2)[2 of 7]) -> [111: bb4, otherwise: bb8];
    }

    bb4: {
        switchInt((*_2)[3 of 7]) -> [110: bb5, otherwise: bb8];
    }

    bb5: {
        switchInt((*_2)[4 of 7]) -> [114: bb6, otherwise: bb8];
    }

    bb6: {
        switchInt((*_2)[5 of 7]) -> [112: bb7, otherwise: bb8];
    }

    bb7: {
        switchInt((*_2)[6 of 7]) -> [99: bb12, otherwise: bb8];
    }

    bb8: {
        _11 = _::_serde::__private::de::content::Content::<'_>::Bytes(_2);
        _12 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _11);
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _12);
        goto -> bb14;
    }

    bb9: {
        _3 = Len((*_2));
        _4 = const 2_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb8, otherwise: bb10];
    }

    bb10: {
        switchInt((*_2)[0 of 2]) -> [105: bb11, otherwise: bb8];
    }

    bb11: {
        switchInt((*_2)[1 of 2]) -> [100: bb13, otherwise: bb8];
    }

    bb12: {
        _9 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__field0;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _9);
        goto -> bb14;
    }

    bb13: {
        _10 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__field2;
        _0 = std::result::Result::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, __E>::Ok(move _10);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize(_1: __D) -> std::result::Result<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, <__D as _::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>, <__D as _::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_identifier::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor>(move _1, const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::expecting(_1: &request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "struct JsonRpcRequest";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::<impl at sdk/client/src/request.rs:173:17: 173:28>::visit_map(_1: request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<request::JsonRpcRequest, <__A as MapAccess<'_>>::Error> {
    debug self => const request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<request::JsonRpcRequest>, lifetime: PhantomData::<&()> }};
    debug __map => _2;
    let mut _0: std::result::Result<request::JsonRpcRequest, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _3: std::option::Option<JsonRpcVersion>;
    let mut _6: std::option::Option<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>>;
    let mut _7: std::result::Result<std::option::Option<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>>, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _8: &mut __A;
    let mut _9: isize;
    let mut _12: isize;
    let mut _14: isize;
    let mut _15: bool;
    let _16: &std::option::Option<JsonRpcVersion>;
    let mut _17: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let mut _18: std::option::Option<JsonRpcVersion>;
    let mut _19: std::result::Result<JsonRpcVersion, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _20: &mut __A;
    let mut _21: isize;
    let mut _23: bool;
    let _24: &std::option::Option<u64>;
    let mut _25: <__A as _::_serde::de::MapAccess<'_>>::Error;
    let mut _26: std::option::Option<u64>;
    let mut _27: std::result::Result<u64, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _28: &mut __A;
    let mut _29: isize;
    let _33: ();
    let mut _34: &mut std::vec::Vec<std::option::Option<(_::_serde::__private::de::content::Content<'_>, _::_serde::__private::de::content::Content<'_>)>>;
    let mut _35: std::option::Option<(_::_serde::__private::de::content::Content<'_>, _::_serde::__private::de::content::Content<'_>)>;
    let mut _36: (_::_serde::__private::de::content::Content<'_>, _::_serde::__private::de::content::Content<'_>);
    let mut _37: _::_serde::__private::de::content::Content<'_>;
    let mut _38: std::result::Result<_::_serde::__private::de::content::Content<'_>, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _39: &mut __A;
    let mut _40: isize;
    let mut _43: isize;
    let mut _44: std::result::Result<JsonRpcVersion, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _45: isize;
    let mut _48: isize;
    let mut _50: std::result::Result<u64, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _51: isize;
    let mut _54: std::result::Result<request::MethodRequest, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _55: _::_serde::__private::de::FlatMapDeserializer<'_, '_, <__A as _::_serde::de::MapAccess<'_>>::Error>;
    let mut _56: &mut std::vec::Vec<std::option::Option<(_::_serde::__private::de::content::Content<'_>, _::_serde::__private::de::content::Content<'_>)>>;
    let mut _57: isize;
    let mut _60: request::JsonRpcRequest;
    let mut _61: u64;
    scope 1 {
        debug __field0 => _3;
        let mut _4: std::option::Option<u64>;
        scope 2 {
            debug __field2 => _4;
            let mut _5: std::vec::Vec<std::option::Option<(_::_serde::__private::de::content::Content<'_>, _::_serde::__private::de::content::Content<'_>)>>;
            scope 3 {
                debug __collect => _5;
                let _46: <__A as _::_serde::de::MapAccess<'_>>::Error;
                scope 4 {
                    debug __key => _13;
                    let _10: std::option::Option<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>>;
                    let _11: <__A as _::_serde::de::MapAccess<'_>>::Error;
                    let _13: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;
                    let _22: <__A as _::_serde::de::MapAccess<'_>>::Error;
                    let _30: u64;
                    let _31: <__A as _::_serde::de::MapAccess<'_>>::Error;
                    let _32: _::_serde::__private::de::content::Content<'_>;
                    scope 5 {
                        debug __val => _10;
                    }
                    scope 6 {
                        debug __err => _11;
                    }
                    scope 7 {
                        debug __val => const JsonRpcVersion::V2;
                    }
                    scope 8 {
                        debug __err => _22;
                    }
                    scope 9 {
                        debug __val => _30;
                    }
                    scope 10 {
                        debug __err => _31;
                    }
                    scope 11 {
                        debug __name => _32;
                        let _41: _::_serde::__private::de::content::Content<'_>;
                        let _42: <__A as _::_serde::de::MapAccess<'_>>::Error;
                        scope 12 {
                            debug __val => _41;
                        }
                        scope 13 {
                            debug __err => _42;
                        }
                    }
                }
                scope 14 {
                    debug __field0 => const JsonRpcVersion::V2;
                    let _47: u64;
                    let _49: u64;
                    let _52: u64;
                    let _53: <__A as _::_serde::de::MapAccess<'_>>::Error;
                    scope 18 {
                        debug __field2 => _47;
                        let _58: request::MethodRequest;
                        let _59: <__A as _::_serde::de::MapAccess<'_>>::Error;
                        scope 22 {
                            debug __field1 => _58;
                        }
                        scope 23 {
                            debug __val => _58;
                        }
                        scope 24 {
                            debug __err => _59;
                        }
                    }
                    scope 19 {
                        debug __field2 => _49;
                    }
                    scope 20 {
                        debug __val => _52;
                    }
                    scope 21 {
                        debug __err => _53;
                    }
                }
                scope 15 {
                    debug __field0 => const JsonRpcVersion::V2;
                }
                scope 16 {
                    debug __val => const JsonRpcVersion::V2;
                }
                scope 17 {
                    debug __err => _46;
                }
            }
        }
    }

    bb0: {
        _3 = std::option::Option::<JsonRpcVersion>::None;
        _4 = std::option::Option::<u64>::None;
        _5 = Vec::<std::option::Option<(_::_serde::__private::de::content::Content<'_>, _::_serde::__private::de::content::Content<'_>)>>::new() -> [return: bb50, unwind: bb47];
    }

    bb1: {
        _8 = &mut _2;
        _7 = <__A as MapAccess<'_>>::next_key::<request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>>(_8) -> [return: bb2, unwind: bb46];
    }

    bb2: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _11 = move ((_7 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::JsonRpcRequest, <__A as MapAccess<'_>>::Error>::Err(move _11);
        goto -> bb42;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _10 = move ((_7 as Ok).0: std::option::Option<request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>>);
        _6 = move _10;
        _12 = discriminant(_6);
        switchInt(move _12) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        drop(_6) -> [return: bb49, unwind: bb46];
    }

    bb7: {
        _13 = move ((_6 as Some).0: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>);
        _14 = discriminant(_13);
        switchInt(move _14) -> [0: bb9, 1: bb17, 2: bb8, otherwise: bb4];
    }

    bb8: {
        _32 = move ((_13 as __other).0: _::_serde::__private::de::content::Content<'_>);
        _34 = &mut _5;
        _37 = move _32;
        _39 = &mut _2;
        _38 = <__A as MapAccess<'_>>::next_value::<_::_serde::__private::de::content::Content<'_>>(_39) -> [return: bb25, unwind: bb45];
    }

    bb9: {
        _16 = &_3;
        _15 = std::option::Option::<JsonRpcVersion>::is_some(_16) -> [return: bb10, unwind: bb46];
    }

    bb10: {
        switchInt(move _15) -> [0: bb13, otherwise: bb11];
    }

    bb11: {
        _17 = <<__A as MapAccess<'_>>::Error as _::_serde::de::Error>::duplicate_field(const "jsonrpc") -> [return: bb12, unwind: bb46];
    }

    bb12: {
        _0 = std::result::Result::<request::JsonRpcRequest, <__A as MapAccess<'_>>::Error>::Err(move _17);
        goto -> bb42;
    }

    bb13: {
        _20 = &mut _2;
        _19 = <__A as MapAccess<'_>>::next_value::<JsonRpcVersion>(_20) -> [return: bb14, unwind: bb46];
    }

    bb14: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb16, 1: bb15, otherwise: bb4];
    }

    bb15: {
        _22 = move ((_19 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::JsonRpcRequest, <__A as MapAccess<'_>>::Error>::Err(move _22);
        goto -> bb42;
    }

    bb16: {
        _18 = std::option::Option::<JsonRpcVersion>::Some(const JsonRpcVersion::V2);
        _3 = move _18;
        goto -> bb1;
    }

    bb17: {
        _24 = &_4;
        _23 = std::option::Option::<u64>::is_some(_24) -> [return: bb18, unwind: bb46];
    }

    bb18: {
        switchInt(move _23) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _25 = <<__A as MapAccess<'_>>::Error as _::_serde::de::Error>::duplicate_field(const "id") -> [return: bb20, unwind: bb46];
    }

    bb20: {
        _0 = std::result::Result::<request::JsonRpcRequest, <__A as MapAccess<'_>>::Error>::Err(move _25);
        goto -> bb42;
    }

    bb21: {
        _28 = &mut _2;
        _27 = <__A as MapAccess<'_>>::next_value::<u64>(_28) -> [return: bb22, unwind: bb46];
    }

    bb22: {
        _29 = discriminant(_27);
        switchInt(move _29) -> [0: bb24, 1: bb23, otherwise: bb4];
    }

    bb23: {
        _31 = move ((_27 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::JsonRpcRequest, <__A as MapAccess<'_>>::Error>::Err(move _31);
        goto -> bb42;
    }

    bb24: {
        _30 = ((_27 as Ok).0: u64);
        _26 = std::option::Option::<u64>::Some(_30);
        _4 = move _26;
        goto -> bb1;
    }

    bb25: {
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb27, 1: bb26, otherwise: bb4];
    }

    bb26: {
        _42 = move ((_38 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::JsonRpcRequest, <__A as MapAccess<'_>>::Error>::Err(move _42);
        drop(_37) -> [return: bb42, unwind: bb46];
    }

    bb27: {
        _41 = move ((_38 as Ok).0: _::_serde::__private::de::content::Content<'_>);
        _36 = (move _37, move _41);
        _35 = std::option::Option::<(_::_serde::__private::de::content::Content<'_>, _::_serde::__private::de::content::Content<'_>)>::Some(move _36);
        _33 = Vec::<std::option::Option<(_::_serde::__private::de::content::Content<'_>, _::_serde::__private::de::content::Content<'_>)>>::push(move _34, move _35) -> [return: bb51, unwind: bb46];
    }

    bb28: {
        _44 = _::_serde::__private::de::missing_field::<'_, JsonRpcVersion, <__A as MapAccess<'_>>::Error>(const "jsonrpc") -> [return: bb29, unwind: bb46];
    }

    bb29: {
        _45 = discriminant(_44);
        switchInt(move _45) -> [0: bb31, 1: bb30, otherwise: bb4];
    }

    bb30: {
        _46 = move ((_44 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::JsonRpcRequest, <__A as MapAccess<'_>>::Error>::Err(move _46);
        goto -> bb42;
    }

    bb31: {
        _48 = discriminant(_4);
        switchInt(move _48) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        _50 = _::_serde::__private::de::missing_field::<'_, u64, <__A as MapAccess<'_>>::Error>(const "id") -> [return: bb34, unwind: bb46];
    }

    bb33: {
        _49 = ((_4 as Some).0: u64);
        _47 = _49;
        goto -> bb37;
    }

    bb34: {
        _51 = discriminant(_50);
        switchInt(move _51) -> [0: bb36, 1: bb35, otherwise: bb4];
    }

    bb35: {
        _53 = move ((_50 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::JsonRpcRequest, <__A as MapAccess<'_>>::Error>::Err(move _53);
        goto -> bb42;
    }

    bb36: {
        _52 = ((_50 as Ok).0: u64);
        _47 = _52;
        goto -> bb37;
    }

    bb37: {
        _56 = &mut _5;
        _55 = FlatMapDeserializer::<'_, '_, <__A as MapAccess<'_>>::Error>(_56, const ZeroSized: PhantomData<<__A as MapAccess<'_>>::Error>);
        _54 = <request::MethodRequest as Deserialize<'_>>::deserialize::<FlatMapDeserializer<'_, '_, <__A as MapAccess<'_>>::Error>>(move _55) -> [return: bb38, unwind: bb46];
    }

    bb38: {
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb40, 1: bb39, otherwise: bb4];
    }

    bb39: {
        _59 = move ((_54 as Err).0: <__A as _::_serde::de::MapAccess<'_>>::Error);
        _0 = std::result::Result::<request::JsonRpcRequest, <__A as MapAccess<'_>>::Error>::Err(move _59);
        goto -> bb42;
    }

    bb40: {
        _58 = move ((_54 as Ok).0: request::MethodRequest);
        _61 = _47;
        _60 = request::JsonRpcRequest { jsonrpc: const JsonRpcVersion::V2, method_request: move _58, id: move _61 };
        _0 = std::result::Result::<request::JsonRpcRequest, <__A as MapAccess<'_>>::Error>::Ok(move _60);
        drop(_5) -> [return: bb41, unwind: bb47];
    }

    bb41: {
        drop(_2) -> [return: bb44, unwind continue];
    }

    bb42: {
        drop(_5) -> [return: bb43, unwind: bb47];
    }

    bb43: {
        drop(_2) -> [return: bb44, unwind continue];
    }

    bb44: {
        return;
    }

    bb45 (cleanup): {
        drop(_37) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_5) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_2) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        resume;
    }

    bb49: {
        _43 = discriminant(_3);
        switchInt(move _43) -> [0: bb28, 1: bb31, otherwise: bb4];
    }

    bb50: {
        goto -> bb1;
    }

    bb51: {
        goto -> bb1;
    }
}

const request::_: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:30: 173:39>::serialize(_1: &request::JsonRpcRequest, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _3: <__S as _::_serde::Serializer>::SerializeMap;
    let mut _4: std::result::Result<<__S as _::_serde::Serializer>::SerializeMap, <__S as _::_serde::Serializer>::Error>;
    let mut _5: std::option::Option<usize>;
    let mut _6: isize;
    let _7: <__S as _::_serde::Serializer>::SerializeMap;
    let _8: <__S as _::_serde::Serializer>::Error;
    let mut _9: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _10: &mut <__S as _::_serde::Serializer>::SerializeMap;
    let _11: &str;
    let _12: &JsonRpcVersion;
    let mut _13: isize;
    let mut _15: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let _16: &&request::MethodRequest;
    let _17: &request::MethodRequest;
    let mut _18: _::_serde::__private::ser::FlatMapSerializer<'_, <__S as _::_serde::Serializer>::SerializeMap>;
    let mut _19: &mut <__S as _::_serde::Serializer>::SerializeMap;
    let mut _20: isize;
    let mut _22: std::result::Result<(), <__S as _::_serde::Serializer>::Error>;
    let mut _23: &mut <__S as _::_serde::Serializer>::SerializeMap;
    let _24: &str;
    let _25: &u64;
    let mut _26: isize;
    let mut _28: <__S as _::_serde::Serializer>::SerializeMap;
    let mut _29: bool;
    scope 1 {
        debug __serde_state => _3;
        let _14: <__S as _::_serde::Serializer>::Error;
        let _21: <__S as _::_serde::Serializer>::Error;
        let _27: <__S as _::_serde::Serializer>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _14;
        }
        scope 6 {
            debug __val => const ();
        }
        scope 7 {
            debug __err => _21;
        }
        scope 8 {
            debug __val => const ();
        }
        scope 9 {
            debug __err => _27;
        }
    }
    scope 2 {
        debug __val => _7;
    }
    scope 3 {
        debug __err => _8;
    }

    bb0: {
        _29 = const false;
        _5 = std::option::Option::<usize>::None;
        _4 = <__S as _::_serde::Serializer>::serialize_map(move _2, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _8 = move ((_4 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _8);
        goto -> bb16;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: <__S as _::_serde::Serializer>::SerializeMap);
        _29 = const true;
        _3 = move _7;
        _10 = &mut _3;
        _11 = const "jsonrpc";
        _12 = &((*_1).0: JsonRpcVersion);
        _9 = <<__S as _::_serde::Serializer>::SerializeMap as SerializeMap>::serialize_entry::<str, JsonRpcVersion>(_10, _11, _12) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb7, 1: bb6, otherwise: bb3];
    }

    bb6: {
        _14 = move ((_9 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _14);
        goto -> bb15;
    }

    bb7: {
        _17 = &((*_1).1: request::MethodRequest);
        _16 = &_17;
        _19 = &mut _3;
        _18 = FlatMapSerializer::<'_, <__S as _::_serde::Serializer>::SerializeMap>(_19);
        _15 = <&request::MethodRequest as Serialize>::serialize::<FlatMapSerializer<'_, <__S as _::_serde::Serializer>::SerializeMap>>(_16, move _18) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb10, 1: bb9, otherwise: bb3];
    }

    bb9: {
        _21 = move ((_15 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _21);
        goto -> bb15;
    }

    bb10: {
        _23 = &mut _3;
        _24 = const "id";
        _25 = &((*_1).2: u64);
        _22 = <<__S as _::_serde::Serializer>::SerializeMap as SerializeMap>::serialize_entry::<str, u64>(_23, _24, _25) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        _26 = discriminant(_22);
        switchInt(move _26) -> [0: bb13, 1: bb12, otherwise: bb3];
    }

    bb12: {
        _27 = move ((_22 as Err).0: <__S as _::_serde::Serializer>::Error);
        _0 = std::result::Result::<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>::Err(move _27);
        goto -> bb15;
    }

    bb13: {
        _29 = const false;
        _28 = move _3;
        _0 = <<__S as _::_serde::Serializer>::SerializeMap as SerializeMap>::end(move _28) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _29 = const false;
        goto -> bb17;
    }

    bb15: {
        drop(_3) -> [return: bb16, unwind continue];
    }

    bb16: {
        _29 = const false;
        goto -> bb17;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        drop(_3) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        switchInt(_29) -> [0: bb18, otherwise: bb19];
    }
}

fn request::<impl at sdk/client/src/request.rs:181:1: 181:20>::new(_1: request::MethodRequest) -> request::JsonRpcRequest {
    debug method_request => _1;
    let mut _0: request::JsonRpcRequest;
    let _2: u64;
    let _3: &std::sync::atomic::AtomicU64;
    let mut _4: std::sync::atomic::Ordering;
    let mut _5: request::MethodRequest;
    scope 1 {
        debug id => _2;
    }

    bb0: {
        _3 = const {alloc26: &AtomicU64};
        _4 = Relaxed;
        _2 = AtomicU64::fetch_add(_3, const 1_u64, move _4) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _5 = move _1;
        _0 = request::JsonRpcRequest { jsonrpc: const JsonRpcVersion::V2, method_request: move _5, id: _2 };
        return;
    }

    bb2 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb3 (cleanup): {
        resume;
    }
}

alloc26 (static: NEXT_ID, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

static NEXT_ID: AtomicU64 = {
    let mut _0: std::sync::atomic::AtomicU64;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicU64::new(const 0_u64) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:181:1: 181:20>::id(_1: &request::JsonRpcRequest) -> u64 {
    debug self => _1;
    let mut _0: u64;

    bb0: {
        _0 = ((*_1).2: u64);
        return;
    }
}

fn request::<impl at sdk/client/src/request.rs:181:1: 181:20>::method(_1: &request::JsonRpcRequest) -> Method {
    debug self => _1;
    let mut _0: Method;
    let mut _2: &request::MethodRequest;

    bb0: {
        _2 = &((*_1).1: request::MethodRequest);
        _0 = request::MethodRequest::method(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:16:10: 16:15>::fmt(_1: &response::Response<T>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &T;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&state::State;
    let _10: &state::State;

    bb0: {
        _3 = const "Response";
        _4 = const "inner";
        _6 = &((*_1).0: T);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "state";
        _10 = &((*_1).1: state::State);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:23:1: 23:20>::new(_1: T, _2: state::State) -> response::Response<T> {
    debug inner => _1;
    debug state => _2;
    let mut _0: response::Response<T>;

    bb0: {
        _0 = response::Response::<T> { inner: move _1, state: move _2 };
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:23:1: 23:20>::inner(_1: &response::Response<T>) -> &T {
    debug self => _1;
    let mut _0: &T;

    bb0: {
        _0 = &((*_1).0: T);
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:23:1: 23:20>::into_inner(_1: response::Response<T>) -> T {
    debug self => _1;
    let mut _0: T;

    bb0: {
        _0 = move (_1.0: T);
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:23:1: 23:20>::state(_1: &response::Response<T>) -> &state::State {
    debug self => _1;
    let mut _0: &state::State;

    bb0: {
        _0 = &((*_1).1: state::State);
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:23:1: 23:20>::into_parts(_1: response::Response<T>) -> (T, state::State) {
    debug self => _1;
    let mut _0: (T, state::State);
    let mut _2: T;
    let mut _3: state::State;

    bb0: {
        _2 = move (_1.0: T);
        _3 = move (_1.1: state::State);
        _0 = (move _2, move _3);
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:23:1: 23:20>::and_then(_1: response::Response<T>, _2: F) -> std::result::Result<response::Response<U>, E> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<response::Response<U>, E>;
    let _3: T;
    let _4: state::State;
    let mut _5: (T, state::State);
    let mut _6: std::result::Result<U, E>;
    let mut _7: F;
    let mut _8: (T,);
    let mut _9: T;
    let mut _10: isize;
    let mut _12: response::Response<U>;
    let mut _14: bool;
    let mut _15: bool;
    scope 1 {
        debug inner => _3;
        debug state => _4;
        let _11: U;
        let _13: E;
        scope 2 {
            debug new_inner => _11;
        }
        scope 3 {
            debug err => _13;
        }
    }

    bb0: {
        _15 = const false;
        _14 = const false;
        _15 = const true;
        _5 = response::Response::<T>::into_parts(move _1) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _14 = const true;
        _3 = move (_5.0: T);
        _4 = move (_5.1: state::State);
        _15 = const false;
        _7 = move _2;
        _14 = const false;
        _9 = move _3;
        _8 = (move _9,);
        _6 = <F as FnOnce<(T,)>>::call_once(move _7, move _8) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        _13 = move ((_6 as Err).0: E);
        _0 = std::result::Result::<response::Response<U>, E>::Err(move _13);
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _11 = move ((_6 as Ok).0: U);
        _12 = response::Response::<U>::new(move _11, move _4) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _0 = std::result::Result::<response::Response<U>, E>::Ok(move _12);
        goto -> bb7;
    }

    bb7: {
        _14 = const false;
        return;
    }

    bb8 (cleanup): {
        switchInt(_14) -> [0: bb12, otherwise: bb10];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        switchInt(_15) -> [0: bb9, otherwise: bb11];
    }
}

fn response::<impl at sdk/client/src/response.rs:57:10: 57:15>::clone(_1: &MethodResponse) -> MethodResponse {
    debug self => _1;
    let mut _0: response::MethodResponse;
    let mut _2: isize;
    let _3: &diem_json_rpc_types::views::MetadataView;
    let mut _4: diem_json_rpc_types::views::MetadataView;
    let _5: &std::option::Option<diem_json_rpc_types::views::AccountView>;
    let mut _6: std::option::Option<diem_json_rpc_types::views::AccountView>;
    let _7: &std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let mut _8: std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let _9: &std::option::Option<diem_json_rpc_types::views::TransactionView>;
    let mut _10: std::option::Option<diem_json_rpc_types::views::TransactionView>;
    let _11: &std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let mut _12: std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let _13: &std::vec::Vec<diem_json_rpc_types::views::EventView>;
    let mut _14: std::vec::Vec<diem_json_rpc_types::views::EventView>;
    let _15: &std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>;
    let mut _16: std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>;
    let _17: &u64;
    let mut _18: u64;
    let _19: &diem_json_rpc_types::views::StateProofView;
    let mut _20: diem_json_rpc_types::views::StateProofView;
    let _21: &diem_json_rpc_types::views::AccumulatorConsistencyProofView;
    let mut _22: diem_json_rpc_types::views::AccumulatorConsistencyProofView;
    let _23: &diem_json_rpc_types::views::AccountStateWithProofView;
    let mut _24: diem_json_rpc_types::views::AccountStateWithProofView;
    let _25: &std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>;
    let mut _26: std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>;
    let _27: &diem_json_rpc_types::views::AccountTransactionsWithProofView;
    let mut _28: diem_json_rpc_types::views::AccountTransactionsWithProofView;
    let _29: &std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>;
    let mut _30: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>;
    let _31: &diem_json_rpc_types::views::EventByVersionWithProofView;
    let mut _32: diem_json_rpc_types::views::EventByVersionWithProofView;
    scope 1 {
        debug __self_0 => _3;
    }
    scope 2 {
        debug __self_0 => _5;
    }
    scope 3 {
        debug __self_0 => _7;
    }
    scope 4 {
        debug __self_0 => _9;
    }
    scope 5 {
        debug __self_0 => _11;
    }
    scope 6 {
        debug __self_0 => _13;
    }
    scope 7 {
        debug __self_0 => _15;
    }
    scope 8 {
        debug __self_0 => _17;
    }
    scope 9 {
        debug __self_0 => _19;
    }
    scope 10 {
        debug __self_0 => _21;
    }
    scope 11 {
        debug __self_0 => _23;
    }
    scope 12 {
        debug __self_0 => _25;
    }
    scope 13 {
        debug __self_0 => _27;
    }
    scope 14 {
        debug __self_0 => _29;
    }
    scope 15 {
        debug __self_0 => _31;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb6, 3: bb8, 4: bb10, 5: bb12, 6: bb14, 7: bb16, 8: bb18, 9: bb19, 10: bb21, 11: bb23, 12: bb25, 13: bb27, 14: bb29, 15: bb1, otherwise: bb2];
    }

    bb1: {
        _31 = &(((*_1) as GetEventByVersionWithProof).0: diem_json_rpc_types::views::EventByVersionWithProofView);
        _32 = <EventByVersionWithProofView as Clone>::clone(_31) -> [return: bb31, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = MethodResponse::Submit;
        goto -> bb32;
    }

    bb4: {
        _3 = &(((*_1) as GetMetadata).0: diem_json_rpc_types::views::MetadataView);
        _4 = <MetadataView as Clone>::clone(_3) -> [return: bb5, unwind continue];
    }

    bb5: {
        _0 = MethodResponse::GetMetadata(move _4);
        goto -> bb32;
    }

    bb6: {
        _5 = &(((*_1) as GetAccount).0: std::option::Option<diem_json_rpc_types::views::AccountView>);
        _6 = <std::option::Option<AccountView> as Clone>::clone(_5) -> [return: bb7, unwind continue];
    }

    bb7: {
        _0 = MethodResponse::GetAccount(move _6);
        goto -> bb32;
    }

    bb8: {
        _7 = &(((*_1) as GetTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _8 = <Vec<TransactionView> as Clone>::clone(_7) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = MethodResponse::GetTransactions(move _8);
        goto -> bb32;
    }

    bb10: {
        _9 = &(((*_1) as GetAccountTransaction).0: std::option::Option<diem_json_rpc_types::views::TransactionView>);
        _10 = <std::option::Option<TransactionView> as Clone>::clone(_9) -> [return: bb11, unwind continue];
    }

    bb11: {
        _0 = MethodResponse::GetAccountTransaction(move _10);
        goto -> bb32;
    }

    bb12: {
        _11 = &(((*_1) as GetAccountTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _12 = <Vec<TransactionView> as Clone>::clone(_11) -> [return: bb13, unwind continue];
    }

    bb13: {
        _0 = MethodResponse::GetAccountTransactions(move _12);
        goto -> bb32;
    }

    bb14: {
        _13 = &(((*_1) as GetEvents).0: std::vec::Vec<diem_json_rpc_types::views::EventView>);
        _14 = <Vec<EventView> as Clone>::clone(_13) -> [return: bb15, unwind continue];
    }

    bb15: {
        _0 = MethodResponse::GetEvents(move _14);
        goto -> bb32;
    }

    bb16: {
        _15 = &(((*_1) as GetCurrencies).0: std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>);
        _16 = <Vec<CurrencyInfoView> as Clone>::clone(_15) -> [return: bb17, unwind continue];
    }

    bb17: {
        _0 = MethodResponse::GetCurrencies(move _16);
        goto -> bb32;
    }

    bb18: {
        _17 = &(((*_1) as GetNetworkStatus).0: u64);
        _18 = (*_17);
        _0 = MethodResponse::GetNetworkStatus(move _18);
        goto -> bb32;
    }

    bb19: {
        _19 = &(((*_1) as GetStateProof).0: diem_json_rpc_types::views::StateProofView);
        _20 = <StateProofView as Clone>::clone(_19) -> [return: bb20, unwind continue];
    }

    bb20: {
        _0 = MethodResponse::GetStateProof(move _20);
        goto -> bb32;
    }

    bb21: {
        _21 = &(((*_1) as GetAccumulatorConsistencyProof).0: diem_json_rpc_types::views::AccumulatorConsistencyProofView);
        _22 = <AccumulatorConsistencyProofView as Clone>::clone(_21) -> [return: bb22, unwind continue];
    }

    bb22: {
        _0 = MethodResponse::GetAccumulatorConsistencyProof(move _22);
        goto -> bb32;
    }

    bb23: {
        _23 = &(((*_1) as GetAccountStateWithProof).0: diem_json_rpc_types::views::AccountStateWithProofView);
        _24 = <AccountStateWithProofView as Clone>::clone(_23) -> [return: bb24, unwind continue];
    }

    bb24: {
        _0 = MethodResponse::GetAccountStateWithProof(move _24);
        goto -> bb32;
    }

    bb25: {
        _25 = &(((*_1) as GetTransactionsWithProofs).0: std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>);
        _26 = <std::option::Option<TransactionsWithProofsView> as Clone>::clone(_25) -> [return: bb26, unwind continue];
    }

    bb26: {
        _0 = MethodResponse::GetTransactionsWithProofs(move _26);
        goto -> bb32;
    }

    bb27: {
        _27 = &(((*_1) as GetAccountTransactionsWithProofs).0: diem_json_rpc_types::views::AccountTransactionsWithProofView);
        _28 = <AccountTransactionsWithProofView as Clone>::clone(_27) -> [return: bb28, unwind continue];
    }

    bb28: {
        _0 = MethodResponse::GetAccountTransactionsWithProofs(move _28);
        goto -> bb32;
    }

    bb29: {
        _29 = &(((*_1) as GetEventsWithProofs).0: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>);
        _30 = <Vec<EventWithProofView> as Clone>::clone(_29) -> [return: bb30, unwind continue];
    }

    bb30: {
        _0 = MethodResponse::GetEventsWithProofs(move _30);
        goto -> bb32;
    }

    bb31: {
        _0 = MethodResponse::GetEventByVersionWithProof(move _32);
        goto -> bb32;
    }

    bb32: {
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:57:17: 57:26>::eq(_1: &MethodResponse, _2: &MethodResponse) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: (&response::MethodResponse, &response::MethodResponse);
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: isize;
    let mut _10: isize;
    let mut _11: isize;
    let mut _12: isize;
    let mut _13: isize;
    let mut _14: isize;
    let mut _15: isize;
    let mut _16: isize;
    let mut _17: isize;
    let mut _18: isize;
    let mut _19: isize;
    let mut _20: isize;
    let mut _21: isize;
    let mut _22: isize;
    let mut _39: u64;
    let mut _40: u64;
    let mut _55: &response::MethodResponse;
    let mut _56: &response::MethodResponse;
    let mut _57: &response::MethodResponse;
    let mut _58: &response::MethodResponse;
    let mut _59: &response::MethodResponse;
    let mut _60: &response::MethodResponse;
    let mut _61: &response::MethodResponse;
    let mut _62: &response::MethodResponse;
    let mut _63: &response::MethodResponse;
    let mut _64: &response::MethodResponse;
    let mut _65: &response::MethodResponse;
    let mut _66: &response::MethodResponse;
    let mut _67: &response::MethodResponse;
    let mut _68: &response::MethodResponse;
    let mut _69: &response::MethodResponse;
    let mut _70: &response::MethodResponse;
    let mut _71: &response::MethodResponse;
    let mut _72: &response::MethodResponse;
    let mut _73: &response::MethodResponse;
    let mut _74: &response::MethodResponse;
    let mut _75: &response::MethodResponse;
    let mut _76: &response::MethodResponse;
    let mut _77: &response::MethodResponse;
    let mut _78: &response::MethodResponse;
    let mut _79: &response::MethodResponse;
    let mut _80: &response::MethodResponse;
    let mut _81: &response::MethodResponse;
    let mut _82: &response::MethodResponse;
    let mut _83: &response::MethodResponse;
    let mut _84: &response::MethodResponse;
    let mut _85: &response::MethodResponse;
    let mut _86: &response::MethodResponse;
    let mut _87: &response::MethodResponse;
    let mut _88: &response::MethodResponse;
    let mut _89: &response::MethodResponse;
    let mut _90: &response::MethodResponse;
    let mut _91: &response::MethodResponse;
    let mut _92: &response::MethodResponse;
    let mut _93: &response::MethodResponse;
    let mut _94: &response::MethodResponse;
    let mut _95: &response::MethodResponse;
    let mut _96: &response::MethodResponse;
    let mut _97: &response::MethodResponse;
    let mut _98: &response::MethodResponse;
    let mut _99: &response::MethodResponse;
    let mut _100: &response::MethodResponse;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _23: &diem_json_rpc_types::views::MetadataView;
            let _24: &diem_json_rpc_types::views::MetadataView;
            let _25: &std::option::Option<diem_json_rpc_types::views::AccountView>;
            let _26: &std::option::Option<diem_json_rpc_types::views::AccountView>;
            let _27: &std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
            let _28: &std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
            let _29: &std::option::Option<diem_json_rpc_types::views::TransactionView>;
            let _30: &std::option::Option<diem_json_rpc_types::views::TransactionView>;
            let _31: &std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
            let _32: &std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
            let _33: &std::vec::Vec<diem_json_rpc_types::views::EventView>;
            let _34: &std::vec::Vec<diem_json_rpc_types::views::EventView>;
            let _35: &std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>;
            let _36: &std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>;
            let _37: &u64;
            let _38: &u64;
            let _41: &diem_json_rpc_types::views::StateProofView;
            let _42: &diem_json_rpc_types::views::StateProofView;
            let _43: &diem_json_rpc_types::views::AccumulatorConsistencyProofView;
            let _44: &diem_json_rpc_types::views::AccumulatorConsistencyProofView;
            let _45: &diem_json_rpc_types::views::AccountStateWithProofView;
            let _46: &diem_json_rpc_types::views::AccountStateWithProofView;
            let _47: &std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>;
            let _48: &std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>;
            let _49: &diem_json_rpc_types::views::AccountTransactionsWithProofView;
            let _50: &diem_json_rpc_types::views::AccountTransactionsWithProofView;
            let _51: &std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>;
            let _52: &std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>;
            let _53: &diem_json_rpc_types::views::EventByVersionWithProofView;
            let _54: &diem_json_rpc_types::views::EventByVersionWithProofView;
            scope 3 {
                debug __self_0 => _23;
                debug __arg1_0 => _24;
            }
            scope 4 {
                debug __self_0 => _25;
                debug __arg1_0 => _26;
            }
            scope 5 {
                debug __self_0 => _27;
                debug __arg1_0 => _28;
            }
            scope 6 {
                debug __self_0 => _29;
                debug __arg1_0 => _30;
            }
            scope 7 {
                debug __self_0 => _31;
                debug __arg1_0 => _32;
            }
            scope 8 {
                debug __self_0 => _33;
                debug __arg1_0 => _34;
            }
            scope 9 {
                debug __self_0 => _35;
                debug __arg1_0 => _36;
            }
            scope 10 {
                debug __self_0 => _37;
                debug __arg1_0 => _38;
            }
            scope 11 {
                debug __self_0 => _41;
                debug __arg1_0 => _42;
            }
            scope 12 {
                debug __self_0 => _43;
                debug __arg1_0 => _44;
            }
            scope 13 {
                debug __self_0 => _45;
                debug __arg1_0 => _46;
            }
            scope 14 {
                debug __self_0 => _47;
                debug __arg1_0 => _48;
            }
            scope 15 {
                debug __self_0 => _49;
                debug __arg1_0 => _50;
            }
            scope 16 {
                debug __self_0 => _51;
                debug __arg1_0 => _52;
            }
            scope 17 {
                debug __self_0 => _53;
                debug __arg1_0 => _54;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = (_1, _2);
        _55 = deref_copy (_6.0: &response::MethodResponse);
        _22 = discriminant((*_55));
        switchInt(move _22) -> [1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb18, otherwise: bb3];
    }

    bb2: {
        _0 = const false;
        goto -> bb34;
    }

    bb3: {
        _0 = const true;
        goto -> bb34;
    }

    bb4: {
        _56 = deref_copy (_6.1: &response::MethodResponse);
        _7 = discriminant((*_56));
        switchInt(move _7) -> [1: bb19, otherwise: bb3];
    }

    bb5: {
        _57 = deref_copy (_6.1: &response::MethodResponse);
        _8 = discriminant((*_57));
        switchInt(move _8) -> [2: bb20, otherwise: bb3];
    }

    bb6: {
        _58 = deref_copy (_6.1: &response::MethodResponse);
        _9 = discriminant((*_58));
        switchInt(move _9) -> [3: bb21, otherwise: bb3];
    }

    bb7: {
        _59 = deref_copy (_6.1: &response::MethodResponse);
        _10 = discriminant((*_59));
        switchInt(move _10) -> [4: bb22, otherwise: bb3];
    }

    bb8: {
        _60 = deref_copy (_6.1: &response::MethodResponse);
        _11 = discriminant((*_60));
        switchInt(move _11) -> [5: bb23, otherwise: bb3];
    }

    bb9: {
        _61 = deref_copy (_6.1: &response::MethodResponse);
        _12 = discriminant((*_61));
        switchInt(move _12) -> [6: bb24, otherwise: bb3];
    }

    bb10: {
        _62 = deref_copy (_6.1: &response::MethodResponse);
        _13 = discriminant((*_62));
        switchInt(move _13) -> [7: bb25, otherwise: bb3];
    }

    bb11: {
        _63 = deref_copy (_6.1: &response::MethodResponse);
        _14 = discriminant((*_63));
        switchInt(move _14) -> [8: bb26, otherwise: bb3];
    }

    bb12: {
        _64 = deref_copy (_6.1: &response::MethodResponse);
        _15 = discriminant((*_64));
        switchInt(move _15) -> [9: bb27, otherwise: bb3];
    }

    bb13: {
        _65 = deref_copy (_6.1: &response::MethodResponse);
        _16 = discriminant((*_65));
        switchInt(move _16) -> [10: bb28, otherwise: bb3];
    }

    bb14: {
        _66 = deref_copy (_6.1: &response::MethodResponse);
        _17 = discriminant((*_66));
        switchInt(move _17) -> [11: bb29, otherwise: bb3];
    }

    bb15: {
        _67 = deref_copy (_6.1: &response::MethodResponse);
        _18 = discriminant((*_67));
        switchInt(move _18) -> [12: bb30, otherwise: bb3];
    }

    bb16: {
        _68 = deref_copy (_6.1: &response::MethodResponse);
        _19 = discriminant((*_68));
        switchInt(move _19) -> [13: bb31, otherwise: bb3];
    }

    bb17: {
        _69 = deref_copy (_6.1: &response::MethodResponse);
        _20 = discriminant((*_69));
        switchInt(move _20) -> [14: bb32, otherwise: bb3];
    }

    bb18: {
        _70 = deref_copy (_6.1: &response::MethodResponse);
        _21 = discriminant((*_70));
        switchInt(move _21) -> [15: bb33, otherwise: bb3];
    }

    bb19: {
        _71 = deref_copy (_6.0: &response::MethodResponse);
        _23 = &(((*_71) as GetMetadata).0: diem_json_rpc_types::views::MetadataView);
        _72 = deref_copy (_6.1: &response::MethodResponse);
        _24 = &(((*_72) as GetMetadata).0: diem_json_rpc_types::views::MetadataView);
        _0 = <MetadataView as PartialEq>::eq(_23, _24) -> [return: bb34, unwind continue];
    }

    bb20: {
        _73 = deref_copy (_6.0: &response::MethodResponse);
        _25 = &(((*_73) as GetAccount).0: std::option::Option<diem_json_rpc_types::views::AccountView>);
        _74 = deref_copy (_6.1: &response::MethodResponse);
        _26 = &(((*_74) as GetAccount).0: std::option::Option<diem_json_rpc_types::views::AccountView>);
        _0 = <std::option::Option<AccountView> as PartialEq>::eq(_25, _26) -> [return: bb34, unwind continue];
    }

    bb21: {
        _75 = deref_copy (_6.0: &response::MethodResponse);
        _27 = &(((*_75) as GetTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _76 = deref_copy (_6.1: &response::MethodResponse);
        _28 = &(((*_76) as GetTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _0 = <Vec<TransactionView> as PartialEq>::eq(_27, _28) -> [return: bb34, unwind continue];
    }

    bb22: {
        _77 = deref_copy (_6.0: &response::MethodResponse);
        _29 = &(((*_77) as GetAccountTransaction).0: std::option::Option<diem_json_rpc_types::views::TransactionView>);
        _78 = deref_copy (_6.1: &response::MethodResponse);
        _30 = &(((*_78) as GetAccountTransaction).0: std::option::Option<diem_json_rpc_types::views::TransactionView>);
        _0 = <std::option::Option<TransactionView> as PartialEq>::eq(_29, _30) -> [return: bb34, unwind continue];
    }

    bb23: {
        _79 = deref_copy (_6.0: &response::MethodResponse);
        _31 = &(((*_79) as GetAccountTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _80 = deref_copy (_6.1: &response::MethodResponse);
        _32 = &(((*_80) as GetAccountTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _0 = <Vec<TransactionView> as PartialEq>::eq(_31, _32) -> [return: bb34, unwind continue];
    }

    bb24: {
        _81 = deref_copy (_6.0: &response::MethodResponse);
        _33 = &(((*_81) as GetEvents).0: std::vec::Vec<diem_json_rpc_types::views::EventView>);
        _82 = deref_copy (_6.1: &response::MethodResponse);
        _34 = &(((*_82) as GetEvents).0: std::vec::Vec<diem_json_rpc_types::views::EventView>);
        _0 = <Vec<EventView> as PartialEq>::eq(_33, _34) -> [return: bb34, unwind continue];
    }

    bb25: {
        _83 = deref_copy (_6.0: &response::MethodResponse);
        _35 = &(((*_83) as GetCurrencies).0: std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>);
        _84 = deref_copy (_6.1: &response::MethodResponse);
        _36 = &(((*_84) as GetCurrencies).0: std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>);
        _0 = <Vec<CurrencyInfoView> as PartialEq>::eq(_35, _36) -> [return: bb34, unwind continue];
    }

    bb26: {
        _85 = deref_copy (_6.0: &response::MethodResponse);
        _37 = &(((*_85) as GetNetworkStatus).0: u64);
        _86 = deref_copy (_6.1: &response::MethodResponse);
        _38 = &(((*_86) as GetNetworkStatus).0: u64);
        _39 = (*_37);
        _40 = (*_38);
        _0 = Eq(move _39, move _40);
        goto -> bb34;
    }

    bb27: {
        _87 = deref_copy (_6.0: &response::MethodResponse);
        _41 = &(((*_87) as GetStateProof).0: diem_json_rpc_types::views::StateProofView);
        _88 = deref_copy (_6.1: &response::MethodResponse);
        _42 = &(((*_88) as GetStateProof).0: diem_json_rpc_types::views::StateProofView);
        _0 = <StateProofView as PartialEq>::eq(_41, _42) -> [return: bb34, unwind continue];
    }

    bb28: {
        _89 = deref_copy (_6.0: &response::MethodResponse);
        _43 = &(((*_89) as GetAccumulatorConsistencyProof).0: diem_json_rpc_types::views::AccumulatorConsistencyProofView);
        _90 = deref_copy (_6.1: &response::MethodResponse);
        _44 = &(((*_90) as GetAccumulatorConsistencyProof).0: diem_json_rpc_types::views::AccumulatorConsistencyProofView);
        _0 = <AccumulatorConsistencyProofView as PartialEq>::eq(_43, _44) -> [return: bb34, unwind continue];
    }

    bb29: {
        _91 = deref_copy (_6.0: &response::MethodResponse);
        _45 = &(((*_91) as GetAccountStateWithProof).0: diem_json_rpc_types::views::AccountStateWithProofView);
        _92 = deref_copy (_6.1: &response::MethodResponse);
        _46 = &(((*_92) as GetAccountStateWithProof).0: diem_json_rpc_types::views::AccountStateWithProofView);
        _0 = <AccountStateWithProofView as PartialEq>::eq(_45, _46) -> [return: bb34, unwind continue];
    }

    bb30: {
        _93 = deref_copy (_6.0: &response::MethodResponse);
        _47 = &(((*_93) as GetTransactionsWithProofs).0: std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>);
        _94 = deref_copy (_6.1: &response::MethodResponse);
        _48 = &(((*_94) as GetTransactionsWithProofs).0: std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>);
        _0 = <std::option::Option<TransactionsWithProofsView> as PartialEq>::eq(_47, _48) -> [return: bb34, unwind continue];
    }

    bb31: {
        _95 = deref_copy (_6.0: &response::MethodResponse);
        _49 = &(((*_95) as GetAccountTransactionsWithProofs).0: diem_json_rpc_types::views::AccountTransactionsWithProofView);
        _96 = deref_copy (_6.1: &response::MethodResponse);
        _50 = &(((*_96) as GetAccountTransactionsWithProofs).0: diem_json_rpc_types::views::AccountTransactionsWithProofView);
        _0 = <AccountTransactionsWithProofView as PartialEq>::eq(_49, _50) -> [return: bb34, unwind continue];
    }

    bb32: {
        _97 = deref_copy (_6.0: &response::MethodResponse);
        _51 = &(((*_97) as GetEventsWithProofs).0: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>);
        _98 = deref_copy (_6.1: &response::MethodResponse);
        _52 = &(((*_98) as GetEventsWithProofs).0: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>);
        _0 = <Vec<EventWithProofView> as PartialEq>::eq(_51, _52) -> [return: bb34, unwind continue];
    }

    bb33: {
        _99 = deref_copy (_6.0: &response::MethodResponse);
        _53 = &(((*_99) as GetEventByVersionWithProof).0: diem_json_rpc_types::views::EventByVersionWithProofView);
        _100 = deref_copy (_6.1: &response::MethodResponse);
        _54 = &(((*_100) as GetEventByVersionWithProof).0: diem_json_rpc_types::views::EventByVersionWithProofView);
        _0 = <EventByVersionWithProofView as PartialEq>::eq(_53, _54) -> [return: bb34, unwind continue];
    }

    bb34: {
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:57:28: 57:33>::fmt(_1: &MethodResponse, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &str;
    let _5: &diem_json_rpc_types::views::MetadataView;
    let _6: &str;
    let mut _7: &dyn std::fmt::Debug;
    let _8: &&diem_json_rpc_types::views::MetadataView;
    let _9: &std::option::Option<diem_json_rpc_types::views::AccountView>;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&std::option::Option<diem_json_rpc_types::views::AccountView>;
    let _13: &std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let _14: &str;
    let mut _15: &dyn std::fmt::Debug;
    let _16: &&std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let _17: &std::option::Option<diem_json_rpc_types::views::TransactionView>;
    let _18: &str;
    let mut _19: &dyn std::fmt::Debug;
    let _20: &&std::option::Option<diem_json_rpc_types::views::TransactionView>;
    let _21: &std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let _22: &str;
    let mut _23: &dyn std::fmt::Debug;
    let _24: &&std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let _25: &std::vec::Vec<diem_json_rpc_types::views::EventView>;
    let _26: &str;
    let mut _27: &dyn std::fmt::Debug;
    let _28: &&std::vec::Vec<diem_json_rpc_types::views::EventView>;
    let _29: &std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>;
    let _30: &str;
    let mut _31: &dyn std::fmt::Debug;
    let _32: &&std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>;
    let _33: &u64;
    let _34: &str;
    let mut _35: &dyn std::fmt::Debug;
    let _36: &&u64;
    let _37: &diem_json_rpc_types::views::StateProofView;
    let _38: &str;
    let mut _39: &dyn std::fmt::Debug;
    let _40: &&diem_json_rpc_types::views::StateProofView;
    let _41: &diem_json_rpc_types::views::AccumulatorConsistencyProofView;
    let _42: &str;
    let mut _43: &dyn std::fmt::Debug;
    let _44: &&diem_json_rpc_types::views::AccumulatorConsistencyProofView;
    let _45: &diem_json_rpc_types::views::AccountStateWithProofView;
    let _46: &str;
    let mut _47: &dyn std::fmt::Debug;
    let _48: &&diem_json_rpc_types::views::AccountStateWithProofView;
    let _49: &std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>;
    let _50: &str;
    let mut _51: &dyn std::fmt::Debug;
    let _52: &&std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>;
    let _53: &diem_json_rpc_types::views::AccountTransactionsWithProofView;
    let _54: &str;
    let mut _55: &dyn std::fmt::Debug;
    let _56: &&diem_json_rpc_types::views::AccountTransactionsWithProofView;
    let _57: &std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>;
    let _58: &str;
    let mut _59: &dyn std::fmt::Debug;
    let _60: &&std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>;
    let _61: &diem_json_rpc_types::views::EventByVersionWithProofView;
    let _62: &str;
    let mut _63: &dyn std::fmt::Debug;
    let _64: &&diem_json_rpc_types::views::EventByVersionWithProofView;
    scope 1 {
        debug __self_0 => _5;
    }
    scope 2 {
        debug __self_0 => _9;
    }
    scope 3 {
        debug __self_0 => _13;
    }
    scope 4 {
        debug __self_0 => _17;
    }
    scope 5 {
        debug __self_0 => _21;
    }
    scope 6 {
        debug __self_0 => _25;
    }
    scope 7 {
        debug __self_0 => _29;
    }
    scope 8 {
        debug __self_0 => _33;
    }
    scope 9 {
        debug __self_0 => _37;
    }
    scope 10 {
        debug __self_0 => _41;
    }
    scope 11 {
        debug __self_0 => _45;
    }
    scope 12 {
        debug __self_0 => _49;
    }
    scope 13 {
        debug __self_0 => _53;
    }
    scope 14 {
        debug __self_0 => _57;
    }
    scope 15 {
        debug __self_0 => _61;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb1, otherwise: bb2];
    }

    bb1: {
        _61 = &(((*_1) as GetEventByVersionWithProof).0: diem_json_rpc_types::views::EventByVersionWithProofView);
        _62 = const "GetEventByVersionWithProof";
        _64 = &_61;
        _63 = _64 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _62, move _63) -> [return: bb18, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = const "Submit";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _4) -> [return: bb18, unwind continue];
    }

    bb4: {
        _5 = &(((*_1) as GetMetadata).0: diem_json_rpc_types::views::MetadataView);
        _6 = const "GetMetadata";
        _8 = &_5;
        _7 = _8 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _6, move _7) -> [return: bb18, unwind continue];
    }

    bb5: {
        _9 = &(((*_1) as GetAccount).0: std::option::Option<diem_json_rpc_types::views::AccountView>);
        _10 = const "GetAccount";
        _12 = &_9;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _10, move _11) -> [return: bb18, unwind continue];
    }

    bb6: {
        _13 = &(((*_1) as GetTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _14 = const "GetTransactions";
        _16 = &_13;
        _15 = _16 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _14, move _15) -> [return: bb18, unwind continue];
    }

    bb7: {
        _17 = &(((*_1) as GetAccountTransaction).0: std::option::Option<diem_json_rpc_types::views::TransactionView>);
        _18 = const "GetAccountTransaction";
        _20 = &_17;
        _19 = _20 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _18, move _19) -> [return: bb18, unwind continue];
    }

    bb8: {
        _21 = &(((*_1) as GetAccountTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _22 = const "GetAccountTransactions";
        _24 = &_21;
        _23 = _24 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _22, move _23) -> [return: bb18, unwind continue];
    }

    bb9: {
        _25 = &(((*_1) as GetEvents).0: std::vec::Vec<diem_json_rpc_types::views::EventView>);
        _26 = const "GetEvents";
        _28 = &_25;
        _27 = _28 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _26, move _27) -> [return: bb18, unwind continue];
    }

    bb10: {
        _29 = &(((*_1) as GetCurrencies).0: std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>);
        _30 = const "GetCurrencies";
        _32 = &_29;
        _31 = _32 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _30, move _31) -> [return: bb18, unwind continue];
    }

    bb11: {
        _33 = &(((*_1) as GetNetworkStatus).0: u64);
        _34 = const "GetNetworkStatus";
        _36 = &_33;
        _35 = _36 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _34, move _35) -> [return: bb18, unwind continue];
    }

    bb12: {
        _37 = &(((*_1) as GetStateProof).0: diem_json_rpc_types::views::StateProofView);
        _38 = const "GetStateProof";
        _40 = &_37;
        _39 = _40 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _38, move _39) -> [return: bb18, unwind continue];
    }

    bb13: {
        _41 = &(((*_1) as GetAccumulatorConsistencyProof).0: diem_json_rpc_types::views::AccumulatorConsistencyProofView);
        _42 = const "GetAccumulatorConsistencyProof";
        _44 = &_41;
        _43 = _44 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _42, move _43) -> [return: bb18, unwind continue];
    }

    bb14: {
        _45 = &(((*_1) as GetAccountStateWithProof).0: diem_json_rpc_types::views::AccountStateWithProofView);
        _46 = const "GetAccountStateWithProof";
        _48 = &_45;
        _47 = _48 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _46, move _47) -> [return: bb18, unwind continue];
    }

    bb15: {
        _49 = &(((*_1) as GetTransactionsWithProofs).0: std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>);
        _50 = const "GetTransactionsWithProofs";
        _52 = &_49;
        _51 = _52 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _50, move _51) -> [return: bb18, unwind continue];
    }

    bb16: {
        _53 = &(((*_1) as GetAccountTransactionsWithProofs).0: diem_json_rpc_types::views::AccountTransactionsWithProofView);
        _54 = const "GetAccountTransactionsWithProofs";
        _56 = &_53;
        _55 = _56 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _54, move _55) -> [return: bb18, unwind continue];
    }

    bb17: {
        _57 = &(((*_1) as GetEventsWithProofs).0: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>);
        _58 = const "GetEventsWithProofs";
        _60 = &_57;
        _59 = _60 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _58, move _59) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::from_json(_1: Method, _2: SerdeValue) -> std::result::Result<MethodResponse, error::Error> {
    debug method => _1;
    debug json => _2;
    let mut _0: std::result::Result<response::MethodResponse, error::Error>;
    let _3: response::MethodResponse;
    let mut _4: isize;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, diem_json_rpc_types::views::MetadataView>;
    let mut _6: std::result::Result<diem_json_rpc_types::views::MetadataView, serde_json::Error>;
    let mut _7: serde_json::Value;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _10: diem_json_rpc_types::views::MetadataView;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, std::option::Option<diem_json_rpc_types::views::AccountView>>;
    let mut _12: std::result::Result<std::option::Option<diem_json_rpc_types::views::AccountView>, serde_json::Error>;
    let mut _13: serde_json::Value;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _16: std::option::Option<diem_json_rpc_types::views::AccountView>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, std::vec::Vec<diem_json_rpc_types::views::TransactionView>>;
    let mut _18: std::result::Result<std::vec::Vec<diem_json_rpc_types::views::TransactionView>, serde_json::Error>;
    let mut _19: serde_json::Value;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _22: std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, std::option::Option<diem_json_rpc_types::views::TransactionView>>;
    let mut _24: std::result::Result<std::option::Option<diem_json_rpc_types::views::TransactionView>, serde_json::Error>;
    let mut _25: serde_json::Value;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _28: std::option::Option<diem_json_rpc_types::views::TransactionView>;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, std::vec::Vec<diem_json_rpc_types::views::TransactionView>>;
    let mut _30: std::result::Result<std::vec::Vec<diem_json_rpc_types::views::TransactionView>, serde_json::Error>;
    let mut _31: serde_json::Value;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _34: std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, std::vec::Vec<diem_json_rpc_types::views::EventView>>;
    let mut _36: std::result::Result<std::vec::Vec<diem_json_rpc_types::views::EventView>, serde_json::Error>;
    let mut _37: serde_json::Value;
    let mut _38: isize;
    let _39: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _40: std::vec::Vec<diem_json_rpc_types::views::EventView>;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>>;
    let mut _42: std::result::Result<std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>, serde_json::Error>;
    let mut _43: serde_json::Value;
    let mut _44: isize;
    let _45: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _46: std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, u64>;
    let mut _48: std::result::Result<u64, serde_json::Error>;
    let mut _49: serde_json::Value;
    let mut _50: isize;
    let _51: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _52: u64;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, diem_json_rpc_types::views::StateProofView>;
    let mut _54: std::result::Result<diem_json_rpc_types::views::StateProofView, serde_json::Error>;
    let mut _55: serde_json::Value;
    let mut _56: isize;
    let _57: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _58: diem_json_rpc_types::views::StateProofView;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, diem_json_rpc_types::views::AccumulatorConsistencyProofView>;
    let mut _60: std::result::Result<diem_json_rpc_types::views::AccumulatorConsistencyProofView, serde_json::Error>;
    let mut _61: serde_json::Value;
    let mut _62: isize;
    let _63: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _64: diem_json_rpc_types::views::AccumulatorConsistencyProofView;
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, diem_json_rpc_types::views::AccountStateWithProofView>;
    let mut _66: std::result::Result<diem_json_rpc_types::views::AccountStateWithProofView, serde_json::Error>;
    let mut _67: serde_json::Value;
    let mut _68: isize;
    let _69: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _70: diem_json_rpc_types::views::AccountStateWithProofView;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>>;
    let mut _72: std::result::Result<std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>, serde_json::Error>;
    let mut _73: serde_json::Value;
    let mut _74: isize;
    let _75: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _76: std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, diem_json_rpc_types::views::AccountTransactionsWithProofView>;
    let mut _78: std::result::Result<diem_json_rpc_types::views::AccountTransactionsWithProofView, serde_json::Error>;
    let mut _79: serde_json::Value;
    let mut _80: isize;
    let _81: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _82: diem_json_rpc_types::views::AccountTransactionsWithProofView;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>>;
    let mut _84: std::result::Result<std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>, serde_json::Error>;
    let mut _85: serde_json::Value;
    let mut _86: isize;
    let _87: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _88: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, diem_json_rpc_types::views::EventByVersionWithProofView>;
    let mut _90: std::result::Result<diem_json_rpc_types::views::EventByVersionWithProofView, serde_json::Error>;
    let mut _91: serde_json::Value;
    let mut _92: isize;
    let _93: std::result::Result<std::convert::Infallible, serde_json::Error>;
    let _94: diem_json_rpc_types::views::EventByVersionWithProofView;
    let mut _95: response::MethodResponse;
    let mut _96: bool;
    scope 1 {
        debug response => _3;
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _15;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _16;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _21;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _22;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _27;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _28;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _33;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _34;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _39;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _40;
        scope 25 {
        }
    }
    scope 26 {
        debug residual => _45;
        scope 27 {
        }
    }
    scope 28 {
        debug val => _46;
        scope 29 {
        }
    }
    scope 30 {
        debug residual => _51;
        scope 31 {
        }
    }
    scope 32 {
        debug val => _52;
        scope 33 {
        }
    }
    scope 34 {
        debug residual => _57;
        scope 35 {
        }
    }
    scope 36 {
        debug val => _58;
        scope 37 {
        }
    }
    scope 38 {
        debug residual => _63;
        scope 39 {
        }
    }
    scope 40 {
        debug val => _64;
        scope 41 {
        }
    }
    scope 42 {
        debug residual => _69;
        scope 43 {
        }
    }
    scope 44 {
        debug val => _70;
        scope 45 {
        }
    }
    scope 46 {
        debug residual => _75;
        scope 47 {
        }
    }
    scope 48 {
        debug val => _76;
        scope 49 {
        }
    }
    scope 50 {
        debug residual => _81;
        scope 51 {
        }
    }
    scope 52 {
        debug val => _82;
        scope 53 {
        }
    }
    scope 54 {
        debug residual => _87;
        scope 55 {
        }
    }
    scope 56 {
        debug val => _88;
        scope 57 {
        }
    }
    scope 58 {
        debug residual => _93;
        scope 59 {
        }
    }
    scope 60 {
        debug val => _94;
        scope 61 {
        }
    }

    bb0: {
        _96 = const false;
        _96 = const true;
        _4 = discriminant(_1);
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb9, 3: bb14, 4: bb19, 5: bb24, 6: bb29, 7: bb34, 8: bb39, 9: bb44, 10: bb49, 11: bb54, 12: bb59, 13: bb64, 14: bb69, 15: bb1, otherwise: bb2];
    }

    bb1: {
        _96 = const false;
        _91 = move _2;
        _90 = from_value::<EventByVersionWithProofView>(move _91) -> [return: bb74, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = MethodResponse::Submit;
        goto -> bb78;
    }

    bb4: {
        _96 = const false;
        _7 = move _2;
        _6 = from_value::<MetadataView>(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _5 = <std::result::Result<MetadataView, serde_json::Error> as Try>::branch(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb7, 1: bb8, otherwise: bb2];
    }

    bb7: {
        _10 = move ((_5 as Continue).0: diem_json_rpc_types::views::MetadataView);
        _3 = MethodResponse::GetMetadata(move _10);
        goto -> bb78;
    }

    bb8: {
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _9) -> [return: bb79, unwind continue];
    }

    bb9: {
        _96 = const false;
        _13 = move _2;
        _12 = from_value::<std::option::Option<AccountView>>(move _13) -> [return: bb10, unwind continue];
    }

    bb10: {
        _11 = <std::result::Result<std::option::Option<AccountView>, serde_json::Error> as Try>::branch(move _12) -> [return: bb11, unwind continue];
    }

    bb11: {
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb12, 1: bb13, otherwise: bb2];
    }

    bb12: {
        _16 = move ((_11 as Continue).0: std::option::Option<diem_json_rpc_types::views::AccountView>);
        _3 = MethodResponse::GetAccount(move _16);
        goto -> bb78;
    }

    bb13: {
        _15 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _15) -> [return: bb79, unwind continue];
    }

    bb14: {
        _96 = const false;
        _19 = move _2;
        _18 = from_value::<Vec<TransactionView>>(move _19) -> [return: bb15, unwind continue];
    }

    bb15: {
        _17 = <std::result::Result<Vec<TransactionView>, serde_json::Error> as Try>::branch(move _18) -> [return: bb16, unwind continue];
    }

    bb16: {
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb17, 1: bb18, otherwise: bb2];
    }

    bb17: {
        _22 = move ((_17 as Continue).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _3 = MethodResponse::GetTransactions(move _22);
        goto -> bb78;
    }

    bb18: {
        _21 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _21) -> [return: bb79, unwind continue];
    }

    bb19: {
        _96 = const false;
        _25 = move _2;
        _24 = from_value::<std::option::Option<TransactionView>>(move _25) -> [return: bb20, unwind continue];
    }

    bb20: {
        _23 = <std::result::Result<std::option::Option<TransactionView>, serde_json::Error> as Try>::branch(move _24) -> [return: bb21, unwind continue];
    }

    bb21: {
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb22, 1: bb23, otherwise: bb2];
    }

    bb22: {
        _28 = move ((_23 as Continue).0: std::option::Option<diem_json_rpc_types::views::TransactionView>);
        _3 = MethodResponse::GetAccountTransaction(move _28);
        goto -> bb78;
    }

    bb23: {
        _27 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _27) -> [return: bb79, unwind continue];
    }

    bb24: {
        _96 = const false;
        _31 = move _2;
        _30 = from_value::<Vec<TransactionView>>(move _31) -> [return: bb25, unwind continue];
    }

    bb25: {
        _29 = <std::result::Result<Vec<TransactionView>, serde_json::Error> as Try>::branch(move _30) -> [return: bb26, unwind continue];
    }

    bb26: {
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb27, 1: bb28, otherwise: bb2];
    }

    bb27: {
        _34 = move ((_29 as Continue).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _3 = MethodResponse::GetAccountTransactions(move _34);
        goto -> bb78;
    }

    bb28: {
        _33 = move ((_29 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _33) -> [return: bb79, unwind continue];
    }

    bb29: {
        _96 = const false;
        _37 = move _2;
        _36 = from_value::<Vec<EventView>>(move _37) -> [return: bb30, unwind continue];
    }

    bb30: {
        _35 = <std::result::Result<Vec<EventView>, serde_json::Error> as Try>::branch(move _36) -> [return: bb31, unwind continue];
    }

    bb31: {
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb32, 1: bb33, otherwise: bb2];
    }

    bb32: {
        _40 = move ((_35 as Continue).0: std::vec::Vec<diem_json_rpc_types::views::EventView>);
        _3 = MethodResponse::GetEvents(move _40);
        goto -> bb78;
    }

    bb33: {
        _39 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _39) -> [return: bb79, unwind continue];
    }

    bb34: {
        _96 = const false;
        _43 = move _2;
        _42 = from_value::<Vec<CurrencyInfoView>>(move _43) -> [return: bb35, unwind continue];
    }

    bb35: {
        _41 = <std::result::Result<Vec<CurrencyInfoView>, serde_json::Error> as Try>::branch(move _42) -> [return: bb36, unwind continue];
    }

    bb36: {
        _44 = discriminant(_41);
        switchInt(move _44) -> [0: bb37, 1: bb38, otherwise: bb2];
    }

    bb37: {
        _46 = move ((_41 as Continue).0: std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>);
        _3 = MethodResponse::GetCurrencies(move _46);
        goto -> bb78;
    }

    bb38: {
        _45 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _45) -> [return: bb79, unwind continue];
    }

    bb39: {
        _96 = const false;
        _49 = move _2;
        _48 = from_value::<u64>(move _49) -> [return: bb40, unwind continue];
    }

    bb40: {
        _47 = <std::result::Result<u64, serde_json::Error> as Try>::branch(move _48) -> [return: bb41, unwind continue];
    }

    bb41: {
        _50 = discriminant(_47);
        switchInt(move _50) -> [0: bb42, 1: bb43, otherwise: bb2];
    }

    bb42: {
        _52 = ((_47 as Continue).0: u64);
        _3 = MethodResponse::GetNetworkStatus(_52);
        goto -> bb78;
    }

    bb43: {
        _51 = move ((_47 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _51) -> [return: bb79, unwind continue];
    }

    bb44: {
        _96 = const false;
        _55 = move _2;
        _54 = from_value::<StateProofView>(move _55) -> [return: bb45, unwind continue];
    }

    bb45: {
        _53 = <std::result::Result<StateProofView, serde_json::Error> as Try>::branch(move _54) -> [return: bb46, unwind continue];
    }

    bb46: {
        _56 = discriminant(_53);
        switchInt(move _56) -> [0: bb47, 1: bb48, otherwise: bb2];
    }

    bb47: {
        _58 = move ((_53 as Continue).0: diem_json_rpc_types::views::StateProofView);
        _3 = MethodResponse::GetStateProof(move _58);
        goto -> bb78;
    }

    bb48: {
        _57 = move ((_53 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _57) -> [return: bb79, unwind continue];
    }

    bb49: {
        _96 = const false;
        _61 = move _2;
        _60 = from_value::<AccumulatorConsistencyProofView>(move _61) -> [return: bb50, unwind continue];
    }

    bb50: {
        _59 = <std::result::Result<AccumulatorConsistencyProofView, serde_json::Error> as Try>::branch(move _60) -> [return: bb51, unwind continue];
    }

    bb51: {
        _62 = discriminant(_59);
        switchInt(move _62) -> [0: bb52, 1: bb53, otherwise: bb2];
    }

    bb52: {
        _64 = move ((_59 as Continue).0: diem_json_rpc_types::views::AccumulatorConsistencyProofView);
        _3 = MethodResponse::GetAccumulatorConsistencyProof(move _64);
        goto -> bb78;
    }

    bb53: {
        _63 = move ((_59 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _63) -> [return: bb79, unwind continue];
    }

    bb54: {
        _96 = const false;
        _67 = move _2;
        _66 = from_value::<AccountStateWithProofView>(move _67) -> [return: bb55, unwind continue];
    }

    bb55: {
        _65 = <std::result::Result<AccountStateWithProofView, serde_json::Error> as Try>::branch(move _66) -> [return: bb56, unwind continue];
    }

    bb56: {
        _68 = discriminant(_65);
        switchInt(move _68) -> [0: bb57, 1: bb58, otherwise: bb2];
    }

    bb57: {
        _70 = move ((_65 as Continue).0: diem_json_rpc_types::views::AccountStateWithProofView);
        _3 = MethodResponse::GetAccountStateWithProof(move _70);
        goto -> bb78;
    }

    bb58: {
        _69 = move ((_65 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _69) -> [return: bb79, unwind continue];
    }

    bb59: {
        _96 = const false;
        _73 = move _2;
        _72 = from_value::<std::option::Option<TransactionsWithProofsView>>(move _73) -> [return: bb60, unwind continue];
    }

    bb60: {
        _71 = <std::result::Result<std::option::Option<TransactionsWithProofsView>, serde_json::Error> as Try>::branch(move _72) -> [return: bb61, unwind continue];
    }

    bb61: {
        _74 = discriminant(_71);
        switchInt(move _74) -> [0: bb62, 1: bb63, otherwise: bb2];
    }

    bb62: {
        _76 = move ((_71 as Continue).0: std::option::Option<diem_json_rpc_types::views::TransactionsWithProofsView>);
        _3 = MethodResponse::GetTransactionsWithProofs(move _76);
        goto -> bb78;
    }

    bb63: {
        _75 = move ((_71 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _75) -> [return: bb79, unwind continue];
    }

    bb64: {
        _96 = const false;
        _79 = move _2;
        _78 = from_value::<AccountTransactionsWithProofView>(move _79) -> [return: bb65, unwind continue];
    }

    bb65: {
        _77 = <std::result::Result<AccountTransactionsWithProofView, serde_json::Error> as Try>::branch(move _78) -> [return: bb66, unwind continue];
    }

    bb66: {
        _80 = discriminant(_77);
        switchInt(move _80) -> [0: bb67, 1: bb68, otherwise: bb2];
    }

    bb67: {
        _82 = move ((_77 as Continue).0: diem_json_rpc_types::views::AccountTransactionsWithProofView);
        _3 = MethodResponse::GetAccountTransactionsWithProofs(move _82);
        goto -> bb78;
    }

    bb68: {
        _81 = move ((_77 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _81) -> [return: bb79, unwind continue];
    }

    bb69: {
        _96 = const false;
        _85 = move _2;
        _84 = from_value::<Vec<EventWithProofView>>(move _85) -> [return: bb70, unwind continue];
    }

    bb70: {
        _83 = <std::result::Result<Vec<EventWithProofView>, serde_json::Error> as Try>::branch(move _84) -> [return: bb71, unwind continue];
    }

    bb71: {
        _86 = discriminant(_83);
        switchInt(move _86) -> [0: bb72, 1: bb73, otherwise: bb2];
    }

    bb72: {
        _88 = move ((_83 as Continue).0: std::vec::Vec<diem_json_rpc_types::views::EventWithProofView>);
        _3 = MethodResponse::GetEventsWithProofs(move _88);
        goto -> bb78;
    }

    bb73: {
        _87 = move ((_83 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _87) -> [return: bb79, unwind continue];
    }

    bb74: {
        _89 = <std::result::Result<EventByVersionWithProofView, serde_json::Error> as Try>::branch(move _90) -> [return: bb75, unwind continue];
    }

    bb75: {
        _92 = discriminant(_89);
        switchInt(move _92) -> [0: bb76, 1: bb77, otherwise: bb2];
    }

    bb76: {
        _94 = move ((_89 as Continue).0: diem_json_rpc_types::views::EventByVersionWithProofView);
        _3 = MethodResponse::GetEventByVersionWithProof(move _94);
        goto -> bb78;
    }

    bb77: {
        _93 = move ((_89 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _0 = <std::result::Result<MethodResponse, error::Error> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _93) -> [return: bb79, unwind continue];
    }

    bb78: {
        _95 = move _3;
        _0 = std::result::Result::<MethodResponse, error::Error>::Ok(move _95);
        switchInt(_96) -> [0: bb79, otherwise: bb80];
    }

    bb79: {
        return;
    }

    bb80: {
        drop(_2) -> [return: bb79, unwind continue];
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::method(_1: &MethodResponse) -> Method {
    debug self => _1;
    let mut _0: Method;
    let mut _2: isize;

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = Method::GetEventByVersionWithProof;
        goto -> bb18;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = Method::Submit;
        goto -> bb18;
    }

    bb4: {
        _0 = Method::GetMetadata;
        goto -> bb18;
    }

    bb5: {
        _0 = Method::GetAccount;
        goto -> bb18;
    }

    bb6: {
        _0 = Method::GetTransactions;
        goto -> bb18;
    }

    bb7: {
        _0 = Method::GetAccountTransaction;
        goto -> bb18;
    }

    bb8: {
        _0 = Method::GetAccountTransactions;
        goto -> bb18;
    }

    bb9: {
        _0 = Method::GetEvents;
        goto -> bb18;
    }

    bb10: {
        _0 = Method::GetCurrencies;
        goto -> bb18;
    }

    bb11: {
        _0 = Method::GetNetworkStatus;
        goto -> bb18;
    }

    bb12: {
        _0 = Method::GetStateProof;
        goto -> bb18;
    }

    bb13: {
        _0 = Method::GetAccumulatorConsistencyProof;
        goto -> bb18;
    }

    bb14: {
        _0 = Method::GetAccountStateWithProof;
        goto -> bb18;
    }

    bb15: {
        _0 = Method::GetTransactionsWithProofs;
        goto -> bb18;
    }

    bb16: {
        _0 = Method::GetAccountTransactionsWithProofs;
        goto -> bb18;
    }

    bb17: {
        _0 = Method::GetEventsWithProofs;
        goto -> bb18;
    }

    bb18: {
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::unwrap_get_account(_1: MethodResponse) -> std::option::Option<AccountView> {
    debug self => _1;
    let mut _0: std::option::Option<diem_json_rpc_types::views::AccountView>;
    let mut _2: isize;
    let _3: !;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &Method;
    let _11: Method;
    let mut _12: &response::MethodResponse;
    let mut _13: &[&str; 1];
    let mut _14: isize;
    scope 1 {
        debug inner => _0;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [2: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = move ((_1 as GetAccount).0: std::option::Option<diem_json_rpc_types::views::AccountView>);
        _14 = discriminant(_1);
        switchInt(move _14) -> [2: bb8, otherwise: bb9];
    }

    bb2: {
        _13 = const _;
        _5 = _13 as &[&str] (PointerCoercion(Unsize));
        _12 = &_1;
        _11 = MethodResponse::method(move _12) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_10) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _3 = panic_fmt(move _4) -> bb6;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        return;
    }

    bb9: {
        drop(_1) -> [return: bb8, unwind continue];
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::unwrap_get_account: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetAccount found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_submit(_1: MethodResponse) -> std::result::Result<(), error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<(), error::Error>;
    let mut _2: isize;
    let mut _3: error::Error;
    let _4: std::string::String;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &Method;
    let _12: Method;
    let mut _13: &response::MethodResponse;
    let mut _14: &[&str; 1];
    scope 1 {
        debug res => _4;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = const _;
        _6 = _14 as &[&str] (PointerCoercion(Unsize));
        _13 = &_1;
        _12 = MethodResponse::method(move _13) -> [return: bb3, unwind: bb10];
    }

    bb2: {
        _0 = std::result::Result::<(), error::Error>::Ok(const ());
        goto -> bb8;
    }

    bb3: {
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_11) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _4 = format(move _5) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _3 = error::Error::rpc_response::<std::string::String>(move _4) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _0 = std::result::Result::<(), error::Error>::Err(move _3);
        goto -> bb8;
    }

    bb8: {
        drop(_1) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_submit: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::Submit found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_metadata(_1: MethodResponse) -> std::result::Result<MetadataView, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<diem_json_rpc_types::views::MetadataView, error::Error>;
    let mut _2: isize;
    let _3: diem_json_rpc_types::views::MetadataView;
    let mut _4: error::Error;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Method;
    let _13: Method;
    let mut _14: &response::MethodResponse;
    let mut _15: &[&str; 1];
    let mut _16: bool;
    let mut _17: isize;
    scope 1 {
        debug view => _3;
    }
    scope 2 {
        debug res => _5;
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = MethodResponse::method(move _14) -> [return: bb3, unwind: bb9];
    }

    bb2: {
        _16 = const false;
        _3 = move ((_1 as GetMetadata).0: diem_json_rpc_types::views::MetadataView);
        _0 = std::result::Result::<MetadataView, error::Error>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_12) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = format(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _4 = error::Error::rpc_response::<std::string::String>(move _5) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = std::result::Result::<MetadataView, error::Error>::Err(move _4);
        goto -> bb8;
    }

    bb8: {
        _17 = discriminant(_1);
        switchInt(move _17) -> [1: bb12, otherwise: bb14];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        return;
    }

    bb12: {
        switchInt(_16) -> [0: bb11, otherwise: bb13];
    }

    bb13: {
        drop(((_1 as GetMetadata).0: diem_json_rpc_types::views::MetadataView)) -> [return: bb11, unwind continue];
    }

    bb14: {
        drop(_1) -> [return: bb11, unwind continue];
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_metadata: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetMetadata found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_state_proof(_1: MethodResponse) -> std::result::Result<StateProofView, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<diem_json_rpc_types::views::StateProofView, error::Error>;
    let mut _2: isize;
    let _3: diem_json_rpc_types::views::StateProofView;
    let mut _4: error::Error;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Method;
    let _13: Method;
    let mut _14: &response::MethodResponse;
    let mut _15: &[&str; 1];
    let mut _16: bool;
    let mut _17: isize;
    scope 1 {
        debug state_proof => _3;
    }
    scope 2 {
        debug res => _5;
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [9: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = MethodResponse::method(move _14) -> [return: bb3, unwind: bb9];
    }

    bb2: {
        _16 = const false;
        _3 = move ((_1 as GetStateProof).0: diem_json_rpc_types::views::StateProofView);
        _0 = std::result::Result::<StateProofView, error::Error>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_12) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = format(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _4 = error::Error::rpc_response::<std::string::String>(move _5) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = std::result::Result::<StateProofView, error::Error>::Err(move _4);
        goto -> bb8;
    }

    bb8: {
        _17 = discriminant(_1);
        switchInt(move _17) -> [9: bb12, otherwise: bb14];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        return;
    }

    bb12: {
        switchInt(_16) -> [0: bb11, otherwise: bb13];
    }

    bb13: {
        drop(((_1 as GetStateProof).0: diem_json_rpc_types::views::StateProofView)) -> [return: bb11, unwind continue];
    }

    bb14: {
        drop(_1) -> [return: bb11, unwind continue];
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_state_proof: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetStateProof found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_accumulator_consistency_proof(_1: MethodResponse) -> std::result::Result<AccumulatorConsistencyProofView, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<diem_json_rpc_types::views::AccumulatorConsistencyProofView, error::Error>;
    let mut _2: isize;
    let _3: diem_json_rpc_types::views::AccumulatorConsistencyProofView;
    let mut _4: error::Error;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Method;
    let _13: Method;
    let mut _14: &response::MethodResponse;
    let mut _15: &[&str; 1];
    let mut _16: bool;
    let mut _17: isize;
    scope 1 {
        debug proof => _3;
    }
    scope 2 {
        debug res => _5;
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [10: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = MethodResponse::method(move _14) -> [return: bb3, unwind: bb9];
    }

    bb2: {
        _16 = const false;
        _3 = move ((_1 as GetAccumulatorConsistencyProof).0: diem_json_rpc_types::views::AccumulatorConsistencyProofView);
        _0 = std::result::Result::<AccumulatorConsistencyProofView, error::Error>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_12) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = format(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _4 = error::Error::rpc_response::<std::string::String>(move _5) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = std::result::Result::<AccumulatorConsistencyProofView, error::Error>::Err(move _4);
        goto -> bb8;
    }

    bb8: {
        _17 = discriminant(_1);
        switchInt(move _17) -> [10: bb12, otherwise: bb14];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        return;
    }

    bb12: {
        switchInt(_16) -> [0: bb11, otherwise: bb13];
    }

    bb13: {
        drop(((_1 as GetAccumulatorConsistencyProof).0: diem_json_rpc_types::views::AccumulatorConsistencyProofView)) -> [return: bb11, unwind continue];
    }

    bb14: {
        drop(_1) -> [return: bb11, unwind continue];
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_accumulator_consistency_proof: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetAccumulatorConsistencyProof found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_account(_1: MethodResponse) -> std::result::Result<std::option::Option<AccountView>, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::option::Option<diem_json_rpc_types::views::AccountView>, error::Error>;
    let mut _2: isize;
    let _3: std::option::Option<diem_json_rpc_types::views::AccountView>;
    let mut _4: error::Error;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Method;
    let _13: Method;
    let mut _14: &response::MethodResponse;
    let mut _15: &[&str; 1];
    let mut _16: bool;
    let mut _17: isize;
    scope 1 {
        debug account_view => _3;
    }
    scope 2 {
        debug res => _5;
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [2: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = MethodResponse::method(move _14) -> [return: bb3, unwind: bb9];
    }

    bb2: {
        _16 = const false;
        _3 = move ((_1 as GetAccount).0: std::option::Option<diem_json_rpc_types::views::AccountView>);
        _0 = std::result::Result::<std::option::Option<AccountView>, error::Error>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_12) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = format(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _4 = error::Error::rpc_response::<std::string::String>(move _5) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = std::result::Result::<std::option::Option<AccountView>, error::Error>::Err(move _4);
        goto -> bb8;
    }

    bb8: {
        _17 = discriminant(_1);
        switchInt(move _17) -> [2: bb12, otherwise: bb14];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        return;
    }

    bb12: {
        switchInt(_16) -> [0: bb11, otherwise: bb13];
    }

    bb13: {
        drop(((_1 as GetAccount).0: std::option::Option<diem_json_rpc_types::views::AccountView>)) -> [return: bb11, unwind continue];
    }

    bb14: {
        drop(_1) -> [return: bb11, unwind continue];
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_account: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetAccount found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_transactions(_1: MethodResponse) -> std::result::Result<Vec<TransactionView>, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::vec::Vec<diem_json_rpc_types::views::TransactionView>, error::Error>;
    let mut _2: isize;
    let _3: std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let mut _4: error::Error;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Method;
    let _13: Method;
    let mut _14: &response::MethodResponse;
    let mut _15: &[&str; 1];
    let mut _16: bool;
    let mut _17: isize;
    scope 1 {
        debug txs => _3;
    }
    scope 2 {
        debug res => _5;
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [3: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = MethodResponse::method(move _14) -> [return: bb3, unwind: bb9];
    }

    bb2: {
        _16 = const false;
        _3 = move ((_1 as GetTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _0 = std::result::Result::<Vec<TransactionView>, error::Error>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_12) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = format(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _4 = error::Error::rpc_response::<std::string::String>(move _5) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = std::result::Result::<Vec<TransactionView>, error::Error>::Err(move _4);
        goto -> bb8;
    }

    bb8: {
        _17 = discriminant(_1);
        switchInt(move _17) -> [3: bb12, otherwise: bb14];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        return;
    }

    bb12: {
        switchInt(_16) -> [0: bb11, otherwise: bb13];
    }

    bb13: {
        drop(((_1 as GetTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>)) -> [return: bb11, unwind continue];
    }

    bb14: {
        drop(_1) -> [return: bb11, unwind continue];
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_transactions: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetTransactions found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_account_transaction(_1: MethodResponse) -> std::result::Result<std::option::Option<TransactionView>, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::option::Option<diem_json_rpc_types::views::TransactionView>, error::Error>;
    let mut _2: isize;
    let _3: std::option::Option<diem_json_rpc_types::views::TransactionView>;
    let mut _4: error::Error;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Method;
    let _13: Method;
    let mut _14: &response::MethodResponse;
    let mut _15: &[&str; 1];
    let mut _16: bool;
    let mut _17: isize;
    scope 1 {
        debug tx => _3;
    }
    scope 2 {
        debug res => _5;
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [4: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = MethodResponse::method(move _14) -> [return: bb3, unwind: bb9];
    }

    bb2: {
        _16 = const false;
        _3 = move ((_1 as GetAccountTransaction).0: std::option::Option<diem_json_rpc_types::views::TransactionView>);
        _0 = std::result::Result::<std::option::Option<TransactionView>, error::Error>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_12) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = format(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _4 = error::Error::rpc_response::<std::string::String>(move _5) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = std::result::Result::<std::option::Option<TransactionView>, error::Error>::Err(move _4);
        goto -> bb8;
    }

    bb8: {
        _17 = discriminant(_1);
        switchInt(move _17) -> [4: bb12, otherwise: bb14];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        return;
    }

    bb12: {
        switchInt(_16) -> [0: bb11, otherwise: bb13];
    }

    bb13: {
        drop(((_1 as GetAccountTransaction).0: std::option::Option<diem_json_rpc_types::views::TransactionView>)) -> [return: bb11, unwind continue];
    }

    bb14: {
        drop(_1) -> [return: bb11, unwind continue];
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_account_transaction: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetAccountTransaction found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_account_transactions(_1: MethodResponse) -> std::result::Result<Vec<TransactionView>, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::vec::Vec<diem_json_rpc_types::views::TransactionView>, error::Error>;
    let mut _2: isize;
    let _3: std::vec::Vec<diem_json_rpc_types::views::TransactionView>;
    let mut _4: error::Error;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Method;
    let _13: Method;
    let mut _14: &response::MethodResponse;
    let mut _15: &[&str; 1];
    let mut _16: bool;
    let mut _17: isize;
    scope 1 {
        debug txs => _3;
    }
    scope 2 {
        debug res => _5;
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [5: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = MethodResponse::method(move _14) -> [return: bb3, unwind: bb9];
    }

    bb2: {
        _16 = const false;
        _3 = move ((_1 as GetAccountTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>);
        _0 = std::result::Result::<Vec<TransactionView>, error::Error>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_12) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = format(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _4 = error::Error::rpc_response::<std::string::String>(move _5) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = std::result::Result::<Vec<TransactionView>, error::Error>::Err(move _4);
        goto -> bb8;
    }

    bb8: {
        _17 = discriminant(_1);
        switchInt(move _17) -> [5: bb12, otherwise: bb14];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        return;
    }

    bb12: {
        switchInt(_16) -> [0: bb11, otherwise: bb13];
    }

    bb13: {
        drop(((_1 as GetAccountTransactions).0: std::vec::Vec<diem_json_rpc_types::views::TransactionView>)) -> [return: bb11, unwind continue];
    }

    bb14: {
        drop(_1) -> [return: bb11, unwind continue];
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_account_transactions: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetAccountTransactions found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_account_state_with_proof(_1: MethodResponse) -> std::result::Result<AccountStateWithProofView, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<diem_json_rpc_types::views::AccountStateWithProofView, error::Error>;
    let mut _2: isize;
    let _3: diem_json_rpc_types::views::AccountStateWithProofView;
    let mut _4: error::Error;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Method;
    let _13: Method;
    let mut _14: &response::MethodResponse;
    let mut _15: &[&str; 1];
    let mut _16: bool;
    let mut _17: isize;
    scope 1 {
        debug view => _3;
    }
    scope 2 {
        debug res => _5;
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [11: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = MethodResponse::method(move _14) -> [return: bb3, unwind: bb9];
    }

    bb2: {
        _16 = const false;
        _3 = move ((_1 as GetAccountStateWithProof).0: diem_json_rpc_types::views::AccountStateWithProofView);
        _0 = std::result::Result::<AccountStateWithProofView, error::Error>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_12) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = format(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _4 = error::Error::rpc_response::<std::string::String>(move _5) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = std::result::Result::<AccountStateWithProofView, error::Error>::Err(move _4);
        goto -> bb8;
    }

    bb8: {
        _17 = discriminant(_1);
        switchInt(move _17) -> [11: bb12, otherwise: bb14];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        return;
    }

    bb12: {
        switchInt(_16) -> [0: bb11, otherwise: bb13];
    }

    bb13: {
        drop(((_1 as GetAccountStateWithProof).0: diem_json_rpc_types::views::AccountStateWithProofView)) -> [return: bb11, unwind continue];
    }

    bb14: {
        drop(_1) -> [return: bb11, unwind continue];
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_account_state_with_proof: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetAccountStateWithProof found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_events(_1: MethodResponse) -> std::result::Result<Vec<EventView>, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::vec::Vec<diem_json_rpc_types::views::EventView>, error::Error>;
    let mut _2: isize;
    let _3: std::vec::Vec<diem_json_rpc_types::views::EventView>;
    let mut _4: error::Error;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Method;
    let _13: Method;
    let mut _14: &response::MethodResponse;
    let mut _15: &[&str; 1];
    let mut _16: bool;
    let mut _17: isize;
    scope 1 {
        debug events => _3;
    }
    scope 2 {
        debug res => _5;
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [6: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = MethodResponse::method(move _14) -> [return: bb3, unwind: bb9];
    }

    bb2: {
        _16 = const false;
        _3 = move ((_1 as GetEvents).0: std::vec::Vec<diem_json_rpc_types::views::EventView>);
        _0 = std::result::Result::<Vec<EventView>, error::Error>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_12) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = format(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _4 = error::Error::rpc_response::<std::string::String>(move _5) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = std::result::Result::<Vec<EventView>, error::Error>::Err(move _4);
        goto -> bb8;
    }

    bb8: {
        _17 = discriminant(_1);
        switchInt(move _17) -> [6: bb12, otherwise: bb14];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        return;
    }

    bb12: {
        switchInt(_16) -> [0: bb11, otherwise: bb13];
    }

    bb13: {
        drop(((_1 as GetEvents).0: std::vec::Vec<diem_json_rpc_types::views::EventView>)) -> [return: bb11, unwind continue];
    }

    bb14: {
        drop(_1) -> [return: bb11, unwind continue];
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_events: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetEvents found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_event_by_version_with_proof(_1: MethodResponse) -> std::result::Result<EventByVersionWithProofView, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<diem_json_rpc_types::views::EventByVersionWithProofView, error::Error>;
    let mut _2: isize;
    let _3: diem_json_rpc_types::views::EventByVersionWithProofView;
    let mut _4: error::Error;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Method;
    let _13: Method;
    let mut _14: &response::MethodResponse;
    let mut _15: &[&str; 1];
    let mut _16: bool;
    let mut _17: isize;
    scope 1 {
        debug view => _3;
    }
    scope 2 {
        debug res => _5;
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [15: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = MethodResponse::method(move _14) -> [return: bb3, unwind: bb9];
    }

    bb2: {
        _16 = const false;
        _3 = move ((_1 as GetEventByVersionWithProof).0: diem_json_rpc_types::views::EventByVersionWithProofView);
        _0 = std::result::Result::<EventByVersionWithProofView, error::Error>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_12) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = format(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _4 = error::Error::rpc_response::<std::string::String>(move _5) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = std::result::Result::<EventByVersionWithProofView, error::Error>::Err(move _4);
        goto -> bb8;
    }

    bb8: {
        _17 = discriminant(_1);
        switchInt(move _17) -> [15: bb12, otherwise: bb14];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        return;
    }

    bb12: {
        switchInt(_16) -> [0: bb11, otherwise: bb13];
    }

    bb13: {
        drop(((_1 as GetEventByVersionWithProof).0: diem_json_rpc_types::views::EventByVersionWithProofView)) -> [return: bb11, unwind continue];
    }

    bb14: {
        drop(_1) -> [return: bb11, unwind continue];
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_event_by_version_with_proof: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetEventByVersionWithProof found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_currencies(_1: MethodResponse) -> std::result::Result<Vec<CurrencyInfoView>, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>, error::Error>;
    let mut _2: isize;
    let _3: std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>;
    let mut _4: error::Error;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Method;
    let _13: Method;
    let mut _14: &response::MethodResponse;
    let mut _15: &[&str; 1];
    let mut _16: bool;
    let mut _17: isize;
    scope 1 {
        debug currencies => _3;
    }
    scope 2 {
        debug res => _5;
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [7: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = MethodResponse::method(move _14) -> [return: bb3, unwind: bb9];
    }

    bb2: {
        _16 = const false;
        _3 = move ((_1 as GetCurrencies).0: std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>);
        _0 = std::result::Result::<Vec<CurrencyInfoView>, error::Error>::Ok(move _3);
        goto -> bb8;
    }

    bb3: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_12) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _5 = format(move _6) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        _4 = error::Error::rpc_response::<std::string::String>(move _5) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        _0 = std::result::Result::<Vec<CurrencyInfoView>, error::Error>::Err(move _4);
        goto -> bb8;
    }

    bb8: {
        _17 = discriminant(_1);
        switchInt(move _17) -> [7: bb12, otherwise: bb14];
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        return;
    }

    bb12: {
        switchInt(_16) -> [0: bb11, otherwise: bb13];
    }

    bb13: {
        drop(((_1 as GetCurrencies).0: std::vec::Vec<diem_json_rpc_types::views::CurrencyInfoView>)) -> [return: bb11, unwind continue];
    }

    bb14: {
        drop(_1) -> [return: bb11, unwind continue];
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_currencies: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetCurrencies found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_network_status(_1: MethodResponse) -> std::result::Result<u64, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<u64, error::Error>;
    let mut _2: isize;
    let _3: u64;
    let mut _4: error::Error;
    let _5: std::string::String;
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &Method;
    let _13: Method;
    let mut _14: &response::MethodResponse;
    let mut _15: &[&str; 1];
    scope 1 {
        debug status => _3;
    }
    scope 2 {
        debug res => _5;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [8: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = const _;
        _7 = _15 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _13 = MethodResponse::method(move _14) -> [return: bb3, unwind: bb10];
    }

    bb2: {
        _3 = ((_1 as GetNetworkStatus).0: u64);
        _0 = std::result::Result::<u64, error::Error>::Ok(_3);
        goto -> bb8;
    }

    bb3: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<Method>(_12) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _5 = format(move _6) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _4 = error::Error::rpc_response::<std::string::String>(move _5) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _0 = std::result::Result::<u64, error::Error>::Err(move _4);
        goto -> bb8;
    }

    bb8: {
        drop(_1) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in response::<impl at sdk/client/src/response.rs:81:1: 81:20>::try_into_get_network_status: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "expected MethodResponse::GetNetworkStatus found MethodResponse::"];
        _0 = &_1;
        return;
    }
}

fn move_deserialize::<impl at sdk/client/src/move_deserialize.rs:16:10: 16:15>::fmt(_1: &move_deserialize::Event<T>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &T;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&diem_types::contract_event::ContractEvent;
    let _10: &diem_types::contract_event::ContractEvent;

    bb0: {
        _3 = const "Event";
        _4 = const "data";
        _6 = &((*_1).0: T);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "event";
        _10 = &((*_1).1: diem_types::contract_event::ContractEvent);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn move_deserialize::<impl at sdk/client/src/move_deserialize.rs:16:17: 16:22>::clone(_1: &move_deserialize::Event<T>) -> move_deserialize::Event<T> {
    debug self => _1;
    let mut _0: move_deserialize::Event<T>;
    let mut _2: T;
    let _3: &T;
    let mut _4: diem_types::contract_event::ContractEvent;
    let _5: &diem_types::contract_event::ContractEvent;

    bb0: {
        _3 = &((*_1).0: T);
        _2 = <T as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: diem_types::contract_event::ContractEvent);
        _4 = <ContractEvent as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = move_deserialize::Event::<T> { data: move _2, event: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn move_deserialize::<impl at sdk/client/src/move_deserialize.rs:23:1: 23:52>::data(_1: &move_deserialize::Event<T>) -> &T {
    debug self => _1;
    let mut _0: &T;

    bb0: {
        _0 = &((*_1).0: T);
        return;
    }
}

fn move_deserialize::<impl at sdk/client/src/move_deserialize.rs:23:1: 23:52>::event(_1: &move_deserialize::Event<T>) -> &ContractEvent {
    debug self => _1;
    let mut _0: &diem_types::contract_event::ContractEvent;

    bb0: {
        _0 = &((*_1).1: diem_types::contract_event::ContractEvent);
        return;
    }
}

fn move_deserialize::get_events(_1: Vec<EventWithProofView>) -> std::result::Result<Vec<move_deserialize::Event<T>>, error::Error> {
    debug events => _1;
    let mut _0: std::result::Result<std::vec::Vec<move_deserialize::Event<T>>, error::Error>;
    let _2: std::vec::Vec<diem_types::contract_event::EventWithProof>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::vec::Vec<diem_types::contract_event::EventWithProof>>;
    let mut _4: std::result::Result<std::vec::Vec<diem_types::contract_event::EventWithProof>, error::Error>;
    let mut _5: std::iter::Map<std::vec::IntoIter<diem_json_rpc_types::views::EventWithProofView>, {closure@sdk/client/src/move_deserialize.rs:40:14: 40:17}>;
    let mut _6: std::vec::IntoIter<diem_json_rpc_types::views::EventWithProofView>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, error::Error>;
    let _9: std::vec::Vec<diem_types::contract_event::EventWithProof>;
    let mut _11: move_core_types::language_storage::StructTag;
    let mut _12: std::iter::Map<std::vec::IntoIter<diem_types::contract_event::EventWithProof>, {closure@sdk/client/src/move_deserialize.rs:47:14: 47:17}>;
    let mut _13: std::vec::IntoIter<diem_types::contract_event::EventWithProof>;
    let mut _14: std::vec::Vec<diem_types::contract_event::EventWithProof>;
    let mut _15: {closure@sdk/client/src/move_deserialize.rs:47:14: 47:17};
    let mut _16: &move_core_types::language_storage::TypeTag;
    let mut _17: bool;
    scope 1 {
        debug events_with_proof => _2;
        let _10: move_core_types::language_storage::TypeTag;
        scope 6 {
            debug event_type_tag => _10;
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _9;
        scope 5 {
        }
    }

    bb0: {
        _17 = const false;
        _6 = <Vec<EventWithProofView> as IntoIterator>::into_iter(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <std::vec::IntoIter<EventWithProofView> as Iterator>::map::<std::result::Result<EventWithProof, error::Error>, {closure@sdk/client/src/move_deserialize.rs:40:14: 40:17}>(move _6, const ZeroSized: {closure@sdk/client/src/move_deserialize.rs:40:14: 40:17}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = <std::iter::Map<std::vec::IntoIter<EventWithProofView>, {closure@sdk/client/src/move_deserialize.rs:40:14: 40:17}> as Iterator>::collect::<std::result::Result<Vec<EventWithProof>, error::Error>>(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = <std::result::Result<Vec<EventWithProof>, error::Error> as Try>::branch(move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        _9 = move ((_3 as Continue).0: std::vec::Vec<diem_types::contract_event::EventWithProof>);
        _17 = const true;
        _2 = move _9;
        _11 = <T as MoveStructType>::struct_tag() -> [return: bb9, unwind: bb18];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<Vec<move_deserialize::Event<T>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _8) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = const false;
        goto -> bb14;
    }

    bb9: {
        _10 = move_core_types::language_storage::TypeTag::Struct(move _11);
        _17 = const false;
        _14 = move _2;
        _13 = <Vec<EventWithProof> as IntoIterator>::into_iter(move _14) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _16 = &_10;
        _15 = {closure@sdk/client/src/move_deserialize.rs:47:14: 47:17} { event_type_tag: move _16 };
        _12 = <std::vec::IntoIter<EventWithProof> as Iterator>::map::<std::result::Result<move_deserialize::Event<T>, error::Error>, {closure@sdk/client/src/move_deserialize.rs:47:14: 47:17}>(move _13, move _15) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        _0 = <std::iter::Map<std::vec::IntoIter<EventWithProof>, {closure@sdk/client/src/move_deserialize.rs:47:14: 47:17}> as Iterator>::collect::<std::result::Result<Vec<move_deserialize::Event<T>>, error::Error>>(move _12) -> [return: bb12, unwind: bb15];
    }

    bb12: {
        drop(_10) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _17 = const false;
        goto -> bb14;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_10) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        switchInt(_17) -> [0: bb16, otherwise: bb17];
    }
}

fn move_deserialize::get_events::{closure#0}(_1: &mut {closure@sdk/client/src/move_deserialize.rs:40:14: 40:17}, _2: EventWithProofView) -> std::result::Result<EventWithProof, error::Error> {
    debug e => _2;
    let mut _0: std::result::Result<diem_types::contract_event::EventWithProof, error::Error>;
    let mut _3: std::result::Result<diem_types::contract_event::EventWithProof, bcs::Error>;
    let _4: &[u8];
    let mut _5: &diem_json_rpc_types::views::BytesView;

    bb0: {
        _5 = &(_2.0: diem_json_rpc_types::views::BytesView);
        _4 = BytesView::inner(move _5) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _3 = bcs::from_bytes::<'_, EventWithProof>(_4) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = std::result::Result::<EventWithProof, bcs::Error>::map_err::<error::Error, fn(bcs::Error) -> error::Error {error::Error::decode::<bcs::Error>}>(move _3, error::Error::decode::<bcs::Error>) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn move_deserialize::get_events::{closure#1}(_1: &mut {closure@sdk/client/src/move_deserialize.rs:47:14: 47:17}, _2: EventWithProof) -> std::result::Result<move_deserialize::Event<T>, error::Error> {
    debug e => _2;
    debug event_type_tag => (*((*_1).0: &move_core_types::language_storage::TypeTag));
    let mut _0: std::result::Result<move_deserialize::Event<T>, error::Error>;
    let mut _3: bool;
    let mut _4: &&move_core_types::language_storage::TypeTag;
    let _5: &move_core_types::language_storage::TypeTag;
    let mut _6: &&move_core_types::language_storage::TypeTag;
    let _7: &move_core_types::language_storage::TypeTag;
    let _8: &diem_types::contract_event::ContractEventV0;
    let mut _9: &diem_types::contract_event::ContractEvent;
    let mut _10: error::Error;
    let _11: std::string::String;
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: &[core::fmt::rt::Argument<'_>];
    let _15: &[core::fmt::rt::Argument<'_>; 2];
    let _16: [core::fmt::rt::Argument<'_>; 2];
    let mut _17: core::fmt::rt::Argument<'_>;
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &&move_core_types::language_storage::TypeTag;
    let _20: &move_core_types::language_storage::TypeTag;
    let _21: &diem_types::contract_event::ContractEventV0;
    let mut _22: &diem_types::contract_event::ContractEvent;
    let mut _23: std::result::Result<move_deserialize::Event<T>, bcs::Error>;
    let mut _24: std::result::Result<T, bcs::Error>;
    let _25: &[u8];
    let _26: &diem_types::contract_event::ContractEventV0;
    let mut _27: &diem_types::contract_event::ContractEvent;
    let mut _28: {closure@sdk/client/src/move_deserialize.rs:55:26: 55:32};
    let mut _29: &[&str; 2];
    let mut _30: &move_core_types::language_storage::TypeTag;
    let mut _31: &move_core_types::language_storage::TypeTag;
    let mut _32: bool;
    scope 1 {
        debug res => _11;
    }

    bb0: {
        _32 = const false;
        _32 = const true;
        _30 = deref_copy ((*_1).0: &move_core_types::language_storage::TypeTag);
        _5 = _30;
        _4 = &_5;
        _9 = &(_2.2: diem_types::contract_event::ContractEvent);
        _8 = <ContractEvent as Deref>::deref(move _9) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _7 = ContractEventV0::type_tag(_8) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _6 = &_7;
        _3 = <&TypeTag as PartialEq>::ne(move _4, move _6) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        switchInt(move _3) -> [0: bb12, otherwise: bb4];
    }

    bb4: {
        _29 = const _;
        _13 = _29 as &[&str] (PointerCoercion(Unsize));
        _31 = deref_copy ((*_1).0: &move_core_types::language_storage::TypeTag);
        _17 = core::fmt::rt::Argument::<'_>::new_debug::<TypeTag>(_31) -> [return: bb5, unwind: bb22];
    }

    bb5: {
        _22 = &(_2.2: diem_types::contract_event::ContractEvent);
        _21 = <ContractEvent as Deref>::deref(move _22) -> [return: bb6, unwind: bb22];
    }

    bb6: {
        _20 = ContractEventV0::type_tag(_21) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        _19 = &_20;
        _18 = core::fmt::rt::Argument::<'_>::new_debug::<&TypeTag>(_19) -> [return: bb8, unwind: bb22];
    }

    bb8: {
        _16 = [move _17, move _18];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _12 = Arguments::<'_>::new_v1(move _13, move _14) -> [return: bb9, unwind: bb22];
    }

    bb9: {
        _11 = format(move _12) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        _10 = error::Error::decode::<std::string::String>(move _11) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _0 = std::result::Result::<move_deserialize::Event<T>, error::Error>::Err(move _10);
        goto -> bb17;
    }

    bb12: {
        _27 = &(_2.2: diem_types::contract_event::ContractEvent);
        _26 = <ContractEvent as Deref>::deref(move _27) -> [return: bb13, unwind: bb22];
    }

    bb13: {
        _25 = ContractEventV0::event_data(_26) -> [return: bb14, unwind: bb22];
    }

    bb14: {
        _24 = bcs::from_bytes::<'_, T>(_25) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        _32 = const false;
        _28 = {closure@sdk/client/src/move_deserialize.rs:55:26: 55:32} { e: move _2 };
        _23 = std::result::Result::<T, bcs::Error>::map::<move_deserialize::Event<T>, {closure@sdk/client/src/move_deserialize.rs:55:26: 55:32}>(move _24, move _28) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        _0 = std::result::Result::<move_deserialize::Event<T>, bcs::Error>::map_err::<error::Error, fn(bcs::Error) -> error::Error {error::Error::decode::<bcs::Error>}>(move _23, error::Error::decode::<bcs::Error>) -> [return: bb23, unwind: bb22];
    }

    bb17: {
        switchInt(_32) -> [0: bb18, otherwise: bb20];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        resume;
    }

    bb20: {
        drop(_2) -> [return: bb18, unwind continue];
    }

    bb21 (cleanup): {
        drop(_2) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        switchInt(_32) -> [0: bb19, otherwise: bb21];
    }

    bb23: {
        goto -> bb17;
    }
}

promoted[0] in move_deserialize::get_events::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Type tag of events in stream ", const " does not match type tag of generic type T "];
        _0 = &_1;
        return;
    }
}

fn move_deserialize::get_events::{closure#1}::{closure#0}(_1: {closure@sdk/client/src/move_deserialize.rs:55:26: 55:32}, _2: T) -> move_deserialize::Event<T> {
    debug data => _2;
    debug e => (_1.0: diem_types::contract_event::EventWithProof);
    let mut _0: move_deserialize::Event<T>;
    let mut _3: diem_types::contract_event::ContractEvent;

    bb0: {
        _3 = move ((_1.0: diem_types::contract_event::EventWithProof).2: diem_types::contract_event::ContractEvent);
        _0 = move_deserialize::Event::<T> { data: move _2, event: move _3 };
        drop(((_1.0: diem_types::contract_event::EventWithProof).3: diem_types::proof::EventProof)) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn get_account_state(_1: AccountStateWithProofView) -> std::result::Result<std::option::Option<AccountState>, error::Error> {
    debug account_state_with_proof => _1;
    let mut _0: std::result::Result<std::option::Option<diem_types::account_state::AccountState>, error::Error>;
    let _2: std::option::Option<diem_json_rpc_types::views::BytesView>;
    let mut _3: isize;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::account_state_blob::AccountStateBlob>;
    let mut _7: std::result::Result<diem_types::account_state_blob::AccountStateBlob, error::Error>;
    let mut _8: std::result::Result<diem_types::account_state_blob::AccountStateBlob, bcs::Error>;
    let _9: &[u8];
    let mut _10: &diem_json_rpc_types::views::BytesView;
    let mut _11: isize;
    let mut _14: std::option::Option<diem_types::account_state::AccountState>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, diem_types::account_state::AccountState>;
    let mut _16: std::result::Result<diem_types::account_state::AccountState, error::Error>;
    let mut _17: std::result::Result<diem_types::account_state::AccountState, diem_crypto::error::Error>;
    let mut _18: &diem_types::account_state_blob::AccountStateBlob;
    let mut _19: isize;
    let mut _22: std::option::Option<diem_types::account_state::AccountState>;
    scope 1 {
        debug account_opt => _2;
        scope 2 {
            debug account => _4;
            let _4: diem_json_rpc_types::views::BytesView;
            let _5: diem_types::account_state_blob::AccountStateBlob;
            let _12: std::result::Result<std::convert::Infallible, error::Error>;
            let _13: diem_types::account_state_blob::AccountStateBlob;
            scope 3 {
                debug account_state_blob => _5;
                let _20: std::result::Result<std::convert::Infallible, error::Error>;
                let _21: diem_types::account_state::AccountState;
                scope 8 {
                    debug residual => _20;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _21;
                    scope 11 {
                    }
                }
            }
            scope 4 {
                debug residual => _12;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _13;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _2 = move (_1.1: std::option::Option<diem_json_rpc_types::views::BytesView>);
        _3 = discriminant(_2);
        switchInt(move _3) -> [1: bb1, otherwise: bb14];
    }

    bb1: {
        _4 = move ((_2 as Some).0: diem_json_rpc_types::views::BytesView);
        _10 = &_4;
        _9 = BytesView::inner(move _10) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _8 = bcs::from_bytes::<'_, AccountStateBlob>(_9) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _7 = std::result::Result::<AccountStateBlob, bcs::Error>::map_err::<error::Error, fn(bcs::Error) -> error::Error {error::Error::decode::<bcs::Error>}>(move _8, error::Error::decode::<bcs::Error>) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _6 = <std::result::Result<AccountStateBlob, error::Error> as Try>::branch(move _7) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        _13 = move ((_6 as Continue).0: diem_types::account_state_blob::AccountStateBlob);
        _5 = move _13;
        _18 = &_5;
        _17 = <AccountState as TryFrom<&AccountStateBlob>>::try_from(move _18) -> [return: bb9, unwind: bb20];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _12 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<std::option::Option<AccountState>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _12) -> [return: bb24, unwind: bb21];
    }

    bb9: {
        _16 = std::result::Result::<AccountState, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _17, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        _15 = <std::result::Result<AccountState, error::Error> as Try>::branch(move _16) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        _19 = discriminant(_15);
        switchInt(move _19) -> [0: bb12, 1: bb13, otherwise: bb7];
    }

    bb12: {
        _21 = move ((_15 as Continue).0: diem_types::account_state::AccountState);
        _14 = std::option::Option::<AccountState>::Some(move _21);
        _0 = std::result::Result::<std::option::Option<AccountState>, error::Error>::Ok(move _14);
        goto -> bb16;
    }

    bb13: {
        _20 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<std::option::Option<AccountState>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _20) -> [return: bb25, unwind: bb20];
    }

    bb14: {
        _22 = std::option::Option::<AccountState>::None;
        _0 = std::result::Result::<std::option::Option<AccountState>, error::Error>::Ok(move _22);
        drop(_2) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        drop((_1.2: diem_json_rpc_types::views::AccountStateProofView)) -> [return: bb19, unwind continue];
    }

    bb16: {
        drop(_5) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        drop(_4) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        drop((_1.2: diem_json_rpc_types::views::AccountStateProofView)) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_5) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        drop(_4) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop((_1.2: diem_json_rpc_types::views::AccountStateProofView)) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        resume;
    }

    bb24: {
        goto -> bb17;
    }

    bb25: {
        goto -> bb16;
    }
}

fn get_resource(_1: AccountStateWithProofView) -> std::result::Result<std::option::Option<T>, error::Error> {
    debug account_state_with_proof => _1;
    let mut _0: std::result::Result<std::option::Option<T>, error::Error>;
    let mut _2: std::option::Option<diem_types::account_state::AccountState>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, std::option::Option<diem_types::account_state::AccountState>>;
    let mut _4: std::result::Result<std::option::Option<diem_types::account_state::AccountState>, error::Error>;
    let mut _5: isize;
    let mut _8: isize;
    let mut _10: std::result::Result<std::option::Option<T>, diem_crypto::error::Error>;
    let mut _11: &diem_types::account_state::AccountState;
    let mut _12: std::option::Option<T>;
    scope 1 {
        debug account_state => _9;
        let _6: std::result::Result<std::convert::Infallible, error::Error>;
        let _7: std::option::Option<diem_types::account_state::AccountState>;
        let _9: diem_types::account_state::AccountState;
        scope 2 {
            debug residual => _6;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _7;
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = get_account_state(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <std::result::Result<std::option::Option<AccountState>, error::Error> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _7 = move ((_3 as Continue).0: std::option::Option<diem_types::account_state::AccountState>);
        _2 = move _7;
        _8 = discriminant(_2);
        switchInt(move _8) -> [1: bb7, otherwise: bb6];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _6 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<std::option::Option<T>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _6) -> [return: bb10, unwind continue];
    }

    bb6: {
        drop(_2) -> [return: bb13, unwind continue];
    }

    bb7: {
        _9 = move ((_2 as Some).0: diem_types::account_state::AccountState);
        _11 = &_9;
        _10 = AccountState::get_resource::<T>(move _11) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        _0 = std::result::Result::<std::option::Option<T>, diem_crypto::error::Error>::map_err::<error::Error, fn(diem_crypto::error::Error) -> error::Error {error::Error::decode::<diem_crypto::error::Error>}>(move _10, error::Error::decode::<diem_crypto::error::Error>) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        drop(_9) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_9) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13: {
        _12 = std::option::Option::<T>::None;
        _0 = std::result::Result::<std::option::Option<T>, error::Error>::Ok(move _12);
        goto -> bb10;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:37:1: 37:24>::new(_1: diem_json_rpc_types::Id, _2: tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>) -> SubscriptionSender {
    debug id => _1;
    debug sender => _2;
    let mut _0: stream::streaming_client::SubscriptionSender;

    bb0: {
        _0 = SubscriptionSender { id: move _1, sender: move _2 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:52:1: 52:24>::new(_1: diem_json_rpc_types::Id, _2: tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>, _3: StreamingClient) -> SubscriptionStream {
    debug id => _1;
    debug stream => _2;
    debug client => _3;
    let mut _0: stream::streaming_client::SubscriptionStream;

    bb0: {
        _0 = SubscriptionStream { id: move _1, stream: move _2, client: move _3 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:52:1: 52:24>::id(_1: &SubscriptionStream) -> &diem_json_rpc_types::Id {
    debug self => _1;
    let mut _0: &diem_json_rpc_types::Id;

    bb0: {
        _0 = &((*_1).0: diem_json_rpc_types::Id);
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:52:1: 52:24>::wait_for_msg(_1: &mut SubscriptionStream) -> {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6} {
    debug self => _1;
    let mut _0: {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/streaming_client.rs:61:95: 66:6 (#0)} { self: move _1 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:52:1: 52:24>::wait_for_msg::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<std::result::Result<StreamJsonRpcResponse, StreamError>, StreamError>> {
    debug _task_context => _18;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6})).0: &mut stream::streaming_client::SubscriptionStream);
    let mut _0: std::task::Poll<std::result::Result<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>, error::StreamError>>;
    let _3: &mut stream::streaming_client::SubscriptionStream;
    let mut _4: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}};
    let mut _5: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}};
    let mut _6: &mut tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _7: std::task::Poll<std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
    let mut _8: std::pin::Pin<&mut {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}}>;
    let mut _9: &mut {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}};
    let mut _10: &mut std::task::Context<'_>;
    let mut _11: isize;
    let mut _13: isize;
    let mut _14: error::StreamError;
    let mut _15: std::option::Option<error::StreamError>;
    let mut _17: std::result::Result<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>, error::StreamError>;
    let mut _18: &mut std::task::Context<'_>;
    let mut _19: u32;
    let mut _20: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6};
    let mut _21: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6};
    let mut _22: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6};
    let mut _23: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6};
    let mut _24: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6};
    let mut _25: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6};
    let mut _26: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6};
    let mut _27: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6};
    let mut _28: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6};
    scope 1 {
        debug self => _3;
        let _16: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>;
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6})) as variant#3).0: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}});
            let _12: std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
            scope 3 {
            }
            scope 4 {
                debug result => _12;
            }
        }
        scope 5 {
            debug msg => _16;
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6});
        _19 = discriminant((*_20));
        switchInt(move _19) -> [0: bb1, 1: bb19, 2: bb18, 3: bb17, otherwise: bb8];
    }

    bb1: {
        _18 = move _2;
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6});
        _3 = move ((*_21).0: &mut stream::streaming_client::SubscriptionStream);
        _6 = &mut ((*_3).1: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _5 = tokio::sync::mpsc::Receiver::<std::result::Result<StreamJsonRpcResponse, StreamError>>::recv(move _6) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _4 = <{async fn body@tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>::recv::{closure#0}} as std::future::IntoFuture>::into_future(move _5) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6});
        (((*_22) as variant#3).0: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}}) = move _4;
        goto -> bb4;
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6});
        _9 = &mut (((*_23) as variant#3).0: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}});
        _8 = Pin::<&mut {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>::recv::{closure#0}}>::new_unchecked(_9) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        _10 = _18;
        _7 = <{async fn body@tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>::recv::{closure#0}} as futures::Future>::poll(move _8, _10) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<std::result::Result<std::result::Result<StreamJsonRpcResponse, StreamError>, StreamError>>::Pending;
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6});
        discriminant((*_24)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _12 = move ((_7 as Ready).0: std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6});
        drop((((*_25) as variant#3).0: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}})) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _13 = discriminant(_12);
        switchInt(move _13) -> [0: bb12, 1: bb11, otherwise: bb8];
    }

    bb11: {
        _16 = move ((_12 as Some).0: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>);
        _17 = std::result::Result::<std::result::Result<StreamJsonRpcResponse, StreamError>, StreamError>::Ok(move _16);
        goto -> bb14;
    }

    bb12: {
        _15 = std::option::Option::<StreamError>::None;
        _14 = StreamError::connection_closed::<StreamError>(move _15) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _17 = std::result::Result::<std::result::Result<StreamJsonRpcResponse, StreamError>, StreamError>::Err(move _14);
        goto -> bb14;
    }

    bb14: {
        _0 = Poll::<std::result::Result<std::result::Result<StreamJsonRpcResponse, StreamError>, StreamError>>::Ready(move _17);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6});
        discriminant((*_26)) = 1;
        return;
    }

    bb15 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6});
        drop((((*_27) as variant#3).0: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}})) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6});
        discriminant((*_28)) = 2;
        resume;
    }

    bb17: {
        _18 = move _2;
        goto -> bb4;
    }

    bb18: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb18, unwind continue];
    }

    bb19: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb19, unwind continue];
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:69:1: 69:33>::drop(_1: &mut SubscriptionStream) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: stream::streaming_client::StreamingClient;
    let mut _3: &stream::streaming_client::StreamingClient;
    let mut _5: &diem_json_rpc_types::Id;
    let _6: ();
    let mut _7: &mut tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let _8: tokio::task::JoinHandle<()>;
    let mut _9: {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _10: bool;
    let mut _11: bool;
    scope 1 {
        debug client => _2;
        let _4: diem_json_rpc_types::Id;
        scope 2 {
            debug id => _4;
        }
    }

    bb0: {
        _11 = const false;
        _10 = const false;
        _3 = &((*_1).2: stream::streaming_client::StreamingClient);
        _11 = const true;
        _2 = <StreamingClient as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).0: diem_json_rpc_types::Id);
        _4 = <diem_json_rpc_types::Id as Clone>::clone(move _5) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _10 = const true;
        _7 = &mut ((*_1).1: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _6 = tokio::sync::mpsc::Receiver::<std::result::Result<StreamJsonRpcResponse, StreamError>>::close(move _7) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _11 = const false;
        _10 = const false;
        _9 = {coroutine@sdk/client/src/stream/streaming_client.rs:74:28: 78:10 (#0)} { client: move _2, id: move _4 };
        _8 = tokio::spawn::<{async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10}>(move _9) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        drop(_8) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _10 = const false;
        _11 = const false;
        return;
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        switchInt(_10) -> [0: bb10, otherwise: bb7];
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        switchInt(_11) -> [0: bb6, otherwise: bb9];
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:69:1: 69:33>::drop::{closure#0}(_1: Pin<&mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10}>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _25;
    debug client => ((*(_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10})).0: stream::streaming_client::StreamingClient);
    debug id => ((*(_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10})).1: diem_json_rpc_types::Id);
    let mut _0: std::task::Poll<()>;
    let mut _3: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _4: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _5: &stream::streaming_client::StreamingClient;
    let _6: &diem_json_rpc_types::Id;
    let mut _7: std::task::Poll<bool>;
    let mut _8: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}>;
    let mut _9: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _10: &mut std::task::Context<'_>;
    let mut _11: isize;
    let mut _13: std::result::Result<(), error::StreamError>;
    let mut _14: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _15: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _16: &mut stream::streaming_client::StreamingClient;
    let _17: &diem_json_rpc_types::Id;
    let mut _18: std::task::Poll<std::result::Result<(), error::StreamError>>;
    let mut _19: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6}>;
    let mut _20: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _21: &mut std::task::Context<'_>;
    let mut _22: isize;
    let mut _24: ();
    let mut _25: &mut std::task::Context<'_>;
    let mut _26: u32;
    let mut _27: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _28: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _29: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _30: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _31: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _32: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _33: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _34: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _35: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _36: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _37: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _38: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _39: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _40: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _41: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _42: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _43: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _44: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _45: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _46: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _47: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    let mut _48: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10};
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10})) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        let _12: bool;
        scope 2 {
        }
        scope 3 {
            debug result => _12;
        }
    }
    scope 4 {
    }
    scope 5 {
        debug __awaitee => (((*(_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10})) as variant#4).0: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        let _23: std::result::Result<(), error::StreamError>;
        scope 6 {
        }
        scope 7 {
            debug result => _23;
        }
    }

    bb0: {
        _27 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        _26 = discriminant((*_27));
        switchInt(move _26) -> [0: bb1, 1: bb31, 2: bb30, 3: bb28, 4: bb29, otherwise: bb8];
    }

    bb1: {
        _25 = move _2;
        _28 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        _5 = &((*_28).0: stream::streaming_client::StreamingClient);
        _29 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        _6 = &((*_29).1: diem_json_rpc_types::Id);
        _4 = StreamingClient::clear_subscription(move _5, _6) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _3 = <{async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6} as std::future::IntoFuture>::into_future(move _4) -> [return: bb3, unwind: bb27];
    }

    bb3: {
        _30 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        (((*_30) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}) = move _3;
        goto -> bb4;
    }

    bb4: {
        _31 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        _9 = &mut (((*_31) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        _8 = Pin::<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}>::new_unchecked(_9) -> [return: bb5, unwind: bb21];
    }

    bb5: {
        _10 = _25;
        _7 = <{async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6} as futures::Future>::poll(move _8, _10) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<()>::Pending;
        _32 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        discriminant((*_32)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _12 = ((_7 as Ready).0: bool);
        _33 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        drop((((*_33) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6})) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        _34 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        _16 = &mut ((*_34).0: stream::streaming_client::StreamingClient);
        _35 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        _17 = &((*_35).1: diem_json_rpc_types::Id);
        _15 = StreamingClient::send_unsubscribe(move _16, _17) -> [return: bb11, unwind: bb27];
    }

    bb11: {
        _14 = <{async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6} as std::future::IntoFuture>::into_future(move _15) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        _36 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        (((*_36) as variant#4).0: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6}) = move _14;
        goto -> bb13;
    }

    bb13: {
        _37 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        _20 = &mut (((*_37) as variant#4).0: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        _19 = Pin::<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6}>::new_unchecked(_20) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _21 = _25;
        _18 = <{async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6} as futures::Future>::poll(move _19, _21) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        _22 = discriminant(_18);
        switchInt(move _22) -> [0: bb17, 1: bb16, otherwise: bb8];
    }

    bb16: {
        _0 = Poll::<()>::Pending;
        _38 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        discriminant((*_38)) = 4;
        return;
    }

    bb17: {
        _23 = move ((_18 as Ready).0: std::result::Result<(), error::StreamError>);
        _13 = move _23;
        _39 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        drop((((*_39) as variant#4).0: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6})) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        drop(_13) -> [return: bb19, unwind: bb27];
    }

    bb19: {
        _24 = const ();
        _45 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        drop(((*_45).0: stream::streaming_client::StreamingClient)) -> [return: bb25, unwind: bb24];
    }

    bb20 (cleanup): {
        _41 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        drop((((*_41) as variant#4).0: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6})) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        _42 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        drop((((*_42) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6})) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        _48 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        discriminant((*_48)) = 2;
        resume;
    }

    bb23: {
        _0 = Poll::<()>::Ready(move _24);
        _40 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        discriminant((*_40)) = 1;
        return;
    }

    bb24 (cleanup): {
        _43 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        drop(((*_43).1: diem_json_rpc_types::Id)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb25: {
        _44 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        drop(((*_44).1: diem_json_rpc_types::Id)) -> [return: bb23, unwind: bb22];
    }

    bb26 (cleanup): {
        _46 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        drop(((*_46).1: diem_json_rpc_types::Id)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        _47 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:74:28: 78:10});
        drop(((*_47).0: stream::streaming_client::StreamingClient)) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb28: {
        _25 = move _2;
        goto -> bb4;
    }

    bb29: {
        _25 = move _2;
        goto -> bb13;
    }

    bb30: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb30, unwind continue];
    }

    bb31: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb31, unwind continue];
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:82:1: 82:35>::poll_next(_1: Pin<&mut SubscriptionStream>, _2: &mut Context<'_>) -> Poll<std::option::Option<std::result::Result<StreamJsonRpcResponse, StreamError>>> {
    debug self => _1;
    debug cx => _2;
    let mut _0: std::task::Poll<std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
    let mut _3: &mut tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _4: &mut stream::streaming_client::SubscriptionStream;
    let mut _5: &mut std::pin::Pin<&mut stream::streaming_client::SubscriptionStream>;

    bb0: {
        _5 = &mut _1;
        _4 = <Pin<&mut SubscriptionStream> as DerefMut>::deref_mut(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut ((*_4).1: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _0 = tokio::sync::mpsc::Receiver::<std::result::Result<StreamJsonRpcResponse, StreamError>>::poll_recv(move _3, _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:98:1: 98:39>::default() -> StreamingClientConfig {
    let mut _0: stream::streaming_client::StreamingClientConfig;

    bb0: {
        _0 = StreamingClientConfig { channel_size: const 10_usize, ok_timeout_millis: const 1000_u64 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:109:10: 109:15>::clone(_1: &StreamingClient) -> StreamingClient {
    debug self => _1;
    let mut _0: stream::streaming_client::StreamingClient;
    let mut _2: std::sync::Arc<tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>>;
    let _3: &std::sync::Arc<tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>>;
    let mut _4: std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let _5: &std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let mut _6: std::sync::Arc<tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>;
    let _7: &std::sync::Arc<tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>;
    let mut _8: std::sync::Arc<stream::streaming_client::StreamingClientConfig>;
    let _9: &std::sync::Arc<stream::streaming_client::StreamingClientConfig>;

    bb0: {
        _3 = &((*_1).0: std::sync::Arc<tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>>);
        _2 = <Arc<tokio::sync::RwLock<WebsocketTransport>> as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>);
        _4 = <Arc<tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>> as Clone>::clone(_5) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _7 = &((*_1).2: std::sync::Arc<tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>);
        _6 = <Arc<tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>>> as Clone>::clone(_7) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _9 = &((*_1).3: std::sync::Arc<stream::streaming_client::StreamingClientConfig>);
        _8 = <Arc<StreamingClientConfig> as Clone>::clone(_9) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _0 = StreamingClient { client: move _2, subscriptions: move _4, stream: move _6, config: move _8 };
        return;
    }

    bb5 (cleanup): {
        drop(_6) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::new(_1: T, _2: StreamingClientConfig, _3: std::option::Option<WebSocketConfig>) -> {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6} {
    debug url => _1;
    debug config => _2;
    debug websocket_config => _3;
    let mut _0: {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/streaming_client.rs:122:29: 138:6 (#0)} { url: move _1, config: move _2, websocket_config: _3 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::new::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<StreamingClient, StreamError>> {
    debug _task_context => _43;
    debug url => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6})).0: T);
    debug config => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6})).1: stream::streaming_client::StreamingClientConfig);
    debug websocket_config => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6})).2: std::option::Option<tokio_tungstenite::tungstenite::protocol::WebSocketConfig>);
    let mut _0: std::task::Poll<std::result::Result<stream::streaming_client::StreamingClient, error::StreamError>>;
    let _3: T;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::StreamError>, stream::websocket_transport::WebsocketTransport>;
    let mut _7: {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _8: {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _9: std::task::Poll<std::result::Result<stream::websocket_transport::WebsocketTransport, error::StreamError>>;
    let mut _10: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6}>;
    let mut _11: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _12: &mut std::task::Context<'_>;
    let mut _13: isize;
    let mut _15: isize;
    let mut _19: tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _20: std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>;
    let mut _23: (tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>, stream::websocket_transport::WebsocketTransport);
    let mut _24: stream::websocket_transport::WebsocketTransport;
    let mut _26: std::sync::Arc<tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>>;
    let mut _27: tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>;
    let mut _28: stream::websocket_transport::WebsocketTransport;
    let mut _29: std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let mut _30: std::sync::Arc<tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>;
    let mut _31: tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
    let mut _32: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _33: std::sync::Arc<stream::streaming_client::StreamingClientConfig>;
    let mut _34: stream::streaming_client::StreamingClientConfig;
    let _35: ();
    let mut _36: &mut stream::streaming_client::StreamingClient;
    let mut _37: stream::streaming_client::StreamingClient;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: std::result::Result<stream::streaming_client::StreamingClient, error::StreamError>;
    let mut _43: &mut std::task::Context<'_>;
    let mut _44: u32;
    let mut _45: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    let mut _46: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    let mut _47: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    let mut _48: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    let mut _49: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    let mut _50: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    let mut _51: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    let mut _52: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    let mut _53: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    let mut _54: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    let mut _55: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    let mut _56: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    let mut _57: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6};
    scope 1 {
        debug url => _3;
        scope 2 {
            debug config => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6})) as variant#3).0: stream::streaming_client::StreamingClientConfig);
            let _4: std::option::Option<tokio_tungstenite::tungstenite::protocol::WebSocketConfig>;
            scope 3 {
                debug websocket_config => _4;
                let _5: stream::websocket_transport::WebsocketTransport;
                let _16: std::result::Result<std::convert::Infallible, error::StreamError>;
                let _17: stream::websocket_transport::WebsocketTransport;
                scope 4 {
                    debug client => _5;
                    let _18: std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
                    scope 12 {
                        debug subscriptions => _18;
                        let _21: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
                        let _22: stream::websocket_transport::WebsocketTransport;
                        scope 13 {
                            debug stream => _21;
                            debug client => _22;
                            let mut _25: stream::streaming_client::StreamingClient;
                            scope 14 {
                                debug sct => _25;
                            }
                        }
                    }
                }
                scope 5 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6})) as variant#3).1: {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
                    let _14: std::result::Result<stream::websocket_transport::WebsocketTransport, error::StreamError>;
                    scope 6 {
                    }
                    scope 7 {
                        debug result => _14;
                    }
                }
                scope 8 {
                    debug residual => _16;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _17;
                    scope 11 {
                    }
                }
            }
        }
    }

    bb0: {
        _45 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        _44 = discriminant((*_45));
        switchInt(move _44) -> [0: bb1, 1: bb43, 2: bb42, 3: bb41, otherwise: bb8];
    }

    bb1: {
        _43 = move _2;
        _41 = const false;
        _40 = const false;
        _39 = const false;
        _38 = const false;
        _46 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        _3 = move ((*_46).0: T);
        _47 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        _48 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        (((*_47) as variant#3).0: stream::streaming_client::StreamingClientConfig) = move ((*_48).1: stream::streaming_client::StreamingClientConfig);
        _49 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        _4 = ((*_49).2: std::option::Option<tokio_tungstenite::tungstenite::protocol::WebSocketConfig>);
        _8 = WebsocketTransport::new::<T>(move _3, _4) -> [return: bb2, unwind: bb35];
    }

    bb2: {
        _7 = <{async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6} as std::future::IntoFuture>::into_future(move _8) -> [return: bb3, unwind: bb35];
    }

    bb3: {
        _50 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        (((*_50) as variant#3).1: {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6}) = move _7;
        goto -> bb4;
    }

    bb4: {
        _51 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        _11 = &mut (((*_51) as variant#3).1: {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        _10 = Pin::<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6}>::new_unchecked(_11) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        _12 = _43;
        _9 = <{async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6} as futures::Future>::poll(move _10, _12) -> [return: bb6, unwind: bb34];
    }

    bb6: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<std::result::Result<StreamingClient, StreamError>>::Pending;
        _52 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        discriminant((*_52)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _14 = move ((_9 as Ready).0: std::result::Result<stream::websocket_transport::WebsocketTransport, error::StreamError>);
        _53 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        drop((((*_53) as variant#3).1: {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6})) -> [return: bb10, unwind: bb35];
    }

    bb10: {
        _6 = <std::result::Result<WebsocketTransport, StreamError> as Try>::branch(move _14) -> [return: bb11, unwind: bb35];
    }

    bb11: {
        _15 = discriminant(_6);
        switchInt(move _15) -> [0: bb12, 1: bb13, otherwise: bb8];
    }

    bb12: {
        _17 = move ((_6 as Continue).0: stream::websocket_transport::WebsocketTransport);
        _41 = const true;
        _5 = move _17;
        _20 = HashMap::<diem_json_rpc_types::Id, SubscriptionSender>::new() -> [return: bb15, unwind: bb33];
    }

    bb13: {
        _16 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::StreamError>);
        _42 = <std::result::Result<StreamingClient, StreamError> as FromResidual<std::result::Result<Infallible, StreamError>>>::from_residual(move _16) -> [return: bb14, unwind: bb35];
    }

    bb14: {
        _41 = const false;
        goto -> bb25;
    }

    bb15: {
        _19 = tokio::sync::RwLock::<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::new(move _20) -> [return: bb16, unwind: bb33];
    }

    bb16: {
        _18 = Arc::<tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>>::new(move _19) -> [return: bb17, unwind: bb33];
    }

    bb17: {
        _40 = const true;
        _41 = const false;
        _24 = move _5;
        _23 = WebsocketTransport::get_stream(move _24) -> [return: bb18, unwind: bb39];
    }

    bb18: {
        _39 = const true;
        _21 = move (_23.0: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _38 = const true;
        _22 = move (_23.1: stream::websocket_transport::WebsocketTransport);
        _38 = const false;
        _28 = move _22;
        _27 = tokio::sync::RwLock::<WebsocketTransport>::new(move _28) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _26 = Arc::<tokio::sync::RwLock<WebsocketTransport>>::new(move _27) -> [return: bb20, unwind: bb30];
    }

    bb20: {
        _40 = const false;
        _29 = move _18;
        _39 = const false;
        _32 = move _21;
        _31 = tokio::sync::RwLock::<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>>::new(move _32) -> [return: bb21, unwind: bb28];
    }

    bb21: {
        _30 = Arc::<tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>>>::new(move _31) -> [return: bb22, unwind: bb28];
    }

    bb22: {
        _54 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        _34 = move (((*_54) as variant#3).0: stream::streaming_client::StreamingClientConfig);
        _33 = Arc::<StreamingClientConfig>::new(move _34) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        _25 = StreamingClient { client: move _26, subscriptions: move _29, stream: move _30, config: move _33 };
        _36 = &mut _25;
        _35 = StreamingClient::start_channel_task(move _36) -> [return: bb24, unwind: bb26];
    }

    bb24: {
        _37 = move _25;
        _42 = std::result::Result::<StreamingClient, StreamError>::Ok(move _37);
        _38 = const false;
        _39 = const false;
        _40 = const false;
        _41 = const false;
        goto -> bb25;
    }

    bb25: {
        _0 = Poll::<std::result::Result<StreamingClient, StreamError>>::Ready(move _42);
        _55 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        discriminant((*_55)) = 1;
        return;
    }

    bb26 (cleanup): {
        drop(_25) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_30) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_29) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_26) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        switchInt(_38) -> [0: bb31, otherwise: bb36];
    }

    bb31 (cleanup): {
        _38 = const false;
        switchInt(_39) -> [0: bb32, otherwise: bb37];
    }

    bb32 (cleanup): {
        _39 = const false;
        goto -> bb39;
    }

    bb33 (cleanup): {
        _40 = const false;
        switchInt(_41) -> [0: bb35, otherwise: bb40];
    }

    bb34 (cleanup): {
        _56 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        drop((((*_56) as variant#3).1: {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6})) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        _41 = const false;
        _57 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:122:29: 138:6});
        discriminant((*_57)) = 2;
        resume;
    }

    bb36 (cleanup): {
        drop(_22) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_21) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_18) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_40) -> [0: bb33, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_5) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb41: {
        _43 = move _2;
        goto -> bb4;
    }

    bb42: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb42, unwind continue];
    }

    bb43: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb43, unwind continue];
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::subscribe_transactions(_1: &mut StreamingClient, _2: u64, _3: std::option::Option<bool>) -> {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6} {
    debug self => _1;
    debug starting_version => _2;
    debug include_events => _3;
    let mut _0: {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/streaming_client.rs:144:43: 150:6 (#0)} { self: move _1, starting_version: _2, include_events: _3 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::subscribe_transactions::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<SubscriptionStream, StreamError>> {
    debug _task_context => _16;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6})).0: &mut stream::streaming_client::StreamingClient);
    debug starting_version => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6})).1: u64);
    debug include_events => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6})).2: std::option::Option<bool>);
    let mut _0: std::task::Poll<std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>>;
    let _3: &mut stream::streaming_client::StreamingClient;
    let mut _7: diem_json_rpc_types::stream::request::SubscribeToTransactionsParams;
    let mut _8: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _9: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _10: std::task::Poll<std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>>;
    let mut _11: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6}>;
    let mut _12: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: u32;
    let mut _18: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6};
    let mut _19: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6};
    let mut _20: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6};
    let mut _21: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6};
    let mut _22: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6};
    let mut _23: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6};
    let mut _24: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6};
    let mut _25: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6};
    let mut _26: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6};
    let mut _27: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6};
    let mut _28: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6};
    scope 1 {
        debug self => _3;
        let _4: u64;
        scope 2 {
            debug starting_version => _4;
            let _5: std::option::Option<bool>;
            scope 3 {
                debug include_events => _5;
                let _6: diem_json_rpc_types::stream::request::StreamMethodRequest;
                scope 4 {
                    debug request => _6;
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6})) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
                        let _15: std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>;
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _15;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6});
        _17 = discriminant((*_18));
        switchInt(move _17) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb8];
    }

    bb1: {
        _16 = move _2;
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6});
        _3 = move ((*_19).0: &mut stream::streaming_client::StreamingClient);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6});
        _4 = ((*_20).1: u64);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6});
        _5 = ((*_21).2: std::option::Option<bool>);
        _7 = SubscribeToTransactionsParams { starting_version: _4, include_events: _5 };
        _6 = diem_json_rpc_types::stream::request::StreamMethodRequest::SubscribeToTransactions(move _7);
        _9 = StreamingClient::send_subscription(_3, _6) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _8 = <{async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6} as std::future::IntoFuture>::into_future(move _9) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6});
        (((*_22) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6}) = move _8;
        goto -> bb4;
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6});
        _12 = &mut (((*_23) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _11 = Pin::<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6}>::new_unchecked(_12) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _13 = _16;
        _10 = <{async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6} as futures::Future>::poll(move _11, _13) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Pending;
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6});
        discriminant((*_24)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _15 = move ((_10 as Ready).0: std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6});
        drop((((*_25) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Ready(move _15);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6});
        discriminant((*_26)) = 1;
        return;
    }

    bb11 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6});
        drop((((*_27) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:144:43: 150:6});
        discriminant((*_28)) = 2;
        resume;
    }

    bb13: {
        _16 = move _2;
        goto -> bb4;
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb14, unwind continue];
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb15, unwind continue];
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::subscribe_events(_1: &mut StreamingClient, _2: EventKey, _3: u64) -> {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6} {
    debug self => _1;
    debug event_key => _2;
    debug event_seq_num => _3;
    let mut _0: {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/streaming_client.rs:156:43: 162:6 (#0)} { self: move _1, event_key: _2, event_seq_num: _3 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::subscribe_events::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<SubscriptionStream, StreamError>> {
    debug _task_context => _16;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6})).0: &mut stream::streaming_client::StreamingClient);
    debug event_key => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6})).1: diem_types::event::EventKey);
    debug event_seq_num => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6})).2: u64);
    let mut _0: std::task::Poll<std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>>;
    let _3: &mut stream::streaming_client::StreamingClient;
    let mut _7: diem_json_rpc_types::stream::request::SubscribeToEventsParams;
    let mut _8: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _9: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _10: std::task::Poll<std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>>;
    let mut _11: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6}>;
    let mut _12: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: u32;
    let mut _18: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6};
    let mut _19: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6};
    let mut _20: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6};
    let mut _21: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6};
    let mut _22: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6};
    let mut _23: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6};
    let mut _24: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6};
    let mut _25: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6};
    let mut _26: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6};
    let mut _27: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6};
    let mut _28: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6};
    scope 1 {
        debug self => _3;
        let _4: diem_types::event::EventKey;
        scope 2 {
            debug event_key => _4;
            let _5: u64;
            scope 3 {
                debug event_seq_num => _5;
                let _6: diem_json_rpc_types::stream::request::StreamMethodRequest;
                scope 4 {
                    debug request => _6;
                    scope 5 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6})) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
                        let _15: std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>;
                        scope 6 {
                        }
                        scope 7 {
                            debug result => _15;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _18 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6});
        _17 = discriminant((*_18));
        switchInt(move _17) -> [0: bb1, 1: bb15, 2: bb14, 3: bb13, otherwise: bb8];
    }

    bb1: {
        _16 = move _2;
        _19 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6});
        _3 = move ((*_19).0: &mut stream::streaming_client::StreamingClient);
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6});
        _4 = ((*_20).1: diem_types::event::EventKey);
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6});
        _5 = ((*_21).2: u64);
        _7 = SubscribeToEventsParams { event_key: _4, event_seq_num: _5 };
        _6 = diem_json_rpc_types::stream::request::StreamMethodRequest::SubscribeToEvents(move _7);
        _9 = StreamingClient::send_subscription(_3, _6) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _8 = <{async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6} as std::future::IntoFuture>::into_future(move _9) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6});
        (((*_22) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6}) = move _8;
        goto -> bb4;
    }

    bb4: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6});
        _12 = &mut (((*_23) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _11 = Pin::<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6}>::new_unchecked(_12) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _13 = _16;
        _10 = <{async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6} as futures::Future>::poll(move _11, _13) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Pending;
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6});
        discriminant((*_24)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _15 = move ((_10 as Ready).0: std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6});
        drop((((*_25) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Ready(move _15);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6});
        discriminant((*_26)) = 1;
        return;
    }

    bb11 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6});
        drop((((*_27) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:156:43: 162:6});
        discriminant((*_28)) = 2;
        resume;
    }

    bb13: {
        _16 = move _2;
        goto -> bb4;
    }

    bb14: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb14, unwind continue];
    }

    bb15: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb15, unwind continue];
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_unsubscribe(_1: &mut StreamingClient, _2: &diem_json_rpc_types::Id) -> {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6} {
    debug self => _1;
    debug id => _2;
    let mut _0: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/streaming_client.rs:164:82: 173:6 (#0)} { self: move _1, id: _2 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_unsubscribe::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<(), StreamError>> {
    debug _task_context => _75;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6})).0: &mut stream::streaming_client::StreamingClient);
    debug id => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6})).1: &diem_json_rpc_types::Id);
    let mut _0: std::task::Poll<std::result::Result<(), error::StreamError>>;
    let _3: &mut stream::streaming_client::StreamingClient;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: &tracing::level_filters::LevelFilter;
    let _7: tracing::level_filters::LevelFilter;
    let _9: &tracing::__macro_support::MacroCallsite;
    let mut _10: bool;
    let mut _11: &tracing::subscriber::Interest;
    let mut _12: bool;
    let _13: &tracing::__macro_support::MacroCallsite;
    let mut _14: tracing::subscriber::Interest;
    let _16: &tracing::__macro_support::MacroCallsite;
    let _17: ();
    let _18: &tracing::field::ValueSet<'_>;
    let _19: tracing::field::ValueSet<'_>;
    let _21: &tracing::field::FieldSet;
    let _22: &tracing::field::FieldSet;
    let _23: &[(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let _24: [(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let mut _25: (&tracing::field::Field, std::option::Option<&dyn tracing::Value>);
    let mut _26: &tracing::field::Field;
    let _27: tracing::field::Field;
    let mut _28: std::option::Option<tracing::field::Field>;
    let mut _29: &mut tracing::field::Iter;
    let _30: &str;
    let mut _31: std::option::Option<&dyn tracing::Value>;
    let mut _32: &dyn tracing::Value;
    let _33: &std::fmt::Arguments<'_>;
    let _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &&diem_json_rpc_types::Id;
    let _41: diem_json_rpc_types::Id;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::StreamError>, diem_json_rpc_types::Id>;
    let mut _43: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _44: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _45: &mut stream::websocket_transport::WebsocketTransport;
    let mut _46: &mut tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>;
    let mut _47: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}};
    let mut _48: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}};
    let _49: &tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>;
    let mut _50: &std::sync::Arc<tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>>;
    let mut _51: std::task::Poll<tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>>;
    let mut _52: std::pin::Pin<&mut {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}}>;
    let mut _53: &mut {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}};
    let mut _54: &mut std::task::Context<'_>;
    let mut _55: isize;
    let mut _57: diem_json_rpc_types::stream::request::StreamMethodRequest;
    let mut _58: std::option::Option<diem_json_rpc_types::Id>;
    let mut _59: diem_json_rpc_types::Id;
    let mut _60: std::task::Poll<std::result::Result<diem_json_rpc_types::Id, error::StreamError>>;
    let mut _61: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6}>;
    let mut _62: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _63: &mut std::task::Context<'_>;
    let mut _64: isize;
    let mut _66: isize;
    let mut _69: ();
    let mut _74: std::result::Result<(), error::StreamError>;
    let mut _75: &mut std::task::Context<'_>;
    let mut _76: u32;
    let mut _77: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _78: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _79: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _80: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _81: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _82: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _83: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _84: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _85: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _86: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _87: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _88: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _89: &diem_json_rpc_types::Id;
    let mut _90: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _91: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _92: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _93: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _94: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _95: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _96: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _97: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _98: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _99: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _100: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    scope 1 {
        debug self => _3;
        scope 2 {
            debug id => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6})) as variant#3).0: &diem_json_rpc_types::Id);
            let _8: tracing::subscriber::Interest;
            let _67: std::result::Result<std::convert::Infallible, error::StreamError>;
            let _68: diem_json_rpc_types::Id;
            let mut _71: &tracing::Level;
            let mut _72: &tracing::level_filters::LevelFilter;
            let mut _73: &tracing::Level;
            scope 3 {
                debug interest => _8;
                let _15: &tracing::Metadata<'_>;
                scope 4 {
                    debug meta => _15;
                    let mut _20: tracing::field::Iter;
                    scope 5 {
                        debug iter => _20;
                        let mut _70: &[&str; 1];
                    }
                }
            }
            scope 6 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6})) as variant#3).1: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}});
                let _56: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>;
                scope 7 {
                }
                scope 8 {
                    debug result => _56;
                }
            }
            scope 9 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6})) as variant#4).2: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
                let _65: std::result::Result<diem_json_rpc_types::Id, error::StreamError>;
                scope 10 {
                }
                scope 11 {
                    debug result => _65;
                }
            }
            scope 12 {
                debug residual => _67;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _68;
                scope 15 {
                }
            }
        }
    }

    bb0: {
        _77 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        _76 = discriminant((*_77));
        switchInt(move _76) -> [0: bb1, 1: bb56, 2: bb55, 3: bb53, 4: bb54, otherwise: bb29];
    }

    bb1: {
        _75 = move _2;
        _78 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        _3 = move ((*_78).0: &mut stream::streaming_client::StreamingClient);
        _79 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        _80 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        (((*_79) as variant#3).0: &diem_json_rpc_types::Id) = ((*_80).1: &diem_json_rpc_types::Id);
        _73 = const _;
        _72 = const _;
        _4 = <Level as PartialOrd<LevelFilter>>::le(_73, _72) -> [return: bb2, unwind: bb52];
    }

    bb2: {
        switchInt(move _4) -> [0: bb21, otherwise: bb3];
    }

    bb3: {
        _71 = const _;
        _7 = LevelFilter::current() -> [return: bb4, unwind: bb52];
    }

    bb4: {
        _6 = &_7;
        _5 = <Level as PartialOrd<LevelFilter>>::le(_71, move _6) -> [return: bb5, unwind: bb52];
    }

    bb5: {
        switchInt(move _5) -> [0: bb21, otherwise: bb6];
    }

    bb6: {
        _9 = const {alloc8: &MacroCallsite};
        _8 = MacroCallsite::interest(_9) -> [return: bb7, unwind: bb52];
    }

    bb7: {
        _11 = &_8;
        _10 = tracing::subscriber::Interest::is_never(move _11) -> [return: bb8, unwind: bb52];
    }

    bb8: {
        switchInt(move _10) -> [0: bb9, otherwise: bb21];
    }

    bb9: {
        _13 = const {alloc8: &MacroCallsite};
        _14 = move _8;
        _12 = MacroCallsite::is_enabled(_13, move _14) -> [return: bb10, unwind: bb52];
    }

    bb10: {
        switchInt(move _12) -> [0: bb21, otherwise: bb11];
    }

    bb11: {
        _16 = const {alloc8: &MacroCallsite};
        _15 = <MacroCallsite as tracing::Callsite>::metadata(_16) -> [return: bb12, unwind: bb52];
    }

    bb12: {
        _21 = tracing::Metadata::<'_>::fields(_15) -> [return: bb13, unwind: bb52];
    }

    bb13: {
        _20 = FieldSet::iter(_21) -> [return: bb14, unwind: bb52];
    }

    bb14: {
        _22 = tracing::Metadata::<'_>::fields(_15) -> [return: bb15, unwind: bb52];
    }

    bb15: {
        _29 = &mut _20;
        _28 = <tracing::field::Iter as Iterator>::next(move _29) -> [return: bb16, unwind: bb52];
    }

    bb16: {
        _30 = const "FieldSet corrupted (this is a bug)";
        _27 = std::option::Option::<Field>::expect(move _28, _30) -> [return: bb17, unwind: bb52];
    }

    bb17: {
        _26 = &_27;
        _70 = const _;
        _35 = _70 as &[&str] (PointerCoercion(Unsize));
        _81 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        _40 = &(((*_81) as variant#3).0: &diem_json_rpc_types::Id);
        _39 = core::fmt::rt::Argument::<'_>::new_debug::<&diem_json_rpc_types::Id>(_40) -> [return: bb18, unwind: bb52];
    }

    bb18: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb19, unwind: bb52];
    }

    bb19: {
        _33 = &_34;
        _32 = _33 as &dyn tracing::Value (PointerCoercion(Unsize));
        _31 = std::option::Option::<&dyn tracing::Value>::Some(_32);
        _25 = (move _26, move _31);
        _24 = [move _25];
        _23 = &_24;
        _19 = FieldSet::value_set::<'_, [(&Field, std::option::Option<&dyn tracing::Value>); 1]>(_22, _23) -> [return: bb20, unwind: bb52];
    }

    bb20: {
        _18 = &_19;
        _17 = tracing::Event::<'_>::dispatch(_15, _18) -> [return: bb57, unwind: bb52];
    }

    bb21: {
        _50 = &((*_3).0: std::sync::Arc<tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>>);
        _49 = <Arc<tokio::sync::RwLock<WebsocketTransport>> as Deref>::deref(move _50) -> [return: bb22, unwind: bb52];
    }

    bb22: {
        _48 = tokio::sync::RwLock::<WebsocketTransport>::write(_49) -> [return: bb23, unwind: bb52];
    }

    bb23: {
        _47 = <{async fn body@tokio::sync::RwLock<WebsocketTransport>::write::{closure#0}} as std::future::IntoFuture>::into_future(move _48) -> [return: bb24, unwind: bb52];
    }

    bb24: {
        _82 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        (((*_82) as variant#3).1: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}}) = move _47;
        goto -> bb25;
    }

    bb25: {
        _83 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        _53 = &mut (((*_83) as variant#3).1: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}});
        _52 = Pin::<&mut {async fn body@tokio::sync::RwLock<WebsocketTransport>::write::{closure#0}}>::new_unchecked(_53) -> [return: bb26, unwind: bb51];
    }

    bb26: {
        _54 = _75;
        _51 = <{async fn body@tokio::sync::RwLock<WebsocketTransport>::write::{closure#0}} as futures::Future>::poll(move _52, _54) -> [return: bb27, unwind: bb51];
    }

    bb27: {
        _55 = discriminant(_51);
        switchInt(move _55) -> [0: bb30, 1: bb28, otherwise: bb29];
    }

    bb28: {
        _0 = Poll::<std::result::Result<(), StreamError>>::Pending;
        _85 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        discriminant((*_85)) = 3;
        return;
    }

    bb29: {
        unreachable;
    }

    bb30: {
        _56 = move ((_51 as Ready).0: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>);
        _84 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        (((*_84) as variant#4).1: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>) = move _56;
        _86 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        drop((((*_86) as variant#3).1: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}})) -> [return: bb31, unwind: bb52];
    }

    bb31: {
        _87 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        _46 = &mut (((*_87) as variant#4).1: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>);
        _45 = <tokio::sync::RwLockWriteGuard<'_, WebsocketTransport> as DerefMut>::deref_mut(move _46) -> [return: bb32, unwind: bb50];
    }

    bb32: {
        _57 = diem_json_rpc_types::stream::request::StreamMethodRequest::Unsubscribe;
        _88 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        _89 = deref_copy (((*_88) as variant#3).0: &diem_json_rpc_types::Id);
        _59 = <diem_json_rpc_types::Id as Clone>::clone(_89) -> [return: bb33, unwind: bb50];
    }

    bb33: {
        _58 = std::option::Option::<diem_json_rpc_types::Id>::Some(move _59);
        _44 = WebsocketTransport::send_method_request(_45, move _57, move _58) -> [return: bb34, unwind: bb50];
    }

    bb34: {
        _43 = <{async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6} as std::future::IntoFuture>::into_future(move _44) -> [return: bb35, unwind: bb50];
    }

    bb35: {
        _90 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        (((*_90) as variant#4).2: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6}) = move _43;
        goto -> bb36;
    }

    bb36: {
        _91 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        _62 = &mut (((*_91) as variant#4).2: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        _61 = Pin::<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6}>::new_unchecked(_62) -> [return: bb37, unwind: bb49];
    }

    bb37: {
        _63 = _75;
        _60 = <{async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6} as futures::Future>::poll(move _61, _63) -> [return: bb38, unwind: bb49];
    }

    bb38: {
        _64 = discriminant(_60);
        switchInt(move _64) -> [0: bb40, 1: bb39, otherwise: bb29];
    }

    bb39: {
        _0 = Poll::<std::result::Result<(), StreamError>>::Pending;
        _92 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        discriminant((*_92)) = 4;
        return;
    }

    bb40: {
        _65 = move ((_60 as Ready).0: std::result::Result<diem_json_rpc_types::Id, error::StreamError>);
        _93 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        drop((((*_93) as variant#4).2: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6})) -> [return: bb41, unwind: bb50];
    }

    bb41: {
        _42 = <std::result::Result<diem_json_rpc_types::Id, StreamError> as Try>::branch(move _65) -> [return: bb42, unwind: bb50];
    }

    bb42: {
        _66 = discriminant(_42);
        switchInt(move _66) -> [0: bb43, 1: bb44, otherwise: bb29];
    }

    bb43: {
        _68 = move ((_42 as Continue).0: diem_json_rpc_types::Id);
        _41 = move _68;
        drop(_41) -> [return: bb46, unwind: bb50];
    }

    bb44: {
        _67 = move ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::StreamError>);
        _74 = <std::result::Result<(), StreamError> as FromResidual<std::result::Result<Infallible, StreamError>>>::from_residual(move _67) -> [return: bb45, unwind: bb50];
    }

    bb45: {
        _95 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        drop((((*_95) as variant#4).1: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>)) -> [return: bb48, unwind: bb52];
    }

    bb46: {
        _94 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        drop((((*_94) as variant#4).1: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>)) -> [return: bb47, unwind: bb52];
    }

    bb47: {
        _69 = ();
        _74 = std::result::Result::<(), StreamError>::Ok(move _69);
        goto -> bb48;
    }

    bb48: {
        _0 = Poll::<std::result::Result<(), StreamError>>::Ready(move _74);
        _96 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        discriminant((*_96)) = 1;
        return;
    }

    bb49 (cleanup): {
        _97 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        drop((((*_97) as variant#4).2: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6})) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        _98 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        drop((((*_98) as variant#4).1: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>)) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        _99 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        drop((((*_99) as variant#3).1: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}})) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        _100 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        discriminant((*_100)) = 2;
        resume;
    }

    bb53: {
        _75 = move _2;
        goto -> bb25;
    }

    bb54: {
        _75 = move _2;
        goto -> bb36;
    }

    bb55: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb55, unwind continue];
    }

    bb56: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb56, unwind continue];
    }

    bb57: {
        goto -> bb21;
    }
}

alloc8 (static: StreamingClient::send_unsubscribe::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc27<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc27 (static: StreamingClient::send_unsubscribe::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 a5 00 00 00 │ ................
    0x10 │ ╾───alloc2389<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2376<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2384<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc8────────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2380<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2377<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2389 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 31 36 35                                        │ 165
}

alloc2376 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2384 (size: 16, align: 8) {
    ╾───alloc2383<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2383 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2380 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2377 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_unsubscribe::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "StreamingClient sending unsubscribe for: "];
        _0 = &_1;
        return;
    }
}

promoted[1] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_unsubscribe::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_unsubscribe::{closure#0}: &LevelFilter = {
    let mut _0: &tracing::level_filters::LevelFilter;
    let mut _1: tracing::level_filters::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_unsubscribe::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_unsubscribe::{closure#0}::CALLSITE: MacroCallsite = {
    let mut _0: tracing::__macro_support::MacroCallsite;
    let mut _1: &tracing::Metadata<'_>;
    let _2: &tracing::Metadata<'_>;
    let _3: &tracing::Metadata<'_>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc27: &tracing::Metadata<'_>};
        _2 = &(*_3);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = MacroCallsite::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc27 (static: StreamingClient::send_unsubscribe::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 a5 00 00 00 │ ................
    0x10 │ ╾───alloc2389<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2376<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2384<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc8────────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2380<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2377<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2389 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 31 36 35                                        │ 165
}

alloc2376 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2384 (size: 16, align: 8) {
    ╾───alloc2383<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2383 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc8 (static: StreamingClient::send_unsubscribe::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc27<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2380 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2377 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_unsubscribe::{closure#0}::CALLSITE::META: tracing::Metadata<'_> = {
    let mut _0: tracing::Metadata<'_>;
    let mut _1: &str;
    let _2: &str;
    let mut _3: std::option::Option<&str>;
    let mut _4: &str;
    let _5: &str;
    let mut _6: std::option::Option<u32>;
    let mut _7: std::option::Option<&str>;
    let mut _8: &str;
    let _9: &str;
    let mut _10: tracing::field::FieldSet;
    let mut _11: &[&str];
    let mut _12: &[&str; 1];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: tracing::callsite::Identifier;
    let mut _16: &dyn tracing::Callsite;
    let mut _17: &tracing::__macro_support::MacroCallsite;
    let _18: &tracing::__macro_support::MacroCallsite;
    let _19: &tracing::__macro_support::MacroCallsite;
    let mut _20: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const "diem_client::stream::streaming_client";
        _1 = &(*_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "sdk/client/src/stream/streaming_client.rs";
        _4 = &(*_5);
        _3 = std::option::Option::<&str>::Some(move _4);
        StorageDead(_4);
        StorageLive(_6);
        _6 = std::option::Option::<u32>::Some(const 165_u32);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "diem_client::stream::streaming_client";
        _8 = &(*_9);
        _7 = std::option::Option::<&str>::Some(move _8);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _20 = const _;
        _13 = &(*_20);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const {alloc8: &MacroCallsite};
        _18 = &(*_19);
        _17 = &(*_18);
        _16 = move _17 as &dyn tracing::Callsite (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = tracing::callsite::Identifier(move _16);
        StorageDead(_16);
        ConstEvalCounter;
        _10 = FieldSet::new(move _11, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_11);
        ConstEvalCounter;
        _0 = tracing::Metadata::<'_>::new(const "event sdk/client/src/stream/streaming_client.rs:165", move _1, const _, move _3, move _6, move _7, move _10, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}

alloc8 (static: StreamingClient::send_unsubscribe::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc27<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc27 (static: StreamingClient::send_unsubscribe::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 a5 00 00 00 │ ................
    0x10 │ ╾───alloc2389<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2376<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2384<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc8────────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2380<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2377<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2389 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 31 36 35                                        │ 165
}

alloc2376 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2384 (size: 16, align: 8) {
    ╾───alloc2383<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2383 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2380 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2377 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_unsubscribe::{closure#0}::CALLSITE::META: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "message"];
        _0 = &_1;
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription(_1: &mut StreamingClient, _2: StreamMethodRequest) -> {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6} {
    debug self => _1;
    debug request => _2;
    let mut _0: {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/streaming_client.rs:178:43: 213:6 (#0)} { self: move _1, request: _2 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<SubscriptionStream, StreamError>> {
    debug _task_context => _192;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})).0: &mut stream::streaming_client::StreamingClient);
    debug request => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})).1: diem_json_rpc_types::stream::request::StreamMethodRequest);
    let mut _0: std::task::Poll<std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::StreamError>, stream::streaming_client::SubscriptionStream>;
    let mut _4: {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _5: {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _6: &stream::streaming_client::StreamingClient;
    let mut _7: std::task::Poll<std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>>;
    let mut _8: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6}>;
    let mut _9: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _10: &mut std::task::Context<'_>;
    let mut _11: isize;
    let mut _13: isize;
    let mut _16: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _17: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _18: &mut stream::websocket_transport::WebsocketTransport;
    let mut _19: &mut tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>;
    let mut _20: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}};
    let mut _21: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}};
    let _22: &tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>;
    let mut _23: &std::sync::Arc<tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>>;
    let mut _24: std::task::Poll<tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>>;
    let mut _25: std::pin::Pin<&mut {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}}>;
    let mut _26: &mut {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}};
    let mut _27: &mut std::task::Context<'_>;
    let mut _28: isize;
    let mut _30: diem_json_rpc_types::stream::request::StreamMethodRequest;
    let mut _31: std::option::Option<diem_json_rpc_types::Id>;
    let mut _32: diem_json_rpc_types::Id;
    let _33: &diem_json_rpc_types::Id;
    let mut _34: &stream::streaming_client::SubscriptionStream;
    let mut _35: std::task::Poll<std::result::Result<diem_json_rpc_types::Id, error::StreamError>>;
    let mut _36: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6}>;
    let mut _37: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _38: &mut std::task::Context<'_>;
    let mut _39: isize;
    let mut _41: isize;
    let mut _43: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _44: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _45: &stream::streaming_client::StreamingClient;
    let _46: &&diem_json_rpc_types::Id;
    let mut _47: &stream::streaming_client::SubscriptionStream;
    let mut _48: std::task::Poll<bool>;
    let mut _49: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}>;
    let mut _50: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _51: &mut std::task::Context<'_>;
    let mut _52: isize;
    let mut _54: error::StreamError;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: &tracing::level_filters::LevelFilter;
    let _58: tracing::level_filters::LevelFilter;
    let _60: &tracing::__macro_support::MacroCallsite;
    let mut _61: bool;
    let mut _62: &tracing::subscriber::Interest;
    let mut _63: bool;
    let _64: &tracing::__macro_support::MacroCallsite;
    let mut _65: tracing::subscriber::Interest;
    let _67: &tracing::__macro_support::MacroCallsite;
    let _68: ();
    let _69: &tracing::field::ValueSet<'_>;
    let _70: tracing::field::ValueSet<'_>;
    let _72: &tracing::field::FieldSet;
    let _73: &tracing::field::FieldSet;
    let _74: &[(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let _75: [(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let mut _76: (&tracing::field::Field, std::option::Option<&dyn tracing::Value>);
    let mut _77: &tracing::field::Field;
    let _78: tracing::field::Field;
    let mut _79: std::option::Option<tracing::field::Field>;
    let mut _80: &mut tracing::field::Iter;
    let _81: &str;
    let mut _82: std::option::Option<&dyn tracing::Value>;
    let mut _83: &dyn tracing::Value;
    let _84: &std::fmt::Arguments<'_>;
    let _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let mut _87: &[core::fmt::rt::Argument<'_>];
    let _88: &[core::fmt::rt::Argument<'_>; 1];
    let _89: [core::fmt::rt::Argument<'_>; 1];
    let mut _90: core::fmt::rt::Argument<'_>;
    let _91: &&diem_json_rpc_types::Id;
    let _92: &diem_json_rpc_types::Id;
    let mut _94: u64;
    let mut _95: &stream::streaming_client::StreamingClientConfig;
    let mut _96: &std::sync::Arc<stream::streaming_client::StreamingClientConfig>;
    let mut _97: tokio::time::Timeout<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}>;
    let mut _98: tokio::time::Timeout<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}>;
    let mut _99: {async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6};
    let mut _100: &mut stream::streaming_client::SubscriptionStream;
    let mut _101: std::task::Poll<std::result::Result<std::result::Result<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>, error::StreamError>, tokio::time::error::Elapsed>>;
    let mut _102: std::pin::Pin<&mut tokio::time::Timeout<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}>>;
    let mut _103: &mut tokio::time::Timeout<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}>;
    let mut _104: &mut std::task::Context<'_>;
    let mut _105: isize;
    let mut _107: isize;
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::StreamError>, diem_json_rpc_types::stream::response::StreamJsonRpcResponse>;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::StreamError>, std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _111: isize;
    let mut _114: isize;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: &tracing::level_filters::LevelFilter;
    let _120: tracing::level_filters::LevelFilter;
    let _122: &tracing::__macro_support::MacroCallsite;
    let mut _123: bool;
    let mut _124: &tracing::subscriber::Interest;
    let mut _125: bool;
    let _126: &tracing::__macro_support::MacroCallsite;
    let mut _127: tracing::subscriber::Interest;
    let _129: &tracing::__macro_support::MacroCallsite;
    let _130: ();
    let _131: &tracing::field::ValueSet<'_>;
    let _132: tracing::field::ValueSet<'_>;
    let _134: &tracing::field::FieldSet;
    let _135: &tracing::field::FieldSet;
    let _136: &[(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let _137: [(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let mut _138: (&tracing::field::Field, std::option::Option<&dyn tracing::Value>);
    let mut _139: &tracing::field::Field;
    let _140: tracing::field::Field;
    let mut _141: std::option::Option<tracing::field::Field>;
    let mut _142: &mut tracing::field::Iter;
    let _143: &str;
    let mut _144: std::option::Option<&dyn tracing::Value>;
    let mut _145: &dyn tracing::Value;
    let _146: &std::fmt::Arguments<'_>;
    let _147: std::fmt::Arguments<'_>;
    let mut _148: &[&str];
    let mut _149: &[core::fmt::rt::Argument<'_>];
    let _150: &[core::fmt::rt::Argument<'_>; 1];
    let _151: [core::fmt::rt::Argument<'_>; 1];
    let mut _152: core::fmt::rt::Argument<'_>;
    let _153: &&diem_json_rpc_types::Id;
    let _154: &diem_json_rpc_types::Id;
    let mut _155: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _156: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _157: &stream::streaming_client::StreamingClient;
    let _158: &diem_json_rpc_types::Id;
    let mut _159: std::task::Poll<bool>;
    let mut _160: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}>;
    let mut _161: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _162: &mut std::task::Context<'_>;
    let mut _163: isize;
    let mut _165: error::StreamError;
    let mut _166: isize;
    let mut _167: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _168: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _169: &stream::streaming_client::StreamingClient;
    let _170: &diem_json_rpc_types::Id;
    let mut _171: std::task::Poll<bool>;
    let mut _172: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}>;
    let mut _173: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _174: &mut std::task::Context<'_>;
    let mut _175: isize;
    let mut _177: error::StreamError;
    let mut _178: diem_json_rpc_types::errors::JsonRpcError;
    let mut _179: stream::streaming_client::SubscriptionStream;
    let mut _188: &diem_json_rpc_types::Id;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>;
    let mut _192: &mut std::task::Context<'_>;
    let mut _193: u32;
    let mut _194: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _195: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _196: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _197: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _198: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _199: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _200: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _201: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _202: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _203: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _204: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _205: &mut stream::streaming_client::StreamingClient;
    let mut _206: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _207: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _208: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _209: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _210: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _211: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _212: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _213: &mut stream::streaming_client::StreamingClient;
    let mut _214: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _215: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _216: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _217: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _218: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _219: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _220: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _221: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _222: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _223: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _224: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _225: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _226: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _227: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _228: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _229: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _230: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _231: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _232: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _233: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _234: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _235: &mut stream::streaming_client::StreamingClient;
    let mut _236: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _237: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _238: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _239: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _240: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _241: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _242: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _243: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _244: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _245: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _246: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _247: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _248: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _249: &mut stream::streaming_client::StreamingClient;
    let mut _250: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _251: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _252: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _253: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _254: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _255: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _256: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _257: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _258: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _259: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _260: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _261: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _262: &mut stream::streaming_client::StreamingClient;
    let mut _263: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _264: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _265: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _266: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _267: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _268: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _269: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _270: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _271: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _272: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _273: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _274: &mut stream::streaming_client::StreamingClient;
    let mut _275: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _276: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _277: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _278: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _279: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _280: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _281: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _282: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _283: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _284: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _285: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _286: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _287: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _288: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _289: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _290: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _291: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _292: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _293: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _294: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _295: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _296: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _297: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _298: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _299: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _300: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _301: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _302: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _303: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _304: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _305: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _306: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _307: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _308: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _309: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _310: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _311: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _312: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _313: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _314: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _315: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _316: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _317: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _318: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _319: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _320: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _321: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _322: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _323: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _324: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _325: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _326: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _327: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _328: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _329: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    let mut _330: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#3).0: &mut stream::streaming_client::StreamingClient);
        scope 2 {
            debug request => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#3).1: diem_json_rpc_types::stream::request::StreamMethodRequest);
            let _14: std::result::Result<std::convert::Infallible, error::StreamError>;
            let _15: stream::streaming_client::SubscriptionStream;
            scope 3 {
                debug subscription_stream => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#4).2: stream::streaming_client::SubscriptionStream);
                scope 11 {
                    debug res => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#6).1: std::result::Result<diem_json_rpc_types::Id, error::StreamError>);
                    let _42: diem_json_rpc_types::Id;
                    scope 18 {
                        debug id => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#7).3: diem_json_rpc_types::Id);
                        let _59: tracing::subscriber::Interest;
                        let _93: std::time::Duration;
                        let mut _185: &tracing::Level;
                        let mut _186: &tracing::level_filters::LevelFilter;
                        let mut _187: &tracing::Level;
                        scope 24 {
                            debug interest => _59;
                            let _66: &tracing::Metadata<'_>;
                            scope 25 {
                                debug meta => _66;
                                let mut _71: tracing::field::Iter;
                                scope 26 {
                                    debug iter => _71;
                                    let mut _184: &[&str; 1];
                                }
                            }
                        }
                        scope 27 {
                            debug duration => _93;
                            let _108: std::result::Result<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>, error::StreamError>;
                            let _121: tracing::subscriber::Interest;
                            let mut _181: &tracing::Level;
                            let mut _182: &tracing::level_filters::LevelFilter;
                            let mut _183: &tracing::Level;
                            scope 28 {
                                debug msg => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#9).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse);
                                scope 47 {
                                    debug err => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#9).4: diem_json_rpc_types::errors::JsonRpcError);
                                    scope 48 {
                                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#9).5: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
                                        let _176: bool;
                                        scope 49 {
                                        }
                                        scope 50 {
                                            debug result => _176;
                                        }
                                    }
                                }
                            }
                            scope 29 {
                                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#7).4: tokio::time::Timeout<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}>);
                                let _106: std::result::Result<std::result::Result<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>, error::StreamError>, tokio::time::error::Elapsed>;
                                scope 30 {
                                }
                                scope 31 {
                                    debug result => _106;
                                }
                            }
                            scope 32 {
                                debug res => _108;
                                let _112: std::result::Result<std::convert::Infallible, error::StreamError>;
                                let _113: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>;
                                let _115: std::result::Result<std::convert::Infallible, error::StreamError>;
                                let _116: diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
                                scope 33 {
                                    debug residual => _112;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _113;
                                    scope 36 {
                                    }
                                }
                                scope 37 {
                                    debug residual => _115;
                                    scope 38 {
                                    }
                                }
                                scope 39 {
                                    debug val => _116;
                                    scope 40 {
                                    }
                                }
                            }
                            scope 41 {
                                debug interest => _121;
                                let _128: &tracing::Metadata<'_>;
                                scope 42 {
                                    debug meta => _128;
                                    let mut _133: tracing::field::Iter;
                                    scope 43 {
                                        debug iter => _133;
                                        let mut _180: &[&str; 1];
                                    }
                                }
                            }
                            scope 44 {
                                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#8).4: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
                                let _164: bool;
                                scope 45 {
                                }
                                scope 46 {
                                    debug result => _164;
                                }
                            }
                        }
                    }
                    scope 19 {
                        debug id => _42;
                    }
                    scope 20 {
                        debug e => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#6).2: error::StreamError);
                        scope 21 {
                            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#6).4: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
                            let _53: bool;
                            scope 22 {
                            }
                            scope 23 {
                                debug result => _53;
                            }
                        }
                    }
                }
                scope 12 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#4).3: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}});
                    let _29: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>;
                    scope 13 {
                    }
                    scope 14 {
                        debug result => _29;
                    }
                }
                scope 15 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#5).3: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
                    let _40: std::result::Result<diem_json_rpc_types::Id, error::StreamError>;
                    scope 16 {
                    }
                    scope 17 {
                        debug result => _40;
                    }
                }
            }
            scope 4 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6})) as variant#3).2: {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
                let _12: std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>;
                scope 5 {
                }
                scope 6 {
                    debug result => _12;
                }
            }
            scope 7 {
                debug residual => _14;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _15;
                scope 10 {
                }
            }
        }
    }

    bb0: {
        _194 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _193 = discriminant((*_194));
        switchInt(move _193) -> [0: bb1, 1: bb167, 2: bb166, 3: bb159, 4: bb160, 5: bb161, 6: bb162, 7: bb163, 8: bb164, 9: bb165, otherwise: bb8];
    }

    bb1: {
        _192 = move _2;
        _195 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_195) as variant#4).4: bool) = const false;
        _196 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_196) as variant#9).6: bool) = const false;
        _197 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_197) as variant#6).6: bool) = const false;
        _198 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_198) as variant#6).5: bool) = const false;
        _199 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_199) as variant#9).7: bool) = const false;
        _200 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _201 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_200) as variant#3).0: &mut stream::streaming_client::StreamingClient) = move ((*_201).0: &mut stream::streaming_client::StreamingClient);
        _202 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _203 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_202) as variant#3).1: diem_json_rpc_types::stream::request::StreamMethodRequest) = ((*_203).1: diem_json_rpc_types::stream::request::StreamMethodRequest);
        _204 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _205 = deref_copy (((*_204) as variant#3).0: &mut stream::streaming_client::StreamingClient);
        _6 = &(*_205);
        _5 = StreamingClient::get_and_register_id(move _6) -> [return: bb2, unwind: bb142];
    }

    bb2: {
        _4 = <{async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6} as std::future::IntoFuture>::into_future(move _5) -> [return: bb3, unwind: bb142];
    }

    bb3: {
        _206 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_206) as variant#3).2: {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6}) = move _4;
        goto -> bb4;
    }

    bb4: {
        _207 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _9 = &mut (((*_207) as variant#3).2: {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        _8 = Pin::<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6}>::new_unchecked(_9) -> [return: bb5, unwind: bb141];
    }

    bb5: {
        _10 = _192;
        _7 = <{async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6} as futures::Future>::poll(move _8, _10) -> [return: bb6, unwind: bb141];
    }

    bb6: {
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Pending;
        _208 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        discriminant((*_208)) = 3;
        return;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _12 = move ((_7 as Ready).0: std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>);
        _209 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_209) as variant#3).2: {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6})) -> [return: bb10, unwind: bb142];
    }

    bb10: {
        _3 = <std::result::Result<SubscriptionStream, StreamError> as Try>::branch(move _12) -> [return: bb11, unwind: bb142];
    }

    bb11: {
        _13 = discriminant(_3);
        switchInt(move _13) -> [0: bb12, 1: bb13, otherwise: bb8];
    }

    bb12: {
        _15 = move ((_3 as Continue).0: stream::streaming_client::SubscriptionStream);
        _210 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_210) as variant#4).4: bool) = const true;
        _211 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_211) as variant#4).2: stream::streaming_client::SubscriptionStream) = move _15;
        _212 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _213 = deref_copy (((*_212) as variant#3).0: &mut stream::streaming_client::StreamingClient);
        _23 = &((*_213).0: std::sync::Arc<tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>>);
        _22 = <Arc<tokio::sync::RwLock<WebsocketTransport>> as Deref>::deref(move _23) -> [return: bb14, unwind: bb140];
    }

    bb13: {
        _14 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::StreamError>);
        _191 = <std::result::Result<SubscriptionStream, StreamError> as FromResidual<std::result::Result<Infallible, StreamError>>>::from_residual(move _14) -> [return: bb168, unwind: bb142];
    }

    bb14: {
        _21 = tokio::sync::RwLock::<WebsocketTransport>::write(_22) -> [return: bb15, unwind: bb140];
    }

    bb15: {
        _20 = <{async fn body@tokio::sync::RwLock<WebsocketTransport>::write::{closure#0}} as std::future::IntoFuture>::into_future(move _21) -> [return: bb16, unwind: bb140];
    }

    bb16: {
        _214 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_214) as variant#4).3: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}}) = move _20;
        goto -> bb17;
    }

    bb17: {
        _215 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _26 = &mut (((*_215) as variant#4).3: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}});
        _25 = Pin::<&mut {async fn body@tokio::sync::RwLock<WebsocketTransport>::write::{closure#0}}>::new_unchecked(_26) -> [return: bb18, unwind: bb139];
    }

    bb18: {
        _27 = _192;
        _24 = <{async fn body@tokio::sync::RwLock<WebsocketTransport>::write::{closure#0}} as futures::Future>::poll(move _25, _27) -> [return: bb19, unwind: bb139];
    }

    bb19: {
        _28 = discriminant(_24);
        switchInt(move _28) -> [0: bb21, 1: bb20, otherwise: bb8];
    }

    bb20: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Pending;
        _217 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        discriminant((*_217)) = 4;
        return;
    }

    bb21: {
        _29 = move ((_24 as Ready).0: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>);
        _216 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_216) as variant#5).2: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>) = move _29;
        _218 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_218) as variant#4).3: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}})) -> [return: bb22, unwind: bb140];
    }

    bb22: {
        _219 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _19 = &mut (((*_219) as variant#5).2: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>);
        _18 = <tokio::sync::RwLockWriteGuard<'_, WebsocketTransport> as DerefMut>::deref_mut(move _19) -> [return: bb23, unwind: bb138];
    }

    bb23: {
        _220 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _30 = (((*_220) as variant#3).1: diem_json_rpc_types::stream::request::StreamMethodRequest);
        _221 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _34 = &(((*_221) as variant#4).2: stream::streaming_client::SubscriptionStream);
        _33 = SubscriptionStream::id(move _34) -> [return: bb24, unwind: bb138];
    }

    bb24: {
        _32 = <diem_json_rpc_types::Id as Clone>::clone(_33) -> [return: bb25, unwind: bb138];
    }

    bb25: {
        _31 = std::option::Option::<diem_json_rpc_types::Id>::Some(move _32);
        _17 = WebsocketTransport::send_method_request(_18, move _30, move _31) -> [return: bb26, unwind: bb138];
    }

    bb26: {
        _16 = <{async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6} as std::future::IntoFuture>::into_future(move _17) -> [return: bb27, unwind: bb138];
    }

    bb27: {
        _222 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_222) as variant#5).3: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6}) = move _16;
        goto -> bb28;
    }

    bb28: {
        _223 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _37 = &mut (((*_223) as variant#5).3: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        _36 = Pin::<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6}>::new_unchecked(_37) -> [return: bb29, unwind: bb137];
    }

    bb29: {
        _38 = _192;
        _35 = <{async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6} as futures::Future>::poll(move _36, _38) -> [return: bb30, unwind: bb137];
    }

    bb30: {
        _39 = discriminant(_35);
        switchInt(move _39) -> [0: bb32, 1: bb31, otherwise: bb8];
    }

    bb31: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Pending;
        _227 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        discriminant((*_227)) = 5;
        return;
    }

    bb32: {
        _40 = move ((_35 as Ready).0: std::result::Result<diem_json_rpc_types::Id, error::StreamError>);
        _224 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_224) as variant#6).5: bool) = const true;
        _225 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_225) as variant#6).6: bool) = const true;
        _226 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_226) as variant#6).1: std::result::Result<diem_json_rpc_types::Id, error::StreamError>) = move _40;
        _228 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_228) as variant#5).3: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6})) -> [return: bb33, unwind: bb138];
    }

    bb33: {
        _229 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_229) as variant#5).2: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>)) -> [return: bb34, unwind: bb157];
    }

    bb34: {
        _230 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _41 = discriminant((((*_230) as variant#6).1: std::result::Result<diem_json_rpc_types::Id, error::StreamError>));
        switchInt(move _41) -> [0: bb36, 1: bb35, otherwise: bb8];
    }

    bb35: {
        _231 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_231) as variant#6).6: bool) = const false;
        _232 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _233 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_232) as variant#6).2: error::StreamError) = move (((((*_233) as variant#6).1: std::result::Result<diem_json_rpc_types::Id, error::StreamError>) as Err).0: error::StreamError);
        _234 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _235 = deref_copy (((*_234) as variant#3).0: &mut stream::streaming_client::StreamingClient);
        _45 = &(*_235);
        _236 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _47 = &(((*_236) as variant#4).2: stream::streaming_client::SubscriptionStream);
        _237 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_237) as variant#6).3: &diem_json_rpc_types::Id) = SubscriptionStream::id(move _47) -> [return: bb37, unwind: bb136];
    }

    bb36: {
        _238 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_238) as variant#6).5: bool) = const false;
        _239 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _42 = move (((((*_239) as variant#6).1: std::result::Result<diem_json_rpc_types::Id, error::StreamError>) as Ok).0: diem_json_rpc_types::Id);
        _240 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_240) as variant#7).3: diem_json_rpc_types::Id) = move _42;
        _187 = const _;
        _186 = const _;
        _55 = <Level as PartialOrd<LevelFilter>>::le(_187, _186) -> [return: bb46, unwind: bb134];
    }

    bb37: {
        _241 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _46 = &(((*_241) as variant#6).3: &diem_json_rpc_types::Id);
        _188 = deref_copy (*_46);
        _44 = StreamingClient::clear_subscription(move _45, _188) -> [return: bb38, unwind: bb136];
    }

    bb38: {
        _43 = <{async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6} as std::future::IntoFuture>::into_future(move _44) -> [return: bb39, unwind: bb136];
    }

    bb39: {
        _242 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_242) as variant#6).4: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}) = move _43;
        goto -> bb40;
    }

    bb40: {
        _243 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _50 = &mut (((*_243) as variant#6).4: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        _49 = Pin::<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}>::new_unchecked(_50) -> [return: bb41, unwind: bb135];
    }

    bb41: {
        _51 = _192;
        _48 = <{async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6} as futures::Future>::poll(move _49, _51) -> [return: bb42, unwind: bb135];
    }

    bb42: {
        _52 = discriminant(_48);
        switchInt(move _52) -> [0: bb44, 1: bb43, otherwise: bb8];
    }

    bb43: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Pending;
        _244 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        discriminant((*_244)) = 6;
        return;
    }

    bb44: {
        _53 = ((_48 as Ready).0: bool);
        _245 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_245) as variant#6).4: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6})) -> [return: bb45, unwind: bb136];
    }

    bb45: {
        _246 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _54 = move (((*_246) as variant#6).2: error::StreamError);
        _191 = std::result::Result::<SubscriptionStream, StreamError>::Err(move _54);
        goto -> bb146;
    }

    bb46: {
        switchInt(move _55) -> [0: bb65, otherwise: bb47];
    }

    bb47: {
        _185 = const _;
        _58 = LevelFilter::current() -> [return: bb48, unwind: bb134];
    }

    bb48: {
        _57 = &_58;
        _56 = <Level as PartialOrd<LevelFilter>>::le(_185, move _57) -> [return: bb49, unwind: bb134];
    }

    bb49: {
        switchInt(move _56) -> [0: bb65, otherwise: bb50];
    }

    bb50: {
        _60 = const {alloc5: &MacroCallsite};
        _59 = MacroCallsite::interest(_60) -> [return: bb51, unwind: bb134];
    }

    bb51: {
        _62 = &_59;
        _61 = tracing::subscriber::Interest::is_never(move _62) -> [return: bb52, unwind: bb134];
    }

    bb52: {
        switchInt(move _61) -> [0: bb53, otherwise: bb65];
    }

    bb53: {
        _64 = const {alloc5: &MacroCallsite};
        _65 = move _59;
        _63 = MacroCallsite::is_enabled(_64, move _65) -> [return: bb54, unwind: bb134];
    }

    bb54: {
        switchInt(move _63) -> [0: bb65, otherwise: bb55];
    }

    bb55: {
        _67 = const {alloc5: &MacroCallsite};
        _66 = <MacroCallsite as tracing::Callsite>::metadata(_67) -> [return: bb56, unwind: bb134];
    }

    bb56: {
        _72 = tracing::Metadata::<'_>::fields(_66) -> [return: bb57, unwind: bb134];
    }

    bb57: {
        _71 = FieldSet::iter(_72) -> [return: bb58, unwind: bb134];
    }

    bb58: {
        _73 = tracing::Metadata::<'_>::fields(_66) -> [return: bb59, unwind: bb134];
    }

    bb59: {
        _80 = &mut _71;
        _79 = <tracing::field::Iter as Iterator>::next(move _80) -> [return: bb60, unwind: bb134];
    }

    bb60: {
        _81 = const "FieldSet corrupted (this is a bug)";
        _78 = std::option::Option::<Field>::expect(move _79, _81) -> [return: bb61, unwind: bb134];
    }

    bb61: {
        _77 = &_78;
        _184 = const _;
        _86 = _184 as &[&str] (PointerCoercion(Unsize));
        _247 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _92 = &(((*_247) as variant#7).3: diem_json_rpc_types::Id);
        _91 = &_92;
        _90 = core::fmt::rt::Argument::<'_>::new_debug::<&diem_json_rpc_types::Id>(_91) -> [return: bb62, unwind: bb134];
    }

    bb62: {
        _89 = [move _90];
        _88 = &_89;
        _87 = _88 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _85 = Arguments::<'_>::new_v1(move _86, move _87) -> [return: bb63, unwind: bb134];
    }

    bb63: {
        _84 = &_85;
        _83 = _84 as &dyn tracing::Value (PointerCoercion(Unsize));
        _82 = std::option::Option::<&dyn tracing::Value>::Some(_83);
        _76 = (move _77, move _82);
        _75 = [move _76];
        _74 = &_75;
        _70 = FieldSet::value_set::<'_, [(&Field, std::option::Option<&dyn tracing::Value>); 1]>(_73, _74) -> [return: bb64, unwind: bb134];
    }

    bb64: {
        _69 = &_70;
        _68 = tracing::Event::<'_>::dispatch(_66, _69) -> [return: bb169, unwind: bb134];
    }

    bb65: {
        _248 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _249 = deref_copy (((*_248) as variant#3).0: &mut stream::streaming_client::StreamingClient);
        _96 = &((*_249).3: std::sync::Arc<stream::streaming_client::StreamingClientConfig>);
        _95 = <Arc<StreamingClientConfig> as Deref>::deref(move _96) -> [return: bb66, unwind: bb134];
    }

    bb66: {
        _94 = ((*_95).1: u64);
        _93 = Duration::from_millis(move _94) -> [return: bb67, unwind: bb134];
    }

    bb67: {
        _250 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _100 = &mut (((*_250) as variant#4).2: stream::streaming_client::SubscriptionStream);
        _99 = SubscriptionStream::wait_for_msg(move _100) -> [return: bb68, unwind: bb133];
    }

    bb68: {
        _98 = timeout::<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}>(_93, move _99) -> [return: bb69, unwind: bb133];
    }

    bb69: {
        _97 = <tokio::time::Timeout<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}> as std::future::IntoFuture>::into_future(move _98) -> [return: bb70, unwind: bb133];
    }

    bb70: {
        _251 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_251) as variant#7).4: tokio::time::Timeout<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}>) = move _97;
        goto -> bb71;
    }

    bb71: {
        _252 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _103 = &mut (((*_252) as variant#7).4: tokio::time::Timeout<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}>);
        _102 = Pin::<&mut tokio::time::Timeout<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}>>::new_unchecked(_103) -> [return: bb72, unwind: bb132];
    }

    bb72: {
        _104 = _192;
        _101 = <tokio::time::Timeout<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}> as futures::Future>::poll(move _102, _104) -> [return: bb73, unwind: bb132];
    }

    bb73: {
        _105 = discriminant(_101);
        switchInt(move _105) -> [0: bb75, 1: bb74, otherwise: bb8];
    }

    bb74: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Pending;
        _254 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        discriminant((*_254)) = 7;
        return;
    }

    bb75: {
        _106 = move ((_101 as Ready).0: std::result::Result<std::result::Result<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>, error::StreamError>, tokio::time::error::Elapsed>);
        _253 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_253) as variant#8).3: std::result::Result<std::result::Result<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>, error::StreamError>, tokio::time::error::Elapsed>) = move _106;
        _255 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_255) as variant#7).4: tokio::time::Timeout<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}>)) -> [return: bb76, unwind: bb133];
    }

    bb76: {
        _256 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _107 = discriminant((((*_256) as variant#8).3: std::result::Result<std::result::Result<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>, error::StreamError>, tokio::time::error::Elapsed>));
        switchInt(move _107) -> [0: bb78, 1: bb77, otherwise: bb8];
    }

    bb77: {
        _183 = const _;
        _182 = const _;
        _117 = <Level as PartialOrd<LevelFilter>>::le(_183, _182) -> [return: bb85, unwind: bb133];
    }

    bb78: {
        _257 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _108 = move (((((*_257) as variant#8).3: std::result::Result<std::result::Result<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>, error::StreamError>, tokio::time::error::Elapsed>) as Ok).0: std::result::Result<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>, error::StreamError>);
        _110 = <std::result::Result<std::result::Result<StreamJsonRpcResponse, StreamError>, StreamError> as Try>::branch(move _108) -> [return: bb79, unwind: bb133];
    }

    bb79: {
        _111 = discriminant(_110);
        switchInt(move _111) -> [0: bb80, 1: bb81, otherwise: bb8];
    }

    bb80: {
        _113 = move ((_110 as Continue).0: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>);
        _109 = <std::result::Result<StreamJsonRpcResponse, StreamError> as Try>::branch(move _113) -> [return: bb82, unwind: bb133];
    }

    bb81: {
        _112 = move ((_110 as Break).0: std::result::Result<std::convert::Infallible, error::StreamError>);
        _191 = <std::result::Result<SubscriptionStream, StreamError> as FromResidual<std::result::Result<Infallible, StreamError>>>::from_residual(move _112) -> [return: bb170, unwind: bb133];
    }

    bb82: {
        _114 = discriminant(_109);
        switchInt(move _114) -> [0: bb83, 1: bb84, otherwise: bb8];
    }

    bb83: {
        _116 = move ((_109 as Continue).0: diem_json_rpc_types::stream::response::StreamJsonRpcResponse);
        _258 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_258) as variant#9).7: bool) = const true;
        _259 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_259) as variant#9).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse) = move _116;
        _268 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _166 = discriminant(((((*_268) as variant#9).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse).3: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>));
        switchInt(move _166) -> [1: bb114, otherwise: bb124];
    }

    bb84: {
        _115 = move ((_109 as Break).0: std::result::Result<std::convert::Infallible, error::StreamError>);
        _191 = <std::result::Result<SubscriptionStream, StreamError> as FromResidual<std::result::Result<Infallible, StreamError>>>::from_residual(move _115) -> [return: bb171, unwind: bb133];
    }

    bb85: {
        switchInt(move _117) -> [0: bb104, otherwise: bb86];
    }

    bb86: {
        _181 = const _;
        _120 = LevelFilter::current() -> [return: bb87, unwind: bb133];
    }

    bb87: {
        _119 = &_120;
        _118 = <Level as PartialOrd<LevelFilter>>::le(_181, move _119) -> [return: bb88, unwind: bb133];
    }

    bb88: {
        switchInt(move _118) -> [0: bb104, otherwise: bb89];
    }

    bb89: {
        _122 = const {alloc6: &MacroCallsite};
        _121 = MacroCallsite::interest(_122) -> [return: bb90, unwind: bb133];
    }

    bb90: {
        _124 = &_121;
        _123 = tracing::subscriber::Interest::is_never(move _124) -> [return: bb91, unwind: bb133];
    }

    bb91: {
        switchInt(move _123) -> [0: bb92, otherwise: bb104];
    }

    bb92: {
        _126 = const {alloc6: &MacroCallsite};
        _127 = move _121;
        _125 = MacroCallsite::is_enabled(_126, move _127) -> [return: bb93, unwind: bb133];
    }

    bb93: {
        switchInt(move _125) -> [0: bb104, otherwise: bb94];
    }

    bb94: {
        _129 = const {alloc6: &MacroCallsite};
        _128 = <MacroCallsite as tracing::Callsite>::metadata(_129) -> [return: bb95, unwind: bb133];
    }

    bb95: {
        _134 = tracing::Metadata::<'_>::fields(_128) -> [return: bb96, unwind: bb133];
    }

    bb96: {
        _133 = FieldSet::iter(_134) -> [return: bb97, unwind: bb133];
    }

    bb97: {
        _135 = tracing::Metadata::<'_>::fields(_128) -> [return: bb98, unwind: bb133];
    }

    bb98: {
        _142 = &mut _133;
        _141 = <tracing::field::Iter as Iterator>::next(move _142) -> [return: bb99, unwind: bb133];
    }

    bb99: {
        _143 = const "FieldSet corrupted (this is a bug)";
        _140 = std::option::Option::<Field>::expect(move _141, _143) -> [return: bb100, unwind: bb133];
    }

    bb100: {
        _139 = &_140;
        _180 = const _;
        _148 = _180 as &[&str] (PointerCoercion(Unsize));
        _260 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _154 = &(((*_260) as variant#7).3: diem_json_rpc_types::Id);
        _153 = &_154;
        _152 = core::fmt::rt::Argument::<'_>::new_debug::<&diem_json_rpc_types::Id>(_153) -> [return: bb101, unwind: bb133];
    }

    bb101: {
        _151 = [move _152];
        _150 = &_151;
        _149 = _150 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _147 = Arguments::<'_>::new_v1(move _148, move _149) -> [return: bb102, unwind: bb133];
    }

    bb102: {
        _146 = &_147;
        _145 = _146 as &dyn tracing::Value (PointerCoercion(Unsize));
        _144 = std::option::Option::<&dyn tracing::Value>::Some(_145);
        _138 = (move _139, move _144);
        _137 = [move _138];
        _136 = &_137;
        _132 = FieldSet::value_set::<'_, [(&Field, std::option::Option<&dyn tracing::Value>); 1]>(_135, _136) -> [return: bb103, unwind: bb133];
    }

    bb103: {
        _131 = &_132;
        _130 = tracing::Event::<'_>::dispatch(_128, _131) -> [return: bb172, unwind: bb133];
    }

    bb104: {
        _261 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _262 = deref_copy (((*_261) as variant#3).0: &mut stream::streaming_client::StreamingClient);
        _157 = &(*_262);
        _263 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _158 = &(((*_263) as variant#7).3: diem_json_rpc_types::Id);
        _156 = StreamingClient::clear_subscription(move _157, _158) -> [return: bb105, unwind: bb133];
    }

    bb105: {
        _155 = <{async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6} as std::future::IntoFuture>::into_future(move _156) -> [return: bb106, unwind: bb133];
    }

    bb106: {
        _264 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_264) as variant#8).4: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}) = move _155;
        goto -> bb107;
    }

    bb107: {
        _265 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _161 = &mut (((*_265) as variant#8).4: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        _160 = Pin::<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}>::new_unchecked(_161) -> [return: bb108, unwind: bb131];
    }

    bb108: {
        _162 = _192;
        _159 = <{async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6} as futures::Future>::poll(move _160, _162) -> [return: bb109, unwind: bb131];
    }

    bb109: {
        _163 = discriminant(_159);
        switchInt(move _163) -> [0: bb111, 1: bb110, otherwise: bb8];
    }

    bb110: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Pending;
        _266 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        discriminant((*_266)) = 8;
        return;
    }

    bb111: {
        _164 = ((_159 as Ready).0: bool);
        _267 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_267) as variant#8).4: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6})) -> [return: bb112, unwind: bb133];
    }

    bb112: {
        _165 = StreamError::subscription_ok_timeout() -> [return: bb113, unwind: bb133];
    }

    bb113: {
        _191 = std::result::Result::<SubscriptionStream, StreamError>::Err(move _165);
        goto -> bb126;
    }

    bb114: {
        _269 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_269) as variant#9).7: bool) = const false;
        _270 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_270) as variant#9).6: bool) = const true;
        _271 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _272 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_271) as variant#9).4: diem_json_rpc_types::errors::JsonRpcError) = move ((((((*_272) as variant#9).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse).3: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>) as Some).0: diem_json_rpc_types::errors::JsonRpcError);
        _273 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _274 = deref_copy (((*_273) as variant#3).0: &mut stream::streaming_client::StreamingClient);
        _169 = &(*_274);
        _275 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _170 = &(((*_275) as variant#7).3: diem_json_rpc_types::Id);
        _168 = StreamingClient::clear_subscription(move _169, _170) -> [return: bb115, unwind: bb148];
    }

    bb115: {
        _167 = <{async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6} as std::future::IntoFuture>::into_future(move _168) -> [return: bb116, unwind: bb148];
    }

    bb116: {
        _276 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_276) as variant#9).5: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}) = move _167;
        goto -> bb117;
    }

    bb117: {
        _277 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _173 = &mut (((*_277) as variant#9).5: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        _172 = Pin::<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}>::new_unchecked(_173) -> [return: bb118, unwind: bb129];
    }

    bb118: {
        _174 = _192;
        _171 = <{async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6} as futures::Future>::poll(move _172, _174) -> [return: bb119, unwind: bb129];
    }

    bb119: {
        _175 = discriminant(_171);
        switchInt(move _175) -> [0: bb121, 1: bb120, otherwise: bb8];
    }

    bb120: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Pending;
        _278 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        discriminant((*_278)) = 9;
        return;
    }

    bb121: {
        _176 = ((_171 as Ready).0: bool);
        _279 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_279) as variant#9).5: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6})) -> [return: bb122, unwind: bb148];
    }

    bb122: {
        _280 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_280) as variant#9).6: bool) = const false;
        _281 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _178 = move (((*_281) as variant#9).4: diem_json_rpc_types::errors::JsonRpcError);
        _177 = StreamError::subscription_json_rpc_error(move _178) -> [return: bb123, unwind: bb148];
    }

    bb123: {
        _191 = std::result::Result::<SubscriptionStream, StreamError>::Err(move _177);
        _290 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_290) as variant#9).6: bool) = const false;
        _315 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop(((((*_315) as variant#9).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse).1: std::option::Option<diem_json_rpc_types::Id>)) -> [return: bb145, unwind: bb144];
    }

    bb124: {
        _282 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_282) as variant#4).4: bool) = const false;
        _283 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _179 = move (((*_283) as variant#4).2: stream::streaming_client::SubscriptionStream);
        _191 = std::result::Result::<SubscriptionStream, StreamError>::Ok(move _179);
        _284 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_284) as variant#9).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse)) -> [return: bb125, unwind: bb133];
    }

    bb125: {
        _285 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_285) as variant#9).7: bool) = const false;
        _286 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_286) as variant#7).3: diem_json_rpc_types::Id)) -> [return: bb143, unwind: bb157];
    }

    bb126: {
        _291 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_291) as variant#9).7: bool) = const false;
        _292 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_292) as variant#7).3: diem_json_rpc_types::Id)) -> [return: bb146, unwind: bb157];
    }

    bb127: {
        _296 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_296) as variant#4).4: bool) = const false;
        goto -> bb128;
    }

    bb128: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Ready(move _191);
        _297 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        discriminant((*_297)) = 1;
        return;
    }

    bb129 (cleanup): {
        _298 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_298) as variant#9).5: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6})) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        _299 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_299) as variant#9).6: bool) = const false;
        _322 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop(((((*_322) as variant#9).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse).1: std::option::Option<diem_json_rpc_types::Id>)) -> [return: bb152, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        _300 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_300) as variant#8).4: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6})) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        _301 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_301) as variant#7).4: tokio::time::Timeout<{async fn body@sdk/client/src/stream/streaming_client.rs:61:95: 66:6}>)) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        _302 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_302) as variant#9).7: bool) = const false;
        goto -> bb134;
    }

    bb134 (cleanup): {
        _303 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_303) as variant#7).3: diem_json_rpc_types::Id)) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        _304 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_304) as variant#6).4: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6})) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        _305 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_305) as variant#6).2: error::StreamError)) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        _306 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_306) as variant#5).3: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6})) -> [return: bb138, unwind terminate(cleanup)];
    }

    bb138 (cleanup): {
        _307 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_307) as variant#5).2: tokio::sync::RwLockWriteGuard<'_, stream::websocket_transport::WebsocketTransport>)) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb139 (cleanup): {
        _308 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_308) as variant#4).3: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::write::{closure#0}})) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        _309 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_309) as variant#6).5: bool) = const false;
        _310 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_310) as variant#6).6: bool) = const false;
        _329 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        switchInt((((*_329) as variant#4).4: bool)) -> [0: bb142, otherwise: bb158];
    }

    bb141 (cleanup): {
        _311 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_311) as variant#3).2: {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6})) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        _312 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_312) as variant#4).4: bool) = const false;
        _330 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        discriminant((*_330)) = 2;
        resume;
    }

    bb143: {
        _287 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_287) as variant#6).5: bool) = const false;
        _288 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_288) as variant#6).6: bool) = const false;
        _289 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_289) as variant#4).4: bool) = const false;
        goto -> bb128;
    }

    bb144 (cleanup): {
        _313 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop(((((*_313) as variant#9).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse).2: std::option::Option<serde_json::Value>)) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb145: {
        _314 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop(((((*_314) as variant#9).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse).2: std::option::Option<serde_json::Value>)) -> [return: bb126, unwind: bb133];
    }

    bb146: {
        _293 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_293) as variant#6).5: bool) = const false;
        _294 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        (((*_294) as variant#6).6: bool) = const false;
        _295 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_295) as variant#4).2: stream::streaming_client::SubscriptionStream)) -> [return: bb127, unwind: bb142];
    }

    bb147 (cleanup): {
        _316 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_316) as variant#9).4: diem_json_rpc_types::errors::JsonRpcError)) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        _317 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        switchInt((((*_317) as variant#9).6: bool)) -> [0: bb130, otherwise: bb147];
    }

    bb149 (cleanup): {
        _320 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _189 = discriminant(((((*_320) as variant#9).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse).3: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>));
        switchInt(move _189) -> [1: bb150, otherwise: bb133];
    }

    bb150 (cleanup): {
        _319 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        switchInt((((*_319) as variant#9).7: bool)) -> [0: bb133, otherwise: bb151];
    }

    bb151 (cleanup): {
        _318 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop(((((((*_318) as variant#9).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse).3: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>) as Some).0: diem_json_rpc_types::errors::JsonRpcError)) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb152 (cleanup): {
        _321 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop(((((*_321) as variant#9).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse).2: std::option::Option<serde_json::Value>)) -> [return: bb149, unwind terminate(cleanup)];
    }

    bb153 (cleanup): {
        _324 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        switchInt((((*_324) as variant#6).5: bool)) -> [0: bb140, otherwise: bb154];
    }

    bb154 (cleanup): {
        _323 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((((*_323) as variant#6).1: std::result::Result<diem_json_rpc_types::Id, error::StreamError>) as Ok).0: diem_json_rpc_types::Id)) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        _326 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        switchInt((((*_326) as variant#6).6: bool)) -> [0: bb140, otherwise: bb156];
    }

    bb156 (cleanup): {
        _325 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((((*_325) as variant#6).1: std::result::Result<diem_json_rpc_types::Id, error::StreamError>) as Err).0: error::StreamError)) -> [return: bb140, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        _327 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        _190 = discriminant((((*_327) as variant#6).1: std::result::Result<diem_json_rpc_types::Id, error::StreamError>));
        switchInt(move _190) -> [0: bb153, otherwise: bb155];
    }

    bb158 (cleanup): {
        _328 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:178:43: 213:6});
        drop((((*_328) as variant#4).2: stream::streaming_client::SubscriptionStream)) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb159: {
        _192 = move _2;
        goto -> bb4;
    }

    bb160: {
        _192 = move _2;
        goto -> bb17;
    }

    bb161: {
        _192 = move _2;
        goto -> bb28;
    }

    bb162: {
        _192 = move _2;
        goto -> bb40;
    }

    bb163: {
        _192 = move _2;
        goto -> bb71;
    }

    bb164: {
        _192 = move _2;
        goto -> bb107;
    }

    bb165: {
        _192 = move _2;
        goto -> bb117;
    }

    bb166: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb166, unwind continue];
    }

    bb167: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb167, unwind continue];
    }

    bb168: {
        goto -> bb127;
    }

    bb169: {
        goto -> bb65;
    }

    bb170: {
        goto -> bb126;
    }

    bb171: {
        goto -> bb126;
    }

    bb172: {
        goto -> bb104;
    }
}

alloc6 (static: StreamingClient::send_subscription::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc29<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc29 (static: StreamingClient::send_subscription::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 c9 00 00 00 │ ................
    0x10 │ ╾───alloc2463<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2451<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2459<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc6────────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2455<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2452<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2463 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 30 31                                        │ 201
}

alloc2451 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2459 (size: 16, align: 8) {
    ╾───alloc2458<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2458 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2455 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2452 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

alloc5 (static: StreamingClient::send_subscription::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc28<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc28 (static: StreamingClient::send_subscription::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 c3 00 00 00 │ ................
    0x10 │ ╾───alloc2426<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2414<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2422<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc5────────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2418<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2415<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2426 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 31 39 35                                        │ 195
}

alloc2414 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2422 (size: 16, align: 8) {
    ╾───alloc2421<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2421 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2418 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2415 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "StreamingClient OkTimeout for id: "];
        _0 = &_1;
        return;
    }
}

promoted[1] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}: &LevelFilter = {
    let mut _0: &tracing::level_filters::LevelFilter;
    let mut _1: tracing::level_filters::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "StreamingClient starting OkTimeout task for id: "];
        _0 = &_1;
        return;
    }
}

promoted[5] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}: &LevelFilter = {
    let mut _0: &tracing::level_filters::LevelFilter;
    let mut _1: tracing::level_filters::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}::CALLSITE: MacroCallsite = {
    let mut _0: tracing::__macro_support::MacroCallsite;
    let mut _1: &tracing::Metadata<'_>;
    let _2: &tracing::Metadata<'_>;
    let _3: &tracing::Metadata<'_>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc28: &tracing::Metadata<'_>};
        _2 = &(*_3);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = MacroCallsite::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc28 (static: StreamingClient::send_subscription::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 c3 00 00 00 │ ................
    0x10 │ ╾───alloc2426<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2414<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2422<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc5────────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2418<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2415<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2426 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 31 39 35                                        │ 195
}

alloc2414 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2422 (size: 16, align: 8) {
    ╾───alloc2421<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2421 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc5 (static: StreamingClient::send_subscription::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc28<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2418 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2415 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}::CALLSITE::META: tracing::Metadata<'_> = {
    let mut _0: tracing::Metadata<'_>;
    let mut _1: &str;
    let _2: &str;
    let mut _3: std::option::Option<&str>;
    let mut _4: &str;
    let _5: &str;
    let mut _6: std::option::Option<u32>;
    let mut _7: std::option::Option<&str>;
    let mut _8: &str;
    let _9: &str;
    let mut _10: tracing::field::FieldSet;
    let mut _11: &[&str];
    let mut _12: &[&str; 1];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: tracing::callsite::Identifier;
    let mut _16: &dyn tracing::Callsite;
    let mut _17: &tracing::__macro_support::MacroCallsite;
    let _18: &tracing::__macro_support::MacroCallsite;
    let _19: &tracing::__macro_support::MacroCallsite;
    let mut _20: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const "diem_client::stream::streaming_client";
        _1 = &(*_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "sdk/client/src/stream/streaming_client.rs";
        _4 = &(*_5);
        _3 = std::option::Option::<&str>::Some(move _4);
        StorageDead(_4);
        StorageLive(_6);
        _6 = std::option::Option::<u32>::Some(const 195_u32);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "diem_client::stream::streaming_client";
        _8 = &(*_9);
        _7 = std::option::Option::<&str>::Some(move _8);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _20 = const _;
        _13 = &(*_20);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const {alloc5: &MacroCallsite};
        _18 = &(*_19);
        _17 = &(*_18);
        _16 = move _17 as &dyn tracing::Callsite (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = tracing::callsite::Identifier(move _16);
        StorageDead(_16);
        ConstEvalCounter;
        _10 = FieldSet::new(move _11, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_11);
        ConstEvalCounter;
        _0 = tracing::Metadata::<'_>::new(const "event sdk/client/src/stream/streaming_client.rs:195", move _1, const _, move _3, move _6, move _7, move _10, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}

alloc5 (static: StreamingClient::send_subscription::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc28<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc28 (static: StreamingClient::send_subscription::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 c3 00 00 00 │ ................
    0x10 │ ╾───alloc2426<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2414<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2422<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc5────────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2418<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2415<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2426 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 31 39 35                                        │ 195
}

alloc2414 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2422 (size: 16, align: 8) {
    ╾───alloc2421<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2421 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2418 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2415 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}::CALLSITE::META: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "message"];
        _0 = &_1;
        return;
    }
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}::CALLSITE: MacroCallsite = {
    let mut _0: tracing::__macro_support::MacroCallsite;
    let mut _1: &tracing::Metadata<'_>;
    let _2: &tracing::Metadata<'_>;
    let _3: &tracing::Metadata<'_>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc29: &tracing::Metadata<'_>};
        _2 = &(*_3);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = MacroCallsite::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc29 (static: StreamingClient::send_subscription::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 c9 00 00 00 │ ................
    0x10 │ ╾───alloc2463<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2451<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2459<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc6────────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2455<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2452<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2463 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 30 31                                        │ 201
}

alloc2451 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2459 (size: 16, align: 8) {
    ╾───alloc2458<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2458 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc6 (static: StreamingClient::send_subscription::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc29<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2455 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2452 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}::CALLSITE::META: tracing::Metadata<'_> = {
    let mut _0: tracing::Metadata<'_>;
    let mut _1: &str;
    let _2: &str;
    let mut _3: std::option::Option<&str>;
    let mut _4: &str;
    let _5: &str;
    let mut _6: std::option::Option<u32>;
    let mut _7: std::option::Option<&str>;
    let mut _8: &str;
    let _9: &str;
    let mut _10: tracing::field::FieldSet;
    let mut _11: &[&str];
    let mut _12: &[&str; 1];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: tracing::callsite::Identifier;
    let mut _16: &dyn tracing::Callsite;
    let mut _17: &tracing::__macro_support::MacroCallsite;
    let _18: &tracing::__macro_support::MacroCallsite;
    let _19: &tracing::__macro_support::MacroCallsite;
    let mut _20: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const "diem_client::stream::streaming_client";
        _1 = &(*_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "sdk/client/src/stream/streaming_client.rs";
        _4 = &(*_5);
        _3 = std::option::Option::<&str>::Some(move _4);
        StorageDead(_4);
        StorageLive(_6);
        _6 = std::option::Option::<u32>::Some(const 201_u32);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "diem_client::stream::streaming_client";
        _8 = &(*_9);
        _7 = std::option::Option::<&str>::Some(move _8);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _20 = const _;
        _13 = &(*_20);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const {alloc6: &MacroCallsite};
        _18 = &(*_19);
        _17 = &(*_18);
        _16 = move _17 as &dyn tracing::Callsite (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = tracing::callsite::Identifier(move _16);
        StorageDead(_16);
        ConstEvalCounter;
        _10 = FieldSet::new(move _11, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_11);
        ConstEvalCounter;
        _0 = tracing::Metadata::<'_>::new(const "event sdk/client/src/stream/streaming_client.rs:201", move _1, const _, move _3, move _6, move _7, move _10, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}

alloc6 (static: StreamingClient::send_subscription::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc29<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc29 (static: StreamingClient::send_subscription::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 c9 00 00 00 │ ................
    0x10 │ ╾───alloc2463<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2451<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2459<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc6────────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2455<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2452<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2463 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 30 31                                        │ 201
}

alloc2451 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2459 (size: 16, align: 8) {
    ╾───alloc2458<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2458 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2455 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2452 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::send_subscription::{closure#0}::CALLSITE::META: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "message"];
        _0 = &_1;
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::subscription_count(_1: &StreamingClient) -> {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6} {
    debug self => _1;
    let mut _0: {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/streaming_client.rs:215:53: 217:6 (#0)} { self: _1 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::subscription_count::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6}>, _2: &mut Context<'_>) -> Poll<usize> {
    debug _task_context => _18;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6})).0: &stream::streaming_client::StreamingClient);
    let mut _0: std::task::Poll<usize>;
    let _3: &stream::streaming_client::StreamingClient;
    let _4: &std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>;
    let mut _5: &tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let _6: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _7: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}};
    let mut _8: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}};
    let _9: &tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _10: &std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let mut _11: std::task::Poll<tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let mut _12: std::pin::Pin<&mut {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}}>;
    let mut _13: &mut {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}};
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: isize;
    let mut _17: usize;
    let mut _18: &mut std::task::Context<'_>;
    let mut _19: u32;
    let mut _20: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6};
    let mut _21: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6};
    let mut _22: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6};
    let mut _23: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6};
    let mut _24: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6};
    let mut _25: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6};
    let mut _26: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6};
    let mut _27: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6};
    let mut _28: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6};
    scope 1 {
        debug self => _3;
        scope 2 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6})) as variant#3).0: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}});
            let _16: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
            scope 3 {
            }
            scope 4 {
                debug result => _16;
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6});
        _19 = discriminant((*_20));
        switchInt(move _19) -> [0: bb1, 1: bb20, 2: bb19, 3: bb18, otherwise: bb9];
    }

    bb1: {
        _18 = move _2;
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6});
        _3 = ((*_21).0: &stream::streaming_client::StreamingClient);
        _10 = &((*_3).1: std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>);
        _9 = <Arc<tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>> as Deref>::deref(move _10) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _8 = tokio::sync::RwLock::<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::read(_9) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _7 = <{async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::read::{closure#0}} as std::future::IntoFuture>::into_future(move _8) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6});
        (((*_22) as variant#3).0: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}}) = move _7;
        goto -> bb5;
    }

    bb5: {
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6});
        _13 = &mut (((*_23) as variant#3).0: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}});
        _12 = Pin::<&mut {async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::read::{closure#0}}>::new_unchecked(_13) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _14 = _18;
        _11 = <{async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::read::{closure#0}} as futures::Future>::poll(move _12, _14) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<usize>::Pending;
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6});
        discriminant((*_24)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _16 = move ((_11 as Ready).0: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>);
        _6 = move _16;
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6});
        drop((((*_25) as variant#3).0: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}})) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _5 = &_6;
        _4 = <tokio::sync::RwLockReadGuard<'_, HashMap<diem_json_rpc_types::Id, SubscriptionSender>> as Deref>::deref(move _5) -> [return: bb12, unwind: bb15];
    }

    bb12: {
        _17 = HashMap::<diem_json_rpc_types::Id, SubscriptionSender>::len(_4) -> [return: bb13, unwind: bb15];
    }

    bb13: {
        drop(_6) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        _0 = Poll::<usize>::Ready(move _17);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6});
        discriminant((*_26)) = 1;
        return;
    }

    bb15 (cleanup): {
        drop(_6) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6});
        drop((((*_27) as variant#3).0: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:215:53: 217:6});
        discriminant((*_28)) = 2;
        resume;
    }

    bb18: {
        _18 = move _2;
        goto -> bb5;
    }

    bb19: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb20, unwind continue];
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message(_1: &mut StreamingClient) -> {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6} {
    debug self => _1;
    let mut _0: {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/streaming_client.rs:220:65: 286:6 (#0)} { self: move _1 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<(), StreamError>> {
    debug _task_context => _361;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})).0: &mut stream::streaming_client::StreamingClient);
    let mut _0: std::task::Poll<std::result::Result<(), error::StreamError>>;
    let mut _3: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}};
    let mut _4: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}};
    let mut _5: &mut tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _6: &mut tokio::sync::RwLockWriteGuard<'_, tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
    let mut _7: {async fn body@tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>::write::{closure#0}};
    let mut _8: {async fn body@tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>::write::{closure#0}};
    let _9: &tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
    let mut _10: &std::sync::Arc<tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>;
    let mut _11: std::task::Poll<tokio::sync::RwLockWriteGuard<'_, tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>;
    let mut _12: std::pin::Pin<&mut {async fn body@tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>::write::{closure#0}}>;
    let mut _13: &mut {async fn body@tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>::write::{closure#0}};
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: isize;
    let mut _17: std::task::Poll<std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
    let mut _18: std::pin::Pin<&mut {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}}>;
    let mut _19: &mut {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}};
    let mut _20: &mut std::task::Context<'_>;
    let mut _21: isize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: &tracing::level_filters::LevelFilter;
    let _26: tracing::level_filters::LevelFilter;
    let _28: &tracing::__macro_support::MacroCallsite;
    let mut _29: bool;
    let mut _30: &tracing::subscriber::Interest;
    let mut _31: bool;
    let _32: &tracing::__macro_support::MacroCallsite;
    let mut _33: tracing::subscriber::Interest;
    let _35: &tracing::__macro_support::MacroCallsite;
    let _36: ();
    let _37: &tracing::field::ValueSet<'_>;
    let _38: tracing::field::ValueSet<'_>;
    let _40: &tracing::field::FieldSet;
    let _41: &tracing::field::FieldSet;
    let _42: &[(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let _43: [(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let mut _44: (&tracing::field::Field, std::option::Option<&dyn tracing::Value>);
    let mut _45: &tracing::field::Field;
    let _46: tracing::field::Field;
    let mut _47: std::option::Option<tracing::field::Field>;
    let mut _48: &mut tracing::field::Iter;
    let _49: &str;
    let mut _50: std::option::Option<&dyn tracing::Value>;
    let mut _51: &dyn tracing::Value;
    let _52: &std::fmt::Arguments<'_>;
    let _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: &[core::fmt::rt::Argument<'_>];
    let _56: &[core::fmt::rt::Argument<'_>; 1];
    let _57: [core::fmt::rt::Argument<'_>; 1];
    let mut _58: core::fmt::rt::Argument<'_>;
    let _59: &&std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let _60: &std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _61: isize;
    let mut _62: error::StreamError;
    let mut _63: std::option::Option<error::StreamError>;
    let mut _65: isize;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: &tracing::level_filters::LevelFilter;
    let _71: tracing::level_filters::LevelFilter;
    let _73: &tracing::__macro_support::MacroCallsite;
    let mut _74: bool;
    let mut _75: &tracing::subscriber::Interest;
    let mut _76: bool;
    let _77: &tracing::__macro_support::MacroCallsite;
    let mut _78: tracing::subscriber::Interest;
    let _80: &tracing::__macro_support::MacroCallsite;
    let _81: ();
    let _82: &tracing::field::ValueSet<'_>;
    let _83: tracing::field::ValueSet<'_>;
    let _85: &tracing::field::FieldSet;
    let _86: &tracing::field::FieldSet;
    let _87: &[(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let _88: [(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let mut _89: (&tracing::field::Field, std::option::Option<&dyn tracing::Value>);
    let mut _90: &tracing::field::Field;
    let _91: tracing::field::Field;
    let mut _92: std::option::Option<tracing::field::Field>;
    let mut _93: &mut tracing::field::Iter;
    let _94: &str;
    let mut _95: std::option::Option<&dyn tracing::Value>;
    let mut _96: &dyn tracing::Value;
    let _97: &std::fmt::Arguments<'_>;
    let _98: std::fmt::Arguments<'_>;
    let mut _99: &[&str];
    let mut _100: &[core::fmt::rt::Argument<'_>];
    let _101: &[core::fmt::rt::Argument<'_>; 1];
    let _102: [core::fmt::rt::Argument<'_>; 1];
    let mut _103: core::fmt::rt::Argument<'_>;
    let _104: &error::StreamError;
    let mut _105: ();
    let mut _106: &std::option::Option<diem_json_rpc_types::Id>;
    let mut _107: isize;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: &tracing::level_filters::LevelFilter;
    let _112: tracing::level_filters::LevelFilter;
    let _114: &tracing::__macro_support::MacroCallsite;
    let mut _115: bool;
    let mut _116: &tracing::subscriber::Interest;
    let mut _117: bool;
    let _118: &tracing::__macro_support::MacroCallsite;
    let mut _119: tracing::subscriber::Interest;
    let _121: &tracing::__macro_support::MacroCallsite;
    let _122: ();
    let _123: &tracing::field::ValueSet<'_>;
    let _124: tracing::field::ValueSet<'_>;
    let _126: &tracing::field::FieldSet;
    let _127: &tracing::field::FieldSet;
    let _128: &[(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let _129: [(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let mut _130: (&tracing::field::Field, std::option::Option<&dyn tracing::Value>);
    let mut _131: &tracing::field::Field;
    let _132: tracing::field::Field;
    let mut _133: std::option::Option<tracing::field::Field>;
    let mut _134: &mut tracing::field::Iter;
    let _135: &str;
    let mut _136: std::option::Option<&dyn tracing::Value>;
    let mut _137: &dyn tracing::Value;
    let _138: &std::fmt::Arguments<'_>;
    let _139: std::fmt::Arguments<'_>;
    let mut _140: &[&str];
    let mut _141: &[core::fmt::rt::Argument<'_>];
    let _142: &[core::fmt::rt::Argument<'_>; 1];
    let _143: [core::fmt::rt::Argument<'_>; 1];
    let mut _144: core::fmt::rt::Argument<'_>;
    let _145: &&diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
    let _146: &diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
    let mut _147: ();
    let mut _148: std::option::Option<&serde_json::Value>;
    let mut _149: &std::option::Option<serde_json::Value>;
    let mut _150: {closure@sdk/client/src/stream/streaming_client.rs:249:68: 249:71};
    let mut _151: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}};
    let mut _152: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}};
    let _153: &tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _154: &std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let mut _155: std::task::Poll<tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let mut _156: std::pin::Pin<&mut {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}}>;
    let mut _157: &mut {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}};
    let mut _158: &mut std::task::Context<'_>;
    let mut _159: isize;
    let mut _161: std::option::Option<&stream::streaming_client::SubscriptionSender>;
    let _162: &std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>;
    let mut _163: &tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let _164: &diem_json_rpc_types::Id;
    let mut _165: isize;
    let mut _167: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _168: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _169: &tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _170: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>;
    let mut _171: diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
    let mut _172: &diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
    let mut _173: std::task::Poll<std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>;
    let mut _174: std::pin::Pin<&mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}}>;
    let mut _175: &mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _176: &mut std::task::Context<'_>;
    let mut _177: isize;
    let mut _179: isize;
    let mut _180: bool;
    let mut _181: bool;
    let mut _182: &tracing::level_filters::LevelFilter;
    let _183: tracing::level_filters::LevelFilter;
    let _185: &tracing::__macro_support::MacroCallsite;
    let mut _186: bool;
    let mut _187: &tracing::subscriber::Interest;
    let mut _188: bool;
    let _189: &tracing::__macro_support::MacroCallsite;
    let mut _190: tracing::subscriber::Interest;
    let _192: &tracing::__macro_support::MacroCallsite;
    let _193: ();
    let _194: &tracing::field::ValueSet<'_>;
    let _195: tracing::field::ValueSet<'_>;
    let _197: &tracing::field::FieldSet;
    let _198: &tracing::field::FieldSet;
    let _199: &[(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 2];
    let _200: [(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 2];
    let mut _201: (&tracing::field::Field, std::option::Option<&dyn tracing::Value>);
    let mut _202: &tracing::field::Field;
    let _203: tracing::field::Field;
    let mut _204: std::option::Option<tracing::field::Field>;
    let mut _205: &mut tracing::field::Iter;
    let _206: &str;
    let mut _207: std::option::Option<&dyn tracing::Value>;
    let mut _208: &dyn tracing::Value;
    let _209: &std::fmt::Arguments<'_>;
    let _210: std::fmt::Arguments<'_>;
    let mut _211: &[&str];
    let mut _212: &[core::fmt::rt::Argument<'_>];
    let _213: &[core::fmt::rt::Argument<'_>; 1];
    let _214: [core::fmt::rt::Argument<'_>; 1];
    let mut _215: core::fmt::rt::Argument<'_>;
    let _216: &&diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
    let _217: &diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
    let mut _218: (&tracing::field::Field, std::option::Option<&dyn tracing::Value>);
    let _219: &tracing::field::Field;
    let _220: tracing::field::Field;
    let mut _221: std::option::Option<tracing::field::Field>;
    let mut _222: &mut tracing::field::Iter;
    let _223: &str;
    let mut _224: std::option::Option<&dyn tracing::Value>;
    let _225: &dyn tracing::Value;
    let _226: &tracing::field::DebugValue<&&tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
    let _227: tracing::field::DebugValue<&&tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
    let mut _228: &&tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let _229: &tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let _230: ();
    let mut _231: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _232: bool;
    let mut _233: std::result::Result<(), error::StreamError>;
    let mut _234: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _235: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let _236: &diem_json_rpc_types::Id;
    let mut _237: std::task::Poll<std::result::Result<(), error::StreamError>>;
    let mut _238: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6}>;
    let mut _239: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _240: &mut std::task::Context<'_>;
    let mut _241: isize;
    let mut _243: ();
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: &tracing::level_filters::LevelFilter;
    let _247: tracing::level_filters::LevelFilter;
    let _249: &tracing::__macro_support::MacroCallsite;
    let mut _250: bool;
    let mut _251: &tracing::subscriber::Interest;
    let mut _252: bool;
    let _253: &tracing::__macro_support::MacroCallsite;
    let mut _254: tracing::subscriber::Interest;
    let _256: &tracing::__macro_support::MacroCallsite;
    let _257: ();
    let _258: &tracing::field::ValueSet<'_>;
    let _259: tracing::field::ValueSet<'_>;
    let _261: &tracing::field::FieldSet;
    let _262: &tracing::field::FieldSet;
    let _263: &[(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let _264: [(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let mut _265: (&tracing::field::Field, std::option::Option<&dyn tracing::Value>);
    let mut _266: &tracing::field::Field;
    let _267: tracing::field::Field;
    let mut _268: std::option::Option<tracing::field::Field>;
    let mut _269: &mut tracing::field::Iter;
    let _270: &str;
    let mut _271: std::option::Option<&dyn tracing::Value>;
    let mut _272: &dyn tracing::Value;
    let _273: &std::fmt::Arguments<'_>;
    let _274: std::fmt::Arguments<'_>;
    let mut _275: &[&str];
    let mut _276: &[core::fmt::rt::Argument<'_>];
    let _277: &[core::fmt::rt::Argument<'_>; 1];
    let _278: [core::fmt::rt::Argument<'_>; 1];
    let mut _279: core::fmt::rt::Argument<'_>;
    let _280: &&diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
    let _281: &diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
    let mut _282: ();
    let mut _283: bool;
    let mut _284: bool;
    let mut _285: bool;
    let mut _286: &tracing::level_filters::LevelFilter;
    let _287: tracing::level_filters::LevelFilter;
    let _289: &tracing::__macro_support::MacroCallsite;
    let mut _290: bool;
    let mut _291: &tracing::subscriber::Interest;
    let mut _292: bool;
    let _293: &tracing::__macro_support::MacroCallsite;
    let mut _294: tracing::subscriber::Interest;
    let _296: &tracing::__macro_support::MacroCallsite;
    let _297: ();
    let _298: &tracing::field::ValueSet<'_>;
    let _299: tracing::field::ValueSet<'_>;
    let _301: &tracing::field::FieldSet;
    let _302: &tracing::field::FieldSet;
    let _303: &[(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let _304: [(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let mut _305: (&tracing::field::Field, std::option::Option<&dyn tracing::Value>);
    let mut _306: &tracing::field::Field;
    let _307: tracing::field::Field;
    let mut _308: std::option::Option<tracing::field::Field>;
    let mut _309: &mut tracing::field::Iter;
    let _310: &str;
    let mut _311: std::option::Option<&dyn tracing::Value>;
    let mut _312: &dyn tracing::Value;
    let _313: &std::fmt::Arguments<'_>;
    let _314: std::fmt::Arguments<'_>;
    let mut _315: &[&str];
    let mut _316: &[core::fmt::rt::Argument<'_>];
    let _317: &[core::fmt::rt::Argument<'_>; 1];
    let _318: [core::fmt::rt::Argument<'_>; 1];
    let mut _319: core::fmt::rt::Argument<'_>;
    let _320: &&diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
    let _321: &diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
    let _322: ();
    let mut _323: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _324: std::result::Result<(), error::StreamError>;
    let mut _325: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _326: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let _327: &diem_json_rpc_types::Id;
    let mut _328: std::task::Poll<std::result::Result<(), error::StreamError>>;
    let mut _329: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6}>;
    let mut _330: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6};
    let mut _331: &mut std::task::Context<'_>;
    let mut _332: isize;
    let mut _334: ();
    let mut _359: isize;
    let mut _360: std::result::Result<(), error::StreamError>;
    let mut _361: &mut std::task::Context<'_>;
    let mut _362: u32;
    let mut _363: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _364: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _365: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _366: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _367: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _368: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _369: &mut stream::streaming_client::StreamingClient;
    let mut _370: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _371: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _372: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _373: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _374: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _375: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _376: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _377: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _378: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _379: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _380: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _381: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _382: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _383: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _384: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _385: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _386: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _387: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _388: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _389: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _390: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _391: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _392: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _393: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _394: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _395: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _396: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _397: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _398: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _399: &mut stream::streaming_client::StreamingClient;
    let mut _400: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _401: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _402: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _403: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _404: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _405: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _406: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _407: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _408: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _409: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _410: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _411: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _412: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _413: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _414: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _415: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _416: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _417: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _418: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _419: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _420: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _421: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _422: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _423: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _424: &mut stream::streaming_client::StreamingClient;
    let mut _425: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _426: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _427: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _428: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _429: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _430: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _431: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _432: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _433: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _434: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _435: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _436: &mut stream::streaming_client::StreamingClient;
    let mut _437: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _438: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _439: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _440: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _441: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _442: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _443: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _444: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _445: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _446: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _447: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _448: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _449: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _450: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _451: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _452: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _453: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _454: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _455: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _456: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _457: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _458: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _459: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _460: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _461: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _462: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _463: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _464: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _465: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _466: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _467: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _468: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _469: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _470: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _471: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _472: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _473: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _474: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _475: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _476: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#3).0: &mut stream::streaming_client::StreamingClient);
        scope 2 {
            debug msg => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#5).1: std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
            let _27: tracing::subscriber::Interest;
            let _64: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>;
            let mut _356: &tracing::Level;
            let mut _357: &tracing::level_filters::LevelFilter;
            let mut _358: &tracing::Level;
            scope 9 {
                debug interest => _27;
                let _34: &tracing::Metadata<'_>;
                scope 10 {
                    debug meta => _34;
                    let mut _39: tracing::field::Iter;
                    scope 11 {
                        debug iter => _39;
                        let mut _355: &[&str; 1];
                    }
                }
            }
            scope 12 {
                debug msg => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#5).2: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>);
                let _66: diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
                let _67: error::StreamError;
                scope 14 {
                    debug msg => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse);
                    let _108: &diem_json_rpc_types::Id;
                    let _113: tracing::subscriber::Interest;
                    let mut _340: &tracing::Level;
                    let mut _341: &tracing::level_filters::LevelFilter;
                    let mut _342: &tracing::Level;
                    scope 20 {
                        debug id => _108;
                        scope 25 {
                            debug msg_is_unsubscribe => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#5).4: bool);
                            scope 26 {
                                debug id => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#5).5: diem_json_rpc_types::Id);
                                scope 27 {
                                    debug subscriptions => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#6).6: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>);
                                    let _166: &stream::streaming_client::SubscriptionSender;
                                    let _288: tracing::subscriber::Interest;
                                    let mut _344: &tracing::Level;
                                    let mut _345: &tracing::level_filters::LevelFilter;
                                    let mut _346: &tracing::Level;
                                    scope 31 {
                                        debug sender => _166;
                                        let _248: tracing::subscriber::Interest;
                                        let mut _348: &tracing::Level;
                                        let mut _349: &tracing::level_filters::LevelFilter;
                                        let mut _350: &tracing::Level;
                                        scope 32 {
                                            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#6).7: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}});
                                            let _178: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
                                            scope 33 {
                                            }
                                            scope 34 {
                                                debug result => _178;
                                            }
                                        }
                                        scope 35 {
                                            debug e => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#7).6: tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
                                            let _184: tracing::subscriber::Interest;
                                            let mut _352: &tracing::Level;
                                            let mut _353: &tracing::level_filters::LevelFilter;
                                            let mut _354: &tracing::Level;
                                            scope 36 {
                                                debug interest => _184;
                                                let _191: &tracing::Metadata<'_>;
                                                scope 37 {
                                                    debug meta => _191;
                                                    let mut _196: tracing::field::Iter;
                                                    scope 38 {
                                                        debug iter => _196;
                                                        let mut _351: &[&str; 1];
                                                    }
                                                }
                                            }
                                            scope 39 {
                                            }
                                            scope 40 {
                                                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#7).7: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
                                                let _242: std::result::Result<(), error::StreamError>;
                                                scope 41 {
                                                }
                                                scope 42 {
                                                    debug result => _242;
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug interest => _248;
                                            let _255: &tracing::Metadata<'_>;
                                            scope 44 {
                                                debug meta => _255;
                                                let mut _260: tracing::field::Iter;
                                                scope 45 {
                                                    debug iter => _260;
                                                    let mut _347: &[&str; 1];
                                                }
                                            }
                                        }
                                    }
                                    scope 46 {
                                        debug interest => _288;
                                        let _295: &tracing::Metadata<'_>;
                                        scope 47 {
                                            debug meta => _295;
                                            let mut _300: tracing::field::Iter;
                                            scope 48 {
                                                debug iter => _300;
                                                let mut _343: &[&str; 1];
                                            }
                                        }
                                    }
                                    scope 49 {
                                    }
                                    scope 50 {
                                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#8).5: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
                                        let _333: std::result::Result<(), error::StreamError>;
                                        scope 51 {
                                        }
                                        scope 52 {
                                            debug result => _333;
                                        }
                                    }
                                }
                                scope 28 {
                                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#5).6: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}});
                                    let _160: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
                                    scope 29 {
                                    }
                                    scope 30 {
                                        debug result => _160;
                                    }
                                }
                            }
                        }
                    }
                    scope 21 {
                        debug id => _108;
                    }
                    scope 22 {
                        debug interest => _113;
                        let _120: &tracing::Metadata<'_>;
                        scope 23 {
                            debug meta => _120;
                            let mut _125: tracing::field::Iter;
                            scope 24 {
                                debug iter => _125;
                                let mut _339: &[&str; 1];
                            }
                        }
                    }
                }
                scope 15 {
                    debug msg => _66;
                }
                scope 16 {
                    debug e => _67;
                    let _72: tracing::subscriber::Interest;
                    let mut _336: &tracing::Level;
                    let mut _337: &tracing::level_filters::LevelFilter;
                    let mut _338: &tracing::Level;
                    scope 17 {
                        debug interest => _72;
                        let _79: &tracing::Metadata<'_>;
                        scope 18 {
                            debug meta => _79;
                            let mut _84: tracing::field::Iter;
                            scope 19 {
                                debug iter => _84;
                                let mut _335: &[&str; 1];
                            }
                        }
                    }
                }
            }
            scope 13 {
                debug msg => _64;
            }
        }
        scope 3 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#3).1: {async fn body@tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>::write::{closure#0}});
            let _16: tokio::sync::RwLockWriteGuard<'_, tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
            scope 4 {
            }
            scope 5 {
                debug result => _16;
            }
        }
        scope 6 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) as variant#4).2: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}});
            let _22: std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
            scope 7 {
            }
            scope 8 {
                debug result => _22;
            }
        }
    }

    bb0: {
        _363 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _362 = discriminant((*_363));
        switchInt(move _362) -> [0: bb1, 1: bb240, 2: bb239, 3: bb233, 4: bb234, 5: bb235, 6: bb236, 7: bb237, 8: bb238, otherwise: bb9];
    }

    bb1: {
        _361 = move _2;
        _364 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_364) as variant#6).8: bool) = const false;
        _365 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_365) as variant#5).7: bool) = const false;
        _366 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _367 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_366) as variant#3).0: &mut stream::streaming_client::StreamingClient) = move ((*_367).0: &mut stream::streaming_client::StreamingClient);
        _368 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _369 = deref_copy (((*_368) as variant#3).0: &mut stream::streaming_client::StreamingClient);
        _10 = &((*_369).2: std::sync::Arc<tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>);
        _9 = <Arc<tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>>> as Deref>::deref(move _10) -> [return: bb2, unwind: bb221];
    }

    bb2: {
        _8 = tokio::sync::RwLock::<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>>::write(_9) -> [return: bb3, unwind: bb221];
    }

    bb3: {
        _7 = <{async fn body@tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>>::write::{closure#0}} as std::future::IntoFuture>::into_future(move _8) -> [return: bb4, unwind: bb221];
    }

    bb4: {
        _370 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_370) as variant#3).1: {async fn body@tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>::write::{closure#0}}) = move _7;
        goto -> bb5;
    }

    bb5: {
        _371 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _13 = &mut (((*_371) as variant#3).1: {async fn body@tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>::write::{closure#0}});
        _12 = Pin::<&mut {async fn body@tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>>::write::{closure#0}}>::new_unchecked(_13) -> [return: bb6, unwind: bb220];
    }

    bb6: {
        _14 = _361;
        _11 = <{async fn body@tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>>::write::{closure#0}} as futures::Future>::poll(move _12, _14) -> [return: bb7, unwind: bb220];
    }

    bb7: {
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<(), StreamError>>::Pending;
        _373 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        discriminant((*_373)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _16 = move ((_11 as Ready).0: tokio::sync::RwLockWriteGuard<'_, tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>);
        _372 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_372) as variant#4).1: tokio::sync::RwLockWriteGuard<'_, tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>) = move _16;
        _374 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_374) as variant#3).1: {async fn body@tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>::write::{closure#0}})) -> [return: bb11, unwind: bb221];
    }

    bb11: {
        _375 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _6 = &mut (((*_375) as variant#4).1: tokio::sync::RwLockWriteGuard<'_, tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>);
        _5 = <tokio::sync::RwLockWriteGuard<'_, tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>> as DerefMut>::deref_mut(move _6) -> [return: bb12, unwind: bb219];
    }

    bb12: {
        _4 = tokio::sync::mpsc::Receiver::<std::result::Result<StreamJsonRpcResponse, StreamError>>::recv(_5) -> [return: bb13, unwind: bb219];
    }

    bb13: {
        _3 = <{async fn body@tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>::recv::{closure#0}} as std::future::IntoFuture>::into_future(move _4) -> [return: bb14, unwind: bb219];
    }

    bb14: {
        _376 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_376) as variant#4).2: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}}) = move _3;
        goto -> bb15;
    }

    bb15: {
        _377 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _19 = &mut (((*_377) as variant#4).2: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}});
        _18 = Pin::<&mut {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>::recv::{closure#0}}>::new_unchecked(_19) -> [return: bb16, unwind: bb218];
    }

    bb16: {
        _20 = _361;
        _17 = <{async fn body@tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>::recv::{closure#0}} as futures::Future>::poll(move _18, _20) -> [return: bb17, unwind: bb218];
    }

    bb17: {
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb19, 1: bb18, otherwise: bb9];
    }

    bb18: {
        _0 = Poll::<std::result::Result<(), StreamError>>::Pending;
        _380 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        discriminant((*_380)) = 4;
        return;
    }

    bb19: {
        _22 = move ((_17 as Ready).0: std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _378 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_378) as variant#5).7: bool) = const true;
        _379 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_379) as variant#5).1: std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>) = move _22;
        _381 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_381) as variant#4).2: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}})) -> [return: bb20, unwind: bb219];
    }

    bb20: {
        _382 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_382) as variant#4).1: tokio::sync::RwLockWriteGuard<'_, tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>)) -> [return: bb21, unwind: bb231];
    }

    bb21: {
        _358 = const _;
        _357 = const _;
        _23 = <Level as PartialOrd<LevelFilter>>::le(_358, _357) -> [return: bb22, unwind: bb231];
    }

    bb22: {
        switchInt(move _23) -> [0: bb41, otherwise: bb23];
    }

    bb23: {
        _356 = const _;
        _26 = LevelFilter::current() -> [return: bb24, unwind: bb231];
    }

    bb24: {
        _25 = &_26;
        _24 = <Level as PartialOrd<LevelFilter>>::le(_356, move _25) -> [return: bb25, unwind: bb231];
    }

    bb25: {
        switchInt(move _24) -> [0: bb41, otherwise: bb26];
    }

    bb26: {
        _28 = const {alloc14: &MacroCallsite};
        _27 = MacroCallsite::interest(_28) -> [return: bb27, unwind: bb231];
    }

    bb27: {
        _30 = &_27;
        _29 = tracing::subscriber::Interest::is_never(move _30) -> [return: bb28, unwind: bb231];
    }

    bb28: {
        switchInt(move _29) -> [0: bb29, otherwise: bb41];
    }

    bb29: {
        _32 = const {alloc14: &MacroCallsite};
        _33 = move _27;
        _31 = MacroCallsite::is_enabled(_32, move _33) -> [return: bb30, unwind: bb231];
    }

    bb30: {
        switchInt(move _31) -> [0: bb41, otherwise: bb31];
    }

    bb31: {
        _35 = const {alloc14: &MacroCallsite};
        _34 = <MacroCallsite as tracing::Callsite>::metadata(_35) -> [return: bb32, unwind: bb231];
    }

    bb32: {
        _40 = tracing::Metadata::<'_>::fields(_34) -> [return: bb33, unwind: bb231];
    }

    bb33: {
        _39 = FieldSet::iter(_40) -> [return: bb34, unwind: bb231];
    }

    bb34: {
        _41 = tracing::Metadata::<'_>::fields(_34) -> [return: bb35, unwind: bb231];
    }

    bb35: {
        _48 = &mut _39;
        _47 = <tracing::field::Iter as Iterator>::next(move _48) -> [return: bb36, unwind: bb231];
    }

    bb36: {
        _49 = const "FieldSet corrupted (this is a bug)";
        _46 = std::option::Option::<Field>::expect(move _47, _49) -> [return: bb37, unwind: bb231];
    }

    bb37: {
        _45 = &_46;
        _355 = const _;
        _54 = _355 as &[&str] (PointerCoercion(Unsize));
        _383 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _60 = &(((*_383) as variant#5).1: std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _59 = &_60;
        _58 = core::fmt::rt::Argument::<'_>::new_debug::<&std::option::Option<std::result::Result<StreamJsonRpcResponse, StreamError>>>(_59) -> [return: bb38, unwind: bb231];
    }

    bb38: {
        _57 = [move _58];
        _56 = &_57;
        _55 = _56 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _53 = Arguments::<'_>::new_v1(move _54, move _55) -> [return: bb39, unwind: bb231];
    }

    bb39: {
        _52 = &_53;
        _51 = _52 as &dyn tracing::Value (PointerCoercion(Unsize));
        _50 = std::option::Option::<&dyn tracing::Value>::Some(_51);
        _44 = (move _45, move _50);
        _43 = [move _44];
        _42 = &_43;
        _38 = FieldSet::value_set::<'_, [(&Field, std::option::Option<&dyn tracing::Value>); 1]>(_41, _42) -> [return: bb40, unwind: bb231];
    }

    bb40: {
        _37 = &_38;
        _36 = tracing::Event::<'_>::dispatch(_34, _37) -> [return: bb241, unwind: bb231];
    }

    bb41: {
        _384 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _61 = discriminant((((*_384) as variant#5).1: std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>));
        switchInt(move _61) -> [0: bb43, 1: bb42, otherwise: bb9];
    }

    bb42: {
        _385 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_385) as variant#5).7: bool) = const false;
        _386 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _64 = move (((((*_386) as variant#5).1: std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>) as Some).0: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>);
        _387 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_387) as variant#5).2: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>) = move _64;
        _388 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _65 = discriminant((((*_388) as variant#5).2: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>));
        switchInt(move _65) -> [0: bb46, 1: bb45, otherwise: bb9];
    }

    bb43: {
        _63 = std::option::Option::<StreamError>::None;
        _62 = StreamError::connection_closed::<StreamError>(move _63) -> [return: bb44, unwind: bb231];
    }

    bb44: {
        _360 = std::result::Result::<(), StreamError>::Err(move _62);
        goto -> bb203;
    }

    bb45: {
        _389 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _67 = move (((((*_389) as variant#5).2: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>) as Err).0: error::StreamError);
        _338 = const _;
        _337 = const _;
        _68 = <Level as PartialOrd<LevelFilter>>::le(_338, _337) -> [return: bb47, unwind: bb217];
    }

    bb46: {
        _390 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _66 = move (((((*_390) as variant#5).2: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>) as Ok).0: diem_json_rpc_types::stream::response::StreamJsonRpcResponse);
        _391 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_391) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse) = move _66;
        _392 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _106 = &((((*_392) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse).1: std::option::Option<diem_json_rpc_types::Id>);
        _107 = discriminant((*_106));
        switchInt(move _107) -> [0: bb67, 1: bb68, otherwise: bb9];
    }

    bb47: {
        switchInt(move _68) -> [0: bb66, otherwise: bb48];
    }

    bb48: {
        _336 = const _;
        _71 = LevelFilter::current() -> [return: bb49, unwind: bb217];
    }

    bb49: {
        _70 = &_71;
        _69 = <Level as PartialOrd<LevelFilter>>::le(_336, move _70) -> [return: bb50, unwind: bb217];
    }

    bb50: {
        switchInt(move _69) -> [0: bb66, otherwise: bb51];
    }

    bb51: {
        _73 = const {alloc15: &MacroCallsite};
        _72 = MacroCallsite::interest(_73) -> [return: bb52, unwind: bb217];
    }

    bb52: {
        _75 = &_72;
        _74 = tracing::subscriber::Interest::is_never(move _75) -> [return: bb53, unwind: bb217];
    }

    bb53: {
        switchInt(move _74) -> [0: bb54, otherwise: bb66];
    }

    bb54: {
        _77 = const {alloc15: &MacroCallsite};
        _78 = move _72;
        _76 = MacroCallsite::is_enabled(_77, move _78) -> [return: bb55, unwind: bb217];
    }

    bb55: {
        switchInt(move _76) -> [0: bb66, otherwise: bb56];
    }

    bb56: {
        _80 = const {alloc15: &MacroCallsite};
        _79 = <MacroCallsite as tracing::Callsite>::metadata(_80) -> [return: bb57, unwind: bb217];
    }

    bb57: {
        _85 = tracing::Metadata::<'_>::fields(_79) -> [return: bb58, unwind: bb217];
    }

    bb58: {
        _84 = FieldSet::iter(_85) -> [return: bb59, unwind: bb217];
    }

    bb59: {
        _86 = tracing::Metadata::<'_>::fields(_79) -> [return: bb60, unwind: bb217];
    }

    bb60: {
        _93 = &mut _84;
        _92 = <tracing::field::Iter as Iterator>::next(move _93) -> [return: bb61, unwind: bb217];
    }

    bb61: {
        _94 = const "FieldSet corrupted (this is a bug)";
        _91 = std::option::Option::<Field>::expect(move _92, _94) -> [return: bb62, unwind: bb217];
    }

    bb62: {
        _90 = &_91;
        _335 = const _;
        _99 = _335 as &[&str] (PointerCoercion(Unsize));
        _104 = &_67;
        _103 = core::fmt::rt::Argument::<'_>::new_debug::<StreamError>(_104) -> [return: bb63, unwind: bb217];
    }

    bb63: {
        _102 = [move _103];
        _101 = &_102;
        _100 = _101 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _98 = Arguments::<'_>::new_v1(move _99, move _100) -> [return: bb64, unwind: bb217];
    }

    bb64: {
        _97 = &_98;
        _96 = _97 as &dyn tracing::Value (PointerCoercion(Unsize));
        _95 = std::option::Option::<&dyn tracing::Value>::Some(_96);
        _89 = (move _90, move _95);
        _88 = [move _89];
        _87 = &_88;
        _83 = FieldSet::value_set::<'_, [(&Field, std::option::Option<&dyn tracing::Value>); 1]>(_86, _87) -> [return: bb65, unwind: bb217];
    }

    bb65: {
        _82 = &_83;
        _81 = tracing::Event::<'_>::dispatch(_79, _82) -> [return: bb242, unwind: bb217];
    }

    bb66: {
        _105 = ();
        _360 = std::result::Result::<(), StreamError>::Ok(move _105);
        drop(_67) -> [return: bb203, unwind: bb231];
    }

    bb67: {
        _342 = const _;
        _341 = const _;
        _109 = <Level as PartialOrd<LevelFilter>>::le(_342, _341) -> [return: bb69, unwind: bb216];
    }

    bb68: {
        _108 = &(((*_106) as Some).0: diem_json_rpc_types::Id);
        _393 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _149 = &((((*_393) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse).2: std::option::Option<serde_json::Value>);
        _148 = std::option::Option::<SerdeValue>::as_ref(move _149) -> [return: bb89, unwind: bb216];
    }

    bb69: {
        switchInt(move _109) -> [0: bb88, otherwise: bb70];
    }

    bb70: {
        _340 = const _;
        _112 = LevelFilter::current() -> [return: bb71, unwind: bb216];
    }

    bb71: {
        _111 = &_112;
        _110 = <Level as PartialOrd<LevelFilter>>::le(_340, move _111) -> [return: bb72, unwind: bb216];
    }

    bb72: {
        switchInt(move _110) -> [0: bb88, otherwise: bb73];
    }

    bb73: {
        _114 = const {alloc16: &MacroCallsite};
        _113 = MacroCallsite::interest(_114) -> [return: bb74, unwind: bb216];
    }

    bb74: {
        _116 = &_113;
        _115 = tracing::subscriber::Interest::is_never(move _116) -> [return: bb75, unwind: bb216];
    }

    bb75: {
        switchInt(move _115) -> [0: bb76, otherwise: bb88];
    }

    bb76: {
        _118 = const {alloc16: &MacroCallsite};
        _119 = move _113;
        _117 = MacroCallsite::is_enabled(_118, move _119) -> [return: bb77, unwind: bb216];
    }

    bb77: {
        switchInt(move _117) -> [0: bb88, otherwise: bb78];
    }

    bb78: {
        _121 = const {alloc16: &MacroCallsite};
        _120 = <MacroCallsite as tracing::Callsite>::metadata(_121) -> [return: bb79, unwind: bb216];
    }

    bb79: {
        _126 = tracing::Metadata::<'_>::fields(_120) -> [return: bb80, unwind: bb216];
    }

    bb80: {
        _125 = FieldSet::iter(_126) -> [return: bb81, unwind: bb216];
    }

    bb81: {
        _127 = tracing::Metadata::<'_>::fields(_120) -> [return: bb82, unwind: bb216];
    }

    bb82: {
        _134 = &mut _125;
        _133 = <tracing::field::Iter as Iterator>::next(move _134) -> [return: bb83, unwind: bb216];
    }

    bb83: {
        _135 = const "FieldSet corrupted (this is a bug)";
        _132 = std::option::Option::<Field>::expect(move _133, _135) -> [return: bb84, unwind: bb216];
    }

    bb84: {
        _131 = &_132;
        _339 = const _;
        _140 = _339 as &[&str] (PointerCoercion(Unsize));
        _394 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _146 = &(((*_394) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse);
        _145 = &_146;
        _144 = core::fmt::rt::Argument::<'_>::new_debug::<&StreamJsonRpcResponse>(_145) -> [return: bb85, unwind: bb216];
    }

    bb85: {
        _143 = [move _144];
        _142 = &_143;
        _141 = _142 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _139 = Arguments::<'_>::new_v1(move _140, move _141) -> [return: bb86, unwind: bb216];
    }

    bb86: {
        _138 = &_139;
        _137 = _138 as &dyn tracing::Value (PointerCoercion(Unsize));
        _136 = std::option::Option::<&dyn tracing::Value>::Some(_137);
        _130 = (move _131, move _136);
        _129 = [move _130];
        _128 = &_129;
        _124 = FieldSet::value_set::<'_, [(&Field, std::option::Option<&dyn tracing::Value>); 1]>(_127, _128) -> [return: bb87, unwind: bb216];
    }

    bb87: {
        _123 = &_124;
        _122 = tracing::Event::<'_>::dispatch(_120, _123) -> [return: bb243, unwind: bb216];
    }

    bb88: {
        _147 = ();
        _360 = std::result::Result::<(), StreamError>::Ok(move _147);
        _395 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_395) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse)) -> [return: bb203, unwind: bb231];
    }

    bb89: {
        _150 = {closure@sdk/client/src/stream/streaming_client.rs:249:68: 249:71};
        _396 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_396) as variant#5).4: bool) = std::option::Option::<&SerdeValue>::map_or::<bool, {closure@sdk/client/src/stream/streaming_client.rs:249:68: 249:71}>(move _148, const false, move _150) -> [return: bb90, unwind: bb216];
    }

    bb90: {
        _397 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_397) as variant#5).5: diem_json_rpc_types::Id) = <diem_json_rpc_types::Id as Clone>::clone(_108) -> [return: bb91, unwind: bb216];
    }

    bb91: {
        _398 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _399 = deref_copy (((*_398) as variant#3).0: &mut stream::streaming_client::StreamingClient);
        _154 = &((*_399).1: std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>);
        _153 = <Arc<tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>> as Deref>::deref(move _154) -> [return: bb92, unwind: bb215];
    }

    bb92: {
        _152 = tokio::sync::RwLock::<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::read(_153) -> [return: bb93, unwind: bb215];
    }

    bb93: {
        _151 = <{async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::read::{closure#0}} as std::future::IntoFuture>::into_future(move _152) -> [return: bb94, unwind: bb215];
    }

    bb94: {
        _400 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_400) as variant#5).6: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}}) = move _151;
        goto -> bb95;
    }

    bb95: {
        _401 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _157 = &mut (((*_401) as variant#5).6: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}});
        _156 = Pin::<&mut {async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::read::{closure#0}}>::new_unchecked(_157) -> [return: bb96, unwind: bb214];
    }

    bb96: {
        _158 = _361;
        _155 = <{async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::read::{closure#0}} as futures::Future>::poll(move _156, _158) -> [return: bb97, unwind: bb214];
    }

    bb97: {
        _159 = discriminant(_155);
        switchInt(move _159) -> [0: bb99, 1: bb98, otherwise: bb9];
    }

    bb98: {
        _0 = Poll::<std::result::Result<(), StreamError>>::Pending;
        _404 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        discriminant((*_404)) = 5;
        return;
    }

    bb99: {
        _160 = move ((_155 as Ready).0: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>);
        _402 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_402) as variant#6).8: bool) = const true;
        _403 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_403) as variant#6).6: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>) = move _160;
        _405 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_405) as variant#5).6: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}})) -> [return: bb100, unwind: bb215];
    }

    bb100: {
        _406 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _163 = &(((*_406) as variant#6).6: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>);
        _162 = <tokio::sync::RwLockReadGuard<'_, HashMap<diem_json_rpc_types::Id, SubscriptionSender>> as Deref>::deref(move _163) -> [return: bb101, unwind: bb211];
    }

    bb101: {
        _407 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _164 = &(((*_407) as variant#5).5: diem_json_rpc_types::Id);
        _161 = HashMap::<diem_json_rpc_types::Id, SubscriptionSender>::get::<diem_json_rpc_types::Id>(_162, _164) -> [return: bb102, unwind: bb226];
    }

    bb102: {
        _165 = discriminant(_161);
        switchInt(move _165) -> [0: bb103, 1: bb104, otherwise: bb9];
    }

    bb103: {
        _408 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _283 = (((*_408) as variant#5).4: bool);
        switchInt(move _283) -> [0: bb170, otherwise: bb200];
    }

    bb104: {
        _166 = ((_161 as Some).0: &stream::streaming_client::SubscriptionSender);
        _169 = &((*_166).1: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _409 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _172 = &(((*_409) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse);
        _171 = <StreamJsonRpcResponse as Clone>::clone(move _172) -> [return: bb105, unwind: bb226];
    }

    bb105: {
        _170 = std::result::Result::<StreamJsonRpcResponse, StreamError>::Ok(move _171);
        _168 = tokio::sync::mpsc::Sender::<std::result::Result<StreamJsonRpcResponse, StreamError>>::send(move _169, move _170) -> [return: bb106, unwind: bb226];
    }

    bb106: {
        _167 = <{async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}} as std::future::IntoFuture>::into_future(move _168) -> [return: bb107, unwind: bb226];
    }

    bb107: {
        _410 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_410) as variant#6).7: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}}) = move _167;
        goto -> bb108;
    }

    bb108: {
        _411 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _175 = &mut (((*_411) as variant#6).7: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}});
        _174 = Pin::<&mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}}>::new_unchecked(_175) -> [return: bb109, unwind: bb208];
    }

    bb109: {
        _176 = _361;
        _173 = <{async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}} as futures::Future>::poll(move _174, _176) -> [return: bb110, unwind: bb208];
    }

    bb110: {
        _177 = discriminant(_173);
        switchInt(move _177) -> [0: bb112, 1: bb111, otherwise: bb9];
    }

    bb111: {
        _0 = Poll::<std::result::Result<(), StreamError>>::Pending;
        _413 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        discriminant((*_413)) = 6;
        return;
    }

    bb112: {
        _178 = move ((_173 as Ready).0: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>);
        _412 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_412) as variant#7).5: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>) = move _178;
        _414 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_414) as variant#6).7: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}})) -> [return: bb113, unwind: bb226];
    }

    bb113: {
        _415 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _179 = discriminant((((*_415) as variant#7).5: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>));
        switchInt(move _179) -> [0: bb114, 1: bb115, otherwise: bb9];
    }

    bb114: {
        _350 = const _;
        _349 = const _;
        _244 = <Level as PartialOrd<LevelFilter>>::le(_350, _349) -> [return: bb150, unwind: bb226];
    }

    bb115: {
        _416 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _417 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_416) as variant#7).6: tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>) = move (((((*_417) as variant#7).5: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>) as Err).0: tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _354 = const _;
        _353 = const _;
        _180 = <Level as PartialOrd<LevelFilter>>::le(_354, _353) -> [return: bb116, unwind: bb207];
    }

    bb116: {
        switchInt(move _180) -> [0: bb138, otherwise: bb117];
    }

    bb117: {
        _352 = const _;
        _183 = LevelFilter::current() -> [return: bb118, unwind: bb207];
    }

    bb118: {
        _182 = &_183;
        _181 = <Level as PartialOrd<LevelFilter>>::le(_352, move _182) -> [return: bb119, unwind: bb207];
    }

    bb119: {
        switchInt(move _181) -> [0: bb138, otherwise: bb120];
    }

    bb120: {
        _185 = const {alloc17: &MacroCallsite};
        _184 = MacroCallsite::interest(_185) -> [return: bb121, unwind: bb207];
    }

    bb121: {
        _187 = &_184;
        _186 = tracing::subscriber::Interest::is_never(move _187) -> [return: bb122, unwind: bb207];
    }

    bb122: {
        switchInt(move _186) -> [0: bb123, otherwise: bb138];
    }

    bb123: {
        _189 = const {alloc17: &MacroCallsite};
        _190 = move _184;
        _188 = MacroCallsite::is_enabled(_189, move _190) -> [return: bb124, unwind: bb207];
    }

    bb124: {
        switchInt(move _188) -> [0: bb138, otherwise: bb125];
    }

    bb125: {
        _192 = const {alloc17: &MacroCallsite};
        _191 = <MacroCallsite as tracing::Callsite>::metadata(_192) -> [return: bb126, unwind: bb207];
    }

    bb126: {
        _197 = tracing::Metadata::<'_>::fields(_191) -> [return: bb127, unwind: bb207];
    }

    bb127: {
        _196 = FieldSet::iter(_197) -> [return: bb128, unwind: bb207];
    }

    bb128: {
        _198 = tracing::Metadata::<'_>::fields(_191) -> [return: bb129, unwind: bb207];
    }

    bb129: {
        _205 = &mut _196;
        _204 = <tracing::field::Iter as Iterator>::next(move _205) -> [return: bb130, unwind: bb207];
    }

    bb130: {
        _206 = const "FieldSet corrupted (this is a bug)";
        _203 = std::option::Option::<Field>::expect(move _204, _206) -> [return: bb131, unwind: bb207];
    }

    bb131: {
        _202 = &_203;
        _351 = const _;
        _211 = _351 as &[&str] (PointerCoercion(Unsize));
        _418 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _217 = &(((*_418) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse);
        _216 = &_217;
        _215 = core::fmt::rt::Argument::<'_>::new_debug::<&StreamJsonRpcResponse>(_216) -> [return: bb132, unwind: bb207];
    }

    bb132: {
        _214 = [move _215];
        _213 = &_214;
        _212 = _213 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _210 = Arguments::<'_>::new_v1(move _211, move _212) -> [return: bb133, unwind: bb207];
    }

    bb133: {
        _209 = &_210;
        _208 = _209 as &dyn tracing::Value (PointerCoercion(Unsize));
        _207 = std::option::Option::<&dyn tracing::Value>::Some(_208);
        _201 = (move _202, move _207);
        _222 = &mut _196;
        _221 = <tracing::field::Iter as Iterator>::next(move _222) -> [return: bb134, unwind: bb207];
    }

    bb134: {
        _223 = const "FieldSet corrupted (this is a bug)";
        _220 = std::option::Option::<Field>::expect(move _221, _223) -> [return: bb135, unwind: bb207];
    }

    bb135: {
        _219 = &_220;
        _419 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _229 = &(((*_419) as variant#7).6: tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _228 = &_229;
        _227 = debug::<&&tokio::sync::mpsc::error::SendError<std::result::Result<StreamJsonRpcResponse, StreamError>>>(move _228) -> [return: bb136, unwind: bb207];
    }

    bb136: {
        _226 = &_227;
        _225 = _226 as &dyn tracing::Value (PointerCoercion(Unsize));
        _224 = std::option::Option::<&dyn tracing::Value>::Some(_225);
        _218 = (_219, move _224);
        _200 = [move _201, move _218];
        _199 = &_200;
        _195 = FieldSet::value_set::<'_, [(&Field, std::option::Option<&dyn tracing::Value>); 2]>(_198, _199) -> [return: bb137, unwind: bb207];
    }

    bb137: {
        _194 = &_195;
        _193 = tracing::Event::<'_>::dispatch(_191, _194) -> [return: bb244, unwind: bb207];
    }

    bb138: {
        _420 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_420) as variant#6).8: bool) = const false;
        _421 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _231 = move (((*_421) as variant#6).6: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>);
        _230 = std::mem::drop::<tokio::sync::RwLockReadGuard<'_, HashMap<diem_json_rpc_types::Id, SubscriptionSender>>>(move _231) -> [return: bb139, unwind: bb207];
    }

    bb139: {
        _422 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _232 = (((*_422) as variant#5).4: bool);
        switchInt(move _232) -> [0: bb140, otherwise: bb149];
    }

    bb140: {
        _423 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _424 = deref_copy (((*_423) as variant#3).0: &mut stream::streaming_client::StreamingClient);
        _425 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _236 = &(((*_425) as variant#5).5: diem_json_rpc_types::Id);
        _235 = StreamingClient::send_unsubscribe(_424, _236) -> [return: bb141, unwind: bb207];
    }

    bb141: {
        _234 = <{async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6} as std::future::IntoFuture>::into_future(move _235) -> [return: bb142, unwind: bb207];
    }

    bb142: {
        _426 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_426) as variant#7).7: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6}) = move _234;
        goto -> bb143;
    }

    bb143: {
        _427 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _239 = &mut (((*_427) as variant#7).7: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        _238 = Pin::<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6}>::new_unchecked(_239) -> [return: bb144, unwind: bb206];
    }

    bb144: {
        _240 = _361;
        _237 = <{async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6} as futures::Future>::poll(move _238, _240) -> [return: bb145, unwind: bb206];
    }

    bb145: {
        _241 = discriminant(_237);
        switchInt(move _241) -> [0: bb147, 1: bb146, otherwise: bb9];
    }

    bb146: {
        _0 = Poll::<std::result::Result<(), StreamError>>::Pending;
        _428 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        discriminant((*_428)) = 7;
        return;
    }

    bb147: {
        _242 = move ((_237 as Ready).0: std::result::Result<(), error::StreamError>);
        _233 = move _242;
        _429 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_429) as variant#7).7: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6})) -> [return: bb148, unwind: bb207];
    }

    bb148: {
        drop(_233) -> [return: bb149, unwind: bb207];
    }

    bb149: {
        _243 = ();
        _360 = std::result::Result::<(), StreamError>::Ok(move _243);
        _430 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_430) as variant#7).6: tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>)) -> [return: bb223, unwind: bb226];
    }

    bb150: {
        switchInt(move _244) -> [0: bb169, otherwise: bb151];
    }

    bb151: {
        _348 = const _;
        _247 = LevelFilter::current() -> [return: bb152, unwind: bb226];
    }

    bb152: {
        _246 = &_247;
        _245 = <Level as PartialOrd<LevelFilter>>::le(_348, move _246) -> [return: bb153, unwind: bb226];
    }

    bb153: {
        switchInt(move _245) -> [0: bb169, otherwise: bb154];
    }

    bb154: {
        _249 = const {alloc18: &MacroCallsite};
        _248 = MacroCallsite::interest(_249) -> [return: bb155, unwind: bb226];
    }

    bb155: {
        _251 = &_248;
        _250 = tracing::subscriber::Interest::is_never(move _251) -> [return: bb156, unwind: bb226];
    }

    bb156: {
        switchInt(move _250) -> [0: bb157, otherwise: bb169];
    }

    bb157: {
        _253 = const {alloc18: &MacroCallsite};
        _254 = move _248;
        _252 = MacroCallsite::is_enabled(_253, move _254) -> [return: bb158, unwind: bb226];
    }

    bb158: {
        switchInt(move _252) -> [0: bb169, otherwise: bb159];
    }

    bb159: {
        _256 = const {alloc18: &MacroCallsite};
        _255 = <MacroCallsite as tracing::Callsite>::metadata(_256) -> [return: bb160, unwind: bb226];
    }

    bb160: {
        _261 = tracing::Metadata::<'_>::fields(_255) -> [return: bb161, unwind: bb226];
    }

    bb161: {
        _260 = FieldSet::iter(_261) -> [return: bb162, unwind: bb226];
    }

    bb162: {
        _262 = tracing::Metadata::<'_>::fields(_255) -> [return: bb163, unwind: bb226];
    }

    bb163: {
        _269 = &mut _260;
        _268 = <tracing::field::Iter as Iterator>::next(move _269) -> [return: bb164, unwind: bb226];
    }

    bb164: {
        _270 = const "FieldSet corrupted (this is a bug)";
        _267 = std::option::Option::<Field>::expect(move _268, _270) -> [return: bb165, unwind: bb226];
    }

    bb165: {
        _266 = &_267;
        _347 = const _;
        _275 = _347 as &[&str] (PointerCoercion(Unsize));
        _431 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _281 = &(((*_431) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse);
        _280 = &_281;
        _279 = core::fmt::rt::Argument::<'_>::new_debug::<&StreamJsonRpcResponse>(_280) -> [return: bb166, unwind: bb226];
    }

    bb166: {
        _278 = [move _279];
        _277 = &_278;
        _276 = _277 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _274 = Arguments::<'_>::new_v1(move _275, move _276) -> [return: bb167, unwind: bb226];
    }

    bb167: {
        _273 = &_274;
        _272 = _273 as &dyn tracing::Value (PointerCoercion(Unsize));
        _271 = std::option::Option::<&dyn tracing::Value>::Some(_272);
        _265 = (move _266, move _271);
        _264 = [move _265];
        _263 = &_264;
        _259 = FieldSet::value_set::<'_, [(&Field, std::option::Option<&dyn tracing::Value>); 1]>(_262, _263) -> [return: bb168, unwind: bb226];
    }

    bb168: {
        _258 = &_259;
        _257 = tracing::Event::<'_>::dispatch(_255, _258) -> [return: bb245, unwind: bb226];
    }

    bb169: {
        _282 = ();
        _360 = std::result::Result::<(), StreamError>::Ok(move _282);
        goto -> bb223;
    }

    bb170: {
        _346 = const _;
        _345 = const _;
        _284 = <Level as PartialOrd<LevelFilter>>::le(_346, _345) -> [return: bb171, unwind: bb226];
    }

    bb171: {
        switchInt(move _284) -> [0: bb190, otherwise: bb172];
    }

    bb172: {
        _344 = const _;
        _287 = LevelFilter::current() -> [return: bb173, unwind: bb226];
    }

    bb173: {
        _286 = &_287;
        _285 = <Level as PartialOrd<LevelFilter>>::le(_344, move _286) -> [return: bb174, unwind: bb226];
    }

    bb174: {
        switchInt(move _285) -> [0: bb190, otherwise: bb175];
    }

    bb175: {
        _289 = const {alloc19: &MacroCallsite};
        _288 = MacroCallsite::interest(_289) -> [return: bb176, unwind: bb226];
    }

    bb176: {
        _291 = &_288;
        _290 = tracing::subscriber::Interest::is_never(move _291) -> [return: bb177, unwind: bb226];
    }

    bb177: {
        switchInt(move _290) -> [0: bb178, otherwise: bb190];
    }

    bb178: {
        _293 = const {alloc19: &MacroCallsite};
        _294 = move _288;
        _292 = MacroCallsite::is_enabled(_293, move _294) -> [return: bb179, unwind: bb226];
    }

    bb179: {
        switchInt(move _292) -> [0: bb190, otherwise: bb180];
    }

    bb180: {
        _296 = const {alloc19: &MacroCallsite};
        _295 = <MacroCallsite as tracing::Callsite>::metadata(_296) -> [return: bb181, unwind: bb226];
    }

    bb181: {
        _301 = tracing::Metadata::<'_>::fields(_295) -> [return: bb182, unwind: bb226];
    }

    bb182: {
        _300 = FieldSet::iter(_301) -> [return: bb183, unwind: bb226];
    }

    bb183: {
        _302 = tracing::Metadata::<'_>::fields(_295) -> [return: bb184, unwind: bb226];
    }

    bb184: {
        _309 = &mut _300;
        _308 = <tracing::field::Iter as Iterator>::next(move _309) -> [return: bb185, unwind: bb226];
    }

    bb185: {
        _310 = const "FieldSet corrupted (this is a bug)";
        _307 = std::option::Option::<Field>::expect(move _308, _310) -> [return: bb186, unwind: bb226];
    }

    bb186: {
        _306 = &_307;
        _343 = const _;
        _315 = _343 as &[&str] (PointerCoercion(Unsize));
        _432 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _321 = &(((*_432) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse);
        _320 = &_321;
        _319 = core::fmt::rt::Argument::<'_>::new_debug::<&StreamJsonRpcResponse>(_320) -> [return: bb187, unwind: bb226];
    }

    bb187: {
        _318 = [move _319];
        _317 = &_318;
        _316 = _317 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _314 = Arguments::<'_>::new_v1(move _315, move _316) -> [return: bb188, unwind: bb226];
    }

    bb188: {
        _313 = &_314;
        _312 = _313 as &dyn tracing::Value (PointerCoercion(Unsize));
        _311 = std::option::Option::<&dyn tracing::Value>::Some(_312);
        _305 = (move _306, move _311);
        _304 = [move _305];
        _303 = &_304;
        _299 = FieldSet::value_set::<'_, [(&Field, std::option::Option<&dyn tracing::Value>); 1]>(_302, _303) -> [return: bb189, unwind: bb226];
    }

    bb189: {
        _298 = &_299;
        _297 = tracing::Event::<'_>::dispatch(_295, _298) -> [return: bb246, unwind: bb226];
    }

    bb190: {
        _433 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_433) as variant#6).8: bool) = const false;
        _434 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _323 = move (((*_434) as variant#6).6: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>);
        _322 = std::mem::drop::<tokio::sync::RwLockReadGuard<'_, HashMap<diem_json_rpc_types::Id, SubscriptionSender>>>(move _323) -> [return: bb191, unwind: bb226];
    }

    bb191: {
        _435 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _436 = deref_copy (((*_435) as variant#3).0: &mut stream::streaming_client::StreamingClient);
        _437 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _327 = &(((*_437) as variant#5).5: diem_json_rpc_types::Id);
        _326 = StreamingClient::send_unsubscribe(_436, _327) -> [return: bb192, unwind: bb226];
    }

    bb192: {
        _325 = <{async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6} as std::future::IntoFuture>::into_future(move _326) -> [return: bb193, unwind: bb226];
    }

    bb193: {
        _438 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_438) as variant#8).5: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6}) = move _325;
        goto -> bb194;
    }

    bb194: {
        _439 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _330 = &mut (((*_439) as variant#8).5: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6});
        _329 = Pin::<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6}>::new_unchecked(_330) -> [return: bb195, unwind: bb205];
    }

    bb195: {
        _331 = _361;
        _328 = <{async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6} as futures::Future>::poll(move _329, _331) -> [return: bb196, unwind: bb205];
    }

    bb196: {
        _332 = discriminant(_328);
        switchInt(move _332) -> [0: bb198, 1: bb197, otherwise: bb9];
    }

    bb197: {
        _0 = Poll::<std::result::Result<(), StreamError>>::Pending;
        _440 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        discriminant((*_440)) = 8;
        return;
    }

    bb198: {
        _333 = move ((_328 as Ready).0: std::result::Result<(), error::StreamError>);
        _324 = move _333;
        _441 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_441) as variant#8).5: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6})) -> [return: bb199, unwind: bb226];
    }

    bb199: {
        drop(_324) -> [return: bb200, unwind: bb226];
    }

    bb200: {
        _334 = ();
        _360 = std::result::Result::<(), StreamError>::Ok(move _334);
        goto -> bb223;
    }

    bb201: {
        _442 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_442) as variant#6).8: bool) = const false;
        _443 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_443) as variant#5).5: diem_json_rpc_types::Id)) -> [return: bb202, unwind: bb210];
    }

    bb202: {
        _444 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_444) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse)) -> [return: bb224, unwind: bb227];
    }

    bb203: {
        _446 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_446) as variant#5).7: bool) = const false;
        goto -> bb204;
    }

    bb204: {
        _0 = Poll::<std::result::Result<(), StreamError>>::Ready(move _360);
        _447 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        discriminant((*_447)) = 1;
        return;
    }

    bb205 (cleanup): {
        _448 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_448) as variant#8).5: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6})) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb206 (cleanup): {
        _449 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_449) as variant#7).7: {async fn body@sdk/client/src/stream/streaming_client.rs:164:82: 173:6})) -> [return: bb207, unwind terminate(cleanup)];
    }

    bb207 (cleanup): {
        _450 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_450) as variant#7).6: tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>)) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb208 (cleanup): {
        _451 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_451) as variant#6).7: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}})) -> [return: bb226, unwind terminate(cleanup)];
    }

    bb209 (cleanup): {
        _452 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_452) as variant#6).8: bool) = const false;
        _453 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_453) as variant#5).5: diem_json_rpc_types::Id)) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb210 (cleanup): {
        _454 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_454) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse)) -> [return: bb227, unwind terminate(cleanup)];
    }

    bb211 (cleanup): {
        _456 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_456) as variant#6).6: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>)) -> [return: bb212, unwind terminate(cleanup)];
    }

    bb212 (cleanup): {
        _457 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_457) as variant#6).8: bool) = const false;
        _458 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_458) as variant#5).5: diem_json_rpc_types::Id)) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        _459 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_459) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse)) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb214 (cleanup): {
        _461 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_461) as variant#5).6: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}})) -> [return: bb215, unwind terminate(cleanup)];
    }

    bb215 (cleanup): {
        _462 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_462) as variant#6).8: bool) = const false;
        _463 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_463) as variant#5).5: diem_json_rpc_types::Id)) -> [return: bb216, unwind terminate(cleanup)];
    }

    bb216 (cleanup): {
        _464 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_464) as variant#5).3: diem_json_rpc_types::stream::response::StreamJsonRpcResponse)) -> [return: bb231, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        drop(_67) -> [return: bb231, unwind terminate(cleanup)];
    }

    bb218 (cleanup): {
        _465 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_465) as variant#4).2: {async fn body@tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::recv::{closure#0}})) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        _466 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_466) as variant#4).1: tokio::sync::RwLockWriteGuard<'_, tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>)) -> [return: bb221, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        _467 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_467) as variant#3).1: {async fn body@tokio::sync::RwLock<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>::write::{closure#0}})) -> [return: bb221, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        _468 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_468) as variant#5).7: bool) = const false;
        goto -> bb232;
    }

    bb222: {
        _469 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_469) as variant#6).6: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>)) -> [return: bb201, unwind: bb209];
    }

    bb223: {
        _470 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        switchInt((((*_470) as variant#6).8: bool)) -> [0: bb201, otherwise: bb222];
    }

    bb224: {
        _445 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_445) as variant#5).7: bool) = const false;
        goto -> bb204;
    }

    bb225 (cleanup): {
        _471 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((*_471) as variant#6).6: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>)) -> [return: bb209, unwind terminate(cleanup)];
    }

    bb226 (cleanup): {
        _472 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        switchInt((((*_472) as variant#6).8: bool)) -> [0: bb209, otherwise: bb225];
    }

    bb227 (cleanup): {
        _455 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_455) as variant#5).7: bool) = const false;
        goto -> bb232;
    }

    bb228 (cleanup): {
        _460 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        (((*_460) as variant#5).7: bool) = const false;
        goto -> bb232;
    }

    bb229 (cleanup): {
        _474 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        switchInt((((*_474) as variant#5).7: bool)) -> [0: bb221, otherwise: bb230];
    }

    bb230 (cleanup): {
        _473 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        drop((((((*_473) as variant#5).1: std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>) as Some).0: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>)) -> [return: bb221, unwind terminate(cleanup)];
    }

    bb231 (cleanup): {
        _475 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _359 = discriminant((((*_475) as variant#5).1: std::option::Option<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>));
        switchInt(move _359) -> [1: bb229, otherwise: bb221];
    }

    bb232 (cleanup): {
        _476 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        discriminant((*_476)) = 2;
        resume;
    }

    bb233: {
        _361 = move _2;
        goto -> bb5;
    }

    bb234: {
        _361 = move _2;
        goto -> bb15;
    }

    bb235: {
        _361 = move _2;
        goto -> bb95;
    }

    bb236: {
        _361 = move _2;
        goto -> bb108;
    }

    bb237: {
        _361 = move _2;
        goto -> bb143;
    }

    bb238: {
        _361 = move _2;
        goto -> bb194;
    }

    bb239: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb239, unwind continue];
    }

    bb240: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb240, unwind continue];
    }

    bb241: {
        goto -> bb41;
    }

    bb242: {
        goto -> bb66;
    }

    bb243: {
        goto -> bb88;
    }

    bb244: {
        goto -> bb138;
    }

    bb245: {
        goto -> bb169;
    }

    bb246: {
        goto -> bb190;
    }
}

alloc19 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc35<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc35 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 03 00 00 00 00 00 00 00 01 00 00 00 14 01 00 00 │ ................
    0x10 │ ╾───alloc2689<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2677<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2685<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc19───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2681<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2678<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2689 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 37 36                                        │ 276
}

alloc2677 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2685 (size: 16, align: 8) {
    ╾───alloc2684<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2684 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2681 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2678 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

alloc18 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc34<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc34 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 0c 01 00 00 │ ................
    0x10 │ ╾───alloc2652<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2640<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2648<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc18───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2644<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2641<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2652 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 36 38                                        │ 268
}

alloc2640 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2648 (size: 16, align: 8) {
    ╾───alloc2647<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2647 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2644 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2641 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

alloc17 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc33<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc33 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 03 00 00 00 00 00 00 00 01 00 00 00 03 01 00 00 │ ................
    0x10 │ ╾───alloc2615<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2602<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2610<imm>────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc17───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2606<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2603<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2615 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 35 39                                        │ 259
}

alloc2602 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2610 (size: 32, align: 8) {
    0x00 │ ╾───alloc2609<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾───alloc2611<imm>────╼ 05 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2609 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2611 (size: 5, align: 1) {
    65 72 72 6f 72                                  │ error
}

alloc2606 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2603 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

alloc16 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc32<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc32 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 03 00 00 00 00 00 00 00 01 00 00 00 f3 00 00 00 │ ................
    0x10 │ ╾───alloc2577<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2565<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2573<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc16───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2569<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2566<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2577 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 34 33                                        │ 243
}

alloc2565 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2573 (size: 16, align: 8) {
    ╾───alloc2572<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2572 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2569 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2566 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

alloc15 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc31<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc31 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 03 00 00 00 00 00 00 00 01 00 00 00 ea 00 00 00 │ ................
    0x10 │ ╾───alloc2540<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2528<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2536<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc15───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2532<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2529<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2540 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 33 34                                        │ 234
}

alloc2528 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2536 (size: 16, align: 8) {
    ╾───alloc2535<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2535 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2532 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2529 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

alloc14 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc30<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc30 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 01 00 00 00 df 00 00 00 │ ................
    0x10 │ ╾───alloc2500<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2488<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2496<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc14───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2492<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2489<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2500 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 32 33                                        │ 223
}

alloc2488 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2496 (size: 16, align: 8) {
    ╾───alloc2495<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2495 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2492 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2489 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "StreamingClient received error on channel: "];
        _0 = &_1;
        return;
    }
}

promoted[1] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &LevelFilter = {
    let mut _0: &tracing::level_filters::LevelFilter;
    let mut _1: tracing::level_filters::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[4] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "StreamingClient got message without an ID: "];
        _0 = &_1;
        return;
    }
}

promoted[5] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &LevelFilter = {
    let mut _0: &tracing::level_filters::LevelFilter;
    let mut _1: tracing::level_filters::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "StreamingClient got message without subscription: "];
        _0 = &_1;
        return;
    }
}

promoted[9] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &LevelFilter = {
    let mut _0: &tracing::level_filters::LevelFilter;
    let mut _1: tracing::level_filters::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[11] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[12] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "StreamingClient forwarded message: "];
        _0 = &_1;
        return;
    }
}

promoted[13] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[14] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &LevelFilter = {
    let mut _0: &tracing::level_filters::LevelFilter;
    let mut _1: tracing::level_filters::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[15] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[16] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "StreamingClient could not forward message: "];
        _0 = &_1;
        return;
    }
}

promoted[17] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[18] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &LevelFilter = {
    let mut _0: &tracing::level_filters::LevelFilter;
    let mut _1: tracing::level_filters::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[19] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[20] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "StreamingClient got message: "];
        _0 = &_1;
        return;
    }
}

promoted[21] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[22] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &LevelFilter = {
    let mut _0: &tracing::level_filters::LevelFilter;
    let mut _1: tracing::level_filters::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[23] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE: MacroCallsite = {
    let mut _0: tracing::__macro_support::MacroCallsite;
    let mut _1: &tracing::Metadata<'_>;
    let _2: &tracing::Metadata<'_>;
    let _3: &tracing::Metadata<'_>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc30: &tracing::Metadata<'_>};
        _2 = &(*_3);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = MacroCallsite::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc30 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 01 00 00 00 df 00 00 00 │ ................
    0x10 │ ╾───alloc2500<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2488<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2496<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc14───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2492<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2489<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2500 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 32 33                                        │ 223
}

alloc2488 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2496 (size: 16, align: 8) {
    ╾───alloc2495<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2495 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc14 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc30<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2492 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2489 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE::META: tracing::Metadata<'_> = {
    let mut _0: tracing::Metadata<'_>;
    let mut _1: &str;
    let _2: &str;
    let mut _3: std::option::Option<&str>;
    let mut _4: &str;
    let _5: &str;
    let mut _6: std::option::Option<u32>;
    let mut _7: std::option::Option<&str>;
    let mut _8: &str;
    let _9: &str;
    let mut _10: tracing::field::FieldSet;
    let mut _11: &[&str];
    let mut _12: &[&str; 1];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: tracing::callsite::Identifier;
    let mut _16: &dyn tracing::Callsite;
    let mut _17: &tracing::__macro_support::MacroCallsite;
    let _18: &tracing::__macro_support::MacroCallsite;
    let _19: &tracing::__macro_support::MacroCallsite;
    let mut _20: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const "diem_client::stream::streaming_client";
        _1 = &(*_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "sdk/client/src/stream/streaming_client.rs";
        _4 = &(*_5);
        _3 = std::option::Option::<&str>::Some(move _4);
        StorageDead(_4);
        StorageLive(_6);
        _6 = std::option::Option::<u32>::Some(const 223_u32);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "diem_client::stream::streaming_client";
        _8 = &(*_9);
        _7 = std::option::Option::<&str>::Some(move _8);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _20 = const _;
        _13 = &(*_20);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const {alloc14: &MacroCallsite};
        _18 = &(*_19);
        _17 = &(*_18);
        _16 = move _17 as &dyn tracing::Callsite (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = tracing::callsite::Identifier(move _16);
        StorageDead(_16);
        ConstEvalCounter;
        _10 = FieldSet::new(move _11, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_11);
        ConstEvalCounter;
        _0 = tracing::Metadata::<'_>::new(const "event sdk/client/src/stream/streaming_client.rs:223", move _1, const _, move _3, move _6, move _7, move _10, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}

alloc14 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc30<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc30 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 01 00 00 00 df 00 00 00 │ ................
    0x10 │ ╾───alloc2500<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2488<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2496<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc14───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2492<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2489<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2500 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 32 33                                        │ 223
}

alloc2488 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2496 (size: 16, align: 8) {
    ╾───alloc2495<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2495 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2492 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2489 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE::META: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "message"];
        _0 = &_1;
        return;
    }
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE: MacroCallsite = {
    let mut _0: tracing::__macro_support::MacroCallsite;
    let mut _1: &tracing::Metadata<'_>;
    let _2: &tracing::Metadata<'_>;
    let _3: &tracing::Metadata<'_>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc31: &tracing::Metadata<'_>};
        _2 = &(*_3);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = MacroCallsite::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc31 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 03 00 00 00 00 00 00 00 01 00 00 00 ea 00 00 00 │ ................
    0x10 │ ╾───alloc2540<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2528<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2536<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc15───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2532<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2529<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2540 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 33 34                                        │ 234
}

alloc2528 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2536 (size: 16, align: 8) {
    ╾───alloc2535<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2535 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc15 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc31<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2532 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2529 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE::META: tracing::Metadata<'_> = {
    let mut _0: tracing::Metadata<'_>;
    let mut _1: &str;
    let _2: &str;
    let mut _3: std::option::Option<&str>;
    let mut _4: &str;
    let _5: &str;
    let mut _6: std::option::Option<u32>;
    let mut _7: std::option::Option<&str>;
    let mut _8: &str;
    let _9: &str;
    let mut _10: tracing::field::FieldSet;
    let mut _11: &[&str];
    let mut _12: &[&str; 1];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: tracing::callsite::Identifier;
    let mut _16: &dyn tracing::Callsite;
    let mut _17: &tracing::__macro_support::MacroCallsite;
    let _18: &tracing::__macro_support::MacroCallsite;
    let _19: &tracing::__macro_support::MacroCallsite;
    let mut _20: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const "diem_client::stream::streaming_client";
        _1 = &(*_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "sdk/client/src/stream/streaming_client.rs";
        _4 = &(*_5);
        _3 = std::option::Option::<&str>::Some(move _4);
        StorageDead(_4);
        StorageLive(_6);
        _6 = std::option::Option::<u32>::Some(const 234_u32);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "diem_client::stream::streaming_client";
        _8 = &(*_9);
        _7 = std::option::Option::<&str>::Some(move _8);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _20 = const _;
        _13 = &(*_20);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const {alloc15: &MacroCallsite};
        _18 = &(*_19);
        _17 = &(*_18);
        _16 = move _17 as &dyn tracing::Callsite (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = tracing::callsite::Identifier(move _16);
        StorageDead(_16);
        ConstEvalCounter;
        _10 = FieldSet::new(move _11, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_11);
        ConstEvalCounter;
        _0 = tracing::Metadata::<'_>::new(const "event sdk/client/src/stream/streaming_client.rs:234", move _1, const _, move _3, move _6, move _7, move _10, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}

alloc15 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc31<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc31 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 03 00 00 00 00 00 00 00 01 00 00 00 ea 00 00 00 │ ................
    0x10 │ ╾───alloc2540<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2528<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2536<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc15───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2532<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2529<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2540 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 33 34                                        │ 234
}

alloc2528 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2536 (size: 16, align: 8) {
    ╾───alloc2535<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2535 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2532 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2529 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE::META: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "message"];
        _0 = &_1;
        return;
    }
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE: MacroCallsite = {
    let mut _0: tracing::__macro_support::MacroCallsite;
    let mut _1: &tracing::Metadata<'_>;
    let _2: &tracing::Metadata<'_>;
    let _3: &tracing::Metadata<'_>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc32: &tracing::Metadata<'_>};
        _2 = &(*_3);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = MacroCallsite::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc32 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 03 00 00 00 00 00 00 00 01 00 00 00 f3 00 00 00 │ ................
    0x10 │ ╾───alloc2577<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2565<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2573<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc16───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2569<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2566<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2577 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 34 33                                        │ 243
}

alloc2565 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2573 (size: 16, align: 8) {
    ╾───alloc2572<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2572 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc16 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc32<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2569 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2566 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE::META: tracing::Metadata<'_> = {
    let mut _0: tracing::Metadata<'_>;
    let mut _1: &str;
    let _2: &str;
    let mut _3: std::option::Option<&str>;
    let mut _4: &str;
    let _5: &str;
    let mut _6: std::option::Option<u32>;
    let mut _7: std::option::Option<&str>;
    let mut _8: &str;
    let _9: &str;
    let mut _10: tracing::field::FieldSet;
    let mut _11: &[&str];
    let mut _12: &[&str; 1];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: tracing::callsite::Identifier;
    let mut _16: &dyn tracing::Callsite;
    let mut _17: &tracing::__macro_support::MacroCallsite;
    let _18: &tracing::__macro_support::MacroCallsite;
    let _19: &tracing::__macro_support::MacroCallsite;
    let mut _20: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const "diem_client::stream::streaming_client";
        _1 = &(*_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "sdk/client/src/stream/streaming_client.rs";
        _4 = &(*_5);
        _3 = std::option::Option::<&str>::Some(move _4);
        StorageDead(_4);
        StorageLive(_6);
        _6 = std::option::Option::<u32>::Some(const 243_u32);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "diem_client::stream::streaming_client";
        _8 = &(*_9);
        _7 = std::option::Option::<&str>::Some(move _8);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _20 = const _;
        _13 = &(*_20);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const {alloc16: &MacroCallsite};
        _18 = &(*_19);
        _17 = &(*_18);
        _16 = move _17 as &dyn tracing::Callsite (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = tracing::callsite::Identifier(move _16);
        StorageDead(_16);
        ConstEvalCounter;
        _10 = FieldSet::new(move _11, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_11);
        ConstEvalCounter;
        _0 = tracing::Metadata::<'_>::new(const "event sdk/client/src/stream/streaming_client.rs:243", move _1, const _, move _3, move _6, move _7, move _10, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}

alloc16 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc32<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc32 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 03 00 00 00 00 00 00 00 01 00 00 00 f3 00 00 00 │ ................
    0x10 │ ╾───alloc2577<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2565<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2573<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc16───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2569<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2566<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2577 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 34 33                                        │ 243
}

alloc2565 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2573 (size: 16, align: 8) {
    ╾───alloc2572<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2572 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2569 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2566 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE::META: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "message"];
        _0 = &_1;
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::{closure#0}(_1: {closure@sdk/client/src/stream/streaming_client.rs:249:68: 249:71}, _2: &SerdeValue) -> bool {
    debug v => _2;
    let mut _0: bool;
    let mut _3: &std::option::Option<&serde_json::Value>;
    let _4: std::option::Option<&serde_json::Value>;

    bb0: {
        _4 = SerdeValue::get::<&str>(_2, const "unsubscribe") -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _0 = std::option::Option::<&SerdeValue>::is_some(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE: MacroCallsite = {
    let mut _0: tracing::__macro_support::MacroCallsite;
    let mut _1: &tracing::Metadata<'_>;
    let _2: &tracing::Metadata<'_>;
    let _3: &tracing::Metadata<'_>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc33: &tracing::Metadata<'_>};
        _2 = &(*_3);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = MacroCallsite::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc33 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 03 00 00 00 00 00 00 00 01 00 00 00 03 01 00 00 │ ................
    0x10 │ ╾───alloc2615<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2602<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2610<imm>────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc17───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2606<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2603<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2615 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 35 39                                        │ 259
}

alloc2602 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2610 (size: 32, align: 8) {
    0x00 │ ╾───alloc2609<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾───alloc2611<imm>────╼ 05 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2609 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2611 (size: 5, align: 1) {
    65 72 72 6f 72                                  │ error
}

alloc17 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc33<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2606 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2603 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE::META: tracing::Metadata<'_> = {
    let mut _0: tracing::Metadata<'_>;
    let mut _1: &str;
    let _2: &str;
    let mut _3: std::option::Option<&str>;
    let mut _4: &str;
    let _5: &str;
    let mut _6: std::option::Option<u32>;
    let mut _7: std::option::Option<&str>;
    let mut _8: &str;
    let _9: &str;
    let mut _10: tracing::field::FieldSet;
    let mut _11: &[&str];
    let mut _12: &[&str; 2];
    let _13: &[&str; 2];
    let _14: [&str; 2];
    let mut _15: tracing::callsite::Identifier;
    let mut _16: &dyn tracing::Callsite;
    let mut _17: &tracing::__macro_support::MacroCallsite;
    let _18: &tracing::__macro_support::MacroCallsite;
    let _19: &tracing::__macro_support::MacroCallsite;
    let mut _20: &[&str; 2];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const "diem_client::stream::streaming_client";
        _1 = &(*_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "sdk/client/src/stream/streaming_client.rs";
        _4 = &(*_5);
        _3 = std::option::Option::<&str>::Some(move _4);
        StorageDead(_4);
        StorageLive(_6);
        _6 = std::option::Option::<u32>::Some(const 259_u32);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "diem_client::stream::streaming_client";
        _8 = &(*_9);
        _7 = std::option::Option::<&str>::Some(move _8);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _20 = const _;
        _13 = &(*_20);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const {alloc17: &MacroCallsite};
        _18 = &(*_19);
        _17 = &(*_18);
        _16 = move _17 as &dyn tracing::Callsite (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = tracing::callsite::Identifier(move _16);
        StorageDead(_16);
        ConstEvalCounter;
        _10 = FieldSet::new(move _11, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_11);
        ConstEvalCounter;
        _0 = tracing::Metadata::<'_>::new(const "event sdk/client/src/stream/streaming_client.rs:259", move _1, const _, move _3, move _6, move _7, move _10, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}

alloc17 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc33<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc33 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 03 00 00 00 00 00 00 00 01 00 00 00 03 01 00 00 │ ................
    0x10 │ ╾───alloc2615<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2602<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2610<imm>────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc17───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2606<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2603<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2615 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 35 39                                        │ 259
}

alloc2602 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2610 (size: 32, align: 8) {
    0x00 │ ╾───alloc2609<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
    0x10 │ ╾───alloc2611<imm>────╼ 05 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2609 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2611 (size: 5, align: 1) {
    65 72 72 6f 72                                  │ error
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2606 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2603 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE::META: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "message", const "error"];
        _0 = &_1;
        return;
    }
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE: MacroCallsite = {
    let mut _0: tracing::__macro_support::MacroCallsite;
    let mut _1: &tracing::Metadata<'_>;
    let _2: &tracing::Metadata<'_>;
    let _3: &tracing::Metadata<'_>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc34: &tracing::Metadata<'_>};
        _2 = &(*_3);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = MacroCallsite::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc34 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 0c 01 00 00 │ ................
    0x10 │ ╾───alloc2652<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2640<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2648<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc18───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2644<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2641<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2652 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 36 38                                        │ 268
}

alloc2640 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2648 (size: 16, align: 8) {
    ╾───alloc2647<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2647 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc18 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc34<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2644 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2641 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE::META: tracing::Metadata<'_> = {
    let mut _0: tracing::Metadata<'_>;
    let mut _1: &str;
    let _2: &str;
    let mut _3: std::option::Option<&str>;
    let mut _4: &str;
    let _5: &str;
    let mut _6: std::option::Option<u32>;
    let mut _7: std::option::Option<&str>;
    let mut _8: &str;
    let _9: &str;
    let mut _10: tracing::field::FieldSet;
    let mut _11: &[&str];
    let mut _12: &[&str; 1];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: tracing::callsite::Identifier;
    let mut _16: &dyn tracing::Callsite;
    let mut _17: &tracing::__macro_support::MacroCallsite;
    let _18: &tracing::__macro_support::MacroCallsite;
    let _19: &tracing::__macro_support::MacroCallsite;
    let mut _20: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const "diem_client::stream::streaming_client";
        _1 = &(*_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "sdk/client/src/stream/streaming_client.rs";
        _4 = &(*_5);
        _3 = std::option::Option::<&str>::Some(move _4);
        StorageDead(_4);
        StorageLive(_6);
        _6 = std::option::Option::<u32>::Some(const 268_u32);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "diem_client::stream::streaming_client";
        _8 = &(*_9);
        _7 = std::option::Option::<&str>::Some(move _8);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _20 = const _;
        _13 = &(*_20);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const {alloc18: &MacroCallsite};
        _18 = &(*_19);
        _17 = &(*_18);
        _16 = move _17 as &dyn tracing::Callsite (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = tracing::callsite::Identifier(move _16);
        StorageDead(_16);
        ConstEvalCounter;
        _10 = FieldSet::new(move _11, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_11);
        ConstEvalCounter;
        _0 = tracing::Metadata::<'_>::new(const "event sdk/client/src/stream/streaming_client.rs:268", move _1, const _, move _3, move _6, move _7, move _10, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}

alloc18 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc34<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc34 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 0c 01 00 00 │ ................
    0x10 │ ╾───alloc2652<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2640<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2648<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc18───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2644<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2641<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2652 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 36 38                                        │ 268
}

alloc2640 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2648 (size: 16, align: 8) {
    ╾───alloc2647<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2647 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2644 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2641 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE::META: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "message"];
        _0 = &_1;
        return;
    }
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE: MacroCallsite = {
    let mut _0: tracing::__macro_support::MacroCallsite;
    let mut _1: &tracing::Metadata<'_>;
    let _2: &tracing::Metadata<'_>;
    let _3: &tracing::Metadata<'_>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc35: &tracing::Metadata<'_>};
        _2 = &(*_3);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = MacroCallsite::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc35 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 03 00 00 00 00 00 00 00 01 00 00 00 14 01 00 00 │ ................
    0x10 │ ╾───alloc2689<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2677<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2685<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc19───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2681<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2678<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2689 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 37 36                                        │ 276
}

alloc2677 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2685 (size: 16, align: 8) {
    ╾───alloc2684<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2684 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc19 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc35<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2681 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2678 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE::META: tracing::Metadata<'_> = {
    let mut _0: tracing::Metadata<'_>;
    let mut _1: &str;
    let _2: &str;
    let mut _3: std::option::Option<&str>;
    let mut _4: &str;
    let _5: &str;
    let mut _6: std::option::Option<u32>;
    let mut _7: std::option::Option<&str>;
    let mut _8: &str;
    let _9: &str;
    let mut _10: tracing::field::FieldSet;
    let mut _11: &[&str];
    let mut _12: &[&str; 1];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: tracing::callsite::Identifier;
    let mut _16: &dyn tracing::Callsite;
    let mut _17: &tracing::__macro_support::MacroCallsite;
    let _18: &tracing::__macro_support::MacroCallsite;
    let _19: &tracing::__macro_support::MacroCallsite;
    let mut _20: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const "diem_client::stream::streaming_client";
        _1 = &(*_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "sdk/client/src/stream/streaming_client.rs";
        _4 = &(*_5);
        _3 = std::option::Option::<&str>::Some(move _4);
        StorageDead(_4);
        StorageLive(_6);
        _6 = std::option::Option::<u32>::Some(const 276_u32);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "diem_client::stream::streaming_client";
        _8 = &(*_9);
        _7 = std::option::Option::<&str>::Some(move _8);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _20 = const _;
        _13 = &(*_20);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const {alloc19: &MacroCallsite};
        _18 = &(*_19);
        _17 = &(*_18);
        _16 = move _17 as &dyn tracing::Callsite (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = tracing::callsite::Identifier(move _16);
        StorageDead(_16);
        ConstEvalCounter;
        _10 = FieldSet::new(move _11, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_11);
        ConstEvalCounter;
        _0 = tracing::Metadata::<'_>::new(const "event sdk/client/src/stream/streaming_client.rs:276", move _1, const _, move _3, move _6, move _7, move _10, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}

alloc19 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc35<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc35 (static: StreamingClient::handle_next_message::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 03 00 00 00 00 00 00 00 01 00 00 00 14 01 00 00 │ ................
    0x10 │ ╾───alloc2689<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2677<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2685<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc19───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2681<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2678<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2689 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 32 37 36                                        │ 276
}

alloc2677 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2685 (size: 16, align: 8) {
    ╾───alloc2684<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2684 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2681 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2678 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::handle_next_message::{closure#0}::CALLSITE::META: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "message"];
        _0 = &_1;
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::register_subscription(_1: &StreamingClient, _2: diem_json_rpc_types::Id) -> {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6} {
    debug self => _1;
    debug id => _2;
    let mut _0: {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/streaming_client.rs:288:92: 301:6 (#0)} { self: _1, id: move _2 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::register_subscription::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>, StreamError>> {
    debug _task_context => _48;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6})).0: &stream::streaming_client::StreamingClient);
    debug id => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6})).1: diem_json_rpc_types::Id);
    let mut _0: std::task::Poll<std::result::Result<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>, error::StreamError>>;
    let mut _3: bool;
    let mut _4: &std::option::Option<&stream::streaming_client::SubscriptionSender>;
    let _5: std::option::Option<&stream::streaming_client::SubscriptionSender>;
    let _6: &std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>;
    let mut _7: &tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let _8: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _9: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}};
    let mut _10: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}};
    let _11: &tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _12: &std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let mut _13: std::task::Poll<tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let mut _14: std::pin::Pin<&mut {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}}>;
    let mut _15: &mut {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}};
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: isize;
    let _19: &diem_json_rpc_types::Id;
    let mut _20: error::StreamError;
    let mut _21: std::option::Option<error::StreamError>;
    let mut _22: (tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>, tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
    let mut _23: usize;
    let mut _24: &stream::streaming_client::StreamingClientConfig;
    let mut _25: &std::sync::Arc<stream::streaming_client::StreamingClientConfig>;
    let _26: std::option::Option<stream::streaming_client::SubscriptionSender>;
    let mut _27: &mut std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>;
    let mut _28: &mut tokio::sync::RwLockWriteGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _29: tokio::sync::RwLockWriteGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _30: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}};
    let mut _31: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}};
    let _32: &tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _33: &std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let mut _34: std::task::Poll<tokio::sync::RwLockWriteGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let mut _35: std::pin::Pin<&mut {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}}>;
    let mut _36: &mut {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}};
    let mut _37: &mut std::task::Context<'_>;
    let mut _38: isize;
    let mut _40: diem_json_rpc_types::Id;
    let mut _41: &diem_json_rpc_types::Id;
    let mut _42: stream::streaming_client::SubscriptionSender;
    let mut _43: diem_json_rpc_types::Id;
    let mut _44: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _45: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _46: bool;
    let mut _47: std::result::Result<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>, error::StreamError>;
    let mut _48: &mut std::task::Context<'_>;
    let mut _49: u32;
    let mut _50: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _51: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _52: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _53: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _54: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _55: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _56: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _57: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _58: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _59: &stream::streaming_client::StreamingClient;
    let mut _60: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _61: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _62: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _63: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _64: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _65: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _66: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _67: &stream::streaming_client::StreamingClient;
    let mut _68: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _69: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _70: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _71: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _72: &stream::streaming_client::StreamingClient;
    let mut _73: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _74: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _75: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _76: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _77: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _78: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _79: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _80: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _81: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _82: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _83: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _84: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _85: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _86: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _87: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _88: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _89: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _90: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _91: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _92: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _93: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _94: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _95: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _96: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6})) as variant#3).0: &stream::streaming_client::StreamingClient);
        scope 2 {
            debug id => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6})) as variant#3).1: diem_json_rpc_types::Id);
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6})) as variant#3).2: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}});
                let _18: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
                scope 4 {
                }
                scope 5 {
                    debug result => _18;
                }
            }
            scope 6 {
                debug sender => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6})) as variant#4).1: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
                debug receiver => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6})) as variant#4).2: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
                scope 7 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6})) as variant#4).3: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}});
                    let _39: tokio::sync::RwLockWriteGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
                    scope 8 {
                    }
                    scope 9 {
                        debug result => _39;
                    }
                }
            }
        }
    }

    bb0: {
        _50 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _49 = discriminant((*_50));
        switchInt(move _49) -> [0: bb1, 1: bb56, 2: bb55, 3: bb53, 4: bb54, otherwise: bb9];
    }

    bb1: {
        _48 = move _2;
        _51 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_51) as variant#3).3: bool) = const false;
        _52 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_52) as variant#4).4: bool) = const false;
        _46 = const false;
        _53 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _54 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_53) as variant#3).0: &stream::streaming_client::StreamingClient) = ((*_54).0: &stream::streaming_client::StreamingClient);
        _55 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_55) as variant#3).3: bool) = const true;
        _56 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _57 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_56) as variant#3).1: diem_json_rpc_types::Id) = move ((*_57).1: diem_json_rpc_types::Id);
        _58 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _59 = deref_copy (((*_58) as variant#3).0: &stream::streaming_client::StreamingClient);
        _12 = &((*_59).1: std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>);
        _11 = <Arc<tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>> as Deref>::deref(move _12) -> [return: bb2, unwind: bb52];
    }

    bb2: {
        _10 = tokio::sync::RwLock::<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::read(_11) -> [return: bb3, unwind: bb52];
    }

    bb3: {
        _9 = <{async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::read::{closure#0}} as std::future::IntoFuture>::into_future(move _10) -> [return: bb4, unwind: bb52];
    }

    bb4: {
        _60 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_60) as variant#3).2: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}}) = move _9;
        goto -> bb5;
    }

    bb5: {
        _61 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _15 = &mut (((*_61) as variant#3).2: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}});
        _14 = Pin::<&mut {async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::read::{closure#0}}>::new_unchecked(_15) -> [return: bb6, unwind: bb47];
    }

    bb6: {
        _16 = _48;
        _13 = <{async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::read::{closure#0}} as futures::Future>::poll(move _14, _16) -> [return: bb7, unwind: bb47];
    }

    bb7: {
        _17 = discriminant(_13);
        switchInt(move _17) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>, StreamError>>::Pending;
        _62 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        discriminant((*_62)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _18 = move ((_13 as Ready).0: tokio::sync::RwLockReadGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>);
        _8 = move _18;
        _63 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        drop((((*_63) as variant#3).2: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}})) -> [return: bb11, unwind: bb52];
    }

    bb11: {
        _7 = &_8;
        _6 = <tokio::sync::RwLockReadGuard<'_, HashMap<diem_json_rpc_types::Id, SubscriptionSender>> as Deref>::deref(move _7) -> [return: bb12, unwind: bb46];
    }

    bb12: {
        _64 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _19 = &(((*_64) as variant#3).1: diem_json_rpc_types::Id);
        _5 = HashMap::<diem_json_rpc_types::Id, SubscriptionSender>::get::<diem_json_rpc_types::Id>(_6, _19) -> [return: bb13, unwind: bb46];
    }

    bb13: {
        _4 = &_5;
        _3 = std::option::Option::<&SubscriptionSender>::is_some(move _4) -> [return: bb14, unwind: bb46];
    }

    bb14: {
        switchInt(move _3) -> [0: bb18, otherwise: bb15];
    }

    bb15: {
        drop(_8) -> [return: bb16, unwind: bb52];
    }

    bb16: {
        _21 = std::option::Option::<StreamError>::None;
        _20 = StreamError::subscription_id_already_used::<StreamError>(move _21) -> [return: bb17, unwind: bb52];
    }

    bb17: {
        _47 = std::result::Result::<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>, StreamError>::Err(move _20);
        _65 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        drop((((*_65) as variant#3).1: diem_json_rpc_types::Id)) -> [return: bb37, unwind: bb48];
    }

    bb18: {
        drop(_8) -> [return: bb19, unwind: bb52];
    }

    bb19: {
        _66 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _67 = deref_copy (((*_66) as variant#3).0: &stream::streaming_client::StreamingClient);
        _25 = &((*_67).3: std::sync::Arc<stream::streaming_client::StreamingClientConfig>);
        _24 = <Arc<StreamingClientConfig> as Deref>::deref(move _25) -> [return: bb20, unwind: bb52];
    }

    bb20: {
        _23 = ((*_24).0: usize);
        _22 = tokio::sync::mpsc::channel::<std::result::Result<StreamJsonRpcResponse, StreamError>>(move _23) -> [return: bb21, unwind: bb52];
    }

    bb21: {
        _68 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_68) as variant#4).4: bool) = const true;
        _69 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_69) as variant#4).1: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>) = move (_22.0: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _70 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_70) as variant#4).2: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>) = move (_22.1: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _71 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _72 = deref_copy (((*_71) as variant#3).0: &stream::streaming_client::StreamingClient);
        _33 = &((*_72).1: std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>);
        _32 = <Arc<tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>> as Deref>::deref(move _33) -> [return: bb22, unwind: bb43];
    }

    bb22: {
        _31 = tokio::sync::RwLock::<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::write(_32) -> [return: bb23, unwind: bb43];
    }

    bb23: {
        _30 = <{async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::write::{closure#0}} as std::future::IntoFuture>::into_future(move _31) -> [return: bb24, unwind: bb43];
    }

    bb24: {
        _73 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_73) as variant#4).3: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}}) = move _30;
        goto -> bb25;
    }

    bb25: {
        _74 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _36 = &mut (((*_74) as variant#4).3: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}});
        _35 = Pin::<&mut {async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::write::{closure#0}}>::new_unchecked(_36) -> [return: bb26, unwind: bb42];
    }

    bb26: {
        _37 = _48;
        _34 = <{async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::write::{closure#0}} as futures::Future>::poll(move _35, _37) -> [return: bb27, unwind: bb42];
    }

    bb27: {
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb29, 1: bb28, otherwise: bb9];
    }

    bb28: {
        _0 = Poll::<std::result::Result<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>, StreamError>>::Pending;
        _75 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        discriminant((*_75)) = 4;
        return;
    }

    bb29: {
        _39 = move ((_34 as Ready).0: tokio::sync::RwLockWriteGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>);
        _29 = move _39;
        _76 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        drop((((*_76) as variant#4).3: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}})) -> [return: bb30, unwind: bb43];
    }

    bb30: {
        _28 = &mut _29;
        _27 = <tokio::sync::RwLockWriteGuard<'_, HashMap<diem_json_rpc_types::Id, SubscriptionSender>> as DerefMut>::deref_mut(move _28) -> [return: bb31, unwind: bb41];
    }

    bb31: {
        _77 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _41 = &(((*_77) as variant#3).1: diem_json_rpc_types::Id);
        _40 = <diem_json_rpc_types::Id as Clone>::clone(move _41) -> [return: bb32, unwind: bb40];
    }

    bb32: {
        _46 = const true;
        _78 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_78) as variant#3).3: bool) = const false;
        _79 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _43 = move (((*_79) as variant#3).1: diem_json_rpc_types::Id);
        _80 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_80) as variant#4).4: bool) = const false;
        _81 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _44 = move (((*_81) as variant#4).1: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _42 = SubscriptionSender::new(move _43, move _44) -> [return: bb33, unwind: bb39];
    }

    bb33: {
        _46 = const false;
        _26 = HashMap::<diem_json_rpc_types::Id, SubscriptionSender>::insert(_27, move _40, move _42) -> [return: bb34, unwind: bb39];
    }

    bb34: {
        _46 = const false;
        drop(_26) -> [return: bb35, unwind: bb41];
    }

    bb35: {
        drop(_29) -> [return: bb36, unwind: bb43];
    }

    bb36: {
        _82 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _45 = move (((*_82) as variant#4).2: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _47 = std::result::Result::<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>, StreamError>::Ok(move _45);
        _83 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_83) as variant#4).4: bool) = const false;
        _84 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_84) as variant#3).3: bool) = const false;
        goto -> bb38;
    }

    bb37: {
        _85 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_85) as variant#3).3: bool) = const false;
        goto -> bb38;
    }

    bb38: {
        _0 = Poll::<std::result::Result<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>, StreamError>>::Ready(move _47);
        _86 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        discriminant((*_86)) = 1;
        return;
    }

    bb39 (cleanup): {
        switchInt(_46) -> [0: bb40, otherwise: bb49];
    }

    bb40 (cleanup): {
        _46 = const false;
        goto -> bb41;
    }

    bb41 (cleanup): {
        drop(_29) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        _87 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        drop((((*_87) as variant#4).3: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}})) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        _88 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        drop((((*_88) as variant#4).2: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>)) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        _93 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        switchInt((((*_93) as variant#4).4: bool)) -> [0: bb45, otherwise: bb50];
    }

    bb45 (cleanup): {
        _89 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_89) as variant#4).4: bool) = const false;
        goto -> bb52;
    }

    bb46 (cleanup): {
        drop(_8) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        _90 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        drop((((*_90) as variant#3).2: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::read::{closure#0}})) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        _91 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        (((*_91) as variant#3).3: bool) = const false;
        _96 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        discriminant((*_96)) = 2;
        resume;
    }

    bb49 (cleanup): {
        drop(_40) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        _92 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        drop((((*_92) as variant#4).1: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>)) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        _94 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        drop((((*_94) as variant#3).1: diem_json_rpc_types::Id)) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        _95 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        switchInt((((*_95) as variant#3).3: bool)) -> [0: bb48, otherwise: bb51];
    }

    bb53: {
        _48 = move _2;
        goto -> bb5;
    }

    bb54: {
        _48 = move _2;
        goto -> bb25;
    }

    bb55: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb55, unwind continue];
    }

    bb56: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb56, unwind continue];
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::start_channel_task(_1: &mut StreamingClient) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: &tracing::level_filters::LevelFilter;
    let _5: tracing::level_filters::LevelFilter;
    let _6: tracing::subscriber::Interest;
    let _7: &tracing::__macro_support::MacroCallsite;
    let mut _8: bool;
    let mut _9: &tracing::subscriber::Interest;
    let mut _10: bool;
    let _11: &tracing::__macro_support::MacroCallsite;
    let mut _12: tracing::subscriber::Interest;
    let _14: &tracing::__macro_support::MacroCallsite;
    let _15: ();
    let _16: &tracing::field::ValueSet<'_>;
    let _17: tracing::field::ValueSet<'_>;
    let _19: &tracing::field::FieldSet;
    let _20: &tracing::field::FieldSet;
    let _21: &[(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let _22: [(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let mut _23: (&tracing::field::Field, std::option::Option<&dyn tracing::Value>);
    let mut _24: &tracing::field::Field;
    let _25: tracing::field::Field;
    let mut _26: std::option::Option<tracing::field::Field>;
    let mut _27: &mut tracing::field::Iter;
    let _28: &str;
    let mut _29: std::option::Option<&dyn tracing::Value>;
    let mut _30: &dyn tracing::Value;
    let _31: &std::fmt::Arguments<'_>;
    let _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: stream::streaming_client::StreamingClient;
    let mut _35: &stream::streaming_client::StreamingClient;
    let _36: tokio::task::JoinHandle<()>;
    let mut _37: {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93};
    let mut _39: &tracing::Level;
    let mut _40: &tracing::level_filters::LevelFilter;
    let mut _41: &tracing::Level;
    scope 1 {
        debug interest => _6;
        let _13: &tracing::Metadata<'_>;
        scope 2 {
            debug meta => _13;
            let mut _18: tracing::field::Iter;
            scope 3 {
                debug iter => _18;
                let mut _38: &[&str; 1];
            }
        }
    }
    scope 4 {
        debug clone => _34;
    }

    bb0: {
        _41 = const _;
        _40 = const _;
        _2 = <Level as PartialOrd<LevelFilter>>::le(_41, _40) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb19, otherwise: bb2];
    }

    bb2: {
        _39 = const _;
        _5 = LevelFilter::current() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = &_5;
        _3 = <Level as PartialOrd<LevelFilter>>::le(_39, move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _3) -> [0: bb19, otherwise: bb5];
    }

    bb5: {
        _7 = const {alloc36: &MacroCallsite};
        _6 = MacroCallsite::interest(_7) -> [return: bb6, unwind continue];
    }

    bb6: {
        _9 = &_6;
        _8 = tracing::subscriber::Interest::is_never(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _8) -> [0: bb8, otherwise: bb19];
    }

    bb8: {
        _11 = const {alloc36: &MacroCallsite};
        _12 = move _6;
        _10 = MacroCallsite::is_enabled(_11, move _12) -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _10) -> [0: bb19, otherwise: bb10];
    }

    bb10: {
        _14 = const {alloc36: &MacroCallsite};
        _13 = <MacroCallsite as tracing::Callsite>::metadata(_14) -> [return: bb11, unwind continue];
    }

    bb11: {
        _19 = tracing::Metadata::<'_>::fields(_13) -> [return: bb12, unwind continue];
    }

    bb12: {
        _18 = FieldSet::iter(_19) -> [return: bb13, unwind continue];
    }

    bb13: {
        _20 = tracing::Metadata::<'_>::fields(_13) -> [return: bb14, unwind continue];
    }

    bb14: {
        _27 = &mut _18;
        _26 = <tracing::field::Iter as Iterator>::next(move _27) -> [return: bb15, unwind continue];
    }

    bb15: {
        _28 = const "FieldSet corrupted (this is a bug)";
        _25 = std::option::Option::<Field>::expect(move _26, _28) -> [return: bb16, unwind continue];
    }

    bb16: {
        _24 = &_25;
        _38 = const _;
        _33 = _38 as &[&str] (PointerCoercion(Unsize));
        _32 = Arguments::<'_>::new_const(move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        _31 = &_32;
        _30 = _31 as &dyn tracing::Value (PointerCoercion(Unsize));
        _29 = std::option::Option::<&dyn tracing::Value>::Some(_30);
        _23 = (move _24, move _29);
        _22 = [move _23];
        _21 = &_22;
        _17 = FieldSet::value_set::<'_, [(&Field, std::option::Option<&dyn tracing::Value>); 1]>(_20, _21) -> [return: bb18, unwind continue];
    }

    bb18: {
        _16 = &_17;
        _15 = tracing::Event::<'_>::dispatch(_13, _16) -> [return: bb19, unwind continue];
    }

    bb19: {
        _35 = &(*_1);
        _34 = <StreamingClient as Clone>::clone(move _35) -> [return: bb20, unwind continue];
    }

    bb20: {
        _37 = {coroutine@sdk/client/src/stream/streaming_client.rs:306:28: 306:93 (#0)} { clone: move _34 };
        _36 = tokio::spawn::<{async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93}>(move _37) -> [return: bb21, unwind continue];
    }

    bb21: {
        drop(_36) -> [return: bb22, unwind continue];
    }

    bb22: {
        return;
    }
}

alloc36 (static: StreamingClient::start_channel_task::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc37<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc37 (static: StreamingClient::start_channel_task::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 30 01 00 00 │ ............0...
    0x10 │ ╾───alloc2726<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2714<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2722<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc36───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2718<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2715<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2726 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 33 30 34                                        │ 304
}

alloc2714 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2722 (size: 16, align: 8) {
    ╾───alloc2721<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2721 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2718 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2715 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::start_channel_task: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "StreamingClient starting channel task"];
        _0 = &_1;
        return;
    }
}

promoted[1] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::start_channel_task: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::start_channel_task: &LevelFilter = {
    let mut _0: &tracing::level_filters::LevelFilter;
    let mut _1: tracing::level_filters::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::start_channel_task: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::start_channel_task::CALLSITE: MacroCallsite = {
    let mut _0: tracing::__macro_support::MacroCallsite;
    let mut _1: &tracing::Metadata<'_>;
    let _2: &tracing::Metadata<'_>;
    let _3: &tracing::Metadata<'_>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc37: &tracing::Metadata<'_>};
        _2 = &(*_3);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = MacroCallsite::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc37 (static: StreamingClient::start_channel_task::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 30 01 00 00 │ ............0...
    0x10 │ ╾───alloc2726<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2714<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2722<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc36───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2718<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2715<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2726 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 33 30 34                                        │ 304
}

alloc2714 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2722 (size: 16, align: 8) {
    ╾───alloc2721<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2721 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc36 (static: StreamingClient::start_channel_task::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc37<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2718 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2715 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::start_channel_task::CALLSITE::META: tracing::Metadata<'_> = {
    let mut _0: tracing::Metadata<'_>;
    let mut _1: &str;
    let _2: &str;
    let mut _3: std::option::Option<&str>;
    let mut _4: &str;
    let _5: &str;
    let mut _6: std::option::Option<u32>;
    let mut _7: std::option::Option<&str>;
    let mut _8: &str;
    let _9: &str;
    let mut _10: tracing::field::FieldSet;
    let mut _11: &[&str];
    let mut _12: &[&str; 1];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: tracing::callsite::Identifier;
    let mut _16: &dyn tracing::Callsite;
    let mut _17: &tracing::__macro_support::MacroCallsite;
    let _18: &tracing::__macro_support::MacroCallsite;
    let _19: &tracing::__macro_support::MacroCallsite;
    let mut _20: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const "diem_client::stream::streaming_client";
        _1 = &(*_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "sdk/client/src/stream/streaming_client.rs";
        _4 = &(*_5);
        _3 = std::option::Option::<&str>::Some(move _4);
        StorageDead(_4);
        StorageLive(_6);
        _6 = std::option::Option::<u32>::Some(const 304_u32);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "diem_client::stream::streaming_client";
        _8 = &(*_9);
        _7 = std::option::Option::<&str>::Some(move _8);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _20 = const _;
        _13 = &(*_20);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const {alloc36: &MacroCallsite};
        _18 = &(*_19);
        _17 = &(*_18);
        _16 = move _17 as &dyn tracing::Callsite (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = tracing::callsite::Identifier(move _16);
        StorageDead(_16);
        ConstEvalCounter;
        _10 = FieldSet::new(move _11, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_11);
        ConstEvalCounter;
        _0 = tracing::Metadata::<'_>::new(const "event sdk/client/src/stream/streaming_client.rs:304", move _1, const _, move _3, move _6, move _7, move _10, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}

alloc36 (static: StreamingClient::start_channel_task::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc37<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc37 (static: StreamingClient::start_channel_task::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 30 01 00 00 │ ............0...
    0x10 │ ╾───alloc2726<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2714<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2722<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc36───────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2718<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2715<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2726 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 33 30 34                                        │ 304
}

alloc2714 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2722 (size: 16, align: 8) {
    ╾───alloc2721<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2721 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2718 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2715 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::start_channel_task::CALLSITE::META: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "message"];
        _0 = &_1;
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::start_channel_task::{closure#0}(_1: Pin<&mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93}>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _16;
    debug clone => ((*(_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93})).0: stream::streaming_client::StreamingClient);
    let mut _0: std::task::Poll<()>;
    let mut _3: bool;
    let mut _4: &std::result::Result<(), error::StreamError>;
    let _5: std::result::Result<(), error::StreamError>;
    let mut _6: {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _7: {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _8: &mut stream::streaming_client::StreamingClient;
    let mut _9: std::task::Poll<std::result::Result<(), error::StreamError>>;
    let mut _10: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6}>;
    let mut _11: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6};
    let mut _12: &mut std::task::Context<'_>;
    let mut _13: isize;
    let mut _15: ();
    let mut _16: &mut std::task::Context<'_>;
    let mut _17: u32;
    let mut _18: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93};
    let mut _19: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93};
    let mut _20: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93};
    let mut _21: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93};
    let mut _22: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93};
    let mut _23: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93};
    let mut _24: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93};
    let mut _25: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93};
    let mut _26: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93};
    let mut _27: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93};
    let mut _28: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93};
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93})) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        let _14: std::result::Result<(), error::StreamError>;
        scope 2 {
        }
        scope 3 {
            debug result => _14;
        }
    }

    bb0: {
        _18 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93});
        _17 = discriminant((*_18));
        switchInt(move _17) -> [0: bb1, 1: bb23, 2: bb22, 3: bb21, otherwise: bb9];
    }

    bb1: {
        _16 = move _2;
        goto -> bb2;
    }

    bb2: {
        _19 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93});
        _8 = &mut ((*_19).0: stream::streaming_client::StreamingClient);
        _7 = StreamingClient::handle_next_message(move _8) -> [return: bb3, unwind: bb18];
    }

    bb3: {
        _6 = <{async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6} as std::future::IntoFuture>::into_future(move _7) -> [return: bb4, unwind: bb18];
    }

    bb4: {
        _20 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93});
        (((*_20) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6}) = move _6;
        goto -> bb5;
    }

    bb5: {
        _21 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93});
        _11 = &mut (((*_21) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6});
        _10 = Pin::<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6}>::new_unchecked(_11) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _12 = _16;
        _9 = <{async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6} as futures::Future>::poll(move _10, _12) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<()>::Pending;
        _22 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93});
        discriminant((*_22)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _14 = move ((_9 as Ready).0: std::result::Result<(), error::StreamError>);
        _5 = move _14;
        _23 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93});
        drop((((*_23) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _4 = &_5;
        _3 = std::result::Result::<(), StreamError>::is_ok(move _4) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        switchInt(move _3) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        drop(_5) -> [return: bb2, unwind: bb18];
    }

    bb14: {
        drop(_5) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        _15 = const ();
        _26 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93});
        drop(((*_26).0: stream::streaming_client::StreamingClient)) -> [return: bb20, unwind: bb19];
    }

    bb16 (cleanup): {
        drop(_5) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _25 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93});
        drop((((*_25) as variant#3).0: {async fn body@sdk/client/src/stream/streaming_client.rs:220:65: 286:6})) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        _27 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93});
        drop(((*_27).0: stream::streaming_client::StreamingClient)) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        _28 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93});
        discriminant((*_28)) = 2;
        resume;
    }

    bb20: {
        _0 = Poll::<()>::Ready(move _15);
        _24 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/streaming_client.rs:306:28: 306:93});
        discriminant((*_24)) = 1;
        return;
    }

    bb21: {
        _16 = move _2;
        goto -> bb5;
    }

    bb22: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb22, unwind continue];
    }

    bb23: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb23, unwind continue];
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::clear_subscription(_1: &StreamingClient, _2: &diem_json_rpc_types::Id) -> {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6} {
    debug self => _1;
    debug id => _2;
    let mut _0: {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/streaming_client.rs:309:57: 312:6 (#0)} { self: _1, id: _2 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::clear_subscription::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6}>, _2: &mut Context<'_>) -> Poll<bool> {
    debug _task_context => _62;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6})).0: &stream::streaming_client::StreamingClient);
    debug id => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6})).1: &diem_json_rpc_types::Id);
    let mut _0: std::task::Poll<bool>;
    let _3: &stream::streaming_client::StreamingClient;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: &tracing::level_filters::LevelFilter;
    let _7: tracing::level_filters::LevelFilter;
    let _9: &tracing::__macro_support::MacroCallsite;
    let mut _10: bool;
    let mut _11: &tracing::subscriber::Interest;
    let mut _12: bool;
    let _13: &tracing::__macro_support::MacroCallsite;
    let mut _14: tracing::subscriber::Interest;
    let _16: &tracing::__macro_support::MacroCallsite;
    let _17: ();
    let _18: &tracing::field::ValueSet<'_>;
    let _19: tracing::field::ValueSet<'_>;
    let _21: &tracing::field::FieldSet;
    let _22: &tracing::field::FieldSet;
    let _23: &[(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let _24: [(&tracing::field::Field, std::option::Option<&dyn tracing::Value>); 1];
    let mut _25: (&tracing::field::Field, std::option::Option<&dyn tracing::Value>);
    let mut _26: &tracing::field::Field;
    let _27: tracing::field::Field;
    let mut _28: std::option::Option<tracing::field::Field>;
    let mut _29: &mut tracing::field::Iter;
    let _30: &str;
    let mut _31: std::option::Option<&dyn tracing::Value>;
    let mut _32: &dyn tracing::Value;
    let _33: &std::fmt::Arguments<'_>;
    let _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &&&diem_json_rpc_types::Id;
    let _41: &&diem_json_rpc_types::Id;
    let mut _42: &std::option::Option<stream::streaming_client::SubscriptionSender>;
    let _43: std::option::Option<stream::streaming_client::SubscriptionSender>;
    let mut _44: &mut std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>;
    let mut _45: &mut tokio::sync::RwLockWriteGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _46: tokio::sync::RwLockWriteGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _47: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}};
    let mut _48: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}};
    let _49: &tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
    let mut _50: &std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let mut _51: std::task::Poll<tokio::sync::RwLockWriteGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>;
    let mut _52: std::pin::Pin<&mut {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}}>;
    let mut _53: &mut {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}};
    let mut _54: &mut std::task::Context<'_>;
    let mut _55: isize;
    let mut _61: bool;
    let mut _62: &mut std::task::Context<'_>;
    let mut _63: u32;
    let mut _64: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _65: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _66: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _67: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _68: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _69: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _70: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _71: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _72: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _73: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _74: &diem_json_rpc_types::Id;
    let mut _75: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _76: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    let mut _77: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6};
    scope 1 {
        debug self => _3;
        scope 2 {
            debug id => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6})) as variant#3).0: &diem_json_rpc_types::Id);
            let _8: tracing::subscriber::Interest;
            let mut _58: &tracing::Level;
            let mut _59: &tracing::level_filters::LevelFilter;
            let mut _60: &tracing::Level;
            scope 3 {
                debug interest => _8;
                let _15: &tracing::Metadata<'_>;
                scope 4 {
                    debug meta => _15;
                    let mut _20: tracing::field::Iter;
                    scope 5 {
                        debug iter => _20;
                        let mut _57: &[&str; 1];
                    }
                }
            }
            scope 6 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6})) as variant#3).1: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}});
                let _56: tokio::sync::RwLockWriteGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>;
                scope 7 {
                }
                scope 8 {
                    debug result => _56;
                }
            }
        }
    }

    bb0: {
        _64 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        _63 = discriminant((*_64));
        switchInt(move _63) -> [0: bb1, 1: bb43, 2: bb42, 3: bb41, otherwise: bb29];
    }

    bb1: {
        _62 = move _2;
        _65 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        _3 = ((*_65).0: &stream::streaming_client::StreamingClient);
        _66 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        _67 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        (((*_66) as variant#3).0: &diem_json_rpc_types::Id) = ((*_67).1: &diem_json_rpc_types::Id);
        _60 = const _;
        _59 = const _;
        _4 = <Level as PartialOrd<LevelFilter>>::le(_60, _59) -> [return: bb2, unwind: bb40];
    }

    bb2: {
        switchInt(move _4) -> [0: bb21, otherwise: bb3];
    }

    bb3: {
        _58 = const _;
        _7 = LevelFilter::current() -> [return: bb4, unwind: bb40];
    }

    bb4: {
        _6 = &_7;
        _5 = <Level as PartialOrd<LevelFilter>>::le(_58, move _6) -> [return: bb5, unwind: bb40];
    }

    bb5: {
        switchInt(move _5) -> [0: bb21, otherwise: bb6];
    }

    bb6: {
        _9 = const {alloc7: &MacroCallsite};
        _8 = MacroCallsite::interest(_9) -> [return: bb7, unwind: bb40];
    }

    bb7: {
        _11 = &_8;
        _10 = tracing::subscriber::Interest::is_never(move _11) -> [return: bb8, unwind: bb40];
    }

    bb8: {
        switchInt(move _10) -> [0: bb9, otherwise: bb21];
    }

    bb9: {
        _13 = const {alloc7: &MacroCallsite};
        _14 = move _8;
        _12 = MacroCallsite::is_enabled(_13, move _14) -> [return: bb10, unwind: bb40];
    }

    bb10: {
        switchInt(move _12) -> [0: bb21, otherwise: bb11];
    }

    bb11: {
        _16 = const {alloc7: &MacroCallsite};
        _15 = <MacroCallsite as tracing::Callsite>::metadata(_16) -> [return: bb12, unwind: bb40];
    }

    bb12: {
        _21 = tracing::Metadata::<'_>::fields(_15) -> [return: bb13, unwind: bb40];
    }

    bb13: {
        _20 = FieldSet::iter(_21) -> [return: bb14, unwind: bb40];
    }

    bb14: {
        _22 = tracing::Metadata::<'_>::fields(_15) -> [return: bb15, unwind: bb40];
    }

    bb15: {
        _29 = &mut _20;
        _28 = <tracing::field::Iter as Iterator>::next(move _29) -> [return: bb16, unwind: bb40];
    }

    bb16: {
        _30 = const "FieldSet corrupted (this is a bug)";
        _27 = std::option::Option::<Field>::expect(move _28, _30) -> [return: bb17, unwind: bb40];
    }

    bb17: {
        _26 = &_27;
        _57 = const _;
        _35 = _57 as &[&str] (PointerCoercion(Unsize));
        _68 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        _41 = &(((*_68) as variant#3).0: &diem_json_rpc_types::Id);
        _40 = &_41;
        _39 = core::fmt::rt::Argument::<'_>::new_debug::<&&diem_json_rpc_types::Id>(_40) -> [return: bb18, unwind: bb40];
    }

    bb18: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb19, unwind: bb40];
    }

    bb19: {
        _33 = &_34;
        _32 = _33 as &dyn tracing::Value (PointerCoercion(Unsize));
        _31 = std::option::Option::<&dyn tracing::Value>::Some(_32);
        _25 = (move _26, move _31);
        _24 = [move _25];
        _23 = &_24;
        _19 = FieldSet::value_set::<'_, [(&Field, std::option::Option<&dyn tracing::Value>); 1]>(_22, _23) -> [return: bb20, unwind: bb40];
    }

    bb20: {
        _18 = &_19;
        _17 = tracing::Event::<'_>::dispatch(_15, _18) -> [return: bb44, unwind: bb40];
    }

    bb21: {
        _50 = &((*_3).1: std::sync::Arc<tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>>);
        _49 = <Arc<tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>> as Deref>::deref(move _50) -> [return: bb22, unwind: bb40];
    }

    bb22: {
        _48 = tokio::sync::RwLock::<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::write(_49) -> [return: bb23, unwind: bb40];
    }

    bb23: {
        _47 = <{async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::write::{closure#0}} as std::future::IntoFuture>::into_future(move _48) -> [return: bb24, unwind: bb40];
    }

    bb24: {
        _69 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        (((*_69) as variant#3).1: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}}) = move _47;
        goto -> bb25;
    }

    bb25: {
        _70 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        _53 = &mut (((*_70) as variant#3).1: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}});
        _52 = Pin::<&mut {async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::write::{closure#0}}>::new_unchecked(_53) -> [return: bb26, unwind: bb39];
    }

    bb26: {
        _54 = _62;
        _51 = <{async fn body@tokio::sync::RwLock<HashMap<diem_json_rpc_types::Id, SubscriptionSender>>::write::{closure#0}} as futures::Future>::poll(move _52, _54) -> [return: bb27, unwind: bb39];
    }

    bb27: {
        _55 = discriminant(_51);
        switchInt(move _55) -> [0: bb30, 1: bb28, otherwise: bb29];
    }

    bb28: {
        _0 = Poll::<bool>::Pending;
        _71 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        discriminant((*_71)) = 3;
        return;
    }

    bb29: {
        unreachable;
    }

    bb30: {
        _56 = move ((_51 as Ready).0: tokio::sync::RwLockWriteGuard<'_, std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>);
        _46 = move _56;
        _72 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        drop((((*_72) as variant#3).1: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}})) -> [return: bb31, unwind: bb40];
    }

    bb31: {
        _45 = &mut _46;
        _44 = <tokio::sync::RwLockWriteGuard<'_, HashMap<diem_json_rpc_types::Id, SubscriptionSender>> as DerefMut>::deref_mut(move _45) -> [return: bb32, unwind: bb38];
    }

    bb32: {
        _73 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        _74 = deref_copy (((*_73) as variant#3).0: &diem_json_rpc_types::Id);
        _43 = HashMap::<diem_json_rpc_types::Id, SubscriptionSender>::remove::<diem_json_rpc_types::Id>(_44, _74) -> [return: bb33, unwind: bb38];
    }

    bb33: {
        _42 = &_43;
        _61 = std::option::Option::<SubscriptionSender>::is_some(move _42) -> [return: bb34, unwind: bb37];
    }

    bb34: {
        drop(_43) -> [return: bb35, unwind: bb38];
    }

    bb35: {
        drop(_46) -> [return: bb36, unwind: bb40];
    }

    bb36: {
        _0 = Poll::<bool>::Ready(move _61);
        _75 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        discriminant((*_75)) = 1;
        return;
    }

    bb37 (cleanup): {
        drop(_43) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        drop(_46) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        _76 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        drop((((*_76) as variant#3).1: {async fn body@tokio::sync::RwLock<std::collections::HashMap<diem_json_rpc_types::Id, stream::streaming_client::SubscriptionSender>>::write::{closure#0}})) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb40 (cleanup): {
        _77 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:309:57: 312:6});
        discriminant((*_77)) = 2;
        resume;
    }

    bb41: {
        _62 = move _2;
        goto -> bb25;
    }

    bb42: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb42, unwind continue];
    }

    bb43: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb43, unwind continue];
    }

    bb44: {
        goto -> bb21;
    }
}

alloc7 (static: StreamingClient::clear_subscription::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc38<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc38 (static: StreamingClient::clear_subscription::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 36 01 00 00 │ ............6...
    0x10 │ ╾───alloc2763<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2751<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2759<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc7────────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2755<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2752<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2763 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 33 31 30                                        │ 310
}

alloc2751 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2759 (size: 16, align: 8) {
    ╾───alloc2758<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2758 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2755 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2752 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::clear_subscription::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "StreamingClient clearing subscription: "];
        _0 = &_1;
        return;
    }
}

promoted[1] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::clear_subscription::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[2] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::clear_subscription::{closure#0}: &LevelFilter = {
    let mut _0: &tracing::level_filters::LevelFilter;
    let mut _1: tracing::level_filters::LevelFilter;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::clear_subscription::{closure#0}: &Level = {
    let mut _0: &tracing::Level;
    let mut _1: tracing::Level;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::clear_subscription::{closure#0}::CALLSITE: MacroCallsite = {
    let mut _0: tracing::__macro_support::MacroCallsite;
    let mut _1: &tracing::Metadata<'_>;
    let _2: &tracing::Metadata<'_>;
    let _3: &tracing::Metadata<'_>;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = const {alloc38: &tracing::Metadata<'_>};
        _2 = &(*_3);
        _1 = &(*_2);
        ConstEvalCounter;
        _0 = MacroCallsite::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}

alloc38 (static: StreamingClient::clear_subscription::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 36 01 00 00 │ ............6...
    0x10 │ ╾───alloc2763<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2751<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2759<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc7────────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2755<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2752<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2763 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 33 31 30                                        │ 310
}

alloc2751 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2759 (size: 16, align: 8) {
    ╾───alloc2758<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2758 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc7 (static: StreamingClient::clear_subscription::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc38<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2755 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2752 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

static streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::clear_subscription::{closure#0}::CALLSITE::META: tracing::Metadata<'_> = {
    let mut _0: tracing::Metadata<'_>;
    let mut _1: &str;
    let _2: &str;
    let mut _3: std::option::Option<&str>;
    let mut _4: &str;
    let _5: &str;
    let mut _6: std::option::Option<u32>;
    let mut _7: std::option::Option<&str>;
    let mut _8: &str;
    let _9: &str;
    let mut _10: tracing::field::FieldSet;
    let mut _11: &[&str];
    let mut _12: &[&str; 1];
    let _13: &[&str; 1];
    let _14: [&str; 1];
    let mut _15: tracing::callsite::Identifier;
    let mut _16: &dyn tracing::Callsite;
    let mut _17: &tracing::__macro_support::MacroCallsite;
    let _18: &tracing::__macro_support::MacroCallsite;
    let _19: &tracing::__macro_support::MacroCallsite;
    let mut _20: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const "diem_client::stream::streaming_client";
        _1 = &(*_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "sdk/client/src/stream/streaming_client.rs";
        _4 = &(*_5);
        _3 = std::option::Option::<&str>::Some(move _4);
        StorageDead(_4);
        StorageLive(_6);
        _6 = std::option::Option::<u32>::Some(const 310_u32);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = const "diem_client::stream::streaming_client";
        _8 = &(*_9);
        _7 = std::option::Option::<&str>::Some(move _8);
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _20 = const _;
        _13 = &(*_20);
        _12 = &(*_13);
        _11 = move _12 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = const {alloc7: &MacroCallsite};
        _18 = &(*_19);
        _17 = &(*_18);
        _16 = move _17 as &dyn tracing::Callsite (PointerCoercion(Unsize));
        StorageDead(_17);
        _15 = tracing::callsite::Identifier(move _16);
        StorageDead(_16);
        ConstEvalCounter;
        _10 = FieldSet::new(move _11, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_11);
        ConstEvalCounter;
        _0 = tracing::Metadata::<'_>::new(const "event sdk/client/src/stream/streaming_client.rs:310", move _1, const _, move _3, move _6, move _7, move _10, const _) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_1);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_2);
        return;
    }
}

alloc7 (static: StreamingClient::clear_subscription::{closure#0}::CALLSITE, size: 24, align: 8) {
    0x00 │ ╾────alloc38<imm>─────╼ ed ac df ea 0d 00 00 00 │ ╾──────╼........
    0x10 │ 00 00 00 00 __ __ __ __                         │ ....░░░░
}

alloc38 (static: StreamingClient::clear_subscription::{closure#0}::CALLSITE::META, size: 120, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 01 00 00 00 36 01 00 00 │ ............6...
    0x10 │ ╾───alloc2763<imm>────╼ 33 00 00 00 00 00 00 00 │ ╾──────╼3.......
    0x20 │ ╾───alloc2751<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x30 │ ╾───alloc2759<imm>────╼ 01 00 00 00 00 00 00 00 │ ╾──────╼........
    0x40 │ ╾───────alloc7────────╼ ╾──────alloc2385──────╼ │ ╾──────╼╾──────╼
    0x50 │ ╾───alloc2755<imm>────╼ 25 00 00 00 00 00 00 00 │ ╾──────╼%.......
    0x60 │ ╾───alloc2752<imm>────╼ 29 00 00 00 00 00 00 00 │ ╾──────╼).......
    0x70 │ 00 __ __ __ __ __ __ __                         │ .░░░░░░░
}

alloc2763 (size: 51, align: 1) {
    0x00 │ 65 76 65 6e 74 20 73 64 6b 2f 63 6c 69 65 6e 74 │ event sdk/client
    0x10 │ 2f 73 72 63 2f 73 74 72 65 61 6d 2f 73 74 72 65 │ /src/stream/stre
    0x20 │ 61 6d 69 6e 67 5f 63 6c 69 65 6e 74 2e 72 73 3a │ aming_client.rs:
    0x30 │ 33 31 30                                        │ 310
}

alloc2751 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2759 (size: 16, align: 8) {
    ╾───alloc2758<imm>────╼ 07 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc2758 (size: 7, align: 1) {
    6d 65 73 73 61 67 65                            │ message
}

alloc2385 (vtable: impl tracing::Callsite for MacroCallsite)

alloc2755 (size: 37, align: 1) {
    0x00 │ 64 69 65 6d 5f 63 6c 69 65 6e 74 3a 3a 73 74 72 │ diem_client::str
    0x10 │ 65 61 6d 3a 3a 73 74 72 65 61 6d 69 6e 67 5f 63 │ eam::streaming_c
    0x20 │ 6c 69 65 6e 74                                  │ lient
}

alloc2752 (size: 41, align: 1) {
    0x00 │ 73 64 6b 2f 63 6c 69 65 6e 74 2f 73 72 63 2f 73 │ sdk/client/src/s
    0x10 │ 74 72 65 61 6d 2f 73 74 72 65 61 6d 69 6e 67 5f │ tream/streaming_
    0x20 │ 63 6c 69 65 6e 74 2e 72 73                      │ client.rs
}

promoted[0] in streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::clear_subscription::{closure#0}::CALLSITE::META: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "message"];
        _0 = &_1;
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::get_and_register_id(_1: &StreamingClient) -> {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6} {
    debug self => _1;
    let mut _0: {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/streaming_client.rs:314:77: 318:6 (#0)} { self: _1 };
        return;
    }
}

fn streaming_client::<impl at sdk/client/src/stream/streaming_client.rs:117:1: 117:21>::get_and_register_id::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<SubscriptionStream, StreamError>> {
    debug _task_context => _39;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6})).0: &stream::streaming_client::StreamingClient);
    let mut _0: std::task::Poll<std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>>;
    let _3: &stream::websocket_transport::WebsocketTransport;
    let mut _4: &tokio::sync::RwLockReadGuard<'_, stream::websocket_transport::WebsocketTransport>;
    let _5: tokio::sync::RwLockReadGuard<'_, stream::websocket_transport::WebsocketTransport>;
    let mut _6: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::read::{closure#0}};
    let mut _7: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::read::{closure#0}};
    let _8: &tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>;
    let mut _9: &std::sync::Arc<tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>>;
    let mut _10: std::task::Poll<tokio::sync::RwLockReadGuard<'_, stream::websocket_transport::WebsocketTransport>>;
    let mut _11: std::pin::Pin<&mut {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::read::{closure#0}}>;
    let mut _12: &mut {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::read::{closure#0}};
    let mut _13: &mut std::task::Context<'_>;
    let mut _14: isize;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::StreamError>, tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
    let mut _18: {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _19: {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _20: diem_json_rpc_types::Id;
    let mut _21: &diem_json_rpc_types::Id;
    let mut _22: std::task::Poll<std::result::Result<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>, error::StreamError>>;
    let mut _23: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6}>;
    let mut _24: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6};
    let mut _25: &mut std::task::Context<'_>;
    let mut _26: isize;
    let mut _28: isize;
    let mut _31: stream::streaming_client::SubscriptionStream;
    let mut _32: diem_json_rpc_types::Id;
    let mut _33: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _34: stream::streaming_client::StreamingClient;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: std::result::Result<stream::streaming_client::SubscriptionStream, error::StreamError>;
    let mut _39: &mut std::task::Context<'_>;
    let mut _40: u32;
    let mut _41: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _42: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _43: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _44: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _45: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _46: &stream::streaming_client::StreamingClient;
    let mut _47: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _48: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _49: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _50: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _51: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _52: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _53: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _54: &stream::streaming_client::StreamingClient;
    let mut _55: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _56: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _57: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _58: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _59: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _60: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _61: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _62: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _63: &stream::streaming_client::StreamingClient;
    let mut _64: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _65: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _66: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _67: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _68: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _69: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _70: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _71: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _72: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    let mut _73: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6})) as variant#3).0: &stream::streaming_client::StreamingClient);
        scope 2 {
            debug id => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6})) as variant#4).1: diem_json_rpc_types::Id);
            let _16: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
            let _29: std::result::Result<std::convert::Infallible, error::StreamError>;
            let _30: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
            scope 6 {
                debug receiver => _16;
            }
            scope 7 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6})) as variant#4).2: {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
                let _27: std::result::Result<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>, error::StreamError>;
                scope 8 {
                }
                scope 9 {
                    debug result => _27;
                }
            }
            scope 10 {
                debug residual => _29;
                scope 11 {
                }
            }
            scope 12 {
                debug val => _30;
                scope 13 {
                }
            }
        }
        scope 3 {
            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6})) as variant#3).1: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::read::{closure#0}});
            let _15: tokio::sync::RwLockReadGuard<'_, stream::websocket_transport::WebsocketTransport>;
            scope 4 {
            }
            scope 5 {
                debug result => _15;
            }
        }
    }

    bb0: {
        _41 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        _40 = discriminant((*_41));
        switchInt(move _40) -> [0: bb1, 1: bb48, 2: bb47, 3: bb45, 4: bb46, otherwise: bb9];
    }

    bb1: {
        _39 = move _2;
        _42 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        (((*_42) as variant#4).3: bool) = const false;
        _37 = const false;
        _36 = const false;
        _35 = const false;
        _43 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        _44 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        (((*_43) as variant#3).0: &stream::streaming_client::StreamingClient) = ((*_44).0: &stream::streaming_client::StreamingClient);
        _45 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        _46 = deref_copy (((*_45) as variant#3).0: &stream::streaming_client::StreamingClient);
        _9 = &((*_46).0: std::sync::Arc<tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>>);
        _8 = <Arc<tokio::sync::RwLock<WebsocketTransport>> as Deref>::deref(move _9) -> [return: bb2, unwind: bb39];
    }

    bb2: {
        _7 = tokio::sync::RwLock::<WebsocketTransport>::read(_8) -> [return: bb3, unwind: bb39];
    }

    bb3: {
        _6 = <{async fn body@tokio::sync::RwLock<WebsocketTransport>::read::{closure#0}} as std::future::IntoFuture>::into_future(move _7) -> [return: bb4, unwind: bb39];
    }

    bb4: {
        _47 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        (((*_47) as variant#3).1: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::read::{closure#0}}) = move _6;
        goto -> bb5;
    }

    bb5: {
        _48 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        _12 = &mut (((*_48) as variant#3).1: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::read::{closure#0}});
        _11 = Pin::<&mut {async fn body@tokio::sync::RwLock<WebsocketTransport>::read::{closure#0}}>::new_unchecked(_12) -> [return: bb6, unwind: bb38];
    }

    bb6: {
        _13 = _39;
        _10 = <{async fn body@tokio::sync::RwLock<WebsocketTransport>::read::{closure#0}} as futures::Future>::poll(move _11, _13) -> [return: bb7, unwind: bb38];
    }

    bb7: {
        _14 = discriminant(_10);
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Pending;
        _49 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        discriminant((*_49)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _15 = move ((_10 as Ready).0: tokio::sync::RwLockReadGuard<'_, stream::websocket_transport::WebsocketTransport>);
        _5 = move _15;
        _50 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        drop((((*_50) as variant#3).1: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::read::{closure#0}})) -> [return: bb11, unwind: bb39];
    }

    bb11: {
        _4 = &_5;
        _3 = <tokio::sync::RwLockReadGuard<'_, WebsocketTransport> as Deref>::deref(move _4) -> [return: bb12, unwind: bb37];
    }

    bb12: {
        _51 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        (((*_51) as variant#4).1: diem_json_rpc_types::Id) = WebsocketTransport::get_next_id(_3) -> [return: bb13, unwind: bb37];
    }

    bb13: {
        _52 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        (((*_52) as variant#4).3: bool) = const true;
        drop(_5) -> [return: bb14, unwind: bb44];
    }

    bb14: {
        _53 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        _54 = deref_copy (((*_53) as variant#3).0: &stream::streaming_client::StreamingClient);
        _55 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        _21 = &(((*_55) as variant#4).1: diem_json_rpc_types::Id);
        _20 = <diem_json_rpc_types::Id as Clone>::clone(move _21) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        _19 = StreamingClient::register_subscription(_54, move _20) -> [return: bb16, unwind: bb36];
    }

    bb16: {
        _18 = <{async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6} as std::future::IntoFuture>::into_future(move _19) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        _56 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        (((*_56) as variant#4).2: {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6}) = move _18;
        goto -> bb18;
    }

    bb18: {
        _57 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        _24 = &mut (((*_57) as variant#4).2: {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6});
        _23 = Pin::<&mut {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6}>::new_unchecked(_24) -> [return: bb19, unwind: bb35];
    }

    bb19: {
        _25 = _39;
        _22 = <{async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6} as futures::Future>::poll(move _23, _25) -> [return: bb20, unwind: bb35];
    }

    bb20: {
        _26 = discriminant(_22);
        switchInt(move _26) -> [0: bb22, 1: bb21, otherwise: bb9];
    }

    bb21: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Pending;
        _58 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        discriminant((*_58)) = 4;
        return;
    }

    bb22: {
        _27 = move ((_22 as Ready).0: std::result::Result<tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>, error::StreamError>);
        _59 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        drop((((*_59) as variant#4).2: {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6})) -> [return: bb23, unwind: bb36];
    }

    bb23: {
        _17 = <std::result::Result<tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>, StreamError> as Try>::branch(move _27) -> [return: bb24, unwind: bb36];
    }

    bb24: {
        _28 = discriminant(_17);
        switchInt(move _28) -> [0: bb25, 1: bb26, otherwise: bb9];
    }

    bb25: {
        _30 = move ((_17 as Continue).0: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _37 = const true;
        _16 = move _30;
        _60 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        (((*_60) as variant#4).3: bool) = const false;
        _36 = const true;
        _61 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        _32 = move (((*_61) as variant#4).1: diem_json_rpc_types::Id);
        _37 = const false;
        _35 = const true;
        _33 = move _16;
        _62 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        _63 = deref_copy (((*_62) as variant#3).0: &stream::streaming_client::StreamingClient);
        _34 = <StreamingClient as Clone>::clone(_63) -> [return: bb28, unwind: bb32];
    }

    bb26: {
        _29 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::StreamError>);
        _38 = <std::result::Result<SubscriptionStream, StreamError> as FromResidual<std::result::Result<Infallible, StreamError>>>::from_residual(move _29) -> [return: bb27, unwind: bb36];
    }

    bb27: {
        _37 = const false;
        _65 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        drop((((*_65) as variant#4).1: diem_json_rpc_types::Id)) -> [return: bb30, unwind: bb39];
    }

    bb28: {
        _36 = const false;
        _35 = const false;
        _31 = SubscriptionStream::new(move _32, move _33, move _34) -> [return: bb29, unwind: bb32];
    }

    bb29: {
        _35 = const false;
        _36 = const false;
        _38 = std::result::Result::<SubscriptionStream, StreamError>::Ok(move _31);
        _37 = const false;
        _64 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        (((*_64) as variant#4).3: bool) = const false;
        goto -> bb31;
    }

    bb30: {
        _66 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        (((*_66) as variant#4).3: bool) = const false;
        goto -> bb31;
    }

    bb31: {
        _0 = Poll::<std::result::Result<SubscriptionStream, StreamError>>::Ready(move _38);
        _67 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        discriminant((*_67)) = 1;
        return;
    }

    bb32 (cleanup): {
        switchInt(_35) -> [0: bb33, otherwise: bb40];
    }

    bb33 (cleanup): {
        _35 = const false;
        switchInt(_36) -> [0: bb34, otherwise: bb41];
    }

    bb34 (cleanup): {
        _36 = const false;
        switchInt(_37) -> [0: bb36, otherwise: bb42];
    }

    bb35 (cleanup): {
        _68 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        drop((((*_68) as variant#4).2: {async fn body@sdk/client/src/stream/streaming_client.rs:288:92: 301:6})) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        _37 = const false;
        goto -> bb44;
    }

    bb37 (cleanup): {
        drop(_5) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        _69 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        drop((((*_69) as variant#3).1: {async fn body@tokio::sync::RwLock<stream::websocket_transport::WebsocketTransport>::read::{closure#0}})) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        _70 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        (((*_70) as variant#4).3: bool) = const false;
        _73 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        discriminant((*_73)) = 2;
        resume;
    }

    bb40 (cleanup): {
        drop(_33) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_32) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_16) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        _71 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        drop((((*_71) as variant#4).1: diem_json_rpc_types::Id)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        _72 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/streaming_client.rs:314:77: 318:6});
        switchInt((((*_72) as variant#4).3: bool)) -> [0: bb39, otherwise: bb43];
    }

    bb45: {
        _39 = move _2;
        goto -> bb5;
    }

    bb46: {
        _39 = move _2;
        goto -> bb18;
    }

    bb47: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb47, unwind continue];
    }

    bb48: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb48, unwind continue];
    }
}

fn websocket_transport::<impl at sdk/client/src/stream/websocket_transport.rs:38:1: 38:24>::new(_1: T, _2: std::option::Option<WebSocketConfig>) -> {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6} {
    debug url => _1;
    debug websocket_config => _2;
    let mut _0: {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6 (#0)} { url: move _1, websocket_config: _2 };
        return;
    }
}

fn websocket_transport::<impl at sdk/client/src/stream/websocket_transport.rs:38:1: 38:24>::new::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<WebsocketTransport, StreamError>> {
    debug _task_context => _54;
    debug url => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6})).0: T);
    debug websocket_config => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6})).1: std::option::Option<tokio_tungstenite::tungstenite::protocol::WebSocketConfig>);
    let mut _0: std::task::Poll<std::result::Result<stream::websocket_transport::WebsocketTransport, error::StreamError>>;
    let _3: T;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::StreamError>, tokio_tungstenite::tungstenite::http::Request<()>>;
    let mut _7: std::result::Result<tokio_tungstenite::tungstenite::http::Request<()>, error::StreamError>;
    let mut _8: std::result::Result<tokio_tungstenite::tungstenite::http::Request<()>, tokio_tungstenite::tungstenite::http::Error>;
    let mut _9: tokio_tungstenite::tungstenite::http::request::Builder;
    let mut _10: tokio_tungstenite::tungstenite::http::request::Builder;
    let mut _11: tokio_tungstenite::tungstenite::http::request::Builder;
    let mut _12: tokio_tungstenite::tungstenite::http::request::Builder;
    let mut _13: tokio_tungstenite::tungstenite::http::request::Builder;
    let mut _14: reqwest::header::HeaderName;
    let mut _15: reqwest::header::HeaderName;
    let mut _16: std::string::String;
    let mut _17: T;
    let mut _18: reqwest::Method;
    let mut _19: ();
    let mut _20: isize;
    let mut _24: (tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::http::Response<()>);
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::StreamError>, (tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::http::Response<()>)>;
    let mut _26: std::result::Result<(tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::http::Response<()>), error::StreamError>;
    let mut _27: {async fn body@tokio_tungstenite::connect_async_with_config<tokio_tungstenite::tungstenite::http::Request<()>>::{closure#0}};
    let mut _28: {async fn body@tokio_tungstenite::connect_async_with_config<tokio_tungstenite::tungstenite::http::Request<()>>::{closure#0}};
    let mut _29: tokio_tungstenite::tungstenite::http::Request<()>;
    let mut _30: std::task::Poll<std::result::Result<(tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::http::Response<()>), tokio_tungstenite::tungstenite::Error>>;
    let mut _31: std::pin::Pin<&mut {async fn body@tokio_tungstenite::connect_async_with_config<tokio_tungstenite::tungstenite::http::Request<()>>::{closure#0}}>;
    let mut _32: &mut {async fn body@tokio_tungstenite::connect_async_with_config<tokio_tungstenite::tungstenite::http::Request<()>>::{closure#0}};
    let mut _33: &mut std::task::Context<'_>;
    let mut _34: isize;
    let mut _36: isize;
    let mut _41: (futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>, futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>);
    let mut _42: tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>;
    let mut _43: stream::websocket_transport::WebsocketTransport;
    let mut _44: std::option::Option<futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>;
    let mut _45: futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>;
    let mut _46: futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>;
    let mut _47: std::sync::atomic::AtomicU64;
    let mut _48: std::option::Option<tokio::task::JoinHandle<()>>;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: std::result::Result<stream::websocket_transport::WebsocketTransport, error::StreamError>;
    let mut _54: &mut std::task::Context<'_>;
    let mut _55: u32;
    let mut _56: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _57: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _58: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _59: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _60: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _61: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _62: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _63: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _64: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _65: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _66: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _67: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _68: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _69: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _70: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _71: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _72: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _73: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _74: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _75: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _76: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _77: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _78: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    let mut _79: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6};
    scope 1 {
        debug url => _3;
        let _4: std::option::Option<tokio_tungstenite::tungstenite::protocol::WebSocketConfig>;
        scope 2 {
            debug websocket_config => _4;
            let _5: tokio_tungstenite::tungstenite::http::Request<()>;
            let _21: std::result::Result<std::convert::Infallible, error::StreamError>;
            let _22: tokio_tungstenite::tungstenite::http::Request<()>;
            scope 3 {
                debug request => _5;
                let _23: tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>;
                let _37: std::result::Result<std::convert::Infallible, error::StreamError>;
                let _38: (tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::http::Response<()>);
                scope 8 {
                    debug stream => _23;
                    let _39: futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>;
                    let _40: futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>;
                    scope 16 {
                        debug sink => _39;
                        debug stream => _40;
                    }
                }
                scope 9 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6})) as variant#3).0: {async fn body@tokio_tungstenite::connect_async_with_config<tokio_tungstenite::tungstenite::http::Request<()>>::{closure#0}});
                    let _35: std::result::Result<(tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::http::Response<()>), tokio_tungstenite::tungstenite::Error>;
                    scope 10 {
                    }
                    scope 11 {
                        debug result => _35;
                    }
                }
                scope 12 {
                    debug residual => _37;
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => _38;
                    scope 15 {
                    }
                }
            }
            scope 4 {
                debug residual => _21;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _22;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _56 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        _55 = discriminant((*_56));
        switchInt(move _55) -> [0: bb1, 1: bb52, 2: bb51, 3: bb50, otherwise: bb12];
    }

    bb1: {
        _54 = move _2;
        _57 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_57) as variant#3).2: bool) = const false;
        _58 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_58) as variant#3).1: bool) = const false;
        _52 = const false;
        _51 = const false;
        _50 = const false;
        _49 = const false;
        _59 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_59) as variant#3).2: bool) = const true;
        _60 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        _3 = move ((*_60).0: T);
        _61 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        _4 = ((*_61).1: std::option::Option<tokio_tungstenite::tungstenite::protocol::WebSocketConfig>);
        _13 = tokio_tungstenite::tungstenite::http::Request::<()>::builder() -> [return: bb2, unwind: bb38];
    }

    bb2: {
        _14 = const _;
        _12 = tokio_tungstenite::tungstenite::http::request::Builder::header::<HeaderName, &str>(move _13, move _14, const _) -> [return: bb3, unwind: bb38];
    }

    bb3: {
        _15 = const _;
        _11 = tokio_tungstenite::tungstenite::http::request::Builder::header::<HeaderName, i32>(move _12, move _15, const 1000_i32) -> [return: bb4, unwind: bb38];
    }

    bb4: {
        _52 = const true;
        _62 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_62) as variant#3).2: bool) = const false;
        _17 = move _3;
        _16 = <T as Into<std::string::String>>::into(move _17) -> [return: bb5, unwind: bb37];
    }

    bb5: {
        _52 = const false;
        _10 = tokio_tungstenite::tungstenite::http::request::Builder::uri::<std::string::String>(move _11, move _16) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        _52 = const false;
        _18 = const _;
        _9 = tokio_tungstenite::tungstenite::http::request::Builder::method::<reqwest::Method>(move _10, move _18) -> [return: bb7, unwind: bb39];
    }

    bb7: {
        _19 = ();
        _8 = tokio_tungstenite::tungstenite::http::request::Builder::body::<()>(move _9, move _19) -> [return: bb8, unwind: bb39];
    }

    bb8: {
        _7 = std::result::Result::<tokio_tungstenite::tungstenite::http::Request<()>, tokio_tungstenite::tungstenite::http::Error>::map_err::<StreamError, fn(tokio_tungstenite::tungstenite::http::Error) -> StreamError {StreamError::from_http_error}>(move _8, StreamError::from_http_error) -> [return: bb9, unwind: bb39];
    }

    bb9: {
        _6 = <std::result::Result<tokio_tungstenite::tungstenite::http::Request<()>, StreamError> as Try>::branch(move _7) -> [return: bb10, unwind: bb39];
    }

    bb10: {
        _20 = discriminant(_6);
        switchInt(move _20) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        _22 = move ((_6 as Continue).0: tokio_tungstenite::tungstenite::http::Request<()>);
        _63 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_63) as variant#3).1: bool) = const true;
        _5 = move _22;
        _64 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_64) as variant#3).1: bool) = const false;
        _29 = move _5;
        _28 = connect_async_with_config::<tokio_tungstenite::tungstenite::http::Request<()>>(move _29, _4) -> [return: bb14, unwind: bb47];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _21 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::StreamError>);
        _53 = <std::result::Result<WebsocketTransport, StreamError> as FromResidual<std::result::Result<Infallible, StreamError>>>::from_residual(move _21) -> [return: bb53, unwind: bb39];
    }

    bb14: {
        _27 = <{async fn body@connect_async_with_config<tokio_tungstenite::tungstenite::http::Request<()>>::{closure#0}} as std::future::IntoFuture>::into_future(move _28) -> [return: bb15, unwind: bb47];
    }

    bb15: {
        _65 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_65) as variant#3).0: {async fn body@tokio_tungstenite::connect_async_with_config<tokio_tungstenite::tungstenite::http::Request<()>>::{closure#0}}) = move _27;
        goto -> bb16;
    }

    bb16: {
        _66 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        _32 = &mut (((*_66) as variant#3).0: {async fn body@tokio_tungstenite::connect_async_with_config<tokio_tungstenite::tungstenite::http::Request<()>>::{closure#0}});
        _31 = Pin::<&mut {async fn body@connect_async_with_config<tokio_tungstenite::tungstenite::http::Request<()>>::{closure#0}}>::new_unchecked(_32) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        _33 = _54;
        _30 = <{async fn body@connect_async_with_config<tokio_tungstenite::tungstenite::http::Request<()>>::{closure#0}} as futures::Future>::poll(move _31, _33) -> [return: bb18, unwind: bb36];
    }

    bb18: {
        _34 = discriminant(_30);
        switchInt(move _34) -> [0: bb20, 1: bb19, otherwise: bb12];
    }

    bb19: {
        _0 = Poll::<std::result::Result<WebsocketTransport, StreamError>>::Pending;
        _67 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        discriminant((*_67)) = 3;
        return;
    }

    bb20: {
        _35 = move ((_30 as Ready).0: std::result::Result<(tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::http::Response<()>), tokio_tungstenite::tungstenite::Error>);
        _68 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        drop((((*_68) as variant#3).0: {async fn body@tokio_tungstenite::connect_async_with_config<tokio_tungstenite::tungstenite::http::Request<()>>::{closure#0}})) -> [return: bb21, unwind: bb47];
    }

    bb21: {
        _26 = std::result::Result::<(WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::http::Response<()>), tokio_tungstenite::tungstenite::Error>::map_err::<StreamError, fn(tokio_tungstenite::tungstenite::Error) -> StreamError {StreamError::from_tungstenite_error}>(move _35, StreamError::from_tungstenite_error) -> [return: bb22, unwind: bb47];
    }

    bb22: {
        _25 = <std::result::Result<(WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::http::Response<()>), StreamError> as Try>::branch(move _26) -> [return: bb23, unwind: bb47];
    }

    bb23: {
        _36 = discriminant(_25);
        switchInt(move _36) -> [0: bb24, 1: bb25, otherwise: bb12];
    }

    bb24: {
        _38 = move ((_25 as Continue).0: (tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::http::Response<()>));
        _24 = move _38;
        _51 = const true;
        _23 = move (_24.0: tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>);
        drop((_24.1: tokio_tungstenite::tungstenite::http::Response<()>)) -> [return: bb41, unwind: bb45];
    }

    bb25: {
        _37 = move ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::StreamError>);
        _53 = <std::result::Result<WebsocketTransport, StreamError> as FromResidual<std::result::Result<Infallible, StreamError>>>::from_residual(move _37) -> [return: bb54, unwind: bb47];
    }

    bb26: {
        _50 = const true;
        _39 = move (_41.0: futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>);
        _49 = const true;
        _40 = move (_41.1: futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>);
        _49 = const false;
        _45 = move _40;
        _44 = std::option::Option::<SplitStream<WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>>>::Some(move _45);
        _50 = const false;
        _46 = move _39;
        _47 = AtomicU64::new(const 0_u64) -> [return: bb27, unwind: bb30];
    }

    bb27: {
        _48 = std::option::Option::<tokio::task::JoinHandle<()>>::None;
        _43 = WebsocketTransport { stream: move _44, sink: move _46, next_id: move _47, channel_task: move _48 };
        _53 = std::result::Result::<WebsocketTransport, StreamError>::Ok(move _43);
        _49 = const false;
        _50 = const false;
        _51 = const false;
        _69 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_69) as variant#3).1: bool) = const false;
        _70 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_70) as variant#3).2: bool) = const false;
        goto -> bb29;
    }

    bb28: {
        _71 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_71) as variant#3).1: bool) = const false;
        _72 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_72) as variant#3).2: bool) = const false;
        goto -> bb29;
    }

    bb29: {
        _0 = Poll::<std::result::Result<WebsocketTransport, StreamError>>::Ready(move _53);
        _73 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        discriminant((*_73)) = 1;
        return;
    }

    bb30 (cleanup): {
        drop(_46) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_44) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        switchInt(_49) -> [0: bb33, otherwise: bb42];
    }

    bb33 (cleanup): {
        _49 = const false;
        switchInt(_50) -> [0: bb34, otherwise: bb43];
    }

    bb34 (cleanup): {
        _50 = const false;
        goto -> bb45;
    }

    bb35 (cleanup): {
        _51 = const false;
        goto -> bb47;
    }

    bb36 (cleanup): {
        _74 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        drop((((*_74) as variant#3).0: {async fn body@tokio_tungstenite::connect_async_with_config<tokio_tungstenite::tungstenite::http::Request<()>>::{closure#0}})) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_52) -> [0: bb38, otherwise: bb48];
    }

    bb38 (cleanup): {
        _52 = const false;
        goto -> bb39;
    }

    bb39 (cleanup): {
        _75 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_75) as variant#3).1: bool) = const false;
        _78 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        switchInt((((*_78) as variant#3).2: bool)) -> [0: bb40, otherwise: bb49];
    }

    bb40 (cleanup): {
        _76 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        (((*_76) as variant#3).2: bool) = const false;
        _79 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        discriminant((*_79)) = 2;
        resume;
    }

    bb41: {
        _51 = const false;
        _42 = move _23;
        _41 = <WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>> as StreamExt>::split::<Message>(move _42) -> [return: bb26, unwind: bb45];
    }

    bb42 (cleanup): {
        drop(_40) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_39) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_23) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_51) -> [0: bb35, otherwise: bb44];
    }

    bb46 (cleanup): {
        drop(_5) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        _77 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:42:29: 63:6});
        switchInt((((*_77) as variant#3).1: bool)) -> [0: bb39, otherwise: bb46];
    }

    bb48 (cleanup): {
        drop(_11) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_3) -> [return: bb40, unwind terminate(cleanup)];
    }

    bb50: {
        _54 = move _2;
        goto -> bb16;
    }

    bb51: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb51, unwind continue];
    }

    bb52: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb52, unwind continue];
    }

    bb53: {
        goto -> bb28;
    }

    bb54: {
        goto -> bb28;
    }
}

fn websocket_transport::<impl at sdk/client/src/stream/websocket_transport.rs:38:1: 38:24>::send(_1: &mut WebsocketTransport, _2: std::string::String) -> {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6} {
    debug self => _1;
    debug request_json => _2;
    let mut _0: {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6 (#0)} { self: move _1, request_json: move _2 };
        return;
    }
}

fn websocket_transport::<impl at sdk/client/src/stream/websocket_transport.rs:38:1: 38:24>::send::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<(), StreamError>> {
    debug _task_context => _22;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6})).0: &mut stream::websocket_transport::WebsocketTransport);
    debug request_json => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6})).1: std::string::String);
    let mut _0: std::task::Poll<std::result::Result<(), error::StreamError>>;
    let _3: &mut stream::websocket_transport::WebsocketTransport;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::StreamError>>;
    let mut _6: std::result::Result<(), error::StreamError>;
    let mut _7: futures::sink::Send<'_, futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>, tokio_tungstenite::tungstenite::Message>;
    let mut _8: futures::sink::Send<'_, futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>, tokio_tungstenite::tungstenite::Message>;
    let mut _9: &mut futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>;
    let mut _10: tokio_tungstenite::tungstenite::Message;
    let mut _11: std::task::Poll<std::result::Result<(), tokio_tungstenite::tungstenite::Error>>;
    let mut _12: std::pin::Pin<&mut futures::sink::Send<'_, futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>, tokio_tungstenite::tungstenite::Message>>;
    let mut _13: &mut futures::sink::Send<'_, futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>, tokio_tungstenite::tungstenite::Message>;
    let mut _14: &mut std::task::Context<'_>;
    let mut _15: isize;
    let mut _17: isize;
    let mut _20: ();
    let mut _21: std::result::Result<(), error::StreamError>;
    let mut _22: &mut std::task::Context<'_>;
    let mut _23: u32;
    let mut _24: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    let mut _25: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    let mut _26: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    let mut _27: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    let mut _28: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    let mut _29: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    let mut _30: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    let mut _31: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    let mut _32: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    let mut _33: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    scope 1 {
        debug self => _3;
        let _4: std::string::String;
        scope 2 {
            debug request_json => _4;
            let _18: std::result::Result<std::convert::Infallible, error::StreamError>;
            let _19: ();
            scope 3 {
                debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6})) as variant#3).0: futures::sink::Send<'_, futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>, tokio_tungstenite::tungstenite::Message>);
                let _16: std::result::Result<(), tokio_tungstenite::tungstenite::Error>;
                scope 4 {
                }
                scope 5 {
                    debug result => _16;
                }
            }
            scope 6 {
                debug residual => _18;
                scope 7 {
                }
            }
            scope 8 {
                debug val => _19;
                scope 9 {
                }
            }
        }
    }

    bb0: {
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6});
        _23 = discriminant((*_24));
        switchInt(move _23) -> [0: bb1, 1: bb21, 2: bb20, 3: bb19, otherwise: bb9];
    }

    bb1: {
        _22 = move _2;
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6});
        _3 = move ((*_25).0: &mut stream::websocket_transport::WebsocketTransport);
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6});
        _4 = move ((*_26).1: std::string::String);
        _9 = &mut ((*_3).1: futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>);
        _10 = Message::text::<std::string::String>(move _4) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        _8 = <SplitSink<WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>, Message> as SinkExt<Message>>::send(move _9, move _10) -> [return: bb3, unwind: bb18];
    }

    bb3: {
        _7 = <futures::sink::Send<'_, SplitSink<WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>, Message>, Message> as std::future::IntoFuture>::into_future(move _8) -> [return: bb4, unwind: bb18];
    }

    bb4: {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6});
        (((*_27) as variant#3).0: futures::sink::Send<'_, futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>, tokio_tungstenite::tungstenite::Message>) = move _7;
        goto -> bb5;
    }

    bb5: {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6});
        _13 = &mut (((*_28) as variant#3).0: futures::sink::Send<'_, futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>, tokio_tungstenite::tungstenite::Message>);
        _12 = Pin::<&mut futures::sink::Send<'_, SplitSink<WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>, Message>, Message>>::new_unchecked(_13) -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _14 = _22;
        _11 = <futures::sink::Send<'_, SplitSink<WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>, Message>, Message> as futures::Future>::poll(move _12, _14) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _15 = discriminant(_11);
        switchInt(move _15) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<(), StreamError>>::Pending;
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6});
        discriminant((*_29)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _16 = move ((_11 as Ready).0: std::result::Result<(), tokio_tungstenite::tungstenite::Error>);
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6});
        drop((((*_30) as variant#3).0: futures::sink::Send<'_, futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>, tokio_tungstenite::tungstenite::Message>)) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _6 = std::result::Result::<(), tokio_tungstenite::tungstenite::Error>::map_err::<StreamError, fn(tokio_tungstenite::tungstenite::Error) -> StreamError {StreamError::encode::<tokio_tungstenite::tungstenite::Error>}>(move _16, StreamError::encode::<tokio_tungstenite::tungstenite::Error>) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        _5 = <std::result::Result<(), StreamError> as Try>::branch(move _6) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        _17 = discriminant(_5);
        switchInt(move _17) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        _19 = ((_5 as Continue).0: ());
        _20 = ();
        _21 = std::result::Result::<(), StreamError>::Ok(move _20);
        goto -> bb16;
    }

    bb15: {
        _18 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::StreamError>);
        _21 = <std::result::Result<(), StreamError> as FromResidual<std::result::Result<Infallible, StreamError>>>::from_residual(move _18) -> [return: bb22, unwind: bb18];
    }

    bb16: {
        _0 = Poll::<std::result::Result<(), StreamError>>::Ready(move _21);
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6});
        discriminant((*_31)) = 1;
        return;
    }

    bb17 (cleanup): {
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6});
        drop((((*_32) as variant#3).0: futures::sink::Send<'_, futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>, tokio_tungstenite::tungstenite::Message>)) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6});
        discriminant((*_33)) = 2;
        resume;
    }

    bb19: {
        _22 = move _2;
        goto -> bb5;
    }

    bb20: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb20, unwind continue];
    }

    bb21: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb21, unwind continue];
    }

    bb22: {
        goto -> bb16;
    }
}

fn websocket_transport::<impl at sdk/client/src/stream/websocket_transport.rs:38:1: 38:24>::send_method_request(_1: &mut WebsocketTransport, _2: StreamMethodRequest, _3: std::option::Option<diem_json_rpc_types::Id>) -> {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6} {
    debug self => _1;
    debug request => _2;
    debug id => _3;
    let mut _0: {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6 (#0)} { self: move _1, request: _2, id: move _3 };
        return;
    }
}

fn websocket_transport::<impl at sdk/client/src/stream/websocket_transport.rs:38:1: 38:24>::send_method_request::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<diem_json_rpc_types::Id, StreamError>> {
    debug _task_context => _18;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6})).0: &mut stream::websocket_transport::WebsocketTransport);
    debug request => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6})).1: diem_json_rpc_types::stream::request::StreamMethodRequest);
    debug id => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6})).2: std::option::Option<diem_json_rpc_types::Id>);
    let mut _0: std::task::Poll<std::result::Result<diem_json_rpc_types::Id, error::StreamError>>;
    let mut _5: {closure@sdk/client/src/stream/websocket_transport.rs:78:36: 78:38};
    let mut _6: &&mut stream::websocket_transport::WebsocketTransport;
    let mut _7: diem_json_rpc_types::Id;
    let mut _8: &diem_json_rpc_types::Id;
    let mut _9: {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _10: {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let _11: &diem_json_rpc_types::stream::request::StreamJsonRpcRequest;
    let mut _12: std::task::Poll<std::result::Result<diem_json_rpc_types::Id, error::StreamError>>;
    let mut _13: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6}>;
    let mut _14: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _15: &mut std::task::Context<'_>;
    let mut _16: isize;
    let mut _18: &mut std::task::Context<'_>;
    let mut _19: u32;
    let mut _20: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _21: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _22: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _23: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _24: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _25: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _26: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _27: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _28: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _29: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _30: &mut stream::websocket_transport::WebsocketTransport;
    let mut _31: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _32: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _33: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _34: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _35: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _36: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _37: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _38: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _39: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _40: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _41: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _42: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _43: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _44: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    let mut _45: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6})) as variant#3).0: &mut stream::websocket_transport::WebsocketTransport);
        let _3: diem_json_rpc_types::stream::request::StreamMethodRequest;
        scope 2 {
            debug request => _3;
            let _4: std::option::Option<diem_json_rpc_types::Id>;
            scope 3 {
                debug id => _4;
                scope 4 {
                    debug id => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6})) as variant#3).1: diem_json_rpc_types::Id);
                    scope 5 {
                        debug request => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6})) as variant#3).2: diem_json_rpc_types::stream::request::StreamJsonRpcRequest);
                        scope 6 {
                            debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6})) as variant#3).3: {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
                            let _17: std::result::Result<diem_json_rpc_types::Id, error::StreamError>;
                            scope 7 {
                            }
                            scope 8 {
                                debug result => _17;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _20 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        _19 = discriminant((*_20));
        switchInt(move _19) -> [0: bb1, 1: bb25, 2: bb24, 3: bb23, otherwise: bb11];
    }

    bb1: {
        _18 = move _2;
        _21 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        _22 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        (((*_21) as variant#3).0: &mut stream::websocket_transport::WebsocketTransport) = move ((*_22).0: &mut stream::websocket_transport::WebsocketTransport);
        _23 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        _3 = ((*_23).1: diem_json_rpc_types::stream::request::StreamMethodRequest);
        _24 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        _4 = move ((*_24).2: std::option::Option<diem_json_rpc_types::Id>);
        _25 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        _6 = &(((*_25) as variant#3).0: &mut stream::websocket_transport::WebsocketTransport);
        _5 = {closure@sdk/client/src/stream/websocket_transport.rs:78:36: 78:38} { self: move _6 };
        _26 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        (((*_26) as variant#3).1: diem_json_rpc_types::Id) = std::option::Option::<diem_json_rpc_types::Id>::unwrap_or_else::<{closure@sdk/client/src/stream/websocket_transport.rs:78:36: 78:38}>(move _4, move _5) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _27 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        _8 = &(((*_27) as variant#3).1: diem_json_rpc_types::Id);
        _7 = <diem_json_rpc_types::Id as Clone>::clone(move _8) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        _28 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        (((*_28) as variant#3).2: diem_json_rpc_types::stream::request::StreamJsonRpcRequest) = StreamJsonRpcRequest::new(_3, move _7) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        _30 = deref_copy (((*_29) as variant#3).0: &mut stream::websocket_transport::WebsocketTransport);
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        _11 = &(((*_31) as variant#3).2: diem_json_rpc_types::stream::request::StreamJsonRpcRequest);
        _10 = WebsocketTransport::send_request(_30, _11) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _9 = <{async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6} as std::future::IntoFuture>::into_future(move _10) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        (((*_32) as variant#3).3: {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6}) = move _9;
        goto -> bb7;
    }

    bb7: {
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        _14 = &mut (((*_33) as variant#3).3: {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        _13 = Pin::<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6}>::new_unchecked(_14) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _15 = _18;
        _12 = <{async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6} as futures::Future>::poll(move _13, _15) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb12, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _0 = Poll::<std::result::Result<diem_json_rpc_types::Id, StreamError>>::Pending;
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        discriminant((*_34)) = 3;
        return;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _17 = move ((_12 as Ready).0: std::result::Result<diem_json_rpc_types::Id, error::StreamError>);
        _35 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        drop((((*_35) as variant#3).3: {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6})) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _36 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        drop((((*_36) as variant#3).2: diem_json_rpc_types::stream::request::StreamJsonRpcRequest)) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        _37 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        drop((((*_37) as variant#3).1: diem_json_rpc_types::Id)) -> [return: bb15, unwind: bb22];
    }

    bb15: {
        _0 = Poll::<std::result::Result<diem_json_rpc_types::Id, StreamError>>::Ready(move _17);
        _38 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        discriminant((*_38)) = 1;
        return;
    }

    bb16 (cleanup): {
        _39 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        drop((((*_39) as variant#3).3: {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6})) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _40 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        drop((((*_40) as variant#3).2: diem_json_rpc_types::stream::request::StreamJsonRpcRequest)) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        _41 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        drop((((*_41) as variant#3).1: diem_json_rpc_types::Id)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        _42 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        drop((((*_42) as variant#3).2: diem_json_rpc_types::stream::request::StreamJsonRpcRequest)) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        _43 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        drop((((*_43) as variant#3).1: diem_json_rpc_types::Id)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        _44 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        drop((((*_44) as variant#3).1: diem_json_rpc_types::Id)) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        _45 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:77:27: 81:6});
        discriminant((*_45)) = 2;
        resume;
    }

    bb23: {
        _18 = move _2;
        goto -> bb7;
    }

    bb24: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb24, unwind continue];
    }

    bb25: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb25, unwind continue];
    }
}

fn websocket_transport::<impl at sdk/client/src/stream/websocket_transport.rs:38:1: 38:24>::send_method_request::{closure#0}::{closure#0}(_1: {closure@sdk/client/src/stream/websocket_transport.rs:78:36: 78:38}) -> diem_json_rpc_types::Id {
    debug self => (*(_1.0: &&mut stream::websocket_transport::WebsocketTransport));
    let mut _0: diem_json_rpc_types::Id;
    let mut _2: &stream::websocket_transport::WebsocketTransport;
    let mut _3: &&mut stream::websocket_transport::WebsocketTransport;
    let mut _4: &mut stream::websocket_transport::WebsocketTransport;

    bb0: {
        _3 = deref_copy (_1.0: &&mut stream::websocket_transport::WebsocketTransport);
        _4 = deref_copy (*_3);
        _2 = &(*_4);
        _0 = WebsocketTransport::get_next_id(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn websocket_transport::<impl at sdk/client/src/stream/websocket_transport.rs:38:1: 38:24>::send_request(_1: &mut WebsocketTransport, _2: &StreamJsonRpcRequest) -> {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6} {
    debug self => _1;
    debug request => _2;
    let mut _0: {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};

    bb0: {
        _0 = {coroutine@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6 (#0)} { self: move _1, request: _2 };
        return;
    }
}

fn websocket_transport::<impl at sdk/client/src/stream/websocket_transport.rs:38:1: 38:24>::send_request::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6}>, _2: &mut Context<'_>) -> Poll<std::result::Result<diem_json_rpc_types::Id, StreamError>> {
    debug _task_context => _27;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6})).0: &mut stream::websocket_transport::WebsocketTransport);
    debug request => ((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6})).1: &diem_json_rpc_types::stream::request::StreamJsonRpcRequest);
    let mut _0: std::task::Poll<std::result::Result<diem_json_rpc_types::Id, error::StreamError>>;
    let _3: &mut stream::websocket_transport::WebsocketTransport;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, serde_json::Error>, std::string::String>;
    let mut _6: std::result::Result<std::string::String, serde_json::Error>;
    let _7: &&diem_json_rpc_types::stream::request::StreamJsonRpcRequest;
    let mut _8: isize;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::StreamError>>;
    let mut _12: {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    let mut _13: {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    let mut _14: std::string::String;
    let mut _15: std::task::Poll<std::result::Result<(), error::StreamError>>;
    let mut _16: std::pin::Pin<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6}>;
    let mut _17: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6};
    let mut _18: &mut std::task::Context<'_>;
    let mut _19: isize;
    let mut _21: isize;
    let mut _24: diem_json_rpc_types::Id;
    let mut _25: &diem_json_rpc_types::Id;
    let mut _26: std::result::Result<diem_json_rpc_types::Id, error::StreamError>;
    let mut _27: &mut std::task::Context<'_>;
    let mut _28: u32;
    let mut _29: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _30: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _31: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _32: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _33: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _34: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _35: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _36: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _37: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _38: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _39: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _40: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _41: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _42: &diem_json_rpc_types::stream::request::StreamJsonRpcRequest;
    let mut _43: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _44: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _45: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _46: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _47: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _48: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    let mut _49: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6};
    scope 1 {
        debug self => _3;
        scope 2 {
            debug request => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6})) as variant#3).0: &diem_json_rpc_types::stream::request::StreamJsonRpcRequest);
            let _4: std::string::String;
            let _9: std::result::Result<std::convert::Infallible, serde_json::Error>;
            let _10: std::string::String;
            scope 3 {
                debug json => _4;
                let _22: std::result::Result<std::convert::Infallible, error::StreamError>;
                let _23: ();
                scope 8 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6})) as variant#3).1: {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6});
                    let _20: std::result::Result<(), error::StreamError>;
                    scope 9 {
                    }
                    scope 10 {
                        debug result => _20;
                    }
                }
                scope 11 {
                    debug residual => _22;
                    scope 12 {
                    }
                }
                scope 13 {
                    debug val => _23;
                    scope 14 {
                    }
                }
            }
            scope 4 {
                debug residual => _9;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _10;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _29 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        _28 = discriminant((*_29));
        switchInt(move _28) -> [0: bb1, 1: bb27, 2: bb26, 3: bb25, otherwise: bb5];
    }

    bb1: {
        _27 = move _2;
        _30 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        (((*_30) as variant#3).2: bool) = const false;
        _31 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        _3 = move ((*_31).0: &mut stream::websocket_transport::WebsocketTransport);
        _32 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        _33 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        (((*_32) as variant#3).0: &diem_json_rpc_types::stream::request::StreamJsonRpcRequest) = ((*_33).1: &diem_json_rpc_types::stream::request::StreamJsonRpcRequest);
        _34 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        _7 = &(((*_34) as variant#3).0: &diem_json_rpc_types::stream::request::StreamJsonRpcRequest);
        _6 = serde_json::to_string::<&StreamJsonRpcRequest>(_7) -> [return: bb2, unwind: bb22];
    }

    bb2: {
        _5 = <std::result::Result<std::string::String, serde_json::Error> as Try>::branch(move _6) -> [return: bb3, unwind: bb22];
    }

    bb3: {
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        _10 = move ((_5 as Continue).0: std::string::String);
        _35 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        (((*_35) as variant#3).2: bool) = const true;
        _4 = move _10;
        _36 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        (((*_36) as variant#3).2: bool) = const false;
        _14 = move _4;
        _13 = WebsocketTransport::send(_3, move _14) -> [return: bb7, unwind: bb24];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, serde_json::Error>);
        _26 = <std::result::Result<diem_json_rpc_types::Id, StreamError> as FromResidual<std::result::Result<Infallible, serde_json::Error>>>::from_residual(move _9) -> [return: bb28, unwind: bb22];
    }

    bb7: {
        _12 = <{async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6} as std::future::IntoFuture>::into_future(move _13) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _37 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        (((*_37) as variant#3).1: {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6}) = move _12;
        goto -> bb9;
    }

    bb9: {
        _38 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        _17 = &mut (((*_38) as variant#3).1: {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6});
        _16 = Pin::<&mut {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6}>::new_unchecked(_17) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        _18 = _27;
        _15 = <{async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6} as futures::Future>::poll(move _16, _18) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        _19 = discriminant(_15);
        switchInt(move _19) -> [0: bb13, 1: bb12, otherwise: bb5];
    }

    bb12: {
        _0 = Poll::<std::result::Result<diem_json_rpc_types::Id, StreamError>>::Pending;
        _39 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        discriminant((*_39)) = 3;
        return;
    }

    bb13: {
        _20 = move ((_15 as Ready).0: std::result::Result<(), error::StreamError>);
        _40 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        drop((((*_40) as variant#3).1: {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6})) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        _11 = <std::result::Result<(), StreamError> as Try>::branch(move _20) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        _21 = discriminant(_11);
        switchInt(move _21) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        _23 = ((_11 as Continue).0: ());
        _41 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        _42 = deref_copy (((*_41) as variant#3).0: &diem_json_rpc_types::stream::request::StreamJsonRpcRequest);
        _25 = &((*_42).2: diem_json_rpc_types::Id);
        _24 = <diem_json_rpc_types::Id as Clone>::clone(move _25) -> [return: bb18, unwind: bb24];
    }

    bb17: {
        _22 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::StreamError>);
        _26 = <std::result::Result<diem_json_rpc_types::Id, StreamError> as FromResidual<std::result::Result<Infallible, StreamError>>>::from_residual(move _22) -> [return: bb29, unwind: bb24];
    }

    bb18: {
        _26 = std::result::Result::<diem_json_rpc_types::Id, StreamError>::Ok(move _24);
        _43 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        (((*_43) as variant#3).2: bool) = const false;
        goto -> bb20;
    }

    bb19: {
        _44 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        (((*_44) as variant#3).2: bool) = const false;
        goto -> bb20;
    }

    bb20: {
        _0 = Poll::<std::result::Result<diem_json_rpc_types::Id, StreamError>>::Ready(move _26);
        _45 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        discriminant((*_45)) = 1;
        return;
    }

    bb21 (cleanup): {
        _46 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        drop((((*_46) as variant#3).1: {async fn body@sdk/client/src/stream/websocket_transport.rs:65:76: 71:6})) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        _47 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        (((*_47) as variant#3).2: bool) = const false;
        _49 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        discriminant((*_49)) = 2;
        resume;
    }

    bb23 (cleanup): {
        drop(_4) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        _48 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/stream/websocket_transport.rs:83:94: 87:6});
        switchInt((((*_48) as variant#3).2: bool)) -> [0: bb22, otherwise: bb23];
    }

    bb25: {
        _27 = move _2;
        goto -> bb9;
    }

    bb26: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb26, unwind continue];
    }

    bb27: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb27, unwind continue];
    }

    bb28: {
        goto -> bb19;
    }

    bb29: {
        goto -> bb19;
    }
}

fn websocket_transport::<impl at sdk/client/src/stream/websocket_transport.rs:38:1: 38:24>::get_next_id(_1: &WebsocketTransport) -> diem_json_rpc_types::Id {
    debug self => _1;
    let mut _0: diem_json_rpc_types::Id;
    let _2: u64;
    let mut _3: &std::sync::atomic::AtomicU64;
    let mut _4: std::sync::atomic::Ordering;
    scope 1 {
        debug id => _2;
    }

    bb0: {
        _3 = &((*_1).2: std::sync::atomic::AtomicU64);
        _4 = Relaxed;
        _2 = AtomicU64::fetch_add(move _3, const 1_u64, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = diem_json_rpc_types::Id::Number(_2);
        return;
    }
}

fn websocket_transport::<impl at sdk/client/src/stream/websocket_transport.rs:38:1: 38:24>::get_stream(_1: WebsocketTransport) -> (tokio::sync::mpsc::Receiver<std::result::Result<StreamJsonRpcResponse, StreamError>>, WebsocketTransport) {
    debug self => _1;
    let mut _0: (tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>, stream::websocket_transport::WebsocketTransport);
    let _2: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let _3: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _4: (tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>, tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
    let mut _6: std::option::Option<futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>;
    let _7: &str;
    let mut _8: std::option::Option<futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>;
    let mut _9: std::option::Option<tokio::task::JoinHandle<()>>;
    let mut _10: tokio::task::JoinHandle<()>;
    let mut _11: {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _12: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _13: stream::websocket_transport::WebsocketTransport;
    let mut _14: bool;
    let mut _15: bool;
    scope 1 {
        debug sender => _2;
        debug receiver => _3;
        let mut _5: futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>;
        scope 2 {
            debug stream => _5;
        }
    }

    bb0: {
        _14 = const false;
        _15 = const false;
        _15 = const true;
        _4 = tokio::sync::mpsc::channel::<std::result::Result<StreamJsonRpcResponse, StreamError>>(const 100_usize) -> [return: bb1, unwind: bb13];
    }

    bb1: {
        _14 = const true;
        _2 = move (_4.0: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _3 = move (_4.1: tokio::sync::mpsc::Receiver<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _15 = const false;
        _6 = move (_1.0: std::option::Option<futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>);
        _7 = const "Stream is `None`: it has already been consumed";
        _5 = std::option::Option::<SplitStream<WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>>>::expect(move _6, _7) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _8 = std::option::Option::<SplitStream<WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>>>::None;
        _15 = const true;
        (_1.0: std::option::Option<futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>) = move _8;
        _14 = const false;
        _11 = {coroutine@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10 (#0)} { stream: move _5, sender: move _2 };
        _10 = tokio::spawn::<{async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10}>(move _11) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _9 = std::option::Option::<tokio::task::JoinHandle<()>>::Some(move _10);
        drop((_1.3: std::option::Option<tokio::task::JoinHandle<()>>)) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        (_1.3: std::option::Option<tokio::task::JoinHandle<()>>) = move _9;
        _12 = move _3;
        _15 = const false;
        _13 = move _1;
        _0 = (move _12, move _13);
        _14 = const false;
        return;
    }

    bb5 (cleanup): {
        (_1.3: std::option::Option<tokio::task::JoinHandle<()>>) = move _9;
        goto -> bb6;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        switchInt(_14) -> [0: bb13, otherwise: bb8];
    }

    bb10 (cleanup): {
        drop((_1.3: std::option::Option<tokio::task::JoinHandle<()>>)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop((_1.1: futures::stream::SplitSink<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>, tokio_tungstenite::tungstenite::Message>)) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop((_1.0: std::option::Option<futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>)) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        switchInt(_15) -> [0: bb11, otherwise: bb12];
    }
}

fn websocket_transport::<impl at sdk/client/src/stream/websocket_transport.rs:38:1: 38:24>::get_stream::{closure#0}(_1: Pin<&mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10}>, _2: &mut Context<'_>) -> Poll<()> {
    debug _task_context => _83;
    debug stream => ((*(_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10})).0: futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>);
    debug sender => ((*(_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10})).1: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
    let mut _0: std::task::Poll<()>;
    let mut _3: futures::stream::Next<'_, futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>;
    let mut _4: futures::stream::Next<'_, futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>;
    let mut _5: &mut futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>;
    let mut _6: std::task::Poll<std::option::Option<std::result::Result<tokio_tungstenite::tungstenite::Message, tokio_tungstenite::tungstenite::Error>>>;
    let mut _7: std::pin::Pin<&mut futures::stream::Next<'_, futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>>;
    let mut _8: &mut futures::stream::Next<'_, futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>;
    let mut _9: &mut std::task::Context<'_>;
    let mut _10: isize;
    let mut _12: isize;
    let _13: std::option::Option<()>;
    let mut _14: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _15: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _16: &tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _17: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>;
    let mut _18: error::StreamError;
    let mut _19: std::option::Option<error::StreamError>;
    let mut _20: std::task::Poll<std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>;
    let mut _21: std::pin::Pin<&mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}}>;
    let mut _22: &mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _23: &mut std::task::Context<'_>;
    let mut _24: isize;
    let mut _26: isize;
    let mut _27: bool;
    let mut _28: &tokio_tungstenite::tungstenite::Message;
    let mut _29: std::result::Result<&str, tokio_tungstenite::tungstenite::Error>;
    let mut _30: &tokio_tungstenite::tungstenite::Message;
    let mut _31: isize;
    let mut _34: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
    let mut _35: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _36: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _37: &tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _38: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>;
    let mut _39: std::task::Poll<std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>;
    let mut _40: std::pin::Pin<&mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}}>;
    let mut _41: &mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _42: &mut std::task::Context<'_>;
    let mut _43: isize;
    let _45: std::option::Option<()>;
    let mut _46: isize;
    let mut _48: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _49: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _50: &tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _51: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>;
    let mut _52: std::task::Poll<std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>;
    let mut _53: std::pin::Pin<&mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}}>;
    let mut _54: &mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _55: &mut std::task::Context<'_>;
    let mut _56: isize;
    let mut _59: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _60: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _61: &tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _62: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>;
    let mut _63: error::StreamError;
    let mut _64: std::task::Poll<std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>;
    let mut _65: std::pin::Pin<&mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}}>;
    let mut _66: &mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _67: &mut std::task::Context<'_>;
    let mut _68: isize;
    let mut _71: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
    let mut _72: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _73: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _74: &tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>;
    let mut _75: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>;
    let mut _76: error::StreamError;
    let mut _77: std::task::Poll<std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>>;
    let mut _78: std::pin::Pin<&mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}}>;
    let mut _79: &mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}};
    let mut _80: &mut std::task::Context<'_>;
    let mut _81: isize;
    let mut _83: &mut std::task::Context<'_>;
    let mut _84: u32;
    let mut _85: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _86: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _87: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _88: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _89: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _90: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _91: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _92: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _93: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _94: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _95: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _96: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _97: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _98: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _99: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _100: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _101: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _102: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _103: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _104: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _105: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _106: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _107: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _108: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _109: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _110: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _111: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _112: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _113: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _114: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _115: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _116: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _117: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _118: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _119: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _120: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _121: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _122: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _123: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _124: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _125: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _126: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _127: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _128: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _129: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _130: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _131: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _132: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _133: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _134: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _135: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _136: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _137: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _138: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _139: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _140: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _141: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _142: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    let mut _143: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10};
    scope 1 {
        debug __awaitee => (((*(_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10})) as variant#3).0: futures::stream::Next<'_, futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>);
        let _11: std::option::Option<std::result::Result<tokio_tungstenite::tungstenite::Message, tokio_tungstenite::tungstenite::Error>>;
        scope 2 {
        }
        scope 3 {
            debug result => _11;
        }
    }
    scope 4 {
        debug __awaitee => (((*(_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10})) as variant#4).1: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}});
        let _25: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
        scope 5 {
        }
        scope 6 {
            debug result => _25;
        }
    }
    scope 7 {
        debug msg => (((*(_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10})) as variant#5).1: std::result::Result<tokio_tungstenite::tungstenite::Message, tokio_tungstenite::tungstenite::Error>);
        let _70: tokio_tungstenite::tungstenite::Error;
        scope 8 {
            debug msg => (((*(_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10})) as variant#5).2: tokio_tungstenite::tungstenite::Message);
            let _32: &str;
            let _33: error::StreamError;
            scope 9 {
                debug msg => _32;
                let _47: diem_json_rpc_types::stream::response::StreamJsonRpcResponse;
                let _58: serde_json::Error;
                scope 16 {
                    debug msg => _47;
                    scope 17 {
                        debug __awaitee => (((*(_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10})) as variant#6).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}});
                        let _57: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
                        scope 18 {
                        }
                        scope 19 {
                            debug result => _57;
                        }
                    }
                }
                scope 20 {
                    debug e => _58;
                    scope 21 {
                        debug __awaitee => (((*(_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10})) as variant#7).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}});
                        let _69: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
                        scope 22 {
                        }
                        scope 23 {
                            debug result => _69;
                        }
                    }
                }
            }
            scope 10 {
                debug msg => _32;
            }
            scope 11 {
                debug e => _33;
                scope 12 {
                }
                scope 13 {
                    debug __awaitee => (((*(_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10})) as variant#5).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}});
                    let _44: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
                    scope 14 {
                    }
                    scope 15 {
                        debug result => _44;
                    }
                }
            }
        }
        scope 24 {
            debug e => _70;
            scope 25 {
            }
            scope 26 {
                debug __awaitee => (((*(_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10})) as variant#8).2: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}});
                let _82: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>;
                scope 27 {
                }
                scope 28 {
                    debug result => _82;
                }
            }
        }
    }

    bb0: {
        _85 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _84 = discriminant((*_85));
        switchInt(move _84) -> [0: bb1, 2: bb84, 3: bb78, 4: bb79, 5: bb80, 6: bb81, 7: bb82, 8: bb83, otherwise: bb9];
    }

    bb1: {
        _83 = move _2;
        goto -> bb2;
    }

    bb2: {
        _86 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _5 = &mut ((*_86).0: futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>);
        _4 = <SplitStream<WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>> as StreamExt>::next(move _5) -> [return: bb3, unwind: bb75];
    }

    bb3: {
        _3 = <Next<'_, SplitStream<WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>>> as std::future::IntoFuture>::into_future(move _4) -> [return: bb4, unwind: bb75];
    }

    bb4: {
        _87 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        (((*_87) as variant#3).0: futures::stream::Next<'_, futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>) = move _3;
        goto -> bb5;
    }

    bb5: {
        _88 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _8 = &mut (((*_88) as variant#3).0: futures::stream::Next<'_, futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>>);
        _7 = Pin::<&mut Next<'_, SplitStream<WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>>>>::new_unchecked(_8) -> [return: bb6, unwind: bb75];
    }

    bb6: {
        _9 = _83;
        _6 = <Next<'_, SplitStream<WebSocketStream<MaybeTlsStream<tokio::net::TcpStream>>>> as futures::Future>::poll(move _7, _9) -> [return: bb7, unwind: bb75];
    }

    bb7: {
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<()>::Pending;
        _90 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        discriminant((*_90)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _11 = move ((_6 as Ready).0: std::option::Option<std::result::Result<tokio_tungstenite::tungstenite::Message, tokio_tungstenite::tungstenite::Error>>);
        _89 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        (((*_89) as variant#4).0: std::option::Option<std::result::Result<tokio_tungstenite::tungstenite::Message, tokio_tungstenite::tungstenite::Error>>) = move _11;
        _91 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _12 = discriminant((((*_91) as variant#4).0: std::option::Option<std::result::Result<tokio_tungstenite::tungstenite::Message, tokio_tungstenite::tungstenite::Error>>));
        switchInt(move _12) -> [0: bb12, 1: bb11, otherwise: bb9];
    }

    bb11: {
        _92 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _93 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        (((*_92) as variant#5).1: std::result::Result<tokio_tungstenite::tungstenite::Message, tokio_tungstenite::tungstenite::Error>) = move (((((*_93) as variant#4).0: std::option::Option<std::result::Result<tokio_tungstenite::tungstenite::Message, tokio_tungstenite::tungstenite::Error>>) as Some).0: std::result::Result<tokio_tungstenite::tungstenite::Message, tokio_tungstenite::tungstenite::Error>);
        _94 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _26 = discriminant((((*_94) as variant#5).1: std::result::Result<tokio_tungstenite::tungstenite::Message, tokio_tungstenite::tungstenite::Error>));
        switchInt(move _26) -> [0: bb23, 1: bb22, otherwise: bb9];
    }

    bb12: {
        _95 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _16 = &((*_95).1: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _19 = std::option::Option::<StreamError>::None;
        _18 = StreamError::connection_closed::<StreamError>(move _19) -> [return: bb13, unwind: bb75];
    }

    bb13: {
        _17 = std::result::Result::<StreamJsonRpcResponse, StreamError>::Err(move _18);
        _15 = tokio::sync::mpsc::Sender::<std::result::Result<StreamJsonRpcResponse, StreamError>>::send(move _16, move _17) -> [return: bb14, unwind: bb75];
    }

    bb14: {
        _14 = <{async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}} as std::future::IntoFuture>::into_future(move _15) -> [return: bb15, unwind: bb75];
    }

    bb15: {
        _96 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        (((*_96) as variant#4).1: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}}) = move _14;
        goto -> bb16;
    }

    bb16: {
        _97 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _22 = &mut (((*_97) as variant#4).1: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}});
        _21 = Pin::<&mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}}>::new_unchecked(_22) -> [return: bb17, unwind: bb74];
    }

    bb17: {
        _23 = _83;
        _20 = <{async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}} as futures::Future>::poll(move _21, _23) -> [return: bb18, unwind: bb74];
    }

    bb18: {
        _24 = discriminant(_20);
        switchInt(move _24) -> [0: bb20, 1: bb19, otherwise: bb9];
    }

    bb19: {
        _0 = Poll::<()>::Pending;
        _98 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        discriminant((*_98)) = 4;
        return;
    }

    bb20: {
        _25 = move ((_20 as Ready).0: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>);
        _99 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_99) as variant#4).1: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}})) -> [return: bb21, unwind: bb75];
    }

    bb21: {
        _13 = std::result::Result::<(), tokio::sync::mpsc::error::SendError<std::result::Result<StreamJsonRpcResponse, StreamError>>>::ok(move _25) -> [return: bb85, unwind: bb75];
    }

    bb22: {
        _100 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _70 = move (((((*_100) as variant#5).1: std::result::Result<tokio_tungstenite::tungstenite::Message, tokio_tungstenite::tungstenite::Error>) as Err).0: tokio_tungstenite::tungstenite::Error);
        _101 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _74 = &((*_101).1: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _76 = StreamError::from_tungstenite_error(move _70) -> [return: bb60, unwind: bb75];
    }

    bb23: {
        _102 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _103 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        (((*_102) as variant#5).2: tokio_tungstenite::tungstenite::Message) = move (((((*_103) as variant#5).1: std::result::Result<tokio_tungstenite::tungstenite::Message, tokio_tungstenite::tungstenite::Error>) as Ok).0: tokio_tungstenite::tungstenite::Message);
        _104 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _28 = &(((*_104) as variant#5).2: tokio_tungstenite::tungstenite::Message);
        _27 = Message::is_text(move _28) -> [return: bb24, unwind: bb73];
    }

    bb24: {
        switchInt(move _27) -> [0: bb59, otherwise: bb25];
    }

    bb25: {
        _105 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _30 = &(((*_105) as variant#5).2: tokio_tungstenite::tungstenite::Message);
        _29 = Message::to_text(move _30) -> [return: bb26, unwind: bb73];
    }

    bb26: {
        _106 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        (((*_106) as variant#5).3: std::result::Result<&str, error::StreamError>) = std::result::Result::<&str, tokio_tungstenite::tungstenite::Error>::map_err::<StreamError, fn(tokio_tungstenite::tungstenite::Error) -> StreamError {StreamError::from_tungstenite_error}>(move _29, StreamError::from_tungstenite_error) -> [return: bb27, unwind: bb73];
    }

    bb27: {
        _107 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _31 = discriminant((((*_107) as variant#5).3: std::result::Result<&str, error::StreamError>));
        switchInt(move _31) -> [0: bb29, 1: bb28, otherwise: bb9];
    }

    bb28: {
        _108 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _33 = move (((((*_108) as variant#5).3: std::result::Result<&str, error::StreamError>) as Err).0: error::StreamError);
        _109 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _37 = &((*_109).1: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _38 = std::result::Result::<StreamJsonRpcResponse, StreamError>::Err(move _33);
        _36 = tokio::sync::mpsc::Sender::<std::result::Result<StreamJsonRpcResponse, StreamError>>::send(move _37, move _38) -> [return: bb30, unwind: bb73];
    }

    bb29: {
        _110 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _32 = (((((*_110) as variant#5).3: std::result::Result<&str, error::StreamError>) as Ok).0: &str);
        _115 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        (((*_115) as variant#6).3: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, serde_json::Error>) = <StreamJsonRpcResponse as FromStr>::from_str(_32) -> [return: bb39, unwind: bb73];
    }

    bb30: {
        _35 = <{async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}} as std::future::IntoFuture>::into_future(move _36) -> [return: bb31, unwind: bb73];
    }

    bb31: {
        _111 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        (((*_111) as variant#5).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}}) = move _35;
        goto -> bb32;
    }

    bb32: {
        _112 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _41 = &mut (((*_112) as variant#5).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}});
        _40 = Pin::<&mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}}>::new_unchecked(_41) -> [return: bb33, unwind: bb72];
    }

    bb33: {
        _42 = _83;
        _39 = <{async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}} as futures::Future>::poll(move _40, _42) -> [return: bb34, unwind: bb72];
    }

    bb34: {
        _43 = discriminant(_39);
        switchInt(move _43) -> [0: bb36, 1: bb35, otherwise: bb9];
    }

    bb35: {
        _0 = Poll::<()>::Pending;
        _113 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        discriminant((*_113)) = 5;
        return;
    }

    bb36: {
        _44 = move ((_39 as Ready).0: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>);
        _34 = move _44;
        _114 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_114) as variant#5).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}})) -> [return: bb37, unwind: bb73];
    }

    bb37: {
        drop(_34) -> [return: bb38, unwind: bb73];
    }

    bb38: {
        _134 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_134) as variant#5).2: tokio_tungstenite::tungstenite::Message)) -> [return: bb2, unwind: bb75];
    }

    bb39: {
        _116 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _46 = discriminant((((*_116) as variant#6).3: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, serde_json::Error>));
        switchInt(move _46) -> [0: bb41, 1: bb40, otherwise: bb9];
    }

    bb40: {
        _117 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _58 = move (((((*_117) as variant#6).3: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, serde_json::Error>) as Err).0: serde_json::Error);
        _118 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _61 = &((*_118).1: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _63 = <StreamError as From<serde_json::Error>>::from(move _58) -> [return: bb50, unwind: bb73];
    }

    bb41: {
        _119 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _47 = move (((((*_119) as variant#6).3: std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, serde_json::Error>) as Ok).0: diem_json_rpc_types::stream::response::StreamJsonRpcResponse);
        _120 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _50 = &((*_120).1: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>);
        _51 = std::result::Result::<StreamJsonRpcResponse, StreamError>::Ok(move _47);
        _49 = tokio::sync::mpsc::Sender::<std::result::Result<StreamJsonRpcResponse, StreamError>>::send(move _50, move _51) -> [return: bb42, unwind: bb73];
    }

    bb42: {
        _48 = <{async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}} as std::future::IntoFuture>::into_future(move _49) -> [return: bb43, unwind: bb73];
    }

    bb43: {
        _121 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        (((*_121) as variant#6).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}}) = move _48;
        goto -> bb44;
    }

    bb44: {
        _122 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _54 = &mut (((*_122) as variant#6).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}});
        _53 = Pin::<&mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}}>::new_unchecked(_54) -> [return: bb45, unwind: bb71];
    }

    bb45: {
        _55 = _83;
        _52 = <{async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}} as futures::Future>::poll(move _53, _55) -> [return: bb46, unwind: bb71];
    }

    bb46: {
        _56 = discriminant(_52);
        switchInt(move _56) -> [0: bb48, 1: bb47, otherwise: bb9];
    }

    bb47: {
        _0 = Poll::<()>::Pending;
        _123 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        discriminant((*_123)) = 6;
        return;
    }

    bb48: {
        _57 = move ((_52 as Ready).0: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>);
        _124 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_124) as variant#6).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}})) -> [return: bb49, unwind: bb73];
    }

    bb49: {
        _45 = std::result::Result::<(), tokio::sync::mpsc::error::SendError<std::result::Result<StreamJsonRpcResponse, StreamError>>>::ok(move _57) -> [return: bb86, unwind: bb73];
    }

    bb50: {
        _62 = std::result::Result::<StreamJsonRpcResponse, StreamError>::Err(move _63);
        _60 = tokio::sync::mpsc::Sender::<std::result::Result<StreamJsonRpcResponse, StreamError>>::send(move _61, move _62) -> [return: bb51, unwind: bb73];
    }

    bb51: {
        _59 = <{async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}} as std::future::IntoFuture>::into_future(move _60) -> [return: bb52, unwind: bb73];
    }

    bb52: {
        _125 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        (((*_125) as variant#7).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}}) = move _59;
        goto -> bb53;
    }

    bb53: {
        _126 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _66 = &mut (((*_126) as variant#7).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}});
        _65 = Pin::<&mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}}>::new_unchecked(_66) -> [return: bb54, unwind: bb70];
    }

    bb54: {
        _67 = _83;
        _64 = <{async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}} as futures::Future>::poll(move _65, _67) -> [return: bb55, unwind: bb70];
    }

    bb55: {
        _68 = discriminant(_64);
        switchInt(move _68) -> [0: bb57, 1: bb56, otherwise: bb9];
    }

    bb56: {
        _0 = Poll::<()>::Pending;
        _127 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        discriminant((*_127)) = 7;
        return;
    }

    bb57: {
        _69 = move ((_64 as Ready).0: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>);
        _128 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_128) as variant#7).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}})) -> [return: bb58, unwind: bb73];
    }

    bb58: {
        _45 = std::result::Result::<(), tokio::sync::mpsc::error::SendError<std::result::Result<StreamJsonRpcResponse, StreamError>>>::ok(move _69) -> [return: bb87, unwind: bb73];
    }

    bb59: {
        _129 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_129) as variant#5).2: tokio_tungstenite::tungstenite::Message)) -> [return: bb2, unwind: bb75];
    }

    bb60: {
        _75 = std::result::Result::<StreamJsonRpcResponse, StreamError>::Err(move _76);
        _73 = tokio::sync::mpsc::Sender::<std::result::Result<StreamJsonRpcResponse, StreamError>>::send(move _74, move _75) -> [return: bb61, unwind: bb75];
    }

    bb61: {
        _72 = <{async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}} as std::future::IntoFuture>::into_future(move _73) -> [return: bb62, unwind: bb75];
    }

    bb62: {
        _130 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        (((*_130) as variant#8).2: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}}) = move _72;
        goto -> bb63;
    }

    bb63: {
        _131 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        _79 = &mut (((*_131) as variant#8).2: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}});
        _78 = Pin::<&mut {async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}}>::new_unchecked(_79) -> [return: bb64, unwind: bb69];
    }

    bb64: {
        _80 = _83;
        _77 = <{async fn body@tokio::sync::mpsc::Sender<std::result::Result<StreamJsonRpcResponse, StreamError>>::send::{closure#0}} as futures::Future>::poll(move _78, _80) -> [return: bb65, unwind: bb69];
    }

    bb65: {
        _81 = discriminant(_77);
        switchInt(move _81) -> [0: bb67, 1: bb66, otherwise: bb9];
    }

    bb66: {
        _0 = Poll::<()>::Pending;
        _132 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        discriminant((*_132)) = 8;
        return;
    }

    bb67: {
        _82 = move ((_77 as Ready).0: std::result::Result<(), tokio::sync::mpsc::error::SendError<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>>);
        _71 = move _82;
        _133 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_133) as variant#8).2: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}})) -> [return: bb68, unwind: bb75];
    }

    bb68: {
        drop(_71) -> [return: bb2, unwind: bb75];
    }

    bb69 (cleanup): {
        _135 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_135) as variant#8).2: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}})) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        _136 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_136) as variant#7).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}})) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        _137 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_137) as variant#6).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}})) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        _138 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_138) as variant#5).4: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}})) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        _139 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_139) as variant#5).2: tokio_tungstenite::tungstenite::Message)) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        _140 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop((((*_140) as variant#4).1: {async fn body@tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>::send::{closure#0}})) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        _142 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop(((*_142).0: futures::stream::SplitStream<tokio_tungstenite::WebSocketStream<tokio_tungstenite::MaybeTlsStream<tokio::net::TcpStream>>>)) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        _143 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        discriminant((*_143)) = 2;
        resume;
    }

    bb77 (cleanup): {
        _141 = deref_copy (_1.0: &mut {async block@sdk/client/src/stream/websocket_transport.rs:115:53: 151:10});
        drop(((*_141).1: tokio::sync::mpsc::Sender<std::result::Result<diem_json_rpc_types::stream::response::StreamJsonRpcResponse, error::StreamError>>)) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb78: {
        _83 = move _2;
        goto -> bb5;
    }

    bb79: {
        _83 = move _2;
        goto -> bb16;
    }

    bb80: {
        _83 = move _2;
        goto -> bb32;
    }

    bb81: {
        _83 = move _2;
        goto -> bb44;
    }

    bb82: {
        _83 = move _2;
        goto -> bb53;
    }

    bb83: {
        _83 = move _2;
        goto -> bb63;
    }

    bb84: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb84, unwind continue];
    }

    bb85: {
        goto -> bb2;
    }

    bb86: {
        goto -> bb59;
    }

    bb87: {
        goto -> bb59;
    }
}

fn state::<impl at sdk/client/src/state.rs:7:10: 7:15>::fmt(_1: &state::State, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &u8;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &u64;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let _12: &&u64;
    let _13: &u64;

    bb0: {
        _3 = const "State";
        _4 = const "chain_id";
        _6 = &((*_1).0: u8);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "version";
        _9 = &((*_1).1: u64);
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _10 = const "timestamp_usecs";
        _13 = &((*_1).2: u64);
        _12 = &_13;
        _11 = _12 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field3_finish(_2, _3, _4, move _5, _7, move _8, _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn state::<impl at sdk/client/src/state.rs:7:17: 7:22>::clone(_1: &state::State) -> state::State {
    debug self => _1;
    let mut _0: state::State;
    let mut _2: u8;
    let _3: &u8;
    let mut _4: u64;
    let _5: &u64;
    let mut _6: u64;
    let _7: &u64;

    bb0: {
        _3 = &((*_1).0: u8);
        _2 = (*_3);
        _5 = &((*_1).1: u64);
        _4 = (*_5);
        _7 = &((*_1).2: u64);
        _6 = (*_7);
        _0 = state::State { chain_id: move _2, version: move _4, timestamp_usecs: move _6 };
        return;
    }
}

fn state::<impl at sdk/client/src/state.rs:7:24: 7:26>::assert_receiver_is_total_eq(_1: &state::State) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;
    }
}

fn state::<impl at sdk/client/src/state.rs:7:28: 7:37>::eq(_1: &state::State, _2: &state::State) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u8;
    let mut _5: u8;
    let mut _6: bool;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: u64;

    bb0: {
        _4 = ((*_1).0: u8);
        _5 = ((*_2).0: u8);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        _7 = ((*_1).1: u64);
        _8 = ((*_2).1: u64);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = ((*_1).2: u64);
        _10 = ((*_2).2: u64);
        _0 = Eq(move _9, move _10);
        goto -> bb4;
    }

    bb3: {
        _0 = const false;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn state::<impl at sdk/client/src/state.rs:7:39: 7:42>::cmp(_1: &state::State, _2: &state::State) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let mut _3: std::cmp::Ordering;
    let _4: &u8;
    let _5: &u8;
    let mut _6: i8;
    let mut _7: std::cmp::Ordering;
    let _8: &u64;
    let _9: &u64;
    let mut _10: i8;
    let _11: &u64;
    let _12: &u64;
    scope 1 {
        debug cmp => _7;
    }
    scope 2 {
        debug cmp => _3;
    }

    bb0: {
        _4 = &((*_1).0: u8);
        _5 = &((*_2).0: u8);
        _3 = <u8 as Ord>::cmp(_4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = _3;
        goto -> bb7;
    }

    bb3: {
        _8 = &((*_1).1: u64);
        _9 = &((*_2).1: u64);
        _7 = <u64 as Ord>::cmp(_8, _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _0 = _7;
        goto -> bb7;
    }

    bb6: {
        _11 = &((*_1).2: u64);
        _12 = &((*_2).2: u64);
        _0 = <u64 as Ord>::cmp(_11, _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn state::<impl at sdk/client/src/state.rs:7:44: 7:54>::partial_cmp(_1: &state::State, _2: &state::State) -> std::option::Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let mut _3: std::option::Option<std::cmp::Ordering>;
    let _4: &u8;
    let _5: &u8;
    let mut _6: i8;
    let mut _7: isize;
    let mut _8: std::option::Option<std::cmp::Ordering>;
    let _9: &u64;
    let _10: &u64;
    let mut _11: i8;
    let mut _12: isize;
    let _13: &u64;
    let _14: &u64;
    scope 1 {
        debug cmp => _8;
    }
    scope 2 {
        debug cmp => _3;
    }

    bb0: {
        _4 = &((*_1).0: u8);
        _5 = &((*_2).0: u8);
        _3 = <u8 as PartialOrd>::partial_cmp(_4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = discriminant(_3);
        switchInt(move _7) -> [1: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = _3;
        goto -> bb9;
    }

    bb3: {
        _6 = discriminant(((_3 as Some).0: std::cmp::Ordering));
        switchInt(move _6) -> [0: bb4, otherwise: bb2];
    }

    bb4: {
        _9 = &((*_1).1: u64);
        _10 = &((*_2).1: u64);
        _8 = <u64 as PartialOrd>::partial_cmp(_9, _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = discriminant(_8);
        switchInt(move _12) -> [1: bb7, otherwise: bb6];
    }

    bb6: {
        _0 = _8;
        goto -> bb9;
    }

    bb7: {
        _11 = discriminant(((_8 as Some).0: std::cmp::Ordering));
        switchInt(move _11) -> [0: bb8, otherwise: bb6];
    }

    bb8: {
        _13 = &((*_1).2: u64);
        _14 = &((*_2).2: u64);
        _0 = <u64 as PartialOrd>::partial_cmp(_13, _14) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

fn state::<impl at sdk/client/src/state.rs:14:1: 14:11>::from_response(_1: &JsonRpcResponse) -> state::State {
    debug resp => _1;
    let mut _0: state::State;
    let mut _2: u8;
    let mut _3: u64;
    let mut _4: u64;

    bb0: {
        _2 = ((*_1).0: u8);
        _3 = ((*_1).1: u64);
        _4 = ((*_1).2: u64);
        _0 = state::State { chain_id: move _2, version: move _3, timestamp_usecs: move _4 };
        return;
    }
}

fn state::<impl at sdk/client/src/state.rs:27:14: 27:19>::fmt(_1: &StateManager, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&std::sync::Mutex<std::option::Option<state::State>>;
    let _7: &std::sync::Mutex<std::option::Option<state::State>>;

    bb0: {
        _3 = const "StateManager";
        _4 = const "last_known_state";
        _7 = &((*_1).0: std::sync::Mutex<std::option::Option<state::State>>);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn state::<impl at sdk/client/src/state.rs:32:5: 32:32>::clone(_1: &StateManager) -> StateManager {
    debug self => _1;
    let mut _0: state::StateManager;

    bb0: {
        _0 = <StateManager as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn state::<impl at sdk/client/src/state.rs:38:5: 38:34>::default() -> StateManager {
    let mut _0: state::StateManager;
    let mut _1: std::sync::Mutex<std::option::Option<state::State>>;
    let mut _2: std::option::Option<state::State>;

    bb0: {
        _2 = std::option::Option::<state::State>::None;
        _1 = std::sync::Mutex::<std::option::Option<state::State>>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = StateManager { last_known_state: move _1 };
        return;
    }
}

fn state::<impl at sdk/client/src/state.rs:46:5: 46:22>::new() -> StateManager {
    let mut _0: state::StateManager;

    bb0: {
        _0 = <StateManager as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn state::<impl at sdk/client/src/state.rs:46:5: 46:22>::last_known_state(_1: &StateManager) -> std::option::Option<state::State> {
    debug self => _1;
    let mut _0: std::option::Option<state::State>;
    let _2: &std::option::Option<state::State>;
    let mut _3: &std::sync::MutexGuard<'_, std::option::Option<state::State>>;
    let _4: std::sync::MutexGuard<'_, std::option::Option<state::State>>;
    let mut _5: std::result::Result<std::sync::MutexGuard<'_, std::option::Option<state::State>>, std::sync::PoisonError<std::sync::MutexGuard<'_, std::option::Option<state::State>>>>;
    let mut _6: &std::sync::Mutex<std::option::Option<state::State>>;

    bb0: {
        _6 = &((*_1).0: std::sync::Mutex<std::option::Option<state::State>>);
        _5 = std::sync::Mutex::<std::option::Option<state::State>>::lock(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = std::result::Result::<std::sync::MutexGuard<'_, std::option::Option<state::State>>, PoisonError<std::sync::MutexGuard<'_, std::option::Option<state::State>>>>::unwrap(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _2 = <std::sync::MutexGuard<'_, std::option::Option<state::State>> as Deref>::deref(move _3) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _0 = <std::option::Option<state::State> as Clone>::clone(_2) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_4) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn state::<impl at sdk/client/src/state.rs:46:5: 46:22>::update_state(_1: &StateManager, _2: bool, _3: std::option::Option<&state::State>, _4: &state::State) -> std::result::Result<(), error::Error> {
    debug self => _1;
    debug ignore_stale => _2;
    debug req_state => _3;
    debug resp_state => _4;
    let mut _0: std::result::Result<(), error::Error>;
    let mut _5: isize;
    let mut _7: bool;
    let mut _8: &&state::State;
    let mut _9: &&state::State;
    let _10: &state::State;
    let mut _11: error::Error;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 2];
    let _17: [core::fmt::rt::Argument<'_>; 2];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &&state::State;
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &&state::State;
    let mut _22: std::sync::MutexGuard<'_, std::option::Option<state::State>>;
    let mut _23: std::result::Result<std::sync::MutexGuard<'_, std::option::Option<state::State>>, std::sync::PoisonError<std::sync::MutexGuard<'_, std::option::Option<state::State>>>>;
    let mut _24: &std::sync::Mutex<std::option::Option<state::State>>;
    let _26: &std::option::Option<state::State>;
    let mut _27: &std::sync::MutexGuard<'_, std::option::Option<state::State>>;
    let mut _28: bool;
    let mut _29: &std::option::Option<&state::State>;
    let mut _30: &std::option::Option<&state::State>;
    let _31: std::option::Option<&state::State>;
    let mut _32: &std::option::Option<state::State>;
    let _33: !;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 2];
    let _38: [core::fmt::rt::Argument<'_>; 2];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &std::option::Option<&state::State>;
    let mut _41: core::fmt::rt::Argument<'_>;
    let _42: &&std::option::Option<state::State>;
    let mut _44: isize;
    let mut _46: bool;
    let mut _47: u8;
    let mut _48: u8;
    let mut _49: error::Error;
    let mut _50: u8;
    let mut _51: u8;
    let mut _52: &state::State;
    let _53: &state::State;
    let mut _54: std::option::Option<state::State>;
    let mut _55: state::State;
    let mut _56: &state::State;
    let mut _57: &mut std::option::Option<state::State>;
    let mut _58: &mut std::sync::MutexGuard<'_, std::option::Option<state::State>>;
    scope 1 {
        debug req_state => _6;
        let _6: &state::State;
        let _12: std::string::String;
        let mut _60: &[&str; 2];
        scope 2 {
            debug res => _12;
        }
    }
    scope 3 {
        debug state_writer => _22;
        let _25: &std::option::Option<state::State>;
        scope 4 {
            debug curr_state => _25;
            let _43: &state::State;
            let mut _59: &[&str; 2];
            scope 5 {
                debug new_state => _43;
            }
            scope 6 {
                debug curr_state => _45;
                let _45: &state::State;
            }
        }
    }

    bb0: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [1: bb1, otherwise: bb10];
    }

    bb1: {
        _6 = ((_3 as Some).0: &state::State);
        switchInt(_2) -> [0: bb2, otherwise: bb10];
    }

    bb2: {
        _8 = &_4;
        _10 = _6;
        _9 = &_10;
        _7 = <&state::State as PartialOrd>::lt(move _8, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _7) -> [0: bb10, otherwise: bb4];
    }

    bb4: {
        _60 = const _;
        _14 = _60 as &[&str] (PointerCoercion(Unsize));
        _19 = &_4;
        _18 = core::fmt::rt::Argument::<'_>::new_debug::<&state::State>(_19) -> [return: bb5, unwind continue];
    }

    bb5: {
        _21 = &_6;
        _20 = core::fmt::rt::Argument::<'_>::new_debug::<&state::State>(_21) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = [move _18, move _20];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        _12 = format(move _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        _11 = error::Error::stale::<std::string::String>(move _12) -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = std::result::Result::<(), error::Error>::Err(move _11);
        goto -> bb29;
    }

    bb10: {
        _24 = &((*_1).0: std::sync::Mutex<std::option::Option<state::State>>);
        _23 = std::sync::Mutex::<std::option::Option<state::State>>::lock(move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        _22 = std::result::Result::<std::sync::MutexGuard<'_, std::option::Option<state::State>>, PoisonError<std::sync::MutexGuard<'_, std::option::Option<state::State>>>>::unwrap(move _23) -> [return: bb12, unwind continue];
    }

    bb12: {
        _27 = &_22;
        _26 = <std::sync::MutexGuard<'_, std::option::Option<state::State>> as Deref>::deref(move _27) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        _25 = _26;
        _29 = &_3;
        _32 = _25;
        _31 = std::option::Option::<state::State>::as_ref(move _32) -> [return: bb14, unwind: bb30];
    }

    bb14: {
        _30 = &_31;
        _28 = <std::option::Option<&state::State> as PartialOrd>::le(move _29, move _30) -> [return: bb15, unwind: bb30];
    }

    bb15: {
        switchInt(move _28) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _44 = discriminant((*_25));
        switchInt(move _44) -> [1: bb22, otherwise: bb21];
    }

    bb17: {
        _59 = const _;
        _35 = _59 as &[&str] (PointerCoercion(Unsize));
        _40 = &_3;
        _39 = core::fmt::rt::Argument::<'_>::new_debug::<std::option::Option<&state::State>>(_40) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        _42 = &_25;
        _41 = core::fmt::rt::Argument::<'_>::new_debug::<&std::option::Option<state::State>>(_42) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _38 = [move _39, move _41];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _34 = Arguments::<'_>::new_v1(move _35, move _36) -> [return: bb20, unwind: bb30];
    }

    bb20: {
        _33 = panic_fmt(move _34) -> bb30;
    }

    bb21: {
        _53 = _4;
        _43 = _53;
        goto -> bb26;
    }

    bb22: {
        _45 = &(((*_25) as Some).0: state::State);
        _47 = ((*_45).0: u8);
        _48 = ((*_4).0: u8);
        _46 = Ne(move _47, move _48);
        switchInt(move _46) -> [0: bb25, otherwise: bb23];
    }

    bb23: {
        _50 = ((*_45).0: u8);
        _51 = ((*_4).0: u8);
        _49 = error::Error::chain_id(move _50, move _51) -> [return: bb24, unwind: bb30];
    }

    bb24: {
        _0 = std::result::Result::<(), error::Error>::Err(move _49);
        drop(_22) -> [return: bb29, unwind continue];
    }

    bb25: {
        _52 = _4;
        _43 = std::cmp::max::<&state::State>(_45, move _52) -> [return: bb32, unwind: bb30];
    }

    bb26: {
        _56 = _43;
        _55 = <state::State as Clone>::clone(move _56) -> [return: bb27, unwind: bb30];
    }

    bb27: {
        _54 = std::option::Option::<state::State>::Some(move _55);
        _58 = &mut _22;
        _57 = <std::sync::MutexGuard<'_, std::option::Option<state::State>> as DerefMut>::deref_mut(move _58) -> [return: bb28, unwind: bb30];
    }

    bb28: {
        (*_57) = move _54;
        _0 = std::result::Result::<(), error::Error>::Ok(const ());
        drop(_22) -> [return: bb29, unwind continue];
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_22) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32: {
        goto -> bb26;
    }
}

promoted[0] in state::<impl at sdk/client/src/state.rs:46:5: 46:22>::update_state: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "request state is not an ancestor state of the current latest state: request state: ", const ", current state: "];
        _0 = &_1;
        return;
    }
}

promoted[1] in state::<impl at sdk/client/src/state.rs:46:5: 46:22>::update_state: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "received response with stale metadata: ", const ", expected a response more recent than: "];
        _0 = &_1;
        return;
    }
}

fn retry::<impl at sdk/client/src/retry.rs:10:10: 10:15>::clone(_1: &retry::Retry) -> retry::Retry {
    debug self => _1;
    let mut _0: retry::Retry;
    let mut _2: u32;
    let _3: &u32;
    let mut _4: std::time::Duration;
    let _5: &std::time::Duration;

    bb0: {
        _3 = &((*_1).0: u32);
        _2 = (*_3);
        _5 = &((*_1).1: std::time::Duration);
        _4 = <Duration as Clone>::clone(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = retry::Retry { max_retries: move _2, delay: move _4 };
        return;
    }
}

fn retry::<impl at sdk/client/src/retry.rs:10:17: 10:22>::fmt(_1: &retry::Retry, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &u32;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&std::time::Duration;
    let _10: &std::time::Duration;

    bb0: {
        _3 = const "Retry";
        _4 = const "max_retries";
        _6 = &((*_1).0: u32);
        _5 = _6 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _7 = const "delay";
        _10 = &((*_1).1: std::time::Duration);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn retry::<impl at sdk/client/src/retry.rs:16:1: 16:23>::default() -> retry::Retry {
    let mut _0: retry::Retry;
    let mut _1: std::time::Duration;

    bb0: {
        _1 = Duration::from_millis(const 500_u64) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = retry::Retry::new(const 20_u32, move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn retry::<impl at sdk/client/src/retry.rs:22:1: 22:11>::new(_1: u32, _2: Duration) -> retry::Retry {
    debug max_retries => _1;
    debug delay => _2;
    let mut _0: retry::Retry;

    bb0: {
        _0 = retry::Retry { max_retries: _1, delay: _2 };
        return;
    }
}

fn retry::<impl at sdk/client/src/retry.rs:22:1: 22:11>::max_retries(_1: &retry::Retry) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = ((*_1).0: u32);
        return;
    }
}

fn retry::<impl at sdk/client/src/retry.rs:22:1: 22:11>::delay(_1: &retry::Retry) -> Duration {
    debug self => _1;
    let mut _0: std::time::Duration;

    bb0: {
        _0 = ((*_1).1: std::time::Duration);
        return;
    }
}

fn retry::<impl at sdk/client/src/retry.rs:22:1: 22:11>::next_delay(_1: &retry::Retry, _2: u32) -> Duration {
    debug self => _1;
    debug remaining_attempts => _2;
    let mut _0: std::time::Duration;
    let mut _3: std::time::Duration;
    let mut _4: u32;
    let mut _5: u32;

    bb0: {
        _3 = ((*_1).1: std::time::Duration);
        _5 = ((*_1).0: u32);
        _4 = core::num::<impl u32>::saturating_sub(move _5, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <Duration as Mul<u32>>::mul(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn retry::<impl at sdk/client/src/retry.rs:22:1: 22:11>::retry(_1: &retry::Retry, _2: F) -> std::result::Result<T, error::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<T, error::Error>;
    let mut _3: u32;
    let mut _4: std::result::Result<T, error::Error>;
    let mut _5: &F;
    let mut _6: isize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: u32;
    let mut _13: u32;
    let mut _14: u32;
    let _15: ();
    let mut _16: std::time::Duration;
    let mut _17: u32;
    let mut _19: bool;
    let mut _20: isize;
    scope 1 {
        debug remaining_attempts => _3;
        let _7: T;
        let _8: error::Error;
        let _9: &error::Error;
        let _18: error::Error;
        scope 2 {
            debug r => _7;
        }
        scope 3 {
            debug error => _8;
            debug error => _9;
        }
        scope 4 {
            debug error => _18;
        }
    }

    bb0: {
        _19 = const false;
        _3 = retry::Retry::max_retries(_1) -> [return: bb22, unwind: bb17];
    }

    bb1: {
        _5 = &_2;
        _4 = <F as Fn<()>>::call(move _5, const ()) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _19 = const true;
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb4, 1: bb5, otherwise: bb3];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _7 = move ((_4 as Ok).0: T);
        _0 = std::result::Result::<T, error::Error>::Ok(move _7);
        goto -> bb14;
    }

    bb5: {
        _9 = &((_4 as Err).0: error::Error);
        _10 = error::Error::is_retriable(_9) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        switchInt(move _10) -> [0: bb9, otherwise: bb7];
    }

    bb7: {
        _12 = _3;
        _11 = Gt(move _12, const 0_u32);
        switchInt(move _11) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _19 = const false;
        _8 = move ((_4 as Err).0: error::Error);
        _14 = _3;
        _13 = core::num::<impl u32>::saturating_sub(move _14, const 1_u32) -> [return: bb10, unwind: bb16];
    }

    bb9: {
        _19 = const false;
        _18 = move ((_4 as Err).0: error::Error);
        _0 = std::result::Result::<T, error::Error>::Err(move _18);
        goto -> bb14;
    }

    bb10: {
        _3 = move _13;
        _17 = _3;
        _16 = retry::Retry::next_delay(_1, move _17) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _15 = std::thread::sleep(move _16) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        drop(_8) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        _19 = const false;
        goto -> bb1;
    }

    bb14: {
        _19 = const false;
        drop(_2) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_8) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        switchInt(_19) -> [0: bb17, otherwise: bb20];
    }

    bb20 (cleanup): {
        drop(((_4 as Err).0: error::Error)) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        _20 = discriminant(_4);
        switchInt(move _20) -> [0: bb17, otherwise: bb19];
    }

    bb22: {
        goto -> bb1;
    }
}

fn retry::<impl at sdk/client/src/retry.rs:22:1: 22:11>::retry_async(_1: &retry::Retry, _2: F) -> {async fn body@sdk/client/src/retry.rs:65:9: 77:10} {
    debug self => _1;
    debug f => _2;
    let mut _0: {async fn body@sdk/client/src/retry.rs:65:9: 77:10};

    bb0: {
        _0 = {coroutine@sdk/client/src/retry.rs:65:9: 77:10 (#0)} { self: _1, f: move _2 };
        return;
    }
}

fn retry::<impl at sdk/client/src/retry.rs:22:1: 22:11>::retry_async::{closure#0}(_1: Pin<&mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10}>, _2: &mut Context<'_>) -> Poll<std::result::Result<T, error::Error>> {
    debug _task_context => _34;
    debug self => ((*(_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10})).0: &retry::Retry);
    debug f => ((*(_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10})).1: F);
    let mut _0: std::task::Poll<std::result::Result<T, error::Error>>;
    let mut _3: O;
    let mut _4: O;
    let mut _5: &F;
    let mut _6: ();
    let mut _7: std::task::Poll<std::result::Result<T, error::Error>>;
    let mut _8: std::pin::Pin<&mut O>;
    let mut _9: &mut O;
    let mut _10: &mut std::task::Context<'_>;
    let mut _11: isize;
    let mut _13: isize;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: u32;
    let mut _19: u32;
    let mut _20: u32;
    let mut _21: tokio::time::Sleep;
    let mut _22: tokio::time::Sleep;
    let mut _23: std::time::Duration;
    let mut _24: u32;
    let mut _25: std::task::Poll<()>;
    let mut _26: std::pin::Pin<&mut tokio::time::Sleep>;
    let mut _27: &mut tokio::time::Sleep;
    let mut _28: &mut std::task::Context<'_>;
    let mut _29: isize;
    let mut _32: isize;
    let mut _33: std::result::Result<T, error::Error>;
    let mut _34: &mut std::task::Context<'_>;
    let mut _35: u32;
    let mut _36: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _37: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _38: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _39: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _40: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _41: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _42: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _43: &retry::Retry;
    let mut _44: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _45: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _46: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _47: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _48: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _49: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _50: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _51: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _52: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _53: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _54: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _55: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _56: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _57: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _58: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _59: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _60: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _61: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _62: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _63: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _64: &retry::Retry;
    let mut _65: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _66: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _67: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _68: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _69: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _70: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _71: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _72: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _73: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _74: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _75: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _76: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _77: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _78: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _79: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _80: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _81: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _82: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    let mut _83: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10};
    scope 1 {
        debug self => (((*(_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10})) as variant#3).0: &retry::Retry);
        scope 2 {
            debug f => (((*(_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10})) as variant#3).1: F);
            scope 3 {
                debug remaining_attempts => (((*(_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10})) as variant#3).2: u32);
                let _14: T;
                let _15: &error::Error;
                let _31: error::Error;
                scope 4 {
                    debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10})) as variant#3).3: O);
                    let _12: std::result::Result<T, error::Error>;
                    scope 5 {
                    }
                    scope 6 {
                        debug result => _12;
                    }
                }
                scope 7 {
                    debug r => _14;
                }
                scope 8 {
                    debug error => (((*(_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10})) as variant#4).4: error::Error);
                    debug error => _15;
                    scope 9 {
                        debug __awaitee => (((*(_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10})) as variant#4).5: tokio::time::Sleep);
                        let _30: ();
                        scope 10 {
                        }
                        scope 11 {
                            debug result => _30;
                        }
                    }
                }
                scope 12 {
                    debug error => _31;
                }
            }
        }
    }

    bb0: {
        _36 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _35 = discriminant((*_36));
        switchInt(move _35) -> [0: bb1, 1: bb43, 2: bb42, 3: bb40, 4: bb41, otherwise: bb9];
    }

    bb1: {
        _34 = move _2;
        _37 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_37) as variant#4).6: bool) = const false;
        _38 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _39 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_38) as variant#3).0: &retry::Retry) = ((*_39).0: &retry::Retry);
        _40 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _41 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_40) as variant#3).1: F) = move ((*_41).1: F);
        _42 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _43 = deref_copy (((*_42) as variant#3).0: &retry::Retry);
        _44 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_44) as variant#3).2: u32) = retry::Retry::max_retries(_43) -> [return: bb44, unwind: bb36];
    }

    bb2: {
        _45 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _5 = &(((*_45) as variant#3).1: F);
        _6 = ();
        _4 = <F as Fn<()>>::call(move _5, move _6) -> [return: bb3, unwind: bb35];
    }

    bb3: {
        _3 = <O as std::future::IntoFuture>::into_future(move _4) -> [return: bb4, unwind: bb35];
    }

    bb4: {
        _46 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_46) as variant#3).3: O) = move _3;
        goto -> bb5;
    }

    bb5: {
        _47 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _9 = &mut (((*_47) as variant#3).3: O);
        _8 = Pin::<&mut O>::new_unchecked(_9) -> [return: bb6, unwind: bb34];
    }

    bb6: {
        _10 = _34;
        _7 = <O as futures::Future>::poll(move _8, _10) -> [return: bb7, unwind: bb34];
    }

    bb7: {
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _0 = Poll::<std::result::Result<T, error::Error>>::Pending;
        _50 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        discriminant((*_50)) = 3;
        return;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _12 = move ((_7 as Ready).0: std::result::Result<T, error::Error>);
        _48 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_48) as variant#4).6: bool) = const true;
        _49 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_49) as variant#4).3: std::result::Result<T, error::Error>) = move _12;
        _51 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        drop((((*_51) as variant#3).3: O)) -> [return: bb11, unwind: bb35];
    }

    bb11: {
        _52 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _13 = discriminant((((*_52) as variant#4).3: std::result::Result<T, error::Error>));
        switchInt(move _13) -> [0: bb12, 1: bb13, otherwise: bb9];
    }

    bb12: {
        _53 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _14 = move (((((*_53) as variant#4).3: std::result::Result<T, error::Error>) as Ok).0: T);
        _33 = std::result::Result::<T, error::Error>::Ok(move _14);
        goto -> bb29;
    }

    bb13: {
        _54 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _15 = &(((((*_54) as variant#4).3: std::result::Result<T, error::Error>) as Err).0: error::Error);
        _16 = error::Error::is_retriable(_15) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        switchInt(move _16) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        _55 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _18 = (((*_55) as variant#3).2: u32);
        _17 = Gt(move _18, const 0_u32);
        switchInt(move _17) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _56 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_56) as variant#4).6: bool) = const false;
        _57 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _58 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_57) as variant#4).4: error::Error) = move (((((*_58) as variant#4).3: std::result::Result<T, error::Error>) as Err).0: error::Error);
        _59 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _20 = (((*_59) as variant#3).2: u32);
        _19 = core::num::<impl u32>::saturating_sub(move _20, const 1_u32) -> [return: bb18, unwind: bb32];
    }

    bb17: {
        _60 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_60) as variant#4).6: bool) = const false;
        _61 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _31 = move (((((*_61) as variant#4).3: std::result::Result<T, error::Error>) as Err).0: error::Error);
        _33 = std::result::Result::<T, error::Error>::Err(move _31);
        goto -> bb29;
    }

    bb18: {
        _62 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_62) as variant#3).2: u32) = move _19;
        _63 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _64 = deref_copy (((*_63) as variant#3).0: &retry::Retry);
        _65 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _24 = (((*_65) as variant#3).2: u32);
        _23 = retry::Retry::next_delay(_64, move _24) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        _22 = tokio::time::sleep(move _23) -> [return: bb20, unwind: bb32];
    }

    bb20: {
        _21 = <Sleep as std::future::IntoFuture>::into_future(move _22) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _66 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_66) as variant#4).5: tokio::time::Sleep) = move _21;
        goto -> bb22;
    }

    bb22: {
        _67 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _27 = &mut (((*_67) as variant#4).5: tokio::time::Sleep);
        _26 = Pin::<&mut Sleep>::new_unchecked(_27) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _28 = _34;
        _25 = <Sleep as futures::Future>::poll(move _26, _28) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        _29 = discriminant(_25);
        switchInt(move _29) -> [0: bb26, 1: bb25, otherwise: bb9];
    }

    bb25: {
        _0 = Poll::<std::result::Result<T, error::Error>>::Pending;
        _68 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        discriminant((*_68)) = 4;
        return;
    }

    bb26: {
        _30 = ((_25 as Ready).0: ());
        _69 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        drop((((*_69) as variant#4).5: tokio::time::Sleep)) -> [return: bb27, unwind: bb32];
    }

    bb27: {
        _70 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        drop((((*_70) as variant#4).4: error::Error)) -> [return: bb28, unwind: bb33];
    }

    bb28: {
        _71 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_71) as variant#4).6: bool) = const false;
        goto -> bb2;
    }

    bb29: {
        _72 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_72) as variant#4).6: bool) = const false;
        _73 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        drop((((*_73) as variant#3).1: F)) -> [return: bb30, unwind: bb39];
    }

    bb30: {
        _0 = Poll::<std::result::Result<T, error::Error>>::Ready(move _33);
        _74 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        discriminant((*_74)) = 1;
        return;
    }

    bb31 (cleanup): {
        _75 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        drop((((*_75) as variant#4).5: tokio::time::Sleep)) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        _76 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        drop((((*_76) as variant#4).4: error::Error)) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        _82 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        _32 = discriminant((((*_82) as variant#4).3: std::result::Result<T, error::Error>));
        switchInt(move _32) -> [0: bb35, otherwise: bb37];
    }

    bb34 (cleanup): {
        _77 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        drop((((*_77) as variant#3).3: O)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        _78 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        (((*_78) as variant#4).6: bool) = const false;
        goto -> bb36;
    }

    bb36 (cleanup): {
        _79 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        drop((((*_79) as variant#3).1: F)) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        _81 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        switchInt((((*_81) as variant#4).6: bool)) -> [0: bb35, otherwise: bb38];
    }

    bb38 (cleanup): {
        _80 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        drop((((((*_80) as variant#4).3: std::result::Result<T, error::Error>) as Err).0: error::Error)) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        _83 = deref_copy (_1.0: &mut {async fn body@sdk/client/src/retry.rs:65:9: 77:10});
        discriminant((*_83)) = 2;
        resume;
    }

    bb40: {
        _34 = move _2;
        goto -> bb5;
    }

    bb41: {
        _34 = move _2;
        goto -> bb22;
    }

    bb42: {
        assert(const false, "`async fn` resumed after panicking") -> [success: bb42, unwind continue];
    }

    bb43: {
        assert(const false, "`async fn` resumed after completion") -> [success: bb43, unwind continue];
    }

    bb44: {
        goto -> bb2;
    }
}

const USER_AGENT: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "diem-client-sdk-rust / 0.0.2";
        return;
    }
}

fn <impl at sdk/client/src/lib.rs:64:10: 64:15>::fmt(_1: &JsonRpcVersion, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "V2";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const _: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:64:17: 64:28>::deserialize(_1: __D) -> std::result::Result<JsonRpcVersion, <__D as _::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<JsonRpcVersion, <__D as _::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_enum::<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Visitor<'_>>(move _1, const "JsonRpcVersion", const _, const _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<JsonRpcVersion>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:64:17: 64:28>::deserialize::<impl at sdk/client/src/lib.rs:64:17: 64:28>::expecting(_1: &_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__FieldVisitor, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:64:17: 64:28>::deserialize::<impl at sdk/client/src/lib.rs:64:17: 64:28>::visit_u64(_1: _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__FieldVisitor, _2: u64) -> std::result::Result<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, __E> {
    debug self => const _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<_::<impl _::_serde::Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, __E>;
    let mut _3: __E;
    let mut _4: _::_serde::de::Unexpected<'_>;
    let mut _5: &dyn _::_serde::de::Expected;
    let mut _6: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = Unexpected::<'_>::Unsigned(_2);
        _6 = const _;
        _5 = _6 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _3 = <__E as _::_serde::de::Error>::invalid_value(move _4, move _5) -> [return: bb3, unwind continue];
    }

    bb2: {
        _0 = std::result::Result::<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, __E>::Ok(const _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field::__field0);
        goto -> bb4;
    }

    bb3: {
        _0 = std::result::Result::<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, __E>::Err(move _3);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

promoted[0] in _::<impl at sdk/client/src/lib.rs:64:17: 64:28>::deserialize::<impl at sdk/client/src/lib.rs:64:17: 64:28>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 1";
        _0 = &_1;
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:64:17: 64:28>::deserialize::<impl at sdk/client/src/lib.rs:64:17: 64:28>::visit_str(_1: _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__FieldVisitor, _2: &str) -> std::result::Result<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, __E> {
    debug self => const _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<_::<impl _::_serde::Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: __E;

    bb0: {
        _3 = <str as PartialEq>::eq(_2, const "2.0") -> [return: bb3, unwind continue];
    }

    bb1: {
        _0 = std::result::Result::<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, __E>::Ok(const _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field::__field0);
        goto -> bb5;
    }

    bb2: {
        _4 = <__E as _::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb4, unwind continue];
    }

    bb3: {
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb4: {
        _0 = std::result::Result::<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, __E>::Err(move _4);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:64:17: 64:28>::deserialize::<impl at sdk/client/src/lib.rs:64:17: 64:28>::visit_bytes(_1: _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__FieldVisitor, _2: &[u8]) -> std::result::Result<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, __E> {
    debug self => const _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<_::<impl _::_serde::Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let _6: &std::borrow::Cow<'_, str>;
    let _7: std::borrow::Cow<'_, str>;
    let mut _8: __E;
    let _9: &str;
    scope 1 {
        debug __value => _6;
    }

    bb0: {
        _3 = Len((*_2));
        _4 = const 3_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 3]) -> [50: bb2, otherwise: bb4];
    }

    bb2: {
        switchInt((*_2)[1 of 3]) -> [46: bb3, otherwise: bb4];
    }

    bb3: {
        switchInt((*_2)[2 of 3]) -> [48: bb5, otherwise: bb4];
    }

    bb4: {
        _7 = from_utf8_lossy(_2) -> [return: bb6, unwind continue];
    }

    bb5: {
        _0 = std::result::Result::<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, __E>::Ok(const _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field::__field0);
        goto -> bb9;
    }

    bb6: {
        _6 = &_7;
        _9 = <Cow<'_, str> as Deref>::deref(_6) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _8 = <__E as _::_serde::de::Error>::unknown_variant(_9, const _) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        _0 = std::result::Result::<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, __E>::Err(move _8);
        drop(_7) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_7) -> [return: bb11, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        resume;
    }
}

fn _::<impl at sdk/client/src/lib.rs:64:17: 64:28>::deserialize::<impl at sdk/client/src/lib.rs:64:17: 64:28>::deserialize(_1: __D) -> std::result::Result<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, <__D as _::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<_::<impl _::_serde::Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, <__D as _::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_identifier::<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__FieldVisitor>(move _1, const _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:64:17: 64:28>::deserialize::<impl at sdk/client/src/lib.rs:64:17: 64:28>::expecting(_1: &_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "enum JsonRpcVersion";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:64:17: 64:28>::deserialize::<impl at sdk/client/src/lib.rs:64:17: 64:28>::visit_enum(_1: _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<JsonRpcVersion, <__A as EnumAccess<'_>>::Error> {
    debug self => const _::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<JsonRpcVersion>, lifetime: PhantomData::<&()> }};
    debug __data => _2;
    let mut _0: std::result::Result<JsonRpcVersion, <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _3: std::result::Result<(_::<impl _::_serde::Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, <__A as _::_serde::de::EnumAccess<'_>>::Variant), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _4: isize;
    let _5: (_::<impl _::_serde::Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, <__A as _::_serde::de::EnumAccess<'_>>::Variant);
    let _6: <__A as _::_serde::de::EnumAccess<'_>>::Error;
    let _7: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _8: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _9: isize;
    scope 1 {
        debug __val => _5;
    }
    scope 2 {
        debug __err => _6;
    }
    scope 3 {
        debug __variant => _7;
        let _10: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _10;
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<_::<impl Deserialize<'de> for JsonRpcVersion>::deserialize::__Field>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<JsonRpcVersion, <__A as EnumAccess<'_>>::Error>::Err(move _6);
        goto -> bb8;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (_::<impl _::_serde::Deserialize<'de> for JsonRpcVersion>::deserialize::__Field, <__A as _::_serde::de::EnumAccess<'_>>::Variant));
        _7 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _8 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = discriminant(_8);
        switchInt(move _9) -> [0: bb7, 1: bb6, otherwise: bb3];
    }

    bb6: {
        _10 = move ((_8 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<JsonRpcVersion, <__A as EnumAccess<'_>>::Error>::Err(move _10);
        goto -> bb8;
    }

    bb7: {
        _0 = std::result::Result::<JsonRpcVersion, <__A as EnumAccess<'_>>::Error>::Ok(const JsonRpcVersion::V2);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}

const _::<impl at sdk/client/src/lib.rs:64:17: 64:28>::deserialize::VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 1];
    let _2: &[&str; 1];
    let _3: [&str; 1];
    let mut _4: &[&str; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _::<impl at sdk/client/src/lib.rs:64:17: 64:28>::deserialize::VARIANTS: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "2.0"];
        _0 = &_1;
        return;
    }
}

const _: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:64:30: 64:39>::serialize(_1: &JsonRpcVersion, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;

    bb0: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "JsonRpcVersion", const 0_u32, const "2.0") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at sdk/client/src/lib.rs:70:10: 70:15>::fmt(_1: &Method, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;
    let _9: &str;
    let _10: &str;
    let _11: &str;
    let _12: &str;
    let _13: &str;
    let _14: &str;
    let _15: &str;
    let _16: &str;
    let _17: &str;
    let _18: &str;
    let _19: &str;
    let _20: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb1, otherwise: bb2];
    }

    bb1: {
        _20 = const "GetEventByVersionWithProof";
        _3 = _20;
        goto -> bb18;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Submit";
        _3 = _5;
        goto -> bb18;
    }

    bb4: {
        _6 = const "GetMetadata";
        _3 = _6;
        goto -> bb18;
    }

    bb5: {
        _7 = const "GetAccount";
        _3 = _7;
        goto -> bb18;
    }

    bb6: {
        _8 = const "GetTransactions";
        _3 = _8;
        goto -> bb18;
    }

    bb7: {
        _9 = const "GetAccountTransaction";
        _3 = _9;
        goto -> bb18;
    }

    bb8: {
        _10 = const "GetAccountTransactions";
        _3 = _10;
        goto -> bb18;
    }

    bb9: {
        _11 = const "GetEvents";
        _3 = _11;
        goto -> bb18;
    }

    bb10: {
        _12 = const "GetCurrencies";
        _3 = _12;
        goto -> bb18;
    }

    bb11: {
        _13 = const "GetNetworkStatus";
        _3 = _13;
        goto -> bb18;
    }

    bb12: {
        _14 = const "GetStateProof";
        _3 = _14;
        goto -> bb18;
    }

    bb13: {
        _15 = const "GetAccumulatorConsistencyProof";
        _3 = _15;
        goto -> bb18;
    }

    bb14: {
        _16 = const "GetAccountStateWithProof";
        _3 = _16;
        goto -> bb18;
    }

    bb15: {
        _17 = const "GetTransactionsWithProofs";
        _3 = _17;
        goto -> bb18;
    }

    bb16: {
        _18 = const "GetAccountTransactionsWithProofs";
        _3 = _18;
        goto -> bb18;
    }

    bb17: {
        _19 = const "GetEventsWithProofs";
        _3 = _19;
        goto -> bb18;
    }

    bb18: {
        _0 = std::fmt::Formatter::<'_>::write_str(_2, move _3) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }
}

const _: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:70:17: 70:28>::deserialize(_1: __D) -> std::result::Result<Method, <__D as _::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<Method, <__D as _::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_enum::<_::<impl Deserialize<'de> for Method>::deserialize::__Visitor<'_>>(move _1, const "Method", const _, const _::<impl Deserialize<'de> for Method>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Method>, lifetime: PhantomData::<&()> }}) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:70:17: 70:28>::deserialize::<impl at sdk/client/src/lib.rs:70:17: 70:28>::expecting(_1: &_::<impl Deserialize<'de> for Method>::deserialize::__FieldVisitor, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "variant identifier";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:70:17: 70:28>::deserialize::<impl at sdk/client/src/lib.rs:70:17: 70:28>::visit_u64(_1: _::<impl Deserialize<'de> for Method>::deserialize::__FieldVisitor, _2: u64) -> std::result::Result<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E> {
    debug self => const _::<impl Deserialize<'de> for Method>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<_::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field, __E>;
    let mut _3: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _4: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _5: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _6: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _7: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _8: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _9: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _10: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _11: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _12: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _13: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _14: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _15: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _16: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _17: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _18: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _19: __E;
    let mut _20: _::_serde::de::Unexpected<'_>;
    let mut _21: &dyn _::_serde::de::Expected;
    let mut _22: &&str;

    bb0: {
        switchInt(_2) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, 4: bb6, 5: bb7, 6: bb8, 7: bb9, 8: bb10, 9: bb11, 10: bb12, 11: bb13, 12: bb14, 13: bb15, 14: bb16, 15: bb17, otherwise: bb1];
    }

    bb1: {
        _20 = Unexpected::<'_>::Unsigned(_2);
        _22 = const _;
        _21 = _22 as &dyn _::_serde::de::Expected (PointerCoercion(Unsize));
        _19 = <__E as _::_serde::de::Error>::invalid_value(move _20, move _21) -> [return: bb18, unwind continue];
    }

    bb2: {
        _3 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field0;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _3);
        goto -> bb19;
    }

    bb3: {
        _4 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field1;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _4);
        goto -> bb19;
    }

    bb4: {
        _5 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field2;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _5);
        goto -> bb19;
    }

    bb5: {
        _6 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field3;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _6);
        goto -> bb19;
    }

    bb6: {
        _7 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field4;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _7);
        goto -> bb19;
    }

    bb7: {
        _8 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field5;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _8);
        goto -> bb19;
    }

    bb8: {
        _9 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field6;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _9);
        goto -> bb19;
    }

    bb9: {
        _10 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field7;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _10);
        goto -> bb19;
    }

    bb10: {
        _11 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field8;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _11);
        goto -> bb19;
    }

    bb11: {
        _12 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field9;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _12);
        goto -> bb19;
    }

    bb12: {
        _13 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field10;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _13);
        goto -> bb19;
    }

    bb13: {
        _14 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field11;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _14);
        goto -> bb19;
    }

    bb14: {
        _15 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field12;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _15);
        goto -> bb19;
    }

    bb15: {
        _16 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field13;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _16);
        goto -> bb19;
    }

    bb16: {
        _17 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field14;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _17);
        goto -> bb19;
    }

    bb17: {
        _18 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field15;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _18);
        goto -> bb19;
    }

    bb18: {
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Err(move _19);
        goto -> bb19;
    }

    bb19: {
        return;
    }
}

promoted[0] in _::<impl at sdk/client/src/lib.rs:70:17: 70:28>::deserialize::<impl at sdk/client/src/lib.rs:70:17: 70:28>::visit_u64: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "variant index 0 <= i < 16";
        _0 = &_1;
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:70:17: 70:28>::deserialize::<impl at sdk/client/src/lib.rs:70:17: 70:28>::visit_str(_1: _::<impl Deserialize<'de> for Method>::deserialize::__FieldVisitor, _2: &str) -> std::result::Result<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E> {
    debug self => const _::<impl Deserialize<'de> for Method>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<_::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field, __E>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _20: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _21: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _22: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _23: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _24: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _25: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _26: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _27: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _28: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _29: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _30: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _31: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _32: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _33: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _34: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _35: __E;

    bb0: {
        _18 = <str as PartialEq>::eq(_2, const "submit") -> [return: bb48, unwind continue];
    }

    bb1: {
        _19 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field0;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _19);
        goto -> bb50;
    }

    bb2: {
        _17 = <str as PartialEq>::eq(_2, const "get_metadata") -> [return: bb47, unwind continue];
    }

    bb3: {
        _20 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field1;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _20);
        goto -> bb50;
    }

    bb4: {
        _16 = <str as PartialEq>::eq(_2, const "get_account") -> [return: bb46, unwind continue];
    }

    bb5: {
        _21 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field2;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _21);
        goto -> bb50;
    }

    bb6: {
        _15 = <str as PartialEq>::eq(_2, const "get_transactions") -> [return: bb45, unwind continue];
    }

    bb7: {
        _22 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field3;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _22);
        goto -> bb50;
    }

    bb8: {
        _14 = <str as PartialEq>::eq(_2, const "get_account_transaction") -> [return: bb44, unwind continue];
    }

    bb9: {
        _23 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field4;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _23);
        goto -> bb50;
    }

    bb10: {
        _13 = <str as PartialEq>::eq(_2, const "get_account_transactions") -> [return: bb43, unwind continue];
    }

    bb11: {
        _24 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field5;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _24);
        goto -> bb50;
    }

    bb12: {
        _12 = <str as PartialEq>::eq(_2, const "get_events") -> [return: bb42, unwind continue];
    }

    bb13: {
        _25 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field6;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _25);
        goto -> bb50;
    }

    bb14: {
        _11 = <str as PartialEq>::eq(_2, const "get_currencies") -> [return: bb41, unwind continue];
    }

    bb15: {
        _26 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field7;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _26);
        goto -> bb50;
    }

    bb16: {
        _10 = <str as PartialEq>::eq(_2, const "get_network_status") -> [return: bb40, unwind continue];
    }

    bb17: {
        _27 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field8;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _27);
        goto -> bb50;
    }

    bb18: {
        _9 = <str as PartialEq>::eq(_2, const "get_state_proof") -> [return: bb39, unwind continue];
    }

    bb19: {
        _28 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field9;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _28);
        goto -> bb50;
    }

    bb20: {
        _8 = <str as PartialEq>::eq(_2, const "get_accumulator_consistency_proof") -> [return: bb38, unwind continue];
    }

    bb21: {
        _29 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field10;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _29);
        goto -> bb50;
    }

    bb22: {
        _7 = <str as PartialEq>::eq(_2, const "get_account_state_with_proof") -> [return: bb37, unwind continue];
    }

    bb23: {
        _30 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field11;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _30);
        goto -> bb50;
    }

    bb24: {
        _6 = <str as PartialEq>::eq(_2, const "get_transactions_with_proofs") -> [return: bb36, unwind continue];
    }

    bb25: {
        _31 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field12;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _31);
        goto -> bb50;
    }

    bb26: {
        _5 = <str as PartialEq>::eq(_2, const "get_account_transactions_with_proofs") -> [return: bb35, unwind continue];
    }

    bb27: {
        _32 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field13;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _32);
        goto -> bb50;
    }

    bb28: {
        _4 = <str as PartialEq>::eq(_2, const "get_events_with_proofs") -> [return: bb34, unwind continue];
    }

    bb29: {
        _33 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field14;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _33);
        goto -> bb50;
    }

    bb30: {
        _3 = <str as PartialEq>::eq(_2, const "get_event_by_version_with_proof") -> [return: bb33, unwind continue];
    }

    bb31: {
        _34 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field15;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _34);
        goto -> bb50;
    }

    bb32: {
        _35 = <__E as _::_serde::de::Error>::unknown_variant(_2, const _) -> [return: bb49, unwind continue];
    }

    bb33: {
        switchInt(move _3) -> [0: bb32, otherwise: bb31];
    }

    bb34: {
        switchInt(move _4) -> [0: bb30, otherwise: bb29];
    }

    bb35: {
        switchInt(move _5) -> [0: bb28, otherwise: bb27];
    }

    bb36: {
        switchInt(move _6) -> [0: bb26, otherwise: bb25];
    }

    bb37: {
        switchInt(move _7) -> [0: bb24, otherwise: bb23];
    }

    bb38: {
        switchInt(move _8) -> [0: bb22, otherwise: bb21];
    }

    bb39: {
        switchInt(move _9) -> [0: bb20, otherwise: bb19];
    }

    bb40: {
        switchInt(move _10) -> [0: bb18, otherwise: bb17];
    }

    bb41: {
        switchInt(move _11) -> [0: bb16, otherwise: bb15];
    }

    bb42: {
        switchInt(move _12) -> [0: bb14, otherwise: bb13];
    }

    bb43: {
        switchInt(move _13) -> [0: bb12, otherwise: bb11];
    }

    bb44: {
        switchInt(move _14) -> [0: bb10, otherwise: bb9];
    }

    bb45: {
        switchInt(move _15) -> [0: bb8, otherwise: bb7];
    }

    bb46: {
        switchInt(move _16) -> [0: bb6, otherwise: bb5];
    }

    bb47: {
        switchInt(move _17) -> [0: bb4, otherwise: bb3];
    }

    bb48: {
        switchInt(move _18) -> [0: bb2, otherwise: bb1];
    }

    bb49: {
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Err(move _35);
        goto -> bb50;
    }

    bb50: {
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:70:17: 70:28>::deserialize::<impl at sdk/client/src/lib.rs:70:17: 70:28>::visit_bytes(_1: _::<impl Deserialize<'de> for Method>::deserialize::__FieldVisitor, _2: &[u8]) -> std::result::Result<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E> {
    debug self => const _::<impl Deserialize<'de> for Method>::deserialize::__FieldVisitor;
    debug __value => _2;
    let mut _0: std::result::Result<_::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field, __E>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let mut _30: usize;
    let mut _31: usize;
    let mut _32: bool;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: usize;
    let mut _37: usize;
    let mut _38: bool;
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: bool;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: bool;
    let mut _48: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _49: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _50: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _51: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _52: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _53: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _54: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _55: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _56: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _57: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _58: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _59: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _60: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _61: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _62: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let mut _63: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field;
    let _64: &std::borrow::Cow<'_, str>;
    let _65: std::borrow::Cow<'_, str>;
    let mut _66: __E;
    let _67: &str;
    scope 1 {
        debug __value => _64;
    }

    bb0: {
        _45 = Len((*_2));
        _46 = const 6_usize;
        _47 = Eq(move _45, move _46);
        switchInt(move _47) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        switchInt((*_2)[0 of 6]) -> [115: bb2, otherwise: bb7];
    }

    bb2: {
        switchInt((*_2)[1 of 6]) -> [117: bb3, otherwise: bb7];
    }

    bb3: {
        switchInt((*_2)[2 of 6]) -> [98: bb4, otherwise: bb7];
    }

    bb4: {
        switchInt((*_2)[3 of 6]) -> [109: bb5, otherwise: bb7];
    }

    bb5: {
        switchInt((*_2)[4 of 6]) -> [105: bb6, otherwise: bb7];
    }

    bb6: {
        switchInt((*_2)[5 of 6]) -> [116: bb338, otherwise: bb7];
    }

    bb7: {
        _65 = from_utf8_lossy(_2) -> [return: bb354, unwind continue];
    }

    bb8: {
        _42 = Len((*_2));
        _43 = const 12_usize;
        _44 = Eq(move _42, move _43);
        switchInt(move _44) -> [0: bb21, otherwise: bb9];
    }

    bb9: {
        switchInt((*_2)[0 of 12]) -> [103: bb10, otherwise: bb7];
    }

    bb10: {
        switchInt((*_2)[1 of 12]) -> [101: bb11, otherwise: bb7];
    }

    bb11: {
        switchInt((*_2)[2 of 12]) -> [116: bb12, otherwise: bb7];
    }

    bb12: {
        switchInt((*_2)[3 of 12]) -> [95: bb13, otherwise: bb7];
    }

    bb13: {
        switchInt((*_2)[4 of 12]) -> [109: bb14, otherwise: bb7];
    }

    bb14: {
        switchInt((*_2)[5 of 12]) -> [101: bb15, otherwise: bb7];
    }

    bb15: {
        switchInt((*_2)[6 of 12]) -> [116: bb16, otherwise: bb7];
    }

    bb16: {
        switchInt((*_2)[7 of 12]) -> [97: bb17, otherwise: bb7];
    }

    bb17: {
        switchInt((*_2)[8 of 12]) -> [100: bb18, otherwise: bb7];
    }

    bb18: {
        switchInt((*_2)[9 of 12]) -> [97: bb19, otherwise: bb7];
    }

    bb19: {
        switchInt((*_2)[10 of 12]) -> [116: bb20, otherwise: bb7];
    }

    bb20: {
        switchInt((*_2)[11 of 12]) -> [97: bb339, otherwise: bb7];
    }

    bb21: {
        _39 = Len((*_2));
        _40 = const 11_usize;
        _41 = Eq(move _39, move _40);
        switchInt(move _41) -> [0: bb33, otherwise: bb22];
    }

    bb22: {
        switchInt((*_2)[0 of 11]) -> [103: bb23, otherwise: bb7];
    }

    bb23: {
        switchInt((*_2)[1 of 11]) -> [101: bb24, otherwise: bb7];
    }

    bb24: {
        switchInt((*_2)[2 of 11]) -> [116: bb25, otherwise: bb7];
    }

    bb25: {
        switchInt((*_2)[3 of 11]) -> [95: bb26, otherwise: bb7];
    }

    bb26: {
        switchInt((*_2)[4 of 11]) -> [97: bb27, otherwise: bb7];
    }

    bb27: {
        switchInt((*_2)[5 of 11]) -> [99: bb28, otherwise: bb7];
    }

    bb28: {
        switchInt((*_2)[6 of 11]) -> [99: bb29, otherwise: bb7];
    }

    bb29: {
        switchInt((*_2)[7 of 11]) -> [111: bb30, otherwise: bb7];
    }

    bb30: {
        switchInt((*_2)[8 of 11]) -> [117: bb31, otherwise: bb7];
    }

    bb31: {
        switchInt((*_2)[9 of 11]) -> [110: bb32, otherwise: bb7];
    }

    bb32: {
        switchInt((*_2)[10 of 11]) -> [116: bb340, otherwise: bb7];
    }

    bb33: {
        _36 = Len((*_2));
        _37 = const 16_usize;
        _38 = Eq(move _36, move _37);
        switchInt(move _38) -> [0: bb50, otherwise: bb34];
    }

    bb34: {
        switchInt((*_2)[0 of 16]) -> [103: bb35, otherwise: bb7];
    }

    bb35: {
        switchInt((*_2)[1 of 16]) -> [101: bb36, otherwise: bb7];
    }

    bb36: {
        switchInt((*_2)[2 of 16]) -> [116: bb37, otherwise: bb7];
    }

    bb37: {
        switchInt((*_2)[3 of 16]) -> [95: bb38, otherwise: bb7];
    }

    bb38: {
        switchInt((*_2)[4 of 16]) -> [116: bb39, otherwise: bb7];
    }

    bb39: {
        switchInt((*_2)[5 of 16]) -> [114: bb40, otherwise: bb7];
    }

    bb40: {
        switchInt((*_2)[6 of 16]) -> [97: bb41, otherwise: bb7];
    }

    bb41: {
        switchInt((*_2)[7 of 16]) -> [110: bb42, otherwise: bb7];
    }

    bb42: {
        switchInt((*_2)[8 of 16]) -> [115: bb43, otherwise: bb7];
    }

    bb43: {
        switchInt((*_2)[9 of 16]) -> [97: bb44, otherwise: bb7];
    }

    bb44: {
        switchInt((*_2)[10 of 16]) -> [99: bb45, otherwise: bb7];
    }

    bb45: {
        switchInt((*_2)[11 of 16]) -> [116: bb46, otherwise: bb7];
    }

    bb46: {
        switchInt((*_2)[12 of 16]) -> [105: bb47, otherwise: bb7];
    }

    bb47: {
        switchInt((*_2)[13 of 16]) -> [111: bb48, otherwise: bb7];
    }

    bb48: {
        switchInt((*_2)[14 of 16]) -> [110: bb49, otherwise: bb7];
    }

    bb49: {
        switchInt((*_2)[15 of 16]) -> [115: bb341, otherwise: bb7];
    }

    bb50: {
        _33 = Len((*_2));
        _34 = const 23_usize;
        _35 = Eq(move _33, move _34);
        switchInt(move _35) -> [0: bb74, otherwise: bb51];
    }

    bb51: {
        switchInt((*_2)[0 of 23]) -> [103: bb52, otherwise: bb7];
    }

    bb52: {
        switchInt((*_2)[1 of 23]) -> [101: bb53, otherwise: bb7];
    }

    bb53: {
        switchInt((*_2)[2 of 23]) -> [116: bb54, otherwise: bb7];
    }

    bb54: {
        switchInt((*_2)[3 of 23]) -> [95: bb55, otherwise: bb7];
    }

    bb55: {
        switchInt((*_2)[4 of 23]) -> [97: bb56, otherwise: bb7];
    }

    bb56: {
        switchInt((*_2)[5 of 23]) -> [99: bb57, otherwise: bb7];
    }

    bb57: {
        switchInt((*_2)[6 of 23]) -> [99: bb58, otherwise: bb7];
    }

    bb58: {
        switchInt((*_2)[7 of 23]) -> [111: bb59, otherwise: bb7];
    }

    bb59: {
        switchInt((*_2)[8 of 23]) -> [117: bb60, otherwise: bb7];
    }

    bb60: {
        switchInt((*_2)[9 of 23]) -> [110: bb61, otherwise: bb7];
    }

    bb61: {
        switchInt((*_2)[10 of 23]) -> [116: bb62, otherwise: bb7];
    }

    bb62: {
        switchInt((*_2)[11 of 23]) -> [95: bb63, otherwise: bb7];
    }

    bb63: {
        switchInt((*_2)[12 of 23]) -> [116: bb64, otherwise: bb7];
    }

    bb64: {
        switchInt((*_2)[13 of 23]) -> [114: bb65, otherwise: bb7];
    }

    bb65: {
        switchInt((*_2)[14 of 23]) -> [97: bb66, otherwise: bb7];
    }

    bb66: {
        switchInt((*_2)[15 of 23]) -> [110: bb67, otherwise: bb7];
    }

    bb67: {
        switchInt((*_2)[16 of 23]) -> [115: bb68, otherwise: bb7];
    }

    bb68: {
        switchInt((*_2)[17 of 23]) -> [97: bb69, otherwise: bb7];
    }

    bb69: {
        switchInt((*_2)[18 of 23]) -> [99: bb70, otherwise: bb7];
    }

    bb70: {
        switchInt((*_2)[19 of 23]) -> [116: bb71, otherwise: bb7];
    }

    bb71: {
        switchInt((*_2)[20 of 23]) -> [105: bb72, otherwise: bb7];
    }

    bb72: {
        switchInt((*_2)[21 of 23]) -> [111: bb73, otherwise: bb7];
    }

    bb73: {
        switchInt((*_2)[22 of 23]) -> [110: bb342, otherwise: bb7];
    }

    bb74: {
        _30 = Len((*_2));
        _31 = const 24_usize;
        _32 = Eq(move _30, move _31);
        switchInt(move _32) -> [0: bb99, otherwise: bb75];
    }

    bb75: {
        switchInt((*_2)[0 of 24]) -> [103: bb76, otherwise: bb7];
    }

    bb76: {
        switchInt((*_2)[1 of 24]) -> [101: bb77, otherwise: bb7];
    }

    bb77: {
        switchInt((*_2)[2 of 24]) -> [116: bb78, otherwise: bb7];
    }

    bb78: {
        switchInt((*_2)[3 of 24]) -> [95: bb79, otherwise: bb7];
    }

    bb79: {
        switchInt((*_2)[4 of 24]) -> [97: bb80, otherwise: bb7];
    }

    bb80: {
        switchInt((*_2)[5 of 24]) -> [99: bb81, otherwise: bb7];
    }

    bb81: {
        switchInt((*_2)[6 of 24]) -> [99: bb82, otherwise: bb7];
    }

    bb82: {
        switchInt((*_2)[7 of 24]) -> [111: bb83, otherwise: bb7];
    }

    bb83: {
        switchInt((*_2)[8 of 24]) -> [117: bb84, otherwise: bb7];
    }

    bb84: {
        switchInt((*_2)[9 of 24]) -> [110: bb85, otherwise: bb7];
    }

    bb85: {
        switchInt((*_2)[10 of 24]) -> [116: bb86, otherwise: bb7];
    }

    bb86: {
        switchInt((*_2)[11 of 24]) -> [95: bb87, otherwise: bb7];
    }

    bb87: {
        switchInt((*_2)[12 of 24]) -> [116: bb88, otherwise: bb7];
    }

    bb88: {
        switchInt((*_2)[13 of 24]) -> [114: bb89, otherwise: bb7];
    }

    bb89: {
        switchInt((*_2)[14 of 24]) -> [97: bb90, otherwise: bb7];
    }

    bb90: {
        switchInt((*_2)[15 of 24]) -> [110: bb91, otherwise: bb7];
    }

    bb91: {
        switchInt((*_2)[16 of 24]) -> [115: bb92, otherwise: bb7];
    }

    bb92: {
        switchInt((*_2)[17 of 24]) -> [97: bb93, otherwise: bb7];
    }

    bb93: {
        switchInt((*_2)[18 of 24]) -> [99: bb94, otherwise: bb7];
    }

    bb94: {
        switchInt((*_2)[19 of 24]) -> [116: bb95, otherwise: bb7];
    }

    bb95: {
        switchInt((*_2)[20 of 24]) -> [105: bb96, otherwise: bb7];
    }

    bb96: {
        switchInt((*_2)[21 of 24]) -> [111: bb97, otherwise: bb7];
    }

    bb97: {
        switchInt((*_2)[22 of 24]) -> [110: bb98, otherwise: bb7];
    }

    bb98: {
        switchInt((*_2)[23 of 24]) -> [115: bb343, otherwise: bb7];
    }

    bb99: {
        _27 = Len((*_2));
        _28 = const 10_usize;
        _29 = Eq(move _27, move _28);
        switchInt(move _29) -> [0: bb110, otherwise: bb100];
    }

    bb100: {
        switchInt((*_2)[0 of 10]) -> [103: bb101, otherwise: bb7];
    }

    bb101: {
        switchInt((*_2)[1 of 10]) -> [101: bb102, otherwise: bb7];
    }

    bb102: {
        switchInt((*_2)[2 of 10]) -> [116: bb103, otherwise: bb7];
    }

    bb103: {
        switchInt((*_2)[3 of 10]) -> [95: bb104, otherwise: bb7];
    }

    bb104: {
        switchInt((*_2)[4 of 10]) -> [101: bb105, otherwise: bb7];
    }

    bb105: {
        switchInt((*_2)[5 of 10]) -> [118: bb106, otherwise: bb7];
    }

    bb106: {
        switchInt((*_2)[6 of 10]) -> [101: bb107, otherwise: bb7];
    }

    bb107: {
        switchInt((*_2)[7 of 10]) -> [110: bb108, otherwise: bb7];
    }

    bb108: {
        switchInt((*_2)[8 of 10]) -> [116: bb109, otherwise: bb7];
    }

    bb109: {
        switchInt((*_2)[9 of 10]) -> [115: bb344, otherwise: bb7];
    }

    bb110: {
        _24 = Len((*_2));
        _25 = const 14_usize;
        _26 = Eq(move _24, move _25);
        switchInt(move _26) -> [0: bb125, otherwise: bb111];
    }

    bb111: {
        switchInt((*_2)[0 of 14]) -> [103: bb112, otherwise: bb7];
    }

    bb112: {
        switchInt((*_2)[1 of 14]) -> [101: bb113, otherwise: bb7];
    }

    bb113: {
        switchInt((*_2)[2 of 14]) -> [116: bb114, otherwise: bb7];
    }

    bb114: {
        switchInt((*_2)[3 of 14]) -> [95: bb115, otherwise: bb7];
    }

    bb115: {
        switchInt((*_2)[4 of 14]) -> [99: bb116, otherwise: bb7];
    }

    bb116: {
        switchInt((*_2)[5 of 14]) -> [117: bb117, otherwise: bb7];
    }

    bb117: {
        switchInt((*_2)[6 of 14]) -> [114: bb118, otherwise: bb7];
    }

    bb118: {
        switchInt((*_2)[7 of 14]) -> [114: bb119, otherwise: bb7];
    }

    bb119: {
        switchInt((*_2)[8 of 14]) -> [101: bb120, otherwise: bb7];
    }

    bb120: {
        switchInt((*_2)[9 of 14]) -> [110: bb121, otherwise: bb7];
    }

    bb121: {
        switchInt((*_2)[10 of 14]) -> [99: bb122, otherwise: bb7];
    }

    bb122: {
        switchInt((*_2)[11 of 14]) -> [105: bb123, otherwise: bb7];
    }

    bb123: {
        switchInt((*_2)[12 of 14]) -> [101: bb124, otherwise: bb7];
    }

    bb124: {
        switchInt((*_2)[13 of 14]) -> [115: bb345, otherwise: bb7];
    }

    bb125: {
        _21 = Len((*_2));
        _22 = const 18_usize;
        _23 = Eq(move _21, move _22);
        switchInt(move _23) -> [0: bb144, otherwise: bb126];
    }

    bb126: {
        switchInt((*_2)[0 of 18]) -> [103: bb127, otherwise: bb7];
    }

    bb127: {
        switchInt((*_2)[1 of 18]) -> [101: bb128, otherwise: bb7];
    }

    bb128: {
        switchInt((*_2)[2 of 18]) -> [116: bb129, otherwise: bb7];
    }

    bb129: {
        switchInt((*_2)[3 of 18]) -> [95: bb130, otherwise: bb7];
    }

    bb130: {
        switchInt((*_2)[4 of 18]) -> [110: bb131, otherwise: bb7];
    }

    bb131: {
        switchInt((*_2)[5 of 18]) -> [101: bb132, otherwise: bb7];
    }

    bb132: {
        switchInt((*_2)[6 of 18]) -> [116: bb133, otherwise: bb7];
    }

    bb133: {
        switchInt((*_2)[7 of 18]) -> [119: bb134, otherwise: bb7];
    }

    bb134: {
        switchInt((*_2)[8 of 18]) -> [111: bb135, otherwise: bb7];
    }

    bb135: {
        switchInt((*_2)[9 of 18]) -> [114: bb136, otherwise: bb7];
    }

    bb136: {
        switchInt((*_2)[10 of 18]) -> [107: bb137, otherwise: bb7];
    }

    bb137: {
        switchInt((*_2)[11 of 18]) -> [95: bb138, otherwise: bb7];
    }

    bb138: {
        switchInt((*_2)[12 of 18]) -> [115: bb139, otherwise: bb7];
    }

    bb139: {
        switchInt((*_2)[13 of 18]) -> [116: bb140, otherwise: bb7];
    }

    bb140: {
        switchInt((*_2)[14 of 18]) -> [97: bb141, otherwise: bb7];
    }

    bb141: {
        switchInt((*_2)[15 of 18]) -> [116: bb142, otherwise: bb7];
    }

    bb142: {
        switchInt((*_2)[16 of 18]) -> [117: bb143, otherwise: bb7];
    }

    bb143: {
        switchInt((*_2)[17 of 18]) -> [115: bb346, otherwise: bb7];
    }

    bb144: {
        _18 = Len((*_2));
        _19 = const 15_usize;
        _20 = Eq(move _18, move _19);
        switchInt(move _20) -> [0: bb160, otherwise: bb145];
    }

    bb145: {
        switchInt((*_2)[0 of 15]) -> [103: bb146, otherwise: bb7];
    }

    bb146: {
        switchInt((*_2)[1 of 15]) -> [101: bb147, otherwise: bb7];
    }

    bb147: {
        switchInt((*_2)[2 of 15]) -> [116: bb148, otherwise: bb7];
    }

    bb148: {
        switchInt((*_2)[3 of 15]) -> [95: bb149, otherwise: bb7];
    }

    bb149: {
        switchInt((*_2)[4 of 15]) -> [115: bb150, otherwise: bb7];
    }

    bb150: {
        switchInt((*_2)[5 of 15]) -> [116: bb151, otherwise: bb7];
    }

    bb151: {
        switchInt((*_2)[6 of 15]) -> [97: bb152, otherwise: bb7];
    }

    bb152: {
        switchInt((*_2)[7 of 15]) -> [116: bb153, otherwise: bb7];
    }

    bb153: {
        switchInt((*_2)[8 of 15]) -> [101: bb154, otherwise: bb7];
    }

    bb154: {
        switchInt((*_2)[9 of 15]) -> [95: bb155, otherwise: bb7];
    }

    bb155: {
        switchInt((*_2)[10 of 15]) -> [112: bb156, otherwise: bb7];
    }

    bb156: {
        switchInt((*_2)[11 of 15]) -> [114: bb157, otherwise: bb7];
    }

    bb157: {
        switchInt((*_2)[12 of 15]) -> [111: bb158, otherwise: bb7];
    }

    bb158: {
        switchInt((*_2)[13 of 15]) -> [111: bb159, otherwise: bb7];
    }

    bb159: {
        switchInt((*_2)[14 of 15]) -> [102: bb347, otherwise: bb7];
    }

    bb160: {
        _15 = Len((*_2));
        _16 = const 33_usize;
        _17 = Eq(move _15, move _16);
        switchInt(move _17) -> [0: bb194, otherwise: bb161];
    }

    bb161: {
        switchInt((*_2)[0 of 33]) -> [103: bb162, otherwise: bb7];
    }

    bb162: {
        switchInt((*_2)[1 of 33]) -> [101: bb163, otherwise: bb7];
    }

    bb163: {
        switchInt((*_2)[2 of 33]) -> [116: bb164, otherwise: bb7];
    }

    bb164: {
        switchInt((*_2)[3 of 33]) -> [95: bb165, otherwise: bb7];
    }

    bb165: {
        switchInt((*_2)[4 of 33]) -> [97: bb166, otherwise: bb7];
    }

    bb166: {
        switchInt((*_2)[5 of 33]) -> [99: bb167, otherwise: bb7];
    }

    bb167: {
        switchInt((*_2)[6 of 33]) -> [99: bb168, otherwise: bb7];
    }

    bb168: {
        switchInt((*_2)[7 of 33]) -> [117: bb169, otherwise: bb7];
    }

    bb169: {
        switchInt((*_2)[8 of 33]) -> [109: bb170, otherwise: bb7];
    }

    bb170: {
        switchInt((*_2)[9 of 33]) -> [117: bb171, otherwise: bb7];
    }

    bb171: {
        switchInt((*_2)[10 of 33]) -> [108: bb172, otherwise: bb7];
    }

    bb172: {
        switchInt((*_2)[11 of 33]) -> [97: bb173, otherwise: bb7];
    }

    bb173: {
        switchInt((*_2)[12 of 33]) -> [116: bb174, otherwise: bb7];
    }

    bb174: {
        switchInt((*_2)[13 of 33]) -> [111: bb175, otherwise: bb7];
    }

    bb175: {
        switchInt((*_2)[14 of 33]) -> [114: bb176, otherwise: bb7];
    }

    bb176: {
        switchInt((*_2)[15 of 33]) -> [95: bb177, otherwise: bb7];
    }

    bb177: {
        switchInt((*_2)[16 of 33]) -> [99: bb178, otherwise: bb7];
    }

    bb178: {
        switchInt((*_2)[17 of 33]) -> [111: bb179, otherwise: bb7];
    }

    bb179: {
        switchInt((*_2)[18 of 33]) -> [110: bb180, otherwise: bb7];
    }

    bb180: {
        switchInt((*_2)[19 of 33]) -> [115: bb181, otherwise: bb7];
    }

    bb181: {
        switchInt((*_2)[20 of 33]) -> [105: bb182, otherwise: bb7];
    }

    bb182: {
        switchInt((*_2)[21 of 33]) -> [115: bb183, otherwise: bb7];
    }

    bb183: {
        switchInt((*_2)[22 of 33]) -> [116: bb184, otherwise: bb7];
    }

    bb184: {
        switchInt((*_2)[23 of 33]) -> [101: bb185, otherwise: bb7];
    }

    bb185: {
        switchInt((*_2)[24 of 33]) -> [110: bb186, otherwise: bb7];
    }

    bb186: {
        switchInt((*_2)[25 of 33]) -> [99: bb187, otherwise: bb7];
    }

    bb187: {
        switchInt((*_2)[26 of 33]) -> [121: bb188, otherwise: bb7];
    }

    bb188: {
        switchInt((*_2)[27 of 33]) -> [95: bb189, otherwise: bb7];
    }

    bb189: {
        switchInt((*_2)[28 of 33]) -> [112: bb190, otherwise: bb7];
    }

    bb190: {
        switchInt((*_2)[29 of 33]) -> [114: bb191, otherwise: bb7];
    }

    bb191: {
        switchInt((*_2)[30 of 33]) -> [111: bb192, otherwise: bb7];
    }

    bb192: {
        switchInt((*_2)[31 of 33]) -> [111: bb193, otherwise: bb7];
    }

    bb193: {
        switchInt((*_2)[32 of 33]) -> [102: bb348, otherwise: bb7];
    }

    bb194: {
        _12 = Len((*_2));
        _13 = const 28_usize;
        _14 = Eq(move _12, move _13);
        switchInt(move _14) -> [0: bb246, otherwise: bb195];
    }

    bb195: {
        switchInt((*_2)[0 of 28]) -> [103: bb196, otherwise: bb7];
    }

    bb196: {
        switchInt((*_2)[1 of 28]) -> [101: bb197, otherwise: bb7];
    }

    bb197: {
        switchInt((*_2)[2 of 28]) -> [116: bb198, otherwise: bb7];
    }

    bb198: {
        switchInt((*_2)[3 of 28]) -> [95: bb199, otherwise: bb7];
    }

    bb199: {
        switchInt((*_2)[4 of 28]) -> [97: bb200, 116: bb223, otherwise: bb7];
    }

    bb200: {
        switchInt((*_2)[5 of 28]) -> [99: bb201, otherwise: bb7];
    }

    bb201: {
        switchInt((*_2)[6 of 28]) -> [99: bb202, otherwise: bb7];
    }

    bb202: {
        switchInt((*_2)[7 of 28]) -> [111: bb203, otherwise: bb7];
    }

    bb203: {
        switchInt((*_2)[8 of 28]) -> [117: bb204, otherwise: bb7];
    }

    bb204: {
        switchInt((*_2)[9 of 28]) -> [110: bb205, otherwise: bb7];
    }

    bb205: {
        switchInt((*_2)[10 of 28]) -> [116: bb206, otherwise: bb7];
    }

    bb206: {
        switchInt((*_2)[11 of 28]) -> [95: bb207, otherwise: bb7];
    }

    bb207: {
        switchInt((*_2)[12 of 28]) -> [115: bb208, otherwise: bb7];
    }

    bb208: {
        switchInt((*_2)[13 of 28]) -> [116: bb209, otherwise: bb7];
    }

    bb209: {
        switchInt((*_2)[14 of 28]) -> [97: bb210, otherwise: bb7];
    }

    bb210: {
        switchInt((*_2)[15 of 28]) -> [116: bb211, otherwise: bb7];
    }

    bb211: {
        switchInt((*_2)[16 of 28]) -> [101: bb212, otherwise: bb7];
    }

    bb212: {
        switchInt((*_2)[17 of 28]) -> [95: bb213, otherwise: bb7];
    }

    bb213: {
        switchInt((*_2)[18 of 28]) -> [119: bb214, otherwise: bb7];
    }

    bb214: {
        switchInt((*_2)[19 of 28]) -> [105: bb215, otherwise: bb7];
    }

    bb215: {
        switchInt((*_2)[20 of 28]) -> [116: bb216, otherwise: bb7];
    }

    bb216: {
        switchInt((*_2)[21 of 28]) -> [104: bb217, otherwise: bb7];
    }

    bb217: {
        switchInt((*_2)[22 of 28]) -> [95: bb218, otherwise: bb7];
    }

    bb218: {
        switchInt((*_2)[23 of 28]) -> [112: bb219, otherwise: bb7];
    }

    bb219: {
        switchInt((*_2)[24 of 28]) -> [114: bb220, otherwise: bb7];
    }

    bb220: {
        switchInt((*_2)[25 of 28]) -> [111: bb221, otherwise: bb7];
    }

    bb221: {
        switchInt((*_2)[26 of 28]) -> [111: bb222, otherwise: bb7];
    }

    bb222: {
        switchInt((*_2)[27 of 28]) -> [102: bb349, otherwise: bb7];
    }

    bb223: {
        switchInt((*_2)[5 of 28]) -> [114: bb224, otherwise: bb7];
    }

    bb224: {
        switchInt((*_2)[6 of 28]) -> [97: bb225, otherwise: bb7];
    }

    bb225: {
        switchInt((*_2)[7 of 28]) -> [110: bb226, otherwise: bb7];
    }

    bb226: {
        switchInt((*_2)[8 of 28]) -> [115: bb227, otherwise: bb7];
    }

    bb227: {
        switchInt((*_2)[9 of 28]) -> [97: bb228, otherwise: bb7];
    }

    bb228: {
        switchInt((*_2)[10 of 28]) -> [99: bb229, otherwise: bb7];
    }

    bb229: {
        switchInt((*_2)[11 of 28]) -> [116: bb230, otherwise: bb7];
    }

    bb230: {
        switchInt((*_2)[12 of 28]) -> [105: bb231, otherwise: bb7];
    }

    bb231: {
        switchInt((*_2)[13 of 28]) -> [111: bb232, otherwise: bb7];
    }

    bb232: {
        switchInt((*_2)[14 of 28]) -> [110: bb233, otherwise: bb7];
    }

    bb233: {
        switchInt((*_2)[15 of 28]) -> [115: bb234, otherwise: bb7];
    }

    bb234: {
        switchInt((*_2)[16 of 28]) -> [95: bb235, otherwise: bb7];
    }

    bb235: {
        switchInt((*_2)[17 of 28]) -> [119: bb236, otherwise: bb7];
    }

    bb236: {
        switchInt((*_2)[18 of 28]) -> [105: bb237, otherwise: bb7];
    }

    bb237: {
        switchInt((*_2)[19 of 28]) -> [116: bb238, otherwise: bb7];
    }

    bb238: {
        switchInt((*_2)[20 of 28]) -> [104: bb239, otherwise: bb7];
    }

    bb239: {
        switchInt((*_2)[21 of 28]) -> [95: bb240, otherwise: bb7];
    }

    bb240: {
        switchInt((*_2)[22 of 28]) -> [112: bb241, otherwise: bb7];
    }

    bb241: {
        switchInt((*_2)[23 of 28]) -> [114: bb242, otherwise: bb7];
    }

    bb242: {
        switchInt((*_2)[24 of 28]) -> [111: bb243, otherwise: bb7];
    }

    bb243: {
        switchInt((*_2)[25 of 28]) -> [111: bb244, otherwise: bb7];
    }

    bb244: {
        switchInt((*_2)[26 of 28]) -> [102: bb245, otherwise: bb7];
    }

    bb245: {
        switchInt((*_2)[27 of 28]) -> [115: bb350, otherwise: bb7];
    }

    bb246: {
        _9 = Len((*_2));
        _10 = const 36_usize;
        _11 = Eq(move _9, move _10);
        switchInt(move _11) -> [0: bb283, otherwise: bb247];
    }

    bb247: {
        switchInt((*_2)[0 of 36]) -> [103: bb248, otherwise: bb7];
    }

    bb248: {
        switchInt((*_2)[1 of 36]) -> [101: bb249, otherwise: bb7];
    }

    bb249: {
        switchInt((*_2)[2 of 36]) -> [116: bb250, otherwise: bb7];
    }

    bb250: {
        switchInt((*_2)[3 of 36]) -> [95: bb251, otherwise: bb7];
    }

    bb251: {
        switchInt((*_2)[4 of 36]) -> [97: bb252, otherwise: bb7];
    }

    bb252: {
        switchInt((*_2)[5 of 36]) -> [99: bb253, otherwise: bb7];
    }

    bb253: {
        switchInt((*_2)[6 of 36]) -> [99: bb254, otherwise: bb7];
    }

    bb254: {
        switchInt((*_2)[7 of 36]) -> [111: bb255, otherwise: bb7];
    }

    bb255: {
        switchInt((*_2)[8 of 36]) -> [117: bb256, otherwise: bb7];
    }

    bb256: {
        switchInt((*_2)[9 of 36]) -> [110: bb257, otherwise: bb7];
    }

    bb257: {
        switchInt((*_2)[10 of 36]) -> [116: bb258, otherwise: bb7];
    }

    bb258: {
        switchInt((*_2)[11 of 36]) -> [95: bb259, otherwise: bb7];
    }

    bb259: {
        switchInt((*_2)[12 of 36]) -> [116: bb260, otherwise: bb7];
    }

    bb260: {
        switchInt((*_2)[13 of 36]) -> [114: bb261, otherwise: bb7];
    }

    bb261: {
        switchInt((*_2)[14 of 36]) -> [97: bb262, otherwise: bb7];
    }

    bb262: {
        switchInt((*_2)[15 of 36]) -> [110: bb263, otherwise: bb7];
    }

    bb263: {
        switchInt((*_2)[16 of 36]) -> [115: bb264, otherwise: bb7];
    }

    bb264: {
        switchInt((*_2)[17 of 36]) -> [97: bb265, otherwise: bb7];
    }

    bb265: {
        switchInt((*_2)[18 of 36]) -> [99: bb266, otherwise: bb7];
    }

    bb266: {
        switchInt((*_2)[19 of 36]) -> [116: bb267, otherwise: bb7];
    }

    bb267: {
        switchInt((*_2)[20 of 36]) -> [105: bb268, otherwise: bb7];
    }

    bb268: {
        switchInt((*_2)[21 of 36]) -> [111: bb269, otherwise: bb7];
    }

    bb269: {
        switchInt((*_2)[22 of 36]) -> [110: bb270, otherwise: bb7];
    }

    bb270: {
        switchInt((*_2)[23 of 36]) -> [115: bb271, otherwise: bb7];
    }

    bb271: {
        switchInt((*_2)[24 of 36]) -> [95: bb272, otherwise: bb7];
    }

    bb272: {
        switchInt((*_2)[25 of 36]) -> [119: bb273, otherwise: bb7];
    }

    bb273: {
        switchInt((*_2)[26 of 36]) -> [105: bb274, otherwise: bb7];
    }

    bb274: {
        switchInt((*_2)[27 of 36]) -> [116: bb275, otherwise: bb7];
    }

    bb275: {
        switchInt((*_2)[28 of 36]) -> [104: bb276, otherwise: bb7];
    }

    bb276: {
        switchInt((*_2)[29 of 36]) -> [95: bb277, otherwise: bb7];
    }

    bb277: {
        switchInt((*_2)[30 of 36]) -> [112: bb278, otherwise: bb7];
    }

    bb278: {
        switchInt((*_2)[31 of 36]) -> [114: bb279, otherwise: bb7];
    }

    bb279: {
        switchInt((*_2)[32 of 36]) -> [111: bb280, otherwise: bb7];
    }

    bb280: {
        switchInt((*_2)[33 of 36]) -> [111: bb281, otherwise: bb7];
    }

    bb281: {
        switchInt((*_2)[34 of 36]) -> [102: bb282, otherwise: bb7];
    }

    bb282: {
        switchInt((*_2)[35 of 36]) -> [115: bb351, otherwise: bb7];
    }

    bb283: {
        _6 = Len((*_2));
        _7 = const 22_usize;
        _8 = Eq(move _6, move _7);
        switchInt(move _8) -> [0: bb306, otherwise: bb284];
    }

    bb284: {
        switchInt((*_2)[0 of 22]) -> [103: bb285, otherwise: bb7];
    }

    bb285: {
        switchInt((*_2)[1 of 22]) -> [101: bb286, otherwise: bb7];
    }

    bb286: {
        switchInt((*_2)[2 of 22]) -> [116: bb287, otherwise: bb7];
    }

    bb287: {
        switchInt((*_2)[3 of 22]) -> [95: bb288, otherwise: bb7];
    }

    bb288: {
        switchInt((*_2)[4 of 22]) -> [101: bb289, otherwise: bb7];
    }

    bb289: {
        switchInt((*_2)[5 of 22]) -> [118: bb290, otherwise: bb7];
    }

    bb290: {
        switchInt((*_2)[6 of 22]) -> [101: bb291, otherwise: bb7];
    }

    bb291: {
        switchInt((*_2)[7 of 22]) -> [110: bb292, otherwise: bb7];
    }

    bb292: {
        switchInt((*_2)[8 of 22]) -> [116: bb293, otherwise: bb7];
    }

    bb293: {
        switchInt((*_2)[9 of 22]) -> [115: bb294, otherwise: bb7];
    }

    bb294: {
        switchInt((*_2)[10 of 22]) -> [95: bb295, otherwise: bb7];
    }

    bb295: {
        switchInt((*_2)[11 of 22]) -> [119: bb296, otherwise: bb7];
    }

    bb296: {
        switchInt((*_2)[12 of 22]) -> [105: bb297, otherwise: bb7];
    }

    bb297: {
        switchInt((*_2)[13 of 22]) -> [116: bb298, otherwise: bb7];
    }

    bb298: {
        switchInt((*_2)[14 of 22]) -> [104: bb299, otherwise: bb7];
    }

    bb299: {
        switchInt((*_2)[15 of 22]) -> [95: bb300, otherwise: bb7];
    }

    bb300: {
        switchInt((*_2)[16 of 22]) -> [112: bb301, otherwise: bb7];
    }

    bb301: {
        switchInt((*_2)[17 of 22]) -> [114: bb302, otherwise: bb7];
    }

    bb302: {
        switchInt((*_2)[18 of 22]) -> [111: bb303, otherwise: bb7];
    }

    bb303: {
        switchInt((*_2)[19 of 22]) -> [111: bb304, otherwise: bb7];
    }

    bb304: {
        switchInt((*_2)[20 of 22]) -> [102: bb305, otherwise: bb7];
    }

    bb305: {
        switchInt((*_2)[21 of 22]) -> [115: bb352, otherwise: bb7];
    }

    bb306: {
        _3 = Len((*_2));
        _4 = const 31_usize;
        _5 = Eq(move _3, move _4);
        switchInt(move _5) -> [0: bb7, otherwise: bb307];
    }

    bb307: {
        switchInt((*_2)[0 of 31]) -> [103: bb308, otherwise: bb7];
    }

    bb308: {
        switchInt((*_2)[1 of 31]) -> [101: bb309, otherwise: bb7];
    }

    bb309: {
        switchInt((*_2)[2 of 31]) -> [116: bb310, otherwise: bb7];
    }

    bb310: {
        switchInt((*_2)[3 of 31]) -> [95: bb311, otherwise: bb7];
    }

    bb311: {
        switchInt((*_2)[4 of 31]) -> [101: bb312, otherwise: bb7];
    }

    bb312: {
        switchInt((*_2)[5 of 31]) -> [118: bb313, otherwise: bb7];
    }

    bb313: {
        switchInt((*_2)[6 of 31]) -> [101: bb314, otherwise: bb7];
    }

    bb314: {
        switchInt((*_2)[7 of 31]) -> [110: bb315, otherwise: bb7];
    }

    bb315: {
        switchInt((*_2)[8 of 31]) -> [116: bb316, otherwise: bb7];
    }

    bb316: {
        switchInt((*_2)[9 of 31]) -> [95: bb317, otherwise: bb7];
    }

    bb317: {
        switchInt((*_2)[10 of 31]) -> [98: bb318, otherwise: bb7];
    }

    bb318: {
        switchInt((*_2)[11 of 31]) -> [121: bb319, otherwise: bb7];
    }

    bb319: {
        switchInt((*_2)[12 of 31]) -> [95: bb320, otherwise: bb7];
    }

    bb320: {
        switchInt((*_2)[13 of 31]) -> [118: bb321, otherwise: bb7];
    }

    bb321: {
        switchInt((*_2)[14 of 31]) -> [101: bb322, otherwise: bb7];
    }

    bb322: {
        switchInt((*_2)[15 of 31]) -> [114: bb323, otherwise: bb7];
    }

    bb323: {
        switchInt((*_2)[16 of 31]) -> [115: bb324, otherwise: bb7];
    }

    bb324: {
        switchInt((*_2)[17 of 31]) -> [105: bb325, otherwise: bb7];
    }

    bb325: {
        switchInt((*_2)[18 of 31]) -> [111: bb326, otherwise: bb7];
    }

    bb326: {
        switchInt((*_2)[19 of 31]) -> [110: bb327, otherwise: bb7];
    }

    bb327: {
        switchInt((*_2)[20 of 31]) -> [95: bb328, otherwise: bb7];
    }

    bb328: {
        switchInt((*_2)[21 of 31]) -> [119: bb329, otherwise: bb7];
    }

    bb329: {
        switchInt((*_2)[22 of 31]) -> [105: bb330, otherwise: bb7];
    }

    bb330: {
        switchInt((*_2)[23 of 31]) -> [116: bb331, otherwise: bb7];
    }

    bb331: {
        switchInt((*_2)[24 of 31]) -> [104: bb332, otherwise: bb7];
    }

    bb332: {
        switchInt((*_2)[25 of 31]) -> [95: bb333, otherwise: bb7];
    }

    bb333: {
        switchInt((*_2)[26 of 31]) -> [112: bb334, otherwise: bb7];
    }

    bb334: {
        switchInt((*_2)[27 of 31]) -> [114: bb335, otherwise: bb7];
    }

    bb335: {
        switchInt((*_2)[28 of 31]) -> [111: bb336, otherwise: bb7];
    }

    bb336: {
        switchInt((*_2)[29 of 31]) -> [111: bb337, otherwise: bb7];
    }

    bb337: {
        switchInt((*_2)[30 of 31]) -> [102: bb353, otherwise: bb7];
    }

    bb338: {
        _48 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field0;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _48);
        goto -> bb357;
    }

    bb339: {
        _49 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field1;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _49);
        goto -> bb357;
    }

    bb340: {
        _50 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field2;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _50);
        goto -> bb357;
    }

    bb341: {
        _51 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field3;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _51);
        goto -> bb357;
    }

    bb342: {
        _52 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field4;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _52);
        goto -> bb357;
    }

    bb343: {
        _53 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field5;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _53);
        goto -> bb357;
    }

    bb344: {
        _54 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field6;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _54);
        goto -> bb357;
    }

    bb345: {
        _55 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field7;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _55);
        goto -> bb357;
    }

    bb346: {
        _56 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field8;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _56);
        goto -> bb357;
    }

    bb347: {
        _57 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field9;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _57);
        goto -> bb357;
    }

    bb348: {
        _58 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field10;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _58);
        goto -> bb357;
    }

    bb349: {
        _59 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field11;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _59);
        goto -> bb357;
    }

    bb350: {
        _60 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field12;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _60);
        goto -> bb357;
    }

    bb351: {
        _61 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field13;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _61);
        goto -> bb357;
    }

    bb352: {
        _62 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field14;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _62);
        goto -> bb357;
    }

    bb353: {
        _63 = _::<impl Deserialize<'de> for Method>::deserialize::__Field::__field15;
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Ok(move _63);
        goto -> bb357;
    }

    bb354: {
        _64 = &_65;
        _67 = <Cow<'_, str> as Deref>::deref(_64) -> [return: bb355, unwind: bb358];
    }

    bb355: {
        _66 = <__E as _::_serde::de::Error>::unknown_variant(_67, const _) -> [return: bb356, unwind: bb358];
    }

    bb356: {
        _0 = std::result::Result::<_::<impl Deserialize<'de> for Method>::deserialize::__Field, __E>::Err(move _66);
        drop(_65) -> [return: bb357, unwind continue];
    }

    bb357: {
        return;
    }

    bb358 (cleanup): {
        drop(_65) -> [return: bb359, unwind terminate(cleanup)];
    }

    bb359 (cleanup): {
        resume;
    }
}

fn _::<impl at sdk/client/src/lib.rs:70:17: 70:28>::deserialize::<impl at sdk/client/src/lib.rs:70:17: 70:28>::deserialize(_1: __D) -> std::result::Result<_::<impl Deserialize<'de> for Method>::deserialize::__Field, <__D as _::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<_::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field, <__D as _::_serde::Deserializer<'_>>::Error>;

    bb0: {
        _0 = <__D as _::_serde::Deserializer<'_>>::deserialize_identifier::<_::<impl Deserialize<'de> for Method>::deserialize::__FieldVisitor>(move _1, const _::<impl Deserialize<'de> for Method>::deserialize::__FieldVisitor) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:70:17: 70:28>::deserialize::<impl at sdk/client/src/lib.rs:70:17: 70:28>::expecting(_1: &_::<impl Deserialize<'de> for Method>::deserialize::__Visitor<'_>, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug __formatter => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "enum Method";
        _0 = std::fmt::Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:70:17: 70:28>::deserialize::<impl at sdk/client/src/lib.rs:70:17: 70:28>::visit_enum(_1: _::<impl Deserialize<'de> for Method>::deserialize::__Visitor<'_>, _2: __A) -> std::result::Result<Method, <__A as EnumAccess<'_>>::Error> {
    debug self => const _::<impl Deserialize<'de> for Method>::deserialize::__Visitor::<'_> {{ marker: PhantomData::<Method>, lifetime: PhantomData::<&()> }};
    debug __data => _2;
    let mut _0: std::result::Result<Method, <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _3: std::result::Result<(_::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field, <__A as _::_serde::de::EnumAccess<'_>>::Variant), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _4: isize;
    let _5: (_::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field, <__A as _::_serde::de::EnumAccess<'_>>::Variant);
    let _6: <__A as _::_serde::de::EnumAccess<'_>>::Error;
    let mut _7: isize;
    let _8: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _9: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _10: isize;
    let mut _12: Method;
    let _13: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _14: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _15: isize;
    let mut _17: Method;
    let _18: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _19: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _20: isize;
    let mut _22: Method;
    let _23: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _24: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _25: isize;
    let mut _27: Method;
    let _28: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _29: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _30: isize;
    let mut _32: Method;
    let _33: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _34: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _35: isize;
    let mut _37: Method;
    let _38: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _39: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _40: isize;
    let mut _42: Method;
    let _43: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _44: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _45: isize;
    let mut _47: Method;
    let _48: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _49: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _50: isize;
    let mut _52: Method;
    let _53: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _54: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _55: isize;
    let mut _57: Method;
    let _58: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _59: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _60: isize;
    let mut _62: Method;
    let _63: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _64: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _65: isize;
    let mut _67: Method;
    let _68: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _69: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _70: isize;
    let mut _72: Method;
    let _73: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _74: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _75: isize;
    let mut _77: Method;
    let _78: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _79: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _80: isize;
    let mut _82: Method;
    let _83: <__A as _::_serde::de::EnumAccess<'_>>::Variant;
    let mut _84: std::result::Result<(), <__A as _::_serde::de::EnumAccess<'_>>::Error>;
    let mut _85: isize;
    let mut _87: Method;
    scope 1 {
        debug __val => _5;
    }
    scope 2 {
        debug __err => _6;
    }
    scope 3 {
        debug __variant => _8;
        let _11: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 4 {
            debug __val => const ();
        }
        scope 5 {
            debug __err => _11;
        }
    }
    scope 6 {
        debug __variant => _13;
        let _16: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 7 {
            debug __val => const ();
        }
        scope 8 {
            debug __err => _16;
        }
    }
    scope 9 {
        debug __variant => _18;
        let _21: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 10 {
            debug __val => const ();
        }
        scope 11 {
            debug __err => _21;
        }
    }
    scope 12 {
        debug __variant => _23;
        let _26: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 13 {
            debug __val => const ();
        }
        scope 14 {
            debug __err => _26;
        }
    }
    scope 15 {
        debug __variant => _28;
        let _31: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 16 {
            debug __val => const ();
        }
        scope 17 {
            debug __err => _31;
        }
    }
    scope 18 {
        debug __variant => _33;
        let _36: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 19 {
            debug __val => const ();
        }
        scope 20 {
            debug __err => _36;
        }
    }
    scope 21 {
        debug __variant => _38;
        let _41: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 22 {
            debug __val => const ();
        }
        scope 23 {
            debug __err => _41;
        }
    }
    scope 24 {
        debug __variant => _43;
        let _46: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 25 {
            debug __val => const ();
        }
        scope 26 {
            debug __err => _46;
        }
    }
    scope 27 {
        debug __variant => _48;
        let _51: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 28 {
            debug __val => const ();
        }
        scope 29 {
            debug __err => _51;
        }
    }
    scope 30 {
        debug __variant => _53;
        let _56: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 31 {
            debug __val => const ();
        }
        scope 32 {
            debug __err => _56;
        }
    }
    scope 33 {
        debug __variant => _58;
        let _61: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 34 {
            debug __val => const ();
        }
        scope 35 {
            debug __err => _61;
        }
    }
    scope 36 {
        debug __variant => _63;
        let _66: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 37 {
            debug __val => const ();
        }
        scope 38 {
            debug __err => _66;
        }
    }
    scope 39 {
        debug __variant => _68;
        let _71: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 40 {
            debug __val => const ();
        }
        scope 41 {
            debug __err => _71;
        }
    }
    scope 42 {
        debug __variant => _73;
        let _76: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 43 {
            debug __val => const ();
        }
        scope 44 {
            debug __err => _76;
        }
    }
    scope 45 {
        debug __variant => _78;
        let _81: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 46 {
            debug __val => const ();
        }
        scope 47 {
            debug __err => _81;
        }
    }
    scope 48 {
        debug __variant => _83;
        let _86: <__A as _::_serde::de::EnumAccess<'_>>::Error;
        scope 49 {
            debug __val => const ();
        }
        scope 50 {
            debug __err => _86;
        }
    }

    bb0: {
        _3 = <__A as EnumAccess<'_>>::variant::<_::<impl Deserialize<'de> for Method>::deserialize::__Field>(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _6);
        goto -> bb69;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: (_::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field, <__A as _::_serde::de::EnumAccess<'_>>::Variant));
        _7 = discriminant((_5.0: _::<impl _::_serde::Deserialize<'de> for Method>::deserialize::__Field));
        switchInt(move _7) -> [0: bb6, 1: bb10, 2: bb14, 3: bb18, 4: bb22, 5: bb26, 6: bb30, 7: bb34, 8: bb38, 9: bb42, 10: bb46, 11: bb50, 12: bb54, 13: bb58, 14: bb62, 15: bb5, otherwise: bb3];
    }

    bb5: {
        _83 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _84 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _83) -> [return: bb66, unwind continue];
    }

    bb6: {
        _8 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _9 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb3];
    }

    bb8: {
        _11 = move ((_9 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _11);
        goto -> bb69;
    }

    bb9: {
        _12 = Method::Submit;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _12);
        goto -> bb69;
    }

    bb10: {
        _13 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _14 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _13) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = discriminant(_14);
        switchInt(move _15) -> [0: bb13, 1: bb12, otherwise: bb3];
    }

    bb12: {
        _16 = move ((_14 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _16);
        goto -> bb69;
    }

    bb13: {
        _17 = Method::GetMetadata;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _17);
        goto -> bb69;
    }

    bb14: {
        _18 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _19 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _18) -> [return: bb15, unwind continue];
    }

    bb15: {
        _20 = discriminant(_19);
        switchInt(move _20) -> [0: bb17, 1: bb16, otherwise: bb3];
    }

    bb16: {
        _21 = move ((_19 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _21);
        goto -> bb69;
    }

    bb17: {
        _22 = Method::GetAccount;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _22);
        goto -> bb69;
    }

    bb18: {
        _23 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _24 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _23) -> [return: bb19, unwind continue];
    }

    bb19: {
        _25 = discriminant(_24);
        switchInt(move _25) -> [0: bb21, 1: bb20, otherwise: bb3];
    }

    bb20: {
        _26 = move ((_24 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _26);
        goto -> bb69;
    }

    bb21: {
        _27 = Method::GetTransactions;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _27);
        goto -> bb69;
    }

    bb22: {
        _28 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _29 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _28) -> [return: bb23, unwind continue];
    }

    bb23: {
        _30 = discriminant(_29);
        switchInt(move _30) -> [0: bb25, 1: bb24, otherwise: bb3];
    }

    bb24: {
        _31 = move ((_29 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _31);
        goto -> bb69;
    }

    bb25: {
        _32 = Method::GetAccountTransaction;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _32);
        goto -> bb69;
    }

    bb26: {
        _33 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _34 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _33) -> [return: bb27, unwind continue];
    }

    bb27: {
        _35 = discriminant(_34);
        switchInt(move _35) -> [0: bb29, 1: bb28, otherwise: bb3];
    }

    bb28: {
        _36 = move ((_34 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _36);
        goto -> bb69;
    }

    bb29: {
        _37 = Method::GetAccountTransactions;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _37);
        goto -> bb69;
    }

    bb30: {
        _38 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _39 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _38) -> [return: bb31, unwind continue];
    }

    bb31: {
        _40 = discriminant(_39);
        switchInt(move _40) -> [0: bb33, 1: bb32, otherwise: bb3];
    }

    bb32: {
        _41 = move ((_39 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _41);
        goto -> bb69;
    }

    bb33: {
        _42 = Method::GetEvents;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _42);
        goto -> bb69;
    }

    bb34: {
        _43 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _44 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _43) -> [return: bb35, unwind continue];
    }

    bb35: {
        _45 = discriminant(_44);
        switchInt(move _45) -> [0: bb37, 1: bb36, otherwise: bb3];
    }

    bb36: {
        _46 = move ((_44 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _46);
        goto -> bb69;
    }

    bb37: {
        _47 = Method::GetCurrencies;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _47);
        goto -> bb69;
    }

    bb38: {
        _48 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _49 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _48) -> [return: bb39, unwind continue];
    }

    bb39: {
        _50 = discriminant(_49);
        switchInt(move _50) -> [0: bb41, 1: bb40, otherwise: bb3];
    }

    bb40: {
        _51 = move ((_49 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _51);
        goto -> bb69;
    }

    bb41: {
        _52 = Method::GetNetworkStatus;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _52);
        goto -> bb69;
    }

    bb42: {
        _53 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _54 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _53) -> [return: bb43, unwind continue];
    }

    bb43: {
        _55 = discriminant(_54);
        switchInt(move _55) -> [0: bb45, 1: bb44, otherwise: bb3];
    }

    bb44: {
        _56 = move ((_54 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _56);
        goto -> bb69;
    }

    bb45: {
        _57 = Method::GetStateProof;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _57);
        goto -> bb69;
    }

    bb46: {
        _58 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _59 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _58) -> [return: bb47, unwind continue];
    }

    bb47: {
        _60 = discriminant(_59);
        switchInt(move _60) -> [0: bb49, 1: bb48, otherwise: bb3];
    }

    bb48: {
        _61 = move ((_59 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _61);
        goto -> bb69;
    }

    bb49: {
        _62 = Method::GetAccumulatorConsistencyProof;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _62);
        goto -> bb69;
    }

    bb50: {
        _63 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _64 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _63) -> [return: bb51, unwind continue];
    }

    bb51: {
        _65 = discriminant(_64);
        switchInt(move _65) -> [0: bb53, 1: bb52, otherwise: bb3];
    }

    bb52: {
        _66 = move ((_64 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _66);
        goto -> bb69;
    }

    bb53: {
        _67 = Method::GetAccountStateWithProof;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _67);
        goto -> bb69;
    }

    bb54: {
        _68 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _69 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _68) -> [return: bb55, unwind continue];
    }

    bb55: {
        _70 = discriminant(_69);
        switchInt(move _70) -> [0: bb57, 1: bb56, otherwise: bb3];
    }

    bb56: {
        _71 = move ((_69 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _71);
        goto -> bb69;
    }

    bb57: {
        _72 = Method::GetTransactionsWithProofs;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _72);
        goto -> bb69;
    }

    bb58: {
        _73 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _74 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _73) -> [return: bb59, unwind continue];
    }

    bb59: {
        _75 = discriminant(_74);
        switchInt(move _75) -> [0: bb61, 1: bb60, otherwise: bb3];
    }

    bb60: {
        _76 = move ((_74 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _76);
        goto -> bb69;
    }

    bb61: {
        _77 = Method::GetAccountTransactionsWithProofs;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _77);
        goto -> bb69;
    }

    bb62: {
        _78 = move (_5.1: <__A as _::_serde::de::EnumAccess<'_>>::Variant);
        _79 = <<__A as EnumAccess<'_>>::Variant as VariantAccess<'_>>::unit_variant(move _78) -> [return: bb63, unwind continue];
    }

    bb63: {
        _80 = discriminant(_79);
        switchInt(move _80) -> [0: bb65, 1: bb64, otherwise: bb3];
    }

    bb64: {
        _81 = move ((_79 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _81);
        goto -> bb69;
    }

    bb65: {
        _82 = Method::GetEventsWithProofs;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _82);
        goto -> bb69;
    }

    bb66: {
        _85 = discriminant(_84);
        switchInt(move _85) -> [0: bb68, 1: bb67, otherwise: bb3];
    }

    bb67: {
        _86 = move ((_84 as Err).0: <__A as _::_serde::de::EnumAccess<'_>>::Error);
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Err(move _86);
        goto -> bb69;
    }

    bb68: {
        _87 = Method::GetEventByVersionWithProof;
        _0 = std::result::Result::<Method, <__A as EnumAccess<'_>>::Error>::Ok(move _87);
        goto -> bb69;
    }

    bb69: {
        return;
    }
}

const _::<impl at sdk/client/src/lib.rs:70:17: 70:28>::deserialize::VARIANTS: &[&str] = {
    let mut _0: &[&str];
    let mut _1: &[&str; 16];
    let _2: &[&str; 16];
    let _3: [&str; 16];
    let mut _4: &[&str; 16];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in _::<impl at sdk/client/src/lib.rs:70:17: 70:28>::deserialize::VARIANTS: &[&str; 16] = {
    let mut _0: &[&str; 16];
    let mut _1: [&str; 16];

    bb0: {
        _1 = [const "submit", const "get_metadata", const "get_account", const "get_transactions", const "get_account_transaction", const "get_account_transactions", const "get_events", const "get_currencies", const "get_network_status", const "get_state_proof", const "get_accumulator_consistency_proof", const "get_account_state_with_proof", const "get_transactions_with_proofs", const "get_account_transactions_with_proofs", const "get_events_with_proofs", const "get_event_by_version_with_proof"];
        _0 = &_1;
        return;
    }
}

const _: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:70:30: 70:39>::serialize(_1: &Method, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _3: isize;

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb7, 5: bb8, 6: bb9, 7: bb10, 8: bb11, 9: bb12, 10: bb13, 11: bb14, 12: bb15, 13: bb16, 14: bb17, 15: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 15_u32, const "get_event_by_version_with_proof") -> [return: bb18, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 0_u32, const "submit") -> [return: bb18, unwind continue];
    }

    bb4: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 1_u32, const "get_metadata") -> [return: bb18, unwind continue];
    }

    bb5: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 2_u32, const "get_account") -> [return: bb18, unwind continue];
    }

    bb6: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 3_u32, const "get_transactions") -> [return: bb18, unwind continue];
    }

    bb7: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 4_u32, const "get_account_transaction") -> [return: bb18, unwind continue];
    }

    bb8: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 5_u32, const "get_account_transactions") -> [return: bb18, unwind continue];
    }

    bb9: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 6_u32, const "get_events") -> [return: bb18, unwind continue];
    }

    bb10: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 7_u32, const "get_currencies") -> [return: bb18, unwind continue];
    }

    bb11: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 8_u32, const "get_network_status") -> [return: bb18, unwind continue];
    }

    bb12: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 9_u32, const "get_state_proof") -> [return: bb18, unwind continue];
    }

    bb13: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 10_u32, const "get_accumulator_consistency_proof") -> [return: bb18, unwind continue];
    }

    bb14: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 11_u32, const "get_account_state_with_proof") -> [return: bb18, unwind continue];
    }

    bb15: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 12_u32, const "get_transactions_with_proofs") -> [return: bb18, unwind continue];
    }

    bb16: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 13_u32, const "get_account_transactions_with_proofs") -> [return: bb18, unwind continue];
    }

    bb17: {
        _0 = <__S as _::_serde::Serializer>::serialize_unit_variant(move _2, const "Method", const 14_u32, const "get_events_with_proofs") -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }
}

fn validate(_1: &StateManager, _2: std::option::Option<&state::State>, _3: &JsonRpcResponse, _4: bool) -> std::result::Result<(u64, state::State, SerdeValue), error::Error> {
    debug state_manager => _1;
    debug req_state => _2;
    debug resp => _3;
    debug ignore_stale => _4;
    let mut _0: std::result::Result<(u64, state::State, serde_json::Value), error::Error>;
    let mut _5: bool;
    let mut _6: &std::string::String;
    let mut _7: error::Error;
    let _8: std::string::String;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &std::string::String;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, u64>;
    let mut _17: std::result::Result<u64, error::Error>;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::Error>;
    let _20: u64;
    let mut _21: &std::option::Option<diem_json_rpc_types::errors::JsonRpcError>;
    let mut _22: isize;
    let mut _24: error::Error;
    let mut _25: diem_json_rpc_types::errors::JsonRpcError;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>>;
    let mut _28: std::result::Result<(), error::Error>;
    let _29: &state::State;
    let mut _30: isize;
    let mut _33: std::option::Option<serde_json::Value>;
    let mut _34: &std::option::Option<serde_json::Value>;
    let mut _35: serde_json::Value;
    let mut _36: (u64, state::State, serde_json::Value);
    let mut _37: state::State;
    let mut _38: &[&str; 1];
    let mut _39: &&str;
    scope 1 {
        debug res => _8;
    }
    scope 2 {
        debug id => _20;
        let _26: state::State;
        scope 7 {
            debug err => _23;
            let _23: &diem_json_rpc_types::errors::JsonRpcError;
        }
        scope 8 {
            debug resp_state => _26;
            let _31: std::result::Result<std::convert::Infallible, error::Error>;
            let _32: serde_json::Value;
            scope 9 {
                debug residual => _31;
                scope 10 {
                }
            }
            scope 11 {
                debug val => const ();
                scope 12 {
                }
            }
            scope 13 {
                debug result => _32;
            }
        }
    }
    scope 3 {
        debug residual => _19;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _20;
        scope 6 {
        }
    }

    bb0: {
        _6 = &((*_3).3: std::string::String);
        _39 = const _;
        _5 = <std::string::String as PartialEq<&str>>::ne(move _6, _39) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _5) -> [0: bb7, otherwise: bb2];
    }

    bb2: {
        _38 = const _;
        _10 = _38 as &[&str] (PointerCoercion(Unsize));
        _15 = &((*_3).3: std::string::String);
        _14 = core::fmt::rt::Argument::<'_>::new_display::<std::string::String>(_15) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = format(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        _7 = error::Error::rpc_response::<std::string::String>(move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = std::result::Result::<(u64, state::State, SerdeValue), error::Error>::Err(move _7);
        goto -> bb24;
    }

    bb7: {
        _17 = get_id(_3) -> [return: bb8, unwind continue];
    }

    bb8: {
        _16 = <std::result::Result<u64, error::Error> as Try>::branch(move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        _20 = ((_16 as Continue).0: u64);
        _21 = &((*_3).6: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>);
        _22 = discriminant((*_21));
        switchInt(move _22) -> [1: bb13, otherwise: bb16];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(u64, state::State, SerdeValue), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _19) -> [return: bb24, unwind continue];
    }

    bb13: {
        _23 = &(((*_21) as Some).0: diem_json_rpc_types::errors::JsonRpcError);
        _25 = <JsonRpcError as Clone>::clone(_23) -> [return: bb14, unwind continue];
    }

    bb14: {
        _24 = error::Error::json_rpc(move _25) -> [return: bb15, unwind continue];
    }

    bb15: {
        _0 = std::result::Result::<(u64, state::State, SerdeValue), error::Error>::Err(move _24);
        goto -> bb24;
    }

    bb16: {
        _26 = state::State::from_response(_3) -> [return: bb17, unwind continue];
    }

    bb17: {
        _29 = &_26;
        _28 = StateManager::update_state(_1, _4, _2, _29) -> [return: bb18, unwind continue];
    }

    bb18: {
        _27 = <std::result::Result<(), error::Error> as Try>::branch(move _28) -> [return: bb19, unwind continue];
    }

    bb19: {
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb20, 1: bb21, otherwise: bb11];
    }

    bb20: {
        _34 = &((*_3).5: std::option::Option<serde_json::Value>);
        _33 = <std::option::Option<SerdeValue> as Clone>::clone(move _34) -> [return: bb22, unwind continue];
    }

    bb21: {
        _31 = move ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<(u64, state::State, SerdeValue), error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _31) -> [return: bb24, unwind continue];
    }

    bb22: {
        _35 = serde_json::Value::Null;
        _32 = std::option::Option::<SerdeValue>::unwrap_or(move _33, move _35) -> [return: bb23, unwind continue];
    }

    bb23: {
        _37 = move _26;
        _36 = (_20, move _37, move _32);
        _0 = std::result::Result::<(u64, state::State, SerdeValue), error::Error>::Ok(move _36);
        goto -> bb24;
    }

    bb24: {
        return;
    }
}

promoted[0] in validate: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "unsupported jsonrpc version "];
        _0 = &_1;
        return;
    }
}

promoted[1] in validate: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "2.0";
        _0 = &_1;
        return;
    }
}

fn validate_batch(_1: &StateManager, _2: std::option::Option<&state::State>, _3: &[request::JsonRpcRequest], _4: Vec<JsonRpcResponse>) -> std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> {
    debug state_manager => _1;
    debug req_state => _2;
    debug requests => _3;
    debug raw_responses => _4;
    let mut _0: std::result::Result<std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>, error::Error>;
    let mut _5: std::collections::HashMap<u64, std::result::Result<(u64, state::State, serde_json::Value), error::Error>>;
    let mut _6: std::slice::Iter<'_, diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _7: &std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _9: std::option::Option<&diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _10: &mut std::slice::Iter<'_, diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _11: isize;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::Error>, u64>;
    let mut _14: std::result::Result<u64, error::Error>;
    let _15: &&diem_json_rpc_types::response::JsonRpcResponse;
    let mut _16: isize;
    let _20: &&diem_json_rpc_types::response::JsonRpcResponse;
    let _21: std::option::Option<std::result::Result<(u64, state::State, serde_json::Value), error::Error>>;
    let mut _22: &mut std::collections::HashMap<u64, std::result::Result<(u64, state::State, serde_json::Value), error::Error>>;
    let mut _24: std::slice::Iter<'_, request::JsonRpcRequest>;
    let mut _26: std::option::Option<&request::JsonRpcRequest>;
    let mut _27: &mut std::slice::Iter<'_, request::JsonRpcRequest>;
    let mut _28: isize;
    let mut _31: std::option::Option<std::result::Result<(u64, state::State, serde_json::Value), error::Error>>;
    let mut _32: &mut std::collections::HashMap<u64, std::result::Result<(u64, state::State, serde_json::Value), error::Error>>;
    let _33: &u64;
    let _34: u64;
    let mut _35: &request::JsonRpcRequest;
    let mut _36: isize;
    let mut _38: error::Error;
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let _43: &[core::fmt::rt::Argument<'_>; 1];
    let _44: [core::fmt::rt::Argument<'_>; 1];
    let mut _45: core::fmt::rt::Argument<'_>;
    let _46: &std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _48: std::result::Result<(u64, state::State, serde_json::Value), error::Error>;
    let mut _49: {closure@sdk/client/src/lib.rs:146:46: 146:68};
    let mut _50: &&request::JsonRpcRequest;
    let _51: ();
    let mut _52: &mut std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _53: bool;
    let mut _54: &std::collections::HashMap<u64, std::result::Result<(u64, state::State, serde_json::Value), error::Error>>;
    let mut _55: error::Error;
    let mut _57: std::fmt::Arguments<'_>;
    let mut _58: &[&str];
    let mut _59: &[core::fmt::rt::Argument<'_>];
    let _60: &[core::fmt::rt::Argument<'_>; 1];
    let _61: [core::fmt::rt::Argument<'_>; 1];
    let mut _62: core::fmt::rt::Argument<'_>;
    let _63: &std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _64: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
    let mut _67: &diem_json_rpc_types::response::JsonRpcResponse;
    let mut _68: &diem_json_rpc_types::response::JsonRpcResponse;
    let mut _69: bool;
    scope 1 {
        debug responses => _5;
        let mut _8: std::slice::Iter<'_, diem_json_rpc_types::response::JsonRpcResponse>;
        let mut _23: std::vec::Vec<std::result::Result<response::Response<response::MethodResponse>, error::Error>>;
        scope 2 {
            debug iter => _8;
            let _12: &diem_json_rpc_types::response::JsonRpcResponse;
            scope 3 {
                debug raw_response => _12;
                let _17: std::result::Result<std::convert::Infallible, error::Error>;
                let _18: u64;
                scope 4 {
                    debug id => _18;
                    let _19: std::result::Result<(u64, state::State, serde_json::Value), error::Error>;
                    scope 9 {
                        debug response => _19;
                    }
                }
                scope 5 {
                    debug residual => _17;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _18;
                    scope 8 {
                    }
                }
            }
        }
        scope 10 {
            debug result => _23;
            let mut _25: std::slice::Iter<'_, request::JsonRpcRequest>;
            let _56: std::string::String;
            let mut _66: &[&str; 1];
            scope 11 {
                debug iter => _25;
                let _29: &request::JsonRpcRequest;
                scope 12 {
                    debug request => _29;
                    let _30: std::result::Result<(u64, state::State, serde_json::Value), error::Error>;
                    let _39: std::string::String;
                    let mut _65: &[&str; 1];
                    scope 13 {
                        debug response => _30;
                        let _47: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
                        scope 16 {
                            debug response => _47;
                        }
                    }
                    scope 14 {
                        debug response => _37;
                        let _37: std::result::Result<(u64, state::State, serde_json::Value), error::Error>;
                    }
                    scope 15 {
                        debug res => _39;
                    }
                }
            }
            scope 17 {
                debug res => _56;
            }
        }
    }

    bb0: {
        _69 = const false;
        _5 = HashMap::<u64, std::result::Result<(u64, state::State, SerdeValue), error::Error>>::new() -> [return: bb1, unwind: bb46];
    }

    bb1: {
        _7 = &_4;
        _6 = <&Vec<JsonRpcResponse> as IntoIterator>::into_iter(move _7) -> [return: bb2, unwind: bb45];
    }

    bb2: {
        _8 = move _6;
        goto -> bb3;
    }

    bb3: {
        _10 = &mut _8;
        _9 = <std::slice::Iter<'_, JsonRpcResponse> as Iterator>::next(_10) -> [return: bb4, unwind: bb45];
    }

    bb4: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _12 = ((_9 as Some).0: &diem_json_rpc_types::response::JsonRpcResponse);
        _15 = &_12;
        _67 = deref_copy (*_15);
        _14 = get_id(_67) -> [return: bb8, unwind: bb45];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _23 = Vec::<std::result::Result<response::Response<MethodResponse>, error::Error>>::new() -> [return: bb14, unwind: bb45];
    }

    bb8: {
        _13 = <std::result::Result<u64, error::Error> as Try>::branch(move _14) -> [return: bb9, unwind: bb45];
    }

    bb9: {
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb10, 1: bb11, otherwise: bb6];
    }

    bb10: {
        _18 = ((_13 as Continue).0: u64);
        _20 = &_12;
        _68 = deref_copy (*_20);
        _19 = validate(_1, _2, _68, const false) -> [return: bb12, unwind: bb45];
    }

    bb11: {
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::Error>);
        _0 = <std::result::Result<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error> as FromResidual<std::result::Result<Infallible, error::Error>>>::from_residual(move _17) -> [return: bb50, unwind: bb45];
    }

    bb12: {
        _22 = &mut _5;
        _21 = HashMap::<u64, std::result::Result<(u64, state::State, SerdeValue), error::Error>>::insert(move _22, _18, move _19) -> [return: bb13, unwind: bb45];
    }

    bb13: {
        drop(_21) -> [return: bb3, unwind: bb45];
    }

    bb14: {
        _24 = <&[request::JsonRpcRequest] as IntoIterator>::into_iter(_3) -> [return: bb15, unwind: bb44];
    }

    bb15: {
        _25 = move _24;
        goto -> bb16;
    }

    bb16: {
        _27 = &mut _25;
        _26 = <std::slice::Iter<'_, request::JsonRpcRequest> as Iterator>::next(_27) -> [return: bb17, unwind: bb44];
    }

    bb17: {
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb19, 1: bb18, otherwise: bb6];
    }

    bb18: {
        _29 = ((_26 as Some).0: &request::JsonRpcRequest);
        _32 = &mut _5;
        _35 = _29;
        _34 = request::JsonRpcRequest::id(move _35) -> [return: bb20, unwind: bb44];
    }

    bb19: {
        _54 = &_5;
        _53 = HashMap::<u64, std::result::Result<(u64, state::State, SerdeValue), error::Error>>::is_empty(move _54) -> [return: bb30, unwind: bb44];
    }

    bb20: {
        _33 = &_34;
        _31 = HashMap::<u64, std::result::Result<(u64, state::State, SerdeValue), error::Error>>::remove::<u64>(move _32, _33) -> [return: bb21, unwind: bb44];
    }

    bb21: {
        _36 = discriminant(_31);
        switchInt(move _36) -> [1: bb22, otherwise: bb23];
    }

    bb22: {
        _37 = move ((_31 as Some).0: std::result::Result<(u64, state::State, serde_json::Value), error::Error>);
        _69 = const true;
        _30 = move _37;
        _69 = const false;
        _48 = move _30;
        _50 = &_29;
        _49 = {closure@sdk/client/src/lib.rs:146:46: 146:68} { request: move _50 };
        _47 = std::result::Result::<(u64, state::State, SerdeValue), error::Error>::and_then::<response::Response<MethodResponse>, {closure@sdk/client/src/lib.rs:146:46: 146:68}>(move _48, move _49) -> [return: bb28, unwind: bb49];
    }

    bb23: {
        _65 = const _;
        _41 = _65 as &[&str] (PointerCoercion(Unsize));
        _46 = &_4;
        _45 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<JsonRpcResponse>>(_46) -> [return: bb24, unwind: bb43];
    }

    bb24: {
        _44 = [move _45];
        _43 = &_44;
        _42 = _43 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _40 = Arguments::<'_>::new_v1(move _41, move _42) -> [return: bb25, unwind: bb43];
    }

    bb25: {
        _39 = format(move _40) -> [return: bb26, unwind: bb43];
    }

    bb26: {
        _38 = error::Error::batch::<std::string::String>(move _39) -> [return: bb27, unwind: bb43];
    }

    bb27: {
        _0 = std::result::Result::<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>::Err(move _38);
        drop(_31) -> [return: bb38, unwind: bb44];
    }

    bb28: {
        _52 = &mut _23;
        _51 = Vec::<std::result::Result<response::Response<MethodResponse>, error::Error>>::push(move _52, move _47) -> [return: bb29, unwind: bb49];
    }

    bb29: {
        _69 = const false;
        goto -> bb16;
    }

    bb30: {
        switchInt(move _53) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _64 = move _23;
        _0 = std::result::Result::<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>::Ok(move _64);
        drop(_5) -> [return: bb37, unwind: bb46];
    }

    bb32: {
        _66 = const _;
        _58 = _66 as &[&str] (PointerCoercion(Unsize));
        _63 = &_4;
        _62 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<JsonRpcResponse>>(_63) -> [return: bb33, unwind: bb44];
    }

    bb33: {
        _61 = [move _62];
        _60 = &_61;
        _59 = _60 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _57 = Arguments::<'_>::new_v1(move _58, move _59) -> [return: bb34, unwind: bb44];
    }

    bb34: {
        _56 = format(move _57) -> [return: bb35, unwind: bb44];
    }

    bb35: {
        _55 = error::Error::batch::<std::string::String>(move _56) -> [return: bb36, unwind: bb44];
    }

    bb36: {
        _0 = std::result::Result::<Vec<std::result::Result<response::Response<MethodResponse>, error::Error>>, error::Error>::Err(move _55);
        goto -> bb39;
    }

    bb37: {
        drop(_4) -> [return: bb42, unwind continue];
    }

    bb38: {
        _69 = const false;
        goto -> bb39;
    }

    bb39: {
        drop(_23) -> [return: bb40, unwind: bb45];
    }

    bb40: {
        drop(_5) -> [return: bb41, unwind: bb46];
    }

    bb41: {
        drop(_4) -> [return: bb42, unwind continue];
    }

    bb42: {
        return;
    }

    bb43 (cleanup): {
        drop(_31) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_23) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_5) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_4) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48 (cleanup): {
        drop(_30) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        switchInt(_69) -> [0: bb44, otherwise: bb48];
    }

    bb50: {
        goto -> bb40;
    }
}

promoted[0] in validate_batch: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[1] in validate_batch: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn validate_batch::{closure#0}(_1: {closure@sdk/client/src/lib.rs:146:46: 146:68}, _2: (u64, state::State, SerdeValue)) -> std::result::Result<response::Response<MethodResponse>, error::Error> {
    debug request => (*(_1.0: &&request::JsonRpcRequest));
    let mut _0: std::result::Result<response::Response<response::MethodResponse>, error::Error>;
    let _3: u64;
    let _4: state::State;
    let _5: serde_json::Value;
    let mut _6: std::result::Result<response::MethodResponse, error::Error>;
    let mut _7: Method;
    let mut _8: serde_json::Value;
    let mut _9: {closure@sdk/client/src/lib.rs:148:26: 148:34};
    let mut _10: &&request::JsonRpcRequest;
    let mut _11: &request::JsonRpcRequest;
    let mut _12: bool;
    scope 1 {
        debug _id => _3;
        debug state => _4;
        debug result => _5;
    }

    bb0: {
        _12 = const false;
        _3 = (_2.0: u64);
        _4 = move (_2.1: state::State);
        _12 = const true;
        _5 = move (_2.2: serde_json::Value);
        _10 = deref_copy (_1.0: &&request::JsonRpcRequest);
        _11 = deref_copy (*_10);
        _7 = request::JsonRpcRequest::method(_11) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _12 = const false;
        _8 = move _5;
        _6 = MethodResponse::from_json(move _7, move _8) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _9 = {closure@sdk/client/src/lib.rs:148:26: 148:34} { state: move _4 };
        _0 = std::result::Result::<MethodResponse, error::Error>::map::<response::Response<MethodResponse>, {closure@sdk/client/src/lib.rs:148:26: 148:34}>(move _6, move _9) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _12 = const false;
        return;
    }

    bb4 (cleanup): {
        resume;
    }

    bb5 (cleanup): {
        drop(_5) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        switchInt(_12) -> [0: bb4, otherwise: bb5];
    }
}

fn validate_batch::{closure#0}::{closure#0}(_1: {closure@sdk/client/src/lib.rs:148:26: 148:34}, _2: MethodResponse) -> response::Response<MethodResponse> {
    debug result => _2;
    debug state => (_1.0: state::State);
    let mut _0: response::Response<response::MethodResponse>;
    let mut _3: state::State;

    bb0: {
        _3 = move (_1.0: state::State);
        _0 = response::Response::<MethodResponse>::new(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn get_id(_1: &JsonRpcResponse) -> std::result::Result<u64, error::Error> {
    debug resp => _1;
    let mut _0: std::result::Result<u64, error::Error>;
    let mut _2: &std::option::Option<serde_json::Value>;
    let mut _3: isize;
    let mut _5: std::result::Result<u64, serde_json::Error>;
    let mut _6: serde_json::Value;
    let mut _7: isize;
    let mut _9: error::Error;
    let mut _10: error::Error;
    scope 1 {
        debug id => _8;
    }
    scope 2 {
        debug id => _4;
        let _4: &serde_json::Value;
        scope 3 {
            debug index => _8;
            let _8: u64;
        }
    }

    bb0: {
        _2 = &((*_1).4: std::option::Option<serde_json::Value>);
        _3 = discriminant((*_2));
        switchInt(move _3) -> [1: bb1, otherwise: bb8];
    }

    bb1: {
        _4 = &(((*_2) as Some).0: serde_json::Value);
        _6 = <SerdeValue as Clone>::clone(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = from_value::<u64>(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = ((_5 as Ok).0: u64);
        drop(_5) -> [return: bb7, unwind continue];
    }

    bb5: {
        _9 = error::Error::rpc_response::<&str>(const "invalid response id type") -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _0 = std::result::Result::<u64, error::Error>::Err(move _9);
        drop(_5) -> [return: bb10, unwind continue];
    }

    bb7: {
        _0 = std::result::Result::<u64, error::Error>::Ok(_8);
        goto -> bb10;
    }

    bb8: {
        _10 = error::Error::rpc_response::<&str>(const "missing response id") -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = std::result::Result::<u64, error::Error>::Err(move _10);
        goto -> bb10;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_5) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

fn <impl at sdk/client/src/lib.rs:175:14: 175:19>::fmt(_1: &BatchResponse, _2: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
    let _8: &std::boxed::Box<diem_json_rpc_types::response::JsonRpcResponse>;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&std::boxed::Box<diem_json_rpc_types::response::JsonRpcResponse>;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as Error).0: std::boxed::Box<diem_json_rpc_types::response::JsonRpcResponse>);
        _9 = const "Error";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Success).0: std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>);
        _5 = const "Success";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        _0 = std::fmt::Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

const _: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:175:21: 175:32>::deserialize(_1: __D) -> std::result::Result<BatchResponse, <__D as _::_serde::Deserializer<'_>>::Error> {
    debug __deserializer => _1;
    let mut _0: std::result::Result<BatchResponse, <__D as _::_serde::Deserializer<'_>>::Error>;
    let _2: _::_serde::__private::de::content::Content<'_>;
    let mut _3: std::result::Result<_::_serde::__private::de::content::Content<'_>, <__D as _::_serde::Deserializer<'_>>::Error>;
    let mut _4: isize;
    let _5: _::_serde::__private::de::content::Content<'_>;
    let _6: <__D as _::_serde::Deserializer<'_>>::Error;
    let mut _7: std::result::Result<BatchResponse, <__D as _::_serde::Deserializer<'_>>::Error>;
    let mut _8: std::result::Result<std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>, <__D as _::_serde::Deserializer<'_>>::Error>;
    let mut _9: _::_serde::__private::de::content::ContentRefDeserializer<'_, '_, <__D as _::_serde::Deserializer<'_>>::Error>;
    let _10: &_::_serde::__private::de::content::Content<'_>;
    let mut _11: isize;
    let mut _13: std::result::Result<BatchResponse, <__D as _::_serde::Deserializer<'_>>::Error>;
    let mut _14: std::result::Result<std::boxed::Box<diem_json_rpc_types::response::JsonRpcResponse>, <__D as _::_serde::Deserializer<'_>>::Error>;
    let mut _15: _::_serde::__private::de::content::ContentRefDeserializer<'_, '_, <__D as _::_serde::Deserializer<'_>>::Error>;
    let _16: &_::_serde::__private::de::content::Content<'_>;
    let mut _17: isize;
    let mut _19: <__D as _::_serde::Deserializer<'_>>::Error;
    let mut _20: isize;
    let mut _21: isize;
    scope 1 {
        debug __content => _2;
        scope 4 {
            debug __ok => _12;
            let _12: BatchResponse;
        }
        scope 5 {
            debug __ok => _18;
            let _18: BatchResponse;
        }
    }
    scope 2 {
        debug __val => _5;
    }
    scope 3 {
        debug __err => _6;
    }

    bb0: {
        _3 = <_::_serde::__private::de::content::Content<'_> as Deserialize<'_>>::deserialize::<__D>(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _6 = move ((_3 as Err).0: <__D as _::_serde::Deserializer<'_>>::Error);
        _0 = std::result::Result::<BatchResponse, <__D as _::_serde::Deserializer<'_>>::Error>::Err(move _6);
        goto -> bb19;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = move ((_3 as Ok).0: _::_serde::__private::de::content::Content<'_>);
        _2 = move _5;
        _10 = &_2;
        _9 = ContentRefDeserializer::<'_, '_, <__D as _::_serde::Deserializer<'_>>::Error>::new(_10) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        _8 = <Vec<JsonRpcResponse> as Deserialize<'_>>::deserialize::<ContentRefDeserializer<'_, '_, <__D as _::_serde::Deserializer<'_>>::Error>>(move _9) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        _7 = std::result::Result::<Vec<JsonRpcResponse>, <__D as _::_serde::Deserializer<'_>>::Error>::map::<BatchResponse, fn(Vec<JsonRpcResponse>) -> BatchResponse {BatchResponse::Success}>(move _8, BatchResponse::Success) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb8, otherwise: bb9];
    }

    bb8: {
        _12 = move ((_7 as Ok).0: BatchResponse);
        _0 = std::result::Result::<BatchResponse, <__D as _::_serde::Deserializer<'_>>::Error>::Ok(move _12);
        _21 = discriminant(_7);
        switchInt(move _21) -> [0: bb18, otherwise: bb23];
    }

    bb9: {
        drop(_7) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        _16 = &_2;
        _15 = ContentRefDeserializer::<'_, '_, <__D as _::_serde::Deserializer<'_>>::Error>::new(_16) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        _14 = <Box<JsonRpcResponse> as Deserialize<'_>>::deserialize::<ContentRefDeserializer<'_, '_, <__D as _::_serde::Deserializer<'_>>::Error>>(move _15) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        _13 = std::result::Result::<Box<JsonRpcResponse>, <__D as _::_serde::Deserializer<'_>>::Error>::map::<BatchResponse, fn(Box<JsonRpcResponse>) -> BatchResponse {BatchResponse::Error}>(move _14, BatchResponse::Error) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _17 = discriminant(_13);
        switchInt(move _17) -> [0: bb14, otherwise: bb15];
    }

    bb14: {
        _18 = move ((_13 as Ok).0: BatchResponse);
        _0 = std::result::Result::<BatchResponse, <__D as _::_serde::Deserializer<'_>>::Error>::Ok(move _18);
        _20 = discriminant(_13);
        switchInt(move _20) -> [0: bb18, otherwise: bb22];
    }

    bb15: {
        drop(_13) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        _19 = <<__D as _::_serde::Deserializer<'_>>::Error as _::_serde::de::Error>::custom::<&str>(const "data did not match any variant of untagged enum BatchResponse") -> [return: bb17, unwind: bb20];
    }

    bb17: {
        _0 = std::result::Result::<BatchResponse, <__D as _::_serde::Deserializer<'_>>::Error>::Err(move _19);
        drop(_2) -> [return: bb19, unwind continue];
    }

    bb18: {
        drop(_2) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_2) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22: {
        drop(_13) -> [return: bb18, unwind: bb20];
    }

    bb23: {
        drop(_7) -> [return: bb18, unwind: bb20];
    }
}

const _: () = {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn _::<impl at sdk/client/src/lib.rs:175:34: 175:43>::serialize(_1: &BatchResponse, _2: __S) -> std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error> {
    debug self => _1;
    debug __serializer => _2;
    let mut _0: std::result::Result<<__S as _::_serde::Serializer>::Ok, <__S as _::_serde::Serializer>::Error>;
    let mut _3: isize;
    let _4: &std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
    let _5: &std::boxed::Box<diem_json_rpc_types::response::JsonRpcResponse>;
    scope 1 {
        debug __field0 => _4;
    }
    scope 2 {
        debug __field0 => _5;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = &(((*_1) as Error).0: std::boxed::Box<diem_json_rpc_types::response::JsonRpcResponse>);
        _0 = <Box<JsonRpcResponse> as Serialize>::serialize::<__S>(_5, move _2) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Success).0: std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>);
        _0 = <Vec<JsonRpcResponse> as Serialize>::serialize::<__S>(_4, move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn <impl at sdk/client/src/lib.rs:182:5: 182:23>::success(_1: BatchResponse) -> std::result::Result<Vec<JsonRpcResponse>, error::Error> {
    debug self => _1;
    let mut _0: std::result::Result<std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>, error::Error>;
    let mut _2: isize;
    let _3: std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>;
    let _4: std::boxed::Box<diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _5: error::Error;
    let mut _6: diem_json_rpc_types::errors::JsonRpcError;
    let mut _7: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>;
    let mut _8: &mut std::boxed::Box<diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _9: ();
    let mut _10: &mut std::boxed::Box<diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _11: ();
    let mut _12: &mut std::boxed::Box<diem_json_rpc_types::response::JsonRpcResponse>;
    let mut _13: ();
    let mut _14: *const diem_json_rpc_types::response::JsonRpcResponse;
    let mut _15: *const diem_json_rpc_types::response::JsonRpcResponse;
    let mut _16: *const diem_json_rpc_types::response::JsonRpcResponse;
    let mut _17: *const diem_json_rpc_types::response::JsonRpcResponse;
    let mut _18: *const diem_json_rpc_types::response::JsonRpcResponse;
    let mut _19: *const diem_json_rpc_types::response::JsonRpcResponse;
    let mut _20: *const diem_json_rpc_types::response::JsonRpcResponse;
    let mut _21: *const diem_json_rpc_types::response::JsonRpcResponse;
    let mut _22: *const diem_json_rpc_types::response::JsonRpcResponse;
    scope 1 {
        debug inner => _3;
    }
    scope 2 {
        debug e => _4;
        let mut _23: *const ();
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: usize;
        let mut _27: usize;
        let mut _28: bool;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = move ((_1 as Error).0: std::boxed::Box<diem_json_rpc_types::response::JsonRpcResponse>);
        _22 = (((_4.0: std::ptr::Unique<diem_json_rpc_types::response::JsonRpcResponse>).0: std::ptr::NonNull<diem_json_rpc_types::response::JsonRpcResponse>).0: *const diem_json_rpc_types::response::JsonRpcResponse);
        _23 = _22 as *const () (PtrToPtr);
        _24 = _23 as usize (Transmute);
        _25 = AlignOf(diem_json_rpc_types::response::JsonRpcResponse);
        _26 = Sub(_25, const 1_usize);
        _27 = BitAnd(_24, _26);
        _28 = Eq(_27, const 0_usize);
        assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb18, unwind unreachable];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = move ((_1 as Success).0: std::vec::Vec<diem_json_rpc_types::response::JsonRpcResponse>);
        _0 = std::result::Result::<Vec<JsonRpcResponse>, error::Error>::Ok(move _3);
        goto -> bb13;
    }

    bb4: {
        _5 = error::Error::json_rpc(move _6) -> [return: bb5, unwind: bb17];
    }

    bb5: {
        _0 = std::result::Result::<Vec<JsonRpcResponse>, error::Error>::Err(move _5);
        _18 = deref_copy (((_4.0: std::ptr::Unique<diem_json_rpc_types::response::JsonRpcResponse>).0: std::ptr::NonNull<diem_json_rpc_types::response::JsonRpcResponse>).0: *const diem_json_rpc_types::response::JsonRpcResponse);
        drop(((*_18).3: std::string::String)) -> [return: bb12, unwind: bb9];
    }

    bb6 (cleanup): {
        resume;
    }

    bb7 (cleanup): {
        _10 = &mut _4;
        _11 = <Box<JsonRpcResponse> as Drop>::drop(move _10) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        _14 = deref_copy (((_4.0: std::ptr::Unique<diem_json_rpc_types::response::JsonRpcResponse>).0: std::ptr::NonNull<diem_json_rpc_types::response::JsonRpcResponse>).0: *const diem_json_rpc_types::response::JsonRpcResponse);
        drop(((*_14).5: std::option::Option<serde_json::Value>)) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        _15 = deref_copy (((_4.0: std::ptr::Unique<diem_json_rpc_types::response::JsonRpcResponse>).0: std::ptr::NonNull<diem_json_rpc_types::response::JsonRpcResponse>).0: *const diem_json_rpc_types::response::JsonRpcResponse);
        drop(((*_15).4: std::option::Option<serde_json::Value>)) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb10: {
        _8 = &mut _4;
        _9 = <Box<JsonRpcResponse> as Drop>::drop(move _8) -> [return: bb13, unwind continue];
    }

    bb11: {
        _16 = deref_copy (((_4.0: std::ptr::Unique<diem_json_rpc_types::response::JsonRpcResponse>).0: std::ptr::NonNull<diem_json_rpc_types::response::JsonRpcResponse>).0: *const diem_json_rpc_types::response::JsonRpcResponse);
        drop(((*_16).5: std::option::Option<serde_json::Value>)) -> [return: bb10, unwind: bb7];
    }

    bb12: {
        _17 = deref_copy (((_4.0: std::ptr::Unique<diem_json_rpc_types::response::JsonRpcResponse>).0: std::ptr::NonNull<diem_json_rpc_types::response::JsonRpcResponse>).0: *const diem_json_rpc_types::response::JsonRpcResponse);
        drop(((*_17).4: std::option::Option<serde_json::Value>)) -> [return: bb11, unwind: bb8];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        _12 = &mut _4;
        _13 = <Box<JsonRpcResponse> as Drop>::drop(move _12) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        _19 = deref_copy (((_4.0: std::ptr::Unique<diem_json_rpc_types::response::JsonRpcResponse>).0: std::ptr::NonNull<diem_json_rpc_types::response::JsonRpcResponse>).0: *const diem_json_rpc_types::response::JsonRpcResponse);
        drop(((*_19).5: std::option::Option<serde_json::Value>)) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        _20 = deref_copy (((_4.0: std::ptr::Unique<diem_json_rpc_types::response::JsonRpcResponse>).0: std::ptr::NonNull<diem_json_rpc_types::response::JsonRpcResponse>).0: *const diem_json_rpc_types::response::JsonRpcResponse);
        drop(((*_20).4: std::option::Option<serde_json::Value>)) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        _21 = deref_copy (((_4.0: std::ptr::Unique<diem_json_rpc_types::response::JsonRpcResponse>).0: std::ptr::NonNull<diem_json_rpc_types::response::JsonRpcResponse>).0: *const diem_json_rpc_types::response::JsonRpcResponse);
        drop(((*_21).3: std::string::String)) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb18: {
        _7 = move ((*_22).6: std::option::Option<diem_json_rpc_types::errors::JsonRpcError>);
        _6 = std::option::Option::<JsonRpcError>::unwrap(move _7) -> [return: bb4, unwind: bb17];
    }

    bb19 (cleanup): {
        goto -> bb6;
    }

    bb20 (cleanup): {
        goto -> bb6;
    }
}

fn error::Kind::HttpStatus(_1: u16) -> error::Kind {
    let mut _0: error::Kind;

    bb0: {
        _0 = error::Kind::HttpStatus(move _1);
        return;
    }
}

// MIR FOR CTFE
fn error::Kind::HttpStatus(_1: u16) -> error::Kind {
    let mut _0: error::Kind;

    bb0: {
        _0 = error::Kind::HttpStatus(move _1);
        return;
    }
}

fn StreamKind::HttpStatus(_1: u16) -> StreamKind {
    let mut _0: error::StreamKind;

    bb0: {
        _0 = StreamKind::HttpStatus(move _1);
        return;
    }
}

// MIR FOR CTFE
fn StreamKind::HttpStatus(_1: u16) -> StreamKind {
    let mut _0: error::StreamKind;

    bb0: {
        _0 = StreamKind::HttpStatus(move _1);
        return;
    }
}

fn StreamKind::IdNotFound(_1: std::option::Option<StreamJsonRpcResponse>) -> StreamKind {
    let mut _0: error::StreamKind;

    bb0: {
        _0 = StreamKind::IdNotFound(move _1);
        return;
    }
}

// MIR FOR CTFE
fn StreamKind::IdNotFound(_1: std::option::Option<StreamJsonRpcResponse>) -> StreamKind {
    let mut _0: error::StreamKind;

    bb0: {
        _0 = StreamKind::IdNotFound(move _1);
        return;
    }
}

fn WaitForTransactionError::GetTransactionError(_1: error::Error) -> WaitForTransactionError {
    let mut _0: error::WaitForTransactionError;

    bb0: {
        _0 = WaitForTransactionError::GetTransactionError(move _1);
        return;
    }
}

// MIR FOR CTFE
fn WaitForTransactionError::GetTransactionError(_1: error::Error) -> WaitForTransactionError {
    let mut _0: error::WaitForTransactionError;

    bb0: {
        _0 = WaitForTransactionError::GetTransactionError(move _1);
        return;
    }
}

fn WaitForTransactionError::TransactionHashMismatchError(_1: TransactionView) -> WaitForTransactionError {
    let mut _0: error::WaitForTransactionError;

    bb0: {
        _0 = WaitForTransactionError::TransactionHashMismatchError(move _1);
        return;
    }
}

// MIR FOR CTFE
fn WaitForTransactionError::TransactionHashMismatchError(_1: TransactionView) -> WaitForTransactionError {
    let mut _0: error::WaitForTransactionError;

    bb0: {
        _0 = WaitForTransactionError::TransactionHashMismatchError(move _1);
        return;
    }
}

fn WaitForTransactionError::TransactionExecutionFailed(_1: TransactionView) -> WaitForTransactionError {
    let mut _0: error::WaitForTransactionError;

    bb0: {
        _0 = WaitForTransactionError::TransactionExecutionFailed(move _1);
        return;
    }
}

// MIR FOR CTFE
fn WaitForTransactionError::TransactionExecutionFailed(_1: TransactionView) -> WaitForTransactionError {
    let mut _0: error::WaitForTransactionError;

    bb0: {
        _0 = WaitForTransactionError::TransactionExecutionFailed(move _1);
        return;
    }
}

fn Ip::Address(_1: IpAddr) -> Ip {
    let mut _0: blocking::proxy::Ip;

    bb0: {
        _0 = Ip::Address(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Ip::Address(_1: IpAddr) -> Ip {
    let mut _0: blocking::proxy::Ip;

    bb0: {
        _0 = Ip::Address(move _1);
        return;
    }
}

fn Ip::Network(_1: IpNet) -> Ip {
    let mut _0: blocking::proxy::Ip;

    bb0: {
        _0 = Ip::Network(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Ip::Network(_1: IpNet) -> Ip {
    let mut _0: blocking::proxy::Ip;

    bb0: {
        _0 = Ip::Network(move _1);
        return;
    }
}

fn IpMatcher(_1: Vec<Ip>) -> IpMatcher {
    let mut _0: blocking::proxy::IpMatcher;

    bb0: {
        _0 = IpMatcher(move _1);
        return;
    }
}

// MIR FOR CTFE
fn IpMatcher(_1: Vec<Ip>) -> IpMatcher {
    let mut _0: blocking::proxy::IpMatcher;

    bb0: {
        _0 = IpMatcher(move _1);
        return;
    }
}

fn DomainMatcher(_1: Vec<std::string::String>) -> DomainMatcher {
    let mut _0: blocking::proxy::DomainMatcher;

    bb0: {
        _0 = DomainMatcher(move _1);
        return;
    }
}

// MIR FOR CTFE
fn DomainMatcher(_1: Vec<std::string::String>) -> DomainMatcher {
    let mut _0: blocking::proxy::DomainMatcher;

    bb0: {
        _0 = DomainMatcher(move _1);
        return;
    }
}

fn request::MethodRequest::Submit(_1: (std::string::String,)) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::Submit(move _1);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::Submit(_1: (std::string::String,)) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::Submit(move _1);
        return;
    }
}

fn request::MethodRequest::GetMetadata(_1: (std::option::Option<u64>,)) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetMetadata(move _1);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetMetadata(_1: (std::option::Option<u64>,)) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetMetadata(move _1);
        return;
    }
}

fn request::MethodRequest::GetAccount(_1: AccountAddress, _2: std::option::Option<u64>) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccount(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetAccount(_1: AccountAddress, _2: std::option::Option<u64>) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccount(move _1, move _2);
        return;
    }
}

fn request::MethodRequest::GetTransactions(_1: u64, _2: u64, _3: bool) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetTransactions(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetTransactions(_1: u64, _2: u64, _3: bool) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetTransactions(move _1, move _2, move _3);
        return;
    }
}

fn request::MethodRequest::GetAccountTransaction(_1: AccountAddress, _2: u64, _3: bool) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccountTransaction(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetAccountTransaction(_1: AccountAddress, _2: u64, _3: bool) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccountTransaction(move _1, move _2, move _3);
        return;
    }
}

fn request::MethodRequest::GetAccountTransactions(_1: AccountAddress, _2: u64, _3: u64, _4: bool) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccountTransactions(move _1, move _2, move _3, move _4);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetAccountTransactions(_1: AccountAddress, _2: u64, _3: u64, _4: bool) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccountTransactions(move _1, move _2, move _3, move _4);
        return;
    }
}

fn request::MethodRequest::GetEvents(_1: EventKey, _2: u64, _3: u64) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetEvents(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetEvents(_1: EventKey, _2: u64, _3: u64) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetEvents(move _1, move _2, move _3);
        return;
    }
}

fn request::MethodRequest::GetCurrencies(_1: [(); 0]) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetCurrencies(move _1);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetCurrencies(_1: [(); 0]) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetCurrencies(move _1);
        return;
    }
}

fn request::MethodRequest::GetNetworkStatus(_1: [(); 0]) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetNetworkStatus(move _1);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetNetworkStatus(_1: [(); 0]) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetNetworkStatus(move _1);
        return;
    }
}

fn request::MethodRequest::GetStateProof(_1: (u64,)) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetStateProof(move _1);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetStateProof(_1: (u64,)) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetStateProof(move _1);
        return;
    }
}

fn request::MethodRequest::GetAccumulatorConsistencyProof(_1: std::option::Option<u64>, _2: std::option::Option<u64>) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccumulatorConsistencyProof(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetAccumulatorConsistencyProof(_1: std::option::Option<u64>, _2: std::option::Option<u64>) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccumulatorConsistencyProof(move _1, move _2);
        return;
    }
}

fn request::MethodRequest::GetAccountStateWithProof(_1: AccountAddress, _2: std::option::Option<u64>, _3: std::option::Option<u64>) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccountStateWithProof(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetAccountStateWithProof(_1: AccountAddress, _2: std::option::Option<u64>, _3: std::option::Option<u64>) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccountStateWithProof(move _1, move _2, move _3);
        return;
    }
}

fn request::MethodRequest::GetTransactionsWithProofs(_1: u64, _2: u64, _3: bool) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetTransactionsWithProofs(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetTransactionsWithProofs(_1: u64, _2: u64, _3: bool) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetTransactionsWithProofs(move _1, move _2, move _3);
        return;
    }
}

fn request::MethodRequest::GetAccountTransactionsWithProofs(_1: AccountAddress, _2: u64, _3: u64, _4: bool, _5: std::option::Option<u64>) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccountTransactionsWithProofs(move _1, move _2, move _3, move _4, move _5);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetAccountTransactionsWithProofs(_1: AccountAddress, _2: u64, _3: u64, _4: bool, _5: std::option::Option<u64>) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetAccountTransactionsWithProofs(move _1, move _2, move _3, move _4, move _5);
        return;
    }
}

fn request::MethodRequest::GetEventsWithProofs(_1: EventKey, _2: u64, _3: u64) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetEventsWithProofs(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetEventsWithProofs(_1: EventKey, _2: u64, _3: u64) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetEventsWithProofs(move _1, move _2, move _3);
        return;
    }
}

fn request::MethodRequest::GetEventByVersionWithProof(_1: EventKey, _2: std::option::Option<u64>) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetEventByVersionWithProof(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn request::MethodRequest::GetEventByVersionWithProof(_1: EventKey, _2: std::option::Option<u64>) -> request::MethodRequest {
    let mut _0: request::MethodRequest;

    bb0: {
        _0 = request::MethodRequest::GetEventByVersionWithProof(move _1, move _2);
        return;
    }
}

fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::__Field::__other(_1: _::_serde::__private::de::content::Content<'_>) -> request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_> {
    let mut _0: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;

    bb0: {
        _0 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _1);
        return;
    }
}

// MIR FOR CTFE
fn request::_::<impl at sdk/client/src/request.rs:173:17: 173:28>::deserialize::__Field::__other(_1: _::_serde::__private::de::content::Content<'_>) -> request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_> {
    let mut _0: request::_::<impl _::_serde::Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field<'_>;

    bb0: {
        _0 = request::_::<impl Deserialize<'de> for request::JsonRpcRequest>::deserialize::__Field::<'_>::__other(move _1);
        return;
    }
}

fn MethodResponse::GetMetadata(_1: MetadataView) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetMetadata(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetMetadata(_1: MetadataView) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetMetadata(move _1);
        return;
    }
}

fn MethodResponse::GetAccount(_1: std::option::Option<AccountView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetAccount(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetAccount(_1: std::option::Option<AccountView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetAccount(move _1);
        return;
    }
}

fn MethodResponse::GetTransactions(_1: Vec<TransactionView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetTransactions(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetTransactions(_1: Vec<TransactionView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetTransactions(move _1);
        return;
    }
}

fn MethodResponse::GetAccountTransaction(_1: std::option::Option<TransactionView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetAccountTransaction(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetAccountTransaction(_1: std::option::Option<TransactionView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetAccountTransaction(move _1);
        return;
    }
}

fn MethodResponse::GetAccountTransactions(_1: Vec<TransactionView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetAccountTransactions(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetAccountTransactions(_1: Vec<TransactionView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetAccountTransactions(move _1);
        return;
    }
}

fn MethodResponse::GetEvents(_1: Vec<EventView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetEvents(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetEvents(_1: Vec<EventView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetEvents(move _1);
        return;
    }
}

fn MethodResponse::GetCurrencies(_1: Vec<CurrencyInfoView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetCurrencies(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetCurrencies(_1: Vec<CurrencyInfoView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetCurrencies(move _1);
        return;
    }
}

fn MethodResponse::GetNetworkStatus(_1: u64) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetNetworkStatus(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetNetworkStatus(_1: u64) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetNetworkStatus(move _1);
        return;
    }
}

fn MethodResponse::GetStateProof(_1: StateProofView) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetStateProof(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetStateProof(_1: StateProofView) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetStateProof(move _1);
        return;
    }
}

fn MethodResponse::GetAccumulatorConsistencyProof(_1: AccumulatorConsistencyProofView) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetAccumulatorConsistencyProof(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetAccumulatorConsistencyProof(_1: AccumulatorConsistencyProofView) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetAccumulatorConsistencyProof(move _1);
        return;
    }
}

fn MethodResponse::GetAccountStateWithProof(_1: AccountStateWithProofView) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetAccountStateWithProof(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetAccountStateWithProof(_1: AccountStateWithProofView) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetAccountStateWithProof(move _1);
        return;
    }
}

fn MethodResponse::GetTransactionsWithProofs(_1: std::option::Option<TransactionsWithProofsView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetTransactionsWithProofs(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetTransactionsWithProofs(_1: std::option::Option<TransactionsWithProofsView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetTransactionsWithProofs(move _1);
        return;
    }
}

fn MethodResponse::GetAccountTransactionsWithProofs(_1: AccountTransactionsWithProofView) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetAccountTransactionsWithProofs(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetAccountTransactionsWithProofs(_1: AccountTransactionsWithProofView) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetAccountTransactionsWithProofs(move _1);
        return;
    }
}

fn MethodResponse::GetEventsWithProofs(_1: Vec<EventWithProofView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetEventsWithProofs(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetEventsWithProofs(_1: Vec<EventWithProofView>) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetEventsWithProofs(move _1);
        return;
    }
}

fn MethodResponse::GetEventByVersionWithProof(_1: EventByVersionWithProofView) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetEventByVersionWithProof(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MethodResponse::GetEventByVersionWithProof(_1: EventByVersionWithProofView) -> MethodResponse {
    let mut _0: response::MethodResponse;

    bb0: {
        _0 = MethodResponse::GetEventByVersionWithProof(move _1);
        return;
    }
}

fn BatchResponse::Success(_1: Vec<JsonRpcResponse>) -> BatchResponse {
    let mut _0: BatchResponse;

    bb0: {
        _0 = BatchResponse::Success(move _1);
        return;
    }
}

// MIR FOR CTFE
fn BatchResponse::Success(_1: Vec<JsonRpcResponse>) -> BatchResponse {
    let mut _0: BatchResponse;

    bb0: {
        _0 = BatchResponse::Success(move _1);
        return;
    }
}

fn BatchResponse::Error(_1: Box<JsonRpcResponse>) -> BatchResponse {
    let mut _0: BatchResponse;

    bb0: {
        _0 = BatchResponse::Error(move _1);
        return;
    }
}

// MIR FOR CTFE
fn BatchResponse::Error(_1: Box<JsonRpcResponse>) -> BatchResponse {
    let mut _0: BatchResponse;

    bb0: {
        _0 = BatchResponse::Error(move _1);
        return;
    }
}
